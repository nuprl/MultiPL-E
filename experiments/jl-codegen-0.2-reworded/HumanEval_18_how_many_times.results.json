{
  "name": "HumanEval_18_how_many_times",
  "language": "jl",
  "prompt": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n",
  "tests": "using Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
  "stop_tokens": [
    "\nfunction",
    "\nmacro",
    "\n\n"
  ],
  "results": [
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    if substring == \"\"\n        return 0\n    else:\n        return substring.count(substring) + how_many_times(string, substring[1:])\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292758,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: newline not allowed after \":\" used for quoting\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpnlzul8cc.jl:13\nin expression starting at /tmp/tmpnlzul8cc.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    return len(string) - string.indexOf(substring) - substring.length + 1\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpi0tzsmzh.jl:9 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpi0tzsmzh.jl:1\nin expression starting at /tmp/tmpi0tzsmzh.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    if substring == \"\"\n        return 0\n    else:\n        return substring.count(string) + how_many_times(string[1:], substring)\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292758,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: newline not allowed after \":\" used for quoting\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxmx3th44.jl:13\nin expression starting at /tmp/tmpxmx3th44.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    string = string.toLower()\n    substring = substring.toLower()\n    count = 0\n    i = 0\n    while i < len(string):\n        j = i\n        while j < len(string) and substring[0] == string[j]:\n            j += 1\n        if j - i > 0:\n            count += 1\n        i = j\n    return count\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp60uqjks3.jl:15\nin expression starting at /tmp/tmp60uqjks3.jl:15\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    if substring == \"\"\n        return 0\n    else\n        return substring.count(string) + how_many_times(string[1:], substring)\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292758,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0zf43sf3.jl:13\nin expression starting at /tmp/tmp0zf43sf3.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    string = string.toLower()\n    substring = substring.toLower()\n    count = 0\n    i = 0\n    while i < len(string):\n        j = i\n        while j < len(string) and substring[0] == string[j]:\n            j += 1\n        if j - i > 0:\n            count += 1\n        i = j\n    return count\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp60uqjks3.jl:15\nin expression starting at /tmp/tmp60uqjks3.jl:15\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    return how_many_times_helper(string, substring, 0, len(string))\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292758,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpino_6jzt.jl:9 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpino_6jzt.jl:1\nin expression starting at /tmp/tmpino_6jzt.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    return count_overlaping_cases(string, substring)\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpeceim6kn.jl:9 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpeceim6kn.jl:1\nin expression starting at /tmp/tmpeceim6kn.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    string = string.toLower()\n    substring = substring.toLower()\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n    return count\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292758,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0o1pz5n8.jl:14\nin expression starting at /tmp/tmp0o1pz5n8.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    return how_many_times_rec(string, substring, 0)\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpswi1m5kp.jl:9 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpswi1m5kp.jl:1\nin expression starting at /tmp/tmpswi1m5kp.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    string = string.toLower()\n    substring = substring.toLower()\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n    return count\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292758,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0o1pz5n8.jl:14\nin expression starting at /tmp/tmp0o1pz5n8.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    return len(string) - string.indexOf(substring) - 1\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292758,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpkz6o3t7v.jl:9 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpkz6o3t7v.jl:1\nin expression starting at /tmp/tmpkz6o3t7v.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    string = string.toLower()\n    substring = substring.toLower()\n    count = 0\n    i = 0\n    while i < len(string):\n        j = i\n        while j < len(string) and substring[0] == string[j]:\n            j += 1\n        if j - i > 0:\n            count += 1\n        i = j\n    return count\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp60uqjks3.jl:15\nin expression starting at /tmp/tmp60uqjks3.jl:15\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    string = string.toLower()\n    substring = substring.toLower()\n    count = 0\n    i = 0\n    while i < len(string):\n        j = i\n        while j < len(string) and substring[0] == string[j]:\n            j += 1\n        if j - i > 0:\n            count += 1\n        i = j\n    return count\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp60uqjks3.jl:15\nin expression starting at /tmp/tmp60uqjks3.jl:15\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    string = string.toLower()\n    substring = substring.toLower()\n    count = 0\n    i = 0\n    while i < len(string):\n        j = i\n        while j < len(string) and substring[0] == string[j]:\n            j += 1\n        if j - i > 0:\n            count += j - i\n        i = j\n    return count\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppbc7ny1e.jl:15\nin expression starting at /tmp/tmppbc7ny1e.jl:15\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    if substring == \"\"\n        return 0\n    else:\n        return substring.count(substring) + how_many_times(string, substring[1:])\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292758,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: newline not allowed after \":\" used for quoting\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpnlzul8cc.jl:13\nin expression starting at /tmp/tmpnlzul8cc.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    return how_many_times_rec(string, substring, 0, len(string))\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp_qi63wkr.jl:9 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_qi63wkr.jl:1\nin expression starting at /tmp/tmp_qi63wkr.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    return len(string) - string.indexOf(substring) - substring.length + 1\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpi0tzsmzh.jl:9 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpi0tzsmzh.jl:1\nin expression starting at /tmp/tmpi0tzsmzh.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    return len(string) - string.indexOf(substring) - 1\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292758,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpkz6o3t7v.jl:9 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpkz6o3t7v.jl:1\nin expression starting at /tmp/tmpkz6o3t7v.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    return len(string) - string.indexOf(substring) - substring.length + 1\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpi0tzsmzh.jl:9 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpi0tzsmzh.jl:1\nin expression starting at /tmp/tmpi0tzsmzh.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    string = string.toLower()\n    substring = substring.toLower()\n    count = 0\n    i = 0\n    while i < len(string):\n        j = i\n        while j < len(string) and substring[0] == string[j]:\n            j += 1\n        if j - i == len(substring):\n            count += 1\n        i = j\n    return count\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpubpewa4j.jl:15\nin expression starting at /tmp/tmpubpewa4j.jl:15\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    return sum(1 for i in range(0, len(string) - len(substring) + 1) \n               if string[i:i + len(substring)] == substring)\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292758,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp_sf__pcs.jl:9 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_sf__pcs.jl:1\nin expression starting at /tmp/tmp_sf__pcs.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    if substring == \"\" or string == \"\" \n        return 0 \n    else: \n        return substring.count(string) \nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"string\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyh372c7q.jl:10\nin expression starting at /tmp/tmpyh372c7q.jl:10\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    if substring == \"\"\n        return 0\n    else\n        return substring.count(substring) + how_many_times(string, substring[1:])\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpckew6qv2.jl:13\nin expression starting at /tmp/tmpckew6qv2.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    return how_many_times_rec(string, substring, 0, len(string))\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp_qi63wkr.jl:9 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_qi63wkr.jl:1\nin expression starting at /tmp/tmp_qi63wkr.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    return how_many_times_rec(string, substring, 0)\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpswi1m5kp.jl:9 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpswi1m5kp.jl:1\nin expression starting at /tmp/tmpswi1m5kp.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    return how_many_times_rec(string, substring, 0)\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpswi1m5kp.jl:9 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpswi1m5kp.jl:1\nin expression starting at /tmp/tmpswi1m5kp.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    return len(string) - string.indexOf(substring) - 1\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292758,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpkz6o3t7v.jl:9 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpkz6o3t7v.jl:1\nin expression starting at /tmp/tmpkz6o3t7v.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    return how_many_times_rec(string, substring, 0)\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpswi1m5kp.jl:9 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpswi1m5kp.jl:1\nin expression starting at /tmp/tmpswi1m5kp.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    return len(string) - string.indexOf(substring) - 1\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292758,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpkz6o3t7v.jl:9 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpkz6o3t7v.jl:1\nin expression starting at /tmp/tmpkz6o3t7v.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    return how_many_times_rec(string, substring, 0, len(string))\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp_qi63wkr.jl:9 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_qi63wkr.jl:1\nin expression starting at /tmp/tmp_qi63wkr.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    string = string.toLower()\n    substring = substring.toLower()\n    count = 0\n    i = 0\n    while i < len(string):\n        j = i\n        while j < len(string) and substring[0] == string[j]:\n            j += 1\n        if j - i > 0:\n            count += 1\n        i = j\n    return count\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp60uqjks3.jl:15\nin expression starting at /tmp/tmp60uqjks3.jl:15\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    if substring == \"\"\n        return 0\n    else\n        return substring.count(string) + how_many_times(string[1:], substring)\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292758,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0zf43sf3.jl:13\nin expression starting at /tmp/tmp0zf43sf3.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    return how_many_times_rec(string, substring, 0)\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpswi1m5kp.jl:9 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpswi1m5kp.jl:1\nin expression starting at /tmp/tmpswi1m5kp.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    return how_many_times(string, substring, 0, len(string))\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292758,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp3ikkwonw.jl:9 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3ikkwonw.jl:1\nin expression starting at /tmp/tmp3ikkwonw.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    string = string.toLower()\n    substring = substring.toLower()\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n    return count\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292758,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0o1pz5n8.jl:14\nin expression starting at /tmp/tmp0o1pz5n8.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    string = string.toLower()\n    substring = substring.toLower()\n    count = 0\n    i = 0\n    while i < len(string):\n        j = i\n        while j < len(string) and substring[0] == string[j]:\n            j += 1\n        if j - i == len(substring):\n            count += 1\n        i = j\n    return count\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpubpewa4j.jl:15\nin expression starting at /tmp/tmpubpewa4j.jl:15\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    if substring == \"\"\n        return 0\n    else\n        return substring.count(substring) + how_many_times(string, substring[1:])\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpckew6qv2.jl:13\nin expression starting at /tmp/tmpckew6qv2.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    return how_many_times_rec(string, substring, 0, len(string))\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp_qi63wkr.jl:9 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_qi63wkr.jl:1\nin expression starting at /tmp/tmp_qi63wkr.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    if substring == \"\"\n        return 0\n    else\n        return substring.count(substring, 0, string.length())\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmpyca8at3q.jl:10 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyca8at3q.jl:1\nin expression starting at /tmp/tmpyca8at3q.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    return how_many_times_rec(string, substring, 0, len(string))\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp_qi63wkr.jl:9 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_qi63wkr.jl:1\nin expression starting at /tmp/tmp_qi63wkr.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    return how_many_times(string, substring, 0, len(string))\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292758,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp3ikkwonw.jl:9 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3ikkwonw.jl:1\nin expression starting at /tmp/tmp3ikkwonw.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    if substring == \"\"\n        return 0\n    else\n        return substring.count(substring) + how_many_times(string, substring[1:])\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpckew6qv2.jl:13\nin expression starting at /tmp/tmpckew6qv2.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    if substring == \"\"\n        return 0\n    else:\n        return substring.count(substring) + how_many_times(string, substring[1:])\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292758,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: newline not allowed after \":\" used for quoting\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpnlzul8cc.jl:13\nin expression starting at /tmp/tmpnlzul8cc.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    if substring == \"\"\n        return 0\n    else:\n        return substring.count(string) + how_many_times(string[1:], substring)\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292758,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: newline not allowed after \":\" used for quoting\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxmx3th44.jl:13\nin expression starting at /tmp/tmpxmx3th44.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    string = string.toLower()\n    substring = substring.toLower()\n    count = 0\n    i = 0\n    while i < len(string):\n        j = i\n        while j < len(string) and substring[0] == string[j]:\n            j += 1\n        if j - i > 0:\n            count += 1\n        i = j\n    return count\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp60uqjks3.jl:15\nin expression starting at /tmp/tmp60uqjks3.jl:15\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    return how_many_times_rec(string, substring, 0)\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpswi1m5kp.jl:9 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpswi1m5kp.jl:1\nin expression starting at /tmp/tmpswi1m5kp.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    string = string.toLower()\n    substring = substring.toLower()\n    count = 0\n    i = 0\n    while i < len(string):\n        j = i\n        while j < len(string) and substring[0] == string[j]:\n            j += 1\n        if j - i > 0:\n            count += 1\n        i = j\n    return count\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp60uqjks3.jl:15\nin expression starting at /tmp/tmp60uqjks3.jl:15\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    return how_many_times_rec(string, substring, 0, 0)\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp3u5p20_r.jl:9 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3u5p20_r.jl:1\nin expression starting at /tmp/tmp3u5p20_r.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    string = string.toLower()\n    substring = substring.toLower()\n    count = 0\n    i = 0\n    while i < len(string):\n        j = i\n        while j < len(string) and substring[0] == string[j]:\n            j += 1\n        if j - i > 0:\n            count += 1\n        i = j\n    return count\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp60uqjks3.jl:15\nin expression starting at /tmp/tmp60uqjks3.jl:15\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    return len(string) - string.indexOf(substring) - substring.length + 1\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpi0tzsmzh.jl:9 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpi0tzsmzh.jl:1\nin expression starting at /tmp/tmpi0tzsmzh.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    return how_many_times_rec(string, substring, 0, len(string))\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp_qi63wkr.jl:9 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_qi63wkr.jl:1\nin expression starting at /tmp/tmp_qi63wkr.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    return len(string) - string.indexOf(substring) - 1\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292758,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpkz6o3t7v.jl:9 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpkz6o3t7v.jl:1\nin expression starting at /tmp/tmpkz6o3t7v.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    string = string.toLower()\n    substring = substring.toLower()\n    count = 0\n    i = 0\n    while i < len(string):\n        j = i\n        while j < len(string) and substring[0] == string[j]:\n            j += 1\n        if j - i > 0:\n            count += 1\n        i = j\n    return count\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp60uqjks3.jl:15\nin expression starting at /tmp/tmp60uqjks3.jl:15\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    string = string.toLower()\n    substring = substring.toLower()\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n    return count\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292758,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0o1pz5n8.jl:14\nin expression starting at /tmp/tmp0o1pz5n8.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    return how_many_times_rec(string, substring, 0, len(string))\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp_qi63wkr.jl:9 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_qi63wkr.jl:1\nin expression starting at /tmp/tmp_qi63wkr.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    string = string.toLower()\n    substring = substring.toLower()\n    count = 0\n    i = 0\n    while i < len(string):\n        j = i\n        while j < len(string) and substring[0] == string[j]:\n            j += 1\n        if j - i > 0:\n            count += 1\n        i = j\n    return count\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp60uqjks3.jl:15\nin expression starting at /tmp/tmp60uqjks3.jl:15\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    return len(string) - string.indexOf(substring) - substring.length + 1\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpi0tzsmzh.jl:9 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpi0tzsmzh.jl:1\nin expression starting at /tmp/tmpi0tzsmzh.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    if substring == \"\" then\n        return 0\n    else\n        return substring.count(string, 0, substring.length)\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmpv4as7a2n.jl:10 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpv4as7a2n.jl:1\nin expression starting at /tmp/tmpv4as7a2n.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    return how_many_times_rec(string, substring, 0, len(string))\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp_qi63wkr.jl:9 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_qi63wkr.jl:1\nin expression starting at /tmp/tmp_qi63wkr.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    return how_many_times_rec(string, substring, 0, len(string))\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp_qi63wkr.jl:9 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_qi63wkr.jl:1\nin expression starting at /tmp/tmp_qi63wkr.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    return count(string, substring, 0, len(string))\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292758,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmphz6eznsl.jl:9 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphz6eznsl.jl:1\nin expression starting at /tmp/tmphz6eznsl.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    string = string.toLower()\n    substring = substring.toLower()\n    count = 0\n    i = 0\n    while i < len(string):\n        j = i + len(substring)\n        while j <= len(string):\n            if string[i:j] == substring:\n                count += 1\n            j += 1\n        i += 1\n    return count\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpni9w5hhr.jl:15\nin expression starting at /tmp/tmpni9w5hhr.jl:15\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    string = string.toLower()\n    substring = substring.toLower()\n    count = 0\n    i = 0\n    while i < len(string):\n        j = i\n        while j < len(string) and substring[0] == string[j]:\n            j += 1\n        if j - i > 0:\n            count += 1\n        i = j\n    return count\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp60uqjks3.jl:15\nin expression starting at /tmp/tmp60uqjks3.jl:15\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    return how_many_times_helper(string, substring, 0, len(string))\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292758,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpino_6jzt.jl:9 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpino_6jzt.jl:1\nin expression starting at /tmp/tmpino_6jzt.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    return count(string, substring)\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292758,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpwcmapb1n.jl:9 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwcmapb1n.jl:1\nin expression starting at /tmp/tmpwcmapb1n.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    return how_many_times_rec(string, substring, 0, len(string))\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp_qi63wkr.jl:9 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_qi63wkr.jl:1\nin expression starting at /tmp/tmp_qi63wkr.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    return count(string, substring)\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292758,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpwcmapb1n.jl:9 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwcmapb1n.jl:1\nin expression starting at /tmp/tmpwcmapb1n.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    if substring == \"\" then return 0\n    return substring.count(substring, 0, string.length)\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292760,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsr3y9tg4.jl:10\nin expression starting at /tmp/tmpsr3y9tg4.jl:10\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    return count(string, substring)\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292758,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpwcmapb1n.jl:9 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwcmapb1n.jl:1\nin expression starting at /tmp/tmpwcmapb1n.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    return len(string) - string.indexOf(substring) - substring.length + 1\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpi0tzsmzh.jl:9 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpi0tzsmzh.jl:1\nin expression starting at /tmp/tmpi0tzsmzh.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    string = string.toLower()\n    substring = substring.toLower()\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n    return count\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292758,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0o1pz5n8.jl:14\nin expression starting at /tmp/tmp0o1pz5n8.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    string = string.toLower()\n    substring = substring.toLower()\n    count = 0\n    i = 0\n    while i < len(string):\n        j = i\n        while j < len(string) and substring[0] == string[j]:\n            j += 1\n        if j - i > 0:\n            count += j - i\n        i = j\n    return count\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppbc7ny1e.jl:15\nin expression starting at /tmp/tmppbc7ny1e.jl:15\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    return len(string.split(substring)) - 1\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292760,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpx5_ky6i5.jl:9 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpx5_ky6i5.jl:1\nin expression starting at /tmp/tmpx5_ky6i5.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    if substring == \"\" then\n        return 0\n    else\n        return substring.count(substring, 0, string.length)\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292760,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmpef96hjs9.jl:10 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpef96hjs9.jl:1\nin expression starting at /tmp/tmpef96hjs9.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    string = string.toLower()\n    substring = substring.toLower()\n    count = 0\n    i = 0\n    while i < len(string):\n        j = 0\n        while j < len(substring):\n            if string[i + j] == substring[j]:\n                count += 1\n            j += 1\n        i += 1\n    return count\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292760,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp58g8ke1c.jl:15\nin expression starting at /tmp/tmp58g8ke1c.jl:15\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    return how_many_times_helper(string, substring, 0, len(string))\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292758,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpino_6jzt.jl:9 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpino_6jzt.jl:1\nin expression starting at /tmp/tmpino_6jzt.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    return len(string) - string.indexOf(substring) - substring.length + 1\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpi0tzsmzh.jl:9 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpi0tzsmzh.jl:1\nin expression starting at /tmp/tmpi0tzsmzh.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    return how_many_times_rec(string, substring, 0)\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpswi1m5kp.jl:9 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpswi1m5kp.jl:1\nin expression starting at /tmp/tmpswi1m5kp.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    return len(string) - string.indexOf(substring) - substring.length + 1\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpi0tzsmzh.jl:9 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpi0tzsmzh.jl:1\nin expression starting at /tmp/tmpi0tzsmzh.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    if substring == \"\"\n        return 0\n    else:\n        return substring.count(substring) + how_many_times(string, substring[1:])\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292758,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: newline not allowed after \":\" used for quoting\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpnlzul8cc.jl:13\nin expression starting at /tmp/tmpnlzul8cc.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    return how_many_times_rec(string, substring, 0, len(string))\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp_qi63wkr.jl:9 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_qi63wkr.jl:1\nin expression starting at /tmp/tmp_qi63wkr.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    return how_many_times_rec(string, substring, 0, len(string))\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp_qi63wkr.jl:9 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_qi63wkr.jl:1\nin expression starting at /tmp/tmp_qi63wkr.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    return how_many_times_rec(string, substring, 0)\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpswi1m5kp.jl:9 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpswi1m5kp.jl:1\nin expression starting at /tmp/tmpswi1m5kp.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    string = string.toLower()\n    substring = substring.toLower()\n    count = 0\n    i = 0\n    while i < len(string):\n        j = i + len(substring)\n        while j < len(string):\n            if string[i:j] == substring:\n                count += 1\n            j += 1\n        i += 1\n    return count\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292760,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpp419854q.jl:15\nin expression starting at /tmp/tmpp419854q.jl:15\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    return how_many_times_rec(string, substring, 0, len(string))\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp_qi63wkr.jl:9 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_qi63wkr.jl:1\nin expression starting at /tmp/tmp_qi63wkr.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    return count(string, substring)\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292758,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpwcmapb1n.jl:9 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwcmapb1n.jl:1\nin expression starting at /tmp/tmpwcmapb1n.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    return sum(1 for i in range(len(string) - len(substring) + 1) if string[i:i + len(substring)] == substring)\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292760,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpcujxrtby.jl:9 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpcujxrtby.jl:1\nin expression starting at /tmp/tmpcujxrtby.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    string = string.toLower()\n    substring = substring.toLower()\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n    return count\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292758,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0o1pz5n8.jl:14\nin expression starting at /tmp/tmp0o1pz5n8.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    return how_many_times_rec(string, substring, 0, len(string))\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp_qi63wkr.jl:9 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_qi63wkr.jl:1\nin expression starting at /tmp/tmp_qi63wkr.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    if substring == \"\"\n        return 0\n    else:\n        return substring.count(substring) + how_many_times(string, substring[1:])\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292758,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: newline not allowed after \":\" used for quoting\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpnlzul8cc.jl:13\nin expression starting at /tmp/tmpnlzul8cc.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    return count(string, substring)\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292758,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpwcmapb1n.jl:9 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwcmapb1n.jl:1\nin expression starting at /tmp/tmpwcmapb1n.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    if substring == \"\" or string == \"\"\n        return 0\n    else\n        return how_many_times(string[1:], substring) + how_many_times(string[1:], substring[1:])\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292760,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"string\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpec9w12ww.jl:10\nin expression starting at /tmp/tmpec9w12ww.jl:10\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    return count_overlaping_cases(string, substring)\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpeceim6kn.jl:9 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpeceim6kn.jl:1\nin expression starting at /tmp/tmpeceim6kn.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    return how_many_times_rec(string, substring, 0)\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpswi1m5kp.jl:9 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpswi1m5kp.jl:1\nin expression starting at /tmp/tmpswi1m5kp.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    string = string.toLower()\n    substring = substring.toLower()\n    count = 0\n    i = 0\n    while i < len(string):\n        j = i\n        while j < len(string) and substring[0] == string[j]:\n            j += 1\n            if j == len(string):\n                count += 1\n                break\n        i = j\n    return count\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292760,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp38497w76.jl:15\nin expression starting at /tmp/tmp38497w76.jl:15\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    string = string.toLower()\n    substring = substring.toLower()\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n    return count\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292758,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0o1pz5n8.jl:14\nin expression starting at /tmp/tmp0o1pz5n8.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    return how_many_times_rec(string, substring, 0, len(string))\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp_qi63wkr.jl:9 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_qi63wkr.jl:1\nin expression starting at /tmp/tmp_qi63wkr.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    if substring == \"\"\n        return 0\n    else:\n        return substring.count(substring) + how_many_times(string, substring[1:])\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292758,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: newline not allowed after \":\" used for quoting\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpnlzul8cc.jl:13\nin expression starting at /tmp/tmpnlzul8cc.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    return how_many_times_rec(string, substring, 0, 0)\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp3u5p20_r.jl:9 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3u5p20_r.jl:1\nin expression starting at /tmp/tmp3u5p20_r.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    return len(string) - string.count(substring) - substring.count(string)\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292760,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpv8v36n_o.jl:9 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpv8v36n_o.jl:1\nin expression starting at /tmp/tmpv8v36n_o.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    return how_many_times_rec(string, substring, 0, len(string))\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp_qi63wkr.jl:9 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_qi63wkr.jl:1\nin expression starting at /tmp/tmp_qi63wkr.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    string = string.toLower()\n    substring = substring.toLower()\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n    return count\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292758,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0o1pz5n8.jl:14\nin expression starting at /tmp/tmp0o1pz5n8.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    return how_many_times_rec(string, substring, 0, len(string))\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp_qi63wkr.jl:9 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_qi63wkr.jl:1\nin expression starting at /tmp/tmp_qi63wkr.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    return how_many_times_helper(string, substring, 0, len(string))\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292758,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpino_6jzt.jl:9 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpino_6jzt.jl:1\nin expression starting at /tmp/tmpino_6jzt.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    return how_many_times_rec(string, substring, 0, len(string))\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp_qi63wkr.jl:9 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_qi63wkr.jl:1\nin expression starting at /tmp/tmp_qi63wkr.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    if substring == \"\" then\n        return 0\n    else\n        return substring.count(substring, 0, string.length)\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292760,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmpef96hjs9.jl:10 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpef96hjs9.jl:1\nin expression starting at /tmp/tmpef96hjs9.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    return len(string.findall(substring))\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292760,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpioj5c567.jl:9 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpioj5c567.jl:1\nin expression starting at /tmp/tmpioj5c567.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    return len(string) - string.indexOf(substring) - substring.length + 1\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpi0tzsmzh.jl:9 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpi0tzsmzh.jl:1\nin expression starting at /tmp/tmpi0tzsmzh.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    return how_many_times_rec(string, substring, 0, len(string))\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp_qi63wkr.jl:9 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_qi63wkr.jl:1\nin expression starting at /tmp/tmp_qi63wkr.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    return how_many_times_rec(string, substring, 0, len(string))\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp_qi63wkr.jl:9 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_qi63wkr.jl:1\nin expression starting at /tmp/tmp_qi63wkr.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    if substring == \"\" then\n        return 0\n    else\n        return substring.count(substring) + how_many_times(string, substring[1:])\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292760,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpuqyfy31e.jl:13\nin expression starting at /tmp/tmpuqyfy31e.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    return len(string) - string.indexOf(substring) - 1\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292758,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpkz6o3t7v.jl:9 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpkz6o3t7v.jl:1\nin expression starting at /tmp/tmpkz6o3t7v.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    return how_many_times_rec(string, substring, 0)\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpswi1m5kp.jl:9 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpswi1m5kp.jl:1\nin expression starting at /tmp/tmpswi1m5kp.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    return how_many_times_rec(string, substring, 0, len(string))\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp_qi63wkr.jl:9 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_qi63wkr.jl:1\nin expression starting at /tmp/tmp_qi63wkr.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    return len(string) - string.indexOf(substring) - substring.length + 1\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpi0tzsmzh.jl:9 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpi0tzsmzh.jl:1\nin expression starting at /tmp/tmpi0tzsmzh.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    return how_many_times_rec(string, substring, 0, len(string))\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp_qi63wkr.jl:9 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_qi63wkr.jl:1\nin expression starting at /tmp/tmp_qi63wkr.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    if substring == \"\"\n        return 0\n    else\n        return substring.count(string) + how_many_times(string[1:], substring)\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292758,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0zf43sf3.jl:13\nin expression starting at /tmp/tmp0zf43sf3.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    string = string.toLower()\n    substring = substring.toLower()\n    count = 0\n    i = 0\n    while i < len(string):\n        j = i\n        while j < len(string) and substring[0] == string[j]:\n            j += 1\n        if j - i > 0:\n            count += j - i\n        i = j\n    return count\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppbc7ny1e.jl:15\nin expression starting at /tmp/tmppbc7ny1e.jl:15\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    return len(string) - string.indexOf(substring) - substring.length + 1\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpi0tzsmzh.jl:9 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpi0tzsmzh.jl:1\nin expression starting at /tmp/tmpi0tzsmzh.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    if substring == \"\" then\n        return 0\n    else\n        return substring.count(substring, 0, string.length)\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292760,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmpef96hjs9.jl:10 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpef96hjs9.jl:1\nin expression starting at /tmp/tmpef96hjs9.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    string = string.toLower()\n    substring = substring.toLower()\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n    return count\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292758,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0o1pz5n8.jl:14\nin expression starting at /tmp/tmp0o1pz5n8.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    string = string.toLower()\n    substring = substring.toLower()\n    count = 0\n    i = 0\n    while i < len(string):\n        j = i\n        while j < len(string) and substring[0] == string[j]:\n            j += 1\n        if j - i > 0:\n            count += 1\n        i = j\n    return count\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp60uqjks3.jl:15\nin expression starting at /tmp/tmp60uqjks3.jl:15\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    string = string.toLower()\n    substring = substring.toLower()\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n    return count\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292758,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0o1pz5n8.jl:14\nin expression starting at /tmp/tmp0o1pz5n8.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    return sum(1 for i in range(len(string) - len(substring) + 1) if string[i:i + len(substring)] == substring)\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292760,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpcujxrtby.jl:9 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpcujxrtby.jl:1\nin expression starting at /tmp/tmpcujxrtby.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    return how_many_times_rec(string, substring, 0, len(string))\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp_qi63wkr.jl:9 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_qi63wkr.jl:1\nin expression starting at /tmp/tmp_qi63wkr.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    return how_many_times_helper(string, substring, 0, len(string))\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292758,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpino_6jzt.jl:9 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpino_6jzt.jl:1\nin expression starting at /tmp/tmpino_6jzt.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    if substring == \"\" then\n        return 0\n    else\n        return substring.count(substring, 0, string.length)\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292760,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmpef96hjs9.jl:10 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpef96hjs9.jl:1\nin expression starting at /tmp/tmpef96hjs9.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    if substring == \"\" or string == \"\"\n        return 0\n    else\n        return how_many_times(string[1:], substring) + how_many_times(string[1:], substring[1:])\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292760,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"string\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpec9w12ww.jl:10\nin expression starting at /tmp/tmpec9w12ww.jl:10\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    return how_many_times_rec(string, substring, 0, len(string))\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp_qi63wkr.jl:9 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_qi63wkr.jl:1\nin expression starting at /tmp/tmp_qi63wkr.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    string = string.toLower()\n    substring = substring.toLower()\n    count = 0\n    i = 0\n    while i < len(string):\n        j = i + len(substring)\n        while j < len(string):\n            if string[i:j] == substring:\n                count += 1\n            j += 1\n        i += 1\n    return count\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292760,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpp419854q.jl:15\nin expression starting at /tmp/tmpp419854q.jl:15\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    return how_many_times_rec(string, substring, 0, 0)\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp3u5p20_r.jl:9 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3u5p20_r.jl:1\nin expression starting at /tmp/tmp3u5p20_r.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    return len(string) - string.indexOf(substring) - substring.length + 1\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpi0tzsmzh.jl:9 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpi0tzsmzh.jl:1\nin expression starting at /tmp/tmpi0tzsmzh.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    string = string.toLower()\n    substring = substring.toLower()\n    count = 0\n    i = 0\n    while i < len(string):\n        if string[i] == substring[0]:\n            count += 1\n            i += 1\n            while i < len(string) and substring[0] == string[i]:\n                count += 1\n                i += 1\n        else:\n            i += 1\n    return count\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292760,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp5m1nct42.jl:15\nin expression starting at /tmp/tmp5m1nct42.jl:15\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    string = string.toLower()\n    substring = substring.toLower()\n    count = 0\n    i = 0\n    while i < len(string):\n        j = i\n        while j < len(string) and substring[0] == string[j]:\n            j += 1\n        if j - i == len(substring):\n            count += 1\n        i = j\n    return count\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpubpewa4j.jl:15\nin expression starting at /tmp/tmpubpewa4j.jl:15\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    return how_many_times_rec(string, substring, 0, 0)\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp3u5p20_r.jl:9 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3u5p20_r.jl:1\nin expression starting at /tmp/tmp3u5p20_r.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    string = string.toLower()\n    substring = substring.toLower()\n    count = 0\n    i = 0\n    while i < len(string):\n        j = i + len(substring)\n        while j < len(string):\n            if string[i:j] == substring:\n                count += 1\n            j += 1\n        i += 1\n    return count\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292760,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpp419854q.jl:15\nin expression starting at /tmp/tmpp419854q.jl:15\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    return how_many_times_rec(string, substring, 0)\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpswi1m5kp.jl:9 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpswi1m5kp.jl:1\nin expression starting at /tmp/tmpswi1m5kp.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    return len(string) - string.indexOf(substring) - 1\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292758,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpkz6o3t7v.jl:9 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpkz6o3t7v.jl:1\nin expression starting at /tmp/tmpkz6o3t7v.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    string = string\n    substring = substring\n    count = 0\n    i = 0\n    while i < len(string):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n            i += len(substring)\n        else:\n            i += 1\n    return count\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292760,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpo2u7zkx1.jl:15\nin expression starting at /tmp/tmpo2u7zkx1.jl:15\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    return how_many_times_rec(string, substring, 0)\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpswi1m5kp.jl:9 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpswi1m5kp.jl:1\nin expression starting at /tmp/tmpswi1m5kp.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    return how_many_times_rec(string, substring, 0, 0)\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp3u5p20_r.jl:9 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3u5p20_r.jl:1\nin expression starting at /tmp/tmp3u5p20_r.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    if substring == \"\"\n        return 0\n    else\n        return substring.count(string) + how_many_times(string[1:], substring)\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292758,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0zf43sf3.jl:13\nin expression starting at /tmp/tmp0zf43sf3.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    string = string.toLower()\n    substring = substring.toLower()\n    count = 0\n    i = 0\n    while i < len(string):\n        j = 0\n        while j < len(substring):\n            if string[i + j] == substring[j]:\n                count += 1\n            j += 1\n        i += 1\n    return count\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292760,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp58g8ke1c.jl:15\nin expression starting at /tmp/tmp58g8ke1c.jl:15\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    return how_many_times(string, substring, 0)\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292760,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7zjxp5tt.jl:9 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7zjxp5tt.jl:1\nin expression starting at /tmp/tmp7zjxp5tt.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    return len(string) - string.indexOf(substring) - substring.length + 1\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpi0tzsmzh.jl:9 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpi0tzsmzh.jl:1\nin expression starting at /tmp/tmpi0tzsmzh.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    return how_many_times_rec(string, substring, 0)\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpswi1m5kp.jl:9 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpswi1m5kp.jl:1\nin expression starting at /tmp/tmpswi1m5kp.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    return how_many_times_rec(string, substring, 0, len(string))\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp_qi63wkr.jl:9 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_qi63wkr.jl:1\nin expression starting at /tmp/tmp_qi63wkr.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    string = string.toLower()\n    substring = substring.toLower()\n    count = 0\n    i = 0\n    while i < len(string):\n        j = i + len(substring)\n        while j <= len(string):\n            if string[i:j] == substring:\n                count += 1\n            j += 1\n        i += 1\n    return count\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpni9w5hhr.jl:15\nin expression starting at /tmp/tmpni9w5hhr.jl:15\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    string = string.toLower()\n    substring = substring.toLower()\n    count = 0\n    i = 0\n    while i < len(string):\n        j = i\n        while j < len(string) and substring[0] == string[j]:\n            j += 1\n        if j - i > 0:\n            count += 1\n        i = j\n    return count\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp60uqjks3.jl:15\nin expression starting at /tmp/tmp60uqjks3.jl:15\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    return how_many_times_helper(string, substring, 0, len(string))\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292758,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpino_6jzt.jl:9 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpino_6jzt.jl:1\nin expression starting at /tmp/tmpino_6jzt.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    return len(string) - string.indexOf(substring) - substring.length + 1\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpi0tzsmzh.jl:9 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpi0tzsmzh.jl:1\nin expression starting at /tmp/tmpi0tzsmzh.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    return how_many_times_rec(string, substring, 0, len(string))\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp_qi63wkr.jl:9 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_qi63wkr.jl:1\nin expression starting at /tmp/tmp_qi63wkr.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    return how_many_times_helper(string, substring, 0, len(string))\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292758,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpino_6jzt.jl:9 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpino_6jzt.jl:1\nin expression starting at /tmp/tmpino_6jzt.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    return how_many_times_rec(string, substring, 0)\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpswi1m5kp.jl:9 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpswi1m5kp.jl:1\nin expression starting at /tmp/tmpswi1m5kp.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    return len(string) - string.indexOf(substring) - 1\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292758,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpkz6o3t7v.jl:9 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpkz6o3t7v.jl:1\nin expression starting at /tmp/tmpkz6o3t7v.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    return how_many_times_rec(string, substring, 0, len(string))\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp_qi63wkr.jl:9 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_qi63wkr.jl:1\nin expression starting at /tmp/tmp_qi63wkr.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    return how_many_times_rec(string, substring, 0)\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpswi1m5kp.jl:9 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpswi1m5kp.jl:1\nin expression starting at /tmp/tmpswi1m5kp.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    string = string.toLower()\n    substring = substring.toLower()\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n    return count\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292758,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0o1pz5n8.jl:14\nin expression starting at /tmp/tmp0o1pz5n8.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    return count(string, substring)\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292758,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpwcmapb1n.jl:9 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwcmapb1n.jl:1\nin expression starting at /tmp/tmpwcmapb1n.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    if substring == \"\"\n        return 0\n    else\n        return string.count(substring, 0, len(string))\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292760,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmp5_7usneq.jl:10 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp5_7usneq.jl:1\nin expression starting at /tmp/tmp5_7usneq.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    if substring == \"\"\n        return 0\n    else\n        return substring.count(string) + how_many_times(string[1:], substring)\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292758,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0zf43sf3.jl:13\nin expression starting at /tmp/tmp0zf43sf3.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    if substring == \"\" then\n        return 0\n    else\n        return substring.count(substring, 0, string.length)\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292760,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmpef96hjs9.jl:10 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpef96hjs9.jl:1\nin expression starting at /tmp/tmpef96hjs9.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    string = string.toLower()\n    substring = substring.toLower()\n    count = 0\n    i = 0\n    while i < len(string):\n        j = i\n        while j < len(string) and substring[0] == string[j]:\n            j += 1\n        if j - i == len(substring):\n            count += 1\n        i = j\n    return count\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpubpewa4j.jl:15\nin expression starting at /tmp/tmpubpewa4j.jl:15\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    return len(string) - string.indexOf(substring) - substring.length + 1\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpi0tzsmzh.jl:9 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpi0tzsmzh.jl:1\nin expression starting at /tmp/tmpi0tzsmzh.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    string = string.toLower()\n    substring = substring.toLower()\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n    return count\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292758,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0o1pz5n8.jl:14\nin expression starting at /tmp/tmp0o1pz5n8.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    return count_overlaping_cases(string, substring)\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpeceim6kn.jl:9 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpeceim6kn.jl:1\nin expression starting at /tmp/tmpeceim6kn.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    string = string.toLower()\n    substring = substring.toLower()\n    count = 0\n    i = 0\n    while i < len(string):\n        j = i + len(substring)\n        while j < len(string):\n            if string[i:j] == substring:\n                count += 1\n            j += 1\n        i += 1\n    return count\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292760,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpp419854q.jl:15\nin expression starting at /tmp/tmpp419854q.jl:15\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    if substring == \"\"\n        return 0\n    else\n        return string.count(substring, 0, len(string))\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292760,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmp5_7usneq.jl:10 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp5_7usneq.jl:1\nin expression starting at /tmp/tmp5_7usneq.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    string = string.toLower()\n    substring = substring.toLower()\n    count = 0\n    i = 0\n    while i < len(string):\n        j = i + len(substring)\n        while j < len(string) and substring == string[j:j+len(substring)]:\n            j += 1\n            count += 1\n        i = j\n    return count\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292760,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsvranffm.jl:15\nin expression starting at /tmp/tmpsvranffm.jl:15\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    if substring == \"\"\n        return 0\n    else\n        return substring.count(string) + how_many_times(string[1:], substring)\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292758,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0zf43sf3.jl:13\nin expression starting at /tmp/tmp0zf43sf3.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    return len(string) - string.indexOf(substring) - substring.length + 1\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpi0tzsmzh.jl:9 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpi0tzsmzh.jl:1\nin expression starting at /tmp/tmpi0tzsmzh.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    return len(string) - string.indexOf(substring) - 1\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292758,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpkz6o3t7v.jl:9 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpkz6o3t7v.jl:1\nin expression starting at /tmp/tmpkz6o3t7v.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    return how_many_times_rec(string, substring, 0)\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpswi1m5kp.jl:9 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpswi1m5kp.jl:1\nin expression starting at /tmp/tmpswi1m5kp.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    string = string.toLower()\n    substring = substring.toLower()\n    count = 0\n    i = 0\n    while i < len(string):\n        j = i\n        while j < len(string) and substring[0] == string[j]:\n            j += 1\n        if j - i > 0:\n            count += 1\n        i = j\n    return count\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp60uqjks3.jl:15\nin expression starting at /tmp/tmp60uqjks3.jl:15\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    string = string.toLower()\n    substring = substring.toLower()\n    count = 0\n    i = 0\n    while i < len(string):\n        j = i\n        while j < len(string) and substring[0] == string[j]:\n            j += 1\n        if j - i > 0:\n            count += 1\n        i = j\n    return count\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp60uqjks3.jl:15\nin expression starting at /tmp/tmp60uqjks3.jl:15\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    return len(string) - string.indexOf(substring) - 1\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292758,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpkz6o3t7v.jl:9 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpkz6o3t7v.jl:1\nin expression starting at /tmp/tmpkz6o3t7v.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    if substring == \"\"\n        return 0\n    else\n        return substring.count(string) + how_many_times(string[1:], substring)\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292758,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0zf43sf3.jl:13\nin expression starting at /tmp/tmp0zf43sf3.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    string = string.toLower()\n    substring = substring.toLower()\n    count = 0\n    i = 0\n    while i < len(string):\n        j = i + len(substring)\n        while j < len(string):\n            if string[i:j] == substring:\n                count += 1\n            j += 1\n        i += 1\n    return count\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292760,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpp419854q.jl:15\nin expression starting at /tmp/tmpp419854q.jl:15\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    string = string.toLower()\n    substring = substring.toLower()\n    count = 0\n    i = 0\n    while i < len(string):\n        j = i\n        while j < len(string) and substring[0] == string[j]:\n            j += 1\n        if j - i > 0:\n            count += 1\n        i = j\n    return count\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp60uqjks3.jl:15\nin expression starting at /tmp/tmp60uqjks3.jl:15\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    if substring == \"\"\n        return 0\n    else:\n        return substring.count(string) + how_many_times(string[1:], substring)\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292758,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: newline not allowed after \":\" used for quoting\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxmx3th44.jl:13\nin expression starting at /tmp/tmpxmx3th44.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    return count(string, substring)\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292758,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpwcmapb1n.jl:9 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwcmapb1n.jl:1\nin expression starting at /tmp/tmpwcmapb1n.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    return len(string) - string.indexOf(substring) - 1\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292758,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpkz6o3t7v.jl:9 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpkz6o3t7v.jl:1\nin expression starting at /tmp/tmpkz6o3t7v.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    return how_many_times_helper(string, substring, 0, len(string))\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292758,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpino_6jzt.jl:9 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpino_6jzt.jl:1\nin expression starting at /tmp/tmpino_6jzt.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    return how_many_times_rec(string, substring, 0, len(string))\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp_qi63wkr.jl:9 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_qi63wkr.jl:1\nin expression starting at /tmp/tmp_qi63wkr.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    string = string.toLower()\n    substring = substring.toLower()\n    count = 0\n    i = 0\n    while i < len(string):\n        j = i\n        while j < len(string) and substring[0] == string[j]:\n            j += 1\n        if j - i > 0:\n            count += 1\n        i = j\n    return count\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp60uqjks3.jl:15\nin expression starting at /tmp/tmp60uqjks3.jl:15\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    if substring == \"\"\n        return 0\n    else:\n        return substring.count(string) + how_many_times(string[1:], substring)\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292758,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: newline not allowed after \":\" used for quoting\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxmx3th44.jl:13\nin expression starting at /tmp/tmpxmx3th44.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    return how_many_times_rec(string, substring, 0, len(string))\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp_qi63wkr.jl:9 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_qi63wkr.jl:1\nin expression starting at /tmp/tmp_qi63wkr.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    return len(string.findall(substring))\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292760,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpioj5c567.jl:9 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpioj5c567.jl:1\nin expression starting at /tmp/tmpioj5c567.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    return how_many_times_rec(string, substring, 0)\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpswi1m5kp.jl:9 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpswi1m5kp.jl:1\nin expression starting at /tmp/tmpswi1m5kp.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    return count_overlaping_cases(string, substring)\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpeceim6kn.jl:9 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpeceim6kn.jl:1\nin expression starting at /tmp/tmpeceim6kn.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    string = string.toLower()\n    substring = substring.toLower()\n    count = 0\n    i = 0\n    while i < len(string):\n        j = i\n        while j < len(string) and substring[0] == string[j]:\n            j += 1\n        if j - i > 0:\n            count += 1\n        i = j\n    return count\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp60uqjks3.jl:15\nin expression starting at /tmp/tmp60uqjks3.jl:15\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    string = string.toLower()\n    substring = substring.toLower()\n    count = 0\n    i = 0\n    while i < len(string):\n        j = i + len(substring)\n        while j < len(string):\n            if string[i:j] == substring:\n                count += 1\n            j += 1\n        i += 1\n    return count\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292760,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpp419854q.jl:15\nin expression starting at /tmp/tmpp419854q.jl:15\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    return len(string) - string.indexOf(substring) - substring.length + 1\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpi0tzsmzh.jl:9 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpi0tzsmzh.jl:1\nin expression starting at /tmp/tmpi0tzsmzh.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    string = string.toLower()\n    substring = substring.toLower()\n    count = 0\n    i = 0\n    while i < len(string):\n        j = i + len(substring)\n        while j <= len(string):\n            if string[i:j] == substring:\n                count += 1\n            j += 1\n        i += 1\n    return count\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpni9w5hhr.jl:15\nin expression starting at /tmp/tmpni9w5hhr.jl:15\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    return how_many_times_rec(string, substring, 0, len(string))\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp_qi63wkr.jl:9 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_qi63wkr.jl:1\nin expression starting at /tmp/tmp_qi63wkr.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    return count_overlaping_substring(string, substring)\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292760,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpx380q8xz.jl:9 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpx380q8xz.jl:1\nin expression starting at /tmp/tmpx380q8xz.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    string = string.toLower()\n    substring = substring.toLower()\n    count = 0\n    i = 0\n    while i < len(string):\n        j = i\n        while j < len(string) and substring[0] == string[j]:\n            j += 1\n        if j - i > 0:\n            count += 1\n        i = j\n    return count\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp60uqjks3.jl:15\nin expression starting at /tmp/tmp60uqjks3.jl:15\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    return how_many_times_rec(string, substring, 0)\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpswi1m5kp.jl:9 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpswi1m5kp.jl:1\nin expression starting at /tmp/tmpswi1m5kp.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n    string = string\n    substring = substring\n    count = 0\n    i = 0\n    while i < len(string):\n        if string[i] == substring[0]:\n            count = count + 1\n            i = i + 1\n            while i < len(string) and substring[0] == string[i]:\n                count = count + 1\n                i = i + 1\n        else:\n            i = i + 1\n    return count\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
      "timestamp": 1664292760,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpi66a6ujz.jl:15\nin expression starting at /tmp/tmpi66a6ujz.jl:15\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}