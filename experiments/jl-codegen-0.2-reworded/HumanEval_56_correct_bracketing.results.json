{
  "name": "HumanEval_56_correct_bracketing",
  "language": "jl",
  "prompt": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n",
  "tests": "using Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
  "stop_tokens": [
    "\nfunction",
    "\nmacro",
    "\n\n"
  ],
  "results": [
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\"\n        return true\n    else:\n        return brackets[0] == \"<\" and brackets[-1] == \">\" and all(brackets[i] == \"<\" for i in range(1, len(brackets)-1) and brackets[i+1] == \">\" for i in range(0, len(brackets)-2))\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: newline not allowed after \":\" used for quoting\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmph8vf1985.jl:17\nin expression starting at /tmp/tmph8vf1985.jl:17\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return True\n    else:\n        return brackets.count(\"<\") == brackets.count(\">\")\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyr01s0if.jl:14\nin expression starting at /tmp/tmpyr01s0if.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return true\n    else:\n        return brackets.count(\"<\") == brackets.count(\">\")\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxf_6a8z4.jl:14\nin expression starting at /tmp/tmpxf_6a8z4.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return true\n    else:\n        return brackets.count(\"<\") == brackets.count(\">\")\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxf_6a8z4.jl:14\nin expression starting at /tmp/tmpxf_6a8z4.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return True\n    else:\n        return all(brackets[i] == \"<\" and brackets[i+1] == \">\" for i in range(len(brackets)-1))\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_bexfthm.jl:14\nin expression starting at /tmp/tmp_bexfthm.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return true\n    else:\n        return brackets.count(\"<\") == brackets.count(\">\")\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxf_6a8z4.jl:14\nin expression starting at /tmp/tmpxf_6a8z4.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return true\n    else:\n        return brackets.count(\"<\") == brackets.count(\">\")\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxf_6a8z4.jl:14\nin expression starting at /tmp/tmpxf_6a8z4.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return true\n    else:\n        return brackets.count(\"<\") == brackets.count(\">\")\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxf_6a8z4.jl:14\nin expression starting at /tmp/tmpxf_6a8z4.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return true\n    else:\n        return brackets.count(\"<\") == brackets.count(\">\")\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxf_6a8z4.jl:14\nin expression starting at /tmp/tmpxf_6a8z4.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return true\n    else:\n        return brackets.count(\"<\") == brackets.count(\">\")\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxf_6a8z4.jl:14\nin expression starting at /tmp/tmpxf_6a8z4.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return true\n    else:\n        return brackets.count(\"<\") == brackets.count(\">\")\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxf_6a8z4.jl:14\nin expression starting at /tmp/tmpxf_6a8z4.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return True\n    else:\n        return brackets.count(\"<\") == brackets.count(\">\")\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyr01s0if.jl:14\nin expression starting at /tmp/tmpyr01s0if.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return True\n    else:\n        return brackets.count(\"<\") == brackets.count(\">\")\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyr01s0if.jl:14\nin expression starting at /tmp/tmpyr01s0if.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\"\n        return true\n    else:\n        if brackets[0] == \"<\":\n            return correct_bracketing(brackets[1:]) and correct_bracketing(brackets[1:])\n        else:\n            return correct_bracketing(brackets[1:])\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: newline not allowed after \":\" used for quoting\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmph75giri7.jl:17\nin expression starting at /tmp/tmph75giri7.jl:17\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return True\n    else:\n        return brackets.count(\"<\") == brackets.count(\">\")\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyr01s0if.jl:14\nin expression starting at /tmp/tmpyr01s0if.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return true\n    else:\n        return brackets[0] == \"<\" and brackets[-1] == \">\"\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpma4_1_l9.jl:14\nin expression starting at /tmp/tmpma4_1_l9.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return True\n    else:\n        return brackets[0] == \"<\" and brackets[-1] == \">\"\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpqihqky10.jl:14\nin expression starting at /tmp/tmpqihqky10.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\"\n        return true\n    else:\n        return brackets[0] == \"<\" and brackets[-1] == \">\" and correct_bracketing(brackets[1:-1])\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: newline not allowed after \":\" used for quoting\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsmx4i1uf.jl:17\nin expression starting at /tmp/tmpsmx4i1uf.jl:17\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return true\n    else:\n        return brackets[0] == \"<\" and brackets[-1] == \">\" and all(brackets[i] == \"<\" for i in range(1, len(brackets)-1)) and all(brackets[i] == \">\" for i in range(len(brackets)-2, -1, -1))\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6uq1nppt.jl:14\nin expression starting at /tmp/tmp6uq1nppt.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\"\n        return true\n    else:\n        if brackets[0] == \"<\":\n            if brackets[len(brackets)-1] == \">\":\n                return true\n            else:\n                return false\n        else:\n            return correct_bracketing(brackets[1:])\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: newline not allowed after \":\" used for quoting\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwqzmr13p.jl:17\nin expression starting at /tmp/tmpwqzmr13p.jl:17\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return true\n    else:\n        return brackets[0] == \"<\" and brackets[-1] == \">\" and all(brackets[i] == \"<\" for i in range(1, len(brackets) - 1)) and all(brackets[i] == \">\" for i in range(len(brackets) - 2, -1, -1))\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8eji701m.jl:14\nin expression starting at /tmp/tmp8eji701m.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return true\n    else:\n        return brackets[0] == \"<\" and brackets[-1] == \">\"\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpma4_1_l9.jl:14\nin expression starting at /tmp/tmpma4_1_l9.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return True\n    if brackets[0] != \"<\":\n        return False\n    for i in range(1, len(brackets)):\n        if brackets[i] != \">\":\n            return False\n        if brackets[i-1] == \"<\":\n            return False\n    return True\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpkg681wam.jl:14\nin expression starting at /tmp/tmpkg681wam.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\"\n        return true\n    else:\n        return brackets[0] == \"<\" and brackets[-1] == \">\" and correct_bracketing(brackets[1:-1])\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: newline not allowed after \":\" used for quoting\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsmx4i1uf.jl:17\nin expression starting at /tmp/tmpsmx4i1uf.jl:17\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return True\n    else:\n        return brackets[0] == \"<\" and brackets[-1] == \">\"\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpqihqky10.jl:14\nin expression starting at /tmp/tmpqihqky10.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return true\n    else:\n        return brackets[0] == \"<\" and brackets[-1] == \">\"\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpma4_1_l9.jl:14\nin expression starting at /tmp/tmpma4_1_l9.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return true\n    else:\n        return brackets.count(\"<\") == brackets.count(\">\")\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxf_6a8z4.jl:14\nin expression starting at /tmp/tmpxf_6a8z4.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\"\n        return true\n    else:\n        return brackets[0] == \"<\" and brackets[-1] == \">\" and all(brackets[i] == \"<\" for i in range(1, len(brackets)-1)) and all(brackets[i] == \">\" for i in range(len(brackets)-2, -1, -1))\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: newline not allowed after \":\" used for quoting\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpe1s29n86.jl:17\nin expression starting at /tmp/tmpe1s29n86.jl:17\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return true\n    else:\n        return brackets[0] == \"<\" and brackets[-1] == \">\"\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpma4_1_l9.jl:14\nin expression starting at /tmp/tmpma4_1_l9.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return true\n    else:\n        return brackets[0] == \"<\" and brackets[-1] == \">\" and all(brackets[i] == \"<\" for i in range(1, len(brackets) - 1) and brackets[i] == \">\" for i in range(len(brackets) - 2, -1, -1))\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_l75s98w.jl:14\nin expression starting at /tmp/tmp_l75s98w.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return true\n    else:\n        return brackets.count(\"<\") == brackets.count(\">\")\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxf_6a8z4.jl:14\nin expression starting at /tmp/tmpxf_6a8z4.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return true\n    else:\n        return brackets[0] == \"<\" and brackets[-1] == \">\"\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpma4_1_l9.jl:14\nin expression starting at /tmp/tmpma4_1_l9.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return true\n    else:\n        return brackets.count(\"<\") == brackets.count(\">\")\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxf_6a8z4.jl:14\nin expression starting at /tmp/tmpxf_6a8z4.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return true\n    else:\n        return brackets[0] == \"<\" and brackets[-1] == \">\" and all(brackets[i] == \"<\" for i in range(1, len(brackets) - 1) and brackets[i] == \">\" for i in range(len(brackets) - 2, -1, -1))\n\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpp_6sucyk.jl:14\nin expression starting at /tmp/tmpp_6sucyk.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return true\n    else:\n        return brackets.index(\"<\") == brackets.rindex(\">\")\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwy6nd_2p.jl:14\nin expression starting at /tmp/tmpwy6nd_2p.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return true\n    else:\n        return brackets[0] == \"<\" and brackets[-1] == \">\"\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpma4_1_l9.jl:14\nin expression starting at /tmp/tmpma4_1_l9.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\"\n        return true\n    else:\n        return brackets[0] == \"<\" and brackets[-1] == \">\" and all(brackets[i+1] == \">\" for i in range(len(brackets) - 2))\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: newline not allowed after \":\" used for quoting\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpct8g9v9n.jl:17\nin expression starting at /tmp/tmpct8g9v9n.jl:17\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return true\n    else:\n        return all(brackets[i] == \"<\" and brackets[i+1] == \">\" for i in range(len(brackets)-1))\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4sle_1kp.jl:14\nin expression starting at /tmp/tmp4sle_1kp.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return true\n    else:\n        return brackets[0] == \"<\" and brackets[-1] == \">\"\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpma4_1_l9.jl:14\nin expression starting at /tmp/tmpma4_1_l9.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return true\n    else:\n        return brackets[0] == \"<\" and brackets[-1] == \">\"\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpma4_1_l9.jl:14\nin expression starting at /tmp/tmpma4_1_l9.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return true\n    else:\n        return brackets[0] == \"<\" and brackets[-1] == \">\"\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpma4_1_l9.jl:14\nin expression starting at /tmp/tmpma4_1_l9.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\"\n        return true\n    else:\n        return brackets[0] == \"<\" and brackets[-1] == \">\" and correct_bracketing(brackets[1:-1])\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: newline not allowed after \":\" used for quoting\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsmx4i1uf.jl:17\nin expression starting at /tmp/tmpsmx4i1uf.jl:17\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return true\n    else:\n        return brackets.count(\"<\") == brackets.count(\">\")\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxf_6a8z4.jl:14\nin expression starting at /tmp/tmpxf_6a8z4.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\"\n        return true\n    else:\n        return brackets[0] == \"<\" and brackets[-1] == \">\" and correct_bracketing(brackets[1:-1])\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: newline not allowed after \":\" used for quoting\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsmx4i1uf.jl:17\nin expression starting at /tmp/tmpsmx4i1uf.jl:17\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return True\n    else:\n        return brackets.count(\"<\") == brackets.count(\">\")\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyr01s0if.jl:14\nin expression starting at /tmp/tmpyr01s0if.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return true\n    else:\n        return brackets.count(\"<\") == brackets.count(\">\")\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxf_6a8z4.jl:14\nin expression starting at /tmp/tmpxf_6a8z4.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return true\n    else:\n        return brackets[0] == \"<\" and brackets[-1] == \">\"\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpma4_1_l9.jl:14\nin expression starting at /tmp/tmpma4_1_l9.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return True\n    else:\n        return brackets.count(\"<\") == brackets.count(\">\")\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyr01s0if.jl:14\nin expression starting at /tmp/tmpyr01s0if.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\"\n        return true\n    else:\n        return brackets[0] == \"<\" and brackets[-1] == \">\" and all(brackets[i] == \"<\" for i in range(1, len(brackets) - 1) and brackets[i] == \">\" for i in range(len(brackets) - 2, -1, -1))\n\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: newline not allowed after \":\" used for quoting\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpqe8hsnoe.jl:17\nin expression starting at /tmp/tmpqe8hsnoe.jl:17\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return true\n    else:\n        return brackets.count(\"<\") == brackets.count(\">\")\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxf_6a8z4.jl:14\nin expression starting at /tmp/tmpxf_6a8z4.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\"\n        return true\n    else:\n        return brackets[0] == \"<\" and brackets[-1] == \">\" and all(brackets[i] == \"<\" for i in range(1, len(brackets) - 1) and brackets[i] == \">\" for i in range(len(brackets) - 2, -1, -1))\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: newline not allowed after \":\" used for quoting\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpszykgxuc.jl:17\nin expression starting at /tmp/tmpszykgxuc.jl:17\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return true\n    else:\n        return brackets[0] == \"<\" and brackets[-1] == \">\" and all(brackets[i] == \"<\" for i in range(1, len(brackets) - 1) and brackets[i] == \">\" for i in range(1, len(brackets) - 1))\n\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpq32hvwqs.jl:14\nin expression starting at /tmp/tmpq32hvwqs.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return true\n    else:\n        return brackets.count(\"<\") == brackets.count(\">\")\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxf_6a8z4.jl:14\nin expression starting at /tmp/tmpxf_6a8z4.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\"\n        return true\n    else:\n        return brackets[0] == \"<\" and brackets[-1] == \">\" and correct_bracketing(brackets[1:-1])\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: newline not allowed after \":\" used for quoting\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsmx4i1uf.jl:17\nin expression starting at /tmp/tmpsmx4i1uf.jl:17\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return true\n    else:\n        return brackets.count(\"<\") == brackets.count(\">\")\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxf_6a8z4.jl:14\nin expression starting at /tmp/tmpxf_6a8z4.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return true\n    else:\n        return brackets[0] == \"<\" and brackets[-1] == \">\"\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpma4_1_l9.jl:14\nin expression starting at /tmp/tmpma4_1_l9.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return true\n    else:\n        return brackets.count(\"<\") == brackets.count(\">\")\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxf_6a8z4.jl:14\nin expression starting at /tmp/tmpxf_6a8z4.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\"\n        return true\n    else:\n        return brackets[0] == \"<\" and brackets[-1] == \">\" and all(brackets[i] == \"<\" for i in range(1, len(brackets) - 1) and brackets[i] == \">\" for i in range(len(brackets) - 2, -1, -1))\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: newline not allowed after \":\" used for quoting\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpszykgxuc.jl:17\nin expression starting at /tmp/tmpszykgxuc.jl:17\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return true\n    else:\n        return brackets[0] == \"<\" and brackets[-1] == \">\"\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpma4_1_l9.jl:14\nin expression starting at /tmp/tmpma4_1_l9.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return true\n    else:\n        return brackets[0] == \"<\" and brackets[-1] == \">\"\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpma4_1_l9.jl:14\nin expression starting at /tmp/tmpma4_1_l9.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return true\n    else:\n        return brackets.count(\"<\") == brackets.count(\">\")\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxf_6a8z4.jl:14\nin expression starting at /tmp/tmpxf_6a8z4.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return true\n    else:\n        return brackets.index(\"<\") == brackets.rindex(\">\")\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwy6nd_2p.jl:14\nin expression starting at /tmp/tmpwy6nd_2p.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return True\n    if brackets[0] != \"<\":\n        return False\n    for i in range(1, len(brackets)):\n        if brackets[i] == \"<\":\n            if brackets[i-1] != \">\":\n                return False\n        else:\n            if brackets[i] != \">\":\n                return False\n    return True\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3x611eap.jl:14\nin expression starting at /tmp/tmp3x611eap.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return true\n    else:\n        return all(brackets[i] == \"<\" and brackets[i+1] == \">\" for i in range(len(brackets) - 1))\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjgc6j8lz.jl:14\nin expression starting at /tmp/tmpjgc6j8lz.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return true\n    else:\n        return brackets[0] == \"<\" and brackets[-1] == \">\"\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpma4_1_l9.jl:14\nin expression starting at /tmp/tmpma4_1_l9.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\"\n        return true\n    else:\n        return brackets[0] == \"<\" and brackets[-1] == \">\" and all(brackets[i] == \"<\" for i in range(1, len(brackets) - 1) and brackets[i] == \">\" for i in range(len(brackets) - 2, -1, -1))\n\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: newline not allowed after \":\" used for quoting\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpqe8hsnoe.jl:17\nin expression starting at /tmp/tmpqe8hsnoe.jl:17\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return true\n    else:\n        return brackets[0] == \"<\" and brackets[-1] == \">\"\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpma4_1_l9.jl:14\nin expression starting at /tmp/tmpma4_1_l9.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\"\n        return true\n    else:\n        return brackets[0] == \"<\" and brackets[-1] == \">\" and correct_bracketing(brackets[1:-1])\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: newline not allowed after \":\" used for quoting\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsmx4i1uf.jl:17\nin expression starting at /tmp/tmpsmx4i1uf.jl:17\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return true\n    else:\n        return brackets.count(\"<\") == brackets.count(\">\")\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxf_6a8z4.jl:14\nin expression starting at /tmp/tmpxf_6a8z4.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return true\n    else:\n        return brackets[0] == \"<\" and brackets[-1] == \">\"\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpma4_1_l9.jl:14\nin expression starting at /tmp/tmpma4_1_l9.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return True\n    else:\n        return brackets[0] == \"<\" and brackets[-1] == \">\"\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpqihqky10.jl:14\nin expression starting at /tmp/tmpqihqky10.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return true\n    else:\n        return brackets.count(\"<\") == brackets.count(\">\")\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxf_6a8z4.jl:14\nin expression starting at /tmp/tmpxf_6a8z4.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return true\n    else:\n        return all(brackets[i] == \">\" and brackets[i+1] == \"<\" for i in range(len(brackets)-1))\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293419,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpchx9fbrw.jl:14\nin expression starting at /tmp/tmpchx9fbrw.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\"\n        return true\n    else\n        return brackets[0] == \"<\" and brackets[-1] == \">\" and correct_bracketing(brackets[1:-1])\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293419,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: \"if\" at /tmp/tmpc176ac6g.jl:14 expected \"end\", got \"and\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpc176ac6g.jl:17\nin expression starting at /tmp/tmpc176ac6g.jl:17\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\"\n        return true\n    else:\n        return brackets[0] == \"<\" and brackets[-1] == \">\" and correct_bracketing(brackets[1:-1])\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: newline not allowed after \":\" used for quoting\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsmx4i1uf.jl:17\nin expression starting at /tmp/tmpsmx4i1uf.jl:17\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return true\n    else:\n        return brackets.count(\"<\") == brackets.count(\">\")\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxf_6a8z4.jl:14\nin expression starting at /tmp/tmpxf_6a8z4.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return true\n    else:\n        return brackets.count(\"<\") == brackets.count(\">\")\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxf_6a8z4.jl:14\nin expression starting at /tmp/tmpxf_6a8z4.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return True\n    else:\n        return brackets.count(\"<\") == brackets.count(\">\")\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyr01s0if.jl:14\nin expression starting at /tmp/tmpyr01s0if.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return true\n    else:\n        return brackets[0] == \"<\" and brackets[-1] == \">\"\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpma4_1_l9.jl:14\nin expression starting at /tmp/tmpma4_1_l9.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return true\n    else:\n        return brackets.count(\"<\") == brackets.count(\">\")\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxf_6a8z4.jl:14\nin expression starting at /tmp/tmpxf_6a8z4.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return True\n    else:\n        return brackets.count(\"<\") == brackets.count(\">\")\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyr01s0if.jl:14\nin expression starting at /tmp/tmpyr01s0if.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\"\n        return true\n    else:\n        return brackets[0] == \"<\" and brackets[-1] == \">\" and correct_bracketing(brackets[1:-1])\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: newline not allowed after \":\" used for quoting\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsmx4i1uf.jl:17\nin expression starting at /tmp/tmpsmx4i1uf.jl:17\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return true\n    else:\n        return brackets.count(\"<\") == brackets.count(\">\")\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxf_6a8z4.jl:14\nin expression starting at /tmp/tmpxf_6a8z4.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return true\n    else:\n        return brackets[0] == \"<\" and brackets[-1] == \">\" and all(brackets[i] == \"<\" for i in range(1, len(brackets) - 1)) and all(brackets[i] == \">\" for i in range(len(brackets) - 2, -1, -1))\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8eji701m.jl:14\nin expression starting at /tmp/tmp8eji701m.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return true\n    else:\n        return brackets.count(\"<\") == brackets.count(\">\")\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxf_6a8z4.jl:14\nin expression starting at /tmp/tmpxf_6a8z4.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return True\n    else:\n        return brackets[0] == \"<\" and brackets[-1] == \">\"\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpqihqky10.jl:14\nin expression starting at /tmp/tmpqihqky10.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return true\n    else:\n        return brackets.count(\"<\") == brackets.count(\">\")\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxf_6a8z4.jl:14\nin expression starting at /tmp/tmpxf_6a8z4.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return true\n    else:\n        return brackets[0] == \"<\" and brackets[-1] == \">\"\n\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293419,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp5ux80k74.jl:14\nin expression starting at /tmp/tmp5ux80k74.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return true\n    else:\n        return brackets.count(\"<\") == brackets.count(\">\")\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxf_6a8z4.jl:14\nin expression starting at /tmp/tmpxf_6a8z4.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return true\n    else:\n        return brackets.count(\"<\") == brackets.count(\">\")\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxf_6a8z4.jl:14\nin expression starting at /tmp/tmpxf_6a8z4.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return True\n    else:\n        return brackets.count(\"<\") == brackets.count(\">\")\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyr01s0if.jl:14\nin expression starting at /tmp/tmpyr01s0if.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return true\n    else:\n        return brackets.count(\"<\") == brackets.count(\">\")\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxf_6a8z4.jl:14\nin expression starting at /tmp/tmpxf_6a8z4.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\"\n        return true\n    else:\n        return brackets[0] == \"<\" and brackets[-1] == \">\" and all(brackets[i] == \"<\" for i in range(1, len(brackets) - 1) and brackets[i] == \">\" for i in range(1, len(brackets) - 1))\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293420,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: newline not allowed after \":\" used for quoting\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0v5urmfd.jl:17\nin expression starting at /tmp/tmp0v5urmfd.jl:17\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return true\n    else:\n        return brackets[0] == \"<\" and brackets[-1] == \">\"\n\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293419,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp5ux80k74.jl:14\nin expression starting at /tmp/tmp5ux80k74.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return true\n    else:\n        return brackets.count(\"<\") == brackets.count(\">\")\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxf_6a8z4.jl:14\nin expression starting at /tmp/tmpxf_6a8z4.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return true\n    else:\n        return brackets[0] == \"<\" and brackets[-1] == \">\"\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpma4_1_l9.jl:14\nin expression starting at /tmp/tmpma4_1_l9.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\"\n        return true\n    else:\n        return brackets[0] == \"<\" and brackets[len(brackets)-1] == \">\" and correct_bracketing(brackets[1:len(brackets)-1])\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293419,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: newline not allowed after \":\" used for quoting\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpe33h8u45.jl:17\nin expression starting at /tmp/tmpe33h8u45.jl:17\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return true\n    else:\n        return brackets[0] == \"<\" and brackets[-1] == \">\" and all(brackets[i] == \"<\" for i in range(1, len(brackets) - 1) and brackets[i] == \">\" for i in range(len(brackets) - 2, -1, -1))\n\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpp_6sucyk.jl:14\nin expression starting at /tmp/tmpp_6sucyk.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\"\n        return true\n    else:\n        return brackets[0] == \"<\" and brackets[-1] == \">\" and correct_bracketing(brackets[1:-1])\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: newline not allowed after \":\" used for quoting\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsmx4i1uf.jl:17\nin expression starting at /tmp/tmpsmx4i1uf.jl:17\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return true\n    else:\n        return brackets.count(\"<\") == brackets.count(\">\")\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxf_6a8z4.jl:14\nin expression starting at /tmp/tmpxf_6a8z4.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return true\n    else:\n        return brackets.count(\"<\") == brackets.count(\">\")\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxf_6a8z4.jl:14\nin expression starting at /tmp/tmpxf_6a8z4.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return true\n    else:\n        return brackets[0] == \"<\" and brackets[-1] == \">\" and all(brackets[i] == \"<\" for i in range(1, len(brackets) - 1) and brackets[i] == \">\" for i in range(len(brackets) - 2, -1, -1))\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_l75s98w.jl:14\nin expression starting at /tmp/tmp_l75s98w.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return true\n    else:\n        return all(brackets[i] == \">\" and brackets[i+1] == \"<\" for i in range(len(brackets)-1))\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293419,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpchx9fbrw.jl:14\nin expression starting at /tmp/tmpchx9fbrw.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return True\n    else:\n        return brackets.count(\"<\") == brackets.count(\">\")\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyr01s0if.jl:14\nin expression starting at /tmp/tmpyr01s0if.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return true\n    else:\n        return brackets[0] == \"<\" and brackets[-1] == \">\"\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpma4_1_l9.jl:14\nin expression starting at /tmp/tmpma4_1_l9.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\"\n        return true\n    else:\n        return brackets[0] == \"<\" and brackets[-1] == \">\" and all(brackets[i] == \"<\" for i in range(1, len(brackets) - 1) and brackets[i] == \">\" for i in range(1, len(brackets) - 1))\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293420,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: newline not allowed after \":\" used for quoting\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0v5urmfd.jl:17\nin expression starting at /tmp/tmp0v5urmfd.jl:17\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\"\n        return true\n    else:\n        if brackets[0] == \"<\":\n            return correct_bracketing(brackets[1:])\n        else:\n            return correct_bracketing(brackets[1:]) and correct_bracketing(brackets[0:1])\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293420,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: newline not allowed after \":\" used for quoting\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp5pw14mtg.jl:17\nin expression starting at /tmp/tmp5pw14mtg.jl:17\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return true\n    else:\n        return brackets.count(\"<\") == brackets.count(\">\")\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxf_6a8z4.jl:14\nin expression starting at /tmp/tmpxf_6a8z4.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\"\n        return true\n    else:\n        return brackets[0] == \"<\" and brackets[-1] == \">\" and correct_bracketing(brackets[1:-1])\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: newline not allowed after \":\" used for quoting\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsmx4i1uf.jl:17\nin expression starting at /tmp/tmpsmx4i1uf.jl:17\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return true\n    else:\n        return brackets.count(\"<\") == brackets.count(\">\")\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxf_6a8z4.jl:14\nin expression starting at /tmp/tmpxf_6a8z4.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\"\n        return true\n    else:\n        return brackets[0] == \"<\" and brackets[-1] == \">\" and correct_bracketing(brackets[1:-1])\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: newline not allowed after \":\" used for quoting\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsmx4i1uf.jl:17\nin expression starting at /tmp/tmpsmx4i1uf.jl:17\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return true\n    else:\n        return brackets.count(\"<\") == brackets.count(\">\")\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxf_6a8z4.jl:14\nin expression starting at /tmp/tmpxf_6a8z4.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return true\n    else:\n        return brackets.count(\"<\") == brackets.count(\">\")\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxf_6a8z4.jl:14\nin expression starting at /tmp/tmpxf_6a8z4.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return true\n    else:\n        return brackets[0] == \"<\" and brackets[-1] == \">\"\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpma4_1_l9.jl:14\nin expression starting at /tmp/tmpma4_1_l9.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return true\n    else:\n        return brackets.count(\"<\") == brackets.count(\">\")\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxf_6a8z4.jl:14\nin expression starting at /tmp/tmpxf_6a8z4.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return true\n    else:\n        return brackets[0] == \"<\" and brackets[-1] == \">\"\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpma4_1_l9.jl:14\nin expression starting at /tmp/tmpma4_1_l9.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return True\n    else:\n        return brackets[0] == \"<\" and brackets[-1] == \">\"\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpqihqky10.jl:14\nin expression starting at /tmp/tmpqihqky10.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return true\n    else:\n        return brackets[0] == \"<\" and brackets[-1] == \">\"\n\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293419,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp5ux80k74.jl:14\nin expression starting at /tmp/tmp5ux80k74.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\"\n        return true\n    else:\n        return brackets[0] == \"<\" and brackets[-1] == \">\" and all(brackets[i+1] == \">\" for i in range(len(brackets) - 2))\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: newline not allowed after \":\" used for quoting\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpct8g9v9n.jl:17\nin expression starting at /tmp/tmpct8g9v9n.jl:17\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return true\n    else:\n        return brackets.count(\"<\") == brackets.count(\">\")\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxf_6a8z4.jl:14\nin expression starting at /tmp/tmpxf_6a8z4.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return true\n    else:\n        return all(brackets[i] == \"<\" and brackets[i+1] == \">\" for i in range(len(brackets)-1))\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4sle_1kp.jl:14\nin expression starting at /tmp/tmp4sle_1kp.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return true\n    else:\n        return brackets.count(\"<\") == brackets.count(\">\")\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxf_6a8z4.jl:14\nin expression starting at /tmp/tmpxf_6a8z4.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return True\n    else:\n        return brackets[0] == \"<\" and brackets[-1] == \">\"\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpqihqky10.jl:14\nin expression starting at /tmp/tmpqihqky10.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return true\n    else:\n        return brackets.index(\"<\") == brackets.rindex(\">\")\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwy6nd_2p.jl:14\nin expression starting at /tmp/tmpwy6nd_2p.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return true\n    else:\n        return brackets.count(\"<\") == brackets.count(\">\")\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxf_6a8z4.jl:14\nin expression starting at /tmp/tmpxf_6a8z4.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\"\n        return true\n    else:\n        if brackets[0] == \"<\":\n            if brackets[len(brackets)-1] == \">\":\n                return true\n            else:\n                return false\n        else:\n            return false\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293419,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: newline not allowed after \":\" used for quoting\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxh0tvw7a.jl:17\nin expression starting at /tmp/tmpxh0tvw7a.jl:17\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return true\n    else:\n        return brackets[0] == \"<\" and brackets[-1] == \">\"\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpma4_1_l9.jl:14\nin expression starting at /tmp/tmpma4_1_l9.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return true\n    else:\n        return brackets[0] == \"<\" and brackets[-1] == \">\"\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpma4_1_l9.jl:14\nin expression starting at /tmp/tmpma4_1_l9.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return true\n    else:\n        return brackets[0] == \"<\" and brackets[-1] == \">\" and all(brackets[i] == \"<\" for i in range(1, len(brackets) - 1) and brackets[i] == \">\" for i in range(1, len(brackets) - 1))\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293419,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmps2nk5ppq.jl:14\nin expression starting at /tmp/tmps2nk5ppq.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return True\n    else:\n        return brackets[0] == \"<\" and brackets[-1] == \">\" and all(brackets[i] == \"<\" for i in range(1, len(brackets) - 1) and brackets[i] == \">\" for i in range(1, len(brackets) - 1))\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293419,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpqo3j70ch.jl:14\nin expression starting at /tmp/tmpqo3j70ch.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return true\n    else:\n        return brackets.count(\"<\") == brackets.count(\">\")\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxf_6a8z4.jl:14\nin expression starting at /tmp/tmpxf_6a8z4.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return true\n    else:\n        return brackets[0] == \"<\" and brackets[-1] == \">\" and all(brackets[i] == \"<\" for i in range(1, len(brackets) - 1) and brackets[i] == \">\" for i in range(len(brackets) - 2, -1, -1))\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_l75s98w.jl:14\nin expression starting at /tmp/tmp_l75s98w.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return true\n    else:\n        return brackets.count(\"<\") == brackets.count(\">\")\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxf_6a8z4.jl:14\nin expression starting at /tmp/tmpxf_6a8z4.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return True\n    else:\n        return brackets.count(\"<\") == brackets.count(\">\")\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyr01s0if.jl:14\nin expression starting at /tmp/tmpyr01s0if.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return true\n    else:\n        return brackets.count(\"<\") == brackets.count(\">\")\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxf_6a8z4.jl:14\nin expression starting at /tmp/tmpxf_6a8z4.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return true\n    else:\n        return brackets[0] == \"<\" and brackets[-1] == \">\"\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpma4_1_l9.jl:14\nin expression starting at /tmp/tmpma4_1_l9.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return true\n    else:\n        return brackets.index(\"<\") == brackets.rindex(\">\")\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwy6nd_2p.jl:14\nin expression starting at /tmp/tmpwy6nd_2p.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return true\n    else:\n        return brackets[0] == \"<\" and brackets[-1] == \">\"\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpma4_1_l9.jl:14\nin expression starting at /tmp/tmpma4_1_l9.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\"\n        return true\n    else:\n        return brackets[0] == \"<\" and brackets[-1] == \">\" and correct_bracketing(brackets[1:-1])\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: newline not allowed after \":\" used for quoting\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsmx4i1uf.jl:17\nin expression starting at /tmp/tmpsmx4i1uf.jl:17\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return true\n    else:\n        return brackets.count(\"<\") == brackets.count(\">\")\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxf_6a8z4.jl:14\nin expression starting at /tmp/tmpxf_6a8z4.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return true\n    else:\n        return brackets.count(\"<\") == brackets.count(\">\")\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxf_6a8z4.jl:14\nin expression starting at /tmp/tmpxf_6a8z4.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return true\n    else:\n        return brackets.count(\"<\") == brackets.count(\">\")\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxf_6a8z4.jl:14\nin expression starting at /tmp/tmpxf_6a8z4.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return true\n    else:\n        return brackets[0] == \"<\" and brackets[-1] == \">\"\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpma4_1_l9.jl:14\nin expression starting at /tmp/tmpma4_1_l9.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return true\n    else:\n        return brackets[0] == \"<\" and brackets[-1] == \">\"\n\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293419,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp5ux80k74.jl:14\nin expression starting at /tmp/tmp5ux80k74.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return true\n    else:\n        return brackets[0] == \"<\" and brackets[-1] == \">\"\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpma4_1_l9.jl:14\nin expression starting at /tmp/tmpma4_1_l9.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\"\n        return true\n    else:\n        return brackets[0] == \"<\" and brackets[-1] == \">\" and correct_bracketing(brackets[1:-1])\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: newline not allowed after \":\" used for quoting\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsmx4i1uf.jl:17\nin expression starting at /tmp/tmpsmx4i1uf.jl:17\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return true\n    else:\n        return brackets.count(\"<\") == brackets.count(\">\")\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxf_6a8z4.jl:14\nin expression starting at /tmp/tmpxf_6a8z4.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\"\n        return true\n    else:\n        return brackets[0] == \"<\" and brackets[-1] == \">\" and correct_bracketing(brackets[1:-1])\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: newline not allowed after \":\" used for quoting\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsmx4i1uf.jl:17\nin expression starting at /tmp/tmpsmx4i1uf.jl:17\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return True\n    else:\n        return brackets[0] == \"<\" and brackets[-1] == \">\"\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpqihqky10.jl:14\nin expression starting at /tmp/tmpqihqky10.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return True\n    else:\n        return brackets[0] == \"<\" and brackets[-1] == \">\"\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpqihqky10.jl:14\nin expression starting at /tmp/tmpqihqky10.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return true\n    else:\n        return brackets[0] == \"<\" and brackets[-1] == \">\" and all(brackets[i] == \"<\" for i in range(1, len(brackets)-1)) and all(brackets[i] == \">\" for i in range(len(brackets)-2, -1, -1))\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6uq1nppt.jl:14\nin expression starting at /tmp/tmp6uq1nppt.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return true\n    else:\n        return brackets[0] == \"<\" and brackets[-1] == \">\"\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpma4_1_l9.jl:14\nin expression starting at /tmp/tmpma4_1_l9.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return true\n    else:\n        return brackets.count(\"<\") == brackets.count(\">\")\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxf_6a8z4.jl:14\nin expression starting at /tmp/tmpxf_6a8z4.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return true\n    else:\n        return brackets.count(\"<\") == brackets.count(\">\")\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxf_6a8z4.jl:14\nin expression starting at /tmp/tmpxf_6a8z4.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return true\n    else:\n        return brackets.count(\"<\") == brackets.count(\">\")\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxf_6a8z4.jl:14\nin expression starting at /tmp/tmpxf_6a8z4.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return true\n    else:\n        return brackets[0] == \"<\" and brackets[-1] == \">\"\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpma4_1_l9.jl:14\nin expression starting at /tmp/tmpma4_1_l9.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return true\n    else:\n        return brackets.count(\"<\") == brackets.count(\">\")\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxf_6a8z4.jl:14\nin expression starting at /tmp/tmpxf_6a8z4.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\"\n        return true\n    else:\n        return brackets[0] == \"<\" and brackets[-1] == \">\" and all(brackets[i] == \"<\" for i in range(1, len(brackets) - 1) and brackets[i] == \">\" for i in range(1, len(brackets) - 1))\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293420,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: newline not allowed after \":\" used for quoting\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0v5urmfd.jl:17\nin expression starting at /tmp/tmp0v5urmfd.jl:17\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return True\n    else:\n        return brackets.count(\"<\") == brackets.count(\">\")\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyr01s0if.jl:14\nin expression starting at /tmp/tmpyr01s0if.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\"\n        return true\n    else\n        return brackets[0] == \"<\" and brackets[-1] == \">\" and correct_bracketing(brackets[1:-1])\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293419,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: \"if\" at /tmp/tmpc176ac6g.jl:14 expected \"end\", got \"and\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpc176ac6g.jl:17\nin expression starting at /tmp/tmpc176ac6g.jl:17\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return True\n    else:\n        return brackets[0] == \"<\" and brackets[-1] == \">\"\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpqihqky10.jl:14\nin expression starting at /tmp/tmpqihqky10.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\"\n        return true\n    else\n        return brackets[0] == \"<\" and brackets[-1] == \">\" and all(brackets[i] == \"<\" for i in range(1, len(brackets) - 1) and brackets[i] == \">\" for i in range(len(brackets) - 2, -1, -1))\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293420,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: \"if\" at /tmp/tmpcxv91f_1.jl:14 expected \"end\", got \"and\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpcxv91f_1.jl:17\nin expression starting at /tmp/tmpcxv91f_1.jl:17\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return True\n    else:\n        return brackets.count(\"<\") == brackets.count(\">\")\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyr01s0if.jl:14\nin expression starting at /tmp/tmpyr01s0if.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return True\n    else:\n        return all(brackets[i] == \"<\" and brackets[i + 1] == \">\" for i in range(len(brackets) - 1))\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293419,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpvtr780pl.jl:14\nin expression starting at /tmp/tmpvtr780pl.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return true\n    else:\n        return brackets.count(\"<\") == brackets.count(\">\")\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxf_6a8z4.jl:14\nin expression starting at /tmp/tmpxf_6a8z4.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return true\n    else:\n        return brackets[0] == \"<\" and brackets[-1] == \">\"\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpma4_1_l9.jl:14\nin expression starting at /tmp/tmpma4_1_l9.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return true\n    else:\n        return brackets[0] == \"<\" and brackets[-1] == \">\" and all(brackets[i] == \"<\" for i in range(1, len(brackets) - 1) and brackets[i] == \">\" for i in range(len(brackets) - 2, -1, -1))\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_l75s98w.jl:14\nin expression starting at /tmp/tmp_l75s98w.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return true\n    else:\n        return brackets.count(\"<\") == brackets.count(\">\")\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxf_6a8z4.jl:14\nin expression starting at /tmp/tmpxf_6a8z4.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return true\n    else:\n        return brackets.count(\"<\") == brackets.count(\">\")\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxf_6a8z4.jl:14\nin expression starting at /tmp/tmpxf_6a8z4.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return true\n    else:\n        return brackets.count(\"<\") == brackets.count(\">\")\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxf_6a8z4.jl:14\nin expression starting at /tmp/tmpxf_6a8z4.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return True\n    else:\n        return brackets.count(\"<\") == brackets.count(\">\")\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyr01s0if.jl:14\nin expression starting at /tmp/tmpyr01s0if.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\"\n        return true\n    else:\n        return brackets[0] == \"<\" and brackets[-1] == \">\" and all(brackets[i] == \"<\" for i in range(1, len(brackets)-1) and brackets[i+1] == \">\" for i in range(0, len(brackets)-2))\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: newline not allowed after \":\" used for quoting\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmph8vf1985.jl:17\nin expression starting at /tmp/tmph8vf1985.jl:17\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return true\n    else:\n        return all(brackets[i] == \">\" and brackets[i+1] == \"<\" for i in range(len(brackets)-1))\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293419,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpchx9fbrw.jl:14\nin expression starting at /tmp/tmpchx9fbrw.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return True\n    else:\n        return brackets.count(\"<\") == brackets.count(\">\")\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyr01s0if.jl:14\nin expression starting at /tmp/tmpyr01s0if.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return True\n    else:\n        return all(brackets[i] == \">\" and brackets[i+1] == \"<\" for i in range(len(brackets)-1))\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293420,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpzg_ekoy9.jl:14\nin expression starting at /tmp/tmpzg_ekoy9.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return true\n    else:\n        return brackets.count(\"<\") == brackets.count(\">\")\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxf_6a8z4.jl:14\nin expression starting at /tmp/tmpxf_6a8z4.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return true\n    else:\n        return brackets.count(\"<\") == brackets.count(\">\")\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxf_6a8z4.jl:14\nin expression starting at /tmp/tmpxf_6a8z4.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return true\n    else:\n        return brackets.count(\"<\") == brackets.count(\">\")\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxf_6a8z4.jl:14\nin expression starting at /tmp/tmpxf_6a8z4.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return True\n    else:\n        return all(brackets[i] == \"<\" and brackets[i+1] == \">\" for i in range(len(brackets)-1))\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_bexfthm.jl:14\nin expression starting at /tmp/tmp_bexfthm.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\"\n        return true\n    else:\n        return brackets[0] == \"<\" and brackets[-1] == \">\" and correct_bracketing(brackets[1:-1])\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: newline not allowed after \":\" used for quoting\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsmx4i1uf.jl:17\nin expression starting at /tmp/tmpsmx4i1uf.jl:17\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return true\n    else:\n        return brackets.count(\"<\") == brackets.count(\">\")\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxf_6a8z4.jl:14\nin expression starting at /tmp/tmpxf_6a8z4.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return true\n    else:\n        return brackets.index(\"<\") == brackets.rindex(\">\")\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwy6nd_2p.jl:14\nin expression starting at /tmp/tmpwy6nd_2p.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return true\n    else:\n        return brackets[0] == \"<\" and brackets[-1] == \">\" and all(brackets[i] == \"<\" for i in range(1, len(brackets) - 1) and brackets[i] == \">\" for i in range(len(brackets) - 2, -1, -1))\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_l75s98w.jl:14\nin expression starting at /tmp/tmp_l75s98w.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return true\n    else:\n        return brackets[0] == \"<\" and brackets[-1] == \">\"\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpma4_1_l9.jl:14\nin expression starting at /tmp/tmpma4_1_l9.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return true\n    else:\n        return brackets[0] == \"<\" and brackets[-1] == \">\" and all(brackets[i] == \"<\" for i in range(1, len(brackets) - 1)) and all(brackets[i] == \">\" for i in range(len(brackets) - 2, -1, -1))\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8eji701m.jl:14\nin expression starting at /tmp/tmp8eji701m.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return true\n    else:\n        return brackets.count(\"<\") == brackets.count(\">\")\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxf_6a8z4.jl:14\nin expression starting at /tmp/tmpxf_6a8z4.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return true\n    else:\n        return brackets[0] == \"<\" and brackets[-1] == \">\"\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpma4_1_l9.jl:14\nin expression starting at /tmp/tmpma4_1_l9.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return true\n    else:\n        return all(brackets[i] == \">\" and brackets[i+1] == \"<\" for i in range(len(brackets)-1))\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293419,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpchx9fbrw.jl:14\nin expression starting at /tmp/tmpchx9fbrw.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return true\n    else:\n        return all(brackets[i] == \">\" and brackets[i + 1] == \"<\" for i in range(len(brackets) - 1))\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293420,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9s3f7az7.jl:14\nin expression starting at /tmp/tmp9s3f7az7.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return true\n    else:\n        return brackets[0] == \"<\" and brackets[-1] == \">\"\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpma4_1_l9.jl:14\nin expression starting at /tmp/tmpma4_1_l9.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return true\n    else:\n        return brackets.count(\"<\") == brackets.count(\">\")\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxf_6a8z4.jl:14\nin expression starting at /tmp/tmpxf_6a8z4.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return True\n    else:\n        return brackets.count(\"<\") == brackets.count(\">\")\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyr01s0if.jl:14\nin expression starting at /tmp/tmpyr01s0if.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\"\n        return true\n    else:\n        return brackets[0] == \"<\" and brackets[-1] == \">\" and all(brackets[i] == \"<\" for i in range(1, len(brackets) - 1) and brackets[i] == \">\" for i in range(len(brackets) - 2, -1, -1))\n\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: newline not allowed after \":\" used for quoting\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpqe8hsnoe.jl:17\nin expression starting at /tmp/tmpqe8hsnoe.jl:17\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return true\n    else:\n        return brackets[0] == \"<\" and brackets[-1] == \">\"\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpma4_1_l9.jl:14\nin expression starting at /tmp/tmpma4_1_l9.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return true\n    else:\n        return brackets.count(\"<\") == brackets.count(\">\")\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxf_6a8z4.jl:14\nin expression starting at /tmp/tmpxf_6a8z4.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return True\n    else:\n        return brackets.count(\"<\") == brackets.count(\">\")\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyr01s0if.jl:14\nin expression starting at /tmp/tmpyr01s0if.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return true\n    else:\n        return brackets[0] == \"<\" and brackets[-1] == \">\" and all(brackets[i] == \"<\" for i in range(1, len(brackets) - 1) and brackets[i] == \">\" for i in range(1, len(brackets) - 1))\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293419,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmps2nk5ppq.jl:14\nin expression starting at /tmp/tmps2nk5ppq.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return true\n    else:\n        return brackets.count(\"<\") == brackets.count(\">\")\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxf_6a8z4.jl:14\nin expression starting at /tmp/tmpxf_6a8z4.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return true\n    else:\n        return brackets.count(\"<\") == brackets.count(\">\")\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxf_6a8z4.jl:14\nin expression starting at /tmp/tmpxf_6a8z4.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\" or brackets == \" \":\n        return true\n    else:\n        return brackets.count(\"<\") == brackets.count(\">\")\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxf_6a8z4.jl:14\nin expression starting at /tmp/tmpxf_6a8z4.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}