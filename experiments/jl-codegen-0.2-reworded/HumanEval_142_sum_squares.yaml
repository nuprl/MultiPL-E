name: HumanEval_142_sum_squares
language: jl
prompt: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
  \ in the vector, the function shall square the integer entry if its index is a \n\
  \    multiple of 3 and will cube the integer entry if its index is a multiple of\
  \ 4 and not a multiple of 3. The function will not \n    change the entries in the\
  \ vector whose indexes are not a multiple of 3 or 4. The function shall then return\
  \ the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n  \
  \  >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
  \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
  \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
  \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
  \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t\
  @test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9,\
  \ -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
  \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
  \ == -1448)\nend\n"
completions: ['    return sum(map(lambda x: x * x, filter(lambda x: x % 3 == 0, lst)))
    + sum(map(lambda x: x * x * x, filter(lambda x: x % 4 != 0 and x % 3 != 0, lst)))',
  '    return sum(map(lambda x: x**2 if x % 3 == 0 else x**3 if x % 4 == 0 else x,
    lst))', "    let sum = 0\n    for i in 0..lst.length - 1\n        if i %% 3 ==\
    \ 0\n            sum += lst[i] ** 2\n        else if i %% 4 == 0\n           \
    \ sum += lst[i] ** 3\n    return sum", '    return sum(map(lambda x: x ** 2, filter(lambda
    x: x % 3 == 0, lst)))', '    return sum(map(lambda x: x ** 2, filter(lambda x:
    x % 3 == 0, lst))) + sum(map(lambda x: x ** 3, filter(lambda x: x % 4 != 0, lst)))',
  '    return sum(map(lambda x: x * x, filter(lambda x: x % 3 == 0, lst))) + sum(map(lambda
    x: x * x * x, filter(lambda x: x % 4 != 0 and x % 3 != 0, lst)))', '    return
    sum(map(lambda x: x * x, filter(lambda x: x % 3 == 0, lst))) + sum(map(lambda
    x: x * x * x, filter(lambda x: x % 4 != 0 and x % 3 != 0, lst)))', '    return
    sum(map(lambda x: x**2 if x % 3 == 0 else x**3 if x % 4 != 0 else x, lst))', '    return
    sum(map(lambda x: x * x, filter(lambda x: x % 3 == 0, lst))) + sum(map(lambda
    x: x * x * x, filter(lambda x: x % 4 != 0 and x % 3 != 0, lst)))', "    let sum\
    \ = 0\n    for i in lst\n        if i % 3 == 0\n            sum += i * i\n   \
    \     else if i % 4 == 0\n            sum += i * i * i\n    return sum", '    return
    sum(map(lambda x: x**2 if x % 3 == 0 else x**3 if x % 4 != 0 else x, lst))', '    return
    sum(map(lambda x: x * x, filter(lambda x: x % 3 == 0, lst))) + sum(map(lambda
    x: x * x * x, filter(lambda x: x % 4 != 0 and x % 3 != 0, lst)))', '    return
    sum(map(lambda x: x ** 2, filter(lambda x: x % 3 == 0, lst))) + sum(map(lambda
    x: x ** 3, filter(lambda x: x % 4 != 0, lst)))', '    return sum(map(lambda x:
    x ** 2, filter(lambda x: x % 3 == 0, lst))) + sum(map(lambda x: x ** 3, filter(lambda
    x: x % 4 != 0 and x % 3 != 0, lst)))', '    return sum(map(lambda x: x ** 2, filter(lambda
    x: x % 3 == 0, lst))) + sum(map(lambda x: x ** 3, filter(lambda x: x % 4 != 0,
    lst)))', "    let sum = 0\n    for i in 0 to lst.length - 1\n        if i % 3\
    \ == 0\n            sum += lst[i] * lst[i]\n        else if i % 4 == 0\n     \
    \       sum += lst[i] * lst[i] * lst[i]\n    return sum", "    for i in 0 to lst.length\
    \ - 1\n        if i % 3 == 0\n            lst[i] = lst[i] * lst[i]\n        else\
    \ if i % 4 == 0\n            lst[i] = lst[i] * lst[i] * lst[i]\n    return sum(lst)",
  '    return sum(map(lambda x: x * x, filter(lambda x: x % 3 == 0, lst))) + sum(map(lambda
    x: x * x * x, filter(lambda x: x % 4 != 0 and x % 3 != 0, lst)))', '    return
    sum(map(lambda x: x ** 2, filter(lambda x: x % 3 == 0, lst))) + sum(map(lambda
    x: x ** 3, filter(lambda x: x % 4 != 0, lst)))', '    return sum(map(lambda x:
    x ** 2, filter(lambda x: x % 3 == 0, lst))) + sum(map(lambda x: x ** 3, filter(lambda
    x: x % 4 != 0 and x % 3 != 0, lst)))', '    return sum(map(lambda x: x * x, filter(lambda
    x: x % 3 == 0, lst))) + sum(map(lambda x: x * x * x, filter(lambda x: x % 4 !=
    0 and x % 3 != 0, lst)))', '    return sum(map(lambda x: x ** 2, filter(lambda
    x: x % 3 == 0, lst))) + sum(map(lambda x: x ** 3, filter(lambda x: x % 4 != 0,
    lst)))', "    for i in lst\n        if i % 3 == 0\n            lst[i] = lst[i]\
    \ * lst[i]\n        else if i % 4 == 0\n            lst[i] = lst[i] * lst[i] *\
    \ lst[i]\n    return sum(lst)", "    let sum = 0\n    for i in lst\n        if\
    \ i % 3 == 0\n            sum += i * i\n        else if i % 4 == 0\n         \
    \   sum += i * i * i\n    return sum", '    return sum(map(lambda x: x ** 2, filter(lambda
    x: x % 3 == 0, lst))) + sum(map(lambda x: x ** 3, filter(lambda x: x % 4 != 0,
    lst)))', '    return sum(map(lambda x: x ** 2, filter(lambda x: x % 3 == 0, lst)))
    + sum(map(lambda x: x ** 3, filter(lambda x: x % 4 != 0, lst)))', '    return
    sum(map(lambda x: x**2, filter(lambda x: x%3==0, lst))) + sum(map(lambda x: x**3,
    filter(lambda x: x%4==0, lst)))', "    return sum(map(lambda x: x ** 2, filter(lambda\
    \ x: x % 3 == 0, lst)))\n    \ndef sum_cubes(lst::Vector{Int64})::Int64 \n   \
    \ return sum(map(lambda x: x ** 3, filter(lambda x: x % 4 == 0, lst)))\n    \n\
    def sum_squares_and_cubes(lst::Vector{Int64})::Int64 \n    return sum(map(lambda\
    \ x: x ** 2, filter(lambda x: x % 3 == 0, lst))) + sum(map(lambda x: x ** 3, filter(lambda\
    \ x: x % 4 == 0, lst)))\n    \ndef main():\n    lst = [1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10]\n    print(sum_squares(lst))\n    print(sum_cubes(lst))\n    print(sum_squares_and_cubes(lst))\n\
    \    \nif __name__ == \"__main__\":\n    main()", '    return sum(map(lambda x:
    x * x, filter(lambda x: x % 3 == 0, lst))) + sum(map(lambda x: x * x * x, filter(lambda
    x: x % 4 != 0 and x % 3 != 0, lst)))', "    let sum = 0\n    for i in lst\n  \
    \      if i % 3 == 0\n            sum += i * i\n        else if i % 4 == 0\n \
    \           sum += i * i * i\n    return sum", "    return sum(map(lambda x: x\
    \ ** 2, filter(lambda x: x % 3 == 0, lst)))\n    \n    \ndef sum_cubes(lst::Vector{Int64})::Int64\
    \ \n    return sum(map(lambda x: x ** 3, filter(lambda x: x % 4 == 0, lst)))\n\
    \    \n    \ndef main():\n    lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(sum_squares(lst))\n\
    \    print(sum_cubes(lst))\n    \n    \nif __name__ == \"__main__\":\n    main()",
  '    return sum(map(lambda x: x ** 2, filter(lambda x: x % 3 == 0, lst))) + sum(map(lambda
    x: x ** 3, filter(lambda x: x % 4 != 0, lst)))', '    return sum(map(lambda x:
    x * x, filter(lambda x: x % 3 == 0, lst))) + sum(map(lambda x: x * x * x, filter(lambda
    x: x % 4 != 0 and x % 3 != 0, lst)))', "    return sum(map(lambda x: x ** 2, filter(lambda\
    \ x: x % 3 == 0, lst)))\n    \ndef sum_cubes(lst::Vector{Int64})::Int64 \n   \
    \ return sum(map(lambda x: x ** 3, filter(lambda x: x % 4 == 0, lst)))\n    \n\
    def main():\n    lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(sum_squares(lst))\n\
    \    print(sum_cubes(lst))\n    \nif __name__ == \"__main__\":\n    main()", '    return
    sum(map(lambda x: x * x, filter(lambda x: x % 3 == 0, lst))) + sum(map(lambda
    x: x * x * x, filter(lambda x: x % 4 != 0 and x % 3 != 0, lst)))', "    return\
    \ sum(map(lambda x: x * x, filter(lambda x: x % 3 == 0, lst)))\n    \ndef sum_cubes(lst::Vector{Int64})::Int64\
    \ \n    return sum(map(lambda x: x * x * x, filter(lambda x: x % 4 == 0, lst)))\n\
    \    \ndef main():\n    print(sum_squares([1, 2, 3]))\n    print(sum_cubes([1,\
    \ 2, 3]))\n    print(sum_squares([1, 2, 3, 4]))\n    print(sum_cubes([1, 2, 3,\
    \ 4]))\n    print(sum_squares([1, 2, 3, 4, 5]))\n    print(sum_cubes([1, 2, 3,\
    \ 4, 5]))\n    print(sum_squares([1, 2, 3, 4, 5, 6]))\n    print(sum_cubes([1,\
    \ 2, 3, 4, 5, 6]))\n    print(sum_squares([1, 2, 3, 4, 5, 6, 7]))\n    print(sum_cubes([1,\
    \ 2, 3, 4, 5, 6, 7]))\n    print(sum_squares([1, 2, 3, 4, 5, 6, 7, 8]))\n    print(sum_cubes([1,\
    \ 2, 3, 4, 5, 6, 7, 8]))\n    print(sum_squares([1, 2, 3, 4, 5, 6, 7, 8, 9]))\n\
    \    print(sum_cubes([1, 2, 3, 4, 5, 6, 7, 8, 9]))\n    print(sum_squares([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    print(sum_cubes([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10]))\n    print(sum_squares([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    print(sum_cubes([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9,", '    return sum(map(lambda x: x ** 2, filter(lambda
    x: x % 3 == 0, lst)))', '    return sum(map(lambda x: x ** 2, filter(lambda x:
    x % 3 == 0, lst))) + sum(map(lambda x: x ** 3, filter(lambda x: x % 4 != 0 and
    x % 3 != 0, lst)))', "    return sum(map(lambda x: x ** 2, filter(lambda x: x\
    \ % 3 == 0, lst)))\n    \ndef sum_cubes(lst::Vector{Int64})::Int64 \n    return\
    \ sum(map(lambda x: x ** 3, filter(lambda x: x % 4 == 0, lst)))", "    let sum\
    \ = 0\n    for i in lst\n        if i % 3 == 0\n            sum += i * i\n   \
    \     else if i % 4 == 0\n            sum += i * i * i\n    return sum", "   \
    \ sum = 0\n    for i in lst\n        if i % 3 == 0\n            sum += i * i\n\
    \        else if i % 4 == 0\n            sum += i * i * i\n    return sum", " \
    \   return sum(map(lambda x: x ** 2, filter(lambda x: x % 3 == 0, lst)))\n   \
    \ \ndef sum_cubes(lst::Vector{Int64})::Int64 \n    return sum(map(lambda x: x\
    \ ** 3, filter(lambda x: x % 4 == 0, lst)))\n    \ndef main():\n    lst = [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(sum_squares(lst))\n    print(sum_cubes(lst))\n\
    \    \nif __name__ == \"__main__\":\n    main()", "    let sum_squares = 0\n \
    \   for i in lst\n        if i % 3 == 0\n            sum_squares += i * i\n  \
    \      else if i % 4 == 0\n            sum_squares += i * i * i * i\n        else\n\
    \            sum_squares += i\n    return sum_squares", '    return sum(map(lambda
    x: x * x, filter(lambda x: x % 3 == 0, lst))) + sum(map(lambda x: x * x * x, filter(lambda
    x: x % 4 != 0 and x % 3 != 0, lst)))', '    return sum(map(lambda x: x ** 2, filter(lambda
    x: x % 3 == 0, lst))) + sum(map(lambda x: x ** 3, filter(lambda x: x % 4 != 0
    and x % 3 != 0, lst)))', "    return sum(map(lambda x: x ** 2, filter(lambda x:\
    \ x % 3 == 0, lst)))\n    \n    \ndef sum_cubes(lst::Vector{Int64})::Int64 \n\
    \    return sum(map(lambda x: x ** 3, filter(lambda x: x % 4 != 0, lst)))\n  \
    \  \n    \ndef main():\n    \"\"\"\n    Main entry point for the program.\n  \
    \  \"\"\"\n    lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(sum_squares(lst))\n\
    \    print(sum_cubes(lst))\n    \n    \nif __name__ == \"__main__\":\n    main()\n",
  '    return sum(map(lambda x: x ** 2, lst))', '    return sum(map(lambda x: x**2,
    filter(lambda x: x%3==0, lst))) + sum(map(lambda x: x**3, filter(lambda x: x%4==0,
    lst)))', '    return sum(map(lambda x: x * x, filter(lambda x: x % 3 == 0, lst)))
    + sum(map(lambda x: x * x * x, filter(lambda x: x % 4 != 0 and x % 3 != 0, lst)))',
  '    return sum(map(lambda x: x**2, filter(lambda x: x % 3 == 0, lst))) + sum(map(lambda
    x: x**3, filter(lambda x: x % 4 != 0, lst)))', "    let sum = 0\n    for i in\
    \ lst\n        if i % 3 == 0\n            sum += i * i\n        else if i % 4\
    \ == 0\n            sum += i * i * i\n    return sum", '    return sum(map(lambda
    x: x ** 2, filter(lambda x: x % 3 == 0, lst)))', '    return sum(map(lambda x:
    x * x, filter(lambda x: x % 3 == 0, lst))) + sum(map(lambda x: x * x * x, filter(lambda
    x: x % 4 != 0 and x % 3 != 0, lst)))', '    return sum(map(lambda x: x ** 2, filter(lambda
    x: x % 3 == 0, lst))) + sum(map(lambda x: x ** 3, filter(lambda x: x % 4 != 0,
    lst)))', '    return sum(map(lambda x: x ** 2, filter(lambda x: x % 3 == 0, lst)))
    + sum(map(lambda x: x ** 3, filter(lambda x: x % 4 != 0, lst)))', '    return
    sum(map(lambda x: x * x, filter(lambda x: x % 3 == 0, lst))) + sum(map(lambda
    x: x * x * x, filter(lambda x: x % 4 != 0 and x % 3 != 0, lst)))', "    return\
    \ sum(map(lambda x: x * x, filter(lambda x: x % 3 == 0, lst)))\n    \ndef sum_cubes(lst::Vector{Int64})::Int64\
    \ \n    return sum(map(lambda x: x * x * x, filter(lambda x: x % 4 == 0 and x\
    \ % 3 != 0, lst)))", '    return sum(map(lambda x: x**2, filter(lambda x: x%3==0,
    lst))) + sum(map(lambda x: x**3, filter(lambda x: x%4!=0, lst)))', '    return
    sum(map(lambda x: x ** 2, filter(lambda x: x % 3 == 0, lst))) + sum(map(lambda
    x: x ** 3, filter(lambda x: x % 4 != 0, lst)))', '    return sum(map(lambda x:
    x**2, filter(lambda x: x%3==0, lst))) + sum(map(lambda x: x**3, filter(lambda
    x: x%4!=0, lst)))', '    return sum(map(lambda x: x ** 2, filter(lambda x: x %
    3 == 0, lst))) + sum(map(lambda x: x ** 3, filter(lambda x: x % 4 != 0, lst)))',
  '    return sum(map(lambda x: x ** 2, filter(lambda x: x % 3 == 0, lst))) + sum(map(lambda
    x: x ** 3, filter(lambda x: x % 4 != 0 and x % 3 != 0, lst)))', '    return sum(map(lambda
    x: x * x, filter(lambda x: x % 3 == 0, lst))) + sum(map(lambda x: x * x * x, filter(lambda
    x: x % 4 != 0 and x % 3 != 0, lst)))', "    return sum(map(lambda x: x * x, filter(lambda\
    \ x: x % 3 == 0, lst)))\n    \ndef sum_cubes(lst::Vector{Int64})::Int64 \n   \
    \ return sum(map(lambda x: x * x * x, filter(lambda x: x % 4 != 0 and x % 3 ==\
    \ 0, lst)))", '    return sum(map(lambda x: x * x, filter(lambda x: x % 3 == 0,
    lst))) + sum(map(lambda x: x * x * x, filter(lambda x: x % 4 != 0 and x % 3 !=
    0, lst)))', '    return sum(map(lambda x: x ** 2, filter(lambda x: x % 3 == 0,
    lst))) + sum(map(lambda x: x ** 3, filter(lambda x: x % 4 != 0 and x % 3 != 0,
    lst)))', "    let sum = 0\n    for i in lst\n        if i % 3 == 0\n         \
    \   sum += i * i\n        else if i % 4 == 0\n            sum += i * i * i\n \
    \   return sum", "    let sum = 0\n    for i in lst\n        if i % 3 == 0\n \
    \           sum += i * i\n        else if i % 4 == 0\n            sum += i * i\
    \ * i\n    return sum", '    return sum(map(lambda x: x * x, filter(lambda x:
    x % 3 == 0, lst))) + sum(map(lambda x: x * x * x, filter(lambda x: x % 4 != 0
    and x % 3 != 0, lst)))', '    return sum(map(lambda x: x * x, filter(lambda x:
    x % 3 == 0, lst))) + sum(map(lambda x: x * x * x, filter(lambda x: x % 4 != 0
    and x % 3 == 0, lst)))', '    return sum(map(lambda x: x ** 2, filter(lambda x:
    x % 3 == 0, lst))) + sum(map(lambda x: x ** 3, filter(lambda x: x % 4 != 0 and
    x % 3 != 0, lst)))', '    return sum(map(lambda x: x * x, filter(lambda x: x %
    3 == 0, lst))) + sum(map(lambda x: x * x * x, filter(lambda x: x % 4 != 0 and
    x % 3 != 0, lst)))', '    return sum(map(lambda x: x ** 2, filter(lambda x: x
    % 3 == 0, lst))) + sum(map(lambda x: x ** 3, filter(lambda x: x % 4 != 0, lst)))',
  "    return sum(map(lambda x: x * x, filter(lambda x: x % 3 == 0, lst)))\n    \n\
    def sum_cubes(lst::Vector{Int64})::Int64 \n    return sum(map(lambda x: x * x\
    \ * x, filter(lambda x: x % 4 != 0 and x % 3 == 0, lst)))", "    return sum(map(lambda\
    \ x: x * x, filter(lambda x: x % 3 == 0, lst)))\n    \n    \ndef main():\n   \
    \ \"\"\"\n    Main entry point for your application. This function will be called\
    \ by the operating system to run your application.\n    \"\"\"\n    pass", '    return
    sum(map(lambda x: x ** 2, filter(lambda x: x % 3 == 0, lst)))', '    return sum(map(lambda
    x: x ** 2, filter(lambda x: x % 3 == 0, lst))) + sum(map(lambda x: x ** 3, filter(lambda
    x: x % 4 != 0, lst)))', '    return sum(map(lambda x: x * x, filter(lambda x:
    x % 3 == 0, lst))) + sum(map(lambda x: x * x * x, filter(lambda x: x % 4 != 0
    and x % 3 != 0, lst)))', "    for i in lst\n        if i % 3 == 0\n          \
    \  lst[i] = lst[i] * lst[i]\n        else if i % 4 == 0\n            lst[i] =\
    \ lst[i] * lst[i] * lst[i]\n    return sum(lst)", '    return sum(map(lambda x:
    x * x, filter(lambda x: x % 3 == 0, lst))) + sum(map(lambda x: x * x * x, filter(lambda
    x: x % 4 != 0 and x % 3 != 0, lst)))', '    return sum(map(lambda x: x * x, filter(lambda
    x: x % 3 == 0, lst))) + sum(map(lambda x: x * x * x, filter(lambda x: x % 4 !=
    0 and x % 3 != 0, lst)))', '    return sum(map(lambda x: x ** 2, filter(lambda
    x: x % 3 == 0, lst)))', '    return sum(map(lambda x: x * x, filter(lambda x:
    x % 3 == 0, lst))) + sum(map(lambda x: x * x * x, filter(lambda x: x % 4 != 0
    and x % 3 != 0, lst)))', "    return sum(map(lambda x: x ** 2, filter(lambda x:\
    \ x % 3 == 0, lst)))\n    \ndef sum_cubes(lst::Vector{Int64})::Int64 \n    return\
    \ sum(map(lambda x: x ** 3, filter(lambda x: x % 4 != 0, lst)))\n    \ndef main():\n\
    \    lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(sum_squares(lst))\n    print(sum_cubes(lst))\n\
    \    \nif __name__ == \"__main__\":\n    main()", "    let sum = 0\n    for i\
    \ in lst\n        if i % 3 == 0\n            sum += i * i\n        else if i %\
    \ 4 == 0\n            sum += i * i * i\n    return sum", '    return sum(map(lambda
    x: x ** 2, filter(lambda x: x % 3 == 0, lst))) + sum(map(lambda x: x ** 3, filter(lambda
    x: x % 4 != 0, lst)))', "    let sum = 0\n    for i in 0 .. lst.length - 1\n \
    \       if i %% 3 == 0\n            sum += lst[i] ** 2\n        else if i %% 4\
    \ == 0\n            sum += lst[i] ** 3\n    return sum", "    let sum = 0\n  \
    \  for i in lst\n        if i % 3 == 0\n            sum += i * i\n        else\
    \ if i % 4 == 0\n            sum += i * i * i\n    return sum", "    return sum(map(lambda\
    \ x: x * x, filter(lambda x: x % 3 == 0, lst)))\n    \ndef sum_cubes(lst::Vector{Int64})::Int64\
    \ \n    return sum(map(lambda x: x * x * x, filter(lambda x: x % 4 == 0 and x\
    \ % 3 != 0, lst)))\n    \ndef main():\n    lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\
    \    print(sum_squares(lst))\n    print(sum_cubes(lst))\n    \nif __name__ ==\
    \ \"__main__\":\n    main()", "    return sum(map(lambda x: x ** 2, filter(lambda\
    \ x: x % 3 == 0, lst)))\n    \ndef sum_cubes(lst::Vector{Int64})::Int64 \n   \
    \ return sum(map(lambda x: x ** 3, filter(lambda x: x % 4 != 0, lst)))", '    return
    sum(map(lambda x: x ** 2, filter(lambda x: x % 3 == 0, lst))) + sum(map(lambda
    x: x ** 3, filter(lambda x: x % 4 != 0, lst)))', "    return sum(map(lambda x:\
    \ x ** 2, filter(lambda x: x % 3 == 0, lst)))\n    \ndef sum_cubes(lst::Vector{Int64})::Int64\
    \ \n    return sum(map(lambda x: x ** 3, filter(lambda x: x % 4 == 0, lst)))",
  '    return sum(map(lambda x: x * x, filter(lambda x: x % 3 == 0, lst))) + sum(map(lambda
    x: x * x * x, filter(lambda x: x % 4 != 0 and x % 3 == 0, lst)))', '    return
    sum(map(lambda x: x ** 2, filter(lambda x: x % 3 == 0, lst))) + sum(map(lambda
    x: x ** 3, filter(lambda x: x % 4 != 0, lst)))', '    return sum(map(lambda x:
    x**2, filter(lambda x: x%3==0, lst))) + sum(map(lambda x: x**3, filter(lambda
    x: x%4==0, lst)))', "    return sum(map(lambda x: x ** 2, filter(lambda x: x %\
    \ 3 == 0, lst)))\n    \n    \ndef sum_cubes(lst::Vector{Int64})::Int64 \n    return\
    \ sum(map(lambda x: x ** 3, filter(lambda x: x % 4 == 0, lst)))\n    \n    \n\
    def main():\n    lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,\
    \ 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35,\
    \ 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54,\
    \ 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73,\
    \ 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92,\
    \ 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109,\
    \ 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125,\
    \ 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141,\
    \ 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157,\
    \ 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173,\
    \ 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189,\
    \ 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205,\
    \ 206, 207, 208, 209, 210", "    let sum = 0\n    for i in 0 .. lst.length - 1\n\
    \        if i % 3 == 0\n            sum += lst[i] ** 2\n        else if i % 4\
    \ == 0\n            sum += lst[i] ** 3\n    return sum", "    let sum_squares\
    \ = 0\n    for i in lst\n        if i % 3 == 0\n            sum_squares += i *\
    \ i\n        else if i % 4 == 0\n            sum_squares += i * i * i * i\n  \
    \      else\n            sum_squares += i\n    return sum_squares", "    let sum\
    \ = 0\n    for i in lst\n        if i % 3 == 0\n            sum += i * i\n   \
    \     else if i % 4 == 0\n            sum += i * i * i\n    return sum", "   \
    \ return sum(map(lambda x: x ** 2, filter(lambda x: x % 3 == 0, lst)))\n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    return sum(map(lambda x: x**2,\
    \ filter(lambda x: x%3==0, lst)))\n    \ndef sum_cubes(lst::Vector{Int64})::Int64\
    \ \n    return sum(map(lambda x: x**3, filter(lambda x: x%4==0, lst)))\n    \n\
    def sum_squares_and_cubes(lst::Vector{Int64})::Int64 \n    return sum(map(lambda\
    \ x: x**2 if x%3==0 else x**3, lst))\n    \ndef main():\n    lst = [1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10]\n    print(sum_squares(lst))\n    print(sum_cubes(lst))\n\
    \    print(sum_squares_and_cubes(lst))\n    \nif __name__ == \"__main__\":\n \
    \   main()", '    return sum(map(lambda x: x ** 2, filter(lambda x: x % 3 == 0,
    lst))) + sum(map(lambda x: x ** 3, filter(lambda x: x % 4 != 0, lst)))', '    return
    sum(map(lambda x: x * x, filter(lambda x: x % 3 == 0, lst))) + sum(map(lambda
    x: x * x * x, filter(lambda x: x % 4 != 0 and x % 3 != 0, lst)))', "    return\
    \ sum(map(lambda x: x ** 2, filter(lambda x: x % 3 == 0, lst)))\n    \n    \n\
    def sum_cubes(lst::Vector{Int64})::Int64 \n    return sum(map(lambda x: x ** 3,\
    \ filter(lambda x: x % 4 == 0, lst)))\n    \n    \ndef main():\n    lst = [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(sum_squares(lst))\n    print(sum_cubes(lst))\n\
    \    \n    \nif __name__ == \"__main__\":\n    main()", '    return sum(map(lambda
    x: x * x, filter(lambda x: x % 3 == 0, lst))) + sum(map(lambda x: x * x * x, filter(lambda
    x: x % 4 != 0 and x % 3 != 0, lst)))', '    return sum(map(lambda x: x ** 2, filter(lambda
    x: x % 3 == 0, lst))) + sum(map(lambda x: x ** 3, filter(lambda x: x % 4 != 0,
    lst)))', '    return sum(map(lambda x: x ** 2, filter(lambda x: x % 3 == 0, lst)))
    + sum(map(lambda x: x ** 3, filter(lambda x: x % 4 != 0, lst)))', "    let sum\
    \ = 0\n    for i in lst\n        if i % 3 == 0\n            sum += i * i\n   \
    \     else if i % 4 == 0\n            sum += i * i * i\n    return sum", '    return
    sum(map(lambda x: x * x, filter(lambda x: x % 3 == 0, lst))) + sum(map(lambda
    x: x * x * x, filter(lambda x: x % 4 != 0 and x % 3 != 0, lst)))', "    let sum\
    \ = 0\n    for i in lst\n        if i % 3 == 0\n            sum += i * i\n   \
    \     else if i % 4 == 0\n            sum += i * i * i\n        else\n       \
    \     sum += i\n    return sum", '    return sum(map(lambda x: x * x, filter(lambda
    x: x % 3 == 0, lst))) + sum(map(lambda x: x * x * x, filter(lambda x: x % 4 !=
    0 and x % 3 != 0, lst)))', '    return sum(map(lambda x: x ** 2, filter(lambda
    x: x % 3 == 0, lst))) + sum(map(lambda x: x ** 3, filter(lambda x: x % 4 != 0,
    lst)))', '    return sum(map(lambda x: x * x, filter(lambda x: x % 3 == 0, lst)))
    + sum(map(lambda x: x * x * x, filter(lambda x: x % 4 != 0 and x % 3 != 0, lst)))',
  "    return sum(map(lambda x: x ** 2, filter(lambda x: x % 3 == 0, lst)))\n    \n\
    def sum_cubes(lst::Vector{Int64})::Int64 \n    return sum(map(lambda x: x ** 3,\
    \ filter(lambda x: x % 4 != 0, lst)))", "    for i in lst\n        if i % 3 ==\
    \ 0\n            lst[i] = lst[i] * lst[i]\n        elif i % 4 == 0\n         \
    \   lst[i] = lst[i] * lst[i] * lst[i]\n    return sum(lst)", "    return sum(map(lambda\
    \ x: x * x, filter(lambda x: x % 3 == 0, lst)))\n    \n    \ndef main():\n   \
    \ lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\
    \ 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39,\
    \ 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58,\
    \ 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77,\
    \ 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96,\
    \ 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112,\
    \ 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128,\
    \ 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144,\
    \ 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160,\
    \ 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176,\
    \ 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192,\
    \ 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208,\
    \ 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224,\
    \ 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236", '    return sum(map(lambda
    x: x * x, filter(lambda x: x % 3 == 0, lst))) + sum(map(lambda x: x * x * x, filter(lambda
    x: x % 4 != 0 and x % 3 != 0, lst)))', "    return sum(map(lambda x: x * x, filter(lambda\
    \ x: x % 3 == 0, lst)))\n    \n    \ndef sum_cubes(lst::Vector{Int64})::Int64\
    \ \n    return sum(map(lambda x: x * x * x, filter(lambda x: x % 4 == 0, lst)))\n\
    \    \n    \ndef main():\n    lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(sum_squares(lst))\n\
    \    print(sum_cubes(lst))\n    \n    \nif __name__ == \"__main__\":\n    main()",
  "    return sum(map(lambda x: x * x, filter(lambda x: x % 3 == 0, lst)))\n    \n\
    def sum_cubes(lst::Vector{Int64})::Int64 \n    return sum(map(lambda x: x * x\
    \ * x, filter(lambda x: x % 4 == 0 and x % 3 != 0, lst)))", '    return sum(map(lambda
    x: x * x, filter(lambda x: x % 3 == 0, lst))) + sum(map(lambda x: x * x * x, filter(lambda
    x: x % 4 != 0 and x % 3 == 0, lst)))', "    return sum(map(lambda x: x ** 2, filter(lambda\
    \ x: x % 3 == 0, lst)))\n    \ndef sum_cubes(lst::Vector{Int64})::Int64 \n   \
    \ return sum(map(lambda x: x ** 3, filter(lambda x: x % 4 == 0, lst)))", '    return
    sum(map(lambda x: x * x, filter(lambda x: x % 3 == 0, lst))) + sum(map(lambda
    x: x * x * x, filter(lambda x: x % 4 != 0 and x % 3 != 0, lst)))', '    return
    sum(map(lambda x: x * x, filter(lambda x: x % 3 == 0, lst))) + sum(map(lambda
    x: x * x * x, filter(lambda x: x % 4 != 0 and x % 3 != 0, lst)))', "    return\
    \ sum(map(lambda x: x ** 2, filter(lambda x: x % 3 == 0, lst)))\n    \ndef sum_cubes(lst::Vector{Int64})::Int64\
    \ \n    return sum(map(lambda x: x ** 3, filter(lambda x: x % 4 == 0, lst)))",
  "    return sum(map(lambda x: x * x, filter(lambda x: x % 3 == 0, lst)))\n    \n\
    \    \ndef main():\n    \"\"\"\n    Main entry point for the program.\n    \"\"\
    \"\n    print(sum_squares([1, 2, 3]))\n    print(sum_squares([-1, -5, 2, -1, -5]))\n\
    \    print(sum_squares([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    \n    \nif __name__\
    \ == \"__main__\":\n    main()\n", '    return sum(map(lambda x: x * x, filter(lambda
    x: x % 3 == 0, lst))) + sum(map(lambda x: x * x * x, filter(lambda x: x % 4 !=
    0 and x % 3 != 0, lst)))', "    return sum(map(lambda x: x ** 2, filter(lambda\
    \ x: x % 3 == 0, lst)))\n    \n    \ndef sum_cubes(lst::Vector{Int64})::Int64\
    \ \n    return sum(map(lambda x: x ** 3, filter(lambda x: x % 4 == 0, lst)))\n\
    \    \n    \ndef main():\n    lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(sum_squares(lst))\n\
    \    print(sum_cubes(lst))\n    \n    \nif __name__ == \"__main__\":\n    main()",
  "    let sum = 0\n    for i in lst\n        if i % 3 == 0\n            sum += i\
    \ * i\n        else if i % 4 == 0\n            sum += i * i * i\n    return sum",
  "    return sum(map(lambda x: x ** 2, filter(lambda x: x % 3 == 0, lst)))\n    \n\
    \    \ndef sum_cubes(lst::Vector{Int64})::Int64 \n    return sum(map(lambda x:\
    \ x ** 3, filter(lambda x: x % 4 == 0, lst)))\n    \n    \ndef sum_squares_cubes(lst::Vector{Int64})::Int64\
    \ \n    return sum_squares(filter(lambda x: x % 4 == 0, lst)) + sum_cubes(filter(lambda\
    \ x: x % 3 == 0, lst))\n    \n    \ndef main():\n    lst = [1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10]\n    print(sum_squares(lst))\n    print(sum_cubes(lst))\n    print(sum_squares_cubes(lst))\n\
    \    \n    \nif __name__ == \"__main__\":\n    main()", "    let sum = 0\n   \
    \ for i in lst\n        if i % 3 == 0\n            sum += i * i\n        else\
    \ if i % 4 == 0\n            sum += i * i * i\n        else\n            sum +=\
    \ i\n    return sum", '    return sum(map(lambda x: x ** 2, filter(lambda x: x
    % 3 == 0, lst))) + sum(map(lambda x: x ** 3, filter(lambda x: x % 4 != 0, lst)))',
  '    return sum(map(lambda x: x ** 2, filter(lambda x: x % 3 == 0, lst)))', '    return
    sum(map(lambda x: x ** 2, filter(lambda x: x % 3 == 0, lst))) + sum(map(lambda
    x: x ** 3, filter(lambda x: x % 4 != 0, lst)))', '    return sum(map(lambda x:
    x ** 2, filter(lambda x: x % 3 == 0, lst))) + sum(map(lambda x: x ** 3, filter(lambda
    x: x % 4 != 0 and x % 3 == 0, lst)))', "    return sum(map(lambda x: x ** 2, filter(lambda\
    \ x: x % 3 == 0, lst)))\n    \ndef sum_cubes(lst::Vector{Int64})::Int64 \n   \
    \ return sum(map(lambda x: x ** 3, filter(lambda x: x % 4 == 0, lst)))", '    return
    sum(map(lambda x: x * x, filter(lambda x: x % 3 == 0, lst))) + sum(map(lambda
    x: x * x * x, filter(lambda x: x % 4 != 0 and x % 3 != 0, lst)))', "    let sum\
    \ = 0\n    for i in lst\n        if i % 3 == 0\n            sum += i * i\n   \
    \     else if i % 4 == 0\n            sum += i * i * i\n    return sum", "   \
    \ return sum(map(lambda x: x * x, filter(lambda x: x % 3 == 0, lst)))\n    \n\
    def sum_cubes(lst::Vector{Int64})::Int64 \n    return sum(map(lambda x: x * x\
    \ * x, filter(lambda x: x % 4 == 0 and x % 3 != 0, lst)))", '    return sum(map(lambda
    x: x**2, filter(lambda x: x%3==0, lst))) + sum(map(lambda x: x**3, filter(lambda
    x: x%4==0, lst)))', '    return sum(map(lambda x: x * x, filter(lambda x: x %
    3 == 0, lst))) + sum(map(lambda x: x * x * x, filter(lambda x: x % 4 != 0 and
    x % 3 != 0, lst)))', '    return sum(map(lambda x: x**2, filter(lambda x: x%3==0,
    lst)))', "    return sum(map(lambda x: x * x, filter(lambda x: x % 3 == 0, lst)))\n\
    \    \n    \ndef sum_cubes(lst::Vector{Int64})::Int64 \n    return sum(map(lambda\
    \ x: x * x * x, filter(lambda x: x % 4 == 0 and x % 3 != 0, lst)))\n    \n   \
    \ \ndef sum_squares_and_cubes(lst::Vector{Int64})::Int64 \n    return sum(map(lambda\
    \ x: x * x * x, filter(lambda x: x % 3 == 0 or x % 4 == 0, lst)))\n    \n    \n\
    def main():\n    lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(sum_squares(lst))\n\
    \    print(sum_cubes(lst))\n    print(sum_squares_and_cubes(lst))\n    \n    \n\
    if __name__ == \"__main__\":\n    main()", '    return sum(map(lambda x: x**2
    if x % 3 == 0 else x**3 if x % 4 != 0 else x, lst))', "    let sum = 0\n    for\
    \ i in lst\n        if i % 3 == 0\n            sum += i * i\n        else if i\
    \ % 4 == 0\n            sum += i * i * i\n    return sum", '    return sum(map(lambda
    x: x * x, filter(lambda x: x % 3 == 0, lst))) + sum(map(lambda x: x * x * x, filter(lambda
    x: x % 4 != 0 and x % 3 != 0, lst)))', "    let sum = 0\n    for i in lst\n  \
    \      if i % 3 == 0\n            sum += i * i\n        else if i % 4 == 0\n \
    \           sum += i * i * i\n    return sum", '    return sum(map(lambda x: x**2,
    filter(lambda x: x%3==0, lst)))', '    return sum(map(lambda x: x * x, filter(lambda
    x: x % 3 == 0, lst))) + sum(map(lambda x: x * x * x, filter(lambda x: x % 4 !=
    0 and x % 3 != 0, lst)))', "    let sum = 0\n    for i in lst\n        if i %\
    \ 3 == 0\n            sum += i * i\n        else if i % 4 == 0\n            sum\
    \ += i * i * i\n        else\n            sum += i\n    return sum", "    return\
    \ sum(map(lambda x: x ** 2, filter(lambda x: x % 3 == 0, lst)))\n    \n    \n\
    def sum_cubes(lst::Vector{Int64})::Int64 \n    return sum(map(lambda x: x ** 3,\
    \ filter(lambda x: x % 4 == 0, lst)))\n    \n    \ndef sum_squares_cubes(lst::Vector{Int64})::Int64\
    \ \n    return sum(map(lambda x: x ** 2, filter(lambda x: x % 3 == 0, lst))) +\
    \ sum(map(lambda x: x ** 3, filter(lambda x: x % 4 == 0, lst)))\n    \n    \n\
    def main():\n    lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(sum_squares(lst))\n\
    \    print(sum_cubes(lst))\n    print(sum_squares_cubes(lst))\n    \n    \nif\
    \ __name__ == \"__main__\":\n    main()", "    return sum(map(lambda x: x ** 2,\
    \ filter(lambda x: x % 3 == 0, lst)))\n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", '    return sum(map(lambda x: x * x, filter(lambda x: x % 3 ==
    0, lst))) + sum(map(lambda x: x * x * x, filter(lambda x: x % 4 != 0 and x % 3
    != 0, lst)))', '    return sum(map(lambda x: x ** 2, filter(lambda x: x % 3 ==
    0, lst)))', '    return sum(map(lambda x: x * x, filter(lambda x: x % 3 == 0,
    lst))) + sum(map(lambda x: x * x * x, filter(lambda x: x % 4 != 0 and x % 3 !=
    0, lst)))', '    return sum(map(lambda x: x ** 2, filter(lambda x: x % 3 == 0,
    lst))) + sum(map(lambda x: x ** 3, filter(lambda x: x % 4 != 0 and x % 3 != 0,
    lst)))', '    return sum(map(lambda x: x ** 2, filter(lambda x: x % 3 == 0, lst)))
    + sum(map(lambda x: x ** 3, filter(lambda x: x % 4 != 0, lst)))', '    return
    sum(map(lambda x: x * x, filter(lambda x: x % 3 == 0, lst))) + sum(map(lambda
    x: x * x * x, filter(lambda x: x % 4 != 0 and x % 3 != 0, lst)))', '    return
    sum(map(lambda x: x * x, filter(lambda x: x % 3 == 0, lst))) + sum(map(lambda
    x: x * x * x, filter(lambda x: x % 4 != 0 and x % 3 != 0, lst)))', '    return
    sum(map(lambda x: x ** 2, filter(lambda x: x % 3 == 0, lst))) + sum(map(lambda
    x: x ** 3, filter(lambda x: x % 4 != 0 and x % 3 != 0, lst)))', "    let sum =\
    \ 0\n    for i in lst\n        if i % 3 == 0\n            sum += i * i\n     \
    \   else if i % 4 == 0\n            sum += i * i * i\n    return sum", '    return
    sum(map(lambda x: x ** 2, filter(lambda x: x % 3 == 0, lst)))', '    return sum(map(lambda
    x: x * x, filter(lambda x: x % 3 == 0, lst))) + sum(map(lambda x: x * x * x, filter(lambda
    x: x % 4 != 0 and x % 3 == 0, lst)))', "    let sum = 0\n    for i in lst\n  \
    \      if i % 3 == 0\n            sum += i * i\n        else if i % 4 == 0\n \
    \           sum += i * i * i\n    return sum", '    return sum(map(lambda x: x
    ** 2, filter(lambda x: x % 3 == 0, lst)))', "    return sum(map(lambda x: x *\
    \ x, filter(lambda x: x % 3 == 0, lst)))\n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    let sum = 0\n    for i in lst\n        if i % 3 == 0\n  \
    \          sum += i * i\n        else if i % 4 == 0\n            sum += i * i\
    \ * i\n    return sum", '    return sum(map(lambda x: x ** 2, filter(lambda x:
    x % 3 == 0, lst))) + sum(map(lambda x: x ** 3, filter(lambda x: x % 4 != 0 and
    x % 3 == 0, lst)))', "    let sum = 0\n    for i in lst\n        if i % 3 == 0\n\
    \            sum += i * i\n        else if i % 4 == 0\n            sum += i *\
    \ i * i\n    return sum", "    return sum(map(lambda x: x * x, filter(lambda x:\
    \ x % 3 == 0, lst)))\n    \ndef sum_cubes(lst::Vector{Int64})::Int64 \n    return\
    \ sum(map(lambda x: x * x * x, filter(lambda x: x % 4 == 0 and x % 3 != 0, lst)))",
  '    return sum(map(lambda x: x ** 2, filter(lambda x: x % 3 == 0, lst))) + sum(map(lambda
    x: x ** 3, filter(lambda x: x % 4 != 0 and x % 3 != 0, lst)))', '    return sum(map(lambda
    x: x ** 2, filter(lambda x: x % 3 == 0, lst))) + sum(map(lambda x: x ** 3, filter(lambda
    x: x % 4 != 0, lst)))', '    return sum(map(lambda x: x * x, filter(lambda x:
    x % 3 == 0, lst))) + sum(map(lambda x: x * x * x, filter(lambda x: x % 4 != 0
    and x % 3 != 0, lst)))', '    return sum(map(lambda x: x**2, filter(lambda x:
    x%3==0, lst))) + sum(map(lambda x: x**3, filter(lambda x: x%4!=0, lst)))', '    return
    sum(map(lambda x: x**2 if x % 3 == 0 else x**3 if x % 4 != 0 else x, lst))', '    return
    sum(map(lambda x: x * x, filter(lambda x: x % 3 == 0, lst))) + sum(map(lambda
    x: x * x * x, filter(lambda x: x % 4 != 0 and x % 3 != 0, lst)))', "    for i\
    \ in range(len(lst)):\n        if i % 3 == 0:\n            lst[i] = lst[i] * lst[i]\n\
    \        elif i % 4 == 0 and i % 3 != 0:\n            lst[i] = lst[i] * lst[i]\
    \ * lst[i]\n    return sum(lst)", '    return sum(map(lambda x: x ** 2, filter(lambda
    x: x % 3 == 0, lst))) + sum(map(lambda x: x ** 3, filter(lambda x: x % 4 != 0,
    lst)))', '    return sum(map(lambda x: x * x, filter(lambda x: x % 3 == 0, lst)))
    + sum(map(lambda x: x * x * x, filter(lambda x: x % 4 != 0 and x % 3 != 0, lst)))',
  "    let sum = 0\n    for i in 0 .. lst.length - 1\n        if i %% 3 == 0\n   \
    \         sum += lst[i] ** 2\n        else\n            if i %% 4 != 0\n     \
    \           sum += lst[i] ** 2\n    return sum", "    return sum(map(lambda x:\
    \ x ** 2, filter(lambda x: x % 3 == 0, lst)))\n    \ndef sum_cubes(lst::Vector{Int64})::Int64\
    \ \n    return sum(map(lambda x: x ** 3, filter(lambda x: x % 4 != 0, lst)))\n\
    \    \ndef sum_squares_cubes(lst::Vector{Int64})::Int64 \n    return sum(map(lambda\
    \ x: x ** 2, filter(lambda x: x % 3 == 0, lst))) + sum(map(lambda x: x ** 3, filter(lambda\
    \ x: x % 4 != 0, lst)))\n    \ndef main():\n    lst = [1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10]\n    print(sum_squares(lst))\n    print(sum_cubes(lst))\n    print(sum_squares_cubes(lst))\n\
    \    \nif __name__ == \"__main__\":\n    main()", '    return sum(map(lambda x:
    x * x, filter(lambda x: x % 3 == 0, lst))) + sum(map(lambda x: x * x * x, filter(lambda
    x: x % 4 != 0 and x % 3 != 0, lst)))', '    return sum(map(lambda x: x ** 2, filter(lambda
    x: x % 3 == 0, lst))) + sum(map(lambda x: x ** 3, filter(lambda x: x % 4 != 0
    and x % 3 != 0, lst)))', '    return sum(map(lambda x: x * x, filter(lambda x:
    x % 3 == 0, lst))) + sum(map(lambda x: x * x * x, filter(lambda x: x % 4 != 0
    and x % 3 != 0, lst)))', "    let sum = 0\n    for i in lst\n        if i % 3\
    \ == 0\n            sum += i * i\n        else if i % 4 == 0\n            sum\
    \ += i * i * i\n    return sum", '    return sum(map(lambda x: x ** 2, filter(lambda
    x: x % 3 == 0, lst))) + sum(map(lambda x: x ** 3, filter(lambda x: x % 4 != 0,
    lst)))', "    return sum(map(lambda x: x**2, filter(lambda x: x%3==0, lst)))\n\
    \    \ndef sum_cubes(lst::Vector{Int64})::Int64 \n    return sum(map(lambda x:\
    \ x**3, filter(lambda x: x%4==0, lst)))", '    return sum(map(lambda x: x ** 2,
    filter(lambda x: x % 3 == 0, lst))) + sum(map(lambda x: x ** 3, filter(lambda
    x: x % 4 != 0, lst)))', '    return sum(map(lambda x: x**2, filter(lambda x: x%3==0,
    lst))) + sum(map(lambda x: x**3, filter(lambda x: x%4==0, lst)))', '    return
    sum(map(lambda x: x * x, filter(lambda x: x % 3 == 0, lst))) + sum(map(lambda
    x: x * x * x, filter(lambda x: x % 4 != 0 and x % 3 == 0, lst)))', "    return\
    \ sum(map(lambda x: x ** 2, filter(lambda x: x % 3 == 0, lst)))\n    \n    \n\
    def sum_cubes(lst::Vector{Int64})::Int64 \n    return sum(map(lambda x: x ** 3,\
    \ filter(lambda x: x % 4 == 0, lst)))\n    \n    \ndef main():\n    lst = [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(sum_squares(lst))\n    print(sum_cubes(lst))\n\
    \    \n    \nif __name__ == \"__main__\":\n    main()", '    return sum(map(lambda
    x: x ** 2, filter(lambda x: x % 3 == 0, lst))) + sum(map(lambda x: x ** 3, filter(lambda
    x: x % 4 != 0, lst)))', '    return sum(map(lambda x: x ** 2, filter(lambda x:
    x % 3 == 0, lst))) + sum(map(lambda x: x ** 3, filter(lambda x: x % 4 != 0, lst)))',
  "    let sum_squares = 0\n    for i in lst\n        if i % 3 == 0\n            sum_squares\
    \ += i * i\n        else if i % 4 == 0\n            sum_squares += i * i * i *\
    \ i\n    return sum_squares", '    return sum(map(lambda x: x * x, filter(lambda
    x: x % 3 == 0, lst))) + sum(map(lambda x: x * x * x, filter(lambda x: x % 4 !=
    0 and x % 3 != 0, lst)))', "    let sum = 0\n    for i in lst\n        if i %\
    \ 3 == 0\n            sum += i * i\n        else if i % 4 == 0\n            sum\
    \ += i * i * i\n    return sum", '    return sum(map(lambda x: x ** 2, filter(lambda
    x: x % 3 == 0, lst))) + sum(map(lambda x: x ** 3, filter(lambda x: x % 4 != 0
    and x % 3 != 0, lst)))', '    return sum(map(lambda x: x * x, filter(lambda x:
    x % 3 == 0, lst))) + sum(map(lambda x: x * x * x, filter(lambda x: x % 4 != 0
    and x % 3 != 0, lst)))', "    return sum(map(lambda x: x * x, filter(lambda x:\
    \ x % 3 == 0, lst)))\n    \n    \ndef sum_cubes(lst::Vector{Int64})::Int64 \n\
    \    return sum(map(lambda x: x * x * x, filter(lambda x: x % 4 == 0, lst)))\n\
    \    \n    \ndef sum_squares_cubes(lst::Vector{Int64})::Int64 \n    return sum(map(lambda\
    \ x: x * x * x, filter(lambda x: x % 3 == 0 or x % 4 == 0, lst)))\n    \n    \n\
    def main():\n    lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(sum_squares(lst))\n\
    \    print(sum_cubes(lst))\n    print(sum_squares_cubes(lst))\n    \n    \nif\
    \ __name__ == \"__main__\":\n    main()", '    return sum(map(lambda x: x * x,
    filter(lambda x: x % 3 == 0, lst))) + sum(map(lambda x: x * x * x, filter(lambda
    x: x % 4 != 0 and x % 3 != 0, lst)))', "    let sum = 0\n    for i in 0..lst.length\
    \ - 1\n        if i % 3 == 0\n            sum += lst[i] * lst[i]\n        else\
    \ if i % 4 == 0\n            sum += lst[i] * lst[i] * lst[i]\n    return sum"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
