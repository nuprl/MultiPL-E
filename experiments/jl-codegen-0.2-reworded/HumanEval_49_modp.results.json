{
  "name": "HumanEval_49_modp",
  "language": "jl",
  "prompt": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n",
  "tests": "using Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
  "stop_tokens": [
    "\nfunction",
    "\nmacro",
    "\n\n"
  ],
  "results": [
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n < 0:\n        n = -n\n    if p < 0:\n        p = -p\n    if p == 0:\n        raise ValueError(\"p must be > 0\")\n    if n == 0:\n        return 1\n    if n == 1:\n        return p\n    if n % 2 == 0:\n        return modp(n / 2, p) * modp(n / 2, p) % p\n    else:\n        return (modp(n / 2, p) * modp(n / 2 + 1, p) % p) * 2 % p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfzx76izm.jl:15\nin expression starting at /tmp/tmpfzx76izm.jl:15\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0: return 1\n    return (n * modp(n - 1, p)) % p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp5970az7_.jl:1\nin expression starting at /tmp/tmp5970az7_.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    return n % p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu5osy5v_.jl:13 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu5osy5v_.jl:1\nin expression starting at /tmp/tmpu5osy5v_.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n < 0:\n        n = -n\n        p = -p\n    if p == 0:\n        return 0\n    if n == 0:\n        return 1\n    if n == 1:\n        return p\n    if n % 2 == 0:\n        return modp(n / 2, p) * modp(n / 2, p) % p\n    else:\n        return modp(n / 2, p) * modp(n / 2, p) * modp(n / 2, p) % p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpi17ic2kg.jl:15\nin expression starting at /tmp/tmpi17ic2kg.jl:15\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    return n % p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu5osy5v_.jl:13 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu5osy5v_.jl:1\nin expression starting at /tmp/tmpu5osy5v_.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    return n % p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu5osy5v_.jl:13 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu5osy5v_.jl:1\nin expression starting at /tmp/tmpu5osy5v_.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    return n % p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu5osy5v_.jl:13 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu5osy5v_.jl:1\nin expression starting at /tmp/tmpu5osy5v_.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if p == 0:\n        return 0\n    if n == 0:\n        return 1\n    if n < 0:\n        n = -n\n        p = -p\n    return (n * modp(n - 1, p) % p) * (p - 1) % p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoy8b6q6c.jl:15\nin expression starting at /tmp/tmpoy8b6q6c.jl:15\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n < 0:\n        return modp(-n, p)\n    if n == 0:\n        return 0\n    if p == 0:\n        raise ZeroDivisionError\n    if p == 1:\n        return 1\n    if p == 2:\n        return n & 1\n    if p == 3:\n        return (n * 2) & 3\n    if p == 4:\n        return (n * 3) & 7\n    if p == 5:\n        return (n * 4) & 15\n    if p == 6:\n        return (n * 5) & 31\n    if p == 7:\n        return (n * 6) & 63\n    if p == 8:\n        return (n * 7) & 127\n    if p == 9:\n        return (n * 8) & 255\n    if p == 10:\n        return (n * 9) & 511\n    if p == 11:\n        return (n * 10) & 1023\n    if p == 12:\n        return (n * 11) & 2047\n    if p == 13:\n        return (n * 12) & 4095\n    if p == 14:\n        return (n * 13) & 8191\n    if p == 15:\n        return (n * 14) & 16383\n    if p == 16:\n        return (n * 15) & 32767\n    if p == 17:\n        return (n * 16) & 65535\n    if p == 18:\n        return (n * 17) & 131071\n    if p == 19:\n        return (n * 18) & 262143\n    if p == 20:\n        return (n * 19) & 524287\n    if p == 21:\n        return (n * 20) & 1048575\n    if p == 22:\n        return (n * 21) & 2097151\n    if p == 23:\n        return (n * 22) & 4194303\n    if p == 24:\n        return (n * 23) & 8388607\n    if p == 25:\n        return (n * 24) & 16777215\n    if p == 26:\n        return (n * 25) & 33554431\n    if p == 27:\n        return (n\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp69esjz2e.jl:15\nin expression starting at /tmp/tmp69esjz2e.jl:15\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n < 0:\n        n = -n\n    if p < 0:\n        p = -p\n    if p == 0:\n        raise ValueError(\"p must be > 0\")\n    if n == 0:\n        return 1\n    if n == 1:\n        return p\n    if n % 2 == 0:\n        return modp(n / 2, p) * modp(n / 2, p) % p\n    else:\n        return modp(n / 2, p) * modp(n / 2, p) * modp(n / 2, p) % p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp62jwoaks.jl:15\nin expression starting at /tmp/tmp62jwoaks.jl:15\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    return n % p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu5osy5v_.jl:13 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu5osy5v_.jl:1\nin expression starting at /tmp/tmpu5osy5v_.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n < 0:\n        n = -n\n        p = -p\n    if p == 0:\n        return 0\n    if p == 1:\n        return n\n    if p == 2:\n        return n & 1\n    if p == 3:\n        return (n * 2) & 3\n    if p == 4:\n        return (n * 3) & 7\n    if p == 5:\n        return (n * 4) & 15\n    if p == 6:\n        return (n * 5) & 31\n    if p == 7:\n        return (n * 6) & 63\n    if p == 8:\n        return (n * 7) & 127\n    if p == 9:\n        return (n * 8) & 255\n    if p == 10:\n        return (n * 9) & 511\n    if p == 11:\n        return (n * 10) & 1023\n    if p == 12:\n        return (n * 11) & 2047\n    if p == 13:\n        return (n * 12) & 4095\n    if p == 14:\n        return (n * 13) & 8191\n    if p == 15:\n        return (n * 14) & 16383\n    if p == 16:\n        return (n * 15) & 32767\n    if p == 17:\n        return (n * 16) & 65535\n    if p == 18:\n        return (n * 17) & 131071\n    if p == 19:\n        return (n * 18) & 262143\n    if p == 20:\n        return (n * 19) & 524287\n    if p == 21:\n        return (n * 20) & 1048575\n    if p == 22:\n        return (n * 21) & 2097151\n    if p == 23:\n        return (n * 22) & 4194303\n    if p == 24:\n        return (n * 23) & 8388607\n    if p == 25:\n        return (n * 24) & 16777215\n    if p == 26:\n        return (n * 25) & 33554431\n    if p == 27:\n        return (n * 26) & 67108863\n    if p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp26atgmvk.jl:15\nin expression starting at /tmp/tmp26atgmvk.jl:15\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if p == 0:\n        return 1\n    if n == 0:\n        return 0\n    return (n * modp(n - 1, p) % p) % p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppj73pkf6.jl:15\nin expression starting at /tmp/tmppj73pkf6.jl:15\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n < 0:\n        n = -n\n    if p < 0:\n        p = -p\n    if p == 0:\n        raise ValueError(\"p must be non-zero\")\n    if p == 1:\n        return 0\n    if n == 0:\n        return 1\n    if n == 1:\n        return p\n    if n == 2:\n        return (p * p) % p\n    if n % 2 == 0:\n        return (modp(n / 2, p) * modp(n / 2, p)) % p\n    else:\n        return (modp(n / 2, p) * modp(n / 2 + 1, p)) % p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjwux7djn.jl:15\nin expression starting at /tmp/tmpjwux7djn.jl:15\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if p == 0: \n        return 0 \n    if n == 0: \n        return 1 \n    return (n % p) * modp(n / p, p) % p \nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4c5hcrj3.jl:15\nin expression starting at /tmp/tmp4c5hcrj3.jl:15\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n < 0:\n        return modp(-n, p)\n    if p == 0:\n        return 0\n    if p == 1:\n        return 1\n    if p == 2:\n        return n & 1\n    if p == 3:\n        return (n * 2) & 3\n    if p == 4:\n        return (n * 3) & 7\n    if p == 5:\n        return (n * 4) & 15\n    if p == 6:\n        return (n * 5) & 31\n    if p == 7:\n        return (n * 6) & 63\n    if p == 8:\n        return (n * 7) & 127\n    if p == 9:\n        return (n * 8) & 255\n    if p == 10:\n        return (n * 9) & 511\n    if p == 11:\n        return (n * 10) & 1023\n    if p == 12:\n        return (n * 11) & 2047\n    if p == 13:\n        return (n * 12) & 4095\n    if p == 14:\n        return (n * 13) & 8191\n    if p == 15:\n        return (n * 14) & 16383\n    if p == 16:\n        return (n * 15) & 32767\n    if p == 17:\n        return (n * 16) & 65535\n    if p == 18:\n        return (n * 17) & 131071\n    if p == 19:\n        return (n * 18) & 262143\n    if p == 20:\n        return (n * 19) & 524287\n    if p == 21:\n        return (n * 20) & 1048575\n    if p == 22:\n        return (n * 21) & 2097151\n    if p == 23:\n        return (n * 22) & 4194303\n    if p == 24:\n        return (n * 23) & 8388607\n    if p == 25:\n        return (n * 24) & 16777215\n    if p == 26:\n        return (n * 25) & 33554431\n    if p == 27:\n        return (n * 26) & 67108863\n    if p == 28\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpn4m3b3m7.jl:15\nin expression starting at /tmp/tmpn4m3b3m7.jl:15\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    return n % p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu5osy5v_.jl:13 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu5osy5v_.jl:1\nin expression starting at /tmp/tmpu5osy5v_.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    return n % p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu5osy5v_.jl:13 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu5osy5v_.jl:1\nin expression starting at /tmp/tmpu5osy5v_.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    return n % p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu5osy5v_.jl:13 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu5osy5v_.jl:1\nin expression starting at /tmp/tmpu5osy5v_.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    return n % p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu5osy5v_.jl:13 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu5osy5v_.jl:1\nin expression starting at /tmp/tmpu5osy5v_.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n < 0:\n        return modp(-n, p)\n    if p == 0:\n        return 0\n    if n == 0:\n        return 1\n    if p == 1:\n        return 0\n    if p == 2:\n        return n & 1\n    if p == 3:\n        return (n * 2) & 3\n    if p == 4:\n        return (n * 3) & 7\n    if p == 5:\n        return (n * 4) & 15\n    if p == 6:\n        return (n * 5) & 31\n    if p == 7:\n        return (n * 6) & 63\n    if p == 8:\n        return (n * 7) & 127\n    if p == 9:\n        return (n * 8) & 255\n    if p == 10:\n        return (n * 9) & 511\n    if p == 11:\n        return (n * 10) & 1023\n    if p == 12:\n        return (n * 11) & 2047\n    if p == 13:\n        return (n * 12) & 4095\n    if p == 14:\n        return (n * 13) & 8191\n    if p == 15:\n        return (n * 14) & 16383\n    if p == 16:\n        return (n * 15) & 32767\n    if p == 17:\n        return (n * 16) & 65535\n    if p == 18:\n        return (n * 17) & 131071\n    if p == 19:\n        return (n * 18) & 262143\n    if p == 20:\n        return (n * 19) & 524287\n    if p == 21:\n        return (n * 20) & 1048575\n    if p == 22:\n        return (n * 21) & 2097151\n    if p == 23:\n        return (n * 22) & 4194303\n    if p == 24:\n        return (n * 23) & 8388607\n    if p == 25:\n        return (n * 24) & 16777215\n    if p == 26:\n        return (n * 25) & 33554431\n    if p == 27:\n        return (n * 26)\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp755w0pf1.jl:15\nin expression starting at /tmp/tmp755w0pf1.jl:15\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n < 0:\n        n = -n\n        p = -p\n    if p == 0:\n        return 0\n    if p == 1:\n        return 1\n    if p == 2:\n        return n & 1\n    if p == 3:\n        return (n * 2) & 3\n    if p == 4:\n        return (n * 3) & 7\n    if p == 5:\n        return (n * 4) & 15\n    if p == 6:\n        return (n * 5) & 31\n    if p == 7:\n        return (n * 6) & 63\n    if p == 8:\n        return (n * 7) & 127\n    if p == 9:\n        return (n * 8) & 255\n    if p == 10:\n        return (n * 9) & 511\n    if p == 11:\n        return (n * 10) & 1023\n    if p == 12:\n        return (n * 11) & 2047\n    if p == 13:\n        return (n * 12) & 4095\n    if p == 14:\n        return (n * 13) & 8191\n    if p == 15:\n        return (n * 14) & 16383\n    if p == 16:\n        return (n * 15) & 32767\n    if p == 17:\n        return (n * 16) & 65535\n    if p == 18:\n        return (n * 17) & 131071\n    if p == 19:\n        return (n * 18) & 262143\n    if p == 20:\n        return (n * 19) & 524287\n    if p == 21:\n        return (n * 20) & 1048575\n    if p == 22:\n        return (n * 21) & 2097151\n    if p == 23:\n        return (n * 22) & 4194303\n    if p == 24:\n        return (n * 23) & 8388607\n    if p == 25:\n        return (n * 24) & 16777215\n    if p == 26:\n        return (n * 25) & 33554431\n    if p == 27:\n        return (n * 26) & 67108863\n    if p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpspyjc62b.jl:15\nin expression starting at /tmp/tmpspyjc62b.jl:15\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    return n % p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu5osy5v_.jl:13 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu5osy5v_.jl:1\nin expression starting at /tmp/tmpu5osy5v_.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    return n % p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu5osy5v_.jl:13 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu5osy5v_.jl:1\nin expression starting at /tmp/tmpu5osy5v_.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n < 0:\n        n = -n\n    if p < 0:\n        p = -p\n    if n == 0:\n        return 0\n    if p == 1:\n        return 1\n    if p == 2:\n        return n & 1\n    if p == 3:\n        return (n * 2) & 3\n    if p == 4:\n        return (n * 3) & 7\n    if p == 5:\n        return (n * 4) & 15\n    if p == 6:\n        return (n * 5) & 31\n    if p == 7:\n        return (n * 6) & 63\n    if p == 8:\n        return (n * 7) & 127\n    if p == 9:\n        return (n * 8) & 255\n    if p == 10:\n        return (n * 9) & 511\n    if p == 11:\n        return (n * 10) & 1023\n    if p == 12:\n        return (n * 11) & 2047\n    if p == 13:\n        return (n * 12) & 4095\n    if p == 14:\n        return (n * 13) & 8191\n    if p == 15:\n        return (n * 14) & 16383\n    if p == 16:\n        return (n * 15) & 32767\n    if p == 17:\n        return (n * 16) & 65535\n    if p == 18:\n        return (n * 17) & 131071\n    if p == 19:\n        return (n * 18) & 262143\n    if p == 20:\n        return (n * 19) & 524287\n    if p == 21:\n        return (n * 20) & 1048575\n    if p == 22:\n        return (n * 21) & 2097151\n    if p == 23:\n        return (n * 22) & 4194303\n    if p == 24:\n        return (n * 23) & 8388607\n    if p == 25:\n        return (n * 24) & 16777215\n    if p == 26:\n        return (n * 25) & 33554431\n    if p == 27:\n        return (n * 26) & 67\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpkr_wpkd3.jl:15\nin expression starting at /tmp/tmpkr_wpkd3.jl:15\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    return n % p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu5osy5v_.jl:13 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu5osy5v_.jl:1\nin expression starting at /tmp/tmpu5osy5v_.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if p == 0:\n        return 0\n    if n == 0:\n        return 1\n    if p == 1:\n        return 0\n    if n < 0:\n        n = -n\n        p = -p\n    if n == 1:\n        return p\n    if n == 2:\n        return (p * p) % p\n    if n % 2 == 0:\n        return (modp(n / 2, p) * modp(n / 2, p)) % p\n    else:\n        return (modp(n / 2, p) * modp(n / 2 + 1, p)) % p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp29uq3c8t.jl:15\nin expression starting at /tmp/tmp29uq3c8t.jl:15\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n < 0:\n        n = -n\n    if p < 0:\n        p = -p\n    if p == 0:\n        return 0\n    if n == 0:\n        return 1\n    if n == 1:\n        return p\n    if p == 1:\n        return 0\n    if p == 2:\n        return n & 1\n    if p == 3:\n        return (n * n) & 1\n    if p == 4:\n        return (n * n * n) & 1\n    if p == 5:\n        return (n * n * n * n) & 1\n    if p == 6:\n        return (n * n * n * n * n) & 1\n    if p == 7:\n        return (n * n * n * n * n * n) & 1\n    if p == 8:\n        return (n * n * n * n * n * n * n) & 1\n    if p == 9:\n        return (n * n * n * n * n * n * n * n) & 1\n    if p == 10:\n        return (n * n * n * n * n * n * n * n * n) & 1\n    if p == 11:\n        return (n * n * n * n * n * n * n * n * n * n) & 1\n    if p == 12:\n        return (n * n * n * n * n * n * n * n * n * n * n) & 1\n    if p == 13:\n        return (n * n * n * n * n * n * n * n * n * n * n * n) & 1\n    if p == 14:\n        return (n * n * n * n * n * n * n * n * n * n * n * n * n) & 1\n    if p == 15:\n        return (n * n * n * n * n * n * n * n * n * n * n * n * n * n) & 1\n    if p == 16:\n        return (n * n * n * n * n * n * n * n * n * n * n * n * n * n * n) & 1\n    if p == 17:\n        return\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpy1xmgq40.jl:15\nin expression starting at /tmp/tmpy1xmgq40.jl:15\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    return n % p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu5osy5v_.jl:13 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu5osy5v_.jl:1\nin expression starting at /tmp/tmpu5osy5v_.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    return (n % p) + (n / p) * p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7fr8gwue.jl:13 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7fr8gwue.jl:1\nin expression starting at /tmp/tmp7fr8gwue.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    return n % p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu5osy5v_.jl:13 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu5osy5v_.jl:1\nin expression starting at /tmp/tmpu5osy5v_.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n < 0:\n        n = -n\n    if p < 0:\n        p = -p\n    if p == 0:\n        return 0\n    if n == 0:\n        return 1\n    if n == 1:\n        return p\n    if n == 2:\n        return (p * p) % p\n    if n % 2 == 0:\n        return (modp(n / 2, p) * modp(n / 2, p)) % p\n    else:\n        return (modp(n / 2, p) * modp(n / 2 + 1, p)) % p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpe68__sqi.jl:15\nin expression starting at /tmp/tmpe68__sqi.jl:15\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    return n % p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu5osy5v_.jl:13 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu5osy5v_.jl:1\nin expression starting at /tmp/tmpu5osy5v_.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n < 0:\n        n = -n\n        if n % p == 0:\n            return 0\n    return n % p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_uo59bch.jl:15\nin expression starting at /tmp/tmp_uo59bch.jl:15\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    return n % p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu5osy5v_.jl:13 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu5osy5v_.jl:1\nin expression starting at /tmp/tmpu5osy5v_.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n < 0:\n        return modp(-n, p)\n    if n == 0:\n        return 0\n    if p == 0:\n        raise ValueError(\"p cannot be zero\")\n    if p < 0:\n        raise ValueError(\"p cannot be negative\")\n    if n == 1:\n        return 1\n    if n == 2:\n        return p\n    if n % 2 == 0:\n        return modp(n // 2, p) * modp(n // 2, p) % p\n    else:\n        return (modp(n // 2, p) * modp(n // 2, p) + p) % p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6b68mpib.jl:15\nin expression starting at /tmp/tmp6b68mpib.jl:15\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n < 0:\n        n = -n\n    if p < 0:\n        p = -p\n    if p == 0:\n        return 0\n    if n == 0:\n        return 1\n    if n == 1:\n        return p\n    if n % 2 == 0:\n        return modp(n / 2, p) * modp(n / 2, p) % p\n    else:\n        return modp(n / 2, p) * modp(n / 2, p) * modp(n / 2, p) % p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpp7fc7xs8.jl:15\nin expression starting at /tmp/tmpp7fc7xs8.jl:15\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if p == 0:\n        return 1\n    if n == 0:\n        return 0\n    return (n * modp(n - 1, p) % p) % p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppj73pkf6.jl:15\nin expression starting at /tmp/tmppj73pkf6.jl:15\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0:\n        return 1\n    return (n * modp(n - 1, p)) % p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwsmcqrhj.jl:15\nin expression starting at /tmp/tmpwsmcqrhj.jl:15\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if p == 0:\n        return 0\n    if n == 0:\n        return 1\n    return (n * modp(n - 1, p) % p) % p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293299,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpzb6ax7sv.jl:15\nin expression starting at /tmp/tmpzb6ax7sv.jl:15\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if p == 0:\n        return 0\n    if n == 0:\n        return 1\n    return (n * modp(n - 1, p) % p)\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293299,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6x2c2nhk.jl:15\nin expression starting at /tmp/tmp6x2c2nhk.jl:15\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    return n % p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu5osy5v_.jl:13 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu5osy5v_.jl:1\nin expression starting at /tmp/tmpu5osy5v_.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n < 0:\n        return modp(-n, p)\n    if p == 0:\n        return 0\n    if n == 0:\n        return 1\n    if p == 1:\n        return 0\n    if p == 2:\n        return n & 1\n    if p == 3:\n        return (n * 2) & 3\n    if p == 4:\n        return (n * 3) & 7\n    if p == 5:\n        return (n * 4) & 15\n    if p == 6:\n        return (n * 5) & 31\n    if p == 7:\n        return (n * 6) & 63\n    if p == 8:\n        return (n * 7) & 127\n    if p == 9:\n        return (n * 8) & 255\n    if p == 10:\n        return (n * 9) & 511\n    if p == 11:\n        return (n * 10) & 1023\n    if p == 12:\n        return (n * 11) & 2047\n    if p == 13:\n        return (n * 12) & 4095\n    if p == 14:\n        return (n * 13) & 8191\n    if p == 15:\n        return (n * 14) & 16383\n    if p == 16:\n        return (n * 15) & 32767\n    if p == 17:\n        return (n * 16) & 65535\n    if p == 18:\n        return (n * 17) & 131071\n    if p == 19:\n        return (n * 18) & 262143\n    if p == 20:\n        return (n * 19) & 524287\n    if p == 21:\n        return (n * 20) & 1048575\n    if p == 22:\n        return (n * 21) & 2097151\n    if p == 23:\n        return (n * 22) & 4194303\n    if p == 24:\n        return (n * 23) & 8388607\n    if p == 25:\n        return (n * 24) & 16777215\n    if p == 26:\n        return (n * 25) & 33554431\n    if p == 27:\n        return (n * 26)\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp755w0pf1.jl:15\nin expression starting at /tmp/tmp755w0pf1.jl:15\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n < 0:\n        n = -n\n        p = -p\n    if p == 0:\n        return 0\n    if p < 0:\n        raise ValueError(\"p must be positive\")\n    if p == 1:\n        return 1\n    if p == 2:\n        return n & 1\n    if p == 3:\n        return (n * 2) & 3\n    if p == 4:\n        return (n * 3) & 7\n    if p == 5:\n        return (n * 4) & 15\n    if p == 6:\n        return (n * 5) & 31\n    if p == 7:\n        return (n * 6) & 63\n    if p == 8:\n        return (n * 7) & 127\n    if p == 9:\n        return (n * 8) & 255\n    if p == 10:\n        return (n * 9) & 511\n    if p == 11:\n        return (n * 10) & 1023\n    if p == 12:\n        return (n * 11) & 2047\n    if p == 13:\n        return (n * 12) & 4095\n    if p == 14:\n        return (n * 13) & 8191\n    if p == 15:\n        return (n * 14) & 16383\n    if p == 16:\n        return (n * 15) & 32767\n    if p == 17:\n        return (n * 16) & 65535\n    if p == 18:\n        return (n * 17) & 131071\n    if p == 19:\n        return (n * 18) & 262143\n    if p == 20:\n        return (n * 19) & 524287\n    if p == 21:\n        return (n * 20) & 1048575\n    if p == 22:\n        return (n * 21) & 2097151\n    if p == 23:\n        return (n * 22) & 4194303\n    if p == 24:\n        return (n * 23) & 8388607\n    if p == 25:\n        return (n * 24) & 16777215\n    if p == 26:\n        return (n * 25) & 33554431\n    if p == 27\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293299,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6mfm5zof.jl:15\nin expression starting at /tmp/tmp6mfm5zof.jl:15\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n < 0:\n        return modp(-n, p)\n    if p == 0:\n        return 0\n    if n == 0:\n        return 1\n    if p == 1:\n        return 0\n    if p == 2:\n        return n & 1\n    if p == 3:\n        return (n * 2) & 3\n    if p == 4:\n        return (n * 3) & 7\n    if p == 5:\n        return (n * 4) & 15\n    if p == 6:\n        return (n * 5) & 31\n    if p == 7:\n        return (n * 6) & 63\n    if p == 8:\n        return (n * 7) & 127\n    if p == 9:\n        return (n * 8) & 255\n    if p == 10:\n        return (n * 9) & 511\n    if p == 11:\n        return (n * 10) & 1023\n    if p == 12:\n        return (n * 11) & 2047\n    if p == 13:\n        return (n * 12) & 4095\n    if p == 14:\n        return (n * 13) & 8191\n    if p == 15:\n        return (n * 14) & 16383\n    if p == 16:\n        return (n * 15) & 32767\n    if p == 17:\n        return (n * 16) & 65535\n    if p == 18:\n        return (n * 17) & 131071\n    if p == 19:\n        return (n * 18) & 262143\n    if p == 20:\n        return (n * 19) & 524287\n    if p == 21:\n        return (n * 20) & 1048575\n    if p == 22:\n        return (n * 21) & 2097151\n    if p == 23:\n        return (n * 22) & 4194303\n    if p == 24:\n        return (n * 23) & 8388607\n    if p == 25:\n        return (n * 24) & 16777215\n    if p == 26:\n        return (n * 25) & 33554431\n    if p == 27:\n        return (n * 26)\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp755w0pf1.jl:15\nin expression starting at /tmp/tmp755w0pf1.jl:15\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n < 0:\n        return modp(-n, p)\n    if p == 0:\n        return 0\n    if p == 1:\n        return 1\n    if p == 2:\n        return n & 1\n    if p == 3:\n        return (n * 2) & 3\n    if p == 4:\n        return (n * 3) & 7\n    if p == 5:\n        return (n * 4) & 15\n    if p == 6:\n        return (n * 5) & 31\n    if p == 7:\n        return (n * 6) & 63\n    if p == 8:\n        return (n * 7) & 127\n    if p == 9:\n        return (n * 8) & 255\n    if p == 10:\n        return (n * 9) & 511\n    if p == 11:\n        return (n * 10) & 1023\n    if p == 12:\n        return (n * 11) & 2047\n    if p == 13:\n        return (n * 12) & 4095\n    if p == 14:\n        return (n * 13) & 8191\n    if p == 15:\n        return (n * 14) & 16383\n    if p == 16:\n        return (n * 15) & 32767\n    if p == 17:\n        return (n * 16) & 65535\n    if p == 18:\n        return (n * 17) & 131071\n    if p == 19:\n        return (n * 18) & 262143\n    if p == 20:\n        return (n * 19) & 524287\n    if p == 21:\n        return (n * 20) & 1048575\n    if p == 22:\n        return (n * 21) & 2097151\n    if p == 23:\n        return (n * 22) & 4194303\n    if p == 24:\n        return (n * 23) & 8388607\n    if p == 25:\n        return (n * 24) & 16777215\n    if p == 26:\n        return (n * 25) & 33554431\n    if p == 27:\n        return (n * 26) & 67108863\n    if p == 28\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpn4m3b3m7.jl:15\nin expression starting at /tmp/tmpn4m3b3m7.jl:15\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n < 0:\n        n = -n\n        p = -p\n    if p == 0:\n        return 0\n    if p == 1:\n        return 1\n    if p == 2:\n        return n & 1\n    if p == 3:\n        return (n * 2) & 3\n    if p == 4:\n        return (n * 3) & 7\n    if p == 5:\n        return (n * 4) & 15\n    if p == 6:\n        return (n * 5) & 31\n    if p == 7:\n        return (n * 6) & 63\n    if p == 8:\n        return (n * 7) & 127\n    if p == 9:\n        return (n * 8) & 255\n    if p == 10:\n        return (n * 9) & 511\n    if p == 11:\n        return (n * 10) & 1023\n    if p == 12:\n        return (n * 11) & 2047\n    if p == 13:\n        return (n * 12) & 4095\n    if p == 14:\n        return (n * 13) & 8191\n    if p == 15:\n        return (n * 14) & 16383\n    if p == 16:\n        return (n * 15) & 32767\n    if p == 17:\n        return (n * 16) & 65535\n    if p == 18:\n        return (n * 17) & 131071\n    if p == 19:\n        return (n * 18) & 262143\n    if p == 20:\n        return (n * 19) & 524287\n    if p == 21:\n        return (n * 20) & 1048575\n    if p == 22:\n        return (n * 21) & 2097151\n    if p == 23:\n        return (n * 22) & 4194303\n    if p == 24:\n        return (n * 23) & 8388607\n    if p == 25:\n        return (n * 24) & 16777215\n    if p == 26:\n        return (n * 25) & 33554431\n    if p == 27:\n        return (n * 26) & 67108863\n    if p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpspyjc62b.jl:15\nin expression starting at /tmp/tmpspyjc62b.jl:15\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if p == 0:\n        return 1\n    if n == 0:\n        return 0\n    return (n * modp(n - 1, p) % p) % p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppj73pkf6.jl:15\nin expression starting at /tmp/tmppj73pkf6.jl:15\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0:\n        return 1\n    return (n * modp(n - 1, p) % p)\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293299,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphaz9lkx_.jl:15\nin expression starting at /tmp/tmphaz9lkx_.jl:15\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    return n % p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu5osy5v_.jl:13 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu5osy5v_.jl:1\nin expression starting at /tmp/tmpu5osy5v_.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0: return 1\n    return (n * modp(n - 1, p) % p)\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293299,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyztrnnq9.jl:1\nin expression starting at /tmp/tmpyztrnnq9.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if p == 0:\n        return 0\n    if n == 0:\n        return 1\n    return (n * modp(n - 1, p) % p) % p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293299,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpzb6ax7sv.jl:15\nin expression starting at /tmp/tmpzb6ax7sv.jl:15\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if p == 0: return 1\n    if n == 0: return 0\n    return (n % p) * modp(n / p, p) % p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293299,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpq97dwt1m.jl:1\nin expression starting at /tmp/tmpq97dwt1m.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if p == 0:\n        return 0\n    if n == 0:\n        return 1\n    return (n * modp(n - 1, p)) % p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293299,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpzvegadk4.jl:15\nin expression starting at /tmp/tmpzvegadk4.jl:15\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n < 0:\n        n = -n\n        p = -p\n    if p == 0:\n        return 0\n    if p == 1:\n        return n\n    if n == 0:\n        return 1\n    if n == 1:\n        return p\n    if n == p:\n        return 0\n    if n % p == 0:\n        return n / p\n    return (n * modp(n - p, p)) % p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293299,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpaa9v0p34.jl:15\nin expression starting at /tmp/tmpaa9v0p34.jl:15\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if p == 0:\n        return 1\n    if n == 0:\n        return 0\n    return (n * modp(n - 1, p) % p) % p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppj73pkf6.jl:15\nin expression starting at /tmp/tmppj73pkf6.jl:15\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n < 0:\n        n = -n\n        p = -p\n    if p == 0:\n        return 0\n    if p == 1:\n        return 1\n    if p == 2:\n        return n & 1\n    if p == 3:\n        return (n * 2) & 3\n    if p == 4:\n        return (n * 3) & 7\n    if p == 5:\n        return (n * 4) & 15\n    if p == 6:\n        return (n * 5) & 31\n    if p == 7:\n        return (n * 6) & 63\n    if p == 8:\n        return (n * 7) & 127\n    if p == 9:\n        return (n * 8) & 255\n    if p == 10:\n        return (n * 9) & 511\n    if p == 11:\n        return (n * 10) & 1023\n    if p == 12:\n        return (n * 11) & 2047\n    if p == 13:\n        return (n * 12) & 4095\n    if p == 14:\n        return (n * 13) & 8191\n    if p == 15:\n        return (n * 14) & 16383\n    if p == 16:\n        return (n * 15) & 32767\n    if p == 17:\n        return (n * 16) & 65535\n    if p == 18:\n        return (n * 17) & 131071\n    if p == 19:\n        return (n * 18) & 262143\n    if p == 20:\n        return (n * 19) & 524287\n    if p == 21:\n        return (n * 20) & 1048575\n    if p == 22:\n        return (n * 21) & 2097151\n    if p == 23:\n        return (n * 22) & 4194303\n    if p == 24:\n        return (n * 23) & 8388607\n    if p == 25:\n        return (n * 24) & 16777215\n    if p == 26:\n        return (n * 25) & 33554431\n    if p == 27:\n        return (n * 26) & 67108863\n    if p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpspyjc62b.jl:15\nin expression starting at /tmp/tmpspyjc62b.jl:15\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    return n % p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu5osy5v_.jl:13 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu5osy5v_.jl:1\nin expression starting at /tmp/tmpu5osy5v_.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n < 0:\n        n = -n\n        p = -p\n    if p == 0:\n        raise ValueError(\"p must be non-zero\")\n    if p == 1:\n        return 0\n    if p == 2:\n        return n & 1\n    if p < 0:\n        raise ValueError(\"p must be non-negative\")\n    if p < n:\n        return 0\n    return (n * modp(n - 1, p)) % p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293299,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxiup7rni.jl:15\nin expression starting at /tmp/tmpxiup7rni.jl:15\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if p == 0: return 0\n    if n == 0: return 1\n    return (n % p) * modp(n / p, p) % p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293299,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpv_pi5o0b.jl:1\nin expression starting at /tmp/tmpv_pi5o0b.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if p == 0: return 1\n    if n == 0: return 0\n    return (n % p) * modp(n / p, p) % p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293299,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpq97dwt1m.jl:1\nin expression starting at /tmp/tmpq97dwt1m.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    return n % p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu5osy5v_.jl:13 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu5osy5v_.jl:1\nin expression starting at /tmp/tmpu5osy5v_.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n < 0:\n        n = -n\n        p = -p\n    if p == 0:\n        return 0\n    if p == 1:\n        return n\n    if p == 2:\n        return n & 1\n    if p == 3:\n        return (n * 2) & 3\n    if p == 4:\n        return (n * 3) & 7\n    if p == 5:\n        return (n * 4) & 15\n    if p == 6:\n        return (n * 5) & 31\n    if p == 7:\n        return (n * 6) & 63\n    if p == 8:\n        return (n * 7) & 127\n    if p == 9:\n        return (n * 8) & 255\n    if p == 10:\n        return (n * 9) & 511\n    if p == 11:\n        return (n * 10) & 1023\n    if p == 12:\n        return (n * 11) & 2047\n    if p == 13:\n        return (n * 12) & 4095\n    if p == 14:\n        return (n * 13) & 8191\n    if p == 15:\n        return (n * 14) & 16383\n    if p == 16:\n        return (n * 15) & 32767\n    if p == 17:\n        return (n * 16) & 65535\n    if p == 18:\n        return (n * 17) & 131071\n    if p == 19:\n        return (n * 18) & 262143\n    if p == 20:\n        return (n * 19) & 524287\n    if p == 21:\n        return (n * 20) & 1048575\n    if p == 22:\n        return (n * 21) & 2097151\n    if p == 23:\n        return (n * 22) & 4194303\n    if p == 24:\n        return (n * 23) & 8388607\n    if p == 25:\n        return (n * 24) & 16777215\n    if p == 26:\n        return (n * 25) & 33554431\n    if p == 27:\n        return (n * 26) & 67108863\n    if p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp26atgmvk.jl:15\nin expression starting at /tmp/tmp26atgmvk.jl:15\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    return n % p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu5osy5v_.jl:13 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu5osy5v_.jl:1\nin expression starting at /tmp/tmpu5osy5v_.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n < 0:\n        n = -n\n    if p < 0:\n        p = -p\n    if p == 0:\n        return 0\n    if n == 0:\n        return 1\n    if n == 1:\n        return p\n    if n % 2 == 0:\n        return modp(n / 2, p) * modp(n / 2, p) % p\n    else:\n        return modp(n / 2, p) * modp(n / 2, p) * modp(n / 2, p) % p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpp7fc7xs8.jl:15\nin expression starting at /tmp/tmpp7fc7xs8.jl:15\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    return n % p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu5osy5v_.jl:13 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu5osy5v_.jl:1\nin expression starting at /tmp/tmpu5osy5v_.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n < 0:\n        n = -n\n        p = -p\n    if p == 0:\n        raise ValueError(\"p must be > 0\")\n    if n == 0:\n        return 1\n    if p == 1:\n        return 0\n    if n == 1:\n        return p\n    if n % 2 == 0:\n        return modp(n / 2, p) * modp(n / 2, p) % p\n    else:\n        return (modp(n / 2, p) * modp(n / 2 + 1, p) % p) * 2 % p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293299,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxh3bs53m.jl:15\nin expression starting at /tmp/tmpxh3bs53m.jl:15\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    return n % p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu5osy5v_.jl:13 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu5osy5v_.jl:1\nin expression starting at /tmp/tmpu5osy5v_.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if p == 0: \n        return 1 \n    if n == 0: \n        return 0 \n    return (n % p) * modp(n // p, p) % p \nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293299,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0n7y_8qm.jl:15\nin expression starting at /tmp/tmp0n7y_8qm.jl:15\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    return n % p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu5osy5v_.jl:13 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu5osy5v_.jl:1\nin expression starting at /tmp/tmpu5osy5v_.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n < 0:\n        n = -n\n    if p < 0:\n        p = -p\n    if p == 0:\n        raise ValueError(\"p must be > 0\")\n    if p == 1:\n        return 0\n    if p == 2:\n        return 1\n    if p == 3:\n        return 2\n    if p == 4:\n        return 3\n    if p == 5:\n        return 4\n    if p == 6:\n        return 5\n    if p == 7:\n        return 6\n    if p == 8:\n        return 7\n    if p == 9:\n        return 8\n    if p == 10:\n        return 9\n    if p == 11:\n        return 10\n    if p == 12:\n        return 11\n    if p == 13:\n        return 12\n    if p == 14:\n        return 13\n    if p == 15:\n        return 14\n    if p == 16:\n        return 15\n    if p == 17:\n        return 16\n    if p == 18:\n        return 17\n    if p == 19:\n        return 18\n    if p == 20:\n        return 19\n    if p == 21:\n        return 20\n    if p == 22:\n        return 21\n    if p == 23:\n        return 22\n    if p == 24:\n        return 23\n    if p == 25:\n        return 24\n    if p == 26:\n        return 25\n    if p == 27:\n        return 26\n    if p == 28:\n        return 27\n    if p == 29:\n        return 28\n    if p == 30:\n        return 29\n    if p == 31:\n        return 30\n    if p == 32:\n        return 31\n    if p == 33:\n        return 32\n    if p == 34:\n        return 33\n    if p == 35:\n        return 34\n    if p == 36:\n        return 35\n    if p == 37:\n        return 36\n    if p == 38:\n        return 37\n    if p == 39:\n        return 38\n    if p == 40:\n        return 39\n    if p == 41:\n        return 40\n    if p == 42:\n        return 41\n    if p == 43\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293299,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpbllnst83.jl:15\nin expression starting at /tmp/tmpbllnst83.jl:15\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n < 0:\n        n = -n\n        p = -p\n    if p == 0:\n        return 0\n    if p == 1:\n        return n\n    if p == 2:\n        return n & 1\n    if p == 3:\n        return (n * 2) & 3\n    if p == 4:\n        return (n * 3) & 7\n    if p == 5:\n        return (n * 2) & 3\n    if p == 6:\n        return (n * 3) & 7\n    if p == 7:\n        return (n * 2) & 3\n    if p == 8:\n        return (n * 3) & 7\n    if p == 9:\n        return (n * 2) & 3\n    if p == 10:\n        return (n * 3) & 7\n    if p == 11:\n        return (n * 2) & 3\n    if p == 12:\n        return (n * 3) & 7\n    if p == 13:\n        return (n * 2) & 3\n    if p == 14:\n        return (n * 3) & 7\n    if p == 15:\n        return (n * 2) & 3\n    if p == 16:\n        return (n * 3) & 7\n    if p == 17:\n        return (n * 2) & 3\n    if p == 18:\n        return (n * 3) & 7\n    if p == 19:\n        return (n * 2) & 3\n    if p == 20:\n        return (n * 3) & 7\n    if p == 21:\n        return (n * 2) & 3\n    if p == 22:\n        return (n * 3) & 7\n    if p == 23:\n        return (n * 2) & 3\n    if p == 24:\n        return (n * 3) & 7\n    if p == 25:\n        return (n * 2) & 3\n    if p == 26:\n        return (n * 3) & 7\n    if p == 27:\n        return (n * 2) & 3\n    if p == 28:\n        return (n * 3) & 7\n    if p == 29:\n        return (n * 2) & 3\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293299,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpclz5rx2g.jl:15\nin expression starting at /tmp/tmpclz5rx2g.jl:15\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    return n % p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu5osy5v_.jl:13 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu5osy5v_.jl:1\nin expression starting at /tmp/tmpu5osy5v_.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if p == 0:\n        return 1\n    if n == 0:\n        return 0\n    return (n * modp(n - 1, p) % p) % p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppj73pkf6.jl:15\nin expression starting at /tmp/tmppj73pkf6.jl:15\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if p == 0:\n        return 1\n    if n == 0:\n        return 0\n    return (n % p) * modp(n / p, p) % p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293299,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpr9xpv6je.jl:15\nin expression starting at /tmp/tmpr9xpv6je.jl:15\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    return n % p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu5osy5v_.jl:13 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu5osy5v_.jl:1\nin expression starting at /tmp/tmpu5osy5v_.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n < 0:\n        n = -n\n        p = -p\n    if n == 0:\n        return 0\n    if p == 0:\n        raise ZeroDivisionError\n    if p == 1:\n        return n\n    if n == 1:\n        return 0\n    if n == 2:\n        return p\n    if n % 2 == 0:\n        return modp(n / 2, p) * modp(n / 2, p) % p\n    return modp(n - 1, p) * modp(n - 1, p) % p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293299,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7nugpw4u.jl:15\nin expression starting at /tmp/tmp7nugpw4u.jl:15\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    return n % p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu5osy5v_.jl:13 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu5osy5v_.jl:1\nin expression starting at /tmp/tmpu5osy5v_.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n < 0:\n        return modp(-n, p)\n    if p == 0:\n        return 0\n    if n == 0:\n        return 1\n    return (n * modp(n - 1, p)) % p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293299,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6rapg29e.jl:15\nin expression starting at /tmp/tmp6rapg29e.jl:15\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    return n % p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu5osy5v_.jl:13 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu5osy5v_.jl:1\nin expression starting at /tmp/tmpu5osy5v_.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    return n % p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu5osy5v_.jl:13 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu5osy5v_.jl:1\nin expression starting at /tmp/tmpu5osy5v_.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    return n % p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu5osy5v_.jl:13 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu5osy5v_.jl:1\nin expression starting at /tmp/tmpu5osy5v_.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n < 0:\n        n = -n\n        if n >= p:\n            return n % p\n        else:\n            return n\n    else:\n        if n >= p:\n            return n % p\n        else:\n            return n\n\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293299,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp59_6r9up.jl:15\nin expression starting at /tmp/tmp59_6r9up.jl:15\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    return n % p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu5osy5v_.jl:13 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu5osy5v_.jl:1\nin expression starting at /tmp/tmpu5osy5v_.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if p == 0:\n        return 1\n    if n == 0:\n        return 0\n    return (n * modp(n - 1, p) % p) % p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppj73pkf6.jl:15\nin expression starting at /tmp/tmppj73pkf6.jl:15\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    return n % p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu5osy5v_.jl:13 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu5osy5v_.jl:1\nin expression starting at /tmp/tmpu5osy5v_.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    return n % p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu5osy5v_.jl:13 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu5osy5v_.jl:1\nin expression starting at /tmp/tmpu5osy5v_.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n < 0:\n        return modp(-n, p)\n    if p == 0:\n        return 0\n    if p == 1:\n        return 1\n    if p < 0:\n        raise ValueError(\"p must be a positive integer\")\n    if n == 0:\n        return 1\n    if n == 1:\n        return p\n    if n == -1:\n        return modp(p - 1, p)\n    if n < p:\n        return modp(n, p)\n    if n % p == 0:\n        return 0\n    return modp(n, p)\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293299,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpi05k5zap.jl:15\nin expression starting at /tmp/tmpi05k5zap.jl:15\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if p == 0: \n        return 0 \n    if n == 0: \n        return 1 \n    return (n * modp(n - 1, p) % p) * (p - 1) % p \nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293299,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpot0uvcdd.jl:15\nin expression starting at /tmp/tmpot0uvcdd.jl:15\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if p == 0: return 0\n    if n == 0: return 1\n    if p < 0: p = -p\n    if n < 0: n = -n\n    if n >= p: n %= p\n    if n < 0: n += p\n    return n\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293299,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpeto7mgxv.jl:16\nin expression starting at /tmp/tmpeto7mgxv.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n < 0:\n        n = -n\n        p = -p\n    if n == 0:\n        return 1\n    if p == 0:\n        raise ValueError(\"p must be non-zero\")\n    if p == 1:\n        return 0\n    if p == 2:\n        return n & 1\n    if p == 3:\n        return (n * 2) & 3\n    if p == 4:\n        return (n * 3) & 7\n    if p == 5:\n        return (n * 4) & 15\n    if p == 6:\n        return (n * 5) & 31\n    if p == 7:\n        return (n * 6) & 63\n    if p == 8:\n        return (n * 7) & 127\n    if p == 9:\n        return (n * 8) & 255\n    if p == 10:\n        return (n * 9) & 511\n    if p == 11:\n        return (n * 10) & 1023\n    if p == 12:\n        return (n * 11) & 2047\n    if p == 13:\n        return (n * 12) & 4095\n    if p == 14:\n        return (n * 13) & 8191\n    if p == 15:\n        return (n * 14) & 16383\n    if p == 16:\n        return (n * 15) & 32767\n    if p == 17:\n        return (n * 16) & 65535\n    if p == 18:\n        return (n * 17) & 131071\n    if p == 19:\n        return (n * 18) & 262143\n    if p == 20:\n        return (n * 19) & 524287\n    if p == 21:\n        return (n * 20) & 1048575\n    if p == 22:\n        return (n * 21) & 2097151\n    if p == 23:\n        return (n * 22) & 4194303\n    if p == 24:\n        return (n * 23) & 8388607\n    if p == 25:\n        return (n * 24) & 16777215\n    if p == 26:\n        return (n * 25) & 33554431\n    if p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293299,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu4bfqc59.jl:15\nin expression starting at /tmp/tmpu4bfqc59.jl:15\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n < 0:\n        return modp(-n, p)\n    if p == 0:\n        return 0\n    if p < 0:\n        return modp(n, -p)\n    if n == 0:\n        return 0\n    if n == 1:\n        return p\n    if n == 2:\n        return (p * p) % p\n    if n % 2 == 0:\n        return (modp(n / 2, p) * modp(n / 2, p)) % p\n    else:\n        return (modp(n / 2, p) * modp(n / 2 + 1, p)) % p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293299,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpex71u2l4.jl:15\nin expression starting at /tmp/tmpex71u2l4.jl:15\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n < 0:\n        n = -n\n    if p < 0:\n        p = -p\n    if p == 0:\n        return 0\n    if n == 0:\n        return 1\n    if n == 1:\n        return p\n    if n % 2 == 0:\n        return modp(n / 2, p) * modp(n / 2, p) % p\n    else:\n        return (modp(n / 2, p) * modp(n / 2, p) + p) % p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293301,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3tpzsgq3.jl:15\nin expression starting at /tmp/tmp3tpzsgq3.jl:15\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n < 0:\n        return modp(-n, p)\n    if n == 0:\n        return 0\n    if p == 0:\n        raise ValueError(\"p cannot be zero\")\n    if p == 1:\n        return 1\n    if n == 1:\n        return p\n    if n == 2:\n        return (p * p) % p\n    if n % 2 == 0:\n        return (modp(n / 2, p) * modp(n / 2, p)) % p\n    else:\n        return (modp(n / 2, p) * modp(n / 2 + 1, p)) % p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293301,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpupbsy9ti.jl:15\nin expression starting at /tmp/tmpupbsy9ti.jl:15\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n < 0:\n        n = -n\n    if p < 0:\n        p = -p\n    if p == 0:\n        raise ZeroDivisionError\n    if n == 0:\n        return 1\n    if n == 1:\n        return p\n    if p == 1:\n        return 0\n    if p == 2:\n        return n & 1\n    if p == 3:\n        return (n * 2) & 3\n    if p == 4:\n        return (n * 3) & 7\n    if p == 5:\n        return (n * 4) & 15\n    if p == 6:\n        return (n * 5) & 31\n    if p == 7:\n        return (n * 6) & 63\n    if p == 8:\n        return (n * 7) & 127\n    if p == 9:\n        return (n * 8) & 255\n    if p == 10:\n        return (n * 9) & 511\n    if p == 11:\n        return (n * 10) & 1023\n    if p == 12:\n        return (n * 11) & 2047\n    if p == 13:\n        return (n * 12) & 4095\n    if p == 14:\n        return (n * 13) & 8191\n    if p == 15:\n        return (n * 14) & 16383\n    if p == 16:\n        return (n * 15) & 32767\n    if p == 17:\n        return (n * 16) & 65535\n    if p == 18:\n        return (n * 17) & 131071\n    if p == 19:\n        return (n * 18) & 262143\n    if p == 20:\n        return (n * 19) & 524287\n    if p == 21:\n        return (n * 20) & 1048575\n    if p == 22:\n        return (n * 21) & 2097151\n    if p == 23:\n        return (n * 22) & 4194303\n    if p == 24:\n        return (n * 23) & 8388607\n    if p == 25:\n        return (n * 24) & 16777215\n    if p == 26:\n        return (n\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293301,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpco08c0y2.jl:15\nin expression starting at /tmp/tmpco08c0y2.jl:15\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    return n % p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu5osy5v_.jl:13 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu5osy5v_.jl:1\nin expression starting at /tmp/tmpu5osy5v_.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n < 0:\n        return modp(-n, p)\n    if p == 0:\n        return 0\n    if p == 1:\n        return 1\n    if n == 0:\n        return 1\n    if n == 1:\n        return p\n    if n == p:\n        return 0\n    if n % p == 0:\n        return 0\n    return (n * modp(n / p, p)) % p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293301,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpb_0vmwf7.jl:15\nin expression starting at /tmp/tmpb_0vmwf7.jl:15\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n < 0:\n        n = -n\n    if p < 0:\n        p = -p\n    if p == 0:\n        raise ValueError(\"p must be > 0\")\n    if n == 0:\n        return 1\n    if n == 1:\n        return p\n    if n % 2 == 0:\n        return modp(n / 2, p) * modp(n / 2, p) % p\n    else:\n        return modp(n / 2, p) * modp(n / 2, p) * modp(n / 2, p) % p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp62jwoaks.jl:15\nin expression starting at /tmp/tmp62jwoaks.jl:15\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    return n % p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu5osy5v_.jl:13 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu5osy5v_.jl:1\nin expression starting at /tmp/tmpu5osy5v_.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    return n % p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu5osy5v_.jl:13 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu5osy5v_.jl:1\nin expression starting at /tmp/tmpu5osy5v_.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n < 0:\n        n = -n\n    if p < 0:\n        p = -p\n    if p == 0:\n        raise ValueError(\"p must be > 0\")\n    if n == 0:\n        return 1\n    if n == 1:\n        return p\n    if n % 2 == 0:\n        return modp(n / 2, p) * modp(n / 2, p) % p\n    else:\n        return modp(n / 2, p) * modp(n / 2, p) * modp(n / 2, p) % p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp62jwoaks.jl:15\nin expression starting at /tmp/tmp62jwoaks.jl:15\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    return n % p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu5osy5v_.jl:13 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu5osy5v_.jl:1\nin expression starting at /tmp/tmpu5osy5v_.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    return n % p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu5osy5v_.jl:13 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu5osy5v_.jl:1\nin expression starting at /tmp/tmpu5osy5v_.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n < 0:\n        n = -n\n        p = -p\n    if p == 0:\n        return 0\n    if p < 0:\n        raise ValueError(\"p must be positive\")\n    if p == 1:\n        return 1\n    if p == 2:\n        return n & 1\n    if p == 3:\n        return (n * n) % 3\n    if p == 4:\n        return (n * n * n) % 4\n    if p == 5:\n        return (n * n * n * n) % 5\n    if p == 6:\n        return (n * n * n * n * n) % 6\n    if p == 7:\n        return (n * n * n * n * n * n) % 7\n    if p == 8:\n        return (n * n * n * n * n * n * n) % 8\n    if p == 9:\n        return (n * n * n * n * n * n * n * n) % 9\n    if p == 10:\n        return (n * n * n * n * n * n * n * n * n) % 10\n    if p == 11:\n        return (n * n * n * n * n * n * n * n * n * n) % 11\n    if p == 12:\n        return (n * n * n * n * n * n * n * n * n * n * n) % 12\n    if p == 13:\n        return (n * n * n * n * n * n * n * n * n * n * n * n) % 13\n    if p == 14:\n        return (n * n * n * n * n * n * n * n * n * n * n * n * n) % 14\n    if p == 15:\n        return (n * n * n * n * n * n * n * n * n * n * n * n * n * n) % 15\n    if p == 16:\n        return (n * n * n * n * n * n * n * n * n * n * n * n * n * n * n) % 16\n    if p == 17:\n        return (n * n * n * n * n *\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293301,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyn3k_1gv.jl:15\nin expression starting at /tmp/tmpyn3k_1gv.jl:15\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    return n % p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu5osy5v_.jl:13 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu5osy5v_.jl:1\nin expression starting at /tmp/tmpu5osy5v_.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n < 0:\n        n = -n\n    if p < 0:\n        p = -p\n    if p == 0:\n        raise ValueError(\"p must be > 0\")\n    if n == 0:\n        return 1\n    if n == 1:\n        return p\n    if n % 2 == 0:\n        return modp(n / 2, p) * modp(n / 2, p) % p\n    else:\n        return (modp(n / 2, p) * modp(n / 2, p) + p) % p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293301,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2l3i50l8.jl:15\nin expression starting at /tmp/tmp2l3i50l8.jl:15\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if p == 0:\n        return 0\n    if n == 0:\n        return 1\n    return (n % p) * modp(n / p, p) % p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293301,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpi0z227zm.jl:15\nin expression starting at /tmp/tmpi0z227zm.jl:15\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n < 0:\n        n = -n\n    if p < 0:\n        p = -p\n    if p == 0:\n        raise ValueError(\"p must be > 0\")\n    if n == 0:\n        return 1\n    if n == 1:\n        return p\n    if n % 2 == 0:\n        return modp(n / 2, p) * modp(n / 2, p) % p\n    else:\n        return modp(n / 2, p) * modp(n / 2, p) * modp(n / 2, p) % p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp62jwoaks.jl:15\nin expression starting at /tmp/tmp62jwoaks.jl:15\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    return n % p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu5osy5v_.jl:13 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu5osy5v_.jl:1\nin expression starting at /tmp/tmpu5osy5v_.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n < 0:\n        n = -n\n        p = -p\n    if p == 0:\n        return 0\n    if p == 1:\n        return n\n    if p == 2:\n        return n & 1\n    if p == 3:\n        return (n * 2) & 3\n    if p == 4:\n        return (n * 3) & 7\n    if p == 5:\n        return (n * 4) & 15\n    if p == 6:\n        return (n * 5) & 31\n    if p == 7:\n        return (n * 6) & 63\n    if p == 8:\n        return (n * 7) & 127\n    if p == 9:\n        return (n * 8) & 255\n    if p == 10:\n        return (n * 9) & 511\n    if p == 11:\n        return (n * 10) & 1023\n    if p == 12:\n        return (n * 11) & 2047\n    if p == 13:\n        return (n * 12) & 4095\n    if p == 14:\n        return (n * 13) & 8191\n    if p == 15:\n        return (n * 14) & 16383\n    if p == 16:\n        return (n * 15) & 32767\n    if p == 17:\n        return (n * 16) & 65535\n    if p == 18:\n        return (n * 17) & 131071\n    if p == 19:\n        return (n * 18) & 262143\n    if p == 20:\n        return (n * 19) & 524287\n    if p == 21:\n        return (n * 20) & 1048575\n    if p == 22:\n        return (n * 21) & 2097151\n    if p == 23:\n        return (n * 22) & 4194303\n    if p == 24:\n        return (n * 23) & 8388607\n    if p == 25:\n        return (n * 24) & 16777215\n    if p == 26:\n        return (n * 25) & 33554431\n    if p == 27:\n        return (n * 26) & 67108863\n    if p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp26atgmvk.jl:15\nin expression starting at /tmp/tmp26atgmvk.jl:15\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    return n % p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu5osy5v_.jl:13 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu5osy5v_.jl:1\nin expression starting at /tmp/tmpu5osy5v_.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n < 0:\n        return modp(-n, p)\n    if p == 0:\n        return 0\n    return (n * (p - 1) + 1) % p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293301,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpiom0e52f.jl:15\nin expression starting at /tmp/tmpiom0e52f.jl:15\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n < 0:\n        n = -n\n    if p < 0:\n        p = -p\n    if p == 0:\n        raise ValueError(\"p must be > 0\")\n    if n == 0:\n        return 1\n    if n == 1:\n        return p\n    if n % 2 == 0:\n        return (modp(n / 2, p) * modp(n / 2, p)) % p\n    return (modp(n / 2, p) * modp(n / 2 + 1, p)) % p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293301,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpflmp6hku.jl:15\nin expression starting at /tmp/tmpflmp6hku.jl:15\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    return n % p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu5osy5v_.jl:13 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu5osy5v_.jl:1\nin expression starting at /tmp/tmpu5osy5v_.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    return n % p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu5osy5v_.jl:13 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu5osy5v_.jl:1\nin expression starting at /tmp/tmpu5osy5v_.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    return n % p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu5osy5v_.jl:13 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu5osy5v_.jl:1\nin expression starting at /tmp/tmpu5osy5v_.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    return n % p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu5osy5v_.jl:13 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu5osy5v_.jl:1\nin expression starting at /tmp/tmpu5osy5v_.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n < 0:\n        n = -n\n        p = -p\n    if p == 0:\n        raise ValueError(\"p must be > 0\")\n    if n == 0:\n        return 1\n    if p == 1:\n        return 0\n    if n == 1:\n        return p\n    if n == 2:\n        return (p * p) % p\n    if n % 2 == 0:\n        return (modp(n / 2, p) * modp(n / 2, p)) % p\n    else:\n        return (modp(n / 2, p) * modp(n / 2 + 1, p)) % p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293301,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4fq1ll38.jl:15\nin expression starting at /tmp/tmp4fq1ll38.jl:15\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n < 0:\n        n = -n\n        if n >= p:\n            return n % p\n        else:\n            return n\n    else:\n        return n % p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293301,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsgojjif0.jl:15\nin expression starting at /tmp/tmpsgojjif0.jl:15\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    return n % p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu5osy5v_.jl:13 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu5osy5v_.jl:1\nin expression starting at /tmp/tmpu5osy5v_.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n < 0:\n        n = -n\n    if p < 0:\n        p = -p\n    if p == 0:\n        raise ValueError(\"p must be > 0\")\n    if n == 0:\n        return 1\n    if n == 1:\n        return p\n    if n % 2 == 0:\n        return modp(n / 2, p) * modp(n / 2, p) % p\n    else:\n        return modp(n / 2, p) * modp(n / 2 + 1, p) % p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293301,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4i9a74ub.jl:15\nin expression starting at /tmp/tmp4i9a74ub.jl:15\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n < 0:\n        n = -n\n    if p < 0:\n        p = -p\n    if p == 0:\n        return 0\n    return (n * (p - 1) + 1) % p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293301,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxiz03wkl.jl:15\nin expression starting at /tmp/tmpxiz03wkl.jl:15\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    return (n % p)\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293301,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpe4zreipe.jl:13 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpe4zreipe.jl:1\nin expression starting at /tmp/tmpe4zreipe.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    return n % p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu5osy5v_.jl:13 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu5osy5v_.jl:1\nin expression starting at /tmp/tmpu5osy5v_.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    return n % p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu5osy5v_.jl:13 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu5osy5v_.jl:1\nin expression starting at /tmp/tmpu5osy5v_.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n < 0:\n        n = -n\n    if p < 0:\n        p = -p\n    if p == 0:\n        raise ValueError(\"p must be non-zero\")\n    if p == 1:\n        return 0\n    if p == 2:\n        return 1\n    if p == 3:\n        return 2\n    if p == 4:\n        return 3\n    if p == 5:\n        return 4\n    if p == 6:\n        return 5\n    if p == 7:\n        return 6\n    if p == 8:\n        return 7\n    if p == 9:\n        return 8\n    if p == 10:\n        return 9\n    if p == 11:\n        return 10\n    if p == 12:\n        return 11\n    if p == 13:\n        return 12\n    if p == 14:\n        return 13\n    if p == 15:\n        return 14\n    if p == 16:\n        return 15\n    if p == 17:\n        return 16\n    if p == 18:\n        return 17\n    if p == 19:\n        return 18\n    if p == 20:\n        return 19\n    if p == 21:\n        return 20\n    if p == 22:\n        return 21\n    if p == 23:\n        return 22\n    if p == 24:\n        return 23\n    if p == 25:\n        return 24\n    if p == 26:\n        return 25\n    if p == 27:\n        return 26\n    if p == 28:\n        return 27\n    if p == 29:\n        return 28\n    if p == 30:\n        return 29\n    if p == 31:\n        return 30\n    if p == 32:\n        return 31\n    if p == 33:\n        return 32\n    if p == 34:\n        return 33\n    if p == 35:\n        return 34\n    if p == 36:\n        return 35\n    if p == 37:\n        return 36\n    if p == 38:\n        return 37\n    if p == 39:\n        return 38\n    if p == 40:\n        return 39\n    if p == 41:\n        return 40\n    if p == 42:\n        return 41\n    if p ==\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293301,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9npx7blj.jl:15\nin expression starting at /tmp/tmp9npx7blj.jl:15\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if p == 0:\n        return 1\n    if n == 0:\n        return 0\n    return (n * modp(n - 1, p) % p) % p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppj73pkf6.jl:15\nin expression starting at /tmp/tmppj73pkf6.jl:15\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if p == 0: return 1\n    if n == 0: return 0\n    return (n % p) * modp(n / p, p) % p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293299,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpq97dwt1m.jl:1\nin expression starting at /tmp/tmpq97dwt1m.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n < 0:\n        n = -n\n    if p < 0:\n        p = -p\n    if p == 0:\n        return 0\n    if n == 0:\n        return 1\n    if n == 1:\n        return p\n    if n % 2 == 0:\n        return modp(n / 2, p) * modp(n / 2, p) % p\n    else:\n        return (modp(n / 2, p) * modp(n / 2, p) + p) % p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293301,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3tpzsgq3.jl:15\nin expression starting at /tmp/tmp3tpzsgq3.jl:15\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    return n % p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu5osy5v_.jl:13 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu5osy5v_.jl:1\nin expression starting at /tmp/tmpu5osy5v_.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n < 0:\n        n = -n\n        p = -p\n    if p == 0:\n        return 0\n    if p < 0:\n        raise ValueError(\"p must be a positive integer\")\n    if p == 1:\n        return 0\n    if p == 2:\n        return 1\n    if p == 3:\n        return 2\n    if p == 4:\n        return 3\n    if p == 5:\n        return 4\n    if p == 6:\n        return 5\n    if p == 7:\n        return 6\n    if p == 8:\n        return 7\n    if p == 9:\n        return 8\n    if p == 10:\n        return 9\n    if p == 11:\n        return 10\n    if p == 12:\n        return 11\n    if p == 13:\n        return 12\n    if p == 14:\n        return 13\n    if p == 15:\n        return 14\n    if p == 16:\n        return 15\n    if p == 17:\n        return 16\n    if p == 18:\n        return 17\n    if p == 19:\n        return 18\n    if p == 20:\n        return 19\n    if p == 21:\n        return 20\n    if p == 22:\n        return 21\n    if p == 23:\n        return 22\n    if p == 24:\n        return 23\n    if p == 25:\n        return 24\n    if p == 26:\n        return 25\n    if p == 27:\n        return 26\n    if p == 28:\n        return 27\n    if p == 29:\n        return 28\n    if p == 30:\n        return 29\n    if p == 31:\n        return 30\n    if p == 32:\n        return 31\n    if p == 33:\n        return 32\n    if p == 34:\n        return 33\n    if p == 35:\n        return 34\n    if p == 36:\n        return 35\n    if p == 37:\n        return 36\n    if p == 38:\n        return 37\n    if p == 39:\n        return 38\n    if p == 40:\n        return 39\n    if p == 41:\n        return 40\n    if p == 42:\n        return 41\n\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293301,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsc28ooxp.jl:15\nin expression starting at /tmp/tmpsc28ooxp.jl:15\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    return n % p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu5osy5v_.jl:13 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu5osy5v_.jl:1\nin expression starting at /tmp/tmpu5osy5v_.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n < 0:\n        n = -n\n    if p < 0:\n        p = -p\n    if n == 0:\n        return 0\n    if p == 0:\n        raise ValueError(\"p must be non-zero\")\n    if p == 1:\n        return 1\n    if p == 2:\n        return n & 1\n    if p == 3:\n        return (n * 2) & 3\n    if p == 4:\n        return (n * 3) & 7\n    if p == 5:\n        return (n * 4) & 15\n    if p == 6:\n        return (n * 5) & 31\n    if p == 7:\n        return (n * 6) & 63\n    if p == 8:\n        return (n * 7) & 127\n    if p == 9:\n        return (n * 8) & 255\n    if p == 10:\n        return (n * 9) & 511\n    if p == 11:\n        return (n * 10) & 1023\n    if p == 12:\n        return (n * 11) & 2047\n    if p == 13:\n        return (n * 12) & 4095\n    if p == 14:\n        return (n * 13) & 8191\n    if p == 15:\n        return (n * 14) & 16383\n    if p == 16:\n        return (n * 15) & 32767\n    if p == 17:\n        return (n * 16) & 65535\n    if p == 18:\n        return (n * 17) & 131071\n    if p == 19:\n        return (n * 18) & 262143\n    if p == 20:\n        return (n * 19) & 524287\n    if p == 21:\n        return (n * 20) & 1048575\n    if p == 22:\n        return (n * 21) & 2097151\n    if p == 23:\n        return (n * 22) & 4194303\n    if p == 24:\n        return (n * 23) & 8388607\n    if p == 25:\n        return (n * 24) & 16777215\n    if p == 26:\n        return (n * 25) & 3\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293301,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjfir5agm.jl:15\nin expression starting at /tmp/tmpjfir5agm.jl:15\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n < 0:\n        n = -n\n        if n % p == 0:\n            return 0\n    return (n % p) * (2 ** (p - 1))\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293301,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmph1qslj2c.jl:15\nin expression starting at /tmp/tmph1qslj2c.jl:15\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n < 0:\n        return modp(-n, p)\n    if p == 0:\n        return 0\n    if n == 0:\n        return 1\n    if p == 1:\n        return 0\n    if n == 1:\n        return p\n    if p == 2:\n        return (n & 1) == 1\n    if p == 3:\n        return (n & 2) == 2\n    if p == 4:\n        return (n & 3) == 3\n    if p == 5:\n        return (n & 4) == 4\n    if p == 6:\n        return (n & 5) == 5\n    if p == 7:\n        return (n & 6) == 6\n    if p == 8:\n        return (n & 7) == 7\n    if p == 9:\n        return (n & 8) == 8\n    if p == 10:\n        return (n & 9) == 9\n    if p == 11:\n        return (n & 10) == 10\n    if p == 12:\n        return (n & 11) == 11\n    if p == 13:\n        return (n & 12) == 12\n    if p == 14:\n        return (n & 13) == 13\n    if p == 15:\n        return (n & 14) == 14\n    if p == 16:\n        return (n & 15) == 15\n    if p == 17:\n        return (n & 16) == 16\n    if p == 18:\n        return (n & 17) == 17\n    if p == 19:\n        return (n & 18) == 18\n    if p == 20:\n        return (n & 19) == 19\n    if p == 21:\n        return (n & 20) == 20\n    if p == 22:\n        return (n & 21) == 21\n    if p == 23:\n        return (n & 22) == 22\n    if p == 24:\n        return (n & 23) == 23\n    if p == 25:\n        return (n & 24) == 24\n    if p == 26:\n        return (n & 25) == 25\n    if p == 27:\n        return (n & 26) == 26\n    if p == 28:\n        return\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293301,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwpkwa04j.jl:15\nin expression starting at /tmp/tmpwpkwa04j.jl:15\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n < 0:\n        n = -n\n        p = -p\n    if p == 0:\n        raise ValueError(\"p must be > 0\")\n    if p == 1:\n        return 0\n    if p == 2:\n        return 1\n    if p == 3:\n        return 2\n    if p == 4:\n        return 3\n    if p == 5:\n        return 4\n    if p == 6:\n        return 5\n    if p == 7:\n        return 6\n    if p == 8:\n        return 7\n    if p == 9:\n        return 8\n    if p == 10:\n        return 9\n    if p == 11:\n        return 10\n    if p == 12:\n        return 11\n    if p == 13:\n        return 12\n    if p == 14:\n        return 13\n    if p == 15:\n        return 14\n    if p == 16:\n        return 15\n    if p == 17:\n        return 16\n    if p == 18:\n        return 17\n    if p == 19:\n        return 18\n    if p == 20:\n        return 19\n    if p == 21:\n        return 20\n    if p == 22:\n        return 21\n    if p == 23:\n        return 22\n    if p == 24:\n        return 23\n    if p == 25:\n        return 24\n    if p == 26:\n        return 25\n    if p == 27:\n        return 26\n    if p == 28:\n        return 27\n    if p == 29:\n        return 28\n    if p == 30:\n        return 29\n    if p == 31:\n        return 30\n    if p == 32:\n        return 31\n    if p == 33:\n        return 32\n    if p == 34:\n        return 33\n    if p == 35:\n        return 34\n    if p == 36:\n        return 35\n    if p == 37:\n        return 36\n    if p == 38:\n        return 37\n    if p == 39:\n        return 38\n    if p == 40:\n        return 39\n    if p == 41:\n        return 40\n    if p == 42:\n        return 41\n    if p == 43:\n        return 42\n    \nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293301,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp5xe11i3q.jl:15\nin expression starting at /tmp/tmp5xe11i3q.jl:15\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    return n % p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu5osy5v_.jl:13 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu5osy5v_.jl:1\nin expression starting at /tmp/tmpu5osy5v_.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    return n % p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu5osy5v_.jl:13 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu5osy5v_.jl:1\nin expression starting at /tmp/tmpu5osy5v_.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n < 0:\n        n = -n\n        p = -p\n    if p == 0:\n        raise ValueError(\"p must be > 0\")\n    if p == 1:\n        return 0\n    if n == 0:\n        return 1\n    return (n * modp(n - 1, p)) % p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293301,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9au296_0.jl:15\nin expression starting at /tmp/tmp9au296_0.jl:15\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if p == 0:\n        return 1\n    if n == 0:\n        return 0\n    return (n % p) * (modp(n / p, p) % p) % p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293301,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmo742h4e.jl:15\nin expression starting at /tmp/tmpmo742h4e.jl:15\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n < 0:\n        return modp(-n, p)\n    if p == 0:\n        return 0\n    if p < 0:\n        return modp(n, -p)\n    if n == 0:\n        return 0\n    if n == 1:\n        return p\n    if n == 2:\n        return (p * p) % p\n    if n % 2 == 0:\n        return (modp(n / 2, p) * modp(n / 2, p)) % p\n    else:\n        return (modp(n / 2, p) * modp(n / 2 + 1, p)) % p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293299,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpex71u2l4.jl:15\nin expression starting at /tmp/tmpex71u2l4.jl:15\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    return n % p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu5osy5v_.jl:13 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu5osy5v_.jl:1\nin expression starting at /tmp/tmpu5osy5v_.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    return n % p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu5osy5v_.jl:13 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu5osy5v_.jl:1\nin expression starting at /tmp/tmpu5osy5v_.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    return n % p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu5osy5v_.jl:13 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu5osy5v_.jl:1\nin expression starting at /tmp/tmpu5osy5v_.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0:\n        return 1\n    return (n * modp(n - 1, p) % p)\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293299,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphaz9lkx_.jl:15\nin expression starting at /tmp/tmphaz9lkx_.jl:15\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n < 0:\n        n = -n\n    if p < 0:\n        p = -p\n    if n == 0:\n        return 0\n    if p == 1:\n        return 1\n    if p == 2:\n        return n & 1\n    if p == 3:\n        return (n * 2) & 3\n    if p == 4:\n        return (n * 3) & 7\n    if p == 5:\n        return (n * 4) & 15\n    if p == 6:\n        return (n * 5) & 31\n    if p == 7:\n        return (n * 6) & 63\n    if p == 8:\n        return (n * 7) & 127\n    if p == 9:\n        return (n * 8) & 255\n    if p == 10:\n        return (n * 9) & 511\n    if p == 11:\n        return (n * 10) & 1023\n    if p == 12:\n        return (n * 11) & 2047\n    if p == 13:\n        return (n * 12) & 4095\n    if p == 14:\n        return (n * 13) & 8191\n    if p == 15:\n        return (n * 14) & 16383\n    if p == 16:\n        return (n * 15) & 32767\n    if p == 17:\n        return (n * 16) & 65535\n    if p == 18:\n        return (n * 17) & 131071\n    if p == 19:\n        return (n * 18) & 262143\n    if p == 20:\n        return (n * 19) & 524287\n    if p == 21:\n        return (n * 20) & 1048575\n    if p == 22:\n        return (n * 21) & 2097151\n    if p == 23:\n        return (n * 22) & 4194303\n    if p == 24:\n        return (n * 23) & 8388607\n    if p == 25:\n        return (n * 24) & 16777215\n    if p == 26:\n        return (n * 25) & 33554431\n    if p == 27:\n        return (n * 26) & 67\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpkr_wpkd3.jl:15\nin expression starting at /tmp/tmpkr_wpkd3.jl:15\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n < 0:\n        return modp(-n, p)\n    if p == 0:\n        return 0\n    if p == 1:\n        return 1\n    if n == 0:\n        return 1\n    if n == 1:\n        return p\n    if n == 2:\n        return (p * p) % p\n    if n % 2 == 0:\n        return (modp(n / 2, p) * modp(n / 2, p)) % p\n    return (modp(n / 2, p) * modp(n / 2 + 1, p)) % p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293301,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp1sov0t_q.jl:15\nin expression starting at /tmp/tmp1sov0t_q.jl:15\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    return n % p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu5osy5v_.jl:13 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu5osy5v_.jl:1\nin expression starting at /tmp/tmpu5osy5v_.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    return n % p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu5osy5v_.jl:13 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu5osy5v_.jl:1\nin expression starting at /tmp/tmpu5osy5v_.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if p == 0:\n        return 0\n    if n == 0:\n        return 1\n    return (n * modp(n - 1, p) % p) % p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293299,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpzb6ax7sv.jl:15\nin expression starting at /tmp/tmpzb6ax7sv.jl:15\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if p == 0:\n        return 1\n    if n == 0:\n        return 0\n    return (n % p) * modp(n / p, p) % p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293299,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpr9xpv6je.jl:15\nin expression starting at /tmp/tmpr9xpv6je.jl:15\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n < 0:\n        n = -n\n    if p < 0:\n        p = -p\n    if n == 0:\n        return 0\n    if p == 1:\n        return 1\n    if p == 2:\n        return n & 1\n    if p == 3:\n        return (n * 2) & 3\n    if p == 4:\n        return (n * 3) & 7\n    if p == 5:\n        return (n * 4) & 15\n    if p == 6:\n        return (n * 5) & 31\n    if p == 7:\n        return (n * 6) & 63\n    if p == 8:\n        return (n * 7) & 127\n    if p == 9:\n        return (n * 8) & 255\n    if p == 10:\n        return (n * 9) & 511\n    if p == 11:\n        return (n * 10) & 1023\n    if p == 12:\n        return (n * 11) & 2047\n    if p == 13:\n        return (n * 12) & 4095\n    if p == 14:\n        return (n * 13) & 8191\n    if p == 15:\n        return (n * 14) & 16383\n    if p == 16:\n        return (n * 15) & 32767\n    if p == 17:\n        return (n * 16) & 65535\n    if p == 18:\n        return (n * 17) & 131071\n    if p == 19:\n        return (n * 18) & 262143\n    if p == 20:\n        return (n * 19) & 524287\n    if p == 21:\n        return (n * 20) & 1048575\n    if p == 22:\n        return (n * 21) & 2097151\n    if p == 23:\n        return (n * 22) & 4194303\n    if p == 24:\n        return (n * 23) & 8388607\n    if p == 25:\n        return (n * 24) & 16777215\n    if p == 26:\n        return (n * 25) & 33554431\n    if p == 27:\n        return (n * 26) & 67\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpkr_wpkd3.jl:15\nin expression starting at /tmp/tmpkr_wpkd3.jl:15\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    return n % p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu5osy5v_.jl:13 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu5osy5v_.jl:1\nin expression starting at /tmp/tmpu5osy5v_.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    return n % p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu5osy5v_.jl:13 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu5osy5v_.jl:1\nin expression starting at /tmp/tmpu5osy5v_.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    return n % p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu5osy5v_.jl:13 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu5osy5v_.jl:1\nin expression starting at /tmp/tmpu5osy5v_.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    return n % p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu5osy5v_.jl:13 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu5osy5v_.jl:1\nin expression starting at /tmp/tmpu5osy5v_.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    return n % p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu5osy5v_.jl:13 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu5osy5v_.jl:1\nin expression starting at /tmp/tmpu5osy5v_.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n < 0:\n        n = -n\n        p = -p\n    if p == 0:\n        raise ValueError(\"p must be > 0\")\n    if n == 0:\n        return 1\n    if n == 1:\n        return p\n    if p == 1:\n        return 0\n    if p == 2:\n        return n & 1\n    if p == 3:\n        return (n * 2) & 3\n    if p == 4:\n        return (n * 3) & 7\n    if p == 5:\n        return (n * 4) & 15\n    if p == 6:\n        return (n * 5) & 31\n    if p == 7:\n        return (n * 6) & 63\n    if p == 8:\n        return (n * 7) & 127\n    if p == 9:\n        return (n * 8) & 255\n    if p == 10:\n        return (n * 9) & 511\n    if p == 11:\n        return (n * 10) & 1023\n    if p == 12:\n        return (n * 11) & 2047\n    if p == 13:\n        return (n * 12) & 4095\n    if p == 14:\n        return (n * 13) & 8191\n    if p == 15:\n        return (n * 14) & 16383\n    if p == 16:\n        return (n * 15) & 32767\n    if p == 17:\n        return (n * 16) & 65535\n    if p == 18:\n        return (n * 17) & 131071\n    if p == 19:\n        return (n * 18) & 262143\n    if p == 20:\n        return (n * 19) & 524287\n    if p == 21:\n        return (n * 20) & 1048575\n    if p == 22:\n        return (n * 21) & 2097151\n    if p == 23:\n        return (n * 22) & 4194303\n    if p == 24:\n        return (n * 23) & 8388607\n    if p == 25:\n        return (n * 24) & 16777215\n    if p == 26:\n        return (n * 25\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293302,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpa2mgooax.jl:15\nin expression starting at /tmp/tmpa2mgooax.jl:15\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    return n % p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu5osy5v_.jl:13 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu5osy5v_.jl:1\nin expression starting at /tmp/tmpu5osy5v_.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n < 0:\n        n = -n\n    if p < 0:\n        p = -p\n    if n == 0:\n        return 0\n    if p == 0:\n        return 1\n    if p == 1:\n        return n\n    if n == 1:\n        return 0\n    if n == 2:\n        return p\n    if n % 2 == 0:\n        return modp(n / 2, p) * modp(n / 2, p) % p\n    else:\n        return (modp(n / 2, p) * modp(n / 2 + 1, p) % p) * 2 % p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293302,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmph9se2koq.jl:15\nin expression starting at /tmp/tmph9se2koq.jl:15\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if p == 0:\n        return 0\n    if n == 0:\n        return 1\n    return (n * modp(n - 1, p) % p) % p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293299,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpzb6ax7sv.jl:15\nin expression starting at /tmp/tmpzb6ax7sv.jl:15\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n < 0:\n        n = -n\n    if p < 0:\n        p = -p\n    if p == 0:\n        raise ValueError(\"p must be > 0\")\n    if n == 0:\n        return 1\n    if p == 1:\n        return 0\n    if n == 1:\n        return p\n    if n == 2:\n        return (p * p) % p\n    if n % 2 == 0:\n        return (modp(n / 2, p) * modp(n / 2, p)) % p\n    else:\n        return (modp(n / 2, p) * modp(n / 2 + 1, p)) % p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293302,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpgf9e27cp.jl:15\nin expression starting at /tmp/tmpgf9e27cp.jl:15\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n < 0:\n        n = -n\n    if p < 0:\n        p = -p\n    if p == 0:\n        raise ValueError(\"p must be > 0\")\n    if n == 0:\n        return 1\n    if n == 1:\n        return p\n    if n == 2:\n        return (p * p) % p\n    if n % 2 == 0:\n        return (modp(n / 2, p) * modp(n / 2, p)) % p\n    else:\n        return (modp(n / 2, p) * modp(n / 2 + 1, p)) % p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293302,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpkbnm9zfl.jl:15\nin expression starting at /tmp/tmpkbnm9zfl.jl:15\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n < 0:\n        n = -n\n        p = -p\n    if p == 0:\n        return 0\n    if p == 1:\n        return n\n    if n == 0:\n        return 1\n    if n == 1:\n        return p\n    if n % 2 == 0:\n        return modp(n / 2, p) * modp(n / 2, p) % p\n    else:\n        return modp(n / 2, p) * modp(n / 2, p) * modp(n / 2, p) % p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293302,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpqq27lwxw.jl:15\nin expression starting at /tmp/tmpqq27lwxw.jl:15\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    return n % p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu5osy5v_.jl:13 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu5osy5v_.jl:1\nin expression starting at /tmp/tmpu5osy5v_.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    return n % p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu5osy5v_.jl:13 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu5osy5v_.jl:1\nin expression starting at /tmp/tmpu5osy5v_.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n < 0:\n        n = -n\n    if p < 0:\n        p = -p\n    if p == 0:\n        raise ValueError(\"p must be > 0\")\n    if n == 0:\n        return 1\n    if p == 1:\n        return 0\n    if p == 2:\n        return n & 1\n    if p == 3:\n        return (n * 2) & 3\n    if p == 4:\n        return (n * 3) & 7\n    if p == 5:\n        return (n * 4) & 15\n    if p == 6:\n        return (n * 5) & 31\n    if p == 7:\n        return (n * 6) & 63\n    if p == 8:\n        return (n * 7) & 127\n    if p == 9:\n        return (n * 8) & 255\n    if p == 10:\n        return (n * 9) & 511\n    if p == 11:\n        return (n * 10) & 1023\n    if p == 12:\n        return (n * 11) & 2047\n    if p == 13:\n        return (n * 12) & 4095\n    if p == 14:\n        return (n * 13) & 8191\n    if p == 15:\n        return (n * 14) & 16383\n    if p == 16:\n        return (n * 15) & 32767\n    if p == 17:\n        return (n * 16) & 65535\n    if p == 18:\n        return (n * 17) & 131071\n    if p == 19:\n        return (n * 18) & 262143\n    if p == 20:\n        return (n * 19) & 524287\n    if p == 21:\n        return (n * 20) & 1048575\n    if p == 22:\n        return (n * 21) & 2097151\n    if p == 23:\n        return (n * 22) & 4194303\n    if p == 24:\n        return (n * 23) & 8388607\n    if p == 25:\n        return (n * 24) & 16777215\n    if p == 26:\n        return (n * 25) & 3355\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293302,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpifu1_aq4.jl:15\nin expression starting at /tmp/tmpifu1_aq4.jl:15\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    return n % p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu5osy5v_.jl:13 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu5osy5v_.jl:1\nin expression starting at /tmp/tmpu5osy5v_.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if p == 0:\n        return 1\n    if n == 0:\n        return 0\n    return (n % p) * modp(n // p, p) % p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293302,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfzlbizch.jl:15\nin expression starting at /tmp/tmpfzlbizch.jl:15\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    return (n % p)\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293301,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpe4zreipe.jl:13 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpe4zreipe.jl:1\nin expression starting at /tmp/tmpe4zreipe.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    return n % p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu5osy5v_.jl:13 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu5osy5v_.jl:1\nin expression starting at /tmp/tmpu5osy5v_.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if p == 0:\n        return 1\n    if n == 0:\n        return 0\n    return (n % p) * modp(n / p, p) % p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293299,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpr9xpv6je.jl:15\nin expression starting at /tmp/tmpr9xpv6je.jl:15\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n < 0:\n        return modp(-n, p)\n    if p == 0:\n        return 0\n    if p == 1:\n        return 1\n    if n == 0:\n        return 1\n    if n == 1:\n        return 0\n    if n == 2:\n        return p\n    if n % 2 == 0:\n        return modp(n / 2, p) * modp(n / 2, p) % p\n    else:\n        return (modp(n / 2, p) * modp(n / 2, p) + p) % p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293303,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3knifsj5.jl:15\nin expression starting at /tmp/tmp3knifsj5.jl:15\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    return n % p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu5osy5v_.jl:13 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu5osy5v_.jl:1\nin expression starting at /tmp/tmpu5osy5v_.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    return n % p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu5osy5v_.jl:13 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu5osy5v_.jl:1\nin expression starting at /tmp/tmpu5osy5v_.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if p == 0:\n        return 1\n    return (n % p) % p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293302,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4r0uq61w.jl:15\nin expression starting at /tmp/tmp4r0uq61w.jl:15\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    return n % p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu5osy5v_.jl:13 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu5osy5v_.jl:1\nin expression starting at /tmp/tmpu5osy5v_.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n < 0:\n        n = -n\n    if p < 0:\n        p = -p\n    if n == 0:\n        return 0\n    if p == 1:\n        return 1\n    if p == 2:\n        return n & 1\n    if p == 3:\n        return (n * 2) & 3\n    if p == 4:\n        return (n * 3) & 7\n    if p == 5:\n        return (n * 4) & 15\n    if p == 6:\n        return (n * 5) & 31\n    if p == 7:\n        return (n * 6) & 63\n    if p == 8:\n        return (n * 7) & 127\n    if p == 9:\n        return (n * 8) & 255\n    if p == 10:\n        return (n * 9) & 511\n    if p == 11:\n        return (n * 10) & 1023\n    if p == 12:\n        return (n * 11) & 2047\n    if p == 13:\n        return (n * 12) & 4095\n    if p == 14:\n        return (n * 13) & 8191\n    if p == 15:\n        return (n * 14) & 16383\n    if p == 16:\n        return (n * 15) & 32767\n    if p == 17:\n        return (n * 16) & 65535\n    if p == 18:\n        return (n * 17) & 131071\n    if p == 19:\n        return (n * 18) & 262143\n    if p == 20:\n        return (n * 19) & 524287\n    if p == 21:\n        return (n * 20) & 1048575\n    if p == 22:\n        return (n * 21) & 2097151\n    if p == 23:\n        return (n * 22) & 4194303\n    if p == 24:\n        return (n * 23) & 8388607\n    if p == 25:\n        return (n * 24) & 16777215\n    if p == 26:\n        return (n * 25) & 33554431\n    if p == 27:\n        return (n * 26) & 67\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpkr_wpkd3.jl:15\nin expression starting at /tmp/tmpkr_wpkd3.jl:15\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    return n % p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu5osy5v_.jl:13 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu5osy5v_.jl:1\nin expression starting at /tmp/tmpu5osy5v_.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    return n % p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu5osy5v_.jl:13 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu5osy5v_.jl:1\nin expression starting at /tmp/tmpu5osy5v_.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    return n % p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu5osy5v_.jl:13 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu5osy5v_.jl:1\nin expression starting at /tmp/tmpu5osy5v_.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    return n % p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu5osy5v_.jl:13 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu5osy5v_.jl:1\nin expression starting at /tmp/tmpu5osy5v_.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    return n % p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu5osy5v_.jl:13 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu5osy5v_.jl:1\nin expression starting at /tmp/tmpu5osy5v_.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    return n % p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu5osy5v_.jl:13 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu5osy5v_.jl:1\nin expression starting at /tmp/tmpu5osy5v_.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0: return 1\n    return (n * modp(n - 1, p) % p)\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293299,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyztrnnq9.jl:1\nin expression starting at /tmp/tmpyztrnnq9.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n < 0:\n        return modp(-n, p)\n    if n == 0:\n        return 0\n    if p == 0:\n        raise ValueError(\"p must be > 0\")\n    if p == 1:\n        return 1\n    if p == 2:\n        return n & 1\n    if p == 3:\n        return (n * 2) & 3\n    if p == 4:\n        return (n * 3) & 7\n    if p == 5:\n        return (n * 4) & 15\n    if p == 6:\n        return (n * 5) & 31\n    if p == 7:\n        return (n * 6) & 63\n    if p == 8:\n        return (n * 7) & 127\n    if p == 9:\n        return (n * 8) & 255\n    if p == 10:\n        return (n * 9) & 511\n    if p == 11:\n        return (n * 10) & 1023\n    if p == 12:\n        return (n * 11) & 2047\n    if p == 13:\n        return (n * 12) & 4095\n    if p == 14:\n        return (n * 13) & 8191\n    if p == 15:\n        return (n * 14) & 16383\n    if p == 16:\n        return (n * 15) & 32767\n    if p == 17:\n        return (n * 16) & 65535\n    if p == 18:\n        return (n * 17) & 131071\n    if p == 19:\n        return (n * 18) & 262143\n    if p == 20:\n        return (n * 19) & 524287\n    if p == 21:\n        return (n * 20) & 1048575\n    if p == 22:\n        return (n * 21) & 2097151\n    if p == 23:\n        return (n * 22) & 4194303\n    if p == 24:\n        return (n * 23) & 8388607\n    if p == 25:\n        return (n * 24) & 16777215\n    if p == 26:\n        return (n * 25) & 33554431\n    if p == 27:\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293302,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0lyoff6a.jl:15\nin expression starting at /tmp/tmp0lyoff6a.jl:15\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if p == 0: return 0\n    if n == 0: return 1\n    if n < 0: n = -n\n    if p < 0: p = -p\n    if n >= p: return n % p\n    return (n * modp(n, p - 1)) % p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293302,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppnyxsq47.jl:16\nin expression starting at /tmp/tmppnyxsq47.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    return n % p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu5osy5v_.jl:13 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu5osy5v_.jl:1\nin expression starting at /tmp/tmpu5osy5v_.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n < 0:\n        n = -n\n        p = -p\n    if p == 0:\n        return 0\n    if p == 1:\n        return 1\n    if p == 2:\n        return n & 1\n    if p == 3:\n        return (n * 2) & 3\n    if p == 4:\n        return (n * 3) & 7\n    if p == 5:\n        return (n * 4) & 15\n    if p == 6:\n        return (n * 5) & 31\n    if p == 7:\n        return (n * 6) & 63\n    if p == 8:\n        return (n * 7) & 127\n    if p == 9:\n        return (n * 8) & 255\n    if p == 10:\n        return (n * 9) & 511\n    if p == 11:\n        return (n * 10) & 1023\n    if p == 12:\n        return (n * 11) & 2047\n    if p == 13:\n        return (n * 12) & 4095\n    if p == 14:\n        return (n * 13) & 8191\n    if p == 15:\n        return (n * 14) & 16383\n    if p == 16:\n        return (n * 15) & 32767\n    if p == 17:\n        return (n * 16) & 65535\n    if p == 18:\n        return (n * 17) & 131071\n    if p == 19:\n        return (n * 18) & 262143\n    if p == 20:\n        return (n * 19) & 524287\n    if p == 21:\n        return (n * 20) & 1048575\n    if p == 22:\n        return (n * 21) & 2097151\n    if p == 23:\n        return (n * 22) & 4194303\n    if p == 24:\n        return (n * 23) & 8388607\n    if p == 25:\n        return (n * 24) & 16777215\n    if p == 26:\n        return (n * 25) & 33554431\n    if p == 27:\n        return (n * 26) & 67108863\n    if p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpspyjc62b.jl:15\nin expression starting at /tmp/tmpspyjc62b.jl:15\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n < 0:\n        return modp(-n, p)\n    if p == 0:\n        return 0\n    if p == 1:\n        return 1\n    if p == 2:\n        return n & 1\n    if p == 3:\n        return (n * 2) % 3\n    if p == 4:\n        return (n * 3) % 4\n    if p == 5:\n        return (n * 5) % 5\n    if p == 6:\n        return (n * 7) % 6\n    if p == 7:\n        return (n * 11) % 7\n    if p == 8:\n        return (n * 13) % 8\n    if p == 9:\n        return (n * 17) % 9\n    if p == 10:\n        return (n * 19) % 10\n    if p == 11:\n        return (n * 23) % 11\n    if p == 12:\n        return (n * 29) % 12\n    if p == 13:\n        return (n * 31) % 13\n    if p == 14:\n        return (n * 37) % 14\n    if p == 15:\n        return (n * 41) % 15\n    if p == 16:\n        return (n * 43) % 16\n    if p == 17:\n        return (n * 47) % 17\n    if p == 18:\n        return (n * 53) % 18\n    if p == 19:\n        return (n * 59) % 19\n    if p == 20:\n        return (n * 61) % 20\n    if p == 21:\n        return (n * 67) % 21\n    if p == 22:\n        return (n * 71) % 22\n    if p == 23:\n        return (n * 73) % 23\n    if p == 24:\n        return (n * 79) % 24\n    if p == 25:\n        return (n * 83) % 25\n    if p == 26:\n        return (n * 89) % 26\n    if p == 27:\n        return (n * 97) % 27\n    if p == 28:\n        return (n * 101) % 28\n    if p == 29:\n        return (n * 103) % 29\n    \nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293302,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpce4qcil9.jl:15\nin expression starting at /tmp/tmpce4qcil9.jl:15\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if p == 0:\n        return 0\n    if n == 0:\n        return 1\n    return (n * modp(n - 1, p) % p) % p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293299,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpzb6ax7sv.jl:15\nin expression starting at /tmp/tmpzb6ax7sv.jl:15\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    return n % p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu5osy5v_.jl:13 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu5osy5v_.jl:1\nin expression starting at /tmp/tmpu5osy5v_.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n < 0:\n        n = -n\n        p = -p\n    if p == 0:\n        raise ValueError(\"p must be > 0\")\n    if p == 1:\n        return 0\n    if p == 2:\n        return n & 1\n    if p == 3:\n        return (n * 2) % 3\n    if p == 4:\n        return (n * 3) % 4\n    if p == 5:\n        return (n * 5) % 5\n    if p == 6:\n        return (n * 7) % 6\n    if p == 7:\n        return (n * 11) % 7\n    if p == 8:\n        return (n * 13) % 8\n    if p == 9:\n        return (n * 17) % 9\n    if p == 10:\n        return (n * 19) % 10\n    if p == 11:\n        return (n * 23) % 11\n    if p == 12:\n        return (n * 29) % 12\n    if p == 13:\n        return (n * 31) % 13\n    if p == 14:\n        return (n * 37) % 14\n    if p == 15:\n        return (n * 41) % 15\n    if p == 16:\n        return (n * 43) % 16\n    if p == 17:\n        return (n * 47) % 17\n    if p == 18:\n        return (n * 53) % 18\n    if p == 19:\n        return (n * 59) % 19\n    if p == 20:\n        return (n * 61) % 20\n    if p == 21:\n        return (n * 67) % 21\n    if p == 22:\n        return (n * 71) % 22\n    if p == 23:\n        return (n * 73) % 23\n    if p == 24:\n        return (n * 79) % 24\n    if p == 25:\n        return (n * 83) % 25\n    if p == 26:\n        return (n * 89) % 26\n    if p == 27:\n        return (n * 97) % 27\n    if p == 28:\n        return (n * 101) % 28\n    if p == 29:\n        \nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293303,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4nalmssw.jl:15\nin expression starting at /tmp/tmp4nalmssw.jl:15\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n < 0:\n        n = -n\n    if p < 0:\n        p = -p\n    if p == 0:\n        raise ValueError(\"p must be > 0\")\n    if n == 0:\n        return 1\n    if n == 1:\n        return p\n    if n % 2 == 0:\n        return modp(n // 2, p) * modp(n // 2, p) % p\n    else:\n        return modp(n // 2, p) * modp(n // 2, p) * modp(n // 2, p) % p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293302,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpitzyqsqi.jl:15\nin expression starting at /tmp/tmpitzyqsqi.jl:15\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n < 0:\n        n = -n\n    if p < 0:\n        p = -p\n    if n == 0:\n        return 0\n    if p == 1:\n        return 1\n    if p == 2:\n        return n & 1\n    if p == 3:\n        return (n * 2) & 3\n    if p == 4:\n        return (n * 3) & 7\n    if p == 5:\n        return (n * 4) & 15\n    if p == 6:\n        return (n * 5) & 31\n    if p == 7:\n        return (n * 6) & 63\n    if p == 8:\n        return (n * 7) & 127\n    if p == 9:\n        return (n * 8) & 255\n    if p == 10:\n        return (n * 9) & 511\n    if p == 11:\n        return (n * 10) & 1023\n    if p == 12:\n        return (n * 11) & 2047\n    if p == 13:\n        return (n * 12) & 4095\n    if p == 14:\n        return (n * 13) & 8191\n    if p == 15:\n        return (n * 14) & 16383\n    if p == 16:\n        return (n * 15) & 32767\n    if p == 17:\n        return (n * 16) & 65535\n    if p == 18:\n        return (n * 17) & 131071\n    if p == 19:\n        return (n * 18) & 262143\n    if p == 20:\n        return (n * 19) & 524287\n    if p == 21:\n        return (n * 20) & 1048575\n    if p == 22:\n        return (n * 21) & 2097151\n    if p == 23:\n        return (n * 22) & 4194303\n    if p == 24:\n        return (n * 23) & 8388607\n    if p == 25:\n        return (n * 24) & 16777215\n    if p == 26:\n        return (n * 25) & 33554431\n    if p == 27:\n        return (n * 26) & 67\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpkr_wpkd3.jl:15\nin expression starting at /tmp/tmpkr_wpkd3.jl:15\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    return n % p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu5osy5v_.jl:13 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu5osy5v_.jl:1\nin expression starting at /tmp/tmpu5osy5v_.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0: return 1\n    return (n % p) * modp(n / p, p) % p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293303,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpiyjudcf8.jl:1\nin expression starting at /tmp/tmpiyjudcf8.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    return n % p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu5osy5v_.jl:13 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu5osy5v_.jl:1\nin expression starting at /tmp/tmpu5osy5v_.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    return n % p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu5osy5v_.jl:13 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu5osy5v_.jl:1\nin expression starting at /tmp/tmpu5osy5v_.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if p == 0:\n        return 0\n    if n == 0:\n        return 1\n    return (n * modp(n - 1, p) % p) % p\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n",
      "timestamp": 1664293299,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpzb6ax7sv.jl:15\nin expression starting at /tmp/tmpzb6ax7sv.jl:15\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}