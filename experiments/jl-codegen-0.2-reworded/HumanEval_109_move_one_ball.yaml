name: HumanEval_109_move_one_ball
language: jl
prompt: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
  \    numbers in the vector will be randomly ordered. Your task is to determine if\n\
  \    it is possible to get a vector sorted in non-decreasing order by performing\
  \ \n    the following operation on the given vector:\n        You are allowed to\
  \ perform right shift operation any number of times.\n    \n    One right shift\
  \ operation means shifting all elements of the vector by one\n    position in the\
  \ right direction. The last element of the vector will be moved to\n    the starting\
  \ position in the vector i.e. 0th index. \n\n    If it is possible to obtain the\
  \ sorted vector by performing the above operation\n    then return true else return\
  \ false.\n    If the given vector is empty then return true.\n\n    Note: The given\
  \ vector is guaranteed to have unique elements.\n\n    For Example:\n    \n    >>>\
  \ move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation: By performin 2 right\
  \ shift operations, non-decreasing order can\n                 be achieved for the\
  \ given vector.\n    >>> move_one_ball([3, 5, 4, 1, 2])\n    false\n    Explanation:It\
  \ is not possible to get non-decreasing order for the given\n                vector\
  \ by performing any number of right shift operations.\n                \n    \"\"\
  \"\nfunction move_one_ball(arr::Vector{Int64})::Bool \n"
tests: "using Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
  \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
  \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
  \ == true)\nend\n"
completions: []
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
