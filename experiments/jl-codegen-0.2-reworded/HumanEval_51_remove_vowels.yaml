name: HumanEval_51_remove_vowels
language: jl
prompt: "\"\"\"\n    remove_vowels is a function that takes string and returns string\
  \ without vowels.\n    >>> remove_vowels(\"\")\n    \"\"\n    >>> remove_vowels(\"\
  abcdef\")\n    \"bcdf\"\n    >>> remove_vowels(\"aaaaa\")\n    \"\"\n    >>> remove_vowels(\"\
  aaBAA\")\n    \"B\"\n    >>> remove_vowels(\"zbcd\")\n    \"zbcd\"\n    \"\"\"\n\
  function remove_vowels(text::String)::String \n"
tests: "using Test\n\n@testset begin\n\ncandidate = remove_vowels;\n\t@test(candidate(\"\
  \") == \"\")\n\t@test(candidate(\"abcdef\nghijklm\") == \"bcdf\nghjklm\")\n\t@test(candidate(\"\
  fedcba\") == \"fdcb\")\n\t@test(candidate(\"eeeee\") == \"\")\n\t@test(candidate(\"\
  acBAA\") == \"cB\")\n\t@test(candidate(\"EcBOO\") == \"cB\")\n\t@test(candidate(\"\
  ybcd\") == \"ybcd\")\nend\n"
completions: ["    if text ==\"\" then\n        return \"\"\n    else\n        return\
    \ text[1:len(text)-1]", "    if len(text) == 0:\n        return \"\"\n    else:\n\
    \        return text[0] + remove_vowels(text[1:])", "    if text is \"\" then\n\
    \        return \"\"\n    else\n        return text.replace(\"a\", \"\")\n   \
    \     return text.replace(\"e\", \"\")\n        return text.replace(\"i\", \"\"\
    )\n        return text.replace(\"o\", \"\")\n        return text.replace(\"u\"\
    , \"\")\n        return text.replace(\"A\", \"\")\n        return text.replace(\"\
    E\", \"\")\n        return text.replace(\"I\", \"\")\n        return text.replace(\"\
    O\", \"\")\n        return text.replace(\"U\", \"\")\n        return text.replace(\"\
    \ \", \"\")\n        return text.replace(\"-\", \"\")\n        return text.replace(\"\
    .\", \"\")\n        return text.replace(\"/\", \"\")\n        return text.replace(\"\
    @\", \"\")\n        return text.replace(\"#\", \"\")\n        return text.replace(\"\
    $\", \"\")\n        return text.replace(\"%\", \"\")\n        return text.replace(\"\
    ^\", \"\")\n        return text.replace(\"&\", \"\")\n        return text.replace(\"\
    *\", \"\")\n        return text.replace(\"(\", \"\")\n        return text.replace(\"\
    )\", \"\")\n        return text.replace(\"_\", \"\")\n        return text.replace(\"\
    +\", \"\")\n        return text.replace(\"=\", \"\")\n        return text.replace(\"\
    ?\", \"\")\n        return text.replace(\"'\", \"\")\n        return text.replace(\"\
    \\\"\", \"\")\n        return text.replace(\"<\", \"\")\n        return text.replace(\"\
    >\", \"\")\n        return text.replace(\";\", \"\")\n        return text.replace(\"\
    :\", \"\")\n        return text.replace(\"\\\\\", \"\")\n        return text.replace(\"\
    |\", \"\")\n        return text.replace(\"[\", \"\")\n        return text.replace(\"\
    ]\", \"\")\n        return text.replace(\"{\", \"\")\n        return text.replace(\"\
    }\", \"\")\n        return text.replace(\"|\", \"\")\n        return text.replace(\"\
    [\", \"\")\n        return text.replace(\"]\", \"\")\n        return text.replace(\"\
    {\", \"\")\n        return text.replace(\"}\", \"\")\n        return text.replace(\"\
    |\", \"\")\n        return text.replace(\"", "    if text = \"\" then\n      \
    \  return \"\"\n    else\n        return text[1:len(text) - 1]", '    return text.replaceAll("[aeiou]",
    "")', "    text = text.lower()\n    vowels = \"aeiou\"\n    new_text = \"\"\n\
    \    for char in text:\n        if char not in vowels:\n            new_text +=\
    \ char\n    return new_text", "    if text is \"\" then\n        return \"\"\n\
    \    else\n        return text[1:len(text)-1]", "    if text ==\"\" then return\
    \ \"\"\n    return text[1:len(text)-1]", "    if text is \"\" then\n        return\
    \ \"\"\n    else\n        return text[1:len(text)-1]", '    return text.replaceAll("[aeiou]",
    "")', "    if text ==\"\":\n        return \"\"\n    else:\n        return text[0]\
    \ + remove_vowels(text[1:])", "    text = text.lower()\n    vowels = \"aeiou\"\
    \n    for char in vowels:\n        text = text.replace(char, \"\")\n    return\
    \ text", "    if text is \"\" then\n        return \"\"\n    else\n        return\
    \ text[1:len(text)-1]", "    if len(text) == 0:\n        return \"\"\n    else:\n\
    \        return text[0] + remove_vowels(text[1:])", '    return text.replaceAll("[aeiou]",
    "")', '    return text.replace(/[aeiou]/g, "")', '    return text.replace(/[aeiou]/g,
    "")', '    return text.replace(/[aeiou]/g, "")', "    if text is \"\" then\n \
    \       return \"\"\n    else\n        return text[1:len(text) - 1]", "    text\
    \ = text.lower()\n    vowels = \"aeiou\"\n    for char in vowels:\n        text\
    \ = text.replace(char, \"\")\n    return text", "    if text = \"\" then\n   \
    \     return \"\"\n    else\n        return text[1:len(text) - 1]", '    return
    text.replace(/[aeiou]/g, "")', '    return text.replaceAll("[aeiou]", "")', " \
    \   if text ==\"\":\n        return \"\"\n    else:\n        return text[0:1]\
    \ + remove_vowels(text[1:])", "    if text is \"\" then\n        return \"\"\n\
    \    else\n        return text[1:len(text)-1]", '    return text.replaceAll("[aeiouAEIOU]",
    "")', "    if text is \"\" then\n        return \"\"\n    else\n        return\
    \ text[1:len(text)-1]", "    if len(text) == 0:\n        return \"\"\n    else:\n\
    \        return text[0] + remove_vowels(text[1:])", '    return text.replace(/[aeiou]/g,
    "")', '    return text.replace(/[aeiou]/g, "")', '    return text.replace(/[aeiou]/g,
    "")', '    return text.replace(/[aeiou]/g, "")', "    if text = \"\" then return\
    \ \"\"\n    vowels = \"aeiouAEIOU\"\n    i = 0\n    while i < len(text):\n   \
    \     if text[i] in vowels:\n            i = i + 1\n        else:\n          \
    \  break\n    if i == len(text):\n        return text\n    else:\n        return\
    \ text[i:]", "    if text is \"\" then\n        return \"\"\n    else\n      \
    \  return text[1:len(text)-1]", '    return text.replace(/[aeiou]/g, "")', '    return
    text.replace(/[aeiou]/g, "")', "    if text = \"\" then\n        return \"\"\n\
    \    else\n        return text[1:len(text)-1]", "    if len(text) == 0:\n    \
    \    return \"\"\n    else:\n        return text[0] + remove_vowels(text[1:])",
  '    return text.replace(/[aeiou]/g, "")', "    if text is \"\" then\n        return\
    \ \"\"\n    else\n        return text[1:len(text)-1]", '    return text.replace(/[aeiou]/g,
    "")', "    if text is \"\" then\n        return \"\"\n    else\n        return\
    \ text[1:len(text)-1]", '    return text.replace(/[aeiou]/g, "")', '    return
    text.replaceAll("[aeiou]", "")', "    if text is \"\" then\n        return \"\"\
    \n    else\n        return text[1:len(text)-1]", "    if text is \"\" then\n \
    \       return \"\"\n    else\n        return text[1:len(text)-1]", "    text\
    \ = text.lower()\n    vowels = \"aeiou\"\n    for char in vowels:\n        text\
    \ = text.replace(char, \"\")\n    return text", '    return text.replace(/[aeiou]/g,
    "")', '    return text.replaceAll("[aeiou]", "")', "    if text = \"\" then\n\
    \        return \"\"\n    else\n        return text[1:len(text) - 1]", "    if\
    \ text ==\"\" then\n        return \"\"\n    else\n        return text[1:len(text)-1]",
  "    text = text.lower()\n    vowels = \"aeiou\"\n    new_text = \"\"\n    for char\
    \ in text:\n        if char not in vowels:\n            new_text += char\n   \
    \ return new_text", '    return text.replace(/[aeiou]/g, "")', '    return text.replace(/[aeiou]/g,
    "")', '    return text.replace(/[aeiou]/g, "")', "    if len(text) == 0:\n   \
    \     return \"\"\n    else:\n        return text[0] + remove_vowels(text[1:])",
  "    if len(text) == 0:\n        return \"\"\n    else:\n        return text[0]\
    \ + remove_vowels(text[1:])", "    if text ==\"\" then\n        return \"\"\n\
    \    else\n        return text[1:len(text)-1]", '    return text.replaceAll("[aeiou]",
    "")', "    if len(text) == 0:\n        return \"\"\n    else:\n        return\
    \ text[0] + remove_vowels(text[1:])", "    if text is \"\" then\n        return\
    \ \"\"\n    else\n        return text[1:len(text) - 1]", "    if text = \"\" then\n\
    \        return \"\"\n    else\n        return text[1:len(text)-1]", "    if text\
    \ is \"\" then\n        return \"\"\n    else\n        return text[1:len(text)-1]",
  "    if text is \"\" then\n        return \"\"\n    else\n        return text[1:len(text)-1]",
  '    return text.replace(/[aeiou]/g, "")', '    return text.replace(/[aeiou]/g,
    "")', "    if text is \"\" then\n        return \"\"\n    else\n        return\
    \ text[1:len(text)-1]", "    if text ==\"\" then\n        return \"\"\n    else\n\
    \        return text[1:len(text)-1]", "    if text is \"\" then\n        return\
    \ \"\"\n    else\n        return text[1:len(text)-1]", "    if text is \"\" then\n\
    \        return \"\"\n    else\n        return text.replace(\"a\", \"\").replace(\"\
    e\", \"\").replace(\"i\", \"\").replace(\"o\", \"\").replace(\"u\", \"\")", " \
    \   if text is \"\" then\n        return \"\"\n    else\n        return text[1:len(text)-1]",
  "    if text ==\"\" then\n        return \"\"\n    else\n        return text[1:len(text)-1]",
  "    if text ==\"\" then\n        return \"\"\n    else\n        return text[1:len(text)-1]",
  '    return text.replace(/[aeiou]/g, "")', '    return text.replace(/[aeiou]/g,
    "")', '    return text.replaceAll("[aeiou]", "")', "    text = text.lower()\n\
    \    vowels = \"aeiou\"\n    for char in vowels:\n        text = text.replace(char,\
    \ \"\")\n    return text", '    return text.replace(/[aeiou]/g, "")', "    if\
    \ text is \"\"\n        return \"\"\n    else:\n        return text.replace(\"\
    a\",\"\").replace(\"e\",\"\").replace(\"i\",\"\").replace(\"o\",\"\").replace(\"\
    u\",\"\")", "    if text ==\"\" then\n        return \"\"\n    else\n        return\
    \ text[1:len(text)-1]", '    return text.replace(/[aeiou]/g, "")', '    return
    text.replace(/[aeiou]/g, "")', '    return text.replace(/[aeiou]/g, "")', "  \
    \  if text is \"\" then\n        return \"\"\n    else\n        return text[1:len(text)-1]",
  "    if text is \"\" then\n        return \"\"\n    else\n        return text[1:len(text)-1]",
  '    return text.replace(/[aeiou]/g, "")', "    if text is \"\" then\n        return\
    \ \"\"\n    else\n        return text[1:len(text)-1]", "    if len(text) == 0:\n\
    \        return \"\"\n    else:\n        return text[0] + remove_vowels(text[1:])",
  "    if len(text) == 0:\n        return \"\"\n    else:\n        return text[0]\
    \ + remove_vowels(text[1:])", '    return text.replace(/[aeiou]/g, "")', '    return
    text.replace(/[aeiou]/g, "")', "    if text = \"\" then\n        return \"\"\n\
    \    else\n        return text[1:len(text)-1]", '    return text.replace(/[aeiou]/g,
    "")', '    return text.replace(/[aeiou]/g, "")', "    if text is \"\" then\n \
    \       return \"\"\n    else\n        return text[1:len(text)-1]", "    text\
    \ = text.toLowerCase()\n    vowels = \"aeiou\"\n    for char in text:\n      \
    \  if char in vowels:\n            text = text.replace(char, \"\")\n    return\
    \ text", '    return text.replaceAll("[aeiou]", "")', "    if text is \"\" then\n\
    \        return \"\"\n    else\n        return text[1:len(text)-1]", "    if text\
    \ is \"\" then\n        return \"\"\n    else\n        return text[1:len(text)\
    \ - 1]", "    if text is \"\" then\n        return \"\"\n    else\n        return\
    \ text[1:len(text)-1]", "    if text is \"\" then\n        return \"\"\n    else\n\
    \        return text[1:len(text)-1]", "    text = text.lower()\n    vowels = \"\
    aeiou\"\n    new_text = \"\"\n    for char in text:\n        if char not in vowels:\n\
    \            new_text += char\n    return new_text", '    return text.replace(/[aeiou]/g,
    "")', "    if text ==\"\" then\n        return \"\"\n    else\n        return\
    \ text[1:len(text)-1]", '    return text.replaceAll("[aeiou]", "")', "    if text\
    \ = \"\" then\n        return \"\"\n    else\n        return text[1:len(text)\
    \ - 1]", "    text = text.lower()\n    vowels = \"aeiou\"\n    for char in text:\n\
    \        if char in vowels:\n            text = text.replace(char, \"\")\n   \
    \ return text", '    return text.replace(/[aeiou]/g, "")', "    text = text.toLowerCase()\n\
    \    vowels = \"aeiou\"\n    for i in range(len(text)):\n        if text[i] in\
    \ vowels:\n            text = text[:i] + text[i+1:]\n    return text", "    if\
    \ text is \"\" then\n        return \"\"\n    else\n        return text[1:len(text)-1]",
  "    if text is \"\" then\n        return \"\"\n    else\n        return text[1:len(text)-1]",
  '    return text.replaceAll("[aeiou]", "")', '    return text.replace(/[aeiou]/g,
    "")', '    return text.replaceAll("[aeiouAEIOU]", "")', '    return text.replace(/[aeiou]/g,
    "")', "    if text ==\"\" then\n        return \"\"\n    else\n        return\
    \ text[1:len(text)-1]", "    if text = \"\" then\n        return \"\"\n    else\n\
    \        return text[1:len(text)-1]", '    return text.replace(/[aeiou]/g, "")',
  "    if text is \"\" then\n        return \"\"\n    else\n        return text[1:len(text)\
    \ - 1]", "    if text is \"\" then\n        return \"\"\n    else\n        return\
    \ text[1:len(text)-1]", "    text = text.lower()\n    vowels = \"aeiou\"\n   \
    \ for char in vowels:\n        text = text.replace(char, \"\")\n    return text",
  '    return text.replaceAll("[aeiouAEIOU]", "")', "    if len(text) == 0:\n    \
    \    return \"\"\n    else:\n        return text[0] + remove_vowels(text[1:])",
  '    return text.replace(/[aeiou]/g, "")', "    if text ==\"\" then\n        return\
    \ \"\"\n    else\n        return text[1:len(text)-1]", '    return text.replaceAll("[aeiou]",
    "")', '    return text.replaceAll("[aeiou]", "")', "    if text = \"\" then\n\
    \        return \"\"\n    else\n        return text[1:len(text) - 1]", "    if\
    \ text is \"\" then\n        return \"\"\n    else\n        return text[1:len(text)\
    \ - 1]", "    if text is \"\" then\n        return \"\"\n    else\n        return\
    \ text[1:len(text)-1]", "    if text is \"\" then\n        return \"\"\n    else\n\
    \        return text[1:len(text)-1]", "    if len(text) == 0:\n        return\
    \ \"\"\n    else:\n        return text[0] + remove_vowels(text[1:])", "    if\
    \ len(text) == 0:\n        return \"\"\n    else:\n        return text[0] + remove_vowels(text[1:])",
  '    return text.replaceAll("[aeiou]", "")', "    if text = \"\" then\n        return\
    \ \"\"\n    else\n        return text[1:len(text) - 1]", "    text = text.lower()\n\
    \    vowels = \"aeiou\"\n    return \"\".join([char for char in text if char not\
    \ in vowels])", '    return text.replaceAll("[aeiou]", "")', "    if text is \"\
    \" then\n        return \"\"\n    else\n        return text[1:len(text)-1]", '    return
    text.replaceAll("[aeiou]", "")', '    return text.replace(/[aeiou]/g, "")', " \
    \   if text ==\"\": return \"\"\n    vowels = \"aeiou\"\n    text = text.lower()\n\
    \    new_text = \"\"\n    for char in text:\n        if char not in vowels:\n\
    \            new_text += char\n    return new_text", '    return text.replace(/[aeiou]/g,
    "")', "    if text is \"\" then\n        return \"\"\n    else\n        return\
    \ text[1:len(text)-1]", "    text = text.lower()\n    vowels = \"aeiou\"\n   \
    \ result = \"\"\n    for char in text:\n        if char not in vowels:\n     \
    \       result += char\n    return result", "    if text ==\"\":\n        return\
    \ \"\"\n    else:\n        return text[0:1] + remove_vowels(text[1:])", "    if\
    \ text is \"\" then\n        return \"\"\n    else\n        return text[1:len(text)-1]",
  "    if text is \"\" then\n        return \"\"\n    else\n        return text[1:len(text)-1]",
  "    if text is \"\" then\n        return \"\"\n    else\n        return text[1:len(text)-1]",
  '    return text.replace(/[aeiou]/g, "")', '    return text.replaceAll("[aeiou]",
    "")', "    if text = \"\" then\n        return \"\"\n    else\n        return\
    \ text[1:len(text) - 1]", "    if text is \"\" then\n        return \"\"\n   \
    \ else\n        return text[1:len(text)-1]", "    text = text.lower()\n    vowels\
    \ = \"aeiou\"\n    new_text = \"\"\n    for char in text:\n        if char not\
    \ in vowels:\n            new_text += char\n    return new_text", '    return
    text.replace(/[aeiou]/g, "")', '    return text.replace(/[aeiou]/g, "")', "  \
    \  if text = \"\" then return \"\"\n    vowels = \"aeiou\"\n    for i in range(1,\
    \ len(text)):\n        if text[i] in vowels:\n            text = text[:i] + text[i+1:]\n\
    \    return text", '    return text.replaceAll("[aeiou]", "")', "    if text =\
    \ \"\" then\n        return \"\"\n    else\n        return text[1:len(text) -\
    \ 1]", '    return text.replace(/[aeiou]/g, "")', "    if text = \"\" then\n \
    \       return \"\"\n    else\n        return text[1:len(text)-1]", "    if text\
    \ is \"\" then\n        return \"\"\n    else\n        return text[1:len(text)-1]",
  "    if len(text) == 0:\n        return \"\"\n    else:\n        return text[0]\
    \ + remove_vowels(text[1:])", "    if len(text) == 0:\n        return \"\"\n \
    \   else:\n        return text[0] + remove_vowels(text[1:])", "    if text = \"\
    \" then return \"\"\n    vowels = \"aeiou\"\n    for i in range(1, len(text)):\n\
    \        if text[i] in vowels:\n            text = text[0:i] + text[i+1:]\n  \
    \  return text", "    if text = \"\" then return \"\"\n    vowels = \"aeiou\"\n\
    \    return text[1:len(text) - 1] if text[0] = vowels[0] and text[len(text) -\
    \ 1] = vowels[len(vowels) - 1] else text", '    return text.replace(/[aeiou]/g,
    "")', '    return text.replaceAll("[aeiou]", "")', '    return text.replaceAll("[aeiou]",
    "")', "    if text ==\"\":\n        return \"\"\n    else:\n        return text.replace(\"\
    a\",\"\").replace(\"e\",\"\").replace(\"i\",\"\").replace(\"o\",\"\").replace(\"\
    u\",\"\")", "    if text is \"\" then\n        return \"\"\n    else\n       \
    \ return text[1:len(text)-1]", '    return text.replace(/[aeiou]/g, "")', "  \
    \  if text is \"\" then\n        return \"\"\n    else\n        return text[1:len(text)-1]",
  "    if text = \"\" then\n        return \"\"\n    else\n        return text[1:len(text)\
    \ - 1]", '    return text.replace(/[aeiou]/g, "")', "    if text is \"\" then\n\
    \        return \"\"\n    else\n        return text[1:len(text)-1]", "    if text\
    \ = \"\" then return \"\"\n    return text[1:len(text) - 1]", '    return text.replace(/[aeiou]/g,
    "")', '    return text.replaceAll("[aeiou]", "")', "    if len(text) == 0:\n \
    \       return \"\"\n    else:\n        return text[0] + remove_vowels(text[1:])",
  "    if text ==\"\": return \"\"\n    vowels = \"aeiou\"\n    result = \"\"\n  \
    \  for char in text:\n        if char not in vowels:\n            result += char\n\
    \    return result", "    if text ==\"\":\n        return \"\"\n    else:\n  \
    \      return text[0:1] + remove_vowels(text[1:])", '    return text.replace(/[aeiou]/g,
    "")', '    return text.replaceAll("[aeiou]", "")', "    if text is \"\" then\n\
    \        return \"\"\n    else\n        return text[1:len(text)-1]", "    if len(text)\
    \ == 0:\n        return \"\"\n    else:\n        return text[0] + remove_vowels(text[1:])",
  "    if text = \"\" then\n        return \"\"\n    else\n        return text[1:len(text)\
    \ - 1]", "    if text is \"\" then\n        return \"\"\n    else\n        return\
    \ text[1:len(text)-1]", '    return text.replaceAll("[aeiou]", "")', "    text\
    \ = text.lower()\n    vowels = \"aeiou\"\n    for char in vowels:\n        text\
    \ = text.replace(char, \"\")\n    return text", '    return text.replaceAll("[aeiou]",
    "")', "    if text is \"\" then\n        return \"\"\n    else\n        return\
    \ text[1:len(text)-1]", '    return text.replace(/[aeiou]/g, "")', '    return
    text.replace(/[aeiou]/g, "")', '    return text.replace(/[aeiou]/g, "")', "  \
    \  if text = \"\" then\n        return \"\"\n    else\n        return text[1:len(text)\
    \ - 1]", '    return text.replaceAll("[aeiou]", "")', "    text = text.toLower()\n\
    \    vowels = \"aeiou\"\n    for i in range(len(text)):\n        if text[i] in\
    \ vowels:\n            text = text[:i] + text[i+1:]\n    return text", "    if\
    \ text is \"\" then\n        return \"\"\n    else\n        return text[1:len(text)-1]",
  '    return text.replaceAll("[aeiou]", "")', "    if text is \"\" then\n       \
    \ return \"\"\n    else\n        return text[1:len(text)-1]"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
