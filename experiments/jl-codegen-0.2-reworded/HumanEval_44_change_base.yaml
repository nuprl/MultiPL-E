name: HumanEval_44_change_base
language: jl
prompt: "\"\"\"Change numerical base of input number x to base.\n    return string\
  \ representation after the conversion.\n    base numbers are less than 10.\n   \
  \ >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\n \
  \   >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
  \ base::Int64)::String \n"
tests: "using Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
  \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
  \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
  \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
  \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"4\"\
  )\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7,\
  \ 8) == \"7\")\nend\n"
completions: ["    if base < 2 or base > 36:\n        raise ValueError(\"Base should\
    \ be between 2 and 36\")\n    if x < 0:\n        raise ValueError(\"Negative numbers\
    \ are not supported\")\n    if base == 10:\n        return str(x)\n    if base\
    \ == 2:\n        return \"\".join([\"1\" if i % 2 == 1 else \"0\" for i in range(x)])\n\
    \    if base == 16:\n        return \"\".join([\"0\" if i < 10 else \"1\" for\
    \ i in range(x)])\n    if base == 8:\n        return \"\".join([\"0\" if i < 10\
    \ else \"1\" for i in range(x)])\n    if base == 3:\n        return \"\".join([\"\
    1\" if i % 3 == 1 else \"0\" for i in range(x)])\n    if base == 5:\n        return\
    \ \"\".join([\"1\" if i % 5 == 1 else \"0\" for i in range(x)])\n    if base ==\
    \ 7:\n        return \"\".join([\"1\" if i % 7 == 1 else \"0\" for i in range(x)])\n\
    \    if base == 11:\n        return \"\".join([\"1\" if i % 11 == 1 else \"0\"\
    \ for i in range(x)])\n    if base == 13:\n        return \"\".join([\"1\" if\
    \ i % 13 == 1 else \"0\" for i in range(x)])\n    if base == 17:\n        return\
    \ \"\".join([\"1\" if i % 17 == 1 else \"0\" for i in range(x)])\n    if base\
    \ == 19:\n        return \"\".join([\"1\" if i % 19 == 1 else \"0\" for i in range(x)])\n\
    \    if base == 23:\n        return \"\".join([\"1\" if i % 23 == 1 else \"0\"\
    \ for i in range(x)])\n    if base == 29:\n        return \"\".join([\"1\" if\
    \ i % 29 == 1 else \"0\" for i in range(x)])\n    if base == 31:\n        return\
    \ \"\".join([\"1\" if i % 31 == 1 else \"0\" for i in range(x)])\n    if", '    return
    toString(x, base)', "    if base > 10:\n        return \"Error: base must be less\
    \ than 10\"\n    if x < 0:\n        return \"Error: negative numbers cannot be\
    \ converted\"\n    if base == 10:\n        return to_string(x)\n    if base ==\
    \ 2:\n        return to_string(x, 2)\n    if base == 3:\n        return to_string(x,\
    \ 3)\n    if base == 4:\n        return to_string(x, 4)\n    if base == 5:\n \
    \       return to_string(x, 5)\n    if base == 6:\n        return to_string(x,\
    \ 6)\n    if base == 7:\n        return to_string(x, 7)\n    if base == 8:\n \
    \       return to_string(x, 8)\n    if base == 9:\n        return to_string(x,\
    \ 9)\n    if base == 16:\n        return to_string(x, 16)\n    if base == 17:\n\
    \        return to_string(x, 17)\n    if base == 18:\n        return to_string(x,\
    \ 18)\n    if base == 19:\n        return to_string(x, 19)\n    if base == 20:\n\
    \        return to_string(x, 20)\n    if base == 21:\n        return to_string(x,\
    \ 21)\n    if base == 22:\n        return to_string(x, 22)\n    if base == 23:\n\
    \        return to_string(x, 23)\n    if base == 24:\n        return to_string(x,\
    \ 24)\n    if base == 25:\n        return to_string(x, 25)\n    if base == 26:\n\
    \        return to_string(x, 26)\n    if base == 27:\n        return to_string(x,\
    \ 27)\n    if base == 28:\n        return to_string(x, 28)\n    if base == 29:\n\
    \        return to_string(x, 29)\n    if base == 30:\n        return to_string(x,\
    \ 30)\n    if base == 31:\n        return to_string(x, 31)\n    if base == 32:\n\
    \        return to_string(x, 32)\n    if base == 33:\n", "    if base < 2 or base\
    \ > 36:\n        raise ValueError(\"Base should be between 2 and 36\")\n    if\
    \ x < 0:\n        raise ValueError(\"Negative numbers are not supported\")\n \
    \   if x == 0:\n        return \"0\"\n    result = \"\"\n    while x > 0:\n  \
    \      remainder = x % base\n        result = remainder + result\n        x =\
    \ x // base\n    return result", "    if base < 2 or base > 10:\n        raise\
    \ ValueError(\"base must be between 2 and 10\")\n    if x < 0:\n        raise\
    \ ValueError(\"negative numbers cannot be converted to base\")\n    if x == 0:\n\
    \        return \"0\"\n    if base == 10:\n        return str(x)\n    result =\
    \ \"\"\n    while x > 0:\n        remainder = x % base\n        result = str(remainder)\
    \ + result\n        x = x // base\n    return result", "    if base < 2 or base\
    \ > 36:\n        raise ValueError(\"Base must be between 2 and 36\")\n    if x\
    \ < 0:\n        raise ValueError(\"Negative numbers are not supported\")\n   \
    \ if x == 0:\n        return \"0\"\n    result = \"\"\n    while x > 0:\n    \
    \    remainder = x % base\n        result = str(remainder) + result\n        x\
    \ = x // base\n    return result", '    return toString(x, base)', '    return
    to_string(x, base)', "    if base < 2 or base > 36:\n        raise Exception(\"\
    Base must be between 2 and 36\")\n    if x < 0:\n        raise Exception(\"Negative\
    \ numbers are not supported\")\n    if base == 10:\n        return str(x)\n  \
    \  if base == 2:\n        return bin(x)[2:]\n    if base == 16:\n        return\
    \ hex(x)[2:]\n    if base == 8:\n        return oct(x)[2:]\n    return \"\"",
  '    return to_string(x, base)', "    if base < 2 or base > 10:\n        raise ValueError(\"\
    base should be 2~10\")\n    if x < 0:\n        raise ValueError(\"negative number\
    \ cannot be converted\")\n    if base == 10:\n        return str(x)\n    if base\
    \ == 2:\n        return bin(x)[2:].zfill(64)\n    if base == 3:\n        return\
    \ trin(x)[2:].zfill(64)\n    if base == 4:\n        return quat(x)[2:].zfill(64)\n\
    \    if base == 5:\n        return pent(x)[2:].zfill(64)\n    if base == 6:\n\
    \        return hex(x)[2:].zfill(64)\n    if base == 7:\n        return hept(x)[2:].zfill(64)\n\
    \    if base == 8:\n        return oct(x)[2:].zfill(64)\n    if base == 9:\n \
    \       return non(x)[2:].zfill(64)\n    if base == 10:\n        return dec(x)[2:].zfill(64)\n\
    \    return \"0\"", "    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base should be between 2 and 36\")\n    if x < 0:\n        raise ValueError(\"\
    Negative numbers are not supported\")\n    if base == 10:\n        return str(x)\n\
    \    if base == 2:\n        return bin(x)[2:]\n    if base == 16:\n        return\
    \ hex(x)[2:]\n    if base == 8:\n        return oct(x)[2:]\n    if base == 3:\n\
    \        return bin(x)[2:].rjust(8, \"0\")\n    if base == 5:\n        return\
    \ bin(x)[2:].rjust(5, \"0\")\n    if base == 7:\n        return bin(x)[2:].rjust(3,\
    \ \"0\")\n    if base == 11:\n        return bin(x)[2:].rjust(5, \"0\")\n    if\
    \ base == 13:\n        return bin(x)[2:].rjust(6, \"0\")\n    if base == 17:\n\
    \        return bin(x)[2:].rjust(7, \"0\")\n    if base == 19:\n        return\
    \ bin(x)[2:].rjust(8, \"0\")\n    if base == 23:\n        return bin(x)[2:].rjust(9,\
    \ \"0\")\n    if base == 29:\n        return bin(x)[2:].rjust(10, \"0\")\n   \
    \ if base == 31:\n        return bin(x)[2:].rjust(11, \"0\")\n    if base == 37:\n\
    \        return bin(x)[2:].rjust(12, \"0\")\n    if base == 41:\n        return\
    \ bin(x)[2:].rjust(13, \"0\")\n    if base == 43:\n        return bin(x)[2:].rjust(14,\
    \ \"0\")\n    if base == 47:\n        return bin(x)[2:].rjust(15, \"0\")\n   \
    \ if base == 53:\n        return bin(x)[2:].rjust(16, \"0\")\n    if base == 59:\n\
    \        return bin(x)[2:].rjust(17, \"0\")\n    if base == 61", '    return toString(x,
    base)', "    if base < 2 or base > 36:\n        raise ValueError(\"Base must be\
    \ between 2 and 36\")\n    if x < 0:\n        raise ValueError(\"Negative numbers\
    \ cannot be converted\")\n    if base == 10:\n        return str(x)\n    if base\
    \ == 2:\n        return \"\".join([\"1\" if i % 2 == 1 else \"0\" for i in range(x)])\n\
    \    if base == 16:\n        return \"\".join([\"0\" if i < 10 else \"1\" if i\
    \ > 9 else chr(i + 87) for i in range(x)])\n    if base == 8:\n        return\
    \ \"\".join([\"0\" if i < 2 else \"1\" if i > 1 else chr(i + 87) for i in range(x)])\n\
    \    if base == 3:\n        return \"\".join([\"1\" if i % 3 == 1 else \"0\" for\
    \ i in range(x)])\n    if base == 5:\n        return \"\".join([\"1\" if i % 5\
    \ == 1 else \"0\" for i in range(x)])\n    if base == 7:\n        return \"\"\
    .join([\"1\" if i % 7 == 1 else \"0\" for i in range(x)])\n    if base == 11:\n\
    \        return \"\".join([\"1\" if i % 11 == 1 else \"0\" for i in range(x)])\n\
    \    if base == 13:\n        return \"\".join([\"1\" if i % 13 == 1 else \"0\"\
    \ for i in range(x)])\n    if base == 17:\n        return \"\".join([\"1\" if\
    \ i % 17 == 1 else \"0\" for i in range(x)])\n    if base == 19:\n        return\
    \ \"\".join([\"1\" if i % 19 == 1 else \"0\" for i in range(x)])\n    if base\
    \ == 23:\n        return \"\".join([\"1\" if i % 23 == 1 else \"0\" for i in range(x)])\n\
    \    if base == 29:\n        return \"\".join([\"1\" if i % 29 == 1 else \"0\"\
    \ for i in range(x)])\n    if base == 31:\n        return \"\".join(", "    if\
    \ base < 2:\n        raise ValueError(\"Base must be greater than 1\")\n    if\
    \ base > 36:\n        raise ValueError(\"Base must be less than 36\")\n    if\
    \ x < 0:\n        raise ValueError(\"Negative numbers are not supported\")\n \
    \   if x == 0:\n        return \"0\"\n    if base == 10:\n        return str(x)\n\
    \    if base == 2:\n        return \"\".join([\"1\" if i % 2 == 0 else \"0\" for\
    \ i in range(len(str(x)))])\n    if base == 3:\n        return \"\".join([\"1\"\
    \ if i % 3 == 0 else \"0\" for i in range(len(str(x)))])\n    if base == 4:\n\
    \        return \"\".join([\"1\" if i % 4 == 0 else \"0\" for i in range(len(str(x)))])\n\
    \    if base == 5:\n        return \"\".join([\"1\" if i % 5 == 0 else \"0\" for\
    \ i in range(len(str(x)))])\n    if base == 6:\n        return \"\".join([\"1\"\
    \ if i % 6 == 0 else \"0\" for i in range(len(str(x)))])\n    if base == 7:\n\
    \        return \"\".join([\"1\" if i % 7 == 0 else \"0\" for i in range(len(str(x)))])\n\
    \    if base == 8:\n        return \"\".join([\"1\" if i % 8 == 0 else \"0\" for\
    \ i in range(len(str(x)))])\n    if base == 9:\n        return \"\".join([\"1\"\
    \ if i % 9 == 0 else \"0\" for i in range(len(str(x)))])\n    if base == 11:\n\
    \        return \"\".join([\"1\" if i % 11 == 0 else \"0\" for i in range(len(str(x)))])\n\
    \    if base == 13:\n        return \"\".join([\"1\" if i % 13 == 0 else \"0\"\
    \ for i in range(len(str(x)))])\n    if base == 14:\n        return \"\".join([\"\
    1\" if i % 14 == 0 else \"0\" for i in range(len(str(", "    if base < 2 or base\
    \ > 36:\n        raise ValueError(\"Base should be 2 to 36\")\n    if x < 0:\n\
    \        raise ValueError(\"Negative numbers are not supported\")\n    if base\
    \ == 2:\n        return to_binary(x)\n    elif base == 10:\n        return to_decimal(x)\n\
    \    else:\n        return to_decimal(to_decimal(x) * to_decimal(base))", "  \
    \  if base < 2 or base > 36:\n        raise Exception(\"Base should be between\
    \ 2 and 36\")\n    if x < 0:\n        raise Exception(\"Negative numbers are not\
    \ supported\")\n    if x == 0:\n        return \"0\"\n    result = \"\"\n    while\
    \ x > 0:\n        remainder = x % base\n        result = remainder + result\n\
    \        x = x // base\n    return result", "    if base < 2 or base > 10:\n \
    \       raise Exception(\"Base should be 2 to 10\")\n    if x < 0:\n        raise\
    \ Exception(\"Negative number is not supported\")\n    if base == 10:\n      \
    \  return str(x)\n    if base == 2:\n        return \"\".join([str(x // 2), \"\
    0\"])\n    if base == 3:\n        return \"\".join([str(x // 3), \"0\", \"0\"\
    ])\n    if base == 4:\n        return \"\".join([str(x // 4), \"0\", \"0\", \"\
    0\"])\n    if base == 5:\n        return \"\".join([str(x // 5), \"0\", \"0\"\
    , \"0\", \"0\"])\n    if base == 6:\n        return \"\".join([str(x // 6), \"\
    0\", \"0\", \"0\", \"0\", \"0\"])\n    if base == 7:\n        return \"\".join([str(x\
    \ // 7), \"0\", \"0\", \"0\", \"0\", \"0\", \"0\"])\n    if base == 8:\n     \
    \   return \"\".join([str(x // 8), \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"\
    0\"])\n    if base == 9:\n        return \"\".join([str(x // 9), \"0\", \"0\"\
    , \"0\", \"0\", \"0\", \"0\", \"0\", \"0\"])\n    if base == 10:\n        return\
    \ \"\".join([str(x // 10), \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"\
    0\"])\n    if base == 11:\n        return \"\".join([str(x // 11), \"0\", \"0\"\
    , \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\"])\n    if base == 12:\n    \
    \    return \"\".join([str(x // 12), \"0\", \"0\", \"0\", \"0\", \"0\", \"0\"\
    , \"0\", \"0\", \"0\", \"0\"])\n    if base == 13:\n        return \"\".join([str(x\
    \ // 13), \"0\", \"0\", \"0\", \"0\", \"0\", \"0", "    if base < 2:\n       \
    \ raise ValueError(\"Base must be greater than 1\")\n    if base == 2:\n     \
    \   return to_binary(x)\n    if base == 3:\n        return to_ternary(x)\n   \
    \ if base == 4:\n        return to_quaternary(x)\n    if base == 5:\n        return\
    \ to_quinary(x)\n    if base == 6:\n        return to_senary(x)\n    if base ==\
    \ 7:\n        return to_septenary(x)\n    if base == 8:\n        return to_octal(x)\n\
    \    if base == 9:\n        return to_nonary(x)\n    if base == 10:\n        return\
    \ to_decimal(x)\n    if base == 11:\n        return to_duodecimal(x)\n    if base\
    \ == 12:\n        return to_tetradecimal(x)\n    if base == 13:\n        return\
    \ to_pentadecimal(x)\n    if base == 14:\n        return to_hexadecimal(x)\n \
    \   if base == 15:\n        return to_heptadecimal(x)\n    if base == 16:\n  \
    \      return to_octal(x)\n    if base == 17:\n        return to_septenary(x)\n\
    \    if base == 18:\n        return to_septendecimal(x)\n    if base == 19:\n\
    \        return to_nonadecimal(x)\n    if base == 20:\n        return to_tridecimal(x)\n\
    \    if base == 21:\n        return to_tredecimal(x)\n    if base == 22:\n   \
    \     return to_quattordecimal(x)\n    if base == 23:\n        return to_quindecimal(x)\n\
    \    if base == 24:\n        return to_sexdecimal(x)\n    if base == 25:\n   \
    \     return to_quindecimal(x)\n    if base == 26:\n        return to_seduodecimal(x)\n\
    \    if base == 27:\n        return to_sedecimal(x)\n    if base == 28:\n    \
    \    return to_octodec", "    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if x < 0:\n        raise ValueError(\"Negative\
    \ numbers cannot be converted\")\n    if base == 10:\n        return str(x)\n\
    \    if base == 2:\n        return bin(x)[2:]\n    if base == 16:\n        return\
    \ hex(x)[2:]\n    if base == 8:\n        return oct(x)[2:]\n    if base == 3:\n\
    \        return bin(x)[2:].rjust(8, \"0\")\n    if base == 5:\n        return\
    \ bin(x)[2:].rjust(5, \"0\")\n    if base == 7:\n        return bin(x)[2:].rjust(3,\
    \ \"0\")\n    if base == 17:\n        return hex(x)[2:].rjust(4, \"0\")\n    if\
    \ base == 19:\n        return hex(x)[2:].rjust(6, \"0\")\n    if base == 23:\n\
    \        return hex(x)[2:].rjust(8, \"0\")\n    if base == 29:\n        return\
    \ hex(x)[2:].rjust(10, \"0\")\n    if base == 31:\n        return hex(x)[2:].rjust(5,\
    \ \"0\")\n    if base == 37:\n        return hex(x)[2:].rjust(11, \"0\")\n   \
    \ if base == 41:\n        return hex(x)[2:].rjust(13, \"0\")\n    if base == 43:\n\
    \        return hex(x)[2:].rjust(7, \"0\")\n    if base == 47:\n        return\
    \ hex(x)[2:].rjust(17, \"0\")\n    if base == 53:\n        return hex(x)[2:].rjust(19,\
    \ \"0\")\n    if base == 59:\n        return hex(x)[2:].rjust(11, \"0\")\n   \
    \ if base == 61:\n        return hex(x)[2:].rjust(13, \"0\")\n    if base == 67:\n\
    \        return hex(x)[2:].rjust(7, \"0\")\n    if base == 71", '    return to_string(x,
    base)', "    if base < 2 or base > 16:\n        raise Exception(\"Base must be\
    \ between 2 and 16\")\n    if x < 0:\n        raise Exception(\"Negative numbers\
    \ are not supported\")\n    if x == 0:\n        return \"0\"\n    if base == 2:\n\
    \        return to_binary(x)\n    if base == 3:\n        return to_ternary(x)\n\
    \    if base == 4:\n        return to_quaternary(x)\n    if base == 5:\n     \
    \   return to_quinary(x)\n    if base == 6:\n        return to_senary(x)\n   \
    \ if base == 7:\n        return to_septenary(x)\n    if base == 8:\n        return\
    \ to_octal(x)\n    if base == 9:\n        return to_nonary(x)\n    if base ==\
    \ 10:\n        return to_decimal(x)\n    if base == 11:\n        return to_duodecimal(x)\n\
    \    if base == 12:\n        return to_tredecimal(x)\n    if base == 13:\n   \
    \     return to_tetredecimal(x)\n    if base == 14:\n        return to_pentadecimal(x)\n\
    \    if base == 15:\n        return to_hexadecimal(x)\n    if base == 16:\n  \
    \      return to_heptadecimal(x)\n    return to_heptadecimal(x)", "    if base\
    \ > 10:\n        return \"ERROR: base must be less than 10\"\n    if x < 0:\n\
    \        return \"ERROR: negative number\"\n    if base == 10:\n        return\
    \ str(x)\n    if base == 2:\n        return str(x)\n    if base == 3:\n      \
    \  return str(x)\n    if base == 4:\n        return str(x)\n    if base == 5:\n\
    \        return str(x)\n    if base == 6:\n        return str(x)\n    if base\
    \ == 7:\n        return str(x)\n    if base == 8:\n        return str(x)\n   \
    \ if base == 9:\n        return str(x)\n    if base == 11:\n        return str(x)\n\
    \    if base == 12:\n        return str(x)\n    if base == 13:\n        return\
    \ str(x)\n    if base == 14:\n        return str(x)\n    if base == 15:\n    \
    \    return str(x)\n    if base == 16:\n        return str(x)\n    if base ==\
    \ 17:\n        return str(x)\n    if base == 18:\n        return str(x)\n    if\
    \ base == 19:\n        return str(x)\n    if base == 20:\n        return str(x)\n\
    \    if base == 21:\n        return str(x)\n    if base == 22:\n        return\
    \ str(x)\n    if base == 23:\n        return str(x)\n    if base == 24:\n    \
    \    return str(x)\n    if base == 25:\n        return str(x)\n    if base ==\
    \ 26:\n        return str(x)\n    if base == 27:\n        return str(x)\n    if\
    \ base == 28:\n        return str(x)\n    if base == 29:\n        return str(x)\n\
    \    if base == 30:\n        return str(x)\n    if base == 31:\n        return\
    \ str(x)\n    if base == 32:\n        return str(x)\n    if base == 33:\n    \
    \    return str(x)\n    if base == 34:\n        return str(x)\n    if base ==\
    \ 35:\n        return str(x)\n", "    if base < 2 or base > 10:\n        raise\
    \ ValueError(\"base should be between 2 and 10\")\n    if x < 0:\n        raise\
    \ ValueError(\"x should be non-negative\")\n    if x == 0:\n        return \"\
    0\"\n    result = \"\"\n    while x > 0:\n        remainder = x % base\n     \
    \   result = str(remainder) + result\n        x = x // base\n    return result",
  '    return to_string(x, base)', "    if base < 2 or base > 10:\n        raise Exception(\"\
    Base must be between 2 and 10\")\n    if x < 0:\n        raise Exception(\"Negative\
    \ numbers are not supported\")\n    if x == 0:\n        return \"0\"\n    if base\
    \ == 10:\n        return str(x)\n    if base == 2:\n        return \"\".join([\"\
    1\" if i % 2 == 0 else \"0\" for i in range(x)])\n    if base == 3:\n        return\
    \ \"\".join([\"1\" if i % 3 == 0 else \"0\" for i in range(x)])\n    if base ==\
    \ 4:\n        return \"\".join([\"1\" if i % 4 == 0 else \"0\" for i in range(x)])\n\
    \    if base == 5:\n        return \"\".join([\"1\" if i % 5 == 0 else \"0\" for\
    \ i in range(x)])\n    if base == 6:\n        return \"\".join([\"1\" if i % 6\
    \ == 0 else \"0\" for i in range(x)])\n    if base == 7:\n        return \"\"\
    .join([\"1\" if i % 7 == 0 else \"0\" for i in range(x)])\n    if base == 8:\n\
    \        return \"\".join([\"1\" if i % 8 == 0 else \"0\" for i in range(x)])\n\
    \    if base == 9:\n        return \"\".join([\"1\" if i % 9 == 0 else \"0\" for\
    \ i in range(x)])\n    if base == 11:\n        return \"\".join([\"1\" if i %\
    \ 11 == 0 else \"0\" for i in range(x)])\n    if base == 13:\n        return \"\
    \".join([\"1\" if i % 13 == 0 else \"0\" for i in range(x)])\n    if base == 14:\n\
    \        return \"\".join([\"1\" if i % 14 == 0 else \"0\" for i in range(x)])\n\
    \    if base == 15:\n        return \"\".join([\"1\" if i % 15 == 0 else \"0\"\
    \ for i in range(x)])\n    if base == 16:\n        return \"\".join([\"1\" if\
    \ i % 16 == 0", "    if base < 2 or base > 36:\n        raise Exception(\"Base\
    \ must be between 2 and 36\")\n    if x < 0:\n        raise Exception(\"Negative\
    \ numbers are not supported\")\n    if base == 10:\n        return str(x)\n  \
    \  if base == 2:\n        return bin(x)[2:].zfill(64)\n    if base == 16:\n  \
    \      return hex(x)[2:].zfill(64)\n    if base == 8:\n        return oct(x)[2:].zfill(64)\n\
    \    if base == 3:\n        return bin(x)[2:].zfill(64)\n    if base == 5:\n \
    \       return bin(x)[2:].zfill(64)\n    if base == 7:\n        return bin(x)[2:].zfill(64)\n\
    \    if base == 11:\n        return bin(x)[2:].zfill(64)\n    if base == 13:\n\
    \        return bin(x)[2:].zfill(64)\n    if base == 17:\n        return bin(x)[2:].zfill(64)\n\
    \    if base == 19:\n        return bin(x)[2:].zfill(64)\n    if base == 23:\n\
    \        return bin(x)[2:].zfill(64)\n    if base == 29:\n        return bin(x)[2:].zfill(64)\n\
    \    if base == 31:\n        return bin(x)[2:].zfill(64)\n    if base == 37:\n\
    \        return bin(x)[2:].zfill(64)\n    if base == 41:\n        return bin(x)[2:].zfill(64)\n\
    \    if base == 43:\n        return bin(x)[2:].zfill(64)\n    if base == 47:\n\
    \        return bin(x)[2:].zfill(64)\n    if base == 53:\n        return bin(x)[2:].zfill(64)\n\
    \    if base == 59:\n        return bin(x)[2:].zfill(64)\n    if base == 61:\n\
    \        return bin(x)[2:].zfill(64)\n    if base == 67:\n        return bin(x)[2:",
  "    if base < 2 or base > 16:\n        raise Exception(\"Base must be between 2\
    \ and 16\")\n    if x < 0:\n        raise Exception(\"Negative numbers not supported\"\
    )\n    if x == 0:\n        return \"0\"\n    if base == 2:\n        return to_binary(x)\n\
    \    if base == 10:\n        return to_decimal(x)\n    if base == 16:\n      \
    \  return to_hex(x)", '    return toString(x, base)', "    if base < 2 or base\
    \ > 36:\n        raise Exception(\"Base must be between 2 and 36\")\n    if x\
    \ < 0:\n        raise Exception(\"Negative numbers are not supported\")\n    if\
    \ base == 10:\n        return str(x)\n    if base == 2:\n        return bin(x)[2:]\n\
    \    if base == 16:\n        return hex(x)[2:]\n    if base == 8:\n        return\
    \ oct(x)[2:]\n    if base == 3:\n        return bin(x)[2:]\n    if base == 5:\n\
    \        return bin(x)[2:]\n    if base == 7:\n        return bin(x)[2:]\n   \
    \ if base == 9:\n        return bin(x)[2:]\n    if base == 11:\n        return\
    \ bin(x)[2:]\n    if base == 13:\n        return bin(x)[2:]\n    if base == 14:\n\
    \        return bin(x)[2:]\n    if base == 15:\n        return bin(x)[2:]\n  \
    \  if base == 17:\n        return bin(x)[2:]\n    if base == 18:\n        return\
    \ bin(x)[2:]\n    if base == 19:\n        return bin(x)[2:]\n    if base == 20:\n\
    \        return bin(x)[2:]\n    if base == 21:\n        return bin(x)[2:]\n  \
    \  if base == 22:\n        return bin(x)[2:]\n    if base == 23:\n        return\
    \ bin(x)[2:]\n    if base == 24:\n        return bin(x)[2:]\n    if base == 25:\n\
    \        return bin(x)[2:]\n    if base == 26:\n        return bin(x)[2:]\n  \
    \  if base == 27:\n        return bin(x)[2:]\n    if base == 28:\n        return\
    \ bin(x)[2:]\n    if base == 29:\n        return bin(x)[2:]\n    if base == 30:\n\
    \        return bin(x)[2:]\n    if base == 31:\n        return bin(x)[2:]\n  \
    \  if base == 32:\n        return bin(x)[2:]\n    if base == 33:\n        return\
    \ bin(x)[2:]\n    if base == 34:\n", "    if base < 2 or base > 36:\n        raise\
    \ ValueError(\"Base must be between 2 and 36\")\n    if x < 0:\n        raise\
    \ ValueError(\"Negative numbers cannot be converted\")\n    if x == 0:\n     \
    \   return \"0\"\n    if base == 10:\n        return str(x)\n    if base == 2:\n\
    \        return \"\".join([\"1\" if i % 2 == 1 else \"0\" for i in range(len(str(x)))])\n\
    \    if base == 16:\n        return \"\".join([\"0123456789abcdef\"[i] for i in\
    \ range(len(str(x)))])\n    if base == 8:\n        return \"\".join([\"0000\"\
    \ + str(i) for i in range(len(str(x)))])\n    if base == 3:\n        return \"\
    \".join([\"1\" if i % 3 == 1 else \"0\" for i in range(len(str(x)))])\n    if\
    \ base == 5:\n        return \"\".join([\"1\" if i % 5 == 1 else \"0\" for i in\
    \ range(len(str(x)))])\n    if base == 7:\n        return \"\".join([\"1\" if\
    \ i % 7 == 1 else \"0\" for i in range(len(str(x)))])\n    if base == 11:\n  \
    \      return \"\".join([\"1\" if i % 11 == 1 else \"0\" for i in range(len(str(x)))])\n\
    \    if base == 13:\n        return \"\".join([\"1\" if i % 13 == 1 else \"0\"\
    \ for i in range(len(str(x)))])\n    if base == 17:\n        return \"\".join([\"\
    1\" if i % 17 == 1 else \"0\" for i in range(len(str(x)))])\n    if base == 19:\n\
    \        return \"\".join([\"1\" if i % 19 == 1 else \"0\" for i in range(len(str(x)))])\n\
    \    if base == 23:\n        return \"\".join([\"1\" if i % 23 == 1 else \"0\"\
    \ for i in range(len(str(x)))])\n    if base == 29:\n        return \"\".join([\"\
    1\" if i", "    if base > 10:\n        return \"Error: base must be less than\
    \ 10.\"\n    if x == 0:\n        return \"0\"\n    if base == 10:\n        return\
    \ str(x)\n    if base == 2:\n        return \"\".join([\"1\" if i % 2 == 0 else\
    \ \"0\" for i in range(x)])\n    if base == 3:\n        return \"\".join([\"1\"\
    \ if i % 3 == 0 else \"0\" for i in range(x)])\n    if base == 4:\n        return\
    \ \"\".join([\"1\" if i % 4 == 0 else \"0\" for i in range(x)])\n    if base ==\
    \ 5:\n        return \"\".join([\"1\" if i % 5 == 0 else \"0\" for i in range(x)])\n\
    \    if base == 6:\n        return \"\".join([\"1\" if i % 6 == 0 else \"0\" for\
    \ i in range(x)])\n    if base == 7:\n        return \"\".join([\"1\" if i % 7\
    \ == 0 else \"0\" for i in range(x)])\n    if base == 8:\n        return \"\"\
    .join([\"1\" if i % 8 == 0 else \"0\" for i in range(x)])\n    if base == 9:\n\
    \        return \"\".join([\"1\" if i % 9 == 0 else \"0\" for i in range(x)])\n\
    \    if base == 11:\n        return \"\".join([\"1\" if i % 11 == 0 else \"0\"\
    \ for i in range(x)])\n    if base == 12:\n        return \"\".join([\"1\" if\
    \ i % 12 == 0 else \"0\" for i in range(x)])\n    if base == 13:\n        return\
    \ \"\".join([\"1\" if i % 13 == 0 else \"0\" for i in range(x)])\n    if base\
    \ == 14:\n        return \"\".join([\"1\" if i % 14 == 0 else \"0\" for i in range(x)])\n\
    \    if base == 15:\n        return \"\".join([\"1\" if i % 15 == 0 else \"0\"\
    \ for i in range(x)])\n    if base == 16:\n        return \"", '    return toString(x,
    base)', '    return toString(x, base)', "    if base < 2 or base > 36:\n     \
    \   raise Exception(\"Base should be between 2 and 36\")\n    if x < 0:\n    \
    \    return \"-\" + change_base(-x, base)\n    if x == 0:\n        return \"0\"\
    \n    result = \"\"\n    while x > 0:\n        remainder = x % base\n        result\
    \ = remainder + result\n        x = x // base\n    return result", "    if base\
    \ < 2 or base > 10:\n        raise Exception(\"Base must be between 2 and 10\"\
    )\n    if x < 0:\n        raise Exception(\"Negative numbers are not supported\"\
    )\n    if x == 0:\n        return \"0\"\n    result = \"\"\n    while x > 0:\n\
    \        remainder = x % base\n        result = remainder + result\n        x\
    \ = x // base\n    return result", '    return toString(x, base)', '    return
    to_string(x, base)', "    if base < 2 or base > 10:\n        raise Exception(\"\
    Base must be between 2 and 10\")\n    if x < 0:\n        raise Exception(\"Negative\
    \ numbers are not supported\")\n    if x == 0:\n        return \"0\"\n    result\
    \ = \"\"\n    while x > 0:\n        remainder = x % base\n        result = remainder\
    \ + result\n        x = x // base\n    return result", "    if base < 2 or base\
    \ > 36:\n        raise ValueError(\"base must be between 2 and 36\")\n    if x\
    \ < 0:\n        raise ValueError(\"negative numbers cannot be converted to base\"\
    )\n    if base == 10:\n        return str(x)\n    result = \"\"\n    while x >\
    \ 0:\n        remainder = x % base\n        result = str(remainder) + result\n\
    \        x = x // base\n    return \"0\" * (len(result) - 1) + result", "    if\
    \ base < 2 or base > 10:\n        raise Exception(\"Base must be between 2 and\
    \ 10\")\n    if x < 0:\n        raise Exception(\"Negative numbers are not supported\"\
    )\n    if x == 0:\n        return \"0\"\n    result = \"\"\n    while x > 0:\n\
    \        remainder = x % base\n        result = remainder + result\n        x\
    \ = x // base\n    return result", "    if base > 10:\n        return \"Error:\
    \ base must be less than 10\"\n    if base == 10:\n        return to_string(x)\n\
    \    if x < 0:\n        return \"Error: negative numbers cannot be converted\"\
    \n    if x == 0:\n        return \"0\"\n    result = \"\"\n    while x > 0:\n\
    \        remainder = x % base\n        result = to_string(remainder) + result\n\
    \        x = x // base\n    return result", '    return to_string(x, base)', '    return
    toString(x)', "    if base < 2 or base > 36:\n        raise ValueError(\"Base\
    \ must be between 2 and 36\")\n    if x < 0:\n        raise ValueError(\"Negative\
    \ numbers cannot be converted\")\n    if base == 10:\n        return str(x)\n\
    \    result = \"\"\n    while x > 0:\n        remainder = x % base\n        result\
    \ = str(remainder) + result\n        x = x // base\n    return \"0\" * (len(result)\
    \ - len(str(base))) + result", "    if base < 2 or base > 36:\n        raise Exception(\"\
    Base must be between 2 and 36\")\n    if x < 0:\n        raise Exception(\"Negative\
    \ numbers are not supported\")\n    if base == 10:\n        return to_string(x)\n\
    \    if base == 2:\n        return to_string(x, 2)\n    if base == 16:\n     \
    \   return to_string(x, 16)\n    if base == 8:\n        return to_string(x, 8)\n\
    \    if base == 3:\n        return to_string(x, 3)\n    if base == 5:\n      \
    \  return to_string(x, 5)\n    if base == 7:\n        return to_string(x, 7)\n\
    \    if base == 11:\n        return to_string(x, 11)\n    if base == 13:\n   \
    \     return to_string(x, 13)\n    if base == 17:\n        return to_string(x,\
    \ 17)\n    if base == 19:\n        return to_string(x, 19)\n    if base == 23:\n\
    \        return to_string(x, 23)\n    if base == 29:\n        return to_string(x,\
    \ 29)\n    if base == 31:\n        return to_string(x, 31)\n    if base == 37:\n\
    \        return to_string(x, 37)\n    if base == 41:\n        return to_string(x,\
    \ 41)\n    if base == 43:\n        return to_string(x, 43)\n    if base == 47:\n\
    \        return to_string(x, 47)\n    if base == 53:\n        return to_string(x,\
    \ 53)\n    if base == 59:\n        return to_string(x, 59)\n    if base == 61:\n\
    \        return to_string(x, 61)\n    if base == 67:\n        return to_string(x,\
    \ 67)\n    if base == 71:\n        return to_string(x, 71)\n    if base == 73:\n\
    \        return to_string(x, 73)\n    if base == 79:\n        return to_string(x,\
    \ 79)\n    if base == 83:\n        return to_string(x, 83)\n    if base", "  \
    \  if base < 2 or base > 36:\n        raise ValueError(\"base must be between\
    \ 2 and 36\")\n    if x < 0:\n        raise ValueError(\"negative numbers cannot\
    \ be converted\")\n    if base == 10:\n        return str(x)\n    result = \"\"\
    \n    while x > 0:\n        remainder = x % base\n        result = str(remainder)\
    \ + result\n        x = x // base\n    return \"0\" * (len(result) - len(str(result.rstrip(\"\
    0\")))) + result", '    return toString(x, base)', "    if base < 2 or base >\
    \ 10:\n        raise ValueError(\"base must be between 2 and 10\")\n    if x <\
    \ 0:\n        raise ValueError(\"x must be a positive integer\")\n    if base\
    \ == 10:\n        return str(x)\n    result = \"\"\n    while x > 0:\n       \
    \ remainder = x % base\n        result = str(remainder) + result\n        x =\
    \ x // base\n    return result", '    return to_string(x, base)', "    if base\
    \ < 2 or base > 10:\n        raise Exception(\"Base must be between 2 and 10\"\
    )\n    if x < 0:\n        raise Exception(\"Negative numbers are not supported\"\
    )\n    if base == 10:\n        return str(x)\n    if base == 2:\n        return\
    \ str(x)\n    if base == 3:\n        return str(x)\n    if base == 4:\n      \
    \  return str(x)\n    if base == 5:\n        return str(x)\n    if base == 6:\n\
    \        return str(x)\n    if base == 7:\n        return str(x)\n    if base\
    \ == 8:\n        return str(x)\n    if base == 9:\n        return str(x)\n   \
    \ if base == 11:\n        return str(x)\n    if base == 12:\n        return str(x)\n\
    \    if base == 13:\n        return str(x)\n    if base == 14:\n        return\
    \ str(x)\n    if base == 15:\n        return str(x)\n    if base == 16:\n    \
    \    return str(x)\n    if base == 17:\n        return str(x)\n    if base ==\
    \ 18:\n        return str(x)\n    if base == 19:\n        return str(x)\n    if\
    \ base == 20:\n        return str(x)\n    if base == 21:\n        return str(x)\n\
    \    if base == 22:\n        return str(x)\n    if base == 23:\n        return\
    \ str(x)\n    if base == 24:\n        return str(x)\n    if base == 25:\n    \
    \    return str(x)\n    if base == 26:\n        return str(x)\n    if base ==\
    \ 27:\n        return str(x)\n    if base == 28:\n        return str(x)\n    if\
    \ base == 29:\n        return str(x)\n    if base == 30:\n        return str(x)\n\
    \    if base == 31:\n        return str(x)\n    if base == 32:\n        return\
    \ str(x)\n    if base == 33:\n        return str(x)\n    if base == 34:\n    \
    \    return str(x)\n    if base == 35:\n", '    return toString(x, base)', " \
    \   if base < 2 or base > 36:\n        raise Exception(\"Base must be between\
    \ 2 and 36\")\n    if x < 0:\n        raise Exception(\"Negative numbers are not\
    \ supported\")\n    if base == 10:\n        return str(x)\n    if base == 2:\n\
    \        return \"\".join([\"1\" if i % 2 == 0 else \"0\" for i in range(len(str(x)))])\n\
    \    if base == 16:\n        return \"\".join([\"0\" if i < 2 else \"1\" if i\
    \ % 2 == 0 else \"2\" for i in range(len(str(x)))])\n    if base == 8:\n     \
    \   return \"\".join([\"0\" if i < 3 else \"1\" if i % 3 == 0 else \"2\" for i\
    \ in range(len(str(x)))])\n    if base == 3:\n        return \"\".join([\"1\"\
    \ if i % 3 == 0 else \"0\" for i in range(len(str(x)))])\n    if base == 5:\n\
    \        return \"\".join([\"1\" if i % 5 == 0 else \"0\" for i in range(len(str(x)))])\n\
    \    if base == 7:\n        return \"\".join([\"1\" if i % 7 == 0 else \"0\" for\
    \ i in range(len(str(x)))])\n    if base == 11:\n        return \"\".join([\"\
    1\" if i % 11 == 0 else \"0\" for i in range(len(str(x)))])\n    if base == 13:\n\
    \        return \"\".join([\"1\" if i % 13 == 0 else \"0\" for i in range(len(str(x)))])\n\
    \    if base == 17:\n        return \"\".join([\"1\" if i % 17 == 0 else \"0\"\
    \ for i in range(len(str(x)))])\n    if base == 19:\n        return \"\".join([\"\
    1\" if i % 19 == 0 else \"0\" for i in range(len(str(x)))])\n    if base == 23:\n\
    \        return \"\".join([\"1\" if i % 23 == 0 else \"0\" for i in range(len(str(x)))])\n\
    \    if base == 29:\n        return \"", '    return toString(x, base)', "   \
    \ return String(x)\n    \ndef change_base_str(x::String, base::Int64)::String\
    \ \n    return String(x)", "    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if x < 0:\n        raise ValueError(\"Negative\
    \ numbers are not supported\")\n    if base == 10:\n        return str(x)\n  \
    \  result = \"\"\n    while x > 0:\n        remainder = x % base\n        result\
    \ = str(remainder) + result\n        x = x // base\n    return \"0\" * (len(result)\
    \ - len(str(base))) + result", "    if base < 2 or base > 36:\n        raise ValueError(\"\
    base should be in 2..36\")\n    if x < 0:\n        raise ValueError(\"x should\
    \ be non-negative\")\n    if x == 0:\n        return \"0\"\n    if base == 10:\n\
    \        return str(x)\n    if base == 2:\n        return \"\".join([\"1\" if\
    \ i % 2 == 1 else \"0\" for i in range(x)])\n    if base == 16:\n        return\
    \ \"\".join([\"%x\" % i for i in range(x)])\n    if base == 8:\n        return\
    \ \"\".join([\"%o\" % i for i in range(x)])\n    if base == 3:\n        return\
    \ \"\".join([\"%o\" % i for i in range(x)])\n    if base == 5:\n        return\
    \ \"\".join([\"%o\" % i for i in range(x)])\n    if base == 7:\n        return\
    \ \"\".join([\"%o\" % i for i in range(x)])\n    if base == 11:\n        return\
    \ \"\".join([\"%o\" % i for i in range(x)])\n    if base == 13:\n        return\
    \ \"\".join([\"%o\" % i for i in range(x)])\n    if base == 17:\n        return\
    \ \"\".join([\"%o\" % i for i in range(x)])\n    if base == 19:\n        return\
    \ \"\".join([\"%o\" % i for i in range(x)])\n    if base == 23:\n        return\
    \ \"\".join([\"%o\" % i for i in range(x)])\n    if base == 29:\n        return\
    \ \"\".join([\"%o\" % i for i in range(x)])\n    if base == 31:\n        return\
    \ \"\".join([\"%o\" % i for i in range(x)])\n    if base == 37:\n        return\
    \ \"\".join([\"%o\" % i for i in range(x)])\n    if base == 41:\n        return\
    \ \"\".join([\"%o\" % i for i in range(x)])\n    if base == 43:\n        return\
    \ \"\".join(", '    return toString(x, base)', "    if base < 2 or base > 16:\n\
    \        raise Exception(\"Base must be between 2 and 16\")\n    if x < 0:\n \
    \       raise Exception(\"Negative numbers are not supported\")\n    if base ==\
    \ 16:\n        return hex(x)\n    if base == 2:\n        return bin(x)[2:]\n \
    \   if base == 8:\n        return oct(x)\n    if base == 10:\n        return str(x)\n\
    \    \ndef main():\n    print(change_base(8, 2))\n    print(change_base(8, 3))\n\
    \    print(change_base(8, 4))\n    print(change_base(8, 5))\n    print(change_base(8,\
    \ 6))\n    print(change_base(8, 7))\n    print(change_base(8, 8))\n    print(change_base(8,\
    \ 9))\n    print(change_base(8, 10))\n    print(change_base(8, 11))\n    print(change_base(8,\
    \ 12))\n    print(change_base(8, 13))\n    print(change_base(8, 14))\n    print(change_base(8,\
    \ 15))\n    print(change_base(8, 16))\n    print(change_base(8, 17))\n    print(change_base(8,\
    \ 18))\n    print(change_base(8, 19))\n    print(change_base(8, 20))\n    print(change_base(8,\
    \ 21))\n    print(change_base(8, 22))\n    print(change_base(8, 23))\n    print(change_base(8,\
    \ 24))\n    print(change_base(8, 25))\n    print(change_base(8, 26))\n    print(change_base(8,\
    \ 27))\n    print(change_base(8, 28))\n    print(change_base(8, 29))\n    print(change_base(8,\
    \ 30))\n    print(change_base(8, 31))\n    print(change_base(8, 32))\n    print(change_base(8,\
    \ 33))\n    print(change_base(8, 34))\n    print(change_base(8,", "    if base\
    \ < 2 or base > 10:\n        raise Exception(\"Base must be between 2 and 10\"\
    )\n    if x < 0:\n        raise Exception(\"Negative numbers are not supported\"\
    )\n    if x == 0:\n        return \"0\"\n    if base == 10:\n        return str(x)\n\
    \    if base == 2:\n        return \"\".join([\"1\" if i % 2 == 1 else \"0\" for\
    \ i in range(x)])\n    if base == 3:\n        return \"\".join([\"1\" if i % 3\
    \ == 1 else \"0\" for i in range(x)])\n    if base == 4:\n        return \"\"\
    .join([\"1\" if i % 4 == 1 else \"0\" for i in range(x)])\n    if base == 5:\n\
    \        return \"\".join([\"1\" if i % 5 == 1 else \"0\" for i in range(x)])\n\
    \    if base == 6:\n        return \"\".join([\"1\" if i % 6 == 1 else \"0\" for\
    \ i in range(x)])\n    if base == 7:\n        return \"\".join([\"1\" if i % 7\
    \ == 1 else \"0\" for i in range(x)])\n    if base == 8:\n        return \"\"\
    .join([\"1\" if i % 8 == 1 else \"0\" for i in range(x)])\n    if base == 9:\n\
    \        return \"\".join([\"1\" if i % 9 == 1 else \"0\" for i in range(x)])\n\
    \    if base == 11:\n        return \"\".join([\"1\" if i % 11 == 1 else \"0\"\
    \ for i in range(x)])\n    if base == 13:\n        return \"\".join([\"1\" if\
    \ i % 13 == 1 else \"0\" for i in range(x)])\n    if base == 14:\n        return\
    \ \"\".join([\"1\" if i % 14 == 1 else \"0\" for i in range(x)])\n    if base\
    \ == 15:\n        return \"\".join([\"1\" if i % 15 == 1 else \"0\" for i in range(x)])\n\
    \    if base == 16:\n        return \"\".join([\"1\" if i % 16 == 1", '    return
    to_string(x, base)', '    return toString(x, base)', '    return toString(x, base)',
  "    if base < 2 or base > 36:\n        raise ValueError(\"Base must be between\
    \ 2 and 36\")\n    if x < 0:\n        raise ValueError(\"Negative numbers cannot\
    \ be converted to base\")\n    if base == 10:\n        return str(x)\n    result\
    \ = \"\"\n    while x > 0:\n        remainder = x % base\n        result = str(remainder)\
    \ + result\n        x = x // base\n    return \"0\" * (len(result) - 1) + result",
  "    if base < 2 or base > 10:\n        raise Exception(\"Base should be 2~10\"\
    )\n    if x < 0:\n        raise Exception(\"Negative number can't be converted\"\
    )\n    if base == 10:\n        return str(x)\n    if base == 2:\n        return\
    \ bin(x)[2:]\n    if base == 3:\n        return str(x)\n    if base == 4:\n  \
    \      return bin(x)[2:]\n    if base == 5:\n        return str(x)\n    if base\
    \ == 6:\n        return bin(x)[2:]\n    if base == 7:\n        return str(x)\n\
    \    if base == 8:\n        return bin(x)[2:]\n    if base == 9:\n        return\
    \ str(x)\n    if base == 11:\n        return bin(x)[2:]\n    if base == 12:\n\
    \        return str(x)\n    if base == 13:\n        return bin(x)[2:]\n    if\
    \ base == 14:\n        return str(x)\n    if base == 15:\n        return bin(x)[2:]\n\
    \    if base == 16:\n        return str(x)\n    if base == 17:\n        return\
    \ bin(x)[2:]\n    if base == 18:\n        return str(x)\n    if base == 19:\n\
    \        return bin(x)[2:]\n    if base == 20:\n        return str(x)\n    if\
    \ base == 21:\n        return bin(x)[2:]\n    if base == 22:\n        return str(x)\n\
    \    if base == 23:\n        return bin(x)[2:]\n    if base == 24:\n        return\
    \ str(x)\n    if base == 25:\n        return bin(x)[2:]\n    if base == 26:\n\
    \        return str(x)\n    if base == 27:\n        return bin(x)[2:]\n    if\
    \ base == 28:\n        return str(x)\n    if base == 29:\n        return bin(x)[2:]\n\
    \    if base == 30:\n        return str(x)\n    if base == 31:\n        return\
    \ bin(x)[2:]\n    if base == 32:\n        return str(x)\n    if base == 33", '    return
    to_string(x, base)', "    if base < 2 or base > 10:\n        raise Exception(\"\
    Invalid base\")\n    if x == 0:\n        return \"0\"\n    if base == 10:\n  \
    \      return to_string(x)\n    if x < 0:\n        raise Exception(\"Negative\
    \ numbers are not supported\")\n    if x < base:\n        return to_string(x)\n\
    \    result = \"\"\n    while x > 0:\n        remainder = x % base\n        result\
    \ = to_string(remainder) + result\n        x = x // base\n    return result",
  "    if base < 2 or base > 10:\n        raise Exception(\"Base must be between 2\
    \ and 10\")\n    if x < 0:\n        raise Exception(\"Negative numbers are not\
    \ supported\")\n    if x == 0:\n        return \"0\"\n    result = \"\"\n    while\
    \ x > 0:\n        remainder = x % base\n        result = remainder + result\n\
    \        x = x // base\n    return result", "    if base < 2 or base > 36:\n \
    \       raise ValueError(\"Base should be between 2 and 36\")\n    if x < 0:\n\
    \        raise ValueError(\"Negative numbers are not supported\")\n    if base\
    \ == 10:\n        return str(x)\n    if base == 2:\n        return \"\".join([\"\
    1\" if i % 2 == 0 else \"0\" for i in range(x)])\n    if base == 16:\n       \
    \ return \"\".join([\"0\" if i < 10 else \"1\" for i in range(x)])\n    if base\
    \ == 8:\n        return \"\".join([\"0\" if i < 2 else \"1\" for i in range(x)])\n\
    \    if base == 3:\n        return \"\".join([\"1\" if i % 3 == 0 else \"0\" for\
    \ i in range(x)])\n    if base == 5:\n        return \"\".join([\"1\" if i % 5\
    \ == 0 else \"0\" for i in range(x)])\n    if base == 7:\n        return \"\"\
    .join([\"1\" if i % 7 == 0 else \"0\" for i in range(x)])\n    if base == 11:\n\
    \        return \"\".join([\"1\" if i % 11 == 0 else \"0\" for i in range(x)])\n\
    \    if base == 13:\n        return \"\".join([\"1\" if i % 13 == 0 else \"0\"\
    \ for i in range(x)])\n    if base == 17:\n        return \"\".join([\"1\" if\
    \ i % 17 == 0 else \"0\" for i in range(x)])\n    if base == 19:\n        return\
    \ \"\".join([\"1\" if i % 19 == 0 else \"0\" for i in range(x)])\n    if base\
    \ == 23:\n        return \"\".join([\"1\" if i % 23 == 0 else \"0\" for i in range(x)])\n\
    \    if base == 29:\n        return \"\".join([\"1\" if i % 29 == 0 else \"0\"\
    \ for i in range(x)])\n    if base == 31:\n        return \"\".join([\"1\" if\
    \ i % 31 == 0 else \"0\" for i in range(x)])\n    if", '    return String.fromCharCode(x
    % base) + change_base(x / base, base)', "    if base < 2 or base > 36:\n     \
    \   raise Exception(\"Base must be between 2 and 36\")\n    if x < 0:\n      \
    \  raise Exception(\"Negative numbers are not supported\")\n    if base == 10:\n\
    \        return str(x)\n    if base == 2:\n        return \"\".join([\"1\" if\
    \ i % 2 == 0 else \"0\" for i in range(len(str(x)))])\n    if base == 16:\n  \
    \      return \"\".join([\"1\" if i % 2 == 0 else \"0\" for i in range(len(str(x)))])\n\
    \    if base == 8:\n        return \"\".join([\"1\" if i % 3 == 0 else \"0\" for\
    \ i in range(len(str(x)))])\n    if base == 3:\n        return \"\".join([\"1\"\
    \ if i % 3 == 0 else \"0\" for i in range(len(str(x)))])\n    if base == 5:\n\
    \        return \"\".join([\"1\" if i % 5 == 0 else \"0\" for i in range(len(str(x)))])\n\
    \    if base == 7:\n        return \"\".join([\"1\" if i % 7 == 0 else \"0\" for\
    \ i in range(len(str(x)))])\n    if base == 11:\n        return \"\".join([\"\
    1\" if i % 11 == 0 else \"0\" for i in range(len(str(x)))])\n    if base == 13:\n\
    \        return \"\".join([\"1\" if i % 13 == 0 else \"0\" for i in range(len(str(x)))])\n\
    \    if base == 17:\n        return \"\".join([\"1\" if i % 17 == 0 else \"0\"\
    \ for i in range(len(str(x)))])\n    if base == 19:\n        return \"\".join([\"\
    1\" if i % 19 == 0 else \"0\" for i in range(len(str(x)))])\n    if base == 23:\n\
    \        return \"\".join([\"1\" if i % 23 == 0 else \"0\" for i in range(len(str(x)))])\n\
    \    if base == 29:\n        return \"\".join([\"1\" if i % 29 == 0 else \"0\"",
  "    if base < 2 or base > 16:\n        raise Exception(\"Base must be between 2\
    \ and 16\")\n    if x < 0:\n        raise Exception(\"Negative numbers are not\
    \ supported\")\n    if base == 16:\n        return hex(x)\n    if base == 2:\n\
    \        return bin(x)[2:]\n    if base == 8:\n        return oct(x)\n    if base\
    \ == 10:\n        return str(x)\n    \n    result = \"\"\n    while x > 0:\n \
    \       result = str(x % base) + result\n        x = x // base\n    return result",
  "    if base < 2 or base > 36:\n        raise ValueError(\"base should be 2 to 36\"\
    )\n    if x < 0:\n        raise ValueError(\"x should be non-negative\")\n   \
    \ if base == 10:\n        return str(x)\n    if base == 2:\n        return \"\"\
    .join([\"1\" if i % 2 == 1 else \"0\" for i in range(x)])\n    if base == 16:\n\
    \        return \"\".join([\"0123456789abcdef\"[i] for i in range(x)])\n    if\
    \ base == 8:\n        return \"\".join([\"01234567\"[i] for i in range(x)])\n\
    \    if base == 3:\n        return \"\".join([\"11\" if i % 3 == 2 else \"1\"\
    \ for i in range(x)])\n    if base == 5:\n        return \"\".join([\"11\" if\
    \ i % 5 == 4 else \"1\" for i in range(x)])\n    if base == 7:\n        return\
    \ \"\".join([\"11\" if i % 7 == 6 else \"1\" for i in range(x)])\n    if base\
    \ == 11:\n        return \"\".join([\"11\" if i % 11 == 10 else \"1\" for i in\
    \ range(x)])\n    if base == 13:\n        return \"\".join([\"11\" if i % 13 ==\
    \ 12 else \"1\" for i in range(x)])\n    if base == 17:\n        return \"\".join([\"\
    11\" if i % 17 == 16 else \"1\" for i in range(x)])\n    if base == 19:\n    \
    \    return \"\".join([\"11\" if i % 19 == 18 else \"1\" for i in range(x)])\n\
    \    if base == 23:\n        return \"\".join([\"11\" if i % 23 == 22 else \"\
    1\" for i in range(x)])\n    if base == 29:\n        return \"\".join([\"11\"\
    \ if i % 29 == 28 else \"1\" for i in range(x)])\n    if base == 31:\n       \
    \ return \"\".join([\"11\" if i % 31 == 30 else \"1\" for i in range(x)])\n  \
    \  if base == 37:", "    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if x < 0:\n        raise ValueError(\"Negative\
    \ numbers cannot be converted\")\n    if x == 0:\n        return \"0\"\n    result\
    \ = \"\"\n    while x > 0:\n        remainder = x % base\n        result = remainder\
    \ + result\n        x = x // base\n    return result", "    if base < 2 or base\
    \ > 36:\n        raise Exception(\"Base must be between 2 and 36\")\n    if x\
    \ < 0:\n        raise Exception(\"Negative numbers are not supported\")\n    if\
    \ base == 10:\n        return str(x)\n    result = \"\"\n    while x > 0:\n  \
    \      remainder = x % base\n        result = remainder + result\n        x =\
    \ x // base\n    return result", '    return to_string(x, base)', '    return
    to_string(x, base)', "    if base < 2 or base > 16:\n        raise Exception(\"\
    Base must be between 2 and 16\")\n    if x < 0:\n        raise Exception(\"Negative\
    \ numbers are not supported\")\n    if base == 2:\n        return to_binary(x)\n\
    \    elif base == 10:\n        return to_decimal(x)\n    else:\n        return\
    \ to_octal(x)", "    if base > 10:\n        return \"ERROR: base must be less\
    \ than 10\"\n    if x < 0:\n        return \"ERROR: negative numbers cannot be\
    \ converted\"\n    if base == 10:\n        return str(x)\n    if base == 2:\n\
    \        return str(x)\n    if base == 3:\n        return str(x)\n    if base\
    \ == 4:\n        return str(x)\n    if base == 5:\n        return str(x)\n   \
    \ if base == 6:\n        return str(x)\n    if base == 7:\n        return str(x)\n\
    \    if base == 8:\n        return str(x)\n    if base == 9:\n        return str(x)\n\
    \    if base == 11:\n        return str(x)\n    if base == 12:\n        return\
    \ str(x)\n    if base == 13:\n        return str(x)\n    if base == 14:\n    \
    \    return str(x)\n    if base == 15:\n        return str(x)\n    if base ==\
    \ 16:\n        return str(x)\n    if base == 17:\n        return str(x)\n    if\
    \ base == 18:\n        return str(x)\n    if base == 19:\n        return str(x)\n\
    \    if base == 20:\n        return str(x)\n    if base == 21:\n        return\
    \ str(x)\n    if base == 22:\n        return str(x)\n    if base == 23:\n    \
    \    return str(x)\n    if base == 24:\n        return str(x)\n    if base ==\
    \ 25:\n        return str(x)\n    if base == 26:\n        return str(x)\n    if\
    \ base == 27:\n        return str(x)\n    if base == 28:\n        return str(x)\n\
    \    if base == 29:\n        return str(x)\n    if base == 30:\n        return\
    \ str(x)\n    if base == 31:\n        return str(x)\n    if base == 32:\n    \
    \    return str(x)\n    if base == 33:\n        return str(x)\n    if base ==\
    \ 34:\n        return str(x)\n    if base == 35:\n        return str(", '    return
    toString(x, base)', "    if base < 2:\n        raise ValueError(\"Base must be\
    \ greater than 1\")\n    if base > 36:\n        raise ValueError(\"Base must be\
    \ less than 36\")\n    if x < 0:\n        raise ValueError(\"Negative numbers\
    \ are not supported\")\n    if x == 0:\n        return \"0\"\n    if base == 10:\n\
    \        return str(x)\n    if base == 2:\n        return \"\".join([\"1\" if\
    \ i % 2 == 0 else \"0\" for i in range(x)])\n    if base == 3:\n        return\
    \ \"\".join([\"1\" if i % 3 == 0 else \"0\" for i in range(x)])\n    if base ==\
    \ 4:\n        return \"\".join([\"1\" if i % 4 == 0 else \"0\" for i in range(x)])\n\
    \    if base == 5:\n        return \"\".join([\"1\" if i % 5 == 0 else \"0\" for\
    \ i in range(x)])\n    if base == 6:\n        return \"\".join([\"1\" if i % 6\
    \ == 0 else \"0\" for i in range(x)])\n    if base == 7:\n        return \"\"\
    .join([\"1\" if i % 7 == 0 else \"0\" for i in range(x)])\n    if base == 8:\n\
    \        return \"\".join([\"1\" if i % 8 == 0 else \"0\" for i in range(x)])\n\
    \    if base == 9:\n        return \"\".join([\"1\" if i % 9 == 0 else \"0\" for\
    \ i in range(x)])\n    if base == 11:\n        return \"\".join([\"1\" if i %\
    \ 11 == 0 else \"0\" for i in range(x)])\n    if base == 13:\n        return \"\
    \".join([\"1\" if i % 13 == 0 else \"0\" for i in range(x)])\n    if base == 14:\n\
    \        return \"\".join([\"1\" if i % 14 == 0 else \"0\" for i in range(x)])\n\
    \    if base == 15:\n        return \"\".join([\"1\" if i % 15 == 0 else \"0\"\
    \ for i in range(x)])\n    if base == 16", "    if base < 2 or base > 10:\n  \
    \      raise Exception(\"Base must be between 2 and 10\")\n    if x < 0:\n   \
    \     raise Exception(\"Negative numbers are not supported\")\n    if base ==\
    \ 10:\n        return str(x)\n    result = \"\"\n    while x > 0:\n        remainder\
    \ = x % base\n        result = str(remainder) + result\n        x = x // base\n\
    \    return result", "    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if x < 0:\n        raise ValueError(\"Negative\
    \ numbers cannot be converted\")\n    if base == 10:\n        return str(x)\n\
    \    if base == 2:\n        return \"\".join([\"1\" if i % 2 == 0 else \"0\" for\
    \ i in range(len(str(x)))])\n    if base == 16:\n        return \"\".join([\"\
    0\" if i % 2 == 0 else \"1\" for i in range(len(str(x)))])\n    if base == 8:\n\
    \        return \"\".join([\"0\" if i % 3 == 0 else \"1\" for i in range(len(str(x)))])\n\
    \    if base == 3:\n        return \"\".join([\"1\" if i % 3 == 0 else \"0\" for\
    \ i in range(len(str(x)))])\n    if base == 5:\n        return \"\".join([\"1\"\
    \ if i % 5 == 0 else \"0\" for i in range(len(str(x)))])\n    if base == 7:\n\
    \        return \"\".join([\"1\" if i % 7 == 0 else \"0\" for i in range(len(str(x)))])\n\
    \    if base == 11:\n        return \"\".join([\"1\" if i % 11 == 0 else \"0\"\
    \ for i in range(len(str(x)))])\n    if base == 13:\n        return \"\".join([\"\
    1\" if i % 13 == 0 else \"0\" for i in range(len(str(x)))])\n    if base == 17:\n\
    \        return \"\".join([\"1\" if i % 17 == 0 else \"0\" for i in range(len(str(x)))])\n\
    \    if base == 19:\n        return \"\".join([\"1\" if i % 19 == 0 else \"0\"\
    \ for i in range(len(str(x)))])\n    if base == 23:\n        return \"\".join([\"\
    1\" if i % 23 == 0 else \"0\" for i in range(len(str(x)))])\n    if base == 29:\n\
    \        return \"\".join([\"1\" if i % 29 == 0 else \"", '    return to_string(x,
    base)', "    if base < 2 or base > 10:\n        raise ValueError(\"base must be\
    \ between 2 and 10\")\n    if x < 0:\n        raise ValueError(\"x must be non-negative\"\
    )\n    if x == 0:\n        return \"0\"\n    result = \"\"\n    while x > 0:\n\
    \        remainder = x % base\n        result = remainder + result\n        x\
    \ = x // base\n    return result", "    if base < 2 or base > 36:\n        raise\
    \ Exception(\"Base must be between 2 and 36\")\n    if x < 0:\n        raise Exception(\"\
    Negative numbers are not supported\")\n    if x == 0:\n        return \"0\"\n\
    \    if base == 10:\n        return str(x)\n    if base == 2:\n        return\
    \ \"\".join([\"1\" if i % 2 == 0 else \"0\" for i in range(len(str(x)) + 1)])\n\
    \    if base == 16:\n        return \"\".join([\"1\" if i % 2 == 0 else \"0\"\
    \ for i in range(len(str(x)) + 1)])\n    if base == 8:\n        return \"\".join([\"\
    1\" if i % 3 == 0 else \"0\" for i in range(len(str(x)) + 1)])\n    if base ==\
    \ 3:\n        return \"\".join([\"1\" if i % 3 == 0 else \"0\" for i in range(len(str(x))\
    \ + 1)])\n    if base == 5:\n        return \"\".join([\"1\" if i % 5 == 0 else\
    \ \"0\" for i in range(len(str(x)) + 1)])\n    if base == 7:\n        return \"\
    \".join([\"1\" if i % 7 == 0 else \"0\" for i in range(len(str(x)) + 1)])\n  \
    \  if base == 11:\n        return \"\".join([\"1\" if i % 11 == 0 else \"0\" for\
    \ i in range(len(str(x)) + 1)])\n    if base == 13:\n        return \"\".join([\"\
    1\" if i % 13 == 0 else \"0\" for i in range(len(str(x)) + 1)])\n    if base ==\
    \ 17:\n        return \"\".join([\"1\" if i % 17 == 0 else \"0\" for i in range(len(str(x))\
    \ + 1)])\n    if base == 19:\n        return \"\".join([\"1\" if i % 19 == 0 else\
    \ \"0\" for i in range(len(str(x)) + 1)])\n    if base == 23:\n        return\
    \ \"\".join([\"1\" if i % 23 == 0", "    if base < 2 or base > 36:\n        raise\
    \ Exception(\"Base must be between 2 and 36\")\n    if x < 0:\n        raise Exception(\"\
    Negative numbers are not supported\")\n    if base == 10:\n        return str(x)\n\
    \    if base == 2:\n        return \"\".join([\"1\" if i % 2 == 0 else \"0\" for\
    \ i in range(len(str(x)) + 1)])\n    if base == 16:\n        return \"\".join([\"\
    1\" if i % 2 == 0 else \"0\" for i in range(len(str(x)) + 1)])\n    if base ==\
    \ 8:\n        return \"\".join([\"1\" if i % 3 == 0 else \"0\" for i in range(len(str(x))\
    \ + 1)])\n    if base == 3:\n        return \"\".join([\"1\" if i % 3 == 0 else\
    \ \"0\" for i in range(len(str(x)) + 1)])\n    if base == 5:\n        return \"\
    \".join([\"1\" if i % 5 == 0 else \"0\" for i in range(len(str(x)) + 1)])\n  \
    \  if base == 7:\n        return \"\".join([\"1\" if i % 7 == 0 else \"0\" for\
    \ i in range(len(str(x)) + 1)])\n    if base == 11:\n        return \"\".join([\"\
    1\" if i % 11 == 0 else \"0\" for i in range(len(str(x)) + 1)])\n    if base ==\
    \ 13:\n        return \"\".join([\"1\" if i % 13 == 0 else \"0\" for i in range(len(str(x))\
    \ + 1)])\n    if base == 17:\n        return \"\".join([\"1\" if i % 17 == 0 else\
    \ \"0\" for i in range(len(str(x)) + 1)])\n    if base == 19:\n        return\
    \ \"\".join([\"1\" if i % 19 == 0 else \"0\" for i in range(len(str(x)) + 1)])\n\
    \    if base == 23:\n        return \"\".join([\"1\" if i % 23 == 0 else \"0\"\
    \ for i in range(len(str(", "    if base > 10:\n        return \"Error: base must\
    \ be less than 10\"\n    if base == 10:\n        return to_string(x)\n    if x\
    \ < 0:\n        return \"Error: negative number\"\n    if base == 2:\n       \
    \ return to_string(x, 2)\n    if base == 3:\n        return to_string(x, 3)\n\
    \    if base == 4:\n        return to_string(x, 4)\n    if base == 5:\n      \
    \  return to_string(x, 5)\n    if base == 6:\n        return to_string(x, 6)\n\
    \    if base == 7:\n        return to_string(x, 7)\n    if base == 8:\n      \
    \  return to_string(x, 8)\n    if base == 9:\n        return to_string(x, 9)\n\
    \    if base == 16:\n        return to_string(x, 16)\n    if base == 17:\n   \
    \     return to_string(x, 17)\n    if base == 18:\n        return to_string(x,\
    \ 18)\n    if base == 19:\n        return to_string(x, 19)\n    if base == 20:\n\
    \        return to_string(x, 20)\n    if base == 21:\n        return to_string(x,\
    \ 21)\n    if base == 22:\n        return to_string(x, 22)\n    if base == 23:\n\
    \        return to_string(x, 23)\n    if base == 24:\n        return to_string(x,\
    \ 24)\n    if base == 25:\n        return to_string(x, 25)\n    if base == 26:\n\
    \        return to_string(x, 26)\n    if base == 27:\n        return to_string(x,\
    \ 27)\n    if base == 28:\n        return to_string(x, 28)\n    if base == 29:\n\
    \        return to_string(x, 29)\n    if base == 30:\n        return to_string(x,\
    \ 30)\n    if base == 31:\n        return to_string(x, 31)\n    if base == 32:\n\
    \        return to_string(x, 32)\n    if base == 33:\n        return to", '    return
    to_string(x, base)', "    if base < 2 or base > 10:\n        raise ValueError(\"\
    base must be between 2 and 10\")\n    if x < 0:\n        raise ValueError(\"negative\
    \ numbers cannot be converted to base 10\")\n    if x == 0:\n        return \"\
    0\"\n    result = \"\"\n    while x > 0:\n        remainder = x % base\n     \
    \   result = str(remainder) + result\n        x = x // base\n    return result",
  "    if base < 2 or base > 10:\n        raise Exception(\"Base must be between 2\
    \ and 10\")\n    if x < 0:\n        raise Exception(\"Negative numbers are not\
    \ supported\")\n    if base == 10:\n        return str(x)\n    result = \"\"\n\
    \    while x > 0:\n        result = str(x % base) + result\n        x = x // base\n\
    \    return result", "    if base < 2 or base > 10:\n        raise Exception(\"\
    Invalid base\")\n    if x < 0:\n        raise Exception(\"Negative number\")\n\
    \    if x == 0:\n        return \"0\"\n    result = \"\"\n    while x > 0:\n \
    \       result = str(x % base) + result\n        x = x // base\n    return result",
  '    return String(x.toString(base))', "    if base > 10:\n        return \"Error:\
    \ base must be less than 10\"\n    if x < 0:\n        return \"Error: negative\
    \ number\"\n    if base == 10:\n        return str(x)\n    if base == 2:\n   \
    \     return \"\".join([\"1\" if i % 2 == 0 else \"0\" for i in range(x)])\n \
    \   if base == 3:\n        return \"\".join([\"1\" if i % 3 == 0 else \"0\" for\
    \ i in range(x)])\n    if base == 4:\n        return \"\".join([\"1\" if i % 4\
    \ == 0 else \"0\" for i in range(x)])\n    if base == 5:\n        return \"\"\
    .join([\"1\" if i % 5 == 0 else \"0\" for i in range(x)])\n    if base == 6:\n\
    \        return \"\".join([\"1\" if i % 6 == 0 else \"0\" for i in range(x)])\n\
    \    if base == 7:\n        return \"\".join([\"1\" if i % 7 == 0 else \"0\" for\
    \ i in range(x)])\n    if base == 8:\n        return \"\".join([\"1\" if i % 8\
    \ == 0 else \"0\" for i in range(x)])\n    if base == 9:\n        return \"\"\
    .join([\"1\" if i % 9 == 0 else \"0\" for i in range(x)])\n    if base == 11:\n\
    \        return \"\".join([\"1\" if i % 11 == 0 else \"0\" for i in range(x)])\n\
    \    if base == 13:\n        return \"\".join([\"1\" if i % 13 == 0 else \"0\"\
    \ for i in range(x)])\n    if base == 14:\n        return \"\".join([\"1\" if\
    \ i % 14 == 0 else \"0\" for i in range(x)])\n    if base == 15:\n        return\
    \ \"\".join([\"1\" if i % 15 == 0 else \"0\" for i in range(x)])\n    if base\
    \ == 16:\n        return \"\".join([\"1\" if i % 16 == 0 else \"0\" for i in range(x)])\n\
    \    if base == 17:\n", '    return toString(x, base)', "    if base > 10:\n \
    \       return \"Error: base must be less than 10\"\n    if base == 10:\n    \
    \    return to_string(x)\n    if x < 0:\n        return \"Error: negative number\"\
    \n    if x == 0:\n        return \"0\"\n    if base == 2:\n        return to_string(x,\
    \ 2)\n    if base == 3:\n        return to_string(x, 3)\n    if base == 4:\n \
    \       return to_string(x, 4)\n    if base == 5:\n        return to_string(x,\
    \ 5)\n    if base == 6:\n        return to_string(x, 6)\n    if base == 7:\n \
    \       return to_string(x, 7)\n    if base == 8:\n        return to_string(x,\
    \ 8)\n    if base == 9:\n        return to_string(x, 9)\n    if base == 10:\n\
    \        return to_string(x, 10)\n    if base == 11:\n        return to_string(x,\
    \ 11)\n    if base == 12:\n        return to_string(x, 12)\n    if base == 13:\n\
    \        return to_string(x, 13)\n    if base == 14:\n        return to_string(x,\
    \ 14)\n    if base == 15:\n        return to_string(x, 15)\n    if base == 16:\n\
    \        return to_string(x, 16)\n    if base == 17:\n        return to_string(x,\
    \ 17)\n    if base == 18:\n        return to_string(x, 18)\n    if base == 19:\n\
    \        return to_string(x, 19)\n    if base == 20:\n        return to_string(x,\
    \ 20)\n    if base == 21:\n        return to_string(x, 21)\n    if base == 22:\n\
    \        return to_string(x, 22)\n    if base == 23:\n        return to_string(x,\
    \ 23)\n    if base == 24:\n        return to_string(x, 24)\n    if base == 25:\n\
    \        return to_string(x, 25)\n    if base == 26:\n        return to_string(x,",
  '    return to_string(x, base)', "    if base < 2 or base > 16:\n        raise Exception(\"\
    Base must be between 2 and 16\")\n    if x < 0:\n        raise Exception(\"Negative\
    \ numbers are not supported\")\n    if base == 16:\n        return hex(x)\n  \
    \  if base == 2:\n        return bin(x)[2:]\n    if base == 8:\n        return\
    \ oct(x)\n    return str(x)", "    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base should be between 2 and 36\")\n    if x < 0:\n        raise ValueError(\"\
    Negative numbers are not supported\")\n    if base == 10:\n        return str(x)\n\
    \    if base == 2:\n        return \"\".join([\"1\" if i % 2 == 0 else \"0\" for\
    \ i in range(len(str(x)))])\n    if base == 16:\n        return \"\".join([\"\
    1\" if i % 2 == 0 else \"0\" for i in range(len(str(x)))])\n    if base == 8:\n\
    \        return \"\".join([\"1\" if i % 3 == 0 else \"0\" for i in range(len(str(x)))])\n\
    \    if base == 3:\n        return \"\".join([\"1\" if i % 3 == 0 else \"0\" for\
    \ i in range(len(str(x)))])\n    if base == 5:\n        return \"\".join([\"1\"\
    \ if i % 5 == 0 else \"0\" for i in range(len(str(x)))])\n    if base == 7:\n\
    \        return \"\".join([\"1\" if i % 7 == 0 else \"0\" for i in range(len(str(x)))])\n\
    \    if base == 11:\n        return \"\".join([\"1\" if i % 11 == 0 else \"0\"\
    \ for i in range(len(str(x)))])\n    if base == 13:\n        return \"\".join([\"\
    1\" if i % 13 == 0 else \"0\" for i in range(len(str(x)))])\n    if base == 17:\n\
    \        return \"\".join([\"1\" if i % 17 == 0 else \"0\" for i in range(len(str(x)))])\n\
    \    if base == 19:\n        return \"\".join([\"1\" if i % 19 == 0 else \"0\"\
    \ for i in range(len(str(x)))])\n    if base == 23:\n        return \"\".join([\"\
    1\" if i % 23 == 0 else \"0\" for i in range(len(str(x)))])\n    if base == 29:\n\
    \        return \"\".join([\"1\" if i % 29 == 0 else \"", "    if base > 10:\n\
    \        return \"ERROR: base must be less than 10\"\n    if x < 0:\n        return\
    \ \"ERROR: x must be non-negative\"\n    if base == 10:\n        return str(x)\n\
    \    if base == 2:\n        return \"\".join(map(str, bin(x)[2:].zfill(64)))\n\
    \    if base == 3:\n        return \"\".join(map(str, bin(x)[2:].zfill(32)))\n\
    \    if base == 4:\n        return \"\".join(map(str, bin(x)[2:].zfill(16)))\n\
    \    if base == 5:\n        return \"\".join(map(str, bin(x)[2:].zfill(8)))\n\
    \    if base == 6:\n        return \"\".join(map(str, bin(x)[2:].zfill(4)))\n\
    \    if base == 7:\n        return \"\".join(map(str, bin(x)[2:].zfill(2)))\n\
    \    if base == 8:\n        return \"\".join(map(str, bin(x)[2:].zfill(1)))\n\
    \    if base == 9:\n        return \"\".join(map(str, bin(x)[2:].zfill(0)))\n\
    \    return \"ERROR: base must be less than 10\"\n", "    if base < 2 or base\
    \ > 36:\n        raise Exception(\"Base should be between 2 and 36\")\n    if\
    \ x < 0:\n        raise Exception(\"Negative numbers are not supported\")\n  \
    \  if base == 10:\n        return str(x)\n    if base == 2:\n        return bin(x)[2:]\n\
    \    if base == 16:\n        return hex(x)[2:]\n    if base == 8:\n        return\
    \ oct(x)[2:]\n    if base == 3:\n        return bin(x)[2:]\n    if base == 5:\n\
    \        return hex(x)[2:]\n    if base == 7:\n        return oct(x)[2:]\n   \
    \ if base == 11:\n        return bin(x)[2:]\n    if base == 13:\n        return\
    \ hex(x)[2:]\n    if base == 17:\n        return oct(x)[2:]\n    if base == 19:\n\
    \        return bin(x)[2:]\n    if base == 23:\n        return hex(x)[2:]\n  \
    \  if base == 29:\n        return oct(x)[2:]\n    if base == 31:\n        return\
    \ bin(x)[2:]\n    if base == 37:\n        return hex(x)[2:]\n    if base == 41:\n\
    \        return oct(x)[2:]\n    if base == 43:\n        return bin(x)[2:]\n  \
    \  if base == 47:\n        return hex(x)[2:]\n    if base == 53:\n        return\
    \ oct(x)[2:]\n    if base == 59:\n        return bin(x)[2:]\n    if base == 61:\n\
    \        return hex(x)[2:]\n    if base == 67:\n        return oct(x)[2:]\n  \
    \  if base == 71:\n        return bin(x)[2:]\n    if base == 73:\n        return\
    \ hex(x)[2:]\n    if base == 79:\n        return oct(x)[2:]\n    if base == 83:\n\
    \        return bin(x)[2:]\n    if base == 89:\n        return hex(x)[2:]\n  \
    \  if base == 97:\n        return oct(x)[2:]\n    if base == 101:\n        return\
    \ bin(x)[2:]\n    if base == 103:\n", "    if base < 2 or base > 36:\n       \
    \ raise ValueError(\"Base should be between 2 and 36\")\n    if x < 0:\n     \
    \   raise ValueError(\"Input should be a positive number\")\n    if base == 2:\n\
    \        return to_binary(x)\n    elif base == 3:\n        return to_ternary(x)\n\
    \    elif base == 4:\n        return to_quaternary(x)\n    elif base == 5:\n \
    \       return to_quinary(x)\n    elif base == 6:\n        return to_senary(x)\n\
    \    elif base == 7:\n        return to_septenary(x)\n    elif base == 8:\n  \
    \      return to_octal(x)\n    elif base == 9:\n        return to_nonary(x)\n\
    \    elif base == 10:\n        return to_decimal(x)\n    elif base == 11:\n  \
    \      return to_duodecimal(x)\n    elif base == 12:\n        return to_tetradecimal(x)\n\
    \    elif base == 13:\n        return to_pentadecimal(x)\n    elif base == 14:\n\
    \        return to_hexadecimal(x)\n    elif base == 15:\n        return to_heptadecimal(x)\n\
    \    elif base == 16:\n        return to_octal(x)\n    elif base == 17:\n    \
    \    return to_septenary(x)\n    elif base == 18:\n        return to_octal(x)\n\
    \    elif base == 19:\n        return to_nonary(x)\n    elif base == 20:\n   \
    \     return to_decimal(x)\n    elif base == 21:\n        return to_duodecimal(x)\n\
    \    elif base == 22:\n        return to_tetradecimal(x)\n    elif base == 23:\n\
    \        return to_pentadecimal(x)\n    elif base == 24:\n        return to_hexadecimal(x)\n\
    \    elif base == 25:\n        return to_heptadecimal(x)\n    elif base == 26:\n\
    \        return", "    if base > 10:\n        return \"ERROR: base must be less\
    \ than 10\"\n    if base == 10:\n        return to_string(x)\n    if x < 0:\n\
    \        return \"ERROR: negative numbers cannot be converted\"\n    if base ==\
    \ 2:\n        return to_string(x, 2)\n    if base == 3:\n        return to_string(x,\
    \ 3)\n    if base == 4:\n        return to_string(x, 4)\n    if base == 5:\n \
    \       return to_string(x, 5)\n    if base == 6:\n        return to_string(x,\
    \ 6)\n    if base == 7:\n        return to_string(x, 7)\n    if base == 8:\n \
    \       return to_string(x, 8)\n    if base == 9:\n        return to_string(x,\
    \ 9)\n    if base == 16:\n        return to_string(x, 16)\n    if base == 17:\n\
    \        return to_string(x, 17)\n    if base == 18:\n        return to_string(x,\
    \ 18)\n    if base == 19:\n        return to_string(x, 19)\n    if base == 20:\n\
    \        return to_string(x, 20)\n    if base == 21:\n        return to_string(x,\
    \ 21)\n    if base == 22:\n        return to_string(x, 22)\n    if base == 23:\n\
    \        return to_string(x, 23)\n    if base == 24:\n        return to_string(x,\
    \ 24)\n    if base == 25:\n        return to_string(x, 25)\n    if base == 26:\n\
    \        return to_string(x, 26)\n    if base == 27:\n        return to_string(x,\
    \ 27)\n    if base == 28:\n        return to_string(x, 28)\n    if base == 29:\n\
    \        return to_string(x, 29)\n    if base == 30:\n        return to_string(x,\
    \ 30)\n    if base == 31:\n        return to_string(x, 31)\n    if base == 32:\n\
    \        return to_string(x, 32)\n    if base == 33:\n", "    if base < 2 or base\
    \ > 10:\n        raise Exception(\"Base must be between 2 and 10\")\n    if x\
    \ < 0:\n        raise Exception(\"Negative numbers are not supported\")\n    if\
    \ x == 0:\n        return \"0\"\n    if base == 10:\n        return str(x)\n \
    \   \n    # base is 2 or 3\n    if base == 2:\n        return \"\".join(map(lambda\
    \ x: str(x), [x // 2, x % 2]))\n    elif base == 3:\n        return \"\".join(map(lambda\
    \ x: str(x), [x // 3, x % 3]))\n    \n    # base is 4 or 5\n    if base == 4:\n\
    \        return \"\".join(map(lambda x: str(x), [x // 4, x % 4]))\n    elif base\
    \ == 5:\n        return \"\".join(map(lambda x: str(x), [x // 5, x % 5]))\n  \
    \  \n    # base is 6 or 7\n    if base == 6:\n        return \"\".join(map(lambda\
    \ x: str(x), [x // 6, x % 6]))\n    elif base == 7:\n        return \"\".join(map(lambda\
    \ x: str(x), [x // 7, x % 7]))\n    \n    # base is 8 or 9\n    if base == 8:\n\
    \        return \"\".join(map(lambda x: str(x), [x // 8, x % 8]))\n    elif base\
    \ == 9:\n        return \"\".join(map(lambda x: str(x), [x // 9, x % 9]))\n  \
    \  \n    # base is 10\n    return str(x)\n", "    if base < 2 or base > 10:\n\
    \        raise ValueError(\"Base must be between 2 and 10\")\n    if x < 0:\n\
    \        raise ValueError(\"Negative numbers are not supported\")\n    if base\
    \ == 10:\n        return str(x)\n    if x == 0:\n        return \"0\"\n    if\
    \ base == 2:\n        return to_binary(x)\n    if base == 3:\n        return to_ternary(x)\n\
    \    if base == 4:\n        return to_quaternary(x)\n    if base == 5:\n     \
    \   return to_quinary(x)\n    if base == 6:\n        return to_senary(x)\n   \
    \ if base == 7:\n        return to_septenary(x)\n    if base == 8:\n        return\
    \ to_octal(x)\n    if base == 9:\n        return to_nonary(x)\n    if base ==\
    \ 10:\n        return to_decimal(x)\n    if base == 11:\n        return to_duodecimal(x)\n\
    \    if base == 12:\n        return to_tetradecimal(x)\n    if base == 13:\n \
    \       return to_pentadecimal(x)\n    if base == 14:\n        return to_hexadecimal(x)\n\
    \    if base == 15:\n        return to_heptadecimal(x)\n    if base == 16:\n \
    \       return to_octadecimal(x)\n    if base == 17:\n        return to_septendecimal(x)\n\
    \    if base == 18:\n        return to_octodecimal(x)\n    if base == 19:\n  \
    \      return to_nonadecimal(x)\n    if base == 20:\n        return to_tridecimal(x)\n\
    \    if base == 21:\n        return to_tredecimal(x)\n    if base == 22:\n   \
    \     return to_quattordecimal(x)\n    if base == 23:\n        return to_quindecimal(x)\n\
    \    if base == 24:\n        return to_sexdecimal(x)\n    if base == 25:\n   \
    \     return to_septendecimal(", "    if base < 2 or base > 36:\n        raise\
    \ ValueError(\"base should be in 2..36\")\n    if x < 0:\n        raise ValueError(\"\
    negative number\")\n    if x == 0:\n        return \"0\"\n    if base == 10:\n\
    \        return str(x)\n    if base == 2:\n        return bin(x)[2:]\n    if base\
    \ == 3:\n        return str(x)\n    if base == 4:\n        return bin(x)[2:]\n\
    \    if base == 5:\n        return str(x)\n    if base == 6:\n        return bin(x)[2:]\n\
    \    if base == 7:\n        return str(x)\n    if base == 8:\n        return bin(x)[2:]\n\
    \    if base == 9:\n        return str(x)\n    if base == 16:\n        return\
    \ hex(x)[2:]\n    if base == 17:\n        return str(x)\n    if base == 18:\n\
    \        return hex(x)[2:]\n    if base == 19:\n        return str(x)\n    if\
    \ base == 20:\n        return hex(x)[2:]\n    if base == 21:\n        return str(x)\n\
    \    if base == 22:\n        return hex(x)[2:]\n    if base == 23:\n        return\
    \ str(x)\n    if base == 24:\n        return hex(x)[2:]\n    if base == 25:\n\
    \        return str(x)\n    if base == 26:\n        return hex(x)[2:]\n    if\
    \ base == 27:\n        return str(x)\n    if base == 28:\n        return hex(x)[2:]\n\
    \    if base == 29:\n        return str(x)\n    if base == 30:\n        return\
    \ hex(x)[2:]\n    if base == 31:\n        return str(x)\n    if base == 32:\n\
    \        return hex(x)[2:]\n    if base == 33:\n        return str(x)\n    if\
    \ base == 34:\n        return hex(x)[2:]\n    if base == 35:\n        return str(x)\n\
    \    if base == 36:\n        return hex(x)[2:]\n    raise ValueError(\"base should\
    \ be", '    return String(x)', "    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if x < 0:\n        raise ValueError(\"Negative\
    \ numbers cannot be converted\")\n    if base == 10:\n        return str(x)\n\
    \    result = \"\"\n    while x > 0:\n        remainder = x % base\n        result\
    \ = str(remainder) + result\n        x = x // base\n    return \"0\" * (len(result)\
    \ - 1) + result", "    if base < 2 or base > 16:\n        raise ValueError(\"\
    Base must be between 2 and 16\")\n    if x < 0:\n        raise ValueError(\"Negative\
    \ numbers cannot be converted\")\n    if base == 16:\n        return hex(x)\n\
    \    if base == 2:\n        return bin(x)[2:]\n    if base == 8:\n        return\
    \ oct(x)\n    if base == 10:\n        return str(x)\n    if base == 2:\n     \
    \   return bin(x)[2:]\n    if base == 16:\n        return hex(x)\n    if base\
    \ == 8:\n        return oct(x)\n    if base == 10:\n        return str(x)\n  \
    \  if base == 2:\n        return bin(x)[2:]\n    if base == 16:\n        return\
    \ hex(x)\n    if base == 8:\n        return oct(x)\n    if base == 10:\n     \
    \   return str(x)\n    if base == 2:\n        return bin(x)[2:]\n    if base ==\
    \ 16:\n        return hex(x)\n    if base == 8:\n        return oct(x)\n    if\
    \ base == 10:\n        return str(x)\n    if base == 2:\n        return bin(x)[2:]\n\
    \    if base == 16:\n        return hex(x)\n    if base == 8:\n        return\
    \ oct(x)\n    if base == 10:\n        return str(x)\n    if base == 2:\n     \
    \   return bin(x)[2:]\n    if base == 16:\n        return hex(x)\n    if base\
    \ == 8:\n        return oct(x)\n    if base == 10:\n        return str(x)\n  \
    \  if base == 2:\n        return bin(x)[2:]\n    if base == 16:\n        return\
    \ hex(x)\n    if base == 8:\n        return oct(x)\n    if base == 10:\n     \
    \   return str(x)\n    if base == 2:\n        return bin(x)[2:]\n    if base ==\
    \ 16:\n        return hex(x)\n    if base == 8:\n        return oct(x)\n    if\
    \ base == 10:\n        return str(x)\n    if base", "    if base < 2 or base >\
    \ 36:\n        raise Exception(\"Base should be between 2 and 36\")\n    if x\
    \ < 0:\n        return \"-\" + change_base(-x, base)\n    if base == 10:\n   \
    \     return str(x)\n    if x == 0:\n        return \"0\"\n    result = \"\"\n\
    \    while x > 0:\n        remainder = x % base\n        result = str(remainder)\
    \ + result\n        x = x // base\n    return result", "    if base < 2 or base\
    \ > 10:\n        raise Exception(\"Base should be 2 to 10\")\n    if x < 0:\n\
    \        raise Exception(\"Negative numbers are not supported\")\n    if x ==\
    \ 0:\n        return \"0\"\n    if base == 10:\n        return str(x)\n    result\
    \ = \"\"\n    while x > 0:\n        remainder = x % base\n        result = str(remainder)\
    \ + result\n        x = x // base\n    return result", "    if base > 10:\n  \
    \      return \"Error: base must be less than 10.\"\n    if x < 0:\n        return\
    \ \"Error: x must be non-negative.\"\n    if base < 2:\n        return \"Error:\
    \ base must be greater than 1.\"\n    if base == 2:\n        return to_binary(x)\n\
    \    if base == 3:\n        return to_triple(x)\n    if base == 4:\n        return\
    \ to_quadruple(x)\n    if base == 5:\n        return to_quintuple(x)\n    if base\
    \ == 6:\n        return to_sextuple(x)\n    if base == 7:\n        return to_septuple(x)\n\
    \    if base == 8:\n        return to_octuple(x)\n    if base == 9:\n        return\
    \ to_nonuple(x)\n    if base == 10:\n        return to_decuple(x)\n    if base\
    \ == 11:\n        return to_undecuple(x)\n    if base == 12:\n        return to_duodecuple(x)\n\
    \    if base == 13:\n        return to_tredecuple(x)\n    if base == 14:\n   \
    \     return to_quattupledecuple(x)\n    if base == 15:\n        return to_quindecuple(x)\n\
    \    if base == 16:\n        return to_sedecuple(x)\n    if base == 17:\n    \
    \    return to_septendecuple(x)\n    if base == 18:\n        return to_octodecuple(x)\n\
    \    if base == 19:\n        return to_nonudecuple(x)\n    if base == 20:\n  \
    \      return to_decudecuple(x)\n    if base == 21:\n        return to_undecudecuple(x)\n\
    \    if base == 22:\n        return to_tredecudecuple(x)\n    if base == 23:\n\
    \        return to_quattupledecudecuple(x)\n    if base == 24:\n        return\
    \ to_quindecudecuple(x)\n    if base == 25:\n        return to_sedecudecuple(x)\n",
  "    if base < 2 or base > 10:\n        raise ValueError(\"Base should be between\
    \ 2 and 10\")\n    if x < 0:\n        raise ValueError(\"Negative numbers are\
    \ not supported\")\n    if base == 10:\n        return str(x)\n    result = \"\
    \"\n    while x > 0:\n        remainder = x % base\n        result = str(remainder)\
    \ + result\n        x = x // base\n    return result", "    if base < 2 or base\
    \ > 36:\n        raise ValueError(\"Base should be 2 to 36.\")\n    if x < 0:\n\
    \        raise ValueError(\"Negative numbers cannot be converted.\")\n    if base\
    \ == 10:\n        return str(x)\n    if base == 2:\n        return \"\".join([\"\
    1\" if i % 2 == 0 else \"0\" for i in range(len(str(x)))])\n    if base == 16:\n\
    \        return \"\".join([\"1\" if i % 2 == 0 else \"0\" for i in range(len(str(x)))])\n\
    \    if base == 8:\n        return \"\".join([\"1\" if i % 3 == 0 else \"0\" for\
    \ i in range(len(str(x)))])\n    if base == 3:\n        return \"\".join([\"1\"\
    \ if i % 5 == 0 else \"0\" for i in range(len(str(x)))])\n    if base == 5:\n\
    \        return \"\".join([\"1\" if i % 2 == 0 else \"0\" for i in range(len(str(x)))])\n\
    \    if base == 7:\n        return \"\".join([\"1\" if i % 3 == 0 else \"0\" for\
    \ i in range(len(str(x)))])\n    if base == 9:\n        return \"\".join([\"1\"\
    \ if i % 4 == 0 else \"0\" for i in range(len(str(x)))])\n    if base == 11:\n\
    \        return \"\".join([\"1\" if i % 2 == 0 else \"0\" for i in range(len(str(x)))])\n\
    \    if base == 13:\n        return \"\".join([\"1\" if i % 3 == 0 else \"0\"\
    \ for i in range(len(str(x)))])\n    if base == 17:\n        return \"\".join([\"\
    1\" if i % 2 == 0 else \"0\" for i in range(len(str(x)))])\n    if base == 19:\n\
    \        return \"\".join([\"1\" if i % 4 == 0 else \"0\" for i in range(len(str(x)))])\n\
    \    if base == 23:\n        return \"\".join([\"1\" if i % 3 == 0 else \"0",
  "    if base < 2 or base > 10:\n        raise Exception(\"Base must be between 2\
    \ and 10\")\n    if x < 0:\n        raise Exception(\"Negative numbers are not\
    \ supported\")\n    if base == 10:\n        return str(x)\n    result = \"\"\n\
    \    while x > 0:\n        remainder = x % base\n        result = str(remainder)\
    \ + result\n        x = x // base\n    return result", '    return to_string(x,
    base)', "    if base > 10:\n        return \"Error: base must be less than 10\"\
    \n    if x < 0:\n        return \"Error: negative numbers cannot be converted\"\
    \n    if base == 10:\n        return str(x)\n    if x == 0:\n        return \"\
    0\"\n    if base == 2:\n        return \"\".join([\"1\" for i in range(x)])\n\
    \    if base == 3:\n        return \"\".join([\"1\" for i in range(x)])\n    if\
    \ base == 4:\n        return \"\".join([\"1\" for i in range(x)])\n    if base\
    \ == 5:\n        return \"\".join([\"1\" for i in range(x)])\n    if base == 6:\n\
    \        return \"\".join([\"1\" for i in range(x)])\n    if base == 7:\n    \
    \    return \"\".join([\"1\" for i in range(x)])\n    if base == 8:\n        return\
    \ \"\".join([\"1\" for i in range(x)])\n    if base == 9:\n        return \"\"\
    .join([\"1\" for i in range(x)])\n    if base == 16:\n        return \"\".join([\"\
    1\" for i in range(x)])\n    if base == 17:\n        return \"\".join([\"1\" for\
    \ i in range(x)])\n    if base == 18:\n        return \"\".join([\"1\" for i in\
    \ range(x)])\n    if base == 19:\n        return \"\".join([\"1\" for i in range(x)])\n\
    \    if base == 20:\n        return \"\".join([\"1\" for i in range(x)])\n   \
    \ if base == 21:\n        return \"\".join([\"1\" for i in range(x)])\n    if\
    \ base == 22:\n        return \"\".join([\"1\" for i in range(x)])\n    if base\
    \ == 23:\n        return \"\".join([\"1\" for i in range(x)])\n    if base ==\
    \ 24:\n        return \"\".join([\"1\" for i in range(x)])\n    if base == 25:\n\
    \        return \"\".join([\"1\" for i in range(", "    if base < 2 or base >\
    \ 36:\n        raise Exception(\"Base must be between 2 and 36\")\n    if x <\
    \ 0:\n        raise Exception(\"Negative numbers are not supported\")\n    if\
    \ x == 0:\n        return \"0\"\n    if base == 10:\n        return str(x)\n \
    \   if base == 2:\n        return \"\".join([\"1\" if i % 2 == 0 else \"0\" for\
    \ i in range(len(str(x)))])\n    if base == 16:\n        return \"\".join([\"\
    0123456789abcdef\"[i] for i in range(len(str(x)))])\n    if base == 8:\n     \
    \   return \"\".join([\"01234567\"[i] for i in range(len(str(x)))])\n    if base\
    \ == 3:\n        return \"\".join([\"1\" if i % 3 == 0 else \"0\" for i in range(len(str(x)))])\n\
    \    if base == 5:\n        return \"\".join([\"1\" if i % 5 == 0 else \"0\" for\
    \ i in range(len(str(x)))])\n    if base == 7:\n        return \"\".join([\"1\"\
    \ if i % 7 == 0 else \"0\" for i in range(len(str(x)))])\n    if base == 11:\n\
    \        return \"\".join([\"1\" if i % 11 == 0 else \"0\" for i in range(len(str(x)))])\n\
    \    if base == 13:\n        return \"\".join([\"1\" if i % 13 == 0 else \"0\"\
    \ for i in range(len(str(x)))])\n    if base == 17:\n        return \"\".join([\"\
    1\" if i % 17 == 0 else \"0\" for i in range(len(str(x)))])\n    if base == 19:\n\
    \        return \"\".join([\"1\" if i % 19 == 0 else \"0\" for i in range(len(str(x)))])\n\
    \    if base == 23:\n        return \"\".join([\"1\" if i % 23 == 0 else \"0\"\
    \ for i in range(len(str(x)))])\n    if base == 29:\n        return \"\".join([\"\
    1\" if i % 29", '    return toString(x, base)', "    if base < 2 or base > 10:\n\
    \        raise ValueError(\"Base must be between 2 and 10\")\n    if x < 0:\n\
    \        raise ValueError(\"Negative numbers cannot be converted\")\n    if base\
    \ == 10:\n        return str(x)\n    result = \"\"\n    while x > 0:\n       \
    \ remainder = x % base\n        result = str(remainder) + result\n        x =\
    \ x // base\n    return \"0\" * (len(result) - 1) + result", "    if base < 2\
    \ or base > 36:\n        raise ValueError(\"Base should be between 2 and 36\"\
    )\n    if x < 0:\n        raise ValueError(\"Negative numbers are not supported\"\
    )\n    if x == 0:\n        return \"0\"\n    if base == 10:\n        return str(x)\n\
    \    if base == 2:\n        return bin(x)[2:]\n    if base == 16:\n        return\
    \ hex(x)[2:]\n    if base == 8:\n        return oct(x)[2:]\n    if base == 3:\n\
    \        return bin(x)[2:]\n    if base == 5:\n        return str(x)\n    if base\
    \ == 6:\n        return hex(x)[2:]\n    if base == 7:\n        return oct(x)[2:]\n\
    \    if base == 9:\n        return str(x)\n    if base == 11:\n        return\
    \ bin(x)[2:]\n    if base == 13:\n        return str(x)\n    if base == 14:\n\
    \        return hex(x)[2:]\n    if base == 15:\n        return oct(x)[2:]\n  \
    \  if base == 17:\n        return str(x)\n    if base == 18:\n        return hex(x)[2:]\n\
    \    if base == 19:\n        return oct(x)[2:]\n    if base == 20:\n        return\
    \ str(x)\n    if base == 21:\n        return hex(x)[2:]\n    if base == 22:\n\
    \        return oct(x)[2:]\n    if base == 23:\n        return str(x)\n    if\
    \ base == 24:\n        return hex(x)[2:]\n    if base == 25:\n        return oct(x)[2:]\n\
    \    if base == 26:\n        return str(x)\n    if base == 27:\n        return\
    \ hex(x)[2:]\n    if base == 28:\n        return oct(x)[2:]\n    if base == 29:\n\
    \        return str(x)\n    if base == 30:\n        return hex(x)[2:]\n    if\
    \ base == 31:\n        return oct(x)[2:]\n    if base == 32:\n        return str(x)\n\
    \    if base == 33:\n        return hex", '    return to_string(x, base)', " \
    \   if base < 2 or base > 36:\n        raise ValueError(\"Base must be between\
    \ 2 and 36\")\n    if x < 0:\n        raise ValueError(\"Negative numbers cannot\
    \ be converted\")\n    if x == 0:\n        return \"0\"\n    if base == 10:\n\
    \        return str(x)\n    if base == 2:\n        return \"\".join(map(str, [x\
    \ >> i & 1 for i in range(64)]))\n    if base == 16:\n        return \"\".join(map(str,\
    \ [x >> i & 1 for i in range(64)]))\n    if base == 8:\n        return \"\".join(map(str,\
    \ [x >> i & 1 for i in range(64)]))\n    if base == 3:\n        return \"\".join(map(str,\
    \ [x >> i & 1 for i in range(64)]))\n    if base == 5:\n        return \"\".join(map(str,\
    \ [x >> i & 1 for i in range(64)]))\n    if base == 7:\n        return \"\".join(map(str,\
    \ [x >> i & 1 for i in range(64)]))\n    if base == 11:\n        return \"\".join(map(str,\
    \ [x >> i & 1 for i in range(64)]))\n    if base == 13:\n        return \"\".join(map(str,\
    \ [x >> i & 1 for i in range(64)]))\n    if base == 17:\n        return \"\".join(map(str,\
    \ [x >> i & 1 for i in range(64)]))\n    if base == 19:\n        return \"\".join(map(str,\
    \ [x >> i & 1 for i in range(64)]))\n    if base == 23:\n        return \"\".join(map(str,\
    \ [x >> i & 1 for i in range(64)]))\n    if base == 29:\n        return \"\".join(map(str,\
    \ [x >> i & 1 for i in range(64)]))\n    if base == 31:\n        return \"\".join(map(str,\
    \ [x >> i & 1 for i in range(64)]))\n    if base == 37:\n        return \"\".join(map(str,\
    \ [x >> i & 1 for", "    if base < 2 or base > 36:\n        raise ValueError(\"\
    base must be between 2 and 36\")\n    if x < 0:\n        raise ValueError(\"x\
    \ must be a positive integer\")\n    if x == 0:\n        return \"0\"\n    if\
    \ base == 10:\n        return str(x)\n    if base == 2:\n        return \"\".join([\"\
    1\" if i % 2 == 0 else \"0\" for i in range(x)])\n    if base == 16:\n       \
    \ return \"\".join([\"0\" if i < 10 else \"1\" for i in range(x)])\n    if base\
    \ == 8:\n        return \"\".join([\"0\" if i < 2 else \"1\" for i in range(x)])\n\
    \    if base == 3:\n        return \"\".join([\"1\" if i % 3 == 0 else \"0\" for\
    \ i in range(x)])\n    if base == 5:\n        return \"\".join([\"1\" if i % 5\
    \ == 0 else \"0\" for i in range(x)])\n    if base == 7:\n        return \"\"\
    .join([\"1\" if i % 7 == 0 else \"0\" for i in range(x)])\n    if base == 11:\n\
    \        return \"\".join([\"1\" if i % 11 == 0 else \"0\" for i in range(x)])\n\
    \    if base == 13:\n        return \"\".join([\"1\" if i % 13 == 0 else \"0\"\
    \ for i in range(x)])\n    if base == 17:\n        return \"\".join([\"1\" if\
    \ i % 17 == 0 else \"0\" for i in range(x)])\n    if base == 19:\n        return\
    \ \"\".join([\"1\" if i % 19 == 0 else \"0\" for i in range(x)])\n    if base\
    \ == 23:\n        return \"\".join([\"1\" if i % 23 == 0 else \"0\" for i in range(x)])\n\
    \    if base == 29:\n        return \"\".join([\"1\" if i % 29 == 0 else \"0\"\
    \ for i in range(x)])\n    if base == 31:\n        return \"\".join([\"1\" if\
    \ i % 31 == 0 else \"", "    if base < 2:\n        raise ValueError(\"Base must\
    \ be greater than 1\")\n    if base == 2:\n        return to_binary(x)\n    elif\
    \ base == 3:\n        return to_ternary(x)\n    elif base == 4:\n        return\
    \ to_quaternary(x)\n    elif base == 5:\n        return to_quinary(x)\n    elif\
    \ base == 6:\n        return to_senary(x)\n    elif base == 7:\n        return\
    \ to_septenary(x)\n    elif base == 8:\n        return to_octal(x)\n    elif base\
    \ == 9:\n        return to_nary(x)\n    elif base == 10:\n        return to_decimal(x)\n\
    \    else:\n        raise ValueError(\"Base must be less than 10\")", "    if\
    \ base < 2 or base > 10:\n        raise ValueError(\"Base must be between 2 and\
    \ 10\")\n    if x < 0:\n        raise ValueError(\"Negative numbers cannot be\
    \ converted\")\n    if x == 0:\n        return \"0\"\n    result = \"\"\n    while\
    \ x > 0:\n        remainder = x % base\n        result = remainder + result\n\
    \        x = x // base\n    return result", "    if base > 10:\n        return\
    \ \"Error: base must be less than 10\"\n    if base == 10:\n        return str(x)\n\
    \    if x < 0:\n        return \"Error: negative numbers cannot be converted to\
    \ base \" + str(base)\n    if x == 0:\n        return \"0\"\n    result = \"\"\
    \n    while x > 0:\n        remainder = x % base\n        result = str(remainder)\
    \ + result\n        x = x // base\n    return result", "    if base < 2 or base\
    \ > 36:\n        raise ValueError(\"Base must be between 2 and 36\")\n    if x\
    \ < 0:\n        raise ValueError(\"Negative numbers cannot be converted\")\n \
    \   if base == 10:\n        return str(x)\n    result = \"\"\n    while x > 0:\n\
    \        remainder = x % base\n        result = str(remainder) + result\n    \
    \    x = x // base\n    if len(result) == 0:\n        result = \"0\"\n    return\
    \ result", "    if base < 2:\n        raise Exception(\"Base must be greater than\
    \ 1\")\n    if base > 36:\n        raise Exception(\"Base must be less than 36\"\
    )\n    if x < 0:\n        raise Exception(\"Negative numbers are not supported\"\
    )\n    if x == 0:\n        return \"0\"\n    if base == 10:\n        return str(x)\n\
    \    if base == 2:\n        return \"\".join([\"1\" if bit else \"0\" for bit\
    \ in bin(x)[2:]])\n    if base == 16:\n        return \"\".join([\"1\" if bit\
    \ else \"0\" for bit in hex(x)[2:]])\n    if base == 8:\n        return \"\".join([\"\
    1\" if bit else \"0\" for bit in oct(x)[2:]])\n    if base == 3:\n        return\
    \ \"\".join([\"1\" if bit else \"0\" for bit in bin(x)[2:]])\n    if base == 5:\n\
    \        return \"\".join([\"1\" if bit else \"0\" for bit in bin(x)[2:]])\n \
    \   if base == 7:\n        return \"\".join([\"1\" if bit else \"0\" for bit in\
    \ bin(x)[2:]])\n    if base == 11:\n        return \"\".join([\"1\" if bit else\
    \ \"0\" for bit in bin(x)[2:]])\n    if base == 13:\n        return \"\".join([\"\
    1\" if bit else \"0\" for bit in bin(x)[2:]])\n    if base == 17:\n        return\
    \ \"\".join([\"1\" if bit else \"0\" for bit in bin(x)[2:]])\n    if base == 19:\n\
    \        return \"\".join([\"1\" if bit else \"0\" for bit in bin(x)[2:]])\n \
    \   if base == 23:\n        return \"\".join([\"1\" if bit else \"0\" for bit\
    \ in bin(x)[2:]])\n    if base == 29:\n        return \"\".join([\"1\" if bit\
    \ else \"0\" for bit in bin(x)[2:]])\n    if base == 31:\n        return \"\"\
    .join([\"1\" if bit else \"", "    if base < 2 or base > 36:\n        raise Exception(\"\
    Base must be between 2 and 36\")\n    if x < 0:\n        raise Exception(\"Negative\
    \ numbers are not supported\")\n    if x == 0:\n        return \"0\"\n    result\
    \ = \"\"\n    while x > 0:\n        remainder = x % base\n        result = remainder\
    \ + result\n        x = x // base\n    return result", '    return toString(x,
    base)', "    if base < 2 or base > 10:\n        raise Exception(\"Base must be\
    \ between 2 and 10\")\n    if x < 0:\n        raise Exception(\"Negative numbers\
    \ are not supported\")\n    if base == 10:\n        return str(x)\n    result\
    \ = \"\"\n    while x > 0:\n        remainder = x % base\n        result = str(remainder)\
    \ + result\n        x = x // base\n    return result", "    if base < 2 or base\
    \ > 36:\n        raise Exception(\"Invalid base\")\n    if x < 0:\n        raise\
    \ Exception(\"Negative numbers are not supported\")\n    if x == 0:\n        return\
    \ \"0\"\n    result = \"\"\n    while x > 0:\n        remainder = x % base\n \
    \       result = remainder + result\n        x = x // base\n    return result",
  '    return toString(x, base)', "    if base < 2 or base > 10:\n        raise Exception(\"\
    Base must be between 2 and 10\")\n    if x < 0:\n        raise Exception(\"Negative\
    \ numbers are not supported\")\n    if x == 0:\n        return \"0\"\n    result\
    \ = \"\"\n    while x > 0:\n        remainder = x % base\n        result = remainder\
    \ + result\n        x = x // base\n    return result", "    if base < 2 or base\
    \ > 36:\n        raise ValueError(\"Base must be between 2 and 36\")\n    if x\
    \ < 0:\n        raise ValueError(\"Negative numbers are not supported\")\n   \
    \ if x == 0:\n        return \"0\"\n    result = \"\"\n    while x > 0:\n    \
    \    remainder = x % base\n        result = remainder + result\n        x = x\
    \ // base\n    return result", "    if base > 10:\n        return \"Error: base\
    \ must be less than 10\"\n    if x < 0:\n        return \"Error: x must be non-negative\"\
    \n    if base == 10:\n        return to_string(x)\n    result = \"\"\n    while\
    \ x > 0:\n        remainder = x % base\n        result = to_string(remainder)\
    \ + result\n        x = x // base\n    return result", '    return toString(x,
    base)', "    if base > 10:\n        return \"Error: base must be less than 10\"\
    \n    if x < 0:\n        return \"Error: negative numbers cannot be converted\"\
    \n    if base == 10:\n        return str(x)\n    result = \"\"\n    while x >\
    \ 0:\n        remainder = x % base\n        result = str(remainder) + result\n\
    \        x = x // base\n    return result", "    return String(x)\n    \ndef change_base_str(x::String,\
    \ base::Int64)::String \n    return String(x)", "    if base < 2 or base > 36:\n\
    \        raise ValueError(\"base must be between 2 and 36\")\n    if x < 0:\n\
    \        raise ValueError(\"negative numbers cannot be converted to base\")\n\
    \    if x == 0:\n        return \"0\"\n    if base == 10:\n        return str(x)\n\
    \    if base == 2:\n        return \"\".join([\"1\" if i % 2 == 1 else \"0\" for\
    \ i in range(x)])\n    if base == 16:\n        return \"\".join([\"%x\" % i for\
    \ i in range(x)])\n    if base == 8:\n        return \"\".join([\"%o\" % i for\
    \ i in range(x)])\n    if base == 3:\n        return \"\".join([\"%o\" % i for\
    \ i in range(x)])\n    if base == 5:\n        return \"\".join([\"%o\" % i for\
    \ i in range(x)])\n    if base == 7:\n        return \"\".join([\"%o\" % i for\
    \ i in range(x)])\n    if base == 11:\n        return \"\".join([\"%o\" % i for\
    \ i in range(x)])\n    if base == 13:\n        return \"\".join([\"%o\" % i for\
    \ i in range(x)])\n    if base == 14:\n        return \"\".join([\"%o\" % i for\
    \ i in range(x)])\n    if base == 15:\n        return \"\".join([\"%o\" % i for\
    \ i in range(x)])\n    if base == 17:\n        return \"\".join([\"%o\" % i for\
    \ i in range(x)])\n    if base == 19:\n        return \"\".join([\"%o\" % i for\
    \ i in range(x)])\n    if base == 23:\n        return \"\".join([\"%o\" % i for\
    \ i in range(x)])\n    if base == 24:\n        return \"\".join([\"%o\" % i for\
    \ i in range(x)])\n    if base == 25:\n        return \"\".join([\"%o\" % i for\
    \ i in range(x)])\n    if base == 27:\n        return \"\".join", "    if base\
    \ > 10:\n        return \"Error: base must be less than 10\"\n    if base == 10:\n\
    \        return to_string(x)\n    if x < 0:\n        return \"Error: negative\
    \ number\"\n    if base == 2:\n        return to_string(x, 2)\n    if base ==\
    \ 3:\n        return to_string(x, 3)\n    if base == 4:\n        return to_string(x,\
    \ 4)\n    if base == 5:\n        return to_string(x, 5)\n    if base == 6:\n \
    \       return to_string(x, 6)\n    if base == 7:\n        return to_string(x,\
    \ 7)\n    if base == 8:\n        return to_string(x, 8)\n    if base == 9:\n \
    \       return to_string(x, 9)\n    if base == 16:\n        return to_string(x,\
    \ 16)\n    if base == 17:\n        return to_string(x, 17)\n    if base == 18:\n\
    \        return to_string(x, 18)\n    if base == 19:\n        return to_string(x,\
    \ 19)\n    if base == 20:\n        return to_string(x, 20)\n    if base == 21:\n\
    \        return to_string(x, 21)\n    if base == 22:\n        return to_string(x,\
    \ 22)\n    if base == 23:\n        return to_string(x, 23)\n    if base == 24:\n\
    \        return to_string(x, 24)\n    if base == 25:\n        return to_string(x,\
    \ 25)\n    if base == 26:\n        return to_string(x, 26)\n    if base == 27:\n\
    \        return to_string(x, 27)\n    if base == 28:\n        return to_string(x,\
    \ 28)\n    if base == 29:\n        return to_string(x, 29)\n    if base == 30:\n\
    \        return to_string(x, 30)\n    if base == 31:\n        return to_string(x,\
    \ 31)\n    if base == 32:\n        return to_string(x, 32)\n    if base == 33:\n\
    \        return to", '    return to_string(x, base)', "    if base > 10:\n   \
    \     raise ValueError(\"Base must be less than 10\")\n    if base == 10:\n  \
    \      return str(x)\n    if x < 0:\n        raise ValueError(\"Negative numbers\
    \ cannot be converted\")\n    if x == 0:\n        return \"0\"\n    result = \"\
    \"\n    while x > 0:\n        remainder = x % base\n        result = str(remainder)\
    \ + result\n        x = x // base\n    return result", "    if base < 2 or base\
    \ > 10:\n        raise Exception(\"Invalid base\")\n    if x < 0:\n        raise\
    \ Exception(\"Negative number\")\n    if x == 0:\n        return \"0\"\n    result\
    \ = \"\"\n    while x > 0:\n        remainder = x % base\n        result = remainder\
    \ + result\n        x = x // base\n    return result", '    return to_string(x,
    base)', "    if base < 2 or base > 10:\n        raise Exception(\"Base should\
    \ be between 2 and 10\")\n    if x < 0:\n        raise Exception(\"Negative numbers\
    \ are not supported\")\n    if base == 10:\n        return str(x)\n    if base\
    \ == 2:\n        return \"\".join([str(x // 2), \"0\"])\n    if base == 3:\n \
    \       return \"\".join([str(x // 3), \"0\", \"0\"])\n    if base == 4:\n   \
    \     return \"\".join([str(x // 4), \"0\", \"0\", \"0\"])\n    if base == 5:\n\
    \        return \"\".join([str(x // 5), \"0\", \"0\", \"0\", \"0\"])\n    if base\
    \ == 6:\n        return \"\".join([str(x // 6), \"0\", \"0\", \"0\", \"0\", \"\
    0\"])\n    if base == 7:\n        return \"\".join([str(x // 7), \"0\", \"0\"\
    , \"0\", \"0\", \"0\", \"0\"])\n    if base == 8:\n        return \"\".join([str(x\
    \ // 8), \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\"])\n    if base == 9:\n\
    \        return \"\".join([str(x // 9), \"0\", \"0\", \"0\", \"0\", \"0\", \"\
    0\", \"0\", \"0\"])\n    if base == 10:\n        return \"\".join([str(x // 10),\
    \ \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\"])\n    if base == 11:\n\
    \        return \"\".join([str(x // 11), \"0\", \"0\", \"0\", \"0\", \"0\", \"\
    0\", \"0\", \"0\", \"0\"])\n    if base == 12:\n        return \"\".join([str(x\
    \ // 12), \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\"\
    ])\n    if base == 13:\n        return \"\".join([str(x // 13), \"0\", \"0\",\
    \ \"0\", \"0\", \"0\", \"", '    return toString(x, base)', "    if base < 2 or\
    \ base > 36:\n        raise ValueError(\"Base should be between 2 and 36\")\n\
    \    if x < 0:\n        raise ValueError(\"Negative numbers are not supported\"\
    )\n    if x == 0:\n        return \"0\"\n    if base == 10:\n        return str(x)\n\
    \    if base == 2:\n        return \"\".join([\"1\" if i % 2 == 0 else \"0\" for\
    \ i in range(x)])\n    if base == 3:\n        return \"\".join([\"1\" if i % 3\
    \ == 0 else \"0\" for i in range(x)])\n    if base == 4:\n        return \"\"\
    .join([\"1\" if i % 4 == 0 else \"0\" for i in range(x)])\n    if base == 5:\n\
    \        return \"\".join([\"1\" if i % 5 == 0 else \"0\" for i in range(x)])\n\
    \    if base == 6:\n        return \"\".join([\"1\" if i % 6 == 0 else \"0\" for\
    \ i in range(x)])\n    if base == 7:\n        return \"\".join([\"1\" if i % 7\
    \ == 0 else \"0\" for i in range(x)])\n    if base == 8:\n        return \"\"\
    .join([\"1\" if i % 8 == 0 else \"0\" for i in range(x)])\n    if base == 9:\n\
    \        return \"\".join([\"1\" if i % 9 == 0 else \"0\" for i in range(x)])\n\
    \    if base == 16:\n        return \"\".join([\"1\" if i % 16 == 0 else \"0\"\
    \ for i in range(x)])\n    if base == 17:\n        return \"\".join([\"1\" if\
    \ i % 17 == 0 else \"0\" for i in range(x)])\n    if base == 18:\n        return\
    \ \"\".join([\"1\" if i % 18 == 0 else \"0\" for i in range(x)])\n    if base\
    \ == 19:\n        return \"\".join([\"1\" if i % 19 == 0 else \"0\" for i in range(x)])\n\
    \    if base == 20:\n        return \"\".join([\"1\" if i % 20", "    if base\
    \ < 2 or base > 36:\n        raise ValueError(\"Base must be between 2 and 36\"\
    )\n    if x < 0:\n        raise ValueError(\"Negative numbers cannot be converted\
    \ to base\")\n    if base == 10:\n        return str(x)\n    if base == 2:\n \
    \       return \"\".join([\"1\" if i % 2 == 0 else \"0\" for i in range(len(str(x)))])\n\
    \    if base == 16:\n        return \"\".join([\"1\" if i % 2 == 0 else \"0\"\
    \ for i in range(len(str(x)))])\n    if base == 8:\n        return \"\".join([\"\
    1\" if i % 3 == 0 else \"0\" for i in range(len(str(x)))])\n    if base == 3:\n\
    \        return \"\".join([\"1\" if i % 3 == 0 else \"0\" for i in range(len(str(x)))])\n\
    \    if base == 5:\n        return \"\".join([\"1\" if i % 5 == 0 else \"0\" for\
    \ i in range(len(str(x)))])\n    if base == 7:\n        return \"\".join([\"1\"\
    \ if i % 7 == 0 else \"0\" for i in range(len(str(x)))])\n    if base == 11:\n\
    \        return \"\".join([\"1\" if i % 11 == 0 else \"0\" for i in range(len(str(x)))])\n\
    \    if base == 13:\n        return \"\".join([\"1\" if i % 13 == 0 else \"0\"\
    \ for i in range(len(str(x)))])\n    if base == 17:\n        return \"\".join([\"\
    1\" if i % 17 == 0 else \"0\" for i in range(len(str(x)))])\n    if base == 19:\n\
    \        return \"\".join([\"1\" if i % 19 == 0 else \"0\" for i in range(len(str(x)))])\n\
    \    if base == 23:\n        return \"\".join([\"1\" if i % 23 == 0 else \"0\"\
    \ for i in range(len(str(x)))])\n    if base == 29:\n        return \"\".join([\"\
    1\" if i % 29 == 0", "    if base < 2 or base > 10:\n        raise Exception(\"\
    Base must be between 2 and 10\")\n    if x < 0:\n        raise Exception(\"Negative\
    \ numbers are not supported\")\n    if base == 10:\n        return str(x)\n  \
    \  if base == 2:\n        return \"\".join([\"1\" if i % 2 == 0 else \"0\" for\
    \ i in range(x)])\n    if base == 3:\n        return \"\".join([\"1\" if i % 3\
    \ == 0 else \"0\" for i in range(x)])\n    if base == 4:\n        return \"\"\
    .join([\"1\" if i % 4 == 0 else \"0\" for i in range(x)])\n    if base == 5:\n\
    \        return \"\".join([\"1\" if i % 5 == 0 else \"0\" for i in range(x)])\n\
    \    if base == 6:\n        return \"\".join([\"1\" if i % 6 == 0 else \"0\" for\
    \ i in range(x)])\n    if base == 7:\n        return \"\".join([\"1\" if i % 7\
    \ == 0 else \"0\" for i in range(x)])\n    if base == 8:\n        return \"\"\
    .join([\"1\" if i % 8 == 0 else \"0\" for i in range(x)])\n    if base == 9:\n\
    \        return \"\".join([\"1\" if i % 9 == 0 else \"0\" for i in range(x)])\n\
    \    if base == 11:\n        return \"\".join([\"1\" if i % 11 == 0 else \"0\"\
    \ for i in range(x)])\n    if base == 13:\n        return \"\".join([\"1\" if\
    \ i % 13 == 0 else \"0\" for i in range(x)])\n    if base == 14:\n        return\
    \ \"\".join([\"1\" if i % 14 == 0 else \"0\" for i in range(x)])\n    if base\
    \ == 15:\n        return \"\".join([\"1\" if i % 15 == 0 else \"0\" for i in range(x)])\n\
    \    if base == 16:\n        return \"\".join([\"1\" if i % 16 == 0 else \"0\"\
    \ for i in range(x)])\n", "    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if x < 0:\n        raise ValueError(\"Negative\
    \ numbers cannot be converted\")\n    if x == 0:\n        return \"0\"\n    if\
    \ base == 10:\n        return str(x)\n    if base == 2:\n        return \"\".join([\"\
    1\" if i % 2 == 1 else \"0\" for i in range(x)])\n    if base == 16:\n       \
    \ return \"\".join([\"0123456789abcdef\"[i] for i in range(x)])\n    if base ==\
    \ 8:\n        return \"\".join([\"01234567\"[i] for i in range(x)])\n    if base\
    \ == 3:\n        return \"\".join([\"1\" if i % 3 == 1 else \"0\" for i in range(x)])\n\
    \    if base == 5:\n        return \"\".join([\"1\" if i % 5 == 1 else \"0\" for\
    \ i in range(x)])\n    if base == 7:\n        return \"\".join([\"1\" if i % 7\
    \ == 1 else \"0\" for i in range(x)])\n    if base == 11:\n        return \"\"\
    .join([\"1\" if i % 11 == 1 else \"0\" for i in range(x)])\n    if base == 13:\n\
    \        return \"\".join([\"1\" if i % 13 == 1 else \"0\" for i in range(x)])\n\
    \    if base == 17:\n        return \"\".join([\"1\" if i % 17 == 1 else \"0\"\
    \ for i in range(x)])\n    if base == 19:\n        return \"\".join([\"1\" if\
    \ i % 19 == 1 else \"0\" for i in range(x)])\n    if base == 23:\n        return\
    \ \"\".join([\"1\" if i % 23 == 1 else \"0\" for i in range(x)])\n    if base\
    \ == 29:\n        return \"\".join([\"1\" if i % 29 == 1 else \"0\" for i in range(x)])\n\
    \    if base == 31:\n        return \"\".join([\"1\" if i % 31 == 1 else \"0\"\
    \ for", "    if base < 2 or base > 36:\n        raise ValueError(\"Base should\
    \ be in 2..36\")\n    if x < 0:\n        raise ValueError(\"Negative numbers are\
    \ not supported\")\n    if x == 0:\n        return \"0\"\n    if base == 10:\n\
    \        return str(x)\n    if base == 2:\n        return \"\".join([\"1\" if\
    \ i % 2 == 1 else \"0\" for i in range(x)])\n    if base == 3:\n        return\
    \ \"\".join([\"1\" if i % 3 == 1 else \"0\" for i in range(x)])\n    if base ==\
    \ 4:\n        return \"\".join([\"1\" if i % 4 == 1 else \"0\" for i in range(x)])\n\
    \    if base == 5:\n        return \"\".join([\"1\" if i % 5 == 1 else \"0\" for\
    \ i in range(x)])\n    if base == 6:\n        return \"\".join([\"1\" if i % 6\
    \ == 1 else \"0\" for i in range(x)])\n    if base == 7:\n        return \"\"\
    .join([\"1\" if i % 7 == 1 else \"0\" for i in range(x)])\n    if base == 8:\n\
    \        return \"\".join([\"1\" if i % 8 == 1 else \"0\" for i in range(x)])\n\
    \    if base == 9:\n        return \"\".join([\"1\" if i % 9 == 1 else \"0\" for\
    \ i in range(x)])\n    if base == 11:\n        return \"\".join([\"1\" if i %\
    \ 11 == 1 else \"0\" for i in range(x)])\n    if base == 13:\n        return \"\
    \".join([\"1\" if i % 13 == 1 else \"0\" for i in range(x)])\n    if base == 14:\n\
    \        return \"\".join([\"1\" if i % 14 == 1 else \"0\" for i in range(x)])\n\
    \    if base == 15:\n        return \"\".join([\"1\" if i % 15 == 1 else \"0\"\
    \ for i in range(x)])\n    if base == 16:\n        return \"\".join([\"1\" if\
    \ i % 16", '    return toString(x, base)', '    return toString(x, base)', " \
    \   if base < 2 or base > 36:\n        raise ValueError(\"Base should be 2 to\
    \ 36\")\n    if x < 0:\n        raise ValueError(\"Negative numbers are not supported\"\
    )\n    if base == 10:\n        return str(x)\n    if base == 2:\n        return\
    \ \"\".join([\"1\" if i % 2 == 1 else \"0\" for i in range(x)])\n    if base ==\
    \ 16:\n        return \"\".join([\"0\" if i < 10 else \"1\" if i > 9 else chr(i\
    \ + 87) for i in range(x)])\n    if base == 8:\n        return \"\".join([\"0\"\
    \ if i < 7 else \"1\" if i > 6 else chr(i + 87) for i in range(x)])\n    if base\
    \ == 3:\n        return \"\".join([\"1\" if i % 3 == 1 else \"0\" for i in range(x)])\n\
    \    if base == 5:\n        return \"\".join([\"1\" if i % 5 == 1 else \"0\" for\
    \ i in range(x)])\n    if base == 7:\n        return \"\".join([\"1\" if i % 7\
    \ == 1 else \"0\" for i in range(x)])\n    if base == 11:\n        return \"\"\
    .join([\"1\" if i % 11 == 1 else \"0\" for i in range(x)])\n    if base == 13:\n\
    \        return \"\".join([\"1\" if i % 13 == 1 else \"0\" for i in range(x)])\n\
    \    if base == 17:\n        return \"\".join([\"1\" if i % 17 == 1 else \"0\"\
    \ for i in range(x)])\n    if base == 19:\n        return \"\".join([\"1\" if\
    \ i % 19 == 1 else \"0\" for i in range(x)])\n    if base == 23:\n        return\
    \ \"\".join([\"1\" if i % 23 == 1 else \"0\" for i in range(x)])\n    if base\
    \ == 29:\n        return \"\".join([\"1\" if i % 29 == 1 else \"0\" for i in range(x)])\n\
    \    if base == 31:\n        return \"\".join([\"", "    if base < 2 or base >\
    \ 10:\n        raise Exception(\"Base must be between 2 and 10\")\n    if x <\
    \ 0:\n        raise Exception(\"Negative numbers are not supported\")\n    if\
    \ x == 0:\n        return \"0\"\n    if base == 10:\n        return str(x)\n \
    \   result = \"\"\n    while x > 0:\n        remainder = x % base\n        result\
    \ = str(remainder) + result\n        x = x // base\n    return result", "    if\
    \ base < 2 or base > 10:\n        raise Exception(\"Base must be between 2 and\
    \ 10\")\n    if x < 0:\n        raise Exception(\"Negative numbers are not supported\"\
    )\n    if x == 0:\n        return \"0\"\n    result = \"\"\n    while x > 0:\n\
    \        remainder = x % base\n        result = remainder + result\n        x\
    \ = x // base\n    return result", "    if base < 2 or base > 36:\n        raise\
    \ Exception(\"Base should be in 2..36\")\n    if x < 0:\n        return \"-\"\
    \ + change_base(-x, base)\n    if x == 0:\n        return \"0\"\n    if base ==\
    \ 10:\n        return str(x)\n    if base == 2:\n        return \"\".join([\"\
    1\" if i % 2 == 1 else \"0\" for i in range(x)])\n    if base == 16:\n       \
    \ return \"\".join([\"0123456789abcdef\"[i] for i in range(x)])\n    if base ==\
    \ 8:\n        return \"\".join([\"01234567\"[i] for i in range(x)])\n    if base\
    \ == 3:\n        return \"\".join([\"1\" if i % 3 == 1 else \"0\" for i in range(x)])\n\
    \    if base == 5:\n        return \"\".join([\"1\" if i % 5 == 1 else \"0\" for\
    \ i in range(x)])\n    if base == 7:\n        return \"\".join([\"1\" if i % 7\
    \ == 1 else \"0\" for i in range(x)])\n    if base == 11:\n        return \"\"\
    .join([\"1\" if i % 11 == 1 else \"0\" for i in range(x)])\n    if base == 13:\n\
    \        return \"\".join([\"1\" if i % 13 == 1 else \"0\" for i in range(x)])\n\
    \    if base == 17:\n        return \"\".join([\"1\" if i % 17 == 1 else \"0\"\
    \ for i in range(x)])\n    if base == 19:\n        return \"\".join([\"1\" if\
    \ i % 19 == 1 else \"0\" for i in range(x)])\n    if base == 23:\n        return\
    \ \"\".join([\"1\" if i % 23 == 1 else \"0\" for i in range(x)])\n    if base\
    \ == 29:\n        return \"\".join([\"1\" if i % 29 == 1 else \"0\" for i in range(x)])\n\
    \    if base == 31:\n        return \"\".join([\"1\" if i % 31 == 1 else \"0\"\
    \ for", "    if base < 2 or base > 36:\n        raise Exception(\"Base should\
    \ be in 2..36\")\n    if x < 0:\n        raise Exception(\"Negative numbers are\
    \ not supported\")\n    if x == 0:\n        return \"0\"\n    if base == 10:\n\
    \        return str(x)\n    if base == 2:\n        return \"\".join([\"1\" if\
    \ i % 2 == 1 else \"0\" for i in range(len(str(x)))])\n    if base == 3:\n   \
    \     return \"\".join([\"1\" if i % 3 == 1 else \"0\" for i in range(len(str(x)))])\n\
    \    if base == 4:\n        return \"\".join([\"1\" if i % 4 == 1 else \"0\" for\
    \ i in range(len(str(x)))])\n    if base == 5:\n        return \"\".join([\"1\"\
    \ if i % 5 == 1 else \"0\" for i in range(len(str(x)))])\n    if base == 6:\n\
    \        return \"\".join([\"1\" if i % 6 == 1 else \"0\" for i in range(len(str(x)))])\n\
    \    if base == 7:\n        return \"\".join([\"1\" if i % 7 == 1 else \"0\" for\
    \ i in range(len(str(x)))])\n    if base == 8:\n        return \"\".join([\"1\"\
    \ if i % 8 == 1 else \"0\" for i in range(len(str(x)))])\n    if base == 9:\n\
    \        return \"\".join([\"1\" if i % 9 == 1 else \"0\" for i in range(len(str(x)))])\n\
    \    if base == 16:\n        return \"\".join([\"1\" if i % 16 == 1 else \"0\"\
    \ for i in range(len(str(x)))])\n    if base == 17:\n        return \"\".join([\"\
    1\" if i % 17 == 1 else \"0\" for i in range(len(str(x)))])\n    if base == 18:\n\
    \        return \"\".join([\"1\" if i % 18 == 1 else \"0\" for i in range(len(str(x)))])\n\
    \    if base == 19:\n        return \"\".join(", "    if base < 2 or base > 10:\n\
    \        raise ValueError(\"Base must be between 2 and 10\")\n    if x < 0:\n\
    \        raise ValueError(\"Negative numbers cannot be converted\")\n    if x\
    \ == 0:\n        return \"0\"\n    if base == 10:\n        return str(x)\n   \
    \ if base == 2:\n        return \"\".join([\"1\" if i % 2 == 1 else \"0\" for\
    \ i in range(x)])\n    if base == 3:\n        return \"\".join([\"1\" if i % 3\
    \ == 1 else \"0\" for i in range(x)])\n    if base == 4:\n        return \"\"\
    .join([\"1\" if i % 4 == 1 else \"0\" for i in range(x)])\n    if base == 5:\n\
    \        return \"\".join([\"1\" if i % 5 == 1 else \"0\" for i in range(x)])\n\
    \    if base == 6:\n        return \"\".join([\"1\" if i % 6 == 1 else \"0\" for\
    \ i in range(x)])\n    if base == 7:\n        return \"\".join([\"1\" if i % 7\
    \ == 1 else \"0\" for i in range(x)])\n    if base == 8:\n        return \"\"\
    .join([\"1\" if i % 8 == 1 else \"0\" for i in range(x)])\n    if base == 9:\n\
    \        return \"\".join([\"1\" if i % 9 == 1 else \"0\" for i in range(x)])\n\
    \    if base == 11:\n        return \"\".join([\"1\" if i % 11 == 1 else \"0\"\
    \ for i in range(x)])\n    if base == 13:\n        return \"\".join([\"1\" if\
    \ i % 13 == 1 else \"0\" for i in range(x)])\n    if base == 14:\n        return\
    \ \"\".join([\"1\" if i % 14 == 1 else \"0\" for i in range(x)])\n    if base\
    \ == 15:\n        return \"\".join([\"1\" if i % 15 == 1 else \"0\" for i in range(x)])\n\
    \    if base == 16:\n        return \"\".join([\"1\" if i % 16", "    if base\
    \ < 2 or base > 10:\n        raise ValueError(\"Base should be between 2 and 10\"\
    )\n    if x < 0:\n        raise ValueError(\"Negative numbers are not supported\"\
    )\n    if base == 10:\n        return str(x)\n    if x == 0:\n        return \"\
    0\"\n    result = \"\"\n    while x > 0:\n        remainder = x % base\n     \
    \   result = str(remainder) + result\n        x = x // base\n    return result",
  "    if base < 2 or base > 10:\n        raise Exception(\"Base must be between 2\
    \ and 10\")\n    if x < 0:\n        raise Exception(\"Negative numbers are not\
    \ supported\")\n    if x == 0:\n        return \"0\"\n    if base == 10:\n   \
    \     return str(x)\n    if base == 2:\n        return \"\".join(map(str, list(bin(x)[2:].zfill(64))))\n\
    \    if base == 3:\n        return \"\".join(map(str, list(bin(x)[2:].zfill(64))))\n\
    \    if base == 4:\n        return \"\".join(map(str, list(bin(x)[2:].zfill(64))))\n\
    \    if base == 5:\n        return \"\".join(map(str, list(bin(x)[2:].zfill(64))))\n\
    \    if base == 6:\n        return \"\".join(map(str, list(bin(x)[2:].zfill(64))))\n\
    \    if base == 7:\n        return \"\".join(map(str, list(bin(x)[2:].zfill(64))))\n\
    \    if base == 8:\n        return \"\".join(map(str, list(bin(x)[2:].zfill(64))))\n\
    \    if base == 9:\n        return \"\".join(map(str, list(bin(x)[2:].zfill(64))))\n\
    \    if base == 10:\n        return \"\".join(map(str, list(bin(x)[2:].zfill(64))))\n\
    \    if base == 11:\n        return \"\".join(map(str, list(bin(x)[2:].zfill(64))))\n\
    \    if base == 12:\n        return \"\".join(map(str, list(bin(x)[2:].zfill(64))))\n\
    \    if base == 13:\n        return \"\".join(map(str, list(bin(x)[2:].zfill(64))))\n\
    \    if base == 14:\n        return \"\".join(map(str, list(bin(x)[2:].zfill(64))))\n\
    \    if base == 15:\n        return \"\".join(map(str, list(bin(x)[2:].", "  \
    \  if base < 2 or base > 10:\n        raise Exception(\"Base should be between\
    \ 2 and 10\")\n    if x < 0:\n        raise Exception(\"Negative numbers are not\
    \ supported\")\n    if x == 0:\n        return \"0\"\n    if base == 10:\n   \
    \     return str(x)\n    result = \"\"\n    while x > 0:\n        remainder =\
    \ x % base\n        result = str(remainder) + result\n        x = x // base\n\
    \    return result", "    if base > 10:\n        return \"Error: base must be\
    \ less than 10\"\n    if base == 10:\n        return to_string(x)\n    if x <\
    \ 0:\n        return \"Error: negative number\"\n    if x == 0:\n        return\
    \ \"0\"\n    if base == 2:\n        return to_string(x, 2)\n    if base == 3:\n\
    \        return to_string(x, 3)\n    if base == 4:\n        return to_string(x,\
    \ 4)\n    if base == 5:\n        return to_string(x, 5)\n    if base == 6:\n \
    \       return to_string(x, 6)\n    if base == 7:\n        return to_string(x,\
    \ 7)\n    if base == 8:\n        return to_string(x, 8)\n    if base == 9:\n \
    \       return to_string(x, 9)\n    if base == 16:\n        return to_string(x,\
    \ 16)\n    if base == 17:\n        return to_string(x, 17)\n    if base == 18:\n\
    \        return to_string(x, 18)\n    if base == 19:\n        return to_string(x,\
    \ 19)\n    if base == 20:\n        return to_string(x, 20)\n    if base == 21:\n\
    \        return to_string(x, 21)\n    if base == 22:\n        return to_string(x,\
    \ 22)\n    if base == 23:\n        return to_string(x, 23)\n    if base == 24:\n\
    \        return to_string(x, 24)\n    if base == 25:\n        return to_string(x,\
    \ 25)\n    if base == 26:\n        return to_string(x, 26)\n    if base == 27:\n\
    \        return to_string(x, 27)\n    if base == 28:\n        return to_string(x,\
    \ 28)\n    if base == 29:\n        return to_string(x, 29)\n    if base == 30:\n\
    \        return to_string(x, 30)\n    if base == 31:\n        return to_string(x,\
    \ 31)\n    if base == 32:\n        return to_string(x,", "    if base > 10:\n\
    \        return \"Error: base must be less than 10\"\n    if base == 10:\n   \
    \     return to_string(x)\n    if base == 2:\n        return to_string(x, 2)\n\
    \    if base == 3:\n        return to_string(x, 3)\n    if base == 4:\n      \
    \  return to_string(x, 4)\n    if base == 5:\n        return to_string(x, 5)\n\
    \    if base == 6:\n        return to_string(x, 6)\n    if base == 7:\n      \
    \  return to_string(x, 7)\n    if base == 8:\n        return to_string(x, 8)\n\
    \    if base == 9:\n        return to_string(x, 9)\n    if base == 16:\n     \
    \   return to_string(x, 16)\n    if base == 17:\n        return to_string(x, 17)\n\
    \    if base == 18:\n        return to_string(x, 18)\n    if base == 19:\n   \
    \     return to_string(x, 19)\n    if base == 20:\n        return to_string(x,\
    \ 20)\n    if base == 21:\n        return to_string(x, 21)\n    if base == 22:\n\
    \        return to_string(x, 22)\n    if base == 23:\n        return to_string(x,\
    \ 23)\n    if base == 24:\n        return to_string(x, 24)\n    if base == 25:\n\
    \        return to_string(x, 25)\n    if base == 26:\n        return to_string(x,\
    \ 26)\n    if base == 27:\n        return to_string(x, 27)\n    if base == 28:\n\
    \        return to_string(x, 28)\n    if base == 29:\n        return to_string(x,\
    \ 29)\n    if base == 30:\n        return to_string(x, 30)\n    if base == 31:\n\
    \        return to_string(x, 31)\n    if base == 32:\n        return to_string(x,\
    \ 32)\n    if base == 33:\n        return to_string(x, 33)\n    if base == 34:\n\
    \        ", "    if base > 10:\n        return \"Error: base must be less than\
    \ 10\"\n    if x < 0:\n        return \"Error: negative number\"\n    if x ==\
    \ 0:\n        return \"0\"\n    if base == 10:\n        return str(x)\n    if\
    \ base == 2:\n        return \"\".join(map(str, [x] * 10))\n    if base == 3:\n\
    \        return \"\".join(map(str, [x] * 3))\n    if base == 4:\n        return\
    \ \"\".join(map(str, [x] * 2))\n    if base == 5:\n        return \"\".join(map(str,\
    \ [x] * 4))\n    if base == 6:\n        return \"\".join(map(str, [x] * 3))\n\
    \    if base == 7:\n        return \"\".join(map(str, [x] * 2))\n    if base ==\
    \ 8:\n        return \"\".join(map(str, [x] * 2))\n    if base == 9:\n       \
    \ return \"\".join(map(str, [x] * 2))\n    if base == 11:\n        return \"\"\
    .join(map(str, [x] * 2))\n    if base == 12:\n        return \"\".join(map(str,\
    \ [x] * 2))\n    if base == 13:\n        return \"\".join(map(str, [x] * 2))\n\
    \    if base == 14:\n        return \"\".join(map(str, [x] * 2))\n    if base\
    \ == 15:\n        return \"\".join(map(str, [x] * 2))\n    if base == 16:\n  \
    \      return \"\".join(map(str, [x] * 2))\n    if base == 17:\n        return\
    \ \"\".join(map(str, [x] * 2))\n    if base == 18:\n        return \"\".join(map(str,\
    \ [x] * 2))\n    if base == 19:\n        return \"\".join(map(str, [x] * 2))\n\
    \    if base == 20:\n        return \"\".join(map(str, [x] * 2))\n    if base\
    \ == 21:\n        return \"\".join(map(str,", "    if base < 2 or base > 10:\n\
    \        raise ValueError(\"Base must be between 2 and 10\")\n    if x < 0:\n\
    \        raise ValueError(\"Negative numbers cannot be converted\")\n    if base\
    \ == 10:\n        return str(x)\n    if base == 2:\n        return \"\".join([\"\
    1\" if i % 2 == 0 else \"0\" for i in range(x)])\n    if base == 3:\n        return\
    \ \"\".join([\"1\" if i % 3 == 0 else \"0\" for i in range(x)])\n    if base ==\
    \ 4:\n        return \"\".join([\"1\" if i % 4 == 0 else \"0\" for i in range(x)])\n\
    \    if base == 5:\n        return \"\".join([\"1\" if i % 5 == 0 else \"0\" for\
    \ i in range(x)])\n    if base == 6:\n        return \"\".join([\"1\" if i % 6\
    \ == 0 else \"0\" for i in range(x)])\n    if base == 7:\n        return \"\"\
    .join([\"1\" if i % 7 == 0 else \"0\" for i in range(x)])\n    if base == 8:\n\
    \        return \"\".join([\"1\" if i % 8 == 0 else \"0\" for i in range(x)])\n\
    \    if base == 9:\n        return \"\".join([\"1\" if i % 9 == 0 else \"0\" for\
    \ i in range(x)])\n    if base == 11:\n        return \"\".join([\"1\" if i %\
    \ 11 == 0 else \"0\" for i in range(x)])\n    if base == 13:\n        return \"\
    \".join([\"1\" if i % 13 == 0 else \"0\" for i in range(x)])\n    if base == 14:\n\
    \        return \"\".join([\"1\" if i % 14 == 0 else \"0\" for i in range(x)])\n\
    \    if base == 15:\n        return \"\".join([\"1\" if i % 15 == 0 else \"0\"\
    \ for i in range(x)])\n    if base == 16:\n        return \"\".join([\"1\" if\
    \ i % 16 == 0 else \"0\" for i in range(x)", "    if base < 2 or base > 10:\n\
    \        raise Exception(\"Base must be between 2 and 10\")\n    if x < 0:\n \
    \       raise Exception(\"Negative numbers are not supported\")\n    if base ==\
    \ 10:\n        return str(x)\n    result = \"\"\n    while x > 0:\n        remainder\
    \ = x % base\n        result = str(remainder) + result\n        x = x // base\n\
    \    return result", "    if base < 2 or base > 10:\n        raise Exception(\"\
    Base must be between 2 and 10\")\n    if x < 0:\n        raise Exception(\"Negative\
    \ numbers are not supported\")\n    if x == 0:\n        return \"0\"\n    result\
    \ = \"\"\n    while x > 0:\n        remainder = x % base\n        result = remainder\
    \ + result\n        x = x // base\n    return result", '    return toString(x,
    base)', "    if base < 2 or base > 10:\n        raise ValueError(\"Base should\
    \ be between 2 and 10\")\n    if x < 0:\n        raise ValueError(\"Negative numbers\
    \ are not supported\")\n    if x == 0:\n        return \"0\"\n    result = \"\"\
    \n    while x > 0:\n        remainder = x % base\n        result = str(remainder)\
    \ + result\n        x = x // base\n    return result", "    if base < 2:\n   \
    \     raise ValueError(\"Base must be greater than 1\")\n    if base == 2:\n \
    \       return to_binary(x)\n    if base == 3:\n        return to_ternary(x)\n\
    \    if base == 4:\n        return to_quaternary(x)\n    if base == 5:\n     \
    \   return to_quinary(x)\n    if base == 6:\n        return to_senary(x)\n   \
    \ if base == 7:\n        return to_septenary(x)\n    if base == 8:\n        return\
    \ to_octal(x)\n    if base == 9:\n        return to_nonary(x)\n    if base ==\
    \ 10:\n        return to_decimal(x)\n    if base == 11:\n        return to_duodecimal(x)\n\
    \    if base == 12:\n        return to_tetraedecimal(x)\n    if base == 13:\n\
    \        return to_pentadecimal(x)\n    if base == 14:\n        return to_hexadecimal(x)\n\
    \    if base == 15:\n        return to_heptadecimal(x)\n    if base == 16:\n \
    \       return to_septemdecimal(x)\n    if base == 17:\n        return to_octodecimal(x)\n\
    \    if base == 18:\n        return to_enodedecimal(x)\n    if base == 19:\n \
    \       return to_nonadecimal(x)\n    if base == 20:\n        return to_tridecimal(x)\n\
    \    if base == 21:\n        return to_tredecimal(x)\n    if base == 22:\n   \
    \     return to_quattordecimal(x)\n    if base == 23:\n        return to_quindecimal(x)\n\
    \    if base == 24:\n        return to_sexdecimal(x)\n    if base == 25:\n   \
    \     return to_quindecimal(x)\n    if base == 26:\n        return to_seduodecimal(x)\n\
    \    if base == 27:\n        return to_sedecimal(x)\n    if base == 28:\n    \
    \    return to_", '    return toString(x, base)', "    if base < 2 or base > 10:\n\
    \        raise ValueError(\"Base must be between 2 and 10\")\n    if x < 0:\n\
    \        raise ValueError(\"Negative numbers cannot be converted\")\n    if base\
    \ == 10:\n        return str(x)\n    result = \"\"\n    while x > 0:\n       \
    \ remainder = x % base\n        result = str(remainder) + result\n        x =\
    \ x // base\n    return \"0\" * (len(result) - 1) + result", "    if base < 2\
    \ or base > 36:\n        raise Exception(\"Base must be between 2 and 36\")\n\
    \    if x < 0:\n        raise Exception(\"Negative numbers are not supported\"\
    )\n    if base == 10:\n        return str(x)\n    result = \"\"\n    while x >\
    \ 0:\n        remainder = x % base\n        result = remainder + result\n    \
    \    x = x // base\n    return result", "    if base < 2 or base > 36:\n     \
    \   raise ValueError(\"Base should be between 2 and 36\")\n    if x < 0:\n   \
    \     raise ValueError(\"Negative numbers are not supported\")\n    if base ==\
    \ 10:\n        return str(x)\n    if base == 2:\n        return \"\".join([\"\
    1\" if i % 2 == 0 else \"0\" for i in range(x)])\n    if base == 16:\n       \
    \ return \"\".join([\"1\" if i % 2 == 0 else \"0\" for i in range(x)])\n    if\
    \ base == 8:\n        return \"\".join([\"1\" if i % 3 == 0 else \"0\" for i in\
    \ range(x)])\n    if base == 3:\n        return \"\".join([\"1\" if i % 3 == 0\
    \ else \"0\" for i in range(x)])\n    if base == 5:\n        return \"\".join([\"\
    1\" if i % 5 == 0 else \"0\" for i in range(x)])\n    if base == 7:\n        return\
    \ \"\".join([\"1\" if i % 7 == 0 else \"0\" for i in range(x)])\n    if base ==\
    \ 11:\n        return \"\".join([\"1\" if i % 11 == 0 else \"0\" for i in range(x)])\n\
    \    if base == 13:\n        return \"\".join([\"1\" if i % 13 == 0 else \"0\"\
    \ for i in range(x)])\n    if base == 17:\n        return \"\".join([\"1\" if\
    \ i % 17 == 0 else \"0\" for i in range(x)])\n    if base == 19:\n        return\
    \ \"\".join([\"1\" if i % 19 == 0 else \"0\" for i in range(x)])\n    if base\
    \ == 23:\n        return \"\".join([\"1\" if i % 23 == 0 else \"0\" for i in range(x)])\n\
    \    if base == 29:\n        return \"\".join([\"1\" if i % 29 == 0 else \"0\"\
    \ for i in range(x)])\n    if base == 31:\n        return \"\".join([\"1\" if\
    \ i % 31 == 0 else \"0\" for i in range(x)", "    if base < 2 or base > 10:\n\
    \        raise Exception(\"Base must be between 2 and 10\")\n    if x < 0:\n \
    \       raise Exception(\"Negative numbers are not supported\")\n    if base ==\
    \ 10:\n        return str(x)\n    if base == 2:\n        return bin(x)[2:]\n \
    \   if base == 3:\n        return str(x)\n    if base == 4:\n        return bin(x)[2:]\n\
    \    if base == 5:\n        return str(x)\n    if base == 6:\n        return bin(x)[2:]\n\
    \    if base == 7:\n        return str(x)\n    if base == 8:\n        return bin(x)[2:]\n\
    \    if base == 9:\n        return str(x)\n    if base == 11:\n        return\
    \ str(x)\n    if base == 13:\n        return str(x)\n    if base == 14:\n    \
    \    return str(x)\n    if base == 15:\n        return str(x)\n    if base ==\
    \ 16:\n        return str(x)\n    if base == 17:\n        return str(x)\n    if\
    \ base == 18:\n        return str(x)\n    if base == 19:\n        return str(x)\n\
    \    if base == 20:\n        return str(x)\n    if base == 21:\n        return\
    \ str(x)\n    if base == 22:\n        return str(x)\n    if base == 23:\n    \
    \    return str(x)\n    if base == 24:\n        return str(x)\n    if base ==\
    \ 25:\n        return str(x)\n    if base == 26:\n        return str(x)\n    if\
    \ base == 27:\n        return str(x)\n    if base == 28:\n        return str(x)\n\
    \    if base == 29:\n        return str(x)\n    if base == 30:\n        return\
    \ str(x)\n    if base == 31:\n        return str(x)\n    if base == 32:\n    \
    \    return str(x)\n    if base == 33:\n        return str(x)\n    if base ==\
    \ 34:\n        return str(x)\n    if base == 35:\n        return str(x)", '    return
    to_string(x, base)', "    if base < 2 or base > 36:\n        raise Exception(\"\
    Base must be between 2 and 36\")\n    if x < 0:\n        raise Exception(\"Negative\
    \ numbers are not supported\")\n    if x == 0:\n        return \"0\"\n    if base\
    \ == 10:\n        return str(x)\n    if base == 2:\n        return bin(x)[2:].zfill(64)\n\
    \    if base == 16:\n        return hex(x)[2:].zfill(64)\n    if base == 8:\n\
    \        return oct(x)[2:].zfill(64)\n    if base == 3:\n        return bin(x)[2:].zfill(64)\n\
    \    if base == 5:\n        return bin(x)[2:].zfill(64)\n    if base == 7:\n \
    \       return bin(x)[2:].zfill(64)\n    if base == 11:\n        return bin(x)[2:].zfill(64)\n\
    \    if base == 13:\n        return bin(x)[2:].zfill(64)\n    if base == 17:\n\
    \        return bin(x)[2:].zfill(64)\n    if base == 19:\n        return bin(x)[2:].zfill(64)\n\
    \    if base == 23:\n        return bin(x)[2:].zfill(64)\n    if base == 29:\n\
    \        return bin(x)[2:].zfill(64)\n    if base == 31:\n        return bin(x)[2:].zfill(64)\n\
    \    if base == 37:\n        return bin(x)[2:].zfill(64)\n    if base == 41:\n\
    \        return bin(x)[2:].zfill(64)\n    if base == 43:\n        return bin(x)[2:].zfill(64)\n\
    \    if base == 47:\n        return bin(x)[2:].zfill(64)\n    if base == 53:\n\
    \        return bin(x)[2:].zfill(64)\n    if base == 59:\n        return bin(x)[2:].zfill(64)\n\
    \    if base == 61:\n        return bin(x)[2:].zfill(64)\n    if", "    if base\
    \ < 2 or base > 36:\n        raise Exception(\"Invalid base\")\n    if x == 0:\n\
    \        return \"0\"\n    if x < 0:\n        raise Exception(\"Negative numbers\
    \ are not supported\")\n    if x < base:\n        return str(x)\n    result =\
    \ \"\"\n    while x > 0:\n        result = str(x % base) + result\n        x =\
    \ x // base\n    return result", "    if base < 2 or base > 10:\n        raise\
    \ Exception(\"Base must be between 2 and 10\")\n    if x < 0:\n        raise Exception(\"\
    Negative numbers are not supported\")\n    if base == 10:\n        return str(x)\n\
    \    result = \"\"\n    while x > 0:\n        remainder = x % base\n        result\
    \ = str(remainder) + result\n        x = x // base\n    return result", "    if\
    \ base < 2 or base > 10:\n        raise ValueError(\"base must be between 2 and\
    \ 10\")\n    if x < 0:\n        raise ValueError(\"negative numbers cannot be\
    \ converted\")\n    if base == 10:\n        return str(x)\n    if x == 0:\n  \
    \      return \"0\"\n    if base == 2:\n        return \"\".join([\"1\" if i %\
    \ 2 == 1 else \"0\" for i in range(64)])[:x]\n    if base == 3:\n        return\
    \ \"\".join([\"1\" if i % 3 == 1 else \"0\" for i in range(64)])[:x]\n    if base\
    \ == 4:\n        return \"\".join([\"1\" if i % 4 == 1 else \"0\" for i in range(64)])[:x]\n\
    \    if base == 5:\n        return \"\".join([\"1\" if i % 5 == 1 else \"0\" for\
    \ i in range(64)])[:x]\n    if base == 6:\n        return \"\".join([\"1\" if\
    \ i % 6 == 1 else \"0\" for i in range(64)])[:x]\n    if base == 7:\n        return\
    \ \"\".join([\"1\" if i % 7 == 1 else \"0\" for i in range(64)])[:x]\n    if base\
    \ == 8:\n        return \"\".join([\"1\" if i % 8 == 1 else \"0\" for i in range(64)])[:x]\n\
    \    if base == 9:\n        return \"\".join([\"1\" if i % 9 == 1 else \"0\" for\
    \ i in range(64)])[:x]\n    if base == 10:\n        return \"\".join([\"1\" if\
    \ i % 10 == 1 else \"0\" for i in range(64)])[:x]\n    if base == 11:\n      \
    \  return \"\".join([\"1\" if i % 11 == 1 else \"0\" for i in range(64)])[:x]\n\
    \    if base == 12:\n        return \"\".join([\"1\" if i % 12 == 1 else \"0\"\
    \ for i in range(64)])[:x]\n    if base == 13:\n        return \"\".join", " \
    \   if base < 2 or base > 16:\n        raise Exception(\"Base must be between\
    \ 2 and 16\")\n    if x < 0:\n        raise Exception(\"Negative numbers are not\
    \ supported\")\n    if base == 16:\n        return hex(x)\n    if base == 2:\n\
    \        return bin(x)[2:]\n    if base == 8:\n        return oct(x)[2:]\n   \
    \ return str(x)", "    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base should be between 2 and 36\")\n    if x < 0:\n        raise ValueError(\"\
    Negative numbers are not supported\")\n    if base == 10:\n        return str(x)\n\
    \    if base == 2:\n        return bin(x)[2:].zfill(64)\n    if base == 16:\n\
    \        return hex(x)[2:].zfill(64)\n    if base == 8:\n        return oct(x)[2:].zfill(64)\n\
    \    if base == 3:\n        return bin(x)[2:].zfill(64)\n    if base == 5:\n \
    \       return bin(x)[2:].zfill(64)\n    if base == 7:\n        return bin(x)[2:].zfill(64)\n\
    \    if base == 11:\n        return bin(x)[2:].zfill(64)\n    if base == 13:\n\
    \        return bin(x)[2:].zfill(64)\n    if base == 17:\n        return bin(x)[2:].zfill(64)\n\
    \    if base == 19:\n        return bin(x)[2:].zfill(64)\n    if base == 23:\n\
    \        return bin(x)[2:].zfill(64)\n    if base == 29:\n        return bin(x)[2:].zfill(64)\n\
    \    if base == 31:\n        return bin(x)[2:].zfill(64)\n    if base == 37:\n\
    \        return bin(x)[2:].zfill(64)\n    if base == 41:\n        return bin(x)[2:].zfill(64)\n\
    \    if base == 43:\n        return bin(x)[2:].zfill(64)\n    if base == 47:\n\
    \        return bin(x)[2:].zfill(64)\n    if base == 53:\n        return bin(x)[2:].zfill(64)\n\
    \    if base == 59:\n        return bin(x)[2:].zfill(64)\n    if base == 61:\n\
    \        return bin(x)[2:].zfill(64)\n    if base == 67:\n        return bin(x)[",
  "    return String(x)\n    \ndef change_base_str(x::String, base::Int64)::String\
    \ \n    return String(change_base(x, base))", "    if base < 2 or base > 36:\n\
    \        raise Exception(\"Base must be between 2 and 36\")\n    if x < 0:\n \
    \       raise Exception(\"Negative numbers are not supported\")\n    if x == 0:\n\
    \        return \"0\"\n    if base == 10:\n        return str(x)\n    result =\
    \ \"\"\n    while x > 0:\n        remainder = x % base\n        result = str(remainder)\
    \ + result\n        x = x // base\n    return result", '    return toString(x,
    base)', "    if base < 2 or base > 36:\n        raise ValueError(\"Base should\
    \ be between 2 and 36\")\n    if x < 0:\n        raise ValueError(\"Negative numbers\
    \ are not supported\")\n    if x == 0:\n        return \"0\"\n    if base == 10:\n\
    \        return str(x)\n    result = \"\"\n    while x > 0:\n        remainder\
    \ = x % base\n        result = str(remainder) + result\n        x = x // base\n\
    \    return result", "    if base < 2 or base > 10:\n        raise ValueError(\"\
    Base should be between 2 and 10\")\n    if x < 0:\n        raise ValueError(\"\
    Negative numbers are not supported\")\n    if base == 10:\n        return str(x)\n\
    \    result = \"\"\n    while x > 0:\n        remainder = x % base\n        result\
    \ = str(remainder) + result\n        x = x // base\n    return result", "    if\
    \ base < 2 or base > 36:\n        raise ValueError(\"Base should be between 2\
    \ and 36\")\n    if x < 0:\n        raise ValueError(\"Negative numbers are not\
    \ supported\")\n    if base == 10:\n        return str(x)\n    if base == 2:\n\
    \        return \"\".join(map(str, bin(x)[2:].zfill(64)))\n    if base == 16:\n\
    \        return \"\".join(map(str, hex(x)[2:].zfill(64)))\n    if base == 8:\n\
    \        return \"\".join(map(str, oct(x)[2:].zfill(64)))\n    if base == 3:\n\
    \        return \"\".join(map(str, bin(x)[2:].zfill(64)))\n    if base == 5:\n\
    \        return \"\".join(map(str, bin(x)[2:].zfill(64)))\n    if base == 7:\n\
    \        return \"\".join(map(str, bin(x)[2:].zfill(64)))\n    if base == 11:\n\
    \        return \"\".join(map(str, bin(x)[2:].zfill(64)))\n    if base == 13:\n\
    \        return \"\".join(map(str, bin(x)[2:].zfill(64)))\n    if base == 17:\n\
    \        return \"\".join(map(str, bin(x)[2:].zfill(64)))\n    if base == 19:\n\
    \        return \"\".join(map(str, bin(x)[2:].zfill(64)))\n    if base == 23:\n\
    \        return \"\".join(map(str, bin(x)[2:].zfill(64)))\n    if base == 29:\n\
    \        return \"\".join(map(str, bin(x)[2:].zfill(64)))\n    if base == 31:\n\
    \        return \"\".join(map(str, bin(x)[2:].zfill(64)))\n    if base == 37:\n\
    \        return \"\".join(map(str, bin(x)[2:].zfill(64)))\n    if base == 41:\n\
    \        return \"\".join(map(str, bin(x)[2:].zfill(64)))\n    if base", "   \
    \ if base < 2 or base > 36:\n        raise ValueError(\"Base must be between 2\
    \ and 36\")\n    if x < 0:\n        raise ValueError(\"Negative numbers cannot\
    \ be converted\")\n    if base == 10:\n        return str(x)\n    if base == 2:\n\
    \        return bin(x)[2:]\n    if base == 16:\n        return hex(x)[2:]\n  \
    \  if base == 8:\n        return oct(x)[2:]\n    if base == 3:\n        return\
    \ bin(x)[2:].rjust(8, '0')\n    if base == 5:\n        return bin(x)[2:].rjust(5,\
    \ '0')\n    if base == 7:\n        return bin(x)[2:].rjust(3, '0')\n    if base\
    \ == 17:\n        return hex(x)[2:].rjust(4, '0')\n    if base == 19:\n      \
    \  return hex(x)[2:].rjust(6, '0')\n    if base == 23:\n        return hex(x)[2:].rjust(8,\
    \ '0')\n    if base == 29:\n        return hex(x)[2:].rjust(10, '0')\n    if base\
    \ == 31:\n        return hex(x)[2:].rjust(5, '0')\n    if base == 37:\n      \
    \  return hex(x)[2:].rjust(11, '0')\n    if base == 41:\n        return hex(x)[2:].rjust(13,\
    \ '0')\n    if base == 43:\n        return hex(x)[2:].rjust(7, '0')\n    if base\
    \ == 47:\n        return hex(x)[2:].rjust(17, '0')\n    if base == 53:\n     \
    \   return hex(x)[2:].rjust(19, '0')\n    if base == 59:\n        return hex(x)[2:].rjust(11,\
    \ '0')\n    if base == 61:\n        return hex(x)[2:].rjust(13, '0')\n    if base\
    \ == 67:\n        return hex(x)[2:].rjust(7, '0')\n    if base == 71", "    if\
    \ base < 2:\n        raise Exception(\"Base must be greater than 1\")\n    if\
    \ base > 36:\n        raise Exception(\"Base must be less than 36\")\n    if x\
    \ < 0:\n        raise Exception(\"Negative numbers are not supported\")\n    if\
    \ x == 0:\n        return \"0\"\n    if base == 10:\n        return str(x)\n \
    \   if base == 2:\n        return \"\".join([\"1\" if i % 2 == 0 else \"0\" for\
    \ i in range(len(str(x)))])\n    if base == 3:\n        return \"\".join([\"1\"\
    \ if i % 3 == 0 else \"0\" for i in range(len(str(x)))])\n    if base == 4:\n\
    \        return \"\".join([\"1\" if i % 4 == 0 else \"0\" for i in range(len(str(x)))])\n\
    \    if base == 5:\n        return \"\".join([\"1\" if i % 5 == 0 else \"0\" for\
    \ i in range(len(str(x)))])\n    if base == 6:\n        return \"\".join([\"1\"\
    \ if i % 6 == 0 else \"0\" for i in range(len(str(x)))])\n    if base == 7:\n\
    \        return \"\".join([\"1\" if i % 7 == 0 else \"0\" for i in range(len(str(x)))])\n\
    \    if base == 8:\n        return \"\".join([\"1\" if i % 8 == 0 else \"0\" for\
    \ i in range(len(str(x)))])\n    if base == 9:\n        return \"\".join([\"1\"\
    \ if i % 9 == 0 else \"0\" for i in range(len(str(x)))])\n    if base == 11:\n\
    \        return \"\".join([\"1\" if i % 11 == 0 else \"0\" for i in range(len(str(x)))])\n\
    \    if base == 13:\n        return \"\".join([\"1\" if i % 13 == 0 else \"0\"\
    \ for i in range(len(str(x)))])\n    if base == 14:\n        return \"\".join([\"\
    1\" if i % 14 == 0 else \"0\" for i in range(len(str(x)))])", "    if base < 2\
    \ or base > 10:\n        raise Exception(\"Invalid base\")\n    if x < 0:\n  \
    \      raise Exception(\"Negative number\")\n    if x == 0:\n        return \"\
    0\"\n    if base == 10:\n        return str(x)\n    if base == 2:\n        return\
    \ \"\".join([\"1\" if i % 2 == 0 else \"0\" for i in range(x)])\n    if base ==\
    \ 3:\n        return \"\".join([\"1\" if i % 3 == 0 else \"0\" for i in range(x)])\n\
    \    if base == 4:\n        return \"\".join([\"1\" if i % 4 == 0 else \"0\" for\
    \ i in range(x)])\n    if base == 5:\n        return \"\".join([\"1\" if i % 5\
    \ == 0 else \"0\" for i in range(x)])\n    if base == 6:\n        return \"\"\
    .join([\"1\" if i % 6 == 0 else \"0\" for i in range(x)])\n    if base == 7:\n\
    \        return \"\".join([\"1\" if i % 7 == 0 else \"0\" for i in range(x)])\n\
    \    if base == 8:\n        return \"\".join([\"1\" if i % 8 == 0 else \"0\" for\
    \ i in range(x)])\n    if base == 9:\n        return \"\".join([\"1\" if i % 9\
    \ == 0 else \"0\" for i in range(x)])\n    if base == 11:\n        return \"\"\
    .join([\"1\" if i % 11 == 0 else \"0\" for i in range(x)])\n    if base == 13:\n\
    \        return \"\".join([\"1\" if i % 13 == 0 else \"0\" for i in range(x)])\n\
    \    if base == 14:\n        return \"\".join([\"1\" if i % 14 == 0 else \"0\"\
    \ for i in range(x)])\n    if base == 15:\n        return \"\".join([\"1\" if\
    \ i % 15 == 0 else \"0\" for i in range(x)])\n    if base == 16:\n        return\
    \ \"\".join([\"1\" if i % 16 == 0 else \"0\" for i in range", "    if base < 2\
    \ or base > 10:\n        raise Exception(\"Base must be between 2 and 10\")\n\
    \    if x < 0:\n        raise Exception(\"Negative numbers are not supported\"\
    )\n    if x == 0:\n        return \"0\"\n    if base == 10:\n        return str(x)\n\
    \    result = \"\"\n    while x > 0:\n        remainder = x % base\n        result\
    \ = str(remainder) + result\n        x = x // base\n    return result", "    if\
    \ base < 2 or base > 10:\n        raise Exception(\"Base must be between 2 and\
    \ 10\")\n    if x < 0:\n        raise Exception(\"Negative numbers are not supported\"\
    )\n    if base == 10:\n        return str(x)\n    result = \"\"\n    while x >\
    \ 0:\n        remainder = x % base\n        result = str(remainder) + result\n\
    \        x = x // base\n    return result", "    if base < 2 or base > 36:\n \
    \       raise ValueError(\"Base must be between 2 and 36\")\n    if x < 0:\n \
    \       raise ValueError(\"Negative numbers cannot be converted\")\n    if base\
    \ == 10:\n        return str(x)\n    if base == 2:\n        return \"\".join([\"\
    1\" if i % 2 == 0 else \"0\" for i in range(len(str(x)) + 1)])\n    if base ==\
    \ 16:\n        return \"\".join([\"1\" if i % 2 == 0 else \"0\" for i in range(len(str(x))\
    \ + 1)])\n    if base == 8:\n        return \"\".join([\"1\" if i % 3 == 0 else\
    \ \"0\" for i in range(len(str(x)) + 1)])\n    if base == 3:\n        return \"\
    \".join([\"1\" if i % 5 == 0 else \"0\" for i in range(len(str(x)) + 1)])\n  \
    \  if base == 5:\n        return \"\".join([\"1\" if i % 3 == 0 else \"0\" for\
    \ i in range(len(str(x)) + 1)])\n    if base == 7:\n        return \"\".join([\"\
    1\" if i % 2 == 0 else \"0\" for i in range(len(str(x)) + 1)])\n    if base ==\
    \ 9:\n        return \"\".join([\"1\" if i % 3 == 0 else \"0\" for i in range(len(str(x))\
    \ + 1)])\n    if base == 11:\n        return \"\".join([\"1\" if i % 2 == 0 else\
    \ \"0\" for i in range(len(str(x)) + 1)])\n    if base == 13:\n        return\
    \ \"\".join([\"1\" if i % 5 == 0 else \"0\" for i in range(len(str(x)) + 1)])\n\
    \    if base == 14:\n        return \"\".join([\"1\" if i % 7 == 0 else \"0\"\
    \ for i in range(len(str(x)) + 1)])\n    if base == 15:\n        return \"\".join([\"\
    1\" if i % 3 == 0 else \"0\" for i in range(len(", "    return String(x)\n   \
    \ \n    \ndef main():\n    print(change_base(8, 3))\n    print(change_base(8,\
    \ 2))\n    print(change_base(7, 2))\n    \nif __name__ == \"__main__\":\n    main()\n",
  "    if base > 10:\n        return \"ERROR\"\n    if base == 10:\n        return\
    \ to_string(x)\n    if base == 2:\n        return to_string(x, 2)\n    if base\
    \ == 3:\n        return to_string(x, 3)\n    if base == 4:\n        return to_string(x,\
    \ 4)\n    if base == 5:\n        return to_string(x, 5)\n    if base == 6:\n \
    \       return to_string(x, 6)\n    if base == 7:\n        return to_string(x,\
    \ 7)\n    if base == 8:\n        return to_string(x, 8)\n    if base == 9:\n \
    \       return to_string(x, 9)\n    if base == 10:\n        return to_string(x,\
    \ 10)\n    if base == 11:\n        return to_string(x, 11)\n    if base == 12:\n\
    \        return to_string(x, 12)\n    if base == 13:\n        return to_string(x,\
    \ 13)\n    if base == 14:\n        return to_string(x, 14)\n    if base == 15:\n\
    \        return to_string(x, 15)\n    if base == 16:\n        return to_string(x,\
    \ 16)\n    if base == 17:\n        return to_string(x, 17)\n    if base == 18:\n\
    \        return to_string(x, 18)\n    if base == 19:\n        return to_string(x,\
    \ 19)\n    if base == 20:\n        return to_string(x, 20)\n    if base == 21:\n\
    \        return to_string(x, 21)\n    if base == 22:\n        return to_string(x,\
    \ 22)\n    if base == 23:\n        return to_string(x, 23)\n    if base == 24:\n\
    \        return to_string(x, 24)\n    if base == 25:\n        return to_string(x,\
    \ 25)\n    if base == 26:\n        return to_string(x, 26)\n    if base == 27:\n\
    \        return to_string(x, 27)\n    if base == 28:\n        return to_string(x,",
  "    if base < 2 or base > 36:\n        raise ValueError(\"Base must be between\
    \ 2 and 36\")\n    if x < 0:\n        raise ValueError(\"Negative numbers are\
    \ not supported\")\n    if base == 10:\n        return str(x)\n    if base ==\
    \ 2:\n        return \"\".join([\"1\" if i % 2 == 1 else \"0\" for i in range(len(str(x)))])\n\
    \    if base == 16:\n        return \"\".join([\"{0:x}\".format(x) for x in range(len(str(x)))])\n\
    \    if base == 8:\n        return \"\".join([\"{0:o}\".format(x) for x in range(len(str(x)))])\n\
    \    if base == 3:\n        return \"\".join([\"{0:b}\".format(x) for x in range(len(str(x)))])\n\
    \    return \"\".join([\"{0:d}\".format(x) for x in range(len(str(x)))])"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
