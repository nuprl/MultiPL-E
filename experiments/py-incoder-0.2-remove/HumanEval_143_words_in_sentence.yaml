name: HumanEval_143_words_in_sentence
language: py
prompt: "def words_in_sentence(sentence: str) -> str:\n    \"\"\"\n    You are given\
  \ a string representing a sentence,\n    the sentence contains some words separated\
  \ by a space,\n    and you have to return a string that contains the words from\
  \ the original sentence,\n    whose lengths are prime numbers,\n    the order of\
  \ the words in the new string should be the same as the original one.\n\n    Example\
  \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
  \ <= 100\n        * sentence contains only letters\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate('This is a test') == 'is'\n  \
  \  assert candidate('lets go for swimming') == 'go for'\n    assert candidate('there\
  \ is no place available here') == 'there is no place'\n    assert candidate('Hi\
  \ I am Hussein') == 'Hi am Hussein'\n    assert candidate('go for it') == 'go for\
  \ it'\n    assert candidate('here') == ''\n    assert candidate('here is') == 'is'\n\
  \ndef test_check():\n    check(words_in_sentence)\n\ntest_check()\n"
completions: ["    \n    # Your code here\n    \n    return \"\"\n</cell>\n<text>\n\
    Run the cell below to test your code:\n\n\n</text>\n<cell>\nsentence = \"The quick\
    \ brown fox jumps over the lazy dog\"\nprint(\"The original sentence is: \" +\
    \ sentence)\nprint(\"The words in the sentence are: \" + words_in_sentence(sentence))\n\
    </cell>\n<text>\nExpected Output:\n\nThe original sentence is: The quick brown\
    \ fox jumps over the lazy dog\nThe words in the sentence are: quick brown fox\
    \ jumps over lazy dog\n\n</text>\n<text>\nExercise 3:\nWrite a function that takes\
    \ a sentence and returns a list containing the words in the sentence in alphabetical\
    \ order.\n\n\n</text>\n<cell>", "    \n    # Your code here\n    \n    return\
    \ \"\"\n", "    \n    # Your code here\n    \n    return \"\"\n", "    \n    #\
    \ Your code here\n    \n    return \"\"\n</cell>\n<text>\nRun the following cell\
    \ to check your implementation. Note that the expected output differs slightly\
    \ from ours.\n\n\n</text>\n<cell>\ncheck_string('abc def ghi')\n</cell>\n<text>\n\
    Implement the check_sentence function below.\n\n\n</text>\n<cell>", "    \n  \
    \  # Your code here\n    \n    return \"\"\n</cell>\n<text>\nRun the cell below\
    \ to test your code. Note that the expected output takes about 1 minute to run.\n\
    \n\n</text>\n<cell>", "    \n    # Your code here\n    \n    return \"\"\n</cell>\n\
    <text>\nRun the following cell to test your code:\n\n\n</text>\n<cell>\nsentence\
    \ = \"The quick brown fox jumps over the lazy dog\"\nprint(\"Input: \" + sentence)\n\
    print(\"Output: \" + words_in_sentence(sentence))\n</cell>\n<text>\nExpected Output:\n\
    \nInput: The quick brown fox jumps over the lazy dog\nOutput: quick brown fox\
    \ jumps over lazy dog\n\n</text>\n<text>\nExercise 3:\nWrite a function that takes\
    \ a string as input and returns a string with all words reversed.\n\nExample 1:\n\
    Input: \"The quick brown fox jumps over the lazy dog\"\nOutput: \"dog over lazy\
    \ jumps fox brown quick the\"\n\nExample 2:\nInput: \"The quick brown fox jumps\
    \ over the lazy dog\"\nOutput: \"g over lazy jumps fox brown quick the\"\n\n</text>\n\
    <cell>", "    \n    # Your code here\n    \n    return \"\"\n", "    \n    # Your\
    \ code here\n    \n    return \"\"\n", "    \n    words = sentence.split()\n \
    \   \n    prime_words = []\n    \n    for word in words:\n        \n        prime_words.append(len(word))\n\
    \        \n    prime_words.sort()\n    \n    prime_words = [str(x) for x in prime_words]\n\
    \    \n    return \" \".join(prime_words)\n</cell>\n<text>\nLet's test our function\n\
    \n\n</text>\n<cell>\nwords_in_sentence(\"The quick brown fox jumps over the lazy\
    \ dog\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and\
    \ returns the number of words in the string that are prime numbers.\n\nExample\
    \ 1:\n\nInput: \"The quick brown fox jumps over the lazy dog\"\nOutput: 5\nExplanation:\
    \ The quick brown fox jumps over the lazy dog has 5 prime numbers.\n\nExample\
    \ 2:\n\nInput: \"The quick brown fox jumps over the lazy dog The quick brown fox\
    \ jumps over the lazy dog\"\nOutput: 8\nExplanation: The quick brown fox jumps\
    \ over the lazy dog has 8 prime numbers.\n\nConstraints:\n1 <= len(sentence) <=\
    \ 100\nsentence contains only letters\nThe length of the string will not exceed\
    \ 10,000\n\n\n</text>\n<cell>", "    \n    # Your code here\n    \n    return\
    \ \"\"\n</cell>\n<text>\nRun the following cell to test your code. Note that the\
    \ expected value passes and the output matches what we expected.\n\n\n</text>\n\
    <cell>\nsentence = \"The quick brown fox jumps over the lazy dog\"\nprint(\"Input:\
    \ \" + sentence)\nprint(\"Output: \" + words_in_sentence(sentence))\n\nsentence\
    \ = \"The quick brown fox jumps over the lazy dog The quick brown fox jumps over\
    \ the lazy dog\"\nprint(\"Input: \" + sentence)\nprint(\"Output: \" + words_in_sentence(sentence))\n\
    </cell>\n<text>\nExpected Output:\n\nInput: The quick brown fox jumps over the\
    \ lazy dog\nOutput: The quick brown fox jumps over the lazy dog\nInput: The quick\
    \ brown fox jumps over the lazy dog The quick brown fox jumps over the lazy dog\n\
    Output: The quick brown fox jumps over the lazy dog\n\n</text>\n<text>\nExercise\
    \ 3\nIn the cell below, write a program that takes in a string and returns the\
    \ number of words in the string.\n\nExample 1:\n\nInput: \"The quick brown fox\
    \ jumps over the lazy dog\"\nOutput: 9\nExplanation: The quick brown fox jumps\
    \ over the lazy dog has 9 words.\n\nExample 2:\n\nInput: \"The quick brown fox\
    \ jumps over the lazy dog The quick brown fox jumps over the lazy dog\"\nOutput:\
    \ 17\nExplanation: The quick brown fox jumps over the lazy dog has 17 words.\n\
    \n</text>\n<cell>", "    \n    # Your code here\n    \n    return \"\"\n</cell>\n\
    <text>\nTest your code\nRun the cell below to test your code.\n\nThe code cell\
    \ below will turn 'Hello World!' into 'Hlool Worrldd!'.\n\n\n</text>\n<cell>\n\
    print(words_in_sentence(\"Hello World!\"))\n</cell>\n<text>\nExpected output\n\
    Hlool Worrldd!\n\n</text>\n<text>\nConstraining the input string\nNext you will\
    \ write a function that takes in a string and returns a string where all characters\
    \ have been converted to lowercase and where all words have been converted to\
    \ lowercase after being separated with single spaces.\n\nExample 1:\n\nInput:\
    \ \"Hello World!\"\nOutput: \"hlool worrldd!\"\nExplanation: All characters have\
    \ been lower-cased, and where all words are lower-cased after being separated\
    \ with single spaces.\n\nExample 2:\n\nInput: \"Hello World!!\"\nOutput: \"hlool\
    \ worrld!!\"\nExplanation: All characters have been lower-cased, but where all\
    \ words \nhave been lower-cased after being separated with single spaces.\n\n\
    Example 3:\n\nInput: \"He is good. He is great!\"\nOutput: \"he is good. he is\
    \ great!\"\nExplanation: All characters have been lower-cased, \nwhere all words\
    \ have been lower-cased after being separated with single spaces.\n\nConstraints\n\
    Test Case 1: does not return any output\nTest Case 2: returns some output\nTest\
    \ Case 3: returns some output\nTest Case 4: returns some output\nTest Case 5:\
    \ returns some output\nTest Case 6: returns some output\nTest Case 7: returns\
    \ some output\nTest Case 8: returns some output\nTest Case 9: returns some output\n\
    Test Case 10: returns some output\nTest Case 11: returns some output\nTest Case\
    \ 12: returns some output\nTest Case 13: does not return any output\nTest Case\
    \ 14: does not return any output\nTest Case 15: does not return any output\nTest\
    \ Case 16: does not return any output\nTest Case 17: does not return any output\n\
    Test Case 18: does not return any output\nTest Case 19: does not return any output\n\
    Test Case 20: does not return any output\n\n\n</text>\n<cell>", "    \n    words\
    \ = sentence.split()\n    \n    prime_words = []\n    \n    for word in words:\n\
    \        prime_words.append(len(word))\n    \n    prime_words.sort()\n    \n \
    \   prime_words = [str(x) for x in prime_words]\n    \n    return \" \".join(prime_words)\n\
    </cell>\n<cell>", "    \n    # Your code here\n    \n    return \"\"\n</cell>\n\
    <text>\nRun the next cell to test your code. Note that the expected value passes\
    \ and the output matches what we expected.\n\n\n</text>\n<cell>\nsentence = \"\
    The quick brown fox jumps over the lazy dog\"\nassert words_in_sentence(sentence)\
    \ == \"quick brown fox jumps over lazy dog\"\nassert words_in_sentence(sentence)\
    \ == words_in_sentence(words_in_sentence(sentence))\n</cell>\n<text>\nFinally,\
    \ let's write a function that takes a sentence and returns a list of words in\
    \ that sentence.\n\n\n</text>\n<cell>", "    \n    # Your code here\n    \n  \
    \  return \"\"\n", "    \n    words = sentence.split()\n    prime_words = []\n\
    \    \n    for word in words:\n        prime_words.append(len(word))\n    \n \
    \   prime_words.sort()\n    \n    prime_words = [str(x) for x in prime_words]\n\
    \    \n    return \" \".join(prime_words)\n</cell>\n<cell>", "    \n    words\
    \ = sentence.split()\n    \n    prime_words = []\n    \n    for word in words:\n\
    \        \n        prime_words.append(len(word))\n        \n    prime_words.sort()\n\
    \    \n    prime_words_str = ''\n    \n    for word in prime_words:\n        \n\
    \        prime_words_str += word\n        \n    return prime_words_str\n", " \
    \   \n    # Your code here\n    \n    return \"\"\n", "    \n    # Your code here\n\
    \    \n    return \"\"\n</cell>\n<text>\nLet's test your implementation:\n\n\n\
    </text>\n<cell>\nprint(words_in_sentence(\"The quick brown fox jumps over the\
    \ lazy dog\"))\n</cell>\n<text>\nExpected Output:\n\n['The', 'quick', 'brown',\
    \ 'fox', 'jumps', 'over', 'the', 'lazy', 'dog']\n\n</text>\n<text>\nNow that you\
    \ have implemented the helper function words_in_sentence(), you can test your\
    \ implementation on the next cell below.\n\nThe next cell runs a Python version\
    \ of the function words_in_sentence() with different inputs to check your implementation.\n\
    \nThe input \"The quick brown fox jumps over the lazy dog\" yields the output\
    \ \"The quick brown fox jumps over the lazy dog\".\n\n\n</text>\n<cell>", "  \
    \  \n    # Your code here\n    \n    return \"\"\n</cell>\n<text>\nRun the next\
    \ cell to test your code. Note that the expected output is below. Given that the\
    \ length of the new sentence is prime, the expected output must be the original\
    \ sentence.\n\n\n</text>\n<cell>", "    \n    # Your code here\n    \n    return\
    \ \"\"\n</cell>\n<text>\nRun the next cell to test your code. Note that the expected\
    \ output is \"True\".\n\n\n</text>\n<cell>", "    \n    words = sentence.split()\n\
    \    \n    prime_words = []\n    \n    for word in words:\n        prime_words.append(len(word))\n\
    \    \n    prime_words.sort()\n    \n    prime_words_string = \"\"\n    \n   \
    \ for word in prime_words:\n        prime_words_string += word + \" \"\n    \n\
    \    return prime_words_string\n</cell>\n<cell>\nwords_in_sentence(\"The quick\
    \ brown fox jumps over the lazy dog\")\n</cell>\n<text>\nProblem 3\nThe string\
    \ \"PAYPALISHIRING\" is written in a zigzag pattern on a given number of rows\
    \ like this: (you may want to display each row on a separate line for easier reading):\n\
    \n2\n1 3\n8 5 9 3\n4 8 5 9 7 3\n1 3 6 9\n8 5 3 1 7 6 9 4\netc.\nIf each line contains\
    \ an odd number of characters, move downwards a line until you reach an even number\
    \ of characters. For example, as we move downwards, we place \"8\" in the next\
    \ line, \"5\" in the next line, and so on until we reach an even number of characters.\n\
    After we reach an even number of characters, move up a line and start placing\
    \ \"4\", \"5\", and \"9\" characters on the next line.\nAfter each row is filled,\
    \ move down a line, and repeat.\nFor example, with \"PAYPALISHIRING\", you should\
    \ return \"SIRAYPAIYNHRSF\".\nWrite a function that will take a string and return\
    \ the string after it has been written on a single line.\nFor example, given \"\
    PAYPALISHIRING\", your function should return \"SIRAYPAIYNHRSF\".\nAssume that\
    \ the string is always valid (i.e. does not contain any spaces or hyphens).\n\n\
    </text>\n<cell>", "    \n    words = sentence.split()\n    \n    prime_words =\
    \ []\n    \n    for word in words:\n        \n        prime_words.append(len(word))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = list(map(str, prime_words))\n\
    \    \n    return ' '.join(prime_words)\n", "    \n    words = sentence.split()\n\
    \    \n    prime_words = []\n    \n    for word in words:\n        \n        prime_words.append(len(word))\n\
    \        \n    prime_words.sort()\n    \n    prime_words = list(map(str, prime_words))\n\
    \    \n    return ' '.join(prime_words)\n</cell>\n<cell>", "    \n    # Your code\
    \ here\n    \n    return \"\"\n</cell>\n<text>\nRun the following cell to test\
    \ your code:\n\n\n</text>\n<cell>\nsentence = \"The quick brown fox jumps over\
    \ the lazy dog\"\nprint(\"Input: \" + sentence)\nprint(\"Output: \" + words_in_sentence(sentence))\n\
    </cell>\n<text>\nExpected Output:\n\nInput: The quick brown fox jumps over the\
    \ lazy dog\nOutput: quick brown fox jumps over lazy dog\n\n</text>\n<text>\nExercise\
    \ 3:\nWrite a function that takes a string and returns the number of words in\
    \ the sentence with lengths prime numbers.\n\nExample 1:\nInput: \"The quick brown\
    \ fox jumps over the lazy dog\"\nOutput: 9\n\nExample 2:\nInput: \"The quick brown\
    \ fox jumps over the lazy dog The quick brown fox jumps over the lazy dog\"\n\
    Output: 26\n\n</text>\n<cell>", "    \n    words = sentence.split()\n    \n  \
    \  prime_words = []\n    \n    for word in words:\n        \n        prime_words.append(len(word))\n\
    \        \n    prime_words.sort()\n    \n    prime_words = list(map(str, prime_words))\n\
    \    \n    return \" \".join(prime_words)\n</cell>\n<cell>\nwords_in_sentence(\"\
    The quick brown fox jumps over the lazy dog\")\n</cell>\n<text>\nProblem 7\nThe\
    \ string \"PAYPALISHIRING\" is written in a ring using only \"Pay\", \"Pali\"\
    \ and \"Hiri\" as its three words. \nA person who moves from left to right through\
    \ the string only has to move \"Hiri\" once.\nIf the person moves right on to\
    \ the end of the string without meeting the other requirements, \nthe string \"\
    PAYPALISHIRING\" is written in a ring too.\n\nWrite a function that takes in a\
    \ string and returns the string after meeting the above requirements.\n\nExample\
    \ 1:\n\nInput: \"PAYPALISHIRING\"\nOutput: \"PAPLISHIRING\"\nExplanation: \nPA\
    \ moves right on to the end of the string without meeting the other requirements.\n\
    PA meets the other requirements, so we move right on to PAL and then to HIRI.\n\
    PA meets the other requirements, so we move right on to PAL and then to HIRI.\n\
    PA does not meet the other requirements, so we move right on to PAL and then to\
    \ HIRI.\nPA does not meet the other requirements, so we move right on to PAL and\
    \ then to HIRI.\nPA does not meet the other requirements, so we move right on\
    \ to PAL and then to HIRI.\nPA does not meet the other requirements, so we move\
    \ right on to PAL and then to HIRI.\nPA does not meet the other requirements,\
    \ so we move right on to PAL and then to HIRI.\nPA does not meet the other requirements,\
    \ so we move right on to PAL and then to HIRI.\nPA does not meet the other requirements,\
    \ so we move right on to PAL and then to HIRI.\nPA does not meet the other requirements,\
    \ so we move right on to PAL and then to HIRI.\nPA does not meet the other requirements,\
    \ so we move right on to PAL and then to HIRI.\nPA does not meet the other requirements,\
    \ so we move right on to PAL and then to HIRI.\n", "    \n    words = sentence.split()\n\
    \    \n    prime_words = []\n    \n    for word in words:\n        \n        prime_words.append(len(word))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = list(map(int, prime_words))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = list(map(str, prime_words))\n\
    \    \n    return \" \".join(prime_words)\n</cell>\n<cell>", "    \n    # Your\
    \ code here\n    \n    return \"\"\n</cell>\n<text>\nRun the following cell to\
    \ check your implementation. Note that the expected output varies when you run\
    \ the cell.\n\n\n</text>\n<cell>\nsentence = \"The quick brown fox jumps over\
    \ the lazy dog\"\nprint(\"Input: \" + sentence)\nprint(\"Output: \" + words_in_sentence(sentence))\n\
    </cell>\n<text>\nExpected Output:\n\nInput: The quick brown fox jumps over the\
    \ lazy dog\nOutput: The quick brown fox jumps over the lazy dog\n\n</text>\n<text>\n\
    Exercise 3\nImplement the function count_words that takes in a string and returns\
    \ the number of words in the string. \nThis word counting problem is a classic\
    \ interview question that is commonly asked in interviews online. \nThe function\
    \ should take in a string and return a dictionary that contains the word counts\
    \ as keys and the number of occurrences as values. \nThe key in the dictionary\
    \ should be the word itself and the value should be the number of the occurrences.\
    \ \nYou can assume that the string will only contain lower case letters.\n\n\n\
    </text>\n<cell>", "    \n    words = sentence.split()\n    \n    prime_words =\
    \ []\n    \n    for word in words:\n        \n        prime_words.append(len(word))\n\
    \        \n    prime_words.sort()\n    \n    prime_words = list(map(int, prime_words))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = list(map(str, prime_words))\n\
    \    \n    return \" \".join(prime_words)\n</cell>\n<cell>\nwords_in_sentence(\"\
    The quick brown fox jumps over the lazy dog\")\n</cell>\n<text>\nQuestion 3\n\
    Write a Python program to find the number of words in a string which contains\
    \ only letters.\n\nExample 1:\n\nInput: \"The quick brown fox jumps over the lazy\
    \ dog\"\nOutput: 4\nExplanation: The quick brown fox jumps over the lazy dog contains\
    \ 4 words.\n\nExample 2:\n\nInput: \"The quick brown fox jumps over the lazy dog.\"\
    \nOutput: 3\nExplanation: The quick brown fox jumps over the lazy dog contains\
    \ 3 words.\n\nExample 3:\n\nInput: \"The quick brown fox jumps over the lazy dog\
    \ .\"\nOutput: 3\nExplanation: The quick brown fox jumps over the lazy dog contains\
    \ 3 words.\n\nExample 4:\n\nInput: \"The quick brown fox jumps over the lazy dog\
    \ .\\n\"\nOutput: 4\nExplanation: The quick brown fox jumps over the lazy dog\
    \ contains 4 words.\n\nExample 5:\n\nInput: \"The quick brown fox jumps over the\
    \ lazy dog .\\n\"\nOutput: 4\nExplanation: The quick brown fox jumps over the\
    \ lazy dog contains 4 words.\n\nExample 6:\n\nInput: \"The quick brown fox jumps\
    \ over the lazy dog .\\n\"\nOutput: 4\nExplanation: The quick brown fox jumps\
    \ over the lazy dog contains 4 words.\n\nExample 7:\n\nInput: \"The quick brown\
    \ fox jumps over the lazy dog .\\n\"\nOutput: 4\nExplanation: The quick brown\
    \ fox jumps over the lazy dog contains 4 words.\n\nExample 8:\n\nInput: \"The\
    \ quick brown fox jumps over the lazy dog .\\n\"\nOutput: 4\nExplanation: The\
    \ quick brown fox jumps over the lazy dog contains 4 words.\n\nExample 9:\n\n\
    Input: \"The quick brown fox jumps over the lazy dog .\\n\"\nOutput: 4\nExplanation:\
    \ The quick brown fox jumps over the lazy do", "    \n    # Your code here\n \
    \   \n    return \"\"\n", "    \n    # Your code here\n    \n    return \"\"\n\
    </cell>\n<text>\nRun the next cell to test your code. Note that the expected value\
    \ passes and the output matches what we expected.\n\n\n</text>\n<cell>\nsentence\
    \ = \"I love you\"\nassert words_in_sentence(sentence) == \"love you\"\nprint(\"\
    Coding complete\")\n</cell>\n<text>\nNow let's see how long it takes to run your\
    \ code. We'll be using a test sentence of length 100,000 words. Run the cell below\
    \ to see the result.\n\n\n</text>\n<cell>\nimport time\nstart = time.time()\n\
    result = words_in_sentence(test_sentence)\nend = time.time()\nprint(end - start)\n\
    </cell>\n<text>\nTo improve the performance of your function, you can make it\
    \ run faster by using multiprocessing to utilize multiple cores. To do this, we\
    \ simply need to change our function definition from:\n", "    \n    # Your code\
    \ here\n    \n    return \"\"\n</cell>\n<text>\nLet's test your implementation:\n\
    \n\n</text>\n<cell>\nprint(words_in_sentence(\"The quick brown fox jumps over\
    \ the lazy dog\"))\n</cell>\n<text>\nExpected Output:\n\n['The', 'quick', 'brown',\
    \ 'fox', 'jumps', 'over', 'the', 'lazy', 'dog']\n\n</text>\n<text>\nNow let's\
    \ see how long our function will take to solve the problem:\n\n\n</text>\n<cell>\n\
    %%time\nwords_in_sentence(\"The quick brown fox jumps over the lazy dog\")\n</cell>\n\
    <text>\nExpected Output:\n\nThe quick brown fox jumps over the lazy dog\nThe quick\
    \ brown fox jumps over the lazy dog\nThe quick brown fox jumps over the lazy dog\n\
    The quick brown fox jumps over the lazy dog\nThe quick brown fox jumps over the\
    \ lazy dog\nThe quick brown fox jumps over the lazy dog\nThe quick brown fox jumps\
    \ over the lazy dog\nThe quick brown fox jumps over the lazy dog\nThe quick brown\
    \ fox jumps over the lazy dog\nThe quick brown fox jumps over the lazy dog\nThe\
    \ quick brown fox jumps over the lazy dog\nThe quick brown fox jumps over the\
    \ lazy dog\nThe quick brown fox jumps over the lazy dog\nThe quick brown fox jumps\
    \ over the lazy dog\nThe quick brown fox jumps over the lazy dog\nThe quick brown\
    \ fox jumps over the lazy dog\nThe quick brown fox jumps over the lazy dog\nThe\
    \ quick brown fox jumps over the lazy dog\nThe quick brown fox jumps over the\
    \ lazy dog\nThe quick brown fox jumps over the lazy dog\nThe quick brown fox jumps\
    \ over the lazy dog\nThe quick brown fox jumps over the lazy dog\nThe quick brown\
    \ fox jumps over the lazy dog\nThe quick brown fox jumps over the lazy dog\nThe\
    \ quick brown fox jumps over the lazy dog\nThe quick brown fox jumps over the\
    \ lazy dog\nThe quick brown fox jumps over the lazy dog\nThe quick brown fox jumps\
    \ over the lazy dog\nThe quick brown fox jumps over the lazy dog\nThe quick brown\
    \ fox jumps over the lazy dog\nThe quick brown fox jumps over the lazy dog\nThe\
    \ quick brown fox jumps over the ", "    \n    # Your code here\n    \n    return\
    \ \"\"\n", "    \n    # Your code here\n    \n    return \"\"\n</cell>\n<text>\n\
    Solution\nRun the cell below to test your function\n\n\n</text>\n<cell>", "  \
    \  \n    words = sentence.split()\n    \n    prime_words = []\n    \n    for word\
    \ in words:\n        \n        prime_words.append(len(word))\n    \n    prime_words.sort()\n\
    \    \n    prime_words = [str(x) for x in prime_words]\n    \n    prime_words\
    \ = [x for x in prime_words if x != '']\n    \n    return ' '.join(prime_words)\n\
    </cell>\n<cell>", "    \n    # Your code here\n    \n    return \"\"\n</cell>\n\
    <text>\nLet's test your implementation\n\n\n</text>\n<cell>\nprint(words_in_sentence(\"\
    The quick brown fox jumps over the lazy dog\"))\n</cell>\n<text>\nExercise 3\n\
    Implement the function prime_words that takes in a sentence and returns the prime\
    \ words in that sentence.\n\nExample 1:\nInput: \"The quick brown fox jumps over\
    \ the lazy dog\"\nOutput: [\"quick\", \"brown\", \"fox\", \"jumps\", \"over\"\
    , \"lazy\", \"dog\"]\n\nExample 2:\nInput: \"The quick brown fox jumps over the\
    \ lazy dog.\"\nOutput: [\"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"\
    lazy\", \"dog\"]\n\nExample 3:\nInput: \"The quick brown fox jumps over the lazy\
    \ dog .\"\nOutput: [\"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"lazy\"\
    , \"dog\"]\n\nExample 4:\nInput: \"The quick brown fox jumps over the lazy dog\
    \ .\".\nOutput: [\"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"lazy\"\
    , \"dog\"]\n\nExample 5:\nInput: \"The quick brown fox jumps over the lazy dog\
    \ .\".\nOutput: [\"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"lazy\"\
    , \"dog\"]\n\nExample 6:\nInput: \"The quick brown fox jumps over the lazy dog\
    \ .\".\nOutput: [\"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"lazy\"\
    , \"dog\"]\n\nExample 7:\nInput: \"The quick brown fox jumps over the lazy dog\
    \ .\".\nOutput: [\"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"lazy\"\
    , \"dog\"]\n\nExample 8:\nInput: \"The quick brown fox jumps over the lazy dog\
    \ .\".\nOutput: [\"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"lazy\"\
    , \"dog\"]\n\nExample 9:\nInput: \"The quick brown fox jumps over the lazy dog\
    \ .\".\nOutput: [\"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"lazy\"\
    , \"dog\"]\n\nExample 10:\nInput: \"The quick brown fox jumps over the lazy dog\
    \ .\".\nOutput: [\"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"lazy\"\
    , \"dog\"]\n\nExample 11:\nInput: \"The quick brown fox jumps over the lazy dog\
    \ .\".\nOutput: [\"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"lazy\"\
    , \"dog\"]\n\nExample 12:\nInput: \"The quick brown fox jumps over the lazy dog\
    \ .\".\nOutput: [\"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"lazy\"\
    , \"", "    \n    # Your code here\n    \n    return \"\"\n</cell>\n<cell>", " \
    \   \n    # Your code here\n    \n    return \"\"\n</cell>\n<cell>", "    \n \
    \   words = sentence.split()\n    \n    prime_words = []\n    \n    for word in\
    \ words:\n        \n        prime_words.append(len(word))\n        \n    prime_words.sort()\n\
    \    \n    prime_words = list(map(str, prime_words))\n    \n    return \" \".join(prime_words)\n\
    </cell>\n<cell>", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   \n    words = sentence.split()\n    \n    prime_words = []\n    \n    for\
    \ word in words:\n        \n        prime_words.append(len(word))\n    \n    prime_words.sort()\n\
    \    \n    prime_words_string = \"\"\n    \n    for word in prime_words:\n   \
    \     \n        prime_words_string += word + \" \"\n    \n    return prime_words_string\n\
    </cell>\n<cell>", "    \n    # Your code here\n    \n    return \"\"\n</cell>\n\
    <text>\nRun the cell below to test your code. Note that the expected value passes\
    \ and the output matches what we expected.\n\n\n</text>\n<cell>\nsentence = \"\
    I love you\"\nprint(\"The original sentence is: \" + sentence)\nprint(\"The words\
    \ in the sentence are: \" + words_in_sentence(sentence))\n</cell>\n<text>\nExpected\
    \ Output:\n\nThe original sentence is: I love you\nThe words in the sentence are:\
    \ love you\n\n</text>\n<text>\nExercise 3:\nNow, write a function that takes in\
    \ a string and returns the number of words in the sentence with lengths prime\
    \ numbers.\n\nThe sentence will have lengths from 2 to 100 characters. \nAll the\
    \ words in the sentence will have lengths from 2 to 25 characters.\nThe sentence\
    \ will have lengths from 3 to 100 characters.\nThe sentence will have lengths\
    \ from 2 to 25 characters.\nThe sentence will have lengths from 3 to 25 characters.\n\
    The sentence will have lengths from 2 to 25 characters.\nThe sentence will have\
    \ lengths from 3 to 25 characters.\nThe sentence will have lengths from 2 to 25\
    \ characters.\nThe sentence will have lengths from 3 to 25 characters.\nThe sentence\
    \ will have lengths from 2 to 25 characters.\nThe sentence will have lengths from\
    \ 3 to 25 characters.\nThe sentence will have lengths from 2 to 25 characters.\n\
    The sentence will have lengths from 3 to 25 characters.\nThe sentence will have\
    \ lengths from 2 to 25 characters.\nThe sentence will have lengths from 3 to 25\
    \ characters.\nThe sentence will have lengths from 2 to 25 characters.\nThe sentence\
    \ will have lengths from 3 to 25 characters.\nThe sentence will have lengths from\
    \ 2 to 25 characters.\nThe sentence will have lengths from 3 to 25 characters.\n\
    The sentence will have lengths from 2 to 25 characters.\nThe sentence will have\
    \ lengths from 3 to 25 characters.\nThe sentence will have lengths from 2 to 25\
    \ characters.\nThe sentence will have lengths from 3 to 25 characters.\nThe sentence\
    \ will have lengths from 2 to 25 characters.\nThe sentence will have lengths from\
    \ 3 to 25 characters.\nThe sentence will have lengths from 2 to 25 characters.\n\
    The sentence will have lengths from 3 to 25 characters.\nThe sentence will have\
    \ lengths from 2 to 25 characters.\nThe sentence will have lengths from 3 to 25\
    \ characters.\nThe sentence will have lengths from 2 to 25 characters.\nThe sentence\
    \ will have lengths from 3 to 25 characters.\nThe sentence will have lengths from\
    \ 2 to 25 characters.\nThe sentence will have lengths from 3 to 25 characters.\n\
    The sentence will have lengths from 2 to 25 characters.\nThe sentence will have\
    \ lengths from 3 to 25 characters.\nThe sentence will have lengths from 2 to 25\
    \ characters.\nThe sentence will have lengths from 3 to 25 characters.\nThe sentence\
    \ will have lengths from 2 to 25 characters.\n", "    \n    # Your code here\n\
    \    \n    return \"\"\n</cell>\n<text>\nRun the next cell to test your code.\
    \ Note that the expected value passes and the output matches what we expected.\n\
    \n\n</text>\n<cell>", "    \n    # Your code here\n    \n    return \"\"\n</cell>\n\
    <text>\nRun the cell below to test your code:\n\n\n</text>\n<cell>\nsentence =\
    \ \"The quick brown fox jumps over the lazy dog\"\nprint(\"The length of the sentence\
    \ is\", len(sentence))\nprint(\"The words in the sentence are:\", words_in_sentence(sentence))\n\
    </cell>\n<text>\nExpected Output:\n\nThe length of the sentence is 26\nThe words\
    \ in the sentence are: quick brown fox jumps over lazy dog\n\n</text>\n<text>\n\
    Exercise 4:\nWrite a function that takes a sentence and returns a list of words,\n\
    where each word is separated by a space.\nThe function should only return a list\
    \ containing a single word.\nThe function does not need to remove duplicates.\n\
    The sentence \"The cow jumped over the moon\" should return the list ['the', 'cow',\
    \ 'jumped', 'over', 'the', 'moon'].\nThe sentence \"The dog slept on the dog\"\
    \ should return the list ['the', 'dog', 'slept', 'on', 'the', 'dog'].\nThe sentence\
    \ \"The fox is sleeping on the floor\" should return the list ['the', 'fox', 'is',\
    \ 'sleeping', 'on', 'the', 'floor']\n\n</text>\n<cell>", "    \n    words = sentence.split()\n\
    \    \n    prime_words = []\n    \n    for word in words:\n        \n        prime_words.append(len(word))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = list(map(str, prime_words))\n\
    \    \n    prime_words.sort()\n    \n    return \" \".join(prime_words)\n</cell>\n\
    <text>\nLet's test our function\n\n\n</text>\n<cell>\nwords_in_sentence(\"The\
    \ quick brown fox jumps over the lazy dog\")\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a string as input and returns a string with all the words\
    \ from the original string separated by a space.\nThe order of the words in the\
    \ new string should be the same as the original one.\n\n\n</text>\n<cell>", " \
    \   \n    # Your code here\n    \n    return \"\"\n</cell>\n<text>\nRun the cell\
    \ below to test your code:\n\n\n</text>\n<cell>\nsentence = \"The quick brown\
    \ fox jumps over the lazy dog\"\nsolution = words_in_sentence(sentence)\ncheck(\"\
    words_in_sentence\", solution)\n</cell>\n<text>\nExpected Output:\n\nThe quick\
    \ brown fox jumps over the lazy dog\nThe quick brown fox jumps over the lazy dog\n\
    The quick brown fox jumps over the lazy dog\nThe quick brown fox jumps over the\
    \ lazy dog\nThe quick brown fox jumps over the lazy dog\nThe quick brown fox jumps\
    \ over the lazy dog\nThe quick brown fox jumps over the lazy dog\nThe quick brown\
    \ fox jumps over the lazy dog\nThe quick brown fox jumps over the lazy dog\nThe\
    \ quick brown fox jumps over the lazy dog\nThe quick brown fox jumps over the\
    \ lazy dog\nThe quick brown fox jumps over the lazy dog\nThe quick brown fox jumps\
    \ over the lazy dog\nThe quick brown fox jumps over the lazy dog\nThe quick brown\
    \ fox jumps over the lazy dog\nThe quick brown fox jumps over the lazy dog\nThe\
    \ quick brown fox jumps over the lazy dog\nThe quick brown fox jumps over the\
    \ lazy dog\nThe quick brown fox jumps over the lazy dog\nThe quick brown fox jumps\
    \ over the lazy dog\nThe quick brown fox jumps over the lazy dog\nThe quick brown\
    \ fox jumps over the lazy dog\nThe quick brown fox jumps over the lazy dog\nThe\
    \ quick brown fox jumps over the lazy dog\nThe quick brown fox jumps over the\
    \ lazy dog\nThe quick brown fox jumps over the lazy dog\nThe quick brown fox jumps\
    \ over the lazy dog\nThe quick brown fox jumps over the lazy dog\nThe quick brown\
    \ fox jumps over the lazy dog\nThe quick brown fox jumps over the lazy dog\nThe\
    \ quick brown fox jumps over the lazy dog\nThe quick brown fox jumps over the\
    \ lazy dog\nThe quick brown fox jumps over the lazy dog\nThe quick brown fox jumps\
    \ over the lazy dog\nThe quick brown fox jumps over the lazy dog\nThe quick brown\
    \ fox jumps over the lazy dog\nThe quick brown fox ", "    \n    # Your code here\n\
    \    \n    return \"\"\n</cell>\n<text>\nSolution\nRun the cell below to test\
    \ your function\n\n\n</text>\n<cell>", "    \n    # Your code here\n    \n   \
    \ return \"\"\n", "    \n    words = sentence.split()\n    \n    prime_words =\
    \ []\n    \n    for word in words:\n        \n        prime_words.append(len(word))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = list(map(str, prime_words))\n\
    \    \n    return \" \".join(prime_words)\n</cell>\n<cell>\nwords_in_sentence(\"\
    The quick brown fox jumps over the lazy dog\")\n</cell>\n<text>\nQuestion 3\n\
    Write a function that takes a string and returns the number of words in the string.\n\
    \n\n</text>\n<cell>", "    \n    words = sentence.split()\n    prime_words = []\n\
    \    \n    for word in words:\n        prime_words.append(len(word))\n    \n \
    \   prime_words.sort()\n    \n    prime_words = list(map(int, prime_words))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = list(map(str, prime_words))\n\
    \    \n    prime_words.sort()\n    \n    return \" \".join(prime_words)\n\n",
  "    \n    words = sentence.split()\n    \n    prime_words = []\n    \n    for word\
    \ in words:\n        \n        prime_words.append(len(word))\n    \n    prime_words.sort()\n\
    \    \n    prime_words = list(map(str, prime_words))\n    \n    prime_words.sort()\n\
    \    \n    prime_words = list(map(int, prime_words))\n    \n    prime_words.sort()\n\
    \    \n    prime_words = list(map(str, prime_words))\n    \n    prime_words.sort()\n\
    \    \n    prime_words = list(map(int, prime_words))\n    \n    prime_words.sort()\n\
    \    \n    prime_words = list(map(str, prime_words))\n    \n    prime_words.sort()\n\
    \    \n    prime_words = list(map(int, prime_words))\n    \n    prime_words.sort()\n\
    \    \n    prime_words = list(map(str, prime_words))\n    \n    prime_words.sort()\n\
    \    \n    prime_words = list(map(int, prime_words))\n    \n    prime_words.sort()\n\
    \    \n    prime_words = list(map(str, prime_words))\n    \n    prime_words.sort()\n\
    \    \n    prime_words = list(map(int, prime_words))\n    \n    prime_words.sort()\n\
    \    \n    prime_words = list(map(str, prime_words))\n    \n    prime_words.sort()\n\
    \    \n    prime_words = list(map(int, prime_words))\n    \n    prime_words.sort()\n\
    \    \n    prime_words = list(map(str, prime_words))\n    \n    prime_words.sort()\n\
    \    \n    prime_words = list(map(int, prime_words))\n    \n    prime_words.sort()\n\
    \    \n    prime_words = list(map(str, prime_words))\n    \n    prime_words.sort()\n\
    \    \n    prime_words = list(map(int, prime_words))\n    \n    prime_words.sort()\n\
    \    \n    prime_words = list(map(str, prime_words))\n    \n    prime_words.sort()\n\
    \    \n    prime_words = list(map(int, prime_words))\n    \n    prime_words.sort()\n\
    \    \n    prime_words = list(map(str, prime_words))\n    \n    prime_words.sort()\n\
    \    \n    prime_words = list(map(int, prime_words))\n    \n    prime_words.sort()\n\
    \    \n    prime_words = list(map(str, prime_words))\n    \n    prime_words.sort()\n\
    \    \n    prime_words = list(map(int, prime", "    \n    # Your code here\n \
    \   \n    return \"\"\n</cell>\n<text>\nRun the cell below to test your code:\n\
    \n\n</text>\n<cell>\nsentence = \"The quick brown fox jumps over the lazy dog\"\
    \nprint(\"The length of the sentence is {}\".format(len(sentence)))\nprint(\"\
    The words in the sentence are {}\".format(words_in_sentence(sentence)))\n</cell>\n\
    <text>\nExpected Output:\n\nThe length of the sentence is 11\nThe words in the\
    \ sentence are thequickbrownfoxjumpsoverthelazydog\nThe length of the sentence\
    \ is 11\nThe words in the sentence are thequickbrownfoxjumpsoverthelazydog\nExplanation:\
    \ The length of the sentence is 11, and the words in the sentence are thequickbrownfoxjumpsoverthelazydog.\n\
    \n</text>\n<text>\nExercise 4:\nWrite a function that returns a list of words\
    \ that appear in the sentence with even length.\nThe function should take one\
    \ parameter:a list of strings that contains the words in the sentence.\nThe function\
    \ should return a list of strings that contains all the words with even length.\n\
    The length of the new list should be the same as the length of the original list.\n\
    \n\n</text>\n<cell>", "    \n    words = sentence.split()\n    \n    prime_words\
    \ = []\n    \n    for word in words:\n        prime_words.append(len(word))\n\
    \    \n    prime_words.sort()\n    \n    prime_words_str = \" \".join(prime_words)\n\
    \    \n    return prime_words_str\n\n", "    \n    # Your code here\n    \n  \
    \  return \"\"\n", "    \n    # Your code here\n    \n    return \"\"\n</cell>\n\
    <text>\nRun the cell below to test your code. Note that the expected value passes\
    \ and the output matches what we expected.\n\n\n</text>\n<cell>\nsentence = \"\
    The quick brown fox jumps over the lazy dog\"\nprint(\"Input: \" + sentence)\n\
    print(\"Output: \" + words_in_sentence(sentence))\n</cell>\n<text>\nExpected Output:\n\
    \nInput: The quick brown fox jumps over the lazy dog\nOutput: The quick brown\
    \ fox jumps over the lazy dog\n\n</text>\n<text>\nExercise 3\nImplement the function\
    \ is_palindrome to determine if the sentence entered by the user is palindrome\
    \ or not.\n\nNote that \"racecar\" is a palindrome.\n\n\n</text>\n<cell>", " \
    \   \n    # write your code here\n    \n    return \"\"\n</cell>\n<cell>", " \
    \   \n    # write your code here\n    \n    return \"\"\n</cell>\n<cell>", " \
    \   \n    # Your code here\n    \n    return \"\"\n</cell>\n<text>\nTest your\
    \ code\nRun the cell below to test your code.\n\nThe test cell uses this \"hello,\
    \ world\" string and ensures that the function returns the correct output when\
    \ passed the correct string.\n\n\n</text>\n<cell>\nprint(words_in_sentence(\"\
    Hello, world\"))\n</cell>\n<text>\nExpected output\nThe correct output is\n\n\
    ['Hello', 'world']\n\n</text>\n<text>\nExercise 3\nThe function is_palindrome\
    \ should return True if the given word is a palindrome, otherwise it should return\
    \ False.\n\nTo test the function, you will need a function that takes a single\
    \ word and returns a boolean value.\n\nThe function is_palindrome has the following\
    \ parameter(s):\n\na string\na string\n\nThe function body should return True\
    \ if the given word is a palindrome, otherwise it should return False.\n\nThe\
    \ function is_palindrome has the following pseudocode:\n", "    \n    # Your code\
    \ here\n    \n    return \"\"\n</cell>\n<text>\nRun the following cell to test\
    \ your code:\n\n\n</text>\n<cell>\nsentence = \"The quick brown fox jumps over\
    \ the lazy dog\"\nprint(\"The length of the sentence is\", len(sentence))\nprint(\"\
    The words in the sentence are\", words_in_sentence(sentence))\n</cell>\n<text>\n\
    Expected Output:\n\nThe length of the sentence is 10\nThe words in the sentence\
    \ are quick brown fox jumps over lazy dog\n\n</text>\n<text>\nExercise 3:\nWrite\
    \ a function that returns a list of words in a sentence, with lengths greater\
    \ than or equal to 2.\nThe function should split sentence into separate words\
    \ only if they are of length 2 or more.\nThe function should return the original\
    \ sentence if no words of length 2 or more are found.\n\n\n</text>\n<cell>", " \
    \   \n    # write your code here\n    \n    return \"\"\n</cell>\n<text>\n3. Longest\
    \ Palindromic Substring\nGiven a string, find the longest palindromic substring.\n\
    \nExample 1:\n\nInput: \"abba\"\nOutput: \"abb\"\n\nExample 2:\n\nInput: \"abbccc\"\
    \nOutput: \"abc\"\n\nExample 3:\n\nInput: \"abracadabra\"\nOutput: \"abracadabra\"\
    \n\nConstraints:\n\nThe input string consists of lowercase English letters only.\n\
    The length of the input string will not exceed 10,000.\n\"\"\"\n\n", "    \n \
    \   words = sentence.split()\n    \n    prime_words = []\n    \n    for word in\
    \ words:\n        \n        prime_words.append(len(word))\n        \n    prime_words.sort()\n\
    \    \n    prime_words = list(map(str, prime_words))\n    \n    return \" \".join(prime_words)\n\
    </cell>\n<cell>", "    \n    # Your code here\n    \n    return \"\"\n</cell>\n\
    <cell>", "    \n    words = sentence.split()\n    \n    prime_words = []\n   \
    \ \n    for word in words:\n        prime_words.append(len(word))\n    \n    prime_words.sort()\n\
    \    \n    prime_words = list(map(str, prime_words))\n    \n    return \" \".join(prime_words)\n\
    </cell>\n<cell>", "    \n    # Your code here\n    \n    return \"\"\n</cell>\n\
    <text>\nRun the following cell to check your answer:\n\n\n</text>\n<cell>\ncheck_words_in_sentence(\"\
    The quick brown fox jumps over the lazy dog\")\n</cell>\n<text>\nExpected Output:\n\
    \nThe quick brown fox jumps over the lazy dog\nThe quick brown fox jumps over\
    \ the lazy dog\nThe quick brown fox jumps over the lazy dog\nThe quick brown fox\
    \ jumps over the lazy dog\nThe quick brown fox jumps over the lazy dog\nThe quick\
    \ brown fox jumps over the lazy dog\nThe quick brown fox jumps over the lazy dog\n\
    The quick brown fox jumps over the lazy dog\nThe quick brown fox jumps over the\
    \ lazy dog\nThe quick brown fox jumps over the lazy dog\nThe quick brown fox jumps\
    \ over the lazy dog\nThe quick brown fox jumps over the lazy dog\nThe quick brown\
    \ fox jumps over the lazy dog\nThe quick brown fox jumps over the lazy dog\nThe\
    \ quick brown fox jumps over the lazy dog\nThe quick brown fox jumps over the\
    \ lazy dog\nThe quick brown fox jumps over the lazy dog\nThe quick brown fox jumps\
    \ over the lazy dog\nThe quick brown fox jumps over the lazy dog\nThe quick brown\
    \ fox jumps over the lazy dog\nThe quick brown fox jumps over the lazy dog\nThe\
    \ quick brown fox jumps over the lazy dog\nThe quick brown fox jumps over the\
    \ lazy dog\nThe quick brown fox jumps over the lazy dog\nThe quick brown fox jumps\
    \ over the lazy dog\nThe quick brown fox jumps over the lazy dog\nThe quick brown\
    \ fox jumps over the lazy dog\nThe quick brown fox jumps over the lazy dog\nThe\
    \ quick brown fox jumps over the lazy dog\nThe quick brown fox jumps over the\
    \ lazy dog\nThe quick brown fox jumps over the lazy dog\nThe quick brown fox jumps\
    \ over the lazy dog\nThe quick brown fox jumps over the lazy dog\nThe quick brown\
    \ fox jumps over the lazy dog\nThe quick brown fox jumps over the lazy dog\nThe\
    \ quick brown fox jumps over the lazy dog\nThe quick brown fox jumps over the\
    \ lazy dog\nThe quick brown fox jumps ", "    \n    words = sentence.split()\n\
    \    \n    prime_words = []\n    \n    for word in words:\n        \n        prime_words.append(len(word))\n\
    \        \n    prime_words.sort()\n    \n    prime_words = list(map(str, prime_words))\n\
    \    \n    return \" \".join(prime_words)\n</cell>\n<cell>", "    \n    words\
    \ = sentence.split()\n    \n    prime_words = []\n    \n    for word in words:\n\
    \        \n        prime_words.append(len(word))\n        \n    prime_words.sort()\n\
    \    \n    prime_words_string = \"\"\n    \n    for word in prime_words:\n   \
    \     \n        prime_words_string += word + \" \"\n        \n    return prime_words_string\n\
    \n", "    \n    words = sentence.split()\n    \n    prime_words = []\n    \n \
    \   for word in words:\n        \n        prime_words.append(len(word))\n    \n\
    \    prime_words.sort()\n    \n    prime_words = list(map(int, prime_words))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = list(map(str, prime_words))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = list(map(int, prime_words))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = list(map(str, prime_words))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = list(map(int, prime_words))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = list(map(str, prime_words))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = list(map(int, prime_words))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = list(map(str, prime_words))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = list(map(int, prime_words))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = list(map(str, prime_words))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = list(map(int, prime_words))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = list(map(str, prime_words))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = list(map(int, prime_words))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = list(map(str, prime_words))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = list(map(int, prime_words))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = list(map(str, prime_words))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = list(map(int, prime_words))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = list(map(str, prime_words))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = list(map(int, prime_words))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = list(map(str, prime_words))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = list(map(int, prime_words))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = list(map(str, prime", " \
    \   \n    # Your code here\n    \n    return \"\"\n</cell>\n<text>\nTest your\
    \ code\nRun the cell below to test your code.\n\nThe test cell below will run\
    \ your code for all the test cases. If you get an assertion error, then please\
    \ follow the instructions to modify your code before that error occurs.\n\nNote\
    \ that passing this test does not necessarily mean your code is correct. Your\
    \ code might still have bugs. If you find any errors in your code, please feel\
    \ free to open a github issue so that we can discuss possible solutions.\n\n\n\
    </text>\n<cell>", "    \n    # Your code here\n    \n    return \"\"\n</cell>\n\
    <text>\nRun the cell below to test your code:\n\n\n</text>\n<cell>\nsentence =\
    \ \"The quick brown fox jumps over the lazy dog\"\nprint(\"The words in the sentence\
    \ are: \", words_in_sentence(sentence))\n</cell>\n<text>\nExpected Output:\n\n\
    The words in the sentence are:  ['The', 'quick', 'brown', 'fox', 'jumps', 'over',\
    \ 'the', 'lazy', 'dog']\n\n</text>\n<text>\nExercise 4:\nGiven a list of strings,\
    \ return the length of the shortest one.\n\n\n</text>\n<text>\nSolution:\n\n\n\
    </text>\n<cell>", "    \n    words = sentence.split()\n    \n    prime_words =\
    \ []\n    \n    for word in words:\n        \n        prime_words.append(len(word))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = list(map(str, prime_words))\n\
    \    \n    return \" \".join(prime_words)\n\n", "    \n    # Your code here\n\
    \    \n    return \"\"\n</cell>\n<text>\nRun the cell below to test your code.\
    \ Note that the expected value passes and the output matches what we expect.\n\
    \n\n</text>\n<cell>", "    \n    # Your code here\n    \n    return \"\"\n</cell>\n\
    <text>\nRun the following cell to test your code:\n\n\n</text>\n<cell>\nsentence\
    \ = \"abc def ghi jkl mno pqr stu vwx yz\"\nprint(\"The words in the sentence\
    \ are: \\n\", words_in_sentence(sentence))\n</cell>\n<text>\nExpected Output:\n\
    \nThe words in the sentence are: \n['abc', 'def', 'ghi', 'jkl', 'mno', 'pqr',\
    \ 'stu', 'vwx', 'yz']\n\n</text>\n<text>\nExercise 3:\nGiven a sentence, return\
    \ a string with the words in sorted order, separated by spaces.\n\nExample sentences:\n\
    \n\"the quick brown fox jumps over the lazy dog\"\n\"the quick brown fox jumps\
    \ over the lazy dog sleeps\"\n\"the quick brown fox jumps over the lazy dog sleeps\
    \ very very very very very very very very very very very very very very very very\
    \ very very very very very very very very very very very very very very very very\
    \ very very very very very very very very very very very very very very very very\
    \ very very very very very very very very very very very very very very very very\
    \ very very very very very very very very very very very very very very very very\
    \ very very very very very very very very very very very very very very very very\
    \ very very very very very very very very very very very very very very very very\
    \ very very very very very very very very very very very very very very very very\
    \ very very very very very very very very very very very very very very very very\
    \ very very very very very very very very very very very very very very very very\
    \ very very very very very very very very very very very very very very very very\
    \ very very very very very very very very very very very very very very very very\
    \ very very very very very very very very very very very very very very very very\
    \ very very very very very very very very very very very very very very very very\
    \ very very very very very very very very very very very very very very very very\
    \ very very very very very very very very very very very very very very very very\
    \ very very very very very very very very very very very very very very very very\
    \ very very very very very very very very very very very very very very very very\
    \ very very very very very very very very very very very very very very very very\
    \ very very very very very very very very very very very very very very very very\
    \ very very very very very very very very very very very ", "    \n    # Your\
    \ code here\n    \n    return \"\"\n", "    \n    # Your code here\n    \n   \
    \ return \"\"\n", "    \n    words = sentence.split()\n    \n    prime_words =\
    \ []\n    \n    for word in words:\n        prime_words.append(len(word))\n  \
    \  \n    prime_words.sort()\n    \n    prime_words_str = \"\"\n    \n    for word\
    \ in prime_words:\n        prime_words_str += word + \" \"\n    \n    return prime_words_str\n\
    \n", "    \n    words = sentence.split()\n    \n    prime_words = []\n    \n \
    \   for word in words:\n        \n        prime_words.append(len(word))\n    \n\
    \    prime_words.sort()\n    \n    prime_words_str = ' '.join(prime_words)\n \
    \   \n    return prime_words_str\n</cell>\n<text>\nLet's test our function\n\n\
    \n</text>\n<cell>\nwords_in_sentence(\"The quick brown fox jumps over the lazy\
    \ dog\")\n</cell>\n<text>\nExercise 4\nImplement the function prime_words_reverse,\
    \ which takes a sentence and returns the words in reverse order. For example,\
    \ if the sentence is \"The quick brown fox jumps over the lazy dog\", the function\
    \ should return \"dog lazy the over jumps quick brown fox The\".\n\n\n</text>\n\
    <cell>", "    \n    words = sentence.split()\n    \n    prime_words = []\n   \
    \ \n    for word in words:\n        \n        prime_words.append(len(word))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = [str(x) for x in prime_words]\n\
    \    \n    return \" \".join(prime_words)\n</cell>\n<cell>", "    \n    words\
    \ = sentence.split()\n    \n    prime_words = []\n    \n    for word in words:\n\
    \        prime_words.append(len(word))\n    \n    prime_words.sort()\n    \n \
    \   prime_words = list(map(str, prime_words))\n    \n    return \" \".join(prime_words)\n\
    </cell>\n<cell>", "    \n    words = sentence.split()\n    \n    prime_words =\
    \ []\n    \n    for word in words:\n        \n        prime_words.append(len(word))\n\
    \        \n    prime_words.sort()\n    \n    prime_words = list(map(str, prime_words))\n\
    \    \n    return \" \".join(prime_words)\n</cell>\n<cell>\nwords_in_sentence(\"\
    The quick brown fox jumps over the lazy dog\")\n</cell>\n<text>\nQuestion 7\n\
    Write a Python program to find the longest common substring between two given\
    \ strings.\n\nExample 1:\n\nInput:\nstr1 = \"computer\"\nstr2 = \"omputer\"\n\n\
    Output:\n\"omputer\"\n\nExplanation:\nThe longest common substring between str1\
    \ and str2 is \"omputer\".\n\nExample 2:\n\nInput:\nstr1 = \"computer\"\nstr2\
    \ = \"mputer\"\n\nOutput:\n\"mputer\"\n\nExplanation:\nThe longest common substring\
    \ between str1 and str2 is \"mputer\".\n\nExample 3:\n\nInput:\nstr1 = \"computer\"\
    \nstr2 = \"mputers\"\n\nOutput:\n\"mputer\"\n\nExplanation:\nThe longest common\
    \ substring between str1 and str2 is \"mputer\".\n\nExample 4:\n\nInput:\nstr1\
    \ = \"computer\"\nstr2 = \"computer\"\n\nOutput:\n\"computer\"\n\nExplanation:\n\
    The longest common substring between str1 and str2 is \"computer\".\n\nExample\
    \ 5:\n\nInput:\nstr1 = \"computer\"\nstr2 = \"computer\"\n\nOutput:\n\"computer\"\
    \n\nExplanation:\nThe longest common substring between str1 and str2 is \"computer\"\
    .\n\nExample 6:\n\nInput:\nstr1 = \"computer\"\nstr2 = \"computer\"\n\nOutput:\n\
    \"computer\"\n\nExplanation:\nThe longest common substring between str1 and str2\
    \ is \"computer\".\n\nExample 7:\n\nInput:\nstr1 = \"computer\"\nstr2 = \"computer\"\
    \n\nOutput:\n\"computer\"\n\nExplanation:\nThe longest common substring between\
    \ str1 and str2 is \"computer\".\n\n\n</text>\n<cell>", "    \n    # Your code\
    \ here\n    \n    return \"\"\n</cell>\n<text>\nRun the next cell to test your\
    \ code. Note that the expected output is \"True\".\n\n\n</text>\n<cell>", "  \
    \  \n    # Your code here\n    \n    return \"\"\n", "    \n    # Your code here\n\
    \    \n    return \"\"\n</cell>\n<text>\nRun the next cell to test your code.\
    \ Note that the expected value passes and the output matches what we expect.\n\
    \n\n</text>\n<cell>\nsentence = \"The quick brown fox jumps over the lazy dog\"\
    \ntest_sentence(sentence)\n</cell>\n<text>\nFinally, we write a function that\
    \ takes in a string and returns the number of words in the string.\n\n\n</text>\n\
    <cell>", "    \n    # Your code here\n    \n    return \"\"\n</cell>\n<text>\n\
    Let's test your code:\n\n\n</text>\n<cell>", "    \n    words = sentence.split()\n\
    \    \n    prime_words = []\n    \n    for word in words:\n        prime_words.append(len(word))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = list(map(str, prime_words))\n\
    \    \n    return \" \".join(prime_words)\n\n", "    \n    words = sentence.split()\n\
    \    \n    prime_words = []\n    \n    for word in words:\n        \n        prime_words.append(len(word))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = list(map(str, prime_words))\n\
    \    \n    return \" \".join(prime_words)\n\n", "    \n    words = sentence.split()\n\
    \    \n    prime_words = []\n    \n    for word in words:\n        \n        prime_words.append(len(word))\n\
    \        \n    prime_words.sort()\n    \n    prime_words = [str(x) for x in prime_words]\n\
    \    \n    prime_words = [x for x in prime_words if x != '']\n    \n    prime_words\
    \ = list(set(prime_words))\n    \n    prime_words.sort()\n    \n    prime_words\
    \ = [x for x in prime_words if x != '']\n    \n    prime_words = list(set(prime_words))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = [x for x in prime_words\
    \ if x != '']\n    \n    prime_words = list(set(prime_words))\n    \n    prime_words.sort()\n\
    \    \n    prime_words = [x for x in prime_words if x != '']\n    \n    prime_words\
    \ = list(set(prime_words))\n    \n    prime_words.sort()\n    \n    prime_words\
    \ = [x for x in prime_words if x != '']\n    \n    prime_words = list(set(prime_words))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = [x for x in prime_words\
    \ if x != '']\n    \n    prime_words = list(set(prime_words))\n    \n    prime_words.sort()\n\
    \    \n    prime_words = [x for x in prime_words if x != '']\n    \n    prime_words\
    \ = list(set(prime_words))\n    \n    prime_words.sort()\n    \n    prime_words\
    \ = [x for x in prime_words if x != '']\n    \n    prime_words = list(set(prime_words))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = [x for x in prime_words\
    \ if x != '']\n    \n    prime_words = list(set(prime_words))\n    \n    prime_words.sort()\n\
    \    \n    prime_words = [x for x in prime_words if x != '']\n    \n    prime_words\
    \ = list(set(prime_words))\n    \n    prime_words.sort()\n    \n    prime_words\
    \ = [x for x in prime_words if x != '']\n    \n    prime_words = list(set(prime_words))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = [x for x in prime_words\
    \ if x != '']\n    \n    prime_words = list(set(prime_words))\n    \n    prime_words.sort()\n\
    \    \n    prime_words = [x for x in prime_words if x != '", "    \n    words\
    \ = sentence.split()\n    \n    prime_words = []\n    \n    for word in words:\n\
    \        \n        prime_words.append(len(word))\n    \n    prime_words.sort()\n\
    \    \n    prime_words = list(map(str, prime_words))\n    \n    return \" \".join(prime_words)\n\
    </cell>\n<text>\nLet's test our function\n\n\n</text>\n<cell>\nwords_in_sentence(\"\
    The quick brown fox jumps over the lazy dog\")\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a string and returns a string with all the words in\
    \ it sorted alphabetically.\n\n\n</text>\n<cell>", "    \n    # Your code here\n\
    \    \n    return \"\"\n</cell>\n<text>\nRun the cell below to test your code:\n\
    \n\n</text>\n<cell>\nsentence = \"Hello World\"\nassert words_in_sentence(sentence)\
    \ == \"World\"\nsentence = \"Hello World!\"\nassert words_in_sentence(sentence)\
    \ == \"World!\"\nsentence = \"Hello World!!\"\nassert words_in_sentence(sentence)\
    \ == \"World!!\"\nsentence = \"Hello World!!!\"\nassert words_in_sentence(sentence)\
    \ == \"World!!!\"\nsentence = \"Hello World!!!\"\nassert words_in_sentence(sentence)\
    \ == \"World!!!\"\nsentence = \"Hello World!!!\"\nassert words_in_sentence(sentence)\
    \ == \"World!!!\"\nsentence = \"Hello World!!!\"\nassert words_in_sentence(sentence)\
    \ == \"World!!!\"\nsentence = \"Hello World!!!\"\nassert words_in_sentence(sentence)\
    \ == \"World!!!\"\nsentence = \"Hello World!!!\"\nassert words_in_sentence(sentence)\
    \ == \"World!!!\"\nsentence = \"Hello World!!!\"\nassert words_in_sentence(sentence)\
    \ == \"World!!!\"\nsentence = \"Hello World!!!\"\nassert words_in_sentence(sentence)\
    \ == \"World!!!\"\nsentence = \"Hello World!!!\"\nassert words_in_sentence(sentence)\
    \ == \"World!!!\"\nsentence = \"Hello World!!!\"\nassert words_in_sentence(sentence)\
    \ == \"World!!!\"\nsentence = \"Hello World!!!\"\nassert words_in_sentence(sentence)\
    \ == \"World!!!\"\nsentence = \"Hello World!!!\"\nassert words_in_sentence(sentence)\
    \ == \"World!!!\"\nsentence = \"Hello World!!!\"\nassert words_in_sentence(sentence)\
    \ == \"World!!!\"\nsentence = \"Hello World!!!\"\nassert words_in_sentence(sentence)\
    \ == \"World!!!\"\nsentence = \"Hello World!!!\"\nassert words_in_sentence(sentence)\
    \ == \"World!!!\"\nsentence = \"Hello World!!!\"\nassert words_in_sentence(sentence)\
    \ == \"World!!!\"\nsentence = \"Hello World!!!\"\nassert words_in_sentence(sentence)\
    \ == \"World!!!\"\nsentence = \"Hello World!!!\"\nassert words_in_sentence(sentence)\
    \ == \"World!!!\"\nsentence = \"Hello World!!!\"\nassert words_in_sentence(sentence)\
    \ == \"World!!!\"\nsentence = \"Hello World!!!\"\nassert words_in_sentence(sentence)\
    \ == \"World!!!\"\nsentence = \"Hello World!!!\"\nassert words_in_sentence(sentence)\
    \ == \"World!!!\"\nsentence = \"Hello World!!!\"\nassert words_in_sentence(sentence)\
    \ == \"World!!!\"\nsentence = \"Hello World!!!\"\nassert words_in_sentence(sentence)\
    \ == \"World!!!\"\nsentence = \"Hello World!!!\"\nassert words_in_sentence(sentence)\
    \ == \"World!!", "    \n    # Your code here\n    \n    return \"\"\n</cell>\n\
    <text>\nRun the next cell to test your code. Note that the expected output is\
    \ \"abcabc\".\n\n\n</text>\n<cell>\nprint(words_in_sentence(\"The quick brown\
    \ fox jumps over the lazy dog\"))\n</cell>\n<text>\nExercise 3\nThe function is_palindrome\
    \ checks if a given word is a palindrome. Write a function that takes a string\
    \ and checks if it is a palindrome.\n\nExample 1:\n\nInput: \"A man, a plan, a\
    \ canal: Panama\"\nOutput: True\n\nExample 2:\n\nInput: \"race a car\"\nOutput:\
    \ False\n\n</text>\n<cell>", "    \n    words = sentence.split()\n    \n    prime_words\
    \ = []\n    \n    for word in words:\n        \n        prime_words.append(len(word))\n\
    \        \n    prime_words.sort()\n    \n    prime_words = list(map(str, prime_words))\n\
    \    \n    return ' '.join(prime_words)\n</cell>\n<cell>", "    \n    words =\
    \ sentence.split()\n    \n    prime_words = []\n    \n    for word in words:\n\
    \        \n        prime_words.append(len(word))\n    \n    prime_words.sort()\n\
    \    \n    prime_words = list(map(str, prime_words))\n    \n    prime_words.sort()\n\
    \    \n    return ' '.join(prime_words)\n</cell>\n<cell>\nwords_in_sentence('The\
    \ quick brown fox jumps over the lazy dog')\n</cell>\n<text>\nQuestion 5\nWrite\
    \ a Python program to find the number of words in a given string.\n\nConstraints:\n\
    * 1 <= len(sentence) <= 100\n* sentence contains only letters\n* words are separated\
    \ by a single space\n\n</text>\n<cell>", "    \n    # Your code here\n    \n \
    \   return \"\"\n</cell>\n<text>\nRun the cell below to test your code:\n\n\n\
    </text>\n<cell>\nsentence = \"The quick brown fox jumps over the lazy dog\"\n\
    solution = words_in_sentence(sentence)", "    \n    # write your code here\n \
    \   \n    return \"\"\n</cell>\n<text>\nTest Cases\nsentence_1 = \"I am a student\
    \ at Harvard University\"\nsentence_2 = \"I love data science\"\nsentence_3 =\
    \ \"I love data science and machine learning\"\nsentence_4 = \"I love data science\
    \ and machine learning at Harvard University\"\nsentence_5 = \"I love data science\
    \ and machine learning at Harvard University and I love data science\"\nsentence_6\
    \ = \"I love data science and machine learning at Harvard University and I love\
    \ data science and machine learning\"\nsentence_7 = \"I love data science and\
    \ machine learning at Harvard University and I love data science and machine learning\
    \ at Harvard University\"\nsentence_8 = \"I love data science and machine learning\
    \ at Harvard University and I love data science and machine learning at Harvard\
    \ University and I love data science\"\nsentence_9 = \"I love data science and\
    \ machine learning at Harvard University and I love data science and machine learning\
    \ at Harvard University and I love data science and machine learning at Harvard\
    \ University\"\nsentence_10 = \"I love data science and machine learning at Harvard\
    \ University and I love data science and machine learning at Harvard University\
    \ and I love data science and machine learning at Harvard University and I love\
    \ data science\"\nsentence_11 = \"I love data science and machine learning at\
    \ Harvard University and I love data science and machine learning at Harvard University\
    \ and I love data science and machine learning at Harvard University and I love\
    \ data science and machine learning at Harvard University and I love data science\"\
    \nsentence_12 = \"I love data science and machine learning at Harvard University\
    \ and I love data science and machine learning at Harvard University and I love\
    \ data science and machine learning at Harvard University and I love data science\
    \ and machine learning at Harvard University and I love data science and machine\
    \ learning\"\nsentence_13 = \"I love data science and machine learning at Harvard\
    \ University and I love data science and machine learning at Har", "    \n   \
    \ # Your code here\n    \n    return \"\"\n", "    \n    # Your code here\n  \
    \  \n    return \"\"\n</cell>\n<text>\nLet's test your code. Run the cell below.\n\
    \n\n</text>\n<cell>", "    \n    words = sentence.split()\n    \n    prime_words\
    \ = []\n    \n    for word in words:\n        \n        prime_words.append(len(word))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = [str(x) for x in prime_words]\n\
    \    \n    prime_words = [x for x in prime_words if x != '']\n    \n    prime_words\
    \ = list(map(int, prime_words))\n    \n    prime_words.sort()\n    \n    prime_words\
    \ = [str(x) for x in prime_words]\n    \n    prime_words = [x for x in prime_words\
    \ if x != '']\n    \n    prime_words = list(map(int, prime_words))\n    \n   \
    \ prime_words.sort()\n    \n    prime_words = [str(x) for x in prime_words]\n\
    \    \n    prime_words = [x for x in prime_words if x != '']\n    \n    prime_words\
    \ = list(map(int, prime_words))\n    \n    prime_words.sort()\n    \n    prime_words\
    \ = [str(x) for x in prime_words]\n    \n    prime_words = [x for x in prime_words\
    \ if x != '']\n    \n    prime_words = list(map(int, prime_words))\n    \n   \
    \ prime_words.sort()\n    \n    prime_words = [str(x) for x in prime_words]\n\
    \    \n    prime_words = [x for x in prime_words if x != '']\n    \n    prime_words\
    \ = list(map(int, prime_words))\n    \n    prime_words.sort()\n    \n    prime_words\
    \ = [str(x) for x in prime_words]\n    \n    prime_words = [x for x in prime_words\
    \ if x != '']\n    \n    prime_words = list(map(int, prime_words))\n    \n   \
    \ prime_words.sort()\n    \n    prime_words = [str(x) for x in prime_words]\n\
    \    \n    prime_words = [x for x in prime_words if x != '']\n    \n    prime_words\
    \ = list(map(int, prime_words))\n    \n    prime_words.sort()\n    \n    prime_words\
    \ = [str(x) for x in prime_words]\n    \n    prime_words = [x for x in prime_words\
    \ if x != '']\n    \n    prime_words = list(map(int, prime_words))\n    \n   \
    \ prime_words.sort()\n    \n    prime_words = [str(x) for x in prime_words]\n\
    \    \n    prime_words = [x for x in prime_words if x != '']\n    \n    prime_words\
    \ = list(map(int, prime_words))\n    \n    prime_words.sort()\n    \n    prime",
  "    \n    # Your code here\n    \n    return \"\"\n</cell>\n<text>\nTest your code\n\
    Run the cell below to test your code.\n\nThe test is expected to fail until you\
    \ complete the code at the bottom of the notebook.\n\nWhen coding, we recommend\
    \ you enable assertions to test your code more easily.\n\nRun the cell below to\
    \ turn all your assertions off by uncommenting the line below.\n\n\n</text>\n\
    <cell>", "    \n    words = sentence.split()\n    \n    prime_words = []\n   \
    \ \n    for word in words:\n        \n        prime_words.append(len(word))\n\
    \        \n    prime_words.sort()\n    \n    prime_words = [str(x) for x in prime_words]\n\
    \    \n    prime_words = list(map(int, prime_words))\n    \n    prime_words.sort()\n\
    \    \n    prime_words = [str(x) for x in prime_words]\n    \n    prime_words\
    \ = list(map(int, prime_words))\n    \n    prime_words.sort()\n    \n    prime_words\
    \ = [str(x) for x in prime_words]\n    \n    prime_words = list(map(int, prime_words))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = [str(x) for x in prime_words]\n\
    \    \n    prime_words = list(map(int, prime_words))\n    \n    prime_words.sort()\n\
    \    \n    prime_words = [str(x) for x in prime_words]\n    \n    prime_words\
    \ = list(map(int, prime_words))\n    \n    prime_words.sort()\n    \n    prime_words\
    \ = [str(x) for x in prime_words]\n    \n    prime_words = list(map(int, prime_words))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = [str(x) for x in prime_words]\n\
    \    \n    prime_words = list(map(int, prime_words))\n    \n    prime_words.sort()\n\
    \    \n    prime_words = [str(x) for x in prime_words]\n    \n    prime_words\
    \ = list(map(int, prime_words))\n    \n    prime_words.sort()\n    \n    prime_words\
    \ = [str(x) for x in prime_words]\n    \n    prime_words = list(map(int, prime_words))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = [str(x) for x in prime_words]\n\
    \    \n    prime_words = list(map(int, prime_words))\n    \n    prime_words.sort()\n\
    \    \n    prime_words = [str(x) for x in prime_words]\n    \n    prime_words\
    \ = list(map(int, prime_words))\n    \n    prime_words.sort()\n    \n    prime_words\
    \ = [str(x) for x in prime_words]\n    \n    prime_words = list(map(int, prime_words))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = [str(x) for x in prime_words]\n\
    \    \n    prime_words = list(map(int, prime_words))\n    \n    prime_words.sort()\n\
    \    \n    prime", "    \n    # Your code here\n    \n    return \"\"\n</cell>\n\
    <text>\nRun the next cell to test your code. Note that the expected value is \"\
    abc\".\n\n\n</text>\n<cell>", "    \n    # Your code here\n    \n    return \"\
    \"\n</cell>\n<text>\nLet's test your code. Run the cell below.\n\n\n</text>\n\
    <cell>\nprint(words_in_sentence(\"The quick brown fox jumps over the lazy dog\"\
    ))\n</cell>\n<text>\nExpected Output:\n\n['quick', 'brown', 'fox', 'jumps', 'over',\
    \ 'lazy', 'dog']\n\n</text>\n<text>\nExercise 4:\nGiven a list of strings, return\
    \ the length of the shortest string in the list.\n\n\n</text>\n<text>\nSolution\
    \ 4:\n\n</text>\n<cell>", "    \n    words = sentence.split()\n    \n    prime_words\
    \ = []\n    \n    for word in words:\n        prime_words.append(len(word))\n\
    \    \n    prime_words.sort()\n    \n    prime_words_string = \"\"\n    \n   \
    \ for word in prime_words:\n        prime_words_string += word\n        \n   \
    \ return prime_words_string\n</cell>\n<text>\nLet's test our function\n\n\n</text>\n\
    <cell>\nwords_in_sentence(\"The quick brown fox jumps over the lazy dog\")\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a string and returns the number\
    \ of words in the string.\n\nExample 1:\n\nInput: \"The quick brown fox jumps\
    \ over the lazy dog\"\nOutput: 9\n\nExample 2:\n\nInput: \"The quick brown fox\
    \ jumps over the lazy dog.\"\nOutput: 10\n\nExample 3:\n\nInput: \"The quick brown\
    \ fox jumps over the lazy dog .\"\nOutput: 10\n\nConstraints:\n* 1 <= len(string)\
    \ <= 100\n* string contains only letters.\n\"\"\"\n", "    \n    # Your code here\n\
    \    \n    return \"\"\n", "    \n    # Your code here\n    \n    return \"\"\n\
    </cell>\n<text>\nLet's test your implementation\n\n\n</text>\n<cell>", "    \n\
    \    # Your code here\n    \n    return \"\"\n</cell>\n<text>\nRun the cell below\
    \ to test your code:\n\n\n</text>\n<cell>\nsentence = \"The quick brown fox jumps\
    \ over the lazy dog\"\nsolution = words_in_sentence(sentence)\ncheck(\"words_in_sentence\"\
    , solution)\n</cell>\n<text>\nExpected Output:\n\nThe quick brown fox jumps over\
    \ the lazy dog\nThe quick brown fox jumps over the lazy dog\nThe quick brown fox\
    \ jumps over the lazy dog\nThe quick brown fox jumps over the lazy dog\nThe quick\
    \ brown fox jumps over the lazy dog\nThe quick brown fox jumps over the lazy dog\n\
    The quick brown fox jumps over the lazy dog\nThe quick brown fox jumps over the\
    \ lazy dog\nThe quick brown fox jumps over the lazy dog\nThe quick brown fox jumps\
    \ over the lazy dog\nThe quick brown fox jumps over the lazy dog\nThe quick brown\
    \ fox jumps over the lazy dog\nThe quick brown fox jumps over the lazy dog\nThe\
    \ quick brown fox jumps over the lazy dog\nThe quick brown fox jumps over the\
    \ lazy dog\nThe quick brown fox jumps over the lazy dog\nThe quick brown fox jumps\
    \ over the lazy dog\nThe quick brown fox jumps over the lazy dog\nThe quick brown\
    \ fox jumps over the lazy dog\nThe quick brown fox jumps over the lazy dog\nThe\
    \ quick brown fox jumps over the lazy dog\nThe quick brown fox jumps over the\
    \ lazy dog\nThe quick brown fox jumps over the lazy dog\nThe quick brown fox jumps\
    \ over the lazy dog\nThe quick brown fox jumps over the lazy dog\nThe quick brown\
    \ fox jumps over the lazy dog\nThe quick brown fox jumps over the lazy dog\nThe\
    \ quick brown fox jumps over the lazy dog\nThe quick brown fox jumps over the\
    \ lazy dog\nThe quick brown fox jumps over the lazy dog\nThe quick brown fox jumps\
    \ over the lazy dog\nThe quick brown fox jumps over the lazy dog\nThe quick brown\
    \ fox jumps over the lazy dog\nThe quick brown fox jumps over the lazy dog\nThe\
    \ quick brown fox jumps over the lazy dog\nThe quick brown fox jumps over the\
    \ lazy dog\nThe quick brown fox ", "    \n    # Your code here\n    \n    return\
    \ \"\"\n", "    \n    # Your code here\n    \n    return \"\"\n</cell>\n<text>\n\
    Run the next cell to test your code. Note that the expected value passes and the\
    \ output matches what we expect.\n\n\n</text>\n<cell>\nsentence = \"The quick\
    \ brown fox jumps over the lazy dog\"\ntest_words_in_sentence(sentence)\n</cell>\n\
    <text>\nNow that you've seen the basic structure of a function, let's write a\
    \ function that takes in a sentence and returns a list of words. Your function\
    \ should take in a sentence and return a list containing all the words in the\
    \ sentence (with duplicates). Make sure that your returned list has the same order\
    \ as the input string. For example, if the input string is \"The quick brown fox\
    \ jumps over the lazy dog\", your function should return [\"The\", \"quick\",\
    \ \"brown\", \"fox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"].\n\nHint:\
    \ You'll need to use split() twice.\n\n\n</text>\n<cell>", "    \n    # Your code\
    \ here\n    \n    return \"\"\n</cell>\n<text>\nTest your code\nRun the cell below\
    \ to test your code.\n\nThe test is expected to fail until you fix the code.\n\
    \n\n</text>\n<cell>\nsentence = \"The quick brown fox jumps over the lazy dog\"\
    \nprint(\"Input: \" + sentence)\nprint(\"Output: \" + words_in_sentence(sentence))\n\
    </cell>\n<text>\nExpected Output:\n\nInput: The quick brown fox jumps over the\
    \ lazy dog\nOutput: quick brown fox jumps over lazy dog\n\n</text>\n<text>\nExercise\
    \ 3\nThe function words_in_sentence should work when the sentence is empty. Write\
    \ a test that tests the function by asserting that the expected output is an empty\
    \ string.\n\nHint: You can solve this exercise using assert statements.\n\n\n\
    </text>\n<cell>", "    \n    words = sentence.split()\n    \n    prime_words =\
    \ []\n    \n    for word in words:\n        \n        prime_words.append(len(word))\n\
    \        \n    prime_words.sort()\n    \n    prime_words = list(filter(lambda\
    \ x: x > 1, prime_words))\n    \n    return \" \".join(prime_words)\n</cell>\n\
    <cell>", "    \n    # Your code here\n    \n    return \"\"\n</cell>\n<text>\n\
    Let's test your code. Run the cell below.\n\n\n</text>\n<cell>\nprint(words_in_sentence(\"\
    The quick brown fox jumps over the lazy dog\"))\n</cell>\n<text>\nExpected Output:\n\
    \n['quick', 'brown', 'fox', 'jumps', 'over', 'lazy', 'dog']\n\n</text>\n<text>\n\
    Now let's see a fun challenge. Implement a function that takes in a sentence,\
    \ checks if it contains any uppercase letter (case sensitive), and returns all\
    \ letters in lower case. Do not count spaces or punctuation as letters. If the\
    \ sentence is empty you should return the empty string.\n\n\n</text>\n<text>\n\
    Solution\nSee below.\n\n\n</text>\n<cell>", "    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    \n    # Your code here\n    \n    return \"\"\
    \n", "    \n    words = sentence.split()\n    \n    prime_words = []\n    \n \
    \   for word in words:\n        prime_words.append(len(word))\n    \n    prime_words.sort()\n\
    \    \n    prime_words = list(map(str, prime_words))\n    \n    return \" \".join(prime_words)\n\
    </cell>\n<cell>", "    \n    words = sentence.split()\n    \n    prime_words =\
    \ []\n    \n    for word in words:\n        \n        prime_words.append(len(word))\n\
    \    \n    prime_words.sort()\n    \n    prime_words_str = ' '.join(prime_words)\n\
    \    \n    return prime_words_str\n\n", "    \n    # Your code here\n    \n  \
    \  return \"\"\n", "    \n    # Your code here\n    \n    return \"\"\n</cell>\n\
    <cell>", "    \n    # Your code here\n    \n    return \"\"\n", "    \n    words\
    \ = sentence.split()\n    \n    prime_words = []\n    \n    for word in words:\n\
    \        \n        prime_words.append(len(word))\n    \n    prime_words.sort()\n\
    \    \n    prime_words = list(map(str, prime_words))\n    \n    return \" \".join(prime_words)\n\
    </cell>\n<cell>", "    \n    # write your code here\n    \n    return \"\"\n</cell>\n\
    <text>\nLet's test your implementation:\n\n\n</text>\n<cell>\nprint(words_in_sentence(\"\
    The quick brown fox jumps over the lazy dog\"))\nprint(words_in_sentence(\"The\
    \ quick brown fox jumps over the lazy dog.\"))\nprint(words_in_sentence(\"The\
    \ quick brown fox jumps over the lazy dog.\"))\nprint(words_in_sentence(\"The\
    \ quick brown fox jumps over the lazy dog.\"))\n</cell>\n<text>\nExpected Output:\n\
    \nThe quick brown fox jumps over the lazy dog\nThe quick brown fox jumps over\
    \ the lazy dog.\nThe quick brown fox jumps over the lazy dog.\nThe quick brown\
    \ fox jumps over the lazy dog.\n\n</text>\n<text>\nNow let's write a function\
    \ that takes a sentence and returns a list of its words.\nYour function should\
    \ take a string parameter and return a list containing the words in the sentence.\n\
    The function does not need to remove duplicates in the list, and it should return\
    \ the original sentence if it contains any duplicates.\n\n\n</text>\n<cell>",
  "    \n    # Your code here\n    \n    return \"\"\n</cell>\n<cell>", "    \n  \
    \  # Your code here\n    \n    return \"\"\n", "    \n    words = sentence.split()\n\
    \    \n    prime_words = []\n    \n    for word in words:\n        \n        prime_words.append(len(word))\n\
    \        \n    prime_words.sort()\n    \n    prime_words = list(map(str, prime_words))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = list(map(int, prime_words))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = list(map(str, prime_words))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = list(map(int, prime_words))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = list(map(str, prime_words))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = list(map(int, prime_words))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = list(map(str, prime_words))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = list(map(int, prime_words))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = list(map(str, prime_words))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = list(map(int, prime_words))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = list(map(str, prime_words))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = list(map(int, prime_words))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = list(map(str, prime_words))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = list(map(int, prime_words))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = list(map(str, prime_words))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = list(map(int, prime_words))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = list(map(str, prime_words))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = list(map(int, prime_words))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = list(map(str, prime_words))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = list(map(int, prime_words))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = list(map(str, prime_words))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = list(map(int, prime", " \
    \   \n    # Your code here\n    \n    return \"\"\n", "    \n    # Your code here\n\
    \    \n    return \"\"\n", "    \n    # Your code here\n    \n    return \"\"\n\
    </cell>\n<text>\nRun the next cell to test your code. Note that the expected value\
    \ passes and the output matches what we expected.\n\n\n</text>\n<cell>", "   \
    \ \n    # Your code here\n    \n    return \"\"\n</cell>\n<text>\nRun the cell\
    \ below to test your code:\n\n\n</text>\n<cell>\nsentence = \"The quick brown\
    \ fox jumps over the lazy dog\"\nprint(\"Input:\\n\", sentence)\nprint(\"Output:\\\
    n\", words_in_sentence(sentence))\n</cell>\n<text>\nExpected Output:\n\nInput:\n\
    The quick brown fox jumps over the lazy dog\nOutput:\n['The', 'quick', 'brown',\
    \ 'fox', 'jumps', 'over', 'the', 'lazy', 'dog']\n\n</text>\n<text>\nExercise 4:\n\
    Write a function that takes a sentence and returns a list containing the words\
    \ in the sentence with their lengths.\n\n\n</text>\n<cell>", "    \n    # Your\
    \ code here\n    \n    return \"\"\n</cell>\n<cell>", "    \n    words = sentence.split()\n\
    \    \n    prime_words = []\n    \n    for word in words:\n        \n        prime_words.append(len(word))\n\
    \        \n    prime_words.sort()\n    \n    prime_words_string = ''\n    \n \
    \   for word in prime_words:\n        \n        prime_words_string += word\n \
    \       \n    return prime_words_string\n</cell>\n<cell>", "    \n    # Your code\
    \ here\n    \n    return \"\"\n</cell>\n<text>\nTest your code\nRun the cell below\
    \ to test your code.\n\nThe test cell uses this \"test string\" for the sentence\
    \ \"The quick brown fox jumps over the lazy dog\".\n\nBecause the length of the\
    \ prime numbers is smaller than the length of the original string,\nthe test will\
    \ fail.\n\n\n</text>\n<cell>", "    \n    words = sentence.split()\n    \n   \
    \ prime_words = []\n    \n    for word in words:\n        \n        prime_words.append(len(word))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = [str(x) for x in prime_words]\n\
    \    \n    prime_words = \"_\".join(prime_words)\n    \n    return prime_words\n\
    \n", "    \n    words = sentence.split()\n    \n    prime_words = []\n    \n \
    \   for word in words:\n        prime_words.append(len(word))\n    \n    prime_words.sort()\n\
    \    \n    prime_words = list(map(str, prime_words))\n    \n    return \" \".join(prime_words)\n\
    \n", "    \n    # Your code here\n    \n    return \"\"\n</cell>\n<text>\nRun\
    \ the cell below to test your code. Note that the expected value passes and the\
    \ output matches what we expected.\n\n\n</text>\n<cell>\nsentence = \"The quick\
    \ brown fox jumps over the lazy dog\"\ntest_sentence = \"The quick brown fox jumps\
    \ over the lazy dog\"\nexpected_output = \"\"\nactual = words_in_sentence(test_sentence)\n\
    assert actual == expected_output\nprint(\"Test case passed!\")\n</cell>\n<text>\n\
    Now let's see how close your implementation is. We define a function count_letters(sentence)\
    \ that returns the number of letters in the sentence (including spaces):\n\n\n\
    </text>\n<cell>", "    \n    words = sentence.split()\n    \n    prime_words =\
    \ []\n    \n    for word in words:\n        \n        prime_words.append(len(word))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = [str(x) for x in prime_words]\n\
    \    \n    return \" \".join(prime_words)\n\n", "    \n    # write your code here\n\
    \    \n    return \"\"\n</cell>\n<text>\nRun the following cell to check your\
    \ answer.\n\n\n</text>\n<cell>", "    \n    words = sentence.split()\n    \n \
    \   prime_words = []\n    \n    for word in words:\n        \n        prime_words.append(len(word))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = list(map(str, prime_words))\n\
    \    \n    return \" \".join(prime_words)\n", "    \n    words = sentence.split()\n\
    \    \n    prime_words = []\n    \n    for word in words:\n        \n        prime_words.append(len(word))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = [str(x) for x in prime_words]\n\
    \    \n    prime_words = \"_\".join(prime_words)\n    \n    return prime_words\n\
    </cell>\n<text>\nLet's test our function\n\n\n</text>\n<cell>\nwords_in_sentence(\"\
    The quick brown fox jumps over the lazy dog\")\n</cell>\n<text>\nWe should get\
    \ \"fox jumps over lazy dog\"\n\n\n</text>\n<text>\nQuestion 3\nWrite a function\
    \ that takes a string as input and returns the number of words in the string.\n\
    \nExample 1:\n\nInput: \"The quick brown fox jumps over the lazy dog\"\nOutput:\
    \ 5\nExplanation: The string contains 5 words.\n\nExample 2:\n\nInput: \"The quick\
    \ brown fox jumps over the lazy dog The quick brown fox jumps over the lazy dog\"\
    \nOutput: 15\nExplanation: The string contains 15 words.\n\nExample 3:\n\nInput:\
    \ \"The quick brown fox jumps over the lazy dog The quick brown fox jumps over\
    \ the lazy dog The quick brown fox jumps over the lazy dog The quick brown fox\
    \ jumps over the lazy dog\"\nOutput: 20\nExplanation: The string contains 20 words.\n\
    \nConstraints:\n1 <= len(string) <= 100\nstring contains only letters.\n\n\n</text>\n\
    <cell>", "    \n    # Your code here\n    \n    return \"\"\n</cell>\n<text>\n\
    Run the next cell to test your code. Note that the expected output is \"True\"\
    .\n\n\n</text>\n<cell>\nprint(words_in_sentence(\"The quick brown fox jumps over\
    \ the lazy dog\"))\n</cell>\n<text>\nExercise 3\nImplement a function that counts\
    \ the number of words in a sentence that contain one of a set of words.\n\nFor\
    \ example, if the sentence is \"The brown fox jumps over the lazy dog\", your\
    \ function should return \"brown\".\n\nThe list of words can be passed to the\
    \ function as such:\n", "    \n    # Your code here\n    \n    return \"\"\n</cell>\n\
    <text>\nRun the next cell to test your code. Note that the expected output is\
    \ \"True\".\n\n\n</text>\n<cell>\nprint(words_in_sentence(\"The quick brown fox\
    \ jumps over the lazy dog\"))\n</cell>\n<text>\nExercise 3\nThe function is_palindrome\
    \ checks if a string is a palindrome. It should return \"True\" or \"False\".\n\
    \nExample 1:\nInput: \"A man, a plan, a canal: Panama\"\nOutput: \"True\"\n\n\
    Example 2:\nInput: \"race a car\"\nOutput: \"False\"\n\nExample 3:\nInput: \"\
    A man, a plan, a canal: Panama\"\nOutput: \"True\"\n\nExample 4:\nInput: \"race\
    \ a car\"\nOutput: \"False\"\n\nExample 5:\nInput: \"A man, a plan, a canal: Panama\"\
    \nOutput: \"True\"\n\nExample 6:\nInput: \"race a car\"\nOutput: \"False\"\n\n\
    Example 7:\nInput: \"A man, a plan, a canal: Panama\"\nOutput: \"True\"\n\nExample\
    \ 8:\nInput: \"race a car\"\nOutput: \"False\"\n\nExample 9:\nInput: \"A man,\
    \ a plan, a canal: Panama\"\nOutput: \"True\"\n\nExample 10:\nInput: \"race a\
    \ car\"\nOutput: \"False\"\n\n</text>\n<cell>", "    \n    words = sentence.split()\n\
    \    \n    prime_words = []\n    \n    for word in words:\n        \n        prime_words.append(len(word))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = [str(x) for x in prime_words]\n\
    \    \n    return \" \".join(prime_words)\n</cell>\n<cell>", "    \n    # write\
    \ your code here\n    \n    return \"\"\n</cell>\n<text>\nRun the next cell to\
    \ test your code. Note that the expected output for \"words_in_sentence\" should\
    \ be \"eight nine\".\n\n\n</text>\n<cell>", "    \n    # Your code here\n    \n\
    \    return \"\"\n</cell>\n<text>\nRun the next cell to test your code. Note that\
    \ the expected output varies for different inputs.\n\n\n</text>\n<cell>\nsentence\
    \ = \"The quick brown fox jumps over the lazy dog\"\nprint(\"Input:\", sentence)\n\
    print(\"Output:\", words_in_sentence(sentence))\n</cell>\n<text>\nExpected Output:\n\
    \nInput: The quick brown fox jumps over the lazy dog\nOutput: quick brown fox\
    \ jumps over lazy dog\n\n</text>\n<text>\nExercise 3\nThe function words_in_sentence\
    \ should work even if there are no spaces between the words.\n\nWrite a function\
    \ that takes in a string and returns the same string with all the words separated\
    \ by a space.\n\nExample 1:\n\nInput: \"Hello World\"\nOutput: \"Hello World\"\
    \n\nExample 2:\n\nInput: \"Hello World!!\"\nOutput: \"Hello World !!\"\n\n</text>\n\
    <cell>", "    \n    words = sentence.split()\n    \n    prime_words = []\n   \
    \ \n    for word in words:\n        prime_words.append(len(word))\n    \n    prime_words.sort()\n\
    \    \n    prime_words = list(map(int, prime_words))\n    \n    prime_words.sort()\n\
    \    \n    prime_words = list(map(str, prime_words))\n    \n    prime_words.sort()\n\
    \    \n    return \" \".join(prime_words)\n</cell>\n<cell>", "    \n    words\
    \ = sentence.split()\n    \n    prime_words = []\n    \n    for word in words:\n\
    \        \n        prime_words.append(len(word))\n    \n    prime_words.sort()\n\
    \    \n    prime_words = list(map(str, prime_words))\n    \n    return \" \".join(prime_words)\n\
    \n", "    \n    # Your code here\n    \n    return \"\"\n</cell>\n<cell>", " \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    # Your code\
    \ here\n    \n    return \"\"\n</cell>\n<text>\nRun the cell below to test your\
    \ code:\n\n\n</text>\n<cell>\nsentence = \"The quick brown fox jumps over the\
    \ lazy dog\"\nprint(\"The length of the sentence is\", len(sentence))\nprint(\"\
    The words in the sentence are\", words_in_sentence(sentence))\n</cell>\n<text>\n\
    Expected Output:\n\nThe length of the sentence is 26\nThe words in the sentence\
    \ are quick brown fox jumps over lazy dog\n\n</text>\n<text>\nExercise 3:\nWrite\
    \ a function that takes a sentence and returns a list of words,\nwhere each word\
    \ is separated by a space.\n\nThe sentence should be passed in as a single string.\
    \ \nThe function should split the sentence into a list where each element of the\
    \ list is a word.\nThe function should return a list of words in the sentence\
    \ (now split into a list).\nThe length of the list should be the length of the\
    \ sentence.\nThe order of the words should be the same as the original sentence.\n\
    \nExample input:\nsentence = \"The quick brown fox jumps over the lazy dog\"\n\
    \n\nExample output:\n[\"The\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\"\
    , \"the\", \"lazy\", \"dog\"]\n\n</text>\n<cell>", "    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    \n    words = sentence.split()\n    prime_words\
    \ = []\n    for word in words:\n        prime_words.append(len(word))\n    prime_words.sort()\n\
    \    \n    prime_words = [str(x) for x in prime_words]\n    prime_words = list(filter(None,\
    \ prime_words))\n    \n    return \" \".join(prime_words)\n\n", "    \n    words\
    \ = sentence.split()\n    \n    prime_words = []\n    \n    for word in words:\n\
    \        \n        prime_words.append(len(word))\n        \n    prime_words.sort()\n\
    \    \n    prime_words = [str(x) for x in prime_words]\n    \n    return \" \"\
    .join(prime_words)\n</cell>\n<cell>", "    \n    # Your code here\n    \n    return\
    \ \"\"\n</cell>\n<cell>", "    \n    words = sentence.split()\n    \n    prime_words\
    \ = []\n    \n    for word in words:\n        \n        prime_words.append(len(word))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = [str(x) for x in prime_words]\n\
    \    \n    return \" \".join(prime_words)\n</cell>\n<cell>", "    \n    words\
    \ = sentence.split()\n    \n    prime_words = []\n    \n    for word in words:\n\
    \        \n        prime_words.append(len(word))\n    \n    prime_words.sort()\n\
    \    \n    prime_words = [str(x) for x in prime_words]\n    \n    return \" \"\
    .join(prime_words)\n", "    \n    words = sentence.split()\n    \n    prime_words\
    \ = []\n    \n    for word in words:\n        \n        prime_words.append(len(word))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = [str(x) for x in prime_words]\n\
    \    \n    return \" \".join(prime_words)\n", "    \n    # Your code here\n  \
    \  \n    return \"\"\n</cell>\n<cell>", "    \n    words = sentence.split()\n\
    \    \n    prime_words = []\n    \n    for word in words:\n        \n        prime_words.append(len(word))\n\
    \    \n    prime_words.sort()\n    \n    prime_words_str = ' '.join(prime_words)\n\
    \    \n    return prime_words_str\n\n", "    \n    # Your code here\n    \n  \
    \  return \"\"\n</cell>\n<cell>", "    \n    # Your code here\n    \n    return\
    \ \"\"\n</cell>\n<text>\nLet's test your code. Run the cell below to test your\
    \ code.\n\n\n</text>\n<cell>\nsentence = \"The quick brown fox jumps over the\
    \ lazy dog\"\nprint(\"The length of the sentence is\", len(sentence))\nprint(\"\
    The words in the sentence are\", words_in_sentence(sentence))\n</cell>\n<text>\n\
    Expected Output:\n\nThe length of the sentence is 26\nThe words in the sentence\
    \ are quick brown fox jumps over lazy dog\n\n</text>\n<text>\nExercise 4:\nGiven\
    \ a sentence, return True if the sentence is a palindrome, otherwise return False.\n\
    \nExample 1:\n\nInput: \"A man, a plan, a canal: Panama\"\n\nOutput: True\n\n\
    Explanation: \"man\", \"plan\", \"canal\" are palindrome.\n\nExample 2:\n\nInput:\
    \ \"race a car\"\n\nOutput: False\n\nExplanation: \"race\" and \"car\" are not\
    \ palindrome.\n\nExample 3:\n\nInput: \"A man, a plan, a canal: Panama\"\n\nOutput:\
    \ True\n\nExplanation: \"man\", \"plan\", \"canal\" are palindrome.\n\nExample\
    \ 4:\n\nInput: \"race a car\"\n\nOutput: False\n\nExplanation: \"race\" and \"\
    car\" are not palindrome.\n\n\n</text>\n<cell>", "    \n    # Your code here\n\
    \    \n    return \"\"\n", "    \n    # Your code here\n    \n    return \"\"\n\
    </cell>\n<text>\nRun the next cell to test your code. Note that the expected output\
    \ varies for different inputs.\n\n\n</text>\n<cell>\nsentence = \"The quick brown\
    \ fox jumps over the lazy dog\"\nprint(\"Input:\\n\", sentence)\nprint(\"Output:\\\
    n\", words_in_sentence(sentence))\n</cell>\n<text>\nExpected Output:\n\nInput:\n\
    The quick brown fox jumps over the lazy dog\n\nOutput:\n['The', 'quick', 'brown',\
    \ 'fox', 'jumps', 'over', 'the', 'lazy', 'dog']\n\n</text>\n<text>\nExercise 3\n\
    Given a list of strings, return the string with the lowest length which has two\
    \ or more letters in common with the original string.\n\nExample 1:\n\nInput:\
    \ [\"h\",\"he\",\"hell\",\"hello\"]\nOutput: \"hello\"\nExplanation: \"hello\"\
    \ is of length 3 because it has two or more letters in common with the original\
    \ string \"h\".\n\nExample 2:\n\nInput: [\"he\",\"hell\",\"hello\"]\nOutput: \"\
    hell\"\nExplanation: \"hell\" is of length 2 because it has two or more letters\
    \ in common with the original string \"he\".\n\nExample 3:\n\nInput: [\"hello\"\
    ]\nOutput: \"hello\"\nExplanation: \"hello\" is of length 1 because it has one\
    \ letter in common with the original string \"hello\".\n\nExample 4:\n\nInput:\
    \ []\nOutput: \"\"\nExplanation: You will get an empty string if you pass a list\
    \ with no strings in it.\n\n\n</text>\n<cell>", "    \n    # Your code here\n\
    \    \n    return \"\"\n</cell>\n<cell>", "    \n    # Your code here\n    \n\
    \    return \"\"\n</cell>\n<text>\nRun the following cell to test your code:\n\
    \n\n</text>\n<cell>\nsentence = \"abc def ghi jkl\"\nprint(\"The original sentence\
    \ is: \" + sentence)\nprint(\"The words in the sentence are: \" + words_in_sentence(sentence))\n\
    </cell>\n<text>\nExpected Output:\n\nThe original sentence is: abc def ghi jkl\n\
    The words in the sentence are: abc def ghi jkl\n\n</text>\n<text>\nExercise 4:\n\
    Write a function that takes a string and returns a list of words,\nwhere the words\
    \ are separated by spaces.\n\nThe string may contain more than one word.\nThe\
    \ function does not remove duplicate words.\nThe order of the words does not matter.\n\
    You may assume that the string contains only ASCII characters.\n\n\n</text>\n\
    <cell>", "    \n    # Your code here\n    \n    return \"\"\n", "    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    \n    # Your code here\n  \
    \  \n    return \"\"\n", "    \n    # Your code here\n    \n    return \"\"\n\
    </cell>\n<cell>", "    \n    # Your code here\n    \n    return \"\"\n</cell>\n\
    <cell>", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n\
    \    words = sentence.split()\n    \n    prime_words = []\n    \n    for word\
    \ in words:\n        \n        prime_words.append(len(word))\n    \n    prime_words.sort()\n\
    \    \n    prime_words = list(map(int, prime_words))\n    \n    prime_words.sort()\n\
    \    \n    prime_words = list(map(str, prime_words))\n    \n    prime_words.sort()\n\
    \    \n    prime_words = list(map(int, prime_words))\n    \n    prime_words.sort()\n\
    \    \n    prime_words = list(map(str, prime_words))\n    \n    prime_words.sort()\n\
    \    \n    prime_words = list(map(int, prime_words))\n    \n    prime_words.sort()\n\
    \    \n    prime_words = list(map(str, prime_words))\n    \n    prime_words.sort()\n\
    \    \n    prime_words = list(map(int, prime_words))\n    \n    prime_words.sort()\n\
    \    \n    prime_words = list(map(str, prime_words))\n    \n    prime_words.sort()\n\
    \    \n    prime_words = list(map(int, prime_words))\n    \n    prime_words.sort()\n\
    \    \n    prime_words = list(map(str, prime_words))\n    \n    prime_words.sort()\n\
    \    \n    prime_words = list(map(int, prime_words))\n    \n    prime_words.sort()\n\
    \    \n    prime_words = list(map(str, prime_words))\n    \n    prime_words.sort()\n\
    \    \n    prime_words = list(map(int, prime_words))\n    \n    prime_words.sort()\n\
    \    \n    prime_words = list(map(str, prime_words))\n    \n    prime_words.sort()\n\
    \    \n    prime_words = list(map(int, prime_words))\n    \n    prime_words.sort()\n\
    \    \n    prime_words = list(map(str, prime_words))\n    \n    prime_words.sort()\n\
    \    \n    prime_words = list(map(int, prime_words))\n    \n    prime_words.sort()\n\
    \    \n    prime_words = list(map(str, prime_words))\n    \n    prime_words.sort()\n\
    \    \n    prime_words = list(map(int, prime_words))\n    \n    prime_words.sort()\n\
    \    \n    prime_words = list(map(str, prime_words))\n    \n    prime_words.sort()\n\
    \    \n    prime_words = list(map(int, prime_words))\n    \n    prime_words.sort()\n\
    \    \n    prime_words = list(map(str, prime", "    \n    words = sentence.split()\n\
    \    prime_words = []\n    for word in words:\n        prime_words.append(len(word))\n\
    \    prime_words.sort()\n    \n    prime_words_string = \"\"\n    for word in\
    \ prime_words:\n        prime_words_string += str(word) + \" \"\n    \n    return\
    \ prime_words_string\n", "    \n    # Your code here\n    \n    return \"\"\n\
    </cell>\n<text>\nRun the cell below to test your code:\n\n\n</text>\n<cell>\n\
    sentence = \"The quick brown fox jumps over the lazy dog\"\nprint(\"The length\
    \ of the sentence is\", len(sentence))\nprint(\"The words in the sentence are\"\
    , words_in_sentence(sentence))\n</cell>\n<text>\nExpected Output:\n\nThe length\
    \ of the sentence is 26\nThe words in the sentence are quick brown fox jumps over\
    \ lazy dog\n\n</text>\n<text>\nExercise 4:\nWrite a function that takes a string\
    \ and returns a list of all the words in the sentence with their lengths. Your\
    \ function should ignore spaces. For example, \" spam \" -> [\"spam\"]\n\nHint:\
    \ Use a for loop!\n\n\n</text>\n<cell>", "    \n    # Your code here\n    \n \
    \   return \"\"\n", "    \n    # Your code here\n    \n    return \"\"\n</cell>\n\
    <text>\nRun the cell below to test your code:\n\n\n</text>\n<cell>", "    \n \
    \   words = sentence.split()\n    \n    prime_words = []\n    \n    for word in\
    \ words:\n        \n        prime_words.append(len(word))\n        \n    prime_words.sort()\n\
    \    \n    prime_words = [str(x) for x in prime_words]\n    \n    prime_words\
    \ = \"_\".join(prime_words)\n    \n    return prime_words\n\n", "    \n    words\
    \ = sentence.split()\n    \n    prime_words = []\n    \n    for word in words:\n\
    \        prime_words.append(len(word))\n    \n    prime_words.sort()\n    \n \
    \   prime_words = list(map(str, prime_words))\n    \n    return \" \".join(prime_words)\n\
    \n", "    \n    words = sentence.split()\n    \n    prime_words = []\n    \n \
    \   for word in words:\n        prime_words.append(len(word))\n    \n    prime_words.sort()\n\
    \    \n    prime_words = list(map(str, prime_words))\n    \n    return \" \".join(prime_words)\n\
    \n", "    \n    # Your code here\n    \n    return \"\"\n</cell>\n<cell>", " \
    \   \n    words = sentence.split()\n    \n    prime_words = []\n    \n    for\
    \ word in words:\n        \n        prime_words.append(len(word))\n    \n    prime_words.sort()\n\
    \    \n    prime_words_string = \"\"\n    \n    for word in prime_words:\n   \
    \     \n        prime_words_string += word + \" \"\n    \n    return prime_words_string\n\
    </cell>\n<cell>", "    \n    words = sentence.split()\n    \n    prime_words =\
    \ []\n    \n    for word in words:\n        prime_words.append(len(word))\n  \
    \  \n    prime_words.sort()\n    \n    prime_words = list(map(str, prime_words))\n\
    \    \n    return \" \".join(prime_words)\n\n", "    \n    # Your code here\n\
    \    \n    return \"\"\n</cell>\n<text>\nLet's test your implementation:\n\n\n\
    </text>\n<cell>\nsentence = \"Hello World!\"\nassert words_in_sentence(sentence)\
    \ == \"World!\"\nassert words_in_sentence(sentence) == \"Hello World!\"\nassert\
    \ words_in_sentence(sentence) == \"Hello World!\"\nassert words_in_sentence(sentence)\
    \ == \"Hello World!\"\nassert words_in_sentence(sentence) == \"Hello World!\"\n\
    assert words_in_sentence(sentence) == \"Hello World!\"\nassert words_in_sentence(sentence)\
    \ == \"Hello World!\"\nassert words_in_sentence(sentence) == \"Hello World!\"\n\
    assert words_in_sentence(sentence) == \"Hello World!\"\nassert words_in_sentence(sentence)\
    \ == \"Hello World!\"\nassert words_in_sentence(sentence) == \"Hello World!\"\n\
    assert words_in_sentence(sentence) == \"Hello World!\"\nassert words_in_sentence(sentence)\
    \ == \"Hello World!\"\nassert words_in_sentence(sentence) == \"Hello World!\"\n\
    assert words_in_sentence(sentence) == \"Hello World!\"\nassert words_in_sentence(sentence)\
    \ == \"Hello World!\"\nassert words_in_sentence(sentence) == \"Hello World!\"\n\
    assert words_in_sentence(sentence) == \"Hello World!\"\nassert words_in_sentence(sentence)\
    \ == \"Hello World!\"\nassert words_in_sentence(sentence) == \"Hello World!\"\n\
    assert words_in_sentence(sentence) == \"Hello World!\"\nassert words_in_sentence(sentence)\
    \ == \"Hello World!\"\nassert words_in_sentence(sentence) == \"Hello World!\"\n\
    assert words_in_sentence(sentence) == \"Hello World!\"\nassert words_in_sentence(sentence)\
    \ == \"Hello World!\"\nassert words_in_sentence(sentence) == \"Hello World!\"\n\
    assert words_in_sentence(sentence) == \"Hello World!\"\nassert words_in_sentence(sentence)\
    \ == \"Hello World!\"\nassert words_in_sentence(sentence) == \"Hello World!\"\n\
    assert words_in_sentence(sentence) == \"Hello World!\"\nassert words_in_sentence(sentence)\
    \ == \"Hello World!\"\nassert words_in_sentence(sentence) == \"Hello World!\"\n\
    assert words_in_sentence(sentence) == \"Hello World!\"\nassert words_in_sentence(sentence)\
    \ == \"Hello World!\"\nassert words_in_sentence(sentence) == \"Hello World!\"\n\
    assert words_in_sentence(sentence) == \"Hello World!\"\nassert words_in_sentence(sentence)\
    \ == \"Hello World!\"\nassert words_in_sentence(sentence) == \"Hello World!\"\n\
    assert words_in_sentence(sentence) == \"Hello World!\"\nassert words_in_sentence(sentence)\
    \ == \"Hello World!\"\nassert words_in_sentence(sentence) == \"Hello World!\"\n\
    assert words_in_sentence(sentence) == \"Hello World!\"\nassert words_in_sentence(sentence)\
    \ == \"Hello World!\"\nassert words_in_senten", "    \n    words = sentence.split()\n\
    \    \n    prime_words = []\n    \n    for word in words:\n        \n        prime_words.append(len(word))\n\
    \        \n    prime_words.sort()\n    \n    prime_words = list(map(str, prime_words))\n\
    \    \n    return \" \".join(prime_words)\n</cell>\n<cell>", "    \n    words\
    \ = sentence.split()\n    \n    prime_words = []\n    \n    for word in words:\n\
    \        \n        prime_words.append(len(word))\n    \n    prime_words.sort()\n\
    \    \n    prime_words = [str(x) for x in prime_words]\n    \n    return \" \"\
    .join(prime_words)\n</cell>\n<cell>", "    \n    words = sentence.split()\n  \
    \  \n    prime_words = []\n    \n    for word in words:\n        prime_words.append(len(word))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = [str(x) for x in prime_words]\n\
    \    \n    prime_words = [x for x in prime_words if x != '']\n    \n    prime_words\
    \ = list(filter(None, prime_words))\n    \n    prime_words = list(map(int, prime_words))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = [str(x) for x in prime_words]\n\
    \    \n    prime_words = [x for x in prime_words if x != '']\n    \n    prime_words\
    \ = list(filter(None, prime_words))\n    \n    prime_words = list(map(int, prime_words))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = [str(x) for x in prime_words]\n\
    \    \n    prime_words = [x for x in prime_words if x != '']\n    \n    prime_words\
    \ = list(filter(None, prime_words))\n    \n    prime_words = list(map(int, prime_words))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = [str(x) for x in prime_words]\n\
    \    \n    prime_words = [x for x in prime_words if x != '']\n    \n    prime_words\
    \ = list(filter(None, prime_words))\n    \n    prime_words = list(map(int, prime_words))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = [str(x) for x in prime_words]\n\
    \    \n    prime_words = [x for x in prime_words if x != '']\n    \n    prime_words\
    \ = list(filter(None, prime_words))\n    \n    prime_words = list(map(int, prime_words))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = [str(x) for x in prime_words]\n\
    \    \n    prime_words = [x for x in prime_words if x != '']\n    \n    prime_words\
    \ = list(filter(None, prime_words))\n    \n    prime_words = list(map(int, prime_words))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = [str(x) for x in prime_words]\n\
    \    \n    prime_words = [x for x in prime_words if x != '']\n    \n    prime_words\
    \ = list(filter(None, prime_words))\n    \n    prime_words = list(map(int, prime_words))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = [str(x) for x in prime_word",
  "    \n    words = sentence.split()\n    \n    prime_words = []\n    \n    for word\
    \ in words:\n        prime_words.append(len(word))\n    \n    prime_words.sort()\n\
    \    \n    prime_words = [str(x) for x in prime_words]\n    \n    prime_words\
    \ = \"_\".join(prime_words)\n    \n    return prime_words\n\n", "    \n    # Your\
    \ code here\n    \n    return \"\"\n</cell>\n<text>\nLet's test your code. Run\
    \ the cell below.\n\n\n</text>\n<cell>\nprint(words_in_sentence(\"The quick brown\
    \ fox jumps over the lazy dog\"))\n</cell>\n<text>\nExpected Output:\n\n['quick',\
    \ 'brown', 'fox', 'jumps', 'over', 'lazy', 'dog']\n\n</text>\n<text>\nExercise\
    \ 4:\nGiven a sentence, return a list of words which have lengths divisible by\
    \ 3 or 5.\n\nHint: You may want to use % to help you with this.\n\nExample 1:\n\
    \nInput: \"The quick brown fox jumps over the lazy dog\"\nOutput: [\"brown\",\
    \ \"fox\", \"dog\"]\n\n</text>\n<cell>", "    \n    # Your code here\n    \n \
    \   return \"\"\n</cell>\n<text>\nRun the next cell to test your code. Because\
    \ of the small size of the sentence, your results may vary.\n\n\n</text>\n<cell>",
  "    \n    # Your code here\n    \n    return \"\"\n</cell>\n<text>\nRun the cell\
    \ below to test your code:\n\n\n</text>\n<cell>\nsentence = \"The quick brown\
    \ fox jumps over the lazy dog\"\nprint(\"Input:\\n\", sentence)\nprint(\"Output:\\\
    n\", words_in_sentence(sentence))\n</cell>\n<text>\nExpected Output:\n\nInput:\n\
    The quick brown fox jumps over the lazy dog\nOutput:\n['The', 'quick', 'brown',\
    \ 'fox', 'jumps', 'over', 'the', 'lazy', 'dog']\n\n</text>\n<text>\nExercise 4:\n\
    Write a function that takes a sentence and returns a list of words,\nwhere the\
    \ words are separated by spaces.\n\nThe function should only contain one for loop.\n\
    \nThe function should return a list containing all the words in the sentence,\n\
    where each word is separated by a space.\n\nExample 1:\nInput:\nsentence = \"\
    The quick brown fox jumps over the lazy dog\"\nOutput: [\"The\", \"quick\", \"\
    brown\", \"fox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"]\n\nExample\
    \ 2:\nInput:\nsentence = \"The quick brown fox jumps over the lazy dog The quick\
    \ brown fox jumps over the lazy dog\"\nOutput: [\"The\", \"quick\", \"brown\"\
    , \"fox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\", \"The\", \"quick\"\
    , \"brown\", \"fox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"]\n\n</text>\n\
    <cell>", "    \n    words = sentence.split()\n    \n    prime_words = []\n   \
    \ \n    for word in words:\n        \n        prime_words.append(len(word))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = list(map(str, prime_words))\n\
    \    \n    return ' '.join(prime_words)\n</cell>\n<cell>", "    \n    # Your code\
    \ here\n    \n    return \"\"\n</cell>\n<cell>", "    \n    words = sentence.split()\n\
    \    \n    prime_words = []\n    \n    for word in words:\n        \n        prime_words.append(len(word))\n\
    \        \n    prime_words.sort()\n    \n    prime_words = list(map(str, prime_words))\n\
    \    \n    return \" \".join(prime_words)\n</cell>\n<cell>", "    \n    # Your\
    \ code here\n    \n    return \"\"\n", "    \n    # Your code here\n    \n   \
    \ return \"\"\n</cell>\n<cell>", "    \n    # Your code here\n    \n    return\
    \ \"\"\n", "    \n    words = sentence.split()\n    \n    prime_words = []\n \
    \   \n    for word in words:\n        \n        prime_words.append(len(word))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = [str(x) for x in prime_words]\n\
    \    \n    return \" \".join(prime_words)\n", "    \n    words = sentence.split()\n\
    \    \n    prime_words = []\n    \n    for word in words:\n        prime_words.append(len(word))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = list(map(str, prime_words))\n\
    \    \n    prime_words.sort()\n    \n    return ' '.join(prime_words)\n</cell>\n\
    <cell>", "    \n    # Your code here\n    \n    return \"\"\n</cell>\n<text>\n\
    Run the next cell to test your code. Note that the expected value passes and the\
    \ output matches what we expected.\n\n\n</text>\n<cell>\nsentence = \"The quick\
    \ brown fox jumps over the lazy dog\"\nassert words_in_sentence(sentence) == \"\
    quick brown fox jumps over lazy dog\", \"Incorrect output\"\nprint(\"OK\")\n</cell>\n\
    <text>\nFinally, implement the function prime_words_in_sentence, which takes in\
    \ a sentence and returns the words that are prime in the sentence (without duplicates).\n\
    \n\n</text>\n<cell>", "    \n    # Your code here\n    \n    return \"\"\n</cell>\n\
    <cell>", "    \n    # Your code here\n    \n    return \"\"\n</cell>\n<text>\n\
    Solution\nRun the cell below to test your function\n\n\n</text>\n<cell>", "  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    # Your code\
    \ here\n    \n    return \"\"\n</cell>\n<text>\nRun the cell below to test your\
    \ code. Note that the expected output varies depending on the length of the original\
    \ sentence.\n\n\n</text>\n<cell>\nsentence = \"The quick brown fox jumps over\
    \ the lazy dog\"\nprint(\"The length of the original sentence is\", len(sentence))\n\
    print(\"The words in the original sentence are:\", words_in_sentence(sentence))\n\
    print(\"The length of the words in the new sentence is\", len(words_in_sentence(sentence)))\n\
    </cell>\n<text>\nExpected Output:\n\nThe length of the original sentence is 10\n\
    The words in the original sentence are: The quick brown fox jumps over the lazy\
    \ dog\nThe length of the words in the new sentence is 25\n\n</text>\n<text>\n\
    Exercise 4:\nWrite a function that returns a list of words that appear in the\
    \ given sentence,\nbut are not separated by spaces. Words that appear in the sentence\
    \ with length greater than 2 should be in the returned list too.\nFor example,\
    \ in the sentence \"I like dogs. I like cats too.\" the function should return\
    \ [\"dogs\", \"cats\"].\n\nHint: You may use Python's built-in function split().\n\
    \n\n</text>\n<cell>", "    \n    # Your code here\n    \n    return \"\"\n</cell>\n\
    <text>\nRun the following cell to check your implementation. Make sure you get\
    \ 'Hello World' as the output for the cell above. Because of the way the for loop\
    \ is constructed, the output will only be correct if all the prime numbers are\
    \ less than or equal to 100. Otherwise the output will be incorrect.\n\n\n</text>\n\
    <cell>\nfor n in range(2, 101):\n    print(words_in_sentence(\"Hello World\"))\n\
    </cell>\n<text>\nExpected Output:\nHello World\nHello World\nHello World\nHello\
    \ World\nHello World\nHello World\nHello World\nHello World\nHello World\nHello\
    \ World\nHello World\nHello World\nHello World\nHello World\nHello World\nHello\
    \ World\nHello World\nHello World\nHello World\nHello World\nHello World\nHello\
    \ World\nHello World\nHello World\nHello World\nHello World\nHello World\nHello\
    \ World\nHello World\nHello World\nHello World\nHello World\nHello World\nHello\
    \ World\nHello World\nHello World\nHello World\nHello World\nHello World\nHello\
    \ World\nHello World\nHello World\nHello World\nHello World\nHello World\nHello\
    \ World\nHello World\nHello World\nHello World\nHello World\nHello World\nHello\
    \ World\nHello World\nHello World\nHello World\nHello World\nHello World\nHello\
    \ World\nHello World\nHello World\nHello World\nHello World\nHello World\nHello\
    \ World\nHello World\nHello World\nHello World\nHello World\nHello World\nHello\
    \ World\nHello World\nHello World\nHello World\nHello World\nHello World\nHello\
    \ World\nHello World\nHello World\nHello World\nHello World\nHello World\nHello\
    \ World\nHello World\nHello World\nHello World\nHello World\nHello World\nHello\
    \ World\nHello World\nHello World\nHello World\nHello World\nHello World\nHello\
    \ World\nHello World\nHello World\nHello World\nHello World\nHello World\nHello\
    \ World\nHello World\nHello World\nHello World\nHello World\nHello World\nHello\
    \ World\nHello World\nHello World\nHello World\nHello World\nHello World\nHello\
    \ World\nHello World\nHello World\nHello World\nHello World\nHello World\nHello\
    \ World\nHello World\nHello World\nHello World\nHello World\nHello World\nHello\
    \ World\nHello World\nHello World\nHello World\nHello World\nHello World\nHello\
    \ World\nHello World\nHello World\nHello World\nHello World\nHello World\nHello\
    \ World\nHello World\n", "    \n    words = sentence.split()\n    \n    prime_words\
    \ = []\n    \n    for word in words:\n        prime_words.append(len(word))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = [str(x) for x in prime_words]\n\
    \    \n    return \" \".join(prime_words)\n\n", "    \n    # Your code here\n\
    \    \n    return \"\"\n</cell>\n<cell>"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
