name: HumanEval_102_choose_num
language: py
results:
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(1, 3)\n            >>>2\n            choose_num(7, 8)\n \
    \           >>>8\n            choose_num(7, 9)\n            >>>-1\n          \
    \  \"\"\"\n    \"\"\"\n    if x >= y:\n        return -1\n    elif y <= x:\n \
    \       return -1\n    elif x%2 == 0 and y%2 == 0:\n        return (x+y)//2\n\
    \    elif x%2 == 0 and y%2 != 0:\n        return -1\n    elif x%2 != 0 and y%2\
    \ == 0:\n        return -1\n    elif x%2 != 0 and y%2 != 0:\n        return (x+y)//2\n\
    \    else:\n        return -1\n</cell>\n<cell>\nchoose_num(7, 8)\n</cell>\n<cell>\n\
    choose_num(7, 9)\n</cell>\n<cell>\nchoose_num(7, 10)\n</cell>\n<cell>\nchoose_num(7,\
    \ 11)\n</cell>\n<cell>\nchoose_num(7, 12)\n</cell>\n<cell>\nchoose_num(7, 13)\n\
    </cell>\n<cell>\nchoose_num(7, 14)\n</cell>\n<cell>\nchoose_num(7, 15)\n</cell>\n\
    <cell>\nchoose_num(7, 16)\n</cell>\n<cell>\nchoose_num(7, 17)\n</cell>\n<cell>\n\
    choose_num(7, 18)\n</cell>\n<cell>\nchoose_num(7, 19)\n</cell>\n<cell>\nchoose_num(7,\
    \ 20)\n</cell>\n<cell>\nchoose_num(7, 21)\n</cell>\n<cell>\nchoose_num(7, 22)\n\
    </cell>\n<cell>\nchoose_num(7, 23)\n</cell>\n<cell>\nchoose_num(7, 24)\n</cell>\n\
    <cell>\nchoose_num(7, 25)\n</cell>\n<cell>\nchoose_num(7, 26)\n</cell>\n<cell>\n\
    choose_num(7, 27)\n</cell>\n<cell>\nchoose_num(7, 28)\n</cell>\n<cell>\nchoose_num(7,\
    \ 29)\n</cell>\n<cell>\nchoose_num(7, 30)\n</cell>\n<cell>\nchoose_num(7, 31)\n\
    </cell>\n<cell>\nchoose_num(7, 32)\n</cell>\n<cell>\ncho\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_4ecf5xd.py\"\
    , line 8\n    choose_num(1, 3)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(7, 9)\n            >>>7\n            choose_num(7, 10)\n\
    \            >>>-1\n            choose_num(7, 11)\n            >>>-1\n       \
    \     choose_num(7, 12)\n            >>>-1\n            choose_num(7, 13)\n  \
    \          >>>-1\n            choose_num(7, 14)\n            >>>-1\n         \
    \   choose_num(7, 15)\n            >>>-1\n            choose_num(7, 16)\n    \
    \        >>>-1\n            choose_num(7, 17)\n            >>>-1\n           \
    \ choose_num(7, 18)\n            >>>-1\n            choose_num(7, 19)\n      \
    \      >>>-1\n            choose_num(7, 20)\n            >>>-1\n            choose_num(7,\
    \ 21)\n            >>>-1\n            choose_num(7, 22)\n            >>>-1\n \
    \           choose_num(7, 23)\n            >>>-1\n            choose_num(7, 24)\n\
    \            >>>-1\n            choose_num(7, 25)\n            >>>-1\n       \
    \     choose_num(7, 26)\n            >>>-1\n            choose_num(7, 27)\n  \
    \          >>>-1\n            choose_num(7, 28)\n            >>>-1\n         \
    \   choose_num(7, 29)\n            >>>-1\n            choose_num(7, 30)\n    \
    \        >>>-1\n            choose_num(7, 31)\n            >>>-1\n           \
    \ choose_num(7, 32)\n            >>>-1\n            choose_num(7, 33)\n      \
    \      >>>-1\n            choose_num(7, 34)\n            >>>-1\n            choose_num(7,\
    \ 35)\n            >>>-1\n            choose_num(7, 36)\n            >>>-1\n \
    \           choose_num(7, 37)\n            >>>-1\n            choose_num(7, 38)\n\
    \            >>>-1\n            choose_num(7, 39)\n            >>>-1\n       \
    \     choose_num(7, 40)\n            >>>-1\n            choose_num(7, 41)\n  \
    \          >>>-1\n            choose_num(7, 42)\n            >>>-1\n         \
    \   choose_num(7, 43)\n            >>>-1\n            choose_num(7, 44)\n    \
    \        >>>-1\n            choose_num(7, 45)\n            >>>-1\n           \
    \ choose_num(7, 46)\n            >>>-1\n            choose_num(7, 47)\n      \
    \      >>>-1\n            choose_num(7, 48)\n            >>>-1\n            choose_num(7,\
    \ 49)\n            >>>\ndef check(candidate):\n    assert candidate(12, 15) ==\
    \ 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsjh1vux6.py\"\
    , line 8\n    choose_num(7, 9)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \ >>> choose_num(1, 10)\n    10\n    >>> choose_num(7, 10)\n    7\n    >>> choose_num(7,\
    \ 9)\n    -1\n    \"\"\"\n    if x < y:\n        smaller = x\n    else:\n    \
    \    smaller = y\n    bigger = smaller\n    while bigger < smaller:\n        if\
    \ bigger % 2 == 0:\n            bigger += 1\n        else:\n            bigger\
    \ -= 1\n    return bigger\n\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmqorou2z.py\"\
    , line 14\n    \"\"\"\n    ^\nSyntaxError: unterminated triple-quoted string literal\
    \ (detected at line 41)\n"
  exit_code: 1
  status: SyntaxError
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(7, 9)\n            >> 8\n            choose_num(7, 10)\n\
    \            >> -1\n            choose_num(7, 11)\n            >> -1\n       \
    \     choose_num(7, 12)\n            >> -1\n            choose_num(7, 13)\n  \
    \          >> -1\n            choose_num(7, 14)\n            >> -1\n         \
    \   choose_num(7, 15)\n            >> -1\n            choose_num(7, 16)\n    \
    \        >> -1\n            choose_num(7, 17)\n            >> -1\n           \
    \ choose_num(7, 18)\n            >> -1\n            choose_num(7, 19)\n      \
    \      >> -1\n            choose_num(7, 20)\n            >> -1\n            choose_num(7,\
    \ 21)\n            >> -1\n            choose_num(7, 22)\n            >> -1\n \
    \           choose_num(7, 23)\n            >> -1\n            choose_num(7, 24)\n\
    \            >> -1\n            choose_num(7, 25)\n            >> -1\n       \
    \     choose_num(7, 26)\n            >> -1\n            choose_num(7, 27)\n  \
    \          >> -1\n            choose_num(7, 28)\n            >> -1\n         \
    \   choose_num(7, 29)\n            >> -1\n            choose_num(7, 30)\n    \
    \        >> -1\n            choose_num(7, 31)\n            >> -1\n           \
    \ choose_num(7, 32)\n            >> -1\n            choose_num(7, 33)\n      \
    \      >> -1\n            choose_num(7, 34)\n            >> -1\n            choose_num(7,\
    \ 35)\n            >> -1\n            choose_num(7, 36)\n            >> -1\n \
    \           choose_num(7, 37)\n            >> -1\n            choose_num(7, 38)\n\
    \            >> -1\n            choose_num(7, 39)\n            >> -1\n       \
    \     choose_num(7, 40)\n            >> -1\n            choose_num(7, 41)\n  \
    \          >> -1\n            choose_num(7, 42)\n            >> -1\n         \
    \   choose_num(7, 43)\n            >> -1\n            choose_num(7, 44)\n    \
    \        >> -1\n            choose_num(7, 45)\n            >> -1\n           \
    \ choose_num(7, 46)\n            >> -1\n            choose_num(7, 47)\n      \
    \      >> -1\n            choose_num(7, 48)\n            >> -1\n            choose_num(7,\
    \ 49)\n            >> \ndef check(candidate):\n    assert candidate(12, 15) ==\
    \ 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf_uj4c59.py\"\
    , line 8\n    choose_num(7, 9)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(7, 10)\n            >>>7\n            choose_num(7, 11)\n\
    \            >>>-1\n            choose_num(7, 12)\n            >>>-1\n       \
    \     choose_num(7, 13)\n            >>>-1\n            choose_num(7, 14)\n  \
    \          >>>-1\n            choose_num(7, 15)\n            >>>-1\n         \
    \   choose_num(7, 16)\n            >>>-1\n            choose_num(7, 17)\n    \
    \        >>>-1\n            choose_num(7, 18)\n            >>>-1\n           \
    \ choose_num(7, 19)\n            >>>-1\n            choose_num(7, 20)\n      \
    \      >>>-1\n            choose_num(7, 21)\n            >>>-1\n            choose_num(7,\
    \ 22)\n            >>>-1\n            choose_num(7, 23)\n            >>>-1\n \
    \           choose_num(7, 24)\n            >>>-1\n            choose_num(7, 25)\n\
    \            >>>-1\n            choose_num(7, 26)\n            >>>-1\n       \
    \     choose_num(7, 27)\n            >>>-1\n            choose_num(7, 28)\n  \
    \          >>>-1\n            choose_num(7, 29)\n            >>>-1\n         \
    \   choose_num(7, 30)\n            >>>-1\n            choose_num(7, 31)\n    \
    \        >>>-1\n            choose_num(7, 32)\n            >>>-1\n           \
    \ choose_num(7, 33)\n            >>>-1\n            choose_num(7, 34)\n      \
    \      >>>-1\n            choose_num(7, 35)\n            >>>-1\n            choose_num(7,\
    \ 36)\n            >>>-1\n            choose_num(7, 37)\n            >>>-1\n \
    \           choose_num(7, 38)\n            >>>-1\n            choose_num(7, 39)\n\
    \            >>>-1\n            choose_num(7, 40)\n            >>>-1\n       \
    \     choose_num(7, 41)\n            >>>-1\n            choose_num(7, 42)\n  \
    \          >>>-1\n            choose_num(7, 43)\n            >>>-1\n         \
    \   choose_num(7, 44)\n            >>>-1\n            choose_num(7, 45)\n    \
    \        >>>-1\n            choose_num(7, 46)\n            >>>-1\n           \
    \ choose_num(7, 47)\n            >>>-1\n            choose_num(7, 48)\n      \
    \      >>>-1\n            choose_num(7, 49)\n            >>>-1\n            choose_num(7,\
    \ 50)\n            >>>\ndef check(candidate):\n    assert candidate(12, 15) ==\
    \ 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8jzqzk3_.py\"\
    , line 8\n    choose_num(7, 10)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \ >>> choose_num(20, 30)\n    30\n    >>> choose_num(20, 30)\n    -1\n    \"\"\
    \"\n    if x >= y:\n        return -1\n    \n    even = x % 2 == 0\n    \n   \
    \ if even:\n        even = y % 2 == 0\n    \n    if even:\n        return y\n\
    \    else:\n        return x - 1\n\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5rrqij19.py\"\
    , line 12\n    \"\"\"\n    ^\nSyntaxError: unterminated triple-quoted string literal\
    \ (detected at line 40)\n"
  exit_code: 1
  status: SyntaxError
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(8, 12)\n            >> 16\n            choose_num(8, 13)\n\
    \            >> -1\n            \"\"\"\n    \"\"\"\n    if x >= y:\n        return\
    \ -1\n    if x == y:\n        return x\n    if x % 2 == 0:\n        if y % 2 ==\
    \ 0:\n            return x\n        else:\n            return y\n    else:\n \
    \       if y % 2 == 0:\n            return y\n        else:\n            return\
    \ x\n\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert\
    \ candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert\
    \ candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27,\
    \ 10) == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546)\
    \ == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvqi88yq0.py\"\
    , line 8\n    choose_num(8, 12)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \ >>> choose_num(1, 10)\n    10\n    >>> choose_num(100, 1000)\n    1000\n   \
    \ >>> choose_num(100, 0)\n    -1\n    >>> choose_num(100, -10)\n    -1\n    \"\
    \"\"\n    if x >= y:\n        return -1\n    if x % 2 == 0:\n        return x\
    \ // 2\n    else:\n        return x + (y - x)//2\n\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd2hhm6ya.py\"\
    , line 16\n    \"\"\"\n    ^\nSyntaxError: unterminated triple-quoted string literal\
    \ (detected at line 38)\n"
  exit_code: 1
  status: SyntaxError
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(7, 10)\n            >>>7\n            choose_num(7, 9)\n\
    \            >>>-1\n            choose_num(7, 11)\n            >>>-1\n       \
    \     choose_num(7, 12)\n            >>>-1\n            choose_num(7, 13)\n  \
    \          >>>-1\n            choose_num(7, 14)\n            >>>-1\n         \
    \   choose_num(7, 15)\n            >>>-1\n            choose_num(7, 16)\n    \
    \        >>>-1\n            choose_num(7, 17)\n            >>>-1\n           \
    \ choose_num(7, 18)\n            >>>-1\n            choose_num(7, 19)\n      \
    \      >>>-1\n            choose_num(7, 20)\n            >>>-1\n            choose_num(7,\
    \ 21)\n            >>>-1\n            choose_num(7, 22)\n            >>>-1\n \
    \           choose_num(7, 23)\n            >>>-1\n            choose_num(7, 24)\n\
    \            >>>-1\n            choose_num(7, 25)\n            >>>-1\n       \
    \     choose_num(7, 26)\n            >>>-1\n            choose_num(7, 27)\n  \
    \          >>>-1\n            choose_num(7, 28)\n            >>>-1\n         \
    \   choose_num(7, 29)\n            >>>-1\n            choose_num(7, 30)\n    \
    \        >>>-1\n            choose_num(7, 31)\n            >>>-1\n           \
    \ choose_num(7, 32)\n            >>>-1\n            choose_num(7, 33)\n      \
    \      >>>-1\n            choose_num(7, 34)\n            >>>-1\n            choose_num(7,\
    \ 35)\n            >>>-1\n            choose_num(7, 36)\n            >>>-1\n \
    \           choose_num(7, 37)\n            >>>-1\n            choose_num(7, 38)\n\
    \            >>>-1\n            choose_num(7, 39)\n            >>>-1\n       \
    \     choose_num(7, 40)\n            >>>-1\n            choose_num(7, 41)\n  \
    \          >>>-1\n            choose_num(7, 42)\n            >>>-1\n         \
    \   choose_num(7, 43)\n            >>>-1\n            choose_num(7, 44)\n    \
    \        >>>-1\n            choose_num(7, 45)\n            >>>-1\n           \
    \ choose_num(7, 46)\n            >>>-1\n            choose_num(7, 47)\n      \
    \      >>>-1\n            choose_num(7, 48)\n            >>>-1\n            choose_num(7,\
    \ 49)\n            >>>\ndef check(candidate):\n    assert candidate(12, 15) ==\
    \ 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6mnnb7sy.py\"\
    , line 8\n    choose_num(7, 10)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(7, 12)\n            >>>12\n            choose_num(7, 8)\n\
    \            >>>8\n            choose_num(7, 10)\n            >>>-1\n        \
    \    choose_num(7, 11)\n            >>>-1\n            choose_num(7, 15)\n   \
    \         >>>-1\n            choose_num(7, 16)\n            >>>-1\n          \
    \  choose_num(7, 17)\n            >>>-1\n            choose_num(7, 18)\n     \
    \       >>>-1\n            choose_num(7, 19)\n            >>>-1\n            choose_num(7,\
    \ 20)\n            >>>-1\n            choose_num(7, 21)\n            >>>-1\n \
    \           choose_num(7, 22)\n            >>>-1\n            choose_num(7, 23)\n\
    \            >>>-1\n            choose_num(7, 24)\n            >>>-1\n       \
    \     choose_num(7, 25)\n            >>>-1\n            choose_num(7, 26)\n  \
    \          >>>-1\n            choose_num(7, 27)\n            >>>-1\n         \
    \   choose_num(7, 28)\n            >>>-1\n            choose_num(7, 29)\n    \
    \        >>>-1\n            choose_num(7, 30)\n            >>>-1\n           \
    \ choose_num(7, 31)\n            >>>-1\n            choose_num(7, 32)\n      \
    \      >>>-1\n            choose_num(7, 33)\n            >>>-1\n            choose_num(7,\
    \ 34)\n            >>>-1\n            choose_num(7, 35)\n            >>>-1\n \
    \           choose_num(7, 36)\n            >>>-1\n            choose_num(7, 37)\n\
    \            >>>-1\n            choose_num(7, 38)\n            >>>-1\n       \
    \     choose_num(7, 39)\n            >>>-1\n            choose_num(7, 40)\n  \
    \          >>>-1\n            choose_num(7, 41)\n            >>>-1\n         \
    \   choose_num(7, 42)\n            >>>-1\n            choose_num(7, 43)\n    \
    \        >>>-1\n            choose_num(7, 44)\n            >>>-1\n           \
    \ choose_num(7, 45)\n            >>>-1\n            choose_num(7, 46)\n      \
    \      >>>-1\n            choose_num(7, 47)\n            >>>-1\n            choose_num(7,\
    \ 48)\n            >>>-1\n            choose_num(7, 49)\n            >>>-1\n \
    \           choose_num(7, 50)\n            >>>-1\n            choose_num(7, 51)\n\
    \            \ndef check(candidate):\n    assert candidate(12, 15) == 14\n   \
    \ assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n \
    \   assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n  \
    \  assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprni93urj.py\"\
    , line 8\n    choose_num(7, 12)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(7, 10)\n            >>>10\n            choose_num(7, 8)\n\
    \            >>>-1\n            choose_num(7, 11)\n            >>>-1\n       \
    \     choose_num(7, 12)\n            >>>-1\n            choose_num(7, 13)\n  \
    \          >>>-1\n            choose_num(7, 14)\n            >>>-1\n         \
    \   choose_num(7, 15)\n            >>>-1\n            choose_num(7, 16)\n    \
    \        >>>-1\n            choose_num(7, 17)\n            >>>-1\n           \
    \ choose_num(7, 18)\n            >>>-1\n            choose_num(7, 19)\n      \
    \      >>>-1\n            choose_num(7, 20)\n            >>>-1\n            choose_num(7,\
    \ 21)\n            >>>-1\n            choose_num(7, 22)\n            >>>-1\n \
    \           choose_num(7, 23)\n            >>>-1\n            choose_num(7, 24)\n\
    \            >>>-1\n            choose_num(7, 25)\n            >>>-1\n       \
    \     choose_num(7, 26)\n            >>>-1\n            choose_num(7, 27)\n  \
    \          >>>-1\n            choose_num(7, 28)\n            >>>-1\n         \
    \   choose_num(7, 29)\n            >>>-1\n            choose_num(7, 30)\n    \
    \        >>>-1\n            choose_num(7, 31)\n            >>>-1\n           \
    \ choose_num(7, 32)\n            >>>-1\n            choose_num(7, 33)\n      \
    \      >>>-1\n            choose_num(7, 34)\n            >>>-1\n            choose_num(7,\
    \ 35)\n            >>>-1\n            choose_num(7, 36)\n            >>>-1\n \
    \           choose_num(7, 37)\n            >>>-1\n            choose_num(7, 38)\n\
    \            >>>-1\n            choose_num(7, 39)\n            >>>-1\n       \
    \     choose_num(7, 40)\n            >>>-1\n            choose_num(7, 41)\n  \
    \          >>>-1\n            choose_num(7, 42)\n            >>>-1\n         \
    \   choose_num(7, 43)\n            >>>-1\n            choose_num(7, 44)\n    \
    \        >>>-1\n            choose_num(7, 45)\n            >>>-1\n           \
    \ choose_num(7, 46)\n            >>>-1\n            choose_num(7, 47)\n      \
    \      >>>-1\n            choose_num(7, 48)\n            >>>-1\n            choose_num(7,\
    \ 49)\n            >>>\ndef check(candidate):\n    assert candidate(12, 15) ==\
    \ 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_kkf8cd3.py\"\
    , line 8\n    choose_num(7, 10)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(7, 8)\n            >>>8\n            choose_num(7, 9)\n \
    \           >>>-1\n            choose_num(7, 10)\n            >>>-1\n        \
    \    choose_num(7, 11)\n            >>>-1\n            choose_num(7, 12)\n   \
    \         >>>-1\n            choose_num(7, 13)\n            >>>-1\n          \
    \  choose_num(7, 14)\n            >>>-1\n            choose_num(7, 15)\n     \
    \       >>>-1\n            choose_num(7, 16)\n            >>>-1\n            choose_num(7,\
    \ 17)\n            >>>-1\n            choose_num(7, 18)\n            >>>-1\n \
    \           choose_num(7, 19)\n            >>>-1\n            choose_num(7, 20)\n\
    \            >>>-1\n            choose_num(7, 21)\n            >>>-1\n       \
    \     choose_num(7, 22)\n            >>>-1\n            choose_num(7, 23)\n  \
    \          >>>-1\n            choose_num(7, 24)\n            >>>-1\n         \
    \   choose_num(7, 25)\n            >>>-1\n            choose_num(7, 26)\n    \
    \        >>>-1\n            choose_num(7, 27)\n            >>>-1\n           \
    \ choose_num(7, 28)\n            >>>-1\n            choose_num(7, 29)\n      \
    \      >>>-1\n            choose_num(7, 30)\n            >>>-1\n            choose_num(7,\
    \ 31)\n            >>>-1\n            choose_num(7, 32)\n            >>>-1\n \
    \           choose_num(7, 33)\n            >>>-1\n            choose_num(7, 34)\n\
    \            >>>-1\n            choose_num(7, 35)\n            >>>-1\n       \
    \     choose_num(7, 36)\n            >>>-1\n            choose_num(7, 37)\n  \
    \          >>>-1\n            choose_num(7, 38)\n            >>>-1\n         \
    \   choose_num(7, 39)\n            >>>-1\n            choose_num(7, 40)\n    \
    \        >>>-1\n            choose_num(7, 41)\n            >>>-1\n           \
    \ choose_num(7, 42)\n            >>>-1\n            choose_num(7, 43)\n      \
    \      >>>-1\n            choose_num(7, 44)\n            >>>-1\n            choose_num(7,\
    \ 45)\n            >>>-1\n            choose_num(7, 46)\n            >>>-1\n \
    \           choose_num(7, 47)\n            >>>-1\n            choose_num(7, 48)\n\
    \            >>>-1\ndef check(candidate):\n    assert candidate(12, 15) == 14\n\
    \    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpef9uvtcr.py\"\
    , line 8\n    choose_num(7, 8)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(1, 10)\n            > 10\n            choose_num(11, 10)\n\
    \            > -1\n            choose_num(11, 11)\n            > 11\n        \
    \    choose_num(11, 12)\n            > -1\n            choose_num(11, 13)\n  \
    \          > -1\n            choose_num(11, 14)\n            > -1\n          \
    \  choose_num(11, 15)\n            > -1\n            choose_num(11, 16)\n    \
    \        > -1\n            choose_num(11, 17)\n            > -1\n            choose_num(11,\
    \ 18)\n            > -1\n            choose_num(11, 19)\n            > -1\n  \
    \          choose_num(11, 20)\n            > -1\n            choose_num(11, 21)\n\
    \            > -1\n            choose_num(11, 22)\n            > -1\n        \
    \    choose_num(11, 23)\n            > -1\n            choose_num(11, 24)\n  \
    \          > -1\n            choose_num(11, 25)\n            > -1\n          \
    \  choose_num(11, 26)\n            > -1\n            choose_num(11, 27)\n    \
    \        > -1\n            choose_num(11, 28)\n            > -1\n            choose_num(11,\
    \ 29)\n            > -1\n            choose_num(11, 30)\n            > -1\n  \
    \          choose_num(11, 31)\n            > -1\n            choose_num(11, 32)\n\
    \            > -1\n            choose_num(11, 33)\n            > -1\n        \
    \    choose_num(11, 34)\n            > -1\n            choose_num(11, 35)\n  \
    \          > -1\n            choose_num(11, 36)\n            > -1\n          \
    \  choose_num(11, 37)\n            > -1\n            choose_num(11, 38)\n    \
    \        > -1\n            choose_num(11, 39)\n            > -1\n            choose_num(11,\
    \ 40)\n            > -1\n            choose_num(11, 41)\n            > -1\n  \
    \          choose_num(11, 42)\n            > -1\n            choose_num(11, 43)\n\
    \            > -1\n            choose_num(11, 44)\n            > -1\n        \
    \    choose_num(11, 45)\n            > -1\n            choose_num(11, 46)\n  \
    \          > -1\n            choose_num(11, 47)\n            > -1\n          \
    \  choose_num(11, 48)\n            > -1\n            choose_num(11, 49)\n    \
    \        > -1\ndef check(candidate):\n    assert candidate(12, 15) == 14\n   \
    \ assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n \
    \   assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n  \
    \  assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8q732tg8.py\"\
    , line 8\n    choose_num(1, 10)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(7, 8)\n            >>>8\n            choose_num(7, 9)\n \
    \           >>>-1\n            choose_num(7, 10)\n            >>>-1\n        \
    \    choose_num(7, 11)\n            >>>-1\n            choose_num(7, 12)\n   \
    \         >>>-1\n            choose_num(7, 13)\n            >>>-1\n          \
    \  choose_num(7, 14)\n            >>>-1\n            choose_num(7, 15)\n     \
    \       >>>-1\n            choose_num(7, 16)\n            >>>-1\n            choose_num(7,\
    \ 17)\n            >>>-1\n            choose_num(7, 18)\n            >>>-1\n \
    \           choose_num(7, 19)\n            >>>-1\n            choose_num(7, 20)\n\
    \            >>>-1\n            choose_num(7, 21)\n            >>>-1\n       \
    \     choose_num(7, 22)\n            >>>-1\n            choose_num(7, 23)\n  \
    \          >>>-1\n            choose_num(7, 24)\n            >>>-1\n         \
    \   choose_num(7, 25)\n            >>>-1\n            choose_num(7, 26)\n    \
    \        >>>-1\n            choose_num(7, 27)\n            >>>-1\n           \
    \ choose_num(7, 28)\n            >>>-1\n            choose_num(7, 29)\n      \
    \      >>>-1\n            choose_num(7, 30)\n            >>>-1\n            choose_num(7,\
    \ 31)\n            >>>-1\n            choose_num(7, 32)\n            >>>-1\n \
    \           choose_num(7, 33)\n            >>>-1\n            choose_num(7, 34)\n\
    \            >>>-1\n            choose_num(7, 35)\n            >>>-1\n       \
    \     choose_num(7, 36)\n            >>>-1\n            choose_num(7, 37)\n  \
    \          >>>-1\n            choose_num(7, 38)\n            >>>-1\n         \
    \   choose_num(7, 39)\n            >>>-1\n            choose_num(7, 40)\n    \
    \        >>>-1\n            choose_num(7, 41)\n            >>>-1\n           \
    \ choose_num(7, 42)\n            >>>-1\n            choose_num(7, 43)\n      \
    \      >>>-1\n            choose_num(7, 44)\n            >>>-1\n            choose_num(7,\
    \ 45)\n            >>>-1\n            choose_num(7, 46)\n            >>>-1\n \
    \           choose_num(7, 47)\n            >>>-1\n            choose_num(7, 48)\n\
    \            >>>-1\ndef check(candidate):\n    assert candidate(12, 15) == 14\n\
    \    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1e3t8nqz.py\"\
    , line 8\n    choose_num(7, 8)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(7, 9)\n            choose_num(7, 10)\n            choose_num(7,\
    \ 11)\n            choose_num(7, 12)\n            choose_num(7, 13)\n        \
    \    choose_num(7, 14)\n            choose_num(7, 15)\n            choose_num(7,\
    \ 16)\n            choose_num(7, 17)\n            choose_num(7, 18)\n        \
    \    choose_num(7, 19)\n            choose_num(7, 20)\n            choose_num(7,\
    \ 21)\n            choose_num(7, 22)\n            choose_num(7, 23)\n        \
    \    choose_num(7, 24)\n            choose_num(7, 25)\n            choose_num(7,\
    \ 26)\n            choose_num(7, 27)\n            choose_num(7, 28)\n        \
    \    choose_num(7, 29)\n            choose_num(7, 30)\n            choose_num(7,\
    \ 31)\n            choose_num(7, 32)\n            choose_num(7, 33)\n        \
    \    choose_num(7, 34)\n            choose_num(7, 35)\n            choose_num(7,\
    \ 36)\n            choose_num(7, 37)\n            choose_num(7, 38)\n        \
    \    choose_num(7, 39)\n            choose_num(7, 40)\n            choose_num(7,\
    \ 41)\n            choose_num(7, 42)\n            choose_num(7, 43)\n        \
    \    choose_num(7, 44)\n            choose_num(7, 45)\n            choose_num(7,\
    \ 46)\n            choose_num(7, 47)\n            choose_num(7, 48)\n        \
    \    choose_num(7, 49)\n            choose_num(7, 50)\n            choose_num(7,\
    \ 51)\n            choose_num(7, 52)\n            choose_num(7, 53)\n        \
    \    choose_num(7, 54)\n            choose_num(7, 55)\n            choose_num(7,\
    \ 56)\n            choose_num(7, 57)\n            choose_num(7, 58)\n        \
    \    choose_num(7, 59)\n            choose_num(7, 60)\n            choose_num(7,\
    \ 61)\n            choose_num(7, 62)\n            choose_num(7, 63)\n        \
    \    choose_num(7, 64)\n            choose_num(7, 65)\n            choose_num(7,\
    \ 66)\n            choose_num(7, 67)\n            choose_\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv1r2x2go.py\"\
    , line 8\n    choose_num(7, 9)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \ >>> choose_num(7, 10)\n    7\n    >>> choose_num(7, 11)\n    -1\n    >>> choose_num(7,\
    \ 12)\n    -1\n    \"\"\"\n    if x <= y:\n        biggest = y\n    else:\n  \
    \      biggest = x\n    \n    while biggest % 2 == 0:\n        biggest = biggest\
    \ - 1\n    \n    if biggest >= x and biggest <= y:\n        return biggest\n \
    \   else:\n        return -1\n</cell>\n<cell>\ndef check(candidate):\n    assert\
    \ candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33,\
    \ 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6,\
    \ 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) ==\
    \ -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuj78xer2.py\"\
    , line 14\n    \"\"\"\n    ^\nSyntaxError: unterminated triple-quoted string literal\
    \ (detected at line 42)\n"
  exit_code: 1
  status: SyntaxError
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(3,5)\n            choose_num(3,6)\n            choose_num(3,7)\n\
    \            choose_num(3,8)\n            choose_num(3,9)\n            choose_num(3,10)\n\
    \            choose_num(3,11)\n            choose_num(3,12)\n            choose_num(3,13)\n\
    \            choose_num(3,14)\n            choose_num(3,15)\n            choose_num(3,16)\n\
    \            choose_num(3,17)\n            choose_num(3,18)\n            choose_num(3,19)\n\
    \            choose_num(3,20)\n            choose_num(3,21)\n            choose_num(3,22)\n\
    \            choose_num(3,23)\n            choose_num(3,24)\n            choose_num(3,25)\n\
    \            choose_num(3,26)\n            choose_num(3,27)\n            choose_num(3,28)\n\
    \            choose_num(3,29)\n            choose_num(3,30)\n            choose_num(3,31)\n\
    \            choose_num(3,32)\n            choose_num(3,33)\n            choose_num(3,34)\n\
    \            choose_num(3,35)\n            choose_num(3,36)\n            choose_num(3,37)\n\
    \            choose_num(3,38)\n            choose_num(3,39)\n            choose_num(3,40)\n\
    \            choose_num(3,41)\n            choose_num(3,42)\n            choose_num(3,43)\n\
    \            choose_num(3,44)\n            choose_num(3,45)\n            choose_num(3,46)\n\
    \            choose_num(3,47)\n            choose_num(3,48)\n            choose_num(3,49)\n\
    \            choose_num(3,50)\n            choose_num(3,51)\n            choose_num(3,52)\n\
    \            choose_num(3,53)\n            choose_num(3,54)\n            choose_num(3,55)\n\
    \            choose_num(3,56)\n            choose_num(3,57)\n            choose_num(3,58)\n\
    \            choose_num(3,59)\n            choose_num(3,60)\n            choose_num(3,61)\n\
    \            choose_num(3,62)\n            choose_num(3,63)\n            choose_num(3,\n\
    def check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn2vw_j14.py\"\
    , line 8\n    choose_num(3,5)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(7, 9)\n            >>>8\n            choose_num(7, 10)\n\
    \            >>>-1\n            choose_num(7, 11)\n            >>>-1\n       \
    \     choose_num(7, 12)\n            >>>-1\n            choose_num(7, 13)\n  \
    \          >>>-1\n            choose_num(7, 14)\n            >>>-1\n         \
    \   choose_num(7, 15)\n            >>>-1\n            choose_num(7, 16)\n    \
    \        >>>-1\n            choose_num(7, 17)\n            >>>-1\n           \
    \ choose_num(7, 18)\n            >>>-1\n            choose_num(7, 19)\n      \
    \      >>>-1\n            choose_num(7, 20)\n            >>>-1\n            choose_num(7,\
    \ 21)\n            >>>-1\n            choose_num(7, 22)\n            >>>-1\n \
    \           choose_num(7, 23)\n            >>>-1\n            choose_num(7, 24)\n\
    \            >>>-1\n            choose_num(7, 25)\n            >>>-1\n       \
    \     choose_num(7, 26)\n            >>>-1\n            choose_num(7, 27)\n  \
    \          >>>-1\n            choose_num(7, 28)\n            >>>-1\n         \
    \   choose_num(7, 29)\n            >>>-1\n            choose_num(7, 30)\n    \
    \        >>>-1\n            choose_num(7, 31)\n            >>>-1\n           \
    \ choose_num(7, 32)\n            >>>-1\n            choose_num(7, 33)\n      \
    \      >>>-1\n            choose_num(7, 34)\n            >>>-1\n            choose_num(7,\
    \ 35)\n            >>>-1\n            choose_num(7, 36)\n            >>>-1\n \
    \           choose_num(7, 37)\n            >>>-1\n            choose_num(7, 38)\n\
    \            >>>-1\n            choose_num(7, 39)\n            >>>-1\n       \
    \     choose_num(7, 40)\n            >>>-1\n            choose_num(7, 41)\n  \
    \          >>>-1\n            choose_num(7, 42)\n            >>>-1\n         \
    \   choose_num(7, 43)\n            >>>-1\n            choose_num(7, 44)\n    \
    \        >>>-1\n            choose_num(7, 45)\n            >>>-1\n           \
    \ choose_num(7, 46)\n            >>>-1\n            choose_num(7, 47)\n      \
    \      >>>-1\n            choose_num(7, 48)\n            >>>-1\n            choose_num(7,\
    \ 49)\n            >>>\ndef check(candidate):\n    assert candidate(12, 15) ==\
    \ 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8bfntpfa.py\"\
    , line 8\n    choose_num(7, 9)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(7, 8)\n            >> 7\n            choose_num(7, 9)\n \
    \           >> -1\n            choose_num(7, 10)\n            >> -1\n        \
    \    choose_num(7, 11)\n            >> -1\n            choose_num(7, 12)\n   \
    \         >> -1\n            choose_num(7, 13)\n            >> -1\n          \
    \  choose_num(7, 14)\n            >> -1\n            choose_num(7, 15)\n     \
    \       >> -1\n            choose_num(7, 16)\n            >> -1\n            choose_num(7,\
    \ 17)\n            >> -1\n            choose_num(7, 18)\n            >> -1\n \
    \           choose_num(7, 19)\n            >> -1\n            choose_num(7, 20)\n\
    \            >> -1\n            choose_num(7, 21)\n            >> -1\n       \
    \     choose_num(7, 22)\n            >> -1\n            choose_num(7, 23)\n  \
    \          >> -1\n            choose_num(7, 24)\n            >> -1\n         \
    \   choose_num(7, 25)\n            >> -1\n            choose_num(7, 26)\n    \
    \        >> -1\n            choose_num(7, 27)\n            >> -1\n           \
    \ choose_num(7, 28)\n            >> -1\n            choose_num(7, 29)\n      \
    \      >> -1\n            choose_num(7, 30)\n            >> -1\n            choose_num(7,\
    \ 31)\n            >> -1\n            choose_num(7, 32)\n            >> -1\n \
    \           choose_num(7, 33)\n            >> -1\n            choose_num(7, 34)\n\
    \            >> -1\n            choose_num(7, 35)\n            >> -1\n       \
    \     choose_num(7, 36)\n            >> -1\n            choose_num(7, 37)\n  \
    \          >> -1\n            choose_num(7, 38)\n            >> -1\n         \
    \   choose_num(7, 39)\n            >> -1\n            choose_num(7, 40)\n    \
    \        >> -1\n            choose_num(7, 41)\n            >> -1\n           \
    \ choose_num(7, 42)\n            >> -1\n            choose_num(7, 43)\n      \
    \      >> -1\n            choose_num(7, 44)\n            >> -1\n            choose_num(7,\
    \ 45)\n            >> -1\n            choose_num(7, 46)\n            >> -1\n \
    \           choose_num(7, 47)\n            >> -1\n            choose_num(7, 48)\n\
    \            >> -1\ndef check(candidate):\n    assert candidate(12, 15) == 14\n\
    \    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6rcvw8z8.py\"\
    , line 8\n    choose_num(7, 8)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(7, 10)\n            >>>8\n            choose_num(7, 11)\n\
    \            >>>-1\n            choose_num(7, 12)\n            >>>-1\n       \
    \     choose_num(7, 13)\n            >>>-1\n            choose_num(7, 14)\n  \
    \          >>>-1\n            choose_num(7, 15)\n            >>>-1\n         \
    \   choose_num(7, 16)\n            >>>-1\n            choose_num(7, 17)\n    \
    \        >>>-1\n            choose_num(7, 18)\n            >>>-1\n           \
    \ choose_num(7, 19)\n            >>>-1\n            choose_num(7, 20)\n      \
    \      >>>-1\n            choose_num(7, 21)\n            >>>-1\n            choose_num(7,\
    \ 22)\n            >>>-1\n            choose_num(7, 23)\n            >>>-1\n \
    \           choose_num(7, 24)\n            >>>-1\n            choose_num(7, 25)\n\
    \            >>>-1\n            choose_num(7, 26)\n            >>>-1\n       \
    \     choose_num(7, 27)\n            >>>-1\n            choose_num(7, 28)\n  \
    \          >>>-1\n            choose_num(7, 29)\n            >>>-1\n         \
    \   choose_num(7, 30)\n            >>>-1\n            choose_num(7, 31)\n    \
    \        >>>-1\n            choose_num(7, 32)\n            >>>-1\n           \
    \ choose_num(7, 33)\n            >>>-1\n            choose_num(7, 34)\n      \
    \      >>>-1\n            choose_num(7, 35)\n            >>>-1\n            choose_num(7,\
    \ 36)\n            >>>-1\n            choose_num(7, 37)\n            >>>-1\n \
    \           choose_num(7, 38)\n            >>>-1\n            choose_num(7, 39)\n\
    \            >>>-1\n            choose_num(7, 40)\n            >>>-1\n       \
    \     choose_num(7, 41)\n            >>>-1\n            choose_num(7, 42)\n  \
    \          >>>-1\n            choose_num(7, 43)\n            >>>-1\n         \
    \   choose_num(7, 44)\n            >>>-1\n            choose_num(7, 45)\n    \
    \        >>>-1\n            choose_num(7, 46)\n            >>>-1\n           \
    \ choose_num(7, 47)\n            >>>-1\n            choose_num(7, 48)\n      \
    \      >>>-1\n            choose_num(7, 49)\n            >>>-1\n            choose_num(7,\
    \ 50)\n            >>>\ndef check(candidate):\n    assert candidate(12, 15) ==\
    \ 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpms7vwxxa.py\"\
    , line 8\n    choose_num(7, 10)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(7, 10)\n            >> 7\n            choose_num(7, 11)\n\
    \            >> -1\n            choose_num(7, 12)\n            >> -1\n       \
    \     choose_num(7, 13)\n            >> -1\n            choose_num(7, 14)\n  \
    \          >> -1\n            choose_num(7, 15)\n            >> -1\n         \
    \   choose_num(7, 16)\n            >> -1\n            choose_num(7, 17)\n    \
    \        >> -1\n            choose_num(7, 18)\n            >> -1\n           \
    \ choose_num(7, 19)\n            >> -1\n            choose_num(7, 20)\n      \
    \      >> -1\n            choose_num(7, 21)\n            >> -1\n            choose_num(7,\
    \ 22)\n            >> -1\n            choose_num(7, 23)\n            >> -1\n \
    \           choose_num(7, 24)\n            >> -1\n            choose_num(7, 25)\n\
    \            >> -1\n            choose_num(7, 26)\n            >> -1\n       \
    \     choose_num(7, 27)\n            >> -1\n            choose_num(7, 28)\n  \
    \          >> -1\n            choose_num(7, 29)\n            >> -1\n         \
    \   choose_num(7, 30)\n            >> -1\n            choose_num(7, 31)\n    \
    \        >> -1\n            choose_num(7, 32)\n            >> -1\n           \
    \ choose_num(7, 33)\n            >> -1\n            choose_num(7, 34)\n      \
    \      >> -1\n            choose_num(7, 35)\n            >> -1\n            choose_num(7,\
    \ 36)\n            >> -1\n            choose_num(7, 37)\n            >> -1\n \
    \           choose_num(7, 38)\n            >> -1\n            choose_num(7, 39)\n\
    \            >> -1\n            choose_num(7, 40)\n            >> -1\n       \
    \     choose_num(7, 41)\n            >> -1\n            choose_num(7, 42)\n  \
    \          >> -1\n            choose_num(7, 43)\n            >> -1\n         \
    \   choose_num(7, 44)\n            >> -1\n            choose_num(7, 45)\n    \
    \        >> -1\n            choose_num(7, 46)\n            >> -1\n           \
    \ choose_num(7, 47)\n            >> -1\n            choose_num(7, 48)\n      \
    \      >> -1\n            choose_num(7, 49)\n            >> -1\n            choose_num(7,\
    \ 50)\n            >> \ndef check(candidate):\n    assert candidate(12, 15) ==\
    \ 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpr48hj9i0.py\"\
    , line 8\n    choose_num(7, 10)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(1, 10)\n            choose_num(7, 10)\n            choose_num(7,\
    \ 9)\n            choose_num(7, 8)\n            choose_num(7, 7)\n           \
    \ choose_num(7, 6)\n            choose_num(7, 5)\n            choose_num(7, 4)\n\
    \            choose_num(7, 3)\n            choose_num(7, 2)\n            choose_num(7,\
    \ 1)\n            choose_num(7, 0)\n            choose_num(6, 10)\n          \
    \  choose_num(6, 9)\n            choose_num(6, 8)\n            choose_num(6, 7)\n\
    \            choose_num(6, 6)\n            choose_num(6, 5)\n            choose_num(6,\
    \ 4)\n            choose_num(6, 3)\n            choose_num(6, 2)\n           \
    \ choose_num(6, 1)\n            choose_num(6, 0)\n            choose_num(5, 10)\n\
    \            choose_num(5, 9)\n            choose_num(5, 8)\n            choose_num(5,\
    \ 7)\n            choose_num(5, 6)\n            choose_num(5, 5)\n           \
    \ choose_num(5, 4)\n            choose_num(5, 3)\n            choose_num(5, 2)\n\
    \            choose_num(5, 1)\n            choose_num(5, 0)\n            choose_num(4,\
    \ 10)\n            choose_num(4, 9)\n            choose_num(4, 8)\n          \
    \  choose_num(4, 7)\n            choose_num(4, 6)\n            choose_num(4, 5)\n\
    \            choose_num(4, 4)\n            choose_num(4, 3)\n            choose_num(4,\
    \ 2)\n            choose_num(4, 1)\n            choose_num(4, 0)\n           \
    \ choose_num(3, 10)\n            choose_num(3, 9)\n            choose_num(3, 8)\n\
    \            choose_num(3, 7)\n            choose_num(3, 6)\n            choose_num(3,\
    \ 5)\n            choose_num(3, 4)\n            choose_num(3, 3)\n           \
    \ choose_num(3, 2)\n            choose_num(3, 1)\n            choose_num(3, 0)\n\
    \            choose_num(2, 10)\n            choose_num(2, 9)\n            choose_num(2,\
    \ 8)\n            choose_num(2, 7)\n            choose_num(2, 6)\n           \
    \ choose_num(2, 5)\n            choose_num(2, 4)\n            choose_num(2, 3)\n\
    \            choose_num(2, 2)\n            choose_num(2, 1)\n            choose_num(2,\
    \ 0)\n            choose_num(1, 10)\n            choose_num(1, 9)\n          \
    \  choose_num(1, 8)\n\ndef check(candidate):\n    assert candidate(12, 15) ==\
    \ 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2ann8r78.py\"\
    , line 8\n    choose_num(1, 10)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(6, 8)\n            >> 8\n            choose_num(6, 7)\n \
    \           >> -1\n            \"\"\"\n    \"\"\"\n    if x > y:\n        x, y\
    \ = y, x\n    \n    if x % 2 == 0:\n        if y % 2 == 0:\n            return\
    \ x\n        else:\n            return -1\n    else:\n        if y % 2 == 0:\n\
    \            return -1\n        else:\n            return y\n</cell>\n<cell>\n\
    choose_num(6, 8)\n</cell>\n<cell>\nchoose_num(6, 7)\n</cell>\n<cell>\nchoose_num(6,\
    \ 10)\n</cell>\n<cell>\nchoose_num(6, 11)\n</cell>\n<cell>\nchoose_num(6, 12)\n\
    </cell>\n<cell>\nchoose_num(6, 13)\n</cell>\n<cell>\nchoose_num(6, 14)\n</cell>\n\
    <cell>\nchoose_num(6, 15)\n</cell>\n<cell>\nchoose_num(6, 16)\n</cell>\n<cell>\n\
    choose_num(6, 17)\n</cell>\n<cell>\nchoose_num(6, 18)\n</cell>\n<cell>\nchoose_num(6,\
    \ 19)\n</cell>\n<cell>\nchoose_num(6, 20)\n</cell>\n<cell>\nchoose_num(6, 21)\n\
    </cell>\n<cell>\nchoose_num(6, 22)\n</cell>\n<cell>\nchoose_num(6, 23)\n</cell>\n\
    <cell>\nchoose_num(6, 24)\n</cell>\n<cell>\nchoose_num(6, 25)\n</cell>\n<cell>\n\
    choose_num(6, 26)\n</cell>\n<cell>\nchoose_num(6, 27)\n</cell>\n<cell>\nchoose_num(6,\
    \ 28)\n</cell>\n<cell>\nchoose_num(6, 29)\n</cell>\n<cell>\nchoose_num(6, 30)\n\
    </cell>\n<cell>\nchoose_num(6, 31)\n</cell>\n<cell>\nchoose_num(6, 32)\n</cell>\n\
    <cell>\nchoose_num(6, 33)\n</cell>\n<cell>\nchoose_num(6, 34)\n</cell>\n<cell>\n\
    choose_num(6, 35)\n</cell>\n<cell>\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzwtc8an6.py\"\
    , line 8\n    choose_num(6, 8)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(7, 8)\n            >>>8\n            choose_num(7, 9)\n \
    \           >>>-1\n            choose_num(7, 10)\n            >>>-1\n        \
    \    choose_num(7, 11)\n            >>>-1\n            choose_num(7, 12)\n   \
    \         >>>-1\n            choose_num(7, 13)\n            >>>-1\n          \
    \  choose_num(7, 14)\n            >>>-1\n            choose_num(7, 15)\n     \
    \       >>>-1\n            choose_num(7, 16)\n            >>>-1\n            choose_num(7,\
    \ 17)\n            >>>-1\n            choose_num(7, 18)\n            >>>-1\n \
    \           choose_num(7, 19)\n            >>>-1\n            choose_num(7, 20)\n\
    \            >>>-1\n            choose_num(7, 21)\n            >>>-1\n       \
    \     choose_num(7, 22)\n            >>>-1\n            choose_num(7, 23)\n  \
    \          >>>-1\n            choose_num(7, 24)\n            >>>-1\n         \
    \   choose_num(7, 25)\n            >>>-1\n            choose_num(7, 26)\n    \
    \        >>>-1\n            choose_num(7, 27)\n            >>>-1\n           \
    \ choose_num(7, 28)\n            >>>-1\n            choose_num(7, 29)\n      \
    \      >>>-1\n            choose_num(7, 30)\n            >>>-1\n            choose_num(7,\
    \ 31)\n            >>>-1\n            choose_num(7, 32)\n            >>>-1\n \
    \           choose_num(7, 33)\n            >>>-1\n            choose_num(7, 34)\n\
    \            >>>-1\n            choose_num(7, 35)\n            >>>-1\n       \
    \     choose_num(7, 36)\n            >>>-1\n            choose_num(7, 37)\n  \
    \          >>>-1\n            choose_num(7, 38)\n            >>>-1\n         \
    \   choose_num(7, 39)\n            >>>-1\n            choose_num(7, 40)\n    \
    \        >>>-1\n            choose_num(7, 41)\n            >>>-1\n           \
    \ choose_num(7, 42)\n            >>>-1\n            choose_num(7, 43)\n      \
    \      >>>-1\n            choose_num(7, 44)\n            >>>-1\n            choose_num(7,\
    \ 45)\n            >>>-1\n            choose_num(7, 46)\n            >>>-1\n \
    \           choose_num(7, 47)\n            >>>-1\n            choose_num(7, 48)\n\
    \            >>>-1\ndef check(candidate):\n    assert candidate(12, 15) == 14\n\
    \    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps6d43cvq.py\"\
    , line 8\n    choose_num(7, 8)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(7, 10)\n            >>>10\n            choose_num(7, 11)\n\
    \            >>>-1\n            choose_num(7, 12)\n            >>>-1\n       \
    \     choose_num(7, 13)\n            >>>-1\n            choose_num(7, 14)\n  \
    \          >>>-1\n            choose_num(7, 15)\n            >>>-1\n         \
    \   choose_num(7, 16)\n            >>>-1\n            choose_num(7, 17)\n    \
    \        >>>-1\n            choose_num(7, 18)\n            >>>-1\n           \
    \ choose_num(7, 19)\n            >>>-1\n            choose_num(7, 20)\n      \
    \      >>>-1\n            choose_num(7, 21)\n            >>>-1\n            choose_num(7,\
    \ 22)\n            >>>-1\n            choose_num(7, 23)\n            >>>-1\n \
    \           choose_num(7, 24)\n            >>>-1\n            choose_num(7, 25)\n\
    \            >>>-1\n            choose_num(7, 26)\n            >>>-1\n       \
    \     choose_num(7, 27)\n            >>>-1\n            choose_num(7, 28)\n  \
    \          >>>-1\n            choose_num(7, 29)\n            >>>-1\n         \
    \   choose_num(7, 30)\n            >>>-1\n            choose_num(7, 31)\n    \
    \        >>>-1\n            choose_num(7, 32)\n            >>>-1\n           \
    \ choose_num(7, 33)\n            >>>-1\n            choose_num(7, 34)\n      \
    \      >>>-1\n            choose_num(7, 35)\n            >>>-1\n            choose_num(7,\
    \ 36)\n            >>>-1\n            choose_num(7, 37)\n            >>>-1\n \
    \           choose_num(7, 38)\n            >>>-1\n            choose_num(7, 39)\n\
    \            >>>-1\n            choose_num(7, 40)\n            >>>-1\n       \
    \     choose_num(7, 41)\n            >>>-1\n            choose_num(7, 42)\n  \
    \          >>>-1\n            choose_num(7, 43)\n            >>>-1\n         \
    \   choose_num(7, 44)\n            >>>-1\n            choose_num(7, 45)\n    \
    \        >>>-1\n            choose_num(7, 46)\n            >>>-1\n           \
    \ choose_num(7, 47)\n            >>>-1\n            choose_num(7, 48)\n      \
    \      >>>-1\n            choose_num(7, 49)\n            >>>-1\n            choose_num(7,\
    \ 50)\n            >>>\ndef check(candidate):\n    assert candidate(12, 15) ==\
    \ 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0l8kbegt.py\"\
    , line 8\n    choose_num(7, 10)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(8, 10)\n            >> 8\n            choose_num(7, 10)\n\
    \            >> 7\n            choose_num(6, 10)\n            >> -1\n        \
    \    choose_num(7, 11)\n            >> -1\n            choose_num(8, 11)\n   \
    \         >> -1\n            choose_num(9, 11)\n            >> -1\n          \
    \  choose_num(11, 11)\n            >> -1\n            choose_num(12, 11)\n   \
    \         >> -1\n            choose_num(13, 11)\n            >> -1\n         \
    \   choose_num(14, 11)\n            >> -1\n            choose_num(15, 11)\n  \
    \          >> -1\n            choose_num(16, 11)\n            >> -1\n        \
    \    choose_num(17, 11)\n            >> -1\n            choose_num(18, 11)\n \
    \           >> -1\n            choose_num(19, 11)\n            >> -1\n       \
    \     choose_num(20, 11)\n            >> -1\n            choose_num(21, 11)\n\
    \            >> -1\n            choose_num(22, 11)\n            >> -1\n      \
    \      choose_num(23, 11)\n            >> -1\n            choose_num(24, 11)\n\
    \            >> -1\n            choose_num(25, 11)\n            >> -1\n      \
    \      choose_num(26, 11)\n            >> -1\n            choose_num(27, 11)\n\
    \            >> -1\n            choose_num(28, 11)\n            >> -1\n      \
    \      choose_num(29, 11)\n            >> -1\n            choose_num(30, 11)\n\
    \            >> -1\n            choose_num(31, 11)\n            >> -1\n      \
    \      choose_num(32, 11)\n            >> -1\n            choose_num(33, 11)\n\
    \            >> -1\n            choose_num(34, 11)\n            >> -1\n      \
    \      choose_num(35, 11)\n            >> -1\n            choose_num(36, 11)\n\
    \            >> -1\n            choose_num(37, 11)\n            >> -1\n      \
    \      choose_num(38, 11)\n            >> -1\n            choose_num(39, 11)\n\
    \            >> -1\n            choose_num(40, 11)\n            >> -1\n      \
    \      choose_num(41, 11)\n            >> -1\n            choose_num(42, 11)\n\
    \            >> -1\n            choose_num(43, 11)\n            >> -1\n      \
    \      choose_num(44, 11)\n            >> -1\n            choose_num(45, 11)\n\
    \            >> -1\n            choose_num(46, 11)\n            >> -1\n      \
    \      choose_num(47, 11)\n\ndef check(candidate):\n    assert candidate(12, 15)\
    \ == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) ==\
    \ 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) ==\
    \ 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n \
    \   assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbllokvf4.py\"\
    , line 8\n    choose_num(8, 10)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(7, 9)\n            >>>8\n            choose_num(7, 10)\n\
    \            >>>-1\n            \"\"\"\n    \"\"\"\n    if x > y:\n        x,\
    \ y = y, x\n    \n    if x % 2 == 0 and y % 2 == 0:\n        even = x // 2\n \
    \       odd = y // 2\n        if even > odd:\n            return even\n      \
    \  else:\n            return odd\n    else:\n        return -1\n\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6fn10uvu.py\"\
    , line 8\n    choose_num(7, 9)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(7, 9)\n            >>>7\n            choose_num(7, 10)\n\
    \            >>>-1\n            choose_num(7, 11)\n            >>>-1\n       \
    \     choose_num(7, 12)\n            >>>-1\n            choose_num(7, 13)\n  \
    \          >>>-1\n            choose_num(7, 14)\n            >>>-1\n         \
    \   choose_num(7, 15)\n            >>>-1\n            choose_num(7, 16)\n    \
    \        >>>-1\n            choose_num(7, 17)\n            >>>-1\n           \
    \ choose_num(7, 18)\n            >>>-1\n            choose_num(7, 19)\n      \
    \      >>>-1\n            choose_num(7, 20)\n            >>>-1\n            choose_num(7,\
    \ 21)\n            >>>-1\n            choose_num(7, 22)\n            >>>-1\n \
    \           choose_num(7, 23)\n            >>>-1\n            choose_num(7, 24)\n\
    \            >>>-1\n            choose_num(7, 25)\n            >>>-1\n       \
    \     choose_num(7, 26)\n            >>>-1\n            choose_num(7, 27)\n  \
    \          >>>-1\n            choose_num(7, 28)\n            >>>-1\n         \
    \   choose_num(7, 29)\n            >>>-1\n            choose_num(7, 30)\n    \
    \        >>>-1\n            choose_num(7, 31)\n            >>>-1\n           \
    \ choose_num(7, 32)\n            >>>-1\n            choose_num(7, 33)\n      \
    \      >>>-1\n            choose_num(7, 34)\n            >>>-1\n            choose_num(7,\
    \ 35)\n            >>>-1\n            choose_num(7, 36)\n            >>>-1\n \
    \           choose_num(7, 37)\n            >>>-1\n            choose_num(7, 38)\n\
    \            >>>-1\n            choose_num(7, 39)\n            >>>-1\n       \
    \     choose_num(7, 40)\n            >>>-1\n            choose_num(7, 41)\n  \
    \          >>>-1\n            choose_num(7, 42)\n            >>>-1\n         \
    \   choose_num(7, 43)\n            >>>-1\n            choose_num(7, 44)\n    \
    \        >>>-1\n            choose_num(7, 45)\n            >>>-1\n           \
    \ choose_num(7, 46)\n            >>>-1\n            choose_num(7, 47)\n      \
    \      >>>-1\n            choose_num(7, 48)\n            >>>-1\n            choose_num(7,\
    \ 49)\n            >>>\ndef check(candidate):\n    assert candidate(12, 15) ==\
    \ 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkmks2vof.py\"\
    , line 8\n    choose_num(7, 9)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(1, 10)\n            >>>10\n            choose_num(7, 10)\n\
    \            >>>-1\n            choose_num(7, 8)\n            >>>-1\n        \
    \    choose_num(7, 9)\n            >>>-1\n            choose_num(7, 10)\n    \
    \        >>>-1\n            choose_num(7, 11)\n            >>>-1\n           \
    \ choose_num(7, 12)\n            >>>-1\n            choose_num(7, 13)\n      \
    \      >>>-1\n            choose_num(7, 14)\n            >>>-1\n            choose_num(7,\
    \ 15)\n            >>>-1\n            choose_num(7, 16)\n            >>>-1\n \
    \           choose_num(7, 17)\n            >>>-1\n            choose_num(7, 18)\n\
    \            >>>-1\n            choose_num(7, 19)\n            >>>-1\n       \
    \     choose_num(7, 20)\n            >>>-1\n            choose_num(7, 21)\n  \
    \          >>>-1\n            choose_num(7, 22)\n            >>>-1\n         \
    \   choose_num(7, 23)\n            >>>-1\n            choose_num(7, 24)\n    \
    \        >>>-1\n            choose_num(7, 25)\n            >>>-1\n           \
    \ choose_num(7, 26)\n            >>>-1\n            choose_num(7, 27)\n      \
    \      >>>-1\n            choose_num(7, 28)\n            >>>-1\n            choose_num(7,\
    \ 29)\n            >>>-1\n            choose_num(7, 30)\n            >>>-1\n \
    \           choose_num(7, 31)\n            >>>-1\n            choose_num(7, 32)\n\
    \            >>>-1\n            choose_num(7, 33)\n            >>>-1\n       \
    \     choose_num(7, 34)\n            >>>-1\n            choose_num(7, 35)\n  \
    \          >>>-1\n            choose_num(7, 36)\n            >>>-1\n         \
    \   choose_num(7, 37)\n            >>>-1\n            choose_num(7, 38)\n    \
    \        >>>-1\n            choose_num(7, 39)\n            >>>-1\n           \
    \ choose_num(7, 40)\n            >>>-1\n            choose_num(7, 41)\n      \
    \      >>>-1\n            choose_num(7, 42)\n            >>>-1\n            choose_num(7,\
    \ 43)\n            >>>-1\n            choose_num(7, 44)\n            >>>-1\n \
    \           choose_num(7, 45)\n            >>>-1\n            choose_num(7, 46)\n\
    \            >>>-1\n            cho\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuh8pwe_0.py\"\
    , line 8\n    choose_num(1, 10)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(6, 10)\n            >> 8\n            choose_num(6, 11)\n\
    \            >> -1\n            \"\"\"\n    \"\"\"\n    if x > y:\n        x,\
    \ y = y, x\n    \n    even = True\n    \n    while even and x != y:\n        if\
    \ x % 2 == 0:\n            even = False\n            x = x + 1\n        else:\n\
    \            x = x + 1\n    \n    if even:\n        return x\n    else:\n    \
    \    return -1\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n\
    \    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvpqddpau.py\"\
    , line 8\n    choose_num(6, 10)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \ >>> choose_num(1, 10)\n    10\n    >>> choose_num(100, 1000)\n    1000\n   \
    \ >>> choose_num(100, 0)\n    -1\n    \"\"\"\n    if x > y:\n        x, y = y,\
    \ x\n    \n    if x % 2 == 0:\n        return y\n    \n    if y % 2 == 0:\n  \
    \      return x\n    \n    if x % 2 == 0 and y % 2 == 0:\n        return x + y\n\
    \    \n    if x % 2 == 0 and y % 2 != 0:\n        return x - y\n    \n    if x\
    \ % 2 != 0 and y % 2 != 0:\n        return x - y\n    \n    if x % 2 != 0 and\
    \ y % 2 == 0:\n        return x + y\n    \n    if x % 2 == 0 and y % 2 != 0:\n\
    \        return x\n    \n    return -1\n</cell>\n<cell>\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbhcc6ymz.py\"\
    , line 14\n    \"\"\"\n    ^\nSyntaxError: unterminated triple-quoted string literal\
    \ (detected at line 55)\n"
  exit_code: 1
  status: SyntaxError
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(1, 10)\n            >> 10\n            choose_num(7, 10)\n\
    \            >> 7\n            choose_num(7, 8)\n            >> -1\n         \
    \   choose_num(7, 9)\n            >> -1\n            choose_num(7, 11)\n     \
    \       >> -1\n            choose_num(7, 12)\n            >> -1\n            choose_num(7,\
    \ 13)\n            >> -1\n            choose_num(7, 14)\n            >> -1\n \
    \           choose_num(7, 15)\n            >> -1\n            choose_num(7, 16)\n\
    \            >> -1\n            choose_num(7, 17)\n            >> -1\n       \
    \     choose_num(7, 18)\n            >> -1\n            choose_num(7, 19)\n  \
    \          >> -1\n            choose_num(7, 20)\n            >> -1\n         \
    \   choose_num(7, 21)\n            >> -1\n            choose_num(7, 22)\n    \
    \        >> -1\n            choose_num(7, 23)\n            >> -1\n           \
    \ choose_num(7, 24)\n            >> -1\n            choose_num(7, 25)\n      \
    \      >> -1\n            choose_num(7, 26)\n            >> -1\n            choose_num(7,\
    \ 27)\n            >> -1\n            choose_num(7, 28)\n            >> -1\n \
    \           choose_num(7, 29)\n            >> -1\n            choose_num(7, 30)\n\
    \            >> -1\n            choose_num(7, 31)\n            >> -1\n       \
    \     choose_num(7, 32)\n            >> -1\n            choose_num(7, 33)\n  \
    \          >> -1\n            choose_num(7, 34)\n            >> -1\n         \
    \   choose_num(7, 35)\n            >> -1\n            choose_num(7, 36)\n    \
    \        >> -1\n            choose_num(7, 37)\n            >> -1\n           \
    \ choose_num(7, 38)\n            >> -1\n            choose_num(7, 39)\n      \
    \      >> -1\n            choose_num(7, 40)\n            >> -1\n            choose_num(7,\
    \ 41)\n            >> -1\n            choose_num(7, 42)\n            >> -1\n \
    \           choose_num(7, 43)\n            >> -1\n            choose_num(7, 44)\n\
    \            >> -1\n            choose_num(7, 45)\n            >> -1\n       \
    \     choose_num(7, 46)\n            >> -1\n            choose_num(7, 47)\n  \
    \          >> -1\n            \ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp77hrsuzf.py\"\
    , line 8\n    choose_num(1, 10)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(7, 8)\n            choose_num(7, 7)\n            choose_num(7,\
    \ 6)\n            choose_num(7, 5)\n            choose_num(7, 4)\n           \
    \ choose_num(7, 3)\n            choose_num(7, 2)\n            choose_num(7, 1)\n\
    \            choose_num(7, 0)\n            choose_num(6, 8)\n            choose_num(6,\
    \ 7)\n            choose_num(6, 6)\n            choose_num(6, 5)\n           \
    \ choose_num(6, 4)\n            choose_num(6, 3)\n            choose_num(6, 2)\n\
    \            choose_num(6, 1)\n            choose_num(6, 0)\n            choose_num(5,\
    \ 8)\n            choose_num(5, 7)\n            choose_num(5, 6)\n           \
    \ choose_num(5, 5)\n            choose_num(5, 4)\n            choose_num(5, 3)\n\
    \            choose_num(5, 2)\n            choose_num(5, 1)\n            choose_num(5,\
    \ 0)\n            choose_num(4, 8)\n            choose_num(4, 7)\n           \
    \ choose_num(4, 6)\n            choose_num(4, 5)\n            choose_num(4, 4)\n\
    \            choose_num(4, 3)\n            choose_num(4, 2)\n            choose_num(4,\
    \ 1)\n            choose_num(4, 0)\n            choose_num(3, 8)\n           \
    \ choose_num(3, 7)\n            choose_num(3, 6)\n            choose_num(3, 5)\n\
    \            choose_num(3, 4)\n            choose_num(3, 3)\n            choose_num(3,\
    \ 2)\n            choose_num(3, 1)\n            choose_num(3, 0)\n           \
    \ choose_num(2, 8)\n            choose_num(2, 7)\n            choose_num(2, 6)\n\
    \            choose_num(2, 5)\n            choose_num(2, 4)\n            choose_num(2,\
    \ 3)\n            choose_num(2, 2)\n            choose_num(2, 1)\n           \
    \ choose_num(2, 0)\n            choose_num(1, 8)\n            choose_num(1, 7)\n\
    \            choose_num(1, 6)\n            choose_num(1, 5)\n            choose_num(1,\
    \ 4)\n            choose_num(1, 3)\n            choose_num(1, 2)\n           \
    \ choose_num(1, 1)\n            choose_num(1, 0)\n            choose_num(0, 0)\n\
    \            choose_num(0, 1)\n            choose_num(0, 2)\n            choose_num(0,\
    \ 3)\n            choose_num(0, 4)\n            choose_num(0, 5)\n           \
    \ choose_num(0, 6)\n            choose_num(0, 7)\n\ndef check(candidate):\n  \
    \  assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkyt4xd7d.py\"\
    , line 8\n    choose_num(7, 8)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(7, 9)\n            >>>7\n            choose_num(7, 10)\n\
    \            >>>-1\n            choose_num(7, 11)\n            >>>-1\n       \
    \     choose_num(7, 12)\n            >>>-1\n            choose_num(7, 13)\n  \
    \          >>>-1\n            choose_num(7, 14)\n            >>>-1\n         \
    \   choose_num(7, 15)\n            >>>-1\n            choose_num(7, 16)\n    \
    \        >>>-1\n            choose_num(7, 17)\n            >>>-1\n           \
    \ choose_num(7, 18)\n            >>>-1\n            choose_num(7, 19)\n      \
    \      >>>-1\n            choose_num(7, 20)\n            >>>-1\n            choose_num(7,\
    \ 21)\n            >>>-1\n            choose_num(7, 22)\n            >>>-1\n \
    \           choose_num(7, 23)\n            >>>-1\n            choose_num(7, 24)\n\
    \            >>>-1\n            choose_num(7, 25)\n            >>>-1\n       \
    \     choose_num(7, 26)\n            >>>-1\n            choose_num(7, 27)\n  \
    \          >>>-1\n            choose_num(7, 28)\n            >>>-1\n         \
    \   choose_num(7, 29)\n            >>>-1\n            choose_num(7, 30)\n    \
    \        >>>-1\n            choose_num(7, 31)\n            >>>-1\n           \
    \ choose_num(7, 32)\n            >>>-1\n            choose_num(7, 33)\n      \
    \      >>>-1\n            choose_num(7, 34)\n            >>>-1\n            choose_num(7,\
    \ 35)\n            >>>-1\n            choose_num(7, 36)\n            >>>-1\n \
    \           choose_num(7, 37)\n            >>>-1\n            choose_num(7, 38)\n\
    \            >>>-1\n            choose_num(7, 39)\n            >>>-1\n       \
    \     choose_num(7, 40)\n            >>>-1\n            choose_num(7, 41)\n  \
    \          >>>-1\n            choose_num(7, 42)\n            >>>-1\n         \
    \   choose_num(7, 43)\n            >>>-1\n            choose_num(7, 44)\n    \
    \        >>>-1\n            choose_num(7, 45)\n            >>>-1\n           \
    \ choose_num(7, 46)\n            >>>-1\n            choose_num(7, 47)\n      \
    \      >>>-1\n            choose_num(7, 48)\n            >>>-1\n            choose_num(7,\
    \ 49)\n            >>>\ndef check(candidate):\n    assert candidate(12, 15) ==\
    \ 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8iphq1w8.py\"\
    , line 8\n    choose_num(7, 9)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(7, 9)\n            >>>8\n            choose_num(7, 10)\n\
    \            >>>-1\n            choose_num(7, 11)\n            >>>-1\n       \
    \     choose_num(7, 12)\n            >>>-1\n            choose_num(7, 13)\n  \
    \          >>>-1\n            choose_num(7, 14)\n            >>>-1\n         \
    \   choose_num(7, 15)\n            >>>-1\n            choose_num(7, 16)\n    \
    \        >>>-1\n            choose_num(7, 17)\n            >>>-1\n           \
    \ choose_num(7, 18)\n            >>>-1\n            choose_num(7, 19)\n      \
    \      >>>-1\n            choose_num(7, 20)\n            >>>-1\n            choose_num(7,\
    \ 21)\n            >>>-1\n            choose_num(7, 22)\n            >>>-1\n \
    \           choose_num(7, 23)\n            >>>-1\n            choose_num(7, 24)\n\
    \            >>>-1\n            choose_num(7, 25)\n            >>>-1\n       \
    \     choose_num(7, 26)\n            >>>-1\n            choose_num(7, 27)\n  \
    \          >>>-1\n            choose_num(7, 28)\n            >>>-1\n         \
    \   choose_num(7, 29)\n            >>>-1\n            choose_num(7, 30)\n    \
    \        >>>-1\n            choose_num(7, 31)\n            >>>-1\n           \
    \ choose_num(7, 32)\n            >>>-1\n            choose_num(7, 33)\n      \
    \      >>>-1\n            choose_num(7, 34)\n            >>>-1\n            choose_num(7,\
    \ 35)\n            >>>-1\n            choose_num(7, 36)\n            >>>-1\n \
    \           choose_num(7, 37)\n            >>>-1\n            choose_num(7, 38)\n\
    \            >>>-1\n            choose_num(7, 39)\n            >>>-1\n       \
    \     choose_num(7, 40)\n            >>>-1\n            choose_num(7, 41)\n  \
    \          >>>-1\n            choose_num(7, 42)\n            >>>-1\n         \
    \   choose_num(7, 43)\n            >>>-1\n            choose_num(7, 44)\n    \
    \        >>>-1\n            choose_num(7, 45)\n            >>>-1\n           \
    \ choose_num(7, 46)\n            >>>-1\n            choose_num(7, 47)\n      \
    \      >>>-1\n            choose_num(7, 48)\n            >>>-1\n            choose_num(7,\
    \ 49)\n            >>>\ndef check(candidate):\n    assert candidate(12, 15) ==\
    \ 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbo5d9py7.py\"\
    , line 8\n    choose_num(7, 9)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \ >>> choose_num(100, 200)\n    200\n    >>> choose_num(100, 0)\n    -1\n    >>>\
    \ choose_num(100, -2)\n    -1\n    \"\"\"\n    if x > y:\n        x, y = y, x\n\
    \    if x % 2 == 0:\n        return x // 2\n    if y % 2 == 0:\n        return\
    \ y // 2\n    if x % 2 == 0 and y % 2 == 0:\n        return x // 2 + y // 2\n\
    \    if x % 2 == 0 and y % 2 != 0:\n        return x // 2 + 1\n    if x % 2 !=\
    \ 0 and y % 2 == 0:\n        return y // 2 + 1\n    if x % 2 != 0 and y % 2 !=\
    \ 0:\n        return -1\n    return -1\n\n\ndef check(candidate):\n    assert\
    \ candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33,\
    \ 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6,\
    \ 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) ==\
    \ -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyuf3k5cx.py\"\
    , line 14\n    \"\"\"\n    ^\nSyntaxError: unterminated triple-quoted string literal\
    \ (detected at line 45)\n"
  exit_code: 1
  status: SyntaxError
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \ >>> choose_num(7, 10)\n    7\n    >>> choose_num(7, 8)\n    -1\n    >>> choose_num(7,\
    \ 9)\n    -1\n    \"\"\"\n    if x >= y:\n        return -1\n    elif x % 2 ==\
    \ 0:\n        return x // 2\n    elif y % 2 == 0:\n        return y // 2\n   \
    \ else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2b3llfwf.py\"\
    , line 14\n    \"\"\"\n    ^\nSyntaxError: unterminated triple-quoted string literal\
    \ (detected at line 38)\n"
  exit_code: 1
  status: SyntaxError
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(7, 8)\n            >>>8\n            choose_num(7, 9)\n \
    \           >>>8\n            choose_num(7, 10)\n            >>>-1\n         \
    \   choose_num(7, 11)\n            >>>-1\n            choose_num(7, 12)\n    \
    \        >>>-1\n            choose_num(7, 13)\n            >>>-1\n           \
    \ choose_num(7, 14)\n            >>>-1\n            choose_num(7, 15)\n      \
    \      >>>-1\n            choose_num(7, 16)\n            >>>-1\n            choose_num(7,\
    \ 17)\n            >>>-1\n            choose_num(7, 18)\n            >>>-1\n \
    \           choose_num(7, 19)\n            >>>-1\n            choose_num(7, 20)\n\
    \            >>>-1\n            choose_num(7, 21)\n            >>>-1\n       \
    \     choose_num(7, 22)\n            >>>-1\n            choose_num(7, 23)\n  \
    \          >>>-1\n            choose_num(7, 24)\n            >>>-1\n         \
    \   choose_num(7, 25)\n            >>>-1\n            choose_num(7, 26)\n    \
    \        >>>-1\n            choose_num(7, 27)\n            >>>-1\n           \
    \ choose_num(7, 28)\n            >>>-1\n            choose_num(7, 29)\n      \
    \      >>>-1\n            choose_num(7, 30)\n            >>>-1\n            choose_num(7,\
    \ 31)\n            >>>-1\n            choose_num(7, 32)\n            >>>-1\n \
    \           choose_num(7, 33)\n            >>>-1\n            choose_num(7, 34)\n\
    \            >>>-1\n            choose_num(7, 35)\n            >>>-1\n       \
    \     choose_num(7, 36)\n            >>>-1\n            choose_num(7, 37)\n  \
    \          >>>-1\n            choose_num(7, 38)\n            >>>-1\n         \
    \   choose_num(7, 39)\n            >>>-1\n            choose_num(7, 40)\n    \
    \        >>>-1\n            choose_num(7, 41)\n            >>>-1\n           \
    \ choose_num(7, 42)\n            >>>-1\n            choose_num(7, 43)\n      \
    \      >>>-1\n            choose_num(7, 44)\n            >>>-1\n            choose_num(7,\
    \ 45)\n            >>>-1\n            choose_num(7, 46)\n            >>>-1\n \
    \           choose_num(7, 47)\n            >>>-1\n            choose_num(7, 48)\n\
    \            >>>-1\ndef check(candidate):\n    assert candidate(12, 15) == 14\n\
    \    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp72xjjmut.py\"\
    , line 8\n    choose_num(7, 8)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(7, 8)\n            choose_num(7, 9)\n            choose_num(8,\
    \ 9)\n            choose_num(9, 9)\n            choose_num(9, 10)\n          \
    \  choose_num(10, 10)\n            choose_num(10, 11)\n            choose_num(11,\
    \ 11)\n            choose_num(11, 12)\n            choose_num(12, 12)\n      \
    \      choose_num(12, 13)\n            choose_num(13, 13)\n            choose_num(13,\
    \ 14)\n            choose_num(14, 14)\n            choose_num(14, 15)\n      \
    \      choose_num(15, 15)\n            choose_num(15, 16)\n            choose_num(16,\
    \ 16)\n            choose_num(16, 17)\n            choose_num(17, 17)\n      \
    \      choose_num(17, 18)\n            choose_num(18, 18)\n            choose_num(18,\
    \ 19)\n            choose_num(19, 19)\n            choose_num(19, 20)\n      \
    \      choose_num(20, 20)\n            choose_num(20, 21)\n            choose_num(21,\
    \ 21)\n            choose_num(21, 22)\n            choose_num(22, 22)\n      \
    \      choose_num(22, 23)\n            choose_num(23, 23)\n            choose_num(23,\
    \ 24)\n            choose_num(24, 24)\n            choose_num(24, 25)\n      \
    \      choose_num(25, 25)\n            choose_num(25, 26)\n            choose_num(26,\
    \ 26)\n            choose_num(26, 27)\n            choose_num(27, 27)\n      \
    \      choose_num(27, 28)\n            choose_num(28, 28)\n            choose_num(28,\
    \ 29)\n            choose_num(29, 29)\n            choose_num(29, 30)\n      \
    \      choose_num(30, 30)\n            choose_num(30, 31)\n            choose_num(31,\
    \ 31)\n            choose_num(31, 32)\n            choose_num(32, 32)\n      \
    \      choose_num(32, 33)\n            choose_num(33, 33)\n            choose_num(33,\
    \ 34)\n            choose_num(34, 34)\n            choose_num(34, 35)\n      \
    \      choose_num(35, 35)\n            choose_num(35, 36)\n            choose_num(36,\
    \ 36)\n            choose_num(36, 37)\n            choose_num(37, 37)\n      \
    \      choose_num(37, 38)\n            \ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6topkact.py\"\
    , line 8\n    choose_num(7, 8)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(7, 12)\n            >>>12\n            choose_num(7, 13)\n\
    \            >>>-1\n            choose_num(7, 14)\n            >>>-1\n       \
    \     choose_num(7, 15)\n            >>>-1\n            choose_num(7, 16)\n  \
    \          >>>-1\n            choose_num(7, 17)\n            >>>-1\n         \
    \   choose_num(7, 18)\n            >>>-1\n            choose_num(7, 19)\n    \
    \        >>>-1\n            choose_num(7, 20)\n            >>>-1\n           \
    \ choose_num(7, 21)\n            >>>-1\n            choose_num(7, 22)\n      \
    \      >>>-1\n            choose_num(7, 23)\n            >>>-1\n            choose_num(7,\
    \ 24)\n            >>>-1\n            choose_num(7, 25)\n            >>>-1\n \
    \           choose_num(7, 26)\n            >>>-1\n            choose_num(7, 27)\n\
    \            >>>-1\n            choose_num(7, 28)\n            >>>-1\n       \
    \     choose_num(7, 29)\n            >>>-1\n            choose_num(7, 30)\n  \
    \          >>>-1\n            choose_num(7, 31)\n            >>>-1\n         \
    \   choose_num(7, 32)\n            >>>-1\n            choose_num(7, 33)\n    \
    \        >>>-1\n            choose_num(7, 34)\n            >>>-1\n           \
    \ choose_num(7, 35)\n            >>>-1\n            choose_num(7, 36)\n      \
    \      >>>-1\n            choose_num(7, 37)\n            >>>-1\n            choose_num(7,\
    \ 38)\n            >>>-1\n            choose_num(7, 39)\n            >>>-1\n \
    \           choose_num(7, 40)\n            >>>-1\n            choose_num(7, 41)\n\
    \            >>>-1\n            choose_num(7, 42)\n            >>>-1\n       \
    \     choose_num(7, 43)\n            >>>-1\n            choose_num(7, 44)\n  \
    \          >>>-1\n            choose_num(7, 45)\n            >>>-1\n         \
    \   choose_num(7, 46)\n            >>>-1\n            choose_num(7, 47)\n    \
    \        >>>-1\n            choose_num(7, 48)\n            >>>-1\n           \
    \ choose_num(7, 49)\n            >>>-1\n            choose_num(7, 50)\n      \
    \      >>>-1\n            choose_num(7, 51)\n            >>>-1\n            choose_num(7,\
    \ 52)\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert\
    \ candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert\
    \ candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27,\
    \ 10) == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546)\
    \ == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp118pgynu.py\"\
    , line 8\n    choose_num(7, 12)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(7, 10)\n            >>>7\n            choose_num(7, 8)\n\
    \            >>>-1\n            choose_num(7, 9)\n            >>>-1\n        \
    \    choose_num(7, 11)\n            >>>-1\n            choose_num(7, 12)\n   \
    \         >>>-1\n            choose_num(7, 13)\n            >>>-1\n          \
    \  choose_num(7, 14)\n            >>>-1\n            choose_num(7, 15)\n     \
    \       >>>-1\n            choose_num(7, 16)\n            >>>-1\n            choose_num(7,\
    \ 17)\n            >>>-1\n            choose_num(7, 18)\n            >>>-1\n \
    \           choose_num(7, 19)\n            >>>-1\n            choose_num(7, 20)\n\
    \            >>>-1\n            choose_num(7, 21)\n            >>>-1\n       \
    \     choose_num(7, 22)\n            >>>-1\n            choose_num(7, 23)\n  \
    \          >>>-1\n            choose_num(7, 24)\n            >>>-1\n         \
    \   choose_num(7, 25)\n            >>>-1\n            choose_num(7, 26)\n    \
    \        >>>-1\n            choose_num(7, 27)\n            >>>-1\n           \
    \ choose_num(7, 28)\n            >>>-1\n            choose_num(7, 29)\n      \
    \      >>>-1\n            choose_num(7, 30)\n            >>>-1\n            choose_num(7,\
    \ 31)\n            >>>-1\n            choose_num(7, 32)\n            >>>-1\n \
    \           choose_num(7, 33)\n            >>>-1\n            choose_num(7, 34)\n\
    \            >>>-1\n            choose_num(7, 35)\n            >>>-1\n       \
    \     choose_num(7, 36)\n            >>>-1\n            choose_num(7, 37)\n  \
    \          >>>-1\n            choose_num(7, 38)\n            >>>-1\n         \
    \   choose_num(7, 39)\n            >>>-1\n            choose_num(7, 40)\n    \
    \        >>>-1\n            choose_num(7, 41)\n            >>>-1\n           \
    \ choose_num(7, 42)\n            >>>-1\n            choose_num(7, 43)\n      \
    \      >>>-1\n            choose_num(7, 44)\n            >>>-1\n            choose_num(7,\
    \ 45)\n            >>>-1\n            choose_num(7, 46)\n            >>>-1\n \
    \           choose_num(7, 47)\n            >>>-1\n            choose_num(7, 48)\n\
    \            >>>-1\ndef check(candidate):\n    assert candidate(12, 15) == 14\n\
    \    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzgwossam.py\"\
    , line 8\n    choose_num(7, 10)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(7, 9)\n            >>>8\n            choose_num(7, 10)\n\
    \            >>>-1\n            choose_num(7, 11)\n            >>>-1\n       \
    \     choose_num(7, 12)\n            >>>-1\n            choose_num(7, 13)\n  \
    \          >>>-1\n            choose_num(7, 14)\n            >>>-1\n         \
    \   choose_num(7, 15)\n            >>>-1\n            choose_num(7, 16)\n    \
    \        >>>-1\n            choose_num(7, 17)\n            >>>-1\n           \
    \ choose_num(7, 18)\n            >>>-1\n            choose_num(7, 19)\n      \
    \      >>>-1\n            choose_num(7, 20)\n            >>>-1\n            choose_num(7,\
    \ 21)\n            >>>-1\n            choose_num(7, 22)\n            >>>-1\n \
    \           choose_num(7, 23)\n            >>>-1\n            choose_num(7, 24)\n\
    \            >>>-1\n            choose_num(7, 25)\n            >>>-1\n       \
    \     choose_num(7, 26)\n            >>>-1\n            choose_num(7, 27)\n  \
    \          >>>-1\n            choose_num(7, 28)\n            >>>-1\n         \
    \   choose_num(7, 29)\n            >>>-1\n            choose_num(7, 30)\n    \
    \        >>>-1\n            choose_num(7, 31)\n            >>>-1\n           \
    \ choose_num(7, 32)\n            >>>-1\n            choose_num(7, 33)\n      \
    \      >>>-1\n            choose_num(7, 34)\n            >>>-1\n            choose_num(7,\
    \ 35)\n            >>>-1\n            choose_num(7, 36)\n            >>>-1\n \
    \           choose_num(7, 37)\n            >>>-1\n            choose_num(7, 38)\n\
    \            >>>-1\n            choose_num(7, 39)\n            >>>-1\n       \
    \     choose_num(7, 40)\n            >>>-1\n            choose_num(7, 41)\n  \
    \          >>>-1\n            choose_num(7, 42)\n            >>>-1\n         \
    \   choose_num(7, 43)\n            >>>-1\n            choose_num(7, 44)\n    \
    \        >>>-1\n            choose_num(7, 45)\n            >>>-1\n           \
    \ choose_num(7, 46)\n            >>>-1\n            choose_num(7, 47)\n      \
    \      >>>-1\n            choose_num(7, 48)\n            >>>-1\n            choose_num(7,\
    \ 49)\n            >>>\ndef check(candidate):\n    assert candidate(12, 15) ==\
    \ 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe0qak7rn.py\"\
    , line 8\n    choose_num(7, 9)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \ >>> choose_num(7, 10)\n    7\n    >>> choose_num(7, 11)\n    -1\n    >>> choose_num(7,\
    \ 12)\n    -1\n    >>> choose_num(7, 13)\n    -1\n    >>> choose_num(7, 14)\n\
    \    -1\n    >>> choose_num(7, 15)\n    -1\n    >>> choose_num(7, 16)\n    -1\n\
    \    >>> choose_num(7, 17)\n    -1\n    >>> choose_num(7, 18)\n    -1\n    >>>\
    \ choose_num(7, 19)\n    -1\n    >>> choose_num(7, 20)\n    -1\n    >>> choose_num(7,\
    \ 21)\n    -1\n    >>> choose_num(7, 22)\n    -1\n    >>> choose_num(7, 23)\n\
    \    -1\n    >>> choose_num(7, 24)\n    -1\n    >>> choose_num(7, 25)\n    -1\n\
    \    >>> choose_num(7, 26)\n    -1\n    >>> choose_num(7, 27)\n    -1\n    >>>\
    \ choose_num(7, 28)\n    -1\n    >>> choose_num(7, 29)\n    -1\n    >>> choose_num(7,\
    \ 30)\n    -1\n    >>> choose_num(7, 31)\n    -1\n    >>> choose_num(7, 32)\n\
    \    -1\n    >>> choose_num(7, 33)\n    -1\n    >>> choose_num(7, 34)\n    -1\n\
    \    >>> choose_num(7, 35)\n    -1\n    >>> choose_num(7, 36)\n    -1\n    >>>\
    \ choose_num(7, 37)\n    -1\n    >>> choose_num(7, 38)\n    -1\n    >>> choose_num(7,\
    \ 39)\n    -1\n    >>> choose_num(7, 40)\n    -1\n    >>> choose_num(7, 41)\n\
    \    -1\n    >>> choose_num(7, 42)\n    -1\n    >>> choose_num(7, 43)\n    -1\n\
    \    >>> choose_num(7, 44)\n    -1\n    >>> choose_num(7, 45)\n    -1\n    >>>\
    \ choose_num(7, 46)\n    -1\n    >>> choose_num(7, 47)\n    -1\n    >>> choose_num(7,\
    \ 48)\n    -1\n    >>> choose_num(7, 49)\n    -1\n    >>> choose_num(7, 50)\n\
    \    -1\n    >>> choose_num(7, 51)\n    -1\n    >>> choose_num(7, 52)\n    -1\n\
    \    >>> choose_num(7, 53)\n    -1\n    >>> choose_\ndef check(candidate):\n \
    \   assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcjpkzljy.py\"\
    , line 8\n    >>> choose_num(7, 10)\n    ^^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(7, 10)\n            >>>10\n            choose_num(7, 8)\n\
    \            >>>8\n            choose_num(7, 9)\n            >>>-1\n         \
    \   choose_num(7, 10)\n            >>>10\n            choose_num(7, 11)\n    \
    \        >>>-1\n            choose_num(7, 12)\n            >>>-1\n           \
    \ choose_num(7, 13)\n            >>>-1\n            choose_num(7, 14)\n      \
    \      >>>-1\n            choose_num(7, 15)\n            >>>-1\n            choose_num(7,\
    \ 16)\n            >>>-1\n            choose_num(7, 17)\n            >>>-1\n \
    \           choose_num(7, 18)\n            >>>-1\n            choose_num(7, 19)\n\
    \            >>>-1\n            choose_num(7, 20)\n            >>>-1\n       \
    \     choose_num(7, 21)\n            >>>-1\n            choose_num(7, 22)\n  \
    \          >>>-1\n            choose_num(7, 23)\n            >>>-1\n         \
    \   choose_num(7, 24)\n            >>>-1\n            choose_num(7, 25)\n    \
    \        >>>-1\n            choose_num(7, 26)\n            >>>-1\n           \
    \ choose_num(7, 27)\n            >>>-1\n            choose_num(7, 28)\n      \
    \      >>>-1\n            choose_num(7, 29)\n            >>>-1\n            choose_num(7,\
    \ 30)\n            >>>-1\n            choose_num(7, 31)\n            >>>-1\n \
    \           choose_num(7, 32)\n            >>>-1\n            choose_num(7, 33)\n\
    \            >>>-1\n            choose_num(7, 34)\n            >>>-1\n       \
    \     choose_num(7, 35)\n            >>>-1\n            choose_num(7, 36)\n  \
    \          >>>-1\n            choose_num(7, 37)\n            >>>-1\n         \
    \   choose_num(7, 38)\n            >>>-1\n            choose_num(7, 39)\n    \
    \        >>>-1\n            choose_num(7, 40)\n            >>>-1\n           \
    \ choose_num(7, 41)\n            >>>-1\n            choose_num(7, 42)\n      \
    \      >>>-1\n            choose_num(7, 43)\n            >>>-1\n            choose_num(7,\
    \ 44)\n            >>>-1\n            choose_num(7, 45)\n            >>>-1\n \
    \           choose_num(7, 46)\n            >>>-1\n            choose_num(7, 47)\n\
    \            >>>-1\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n\
    \    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmglx5k_f.py\"\
    , line 8\n    choose_num(7, 10)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(7, 9)\n            >> 7\n            choose_num(7, 10)\n\
    \            >> -1\n            choose_num(7, 11)\n            >> -1\n       \
    \     choose_num(7, 12)\n            >> -1\n            choose_num(7, 13)\n  \
    \          >> -1\n            choose_num(7, 14)\n            >> -1\n         \
    \   choose_num(7, 15)\n            >> -1\n            choose_num(7, 16)\n    \
    \        >> -1\n            choose_num(7, 17)\n            >> -1\n           \
    \ choose_num(7, 18)\n            >> -1\n            choose_num(7, 19)\n      \
    \      >> -1\n            choose_num(7, 20)\n            >> -1\n            choose_num(7,\
    \ 21)\n            >> -1\n            choose_num(7, 22)\n            >> -1\n \
    \           choose_num(7, 23)\n            >> -1\n            choose_num(7, 24)\n\
    \            >> -1\n            choose_num(7, 25)\n            >> -1\n       \
    \     choose_num(7, 26)\n            >> -1\n            choose_num(7, 27)\n  \
    \          >> -1\n            choose_num(7, 28)\n            >> -1\n         \
    \   choose_num(7, 29)\n            >> -1\n            choose_num(7, 30)\n    \
    \        >> -1\n            choose_num(7, 31)\n            >> -1\n           \
    \ choose_num(7, 32)\n            >> -1\n            choose_num(7, 33)\n      \
    \      >> -1\n            choose_num(7, 34)\n            >> -1\n            choose_num(7,\
    \ 35)\n            >> -1\n            choose_num(7, 36)\n            >> -1\n \
    \           choose_num(7, 37)\n            >> -1\n            choose_num(7, 38)\n\
    \            >> -1\n            choose_num(7, 39)\n            >> -1\n       \
    \     choose_num(7, 40)\n            >> -1\n            choose_num(7, 41)\n  \
    \          >> -1\n            choose_num(7, 42)\n            >> -1\n         \
    \   choose_num(7, 43)\n            >> -1\n            choose_num(7, 44)\n    \
    \        >> -1\n            choose_num(7, 45)\n            >> -1\n           \
    \ choose_num(7, 46)\n            >> -1\n            choose_num(7, 47)\n      \
    \      >> -1\n            choose_num(7, 48)\n            >> -1\n            choose_num(7,\
    \ 49)\n            >> \ndef check(candidate):\n    assert candidate(12, 15) ==\
    \ 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf1a4moo7.py\"\
    , line 8\n    choose_num(7, 9)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(7, 10)\n            >>>10\n            choose_num(7, 8)\n\
    \            >>>8\n            choose_num(7, 9)\n            >>>-1\n         \
    \   choose_num(7, 11)\n            >>>-1\n            choose_num(7, 12)\n    \
    \        >>>-1\n            choose_num(7, 13)\n            >>>-1\n           \
    \ choose_num(7, 14)\n            >>>-1\n            choose_num(7, 15)\n      \
    \      >>>-1\n            choose_num(7, 16)\n            >>>-1\n            choose_num(7,\
    \ 17)\n            >>>-1\n            choose_num(7, 18)\n            >>>-1\n \
    \           choose_num(7, 19)\n            >>>-1\n            choose_num(7, 20)\n\
    \            >>>-1\n            choose_num(7, 21)\n            >>>-1\n       \
    \     choose_num(7, 22)\n            >>>-1\n            choose_num(7, 23)\n  \
    \          >>>-1\n            choose_num(7, 24)\n            >>>-1\n         \
    \   choose_num(7, 25)\n            >>>-1\n            choose_num(7, 26)\n    \
    \        >>>-1\n            choose_num(7, 27)\n            >>>-1\n           \
    \ choose_num(7, 28)\n            >>>-1\n            choose_num(7, 29)\n      \
    \      >>>-1\n            choose_num(7, 30)\n            >>>-1\n            choose_num(7,\
    \ 31)\n            >>>-1\n            choose_num(7, 32)\n            >>>-1\n \
    \           choose_num(7, 33)\n            >>>-1\n            choose_num(7, 34)\n\
    \            >>>-1\n            choose_num(7, 35)\n            >>>-1\n       \
    \     choose_num(7, 36)\n            >>>-1\n            choose_num(7, 37)\n  \
    \          >>>-1\n            choose_num(7, 38)\n            >>>-1\n         \
    \   choose_num(7, 39)\n            >>>-1\n            choose_num(7, 40)\n    \
    \        >>>-1\n            choose_num(7, 41)\n            >>>-1\n           \
    \ choose_num(7, 42)\n            >>>-1\n            choose_num(7, 43)\n      \
    \      >>>-1\n            choose_num(7, 44)\n            >>>-1\n            choose_num(7,\
    \ 45)\n            >>>-1\n            choose_num(7, 46)\n            >>>-1\n \
    \           choose_num(7, 47)\n            >>>-1\n            choose_num(7, 48)\n\
    \            >>>-1\ndef check(candidate):\n    assert candidate(12, 15) == 14\n\
    \    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3qbuoqru.py\"\
    , line 8\n    choose_num(7, 10)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(7, 10)\n            >>>10\n            choose_num(7, 12)\n\
    \            >>>10\n            choose_num(7, 11)\n            >>>-1\n       \
    \     choose_num(7, 13)\n            >>>-1\n            choose_num(7, 14)\n  \
    \          >>>-1\n            choose_num(7, 15)\n            >>>-1\n         \
    \   choose_num(7, 16)\n            >>>-1\n            choose_num(7, 17)\n    \
    \        >>>-1\n            choose_num(7, 18)\n            >>>-1\n           \
    \ choose_num(7, 19)\n            >>>-1\n            choose_num(7, 20)\n      \
    \      >>>-1\n            choose_num(7, 21)\n            >>>-1\n            choose_num(7,\
    \ 22)\n            >>>-1\n            choose_num(7, 23)\n            >>>-1\n \
    \           choose_num(7, 24)\n            >>>-1\n            choose_num(7, 25)\n\
    \            >>>-1\n            choose_num(7, 26)\n            >>>-1\n       \
    \     choose_num(7, 27)\n            >>>-1\n            choose_num(7, 28)\n  \
    \          >>>-1\n            choose_num(7, 29)\n            >>>-1\n         \
    \   choose_num(7, 30)\n            >>>-1\n            choose_num(7, 31)\n    \
    \        >>>-1\n            choose_num(7, 32)\n            >>>-1\n           \
    \ choose_num(7, 33)\n            >>>-1\n            choose_num(7, 34)\n      \
    \      >>>-1\n            choose_num(7, 35)\n            >>>-1\n            choose_num(7,\
    \ 36)\n            >>>-1\n            choose_num(7, 37)\n            >>>-1\n \
    \           choose_num(7, 38)\n            >>>-1\n            choose_num(7, 39)\n\
    \            >>>-1\n            choose_num(7, 40)\n            >>>-1\n       \
    \     choose_num(7, 41)\n            >>>-1\n            choose_num(7, 42)\n  \
    \          >>>-1\n            choose_num(7, 43)\n            >>>-1\n         \
    \   choose_num(7, 44)\n            >>>-1\n            choose_num(7, 45)\n    \
    \        >>>-1\n            choose_num(7, 46)\n            >>>-1\n           \
    \ choose_num(7, 47)\n            >>>-1\n            choose_num(7, 48)\n      \
    \      >>>-1\n            choose_num(7, 49)\n            >>>-1\n            choose_num(7,\
    \ 50)\n            >>>\ndef check(candidate):\n    assert candidate(12, 15) ==\
    \ 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsqdsqqom.py\"\
    , line 8\n    choose_num(7, 10)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(7, 10)\n            >>>8\n            choose_num(7, 11)\n\
    \            >>>-1\n            choose_num(7, 12)\n            >>>-1\n       \
    \     choose_num(7, 13)\n            >>>-1\n            choose_num(7, 14)\n  \
    \          >>>-1\n            choose_num(7, 15)\n            >>>-1\n         \
    \   choose_num(7, 16)\n            >>>-1\n            choose_num(7, 17)\n    \
    \        >>>-1\n            choose_num(7, 18)\n            >>>-1\n           \
    \ choose_num(7, 19)\n            >>>-1\n            choose_num(7, 20)\n      \
    \      >>>-1\n            choose_num(7, 21)\n            >>>-1\n            choose_num(7,\
    \ 22)\n            >>>-1\n            choose_num(7, 23)\n            >>>-1\n \
    \           choose_num(7, 24)\n            >>>-1\n            choose_num(7, 25)\n\
    \            >>>-1\n            choose_num(7, 26)\n            >>>-1\n       \
    \     choose_num(7, 27)\n            >>>-1\n            choose_num(7, 28)\n  \
    \          >>>-1\n            choose_num(7, 29)\n            >>>-1\n         \
    \   choose_num(7, 30)\n            >>>-1\n            choose_num(7, 31)\n    \
    \        >>>-1\n            choose_num(7, 32)\n            >>>-1\n           \
    \ choose_num(7, 33)\n            >>>-1\n            choose_num(7, 34)\n      \
    \      >>>-1\n            choose_num(7, 35)\n            >>>-1\n            choose_num(7,\
    \ 36)\n            >>>-1\n            choose_num(7, 37)\n            >>>-1\n \
    \           choose_num(7, 38)\n            >>>-1\n            choose_num(7, 39)\n\
    \            >>>-1\n            choose_num(7, 40)\n            >>>-1\n       \
    \     choose_num(7, 41)\n            >>>-1\n            choose_num(7, 42)\n  \
    \          >>>-1\n            choose_num(7, 43)\n            >>>-1\n         \
    \   choose_num(7, 44)\n            >>>-1\n            choose_num(7, 45)\n    \
    \        >>>-1\n            choose_num(7, 46)\n            >>>-1\n           \
    \ choose_num(7, 47)\n            >>>-1\n            choose_num(7, 48)\n      \
    \      >>>-1\n            choose_num(7, 49)\n            >>>-1\n            choose_num(7,\
    \ 50)\n            >>>\ndef check(candidate):\n    assert candidate(12, 15) ==\
    \ 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn0budmxq.py\"\
    , line 8\n    choose_num(7, 10)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(7, 10)\n            >>>7\n            choose_num(7, 11)\n\
    \            >>>-1\n            choose_num(7, 12)\n            >>>-1\n       \
    \     choose_num(7, 13)\n            >>>-1\n            choose_num(7, 14)\n  \
    \          >>>-1\n            choose_num(7, 15)\n            >>>-1\n         \
    \   choose_num(7, 16)\n            >>>-1\n            choose_num(7, 17)\n    \
    \        >>>-1\n            choose_num(7, 18)\n            >>>-1\n           \
    \ choose_num(7, 19)\n            >>>-1\n            choose_num(7, 20)\n      \
    \      >>>-1\n            choose_num(7, 21)\n            >>>-1\n            choose_num(7,\
    \ 22)\n            >>>-1\n            choose_num(7, 23)\n            >>>-1\n \
    \           choose_num(7, 24)\n            >>>-1\n            choose_num(7, 25)\n\
    \            >>>-1\n            choose_num(7, 26)\n            >>>-1\n       \
    \     choose_num(7, 27)\n            >>>-1\n            choose_num(7, 28)\n  \
    \          >>>-1\n            choose_num(7, 29)\n            >>>-1\n         \
    \   choose_num(7, 30)\n            >>>-1\n            choose_num(7, 31)\n    \
    \        >>>-1\n            choose_num(7, 32)\n            >>>-1\n           \
    \ choose_num(7, 33)\n            >>>-1\n            choose_num(7, 34)\n      \
    \      >>>-1\n            choose_num(7, 35)\n            >>>-1\n            choose_num(7,\
    \ 36)\n            >>>-1\n            choose_num(7, 37)\n            >>>-1\n \
    \           choose_num(7, 38)\n            >>>-1\n            choose_num(7, 39)\n\
    \            >>>-1\n            choose_num(7, 40)\n            >>>-1\n       \
    \     choose_num(7, 41)\n            >>>-1\n            choose_num(7, 42)\n  \
    \          >>>-1\n            choose_num(7, 43)\n            >>>-1\n         \
    \   choose_num(7, 44)\n            >>>-1\n            choose_num(7, 45)\n    \
    \        >>>-1\n            choose_num(7, 46)\n            >>>-1\n           \
    \ choose_num(7, 47)\n            >>>-1\n            choose_num(7, 48)\n      \
    \      >>>-1\n            choose_num(7, 49)\n            >>>-1\n            choose_num(7,\
    \ 50)\n            >>>\ndef check(candidate):\n    assert candidate(12, 15) ==\
    \ 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphg6_rn3s.py\"\
    , line 8\n    choose_num(7, 10)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(7, 10)\n            >>>7\n            choose_num(7, 11)\n\
    \            >>>-1\n            choose_num(7, 12)\n            >>>-1\n       \
    \     choose_num(7, 13)\n            >>>-1\n            choose_num(7, 14)\n  \
    \          >>>-1\n            choose_num(7, 15)\n            >>>-1\n         \
    \   choose_num(7, 16)\n            >>>-1\n            choose_num(7, 17)\n    \
    \        >>>-1\n            choose_num(7, 18)\n            >>>-1\n           \
    \ choose_num(7, 19)\n            >>>-1\n            choose_num(7, 20)\n      \
    \      >>>-1\n            choose_num(7, 21)\n            >>>-1\n            choose_num(7,\
    \ 22)\n            >>>-1\n            choose_num(7, 23)\n            >>>-1\n \
    \           choose_num(7, 24)\n            >>>-1\n            choose_num(7, 25)\n\
    \            >>>-1\n            choose_num(7, 26)\n            >>>-1\n       \
    \     choose_num(7, 27)\n            >>>-1\n            choose_num(7, 28)\n  \
    \          >>>-1\n            choose_num(7, 29)\n            >>>-1\n         \
    \   choose_num(7, 30)\n            >>>-1\n            choose_num(7, 31)\n    \
    \        >>>-1\n            choose_num(7, 32)\n            >>>-1\n           \
    \ choose_num(7, 33)\n            >>>-1\n            choose_num(7, 34)\n      \
    \      >>>-1\n            choose_num(7, 35)\n            >>>-1\n            choose_num(7,\
    \ 36)\n            >>>-1\n            choose_num(7, 37)\n            >>>-1\n \
    \           choose_num(7, 38)\n            >>>-1\n            choose_num(7, 39)\n\
    \            >>>-1\n            choose_num(7, 40)\n            >>>-1\n       \
    \     choose_num(7, 41)\n            >>>-1\n            choose_num(7, 42)\n  \
    \          >>>-1\n            choose_num(7, 43)\n            >>>-1\n         \
    \   choose_num(7, 44)\n            >>>-1\n            choose_num(7, 45)\n    \
    \        >>>-1\n            choose_num(7, 46)\n            >>>-1\n           \
    \ choose_num(7, 47)\n            >>>-1\n            choose_num(7, 48)\n      \
    \      >>>-1\n            choose_num(7, 49)\n            >>>-1\n            choose_num(7,\
    \ 50)\n            >>>\ndef check(candidate):\n    assert candidate(12, 15) ==\
    \ 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqefp76sx.py\"\
    , line 8\n    choose_num(7, 10)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(7, 12)\n            >>>12\n            choose_num(7, 13)\n\
    \            >>>-1\n            choose_num(7, 14)\n            >>>-1\n       \
    \     choose_num(7, 15)\n            >>>-1\n            choose_num(7, 16)\n  \
    \          >>>-1\n            choose_num(7, 17)\n            >>>-1\n         \
    \   choose_num(7, 18)\n            >>>-1\n            choose_num(7, 19)\n    \
    \        >>>-1\n            choose_num(7, 20)\n            >>>-1\n           \
    \ choose_num(7, 21)\n            >>>-1\n            choose_num(7, 22)\n      \
    \      >>>-1\n            choose_num(7, 23)\n            >>>-1\n            choose_num(7,\
    \ 24)\n            >>>-1\n            choose_num(7, 25)\n            >>>-1\n \
    \           choose_num(7, 26)\n            >>>-1\n            choose_num(7, 27)\n\
    \            >>>-1\n            choose_num(7, 28)\n            >>>-1\n       \
    \     choose_num(7, 29)\n            >>>-1\n            choose_num(7, 30)\n  \
    \          >>>-1\n            choose_num(7, 31)\n            >>>-1\n         \
    \   choose_num(7, 32)\n            >>>-1\n            choose_num(7, 33)\n    \
    \        >>>-1\n            choose_num(7, 34)\n            >>>-1\n           \
    \ choose_num(7, 35)\n            >>>-1\n            choose_num(7, 36)\n      \
    \      >>>-1\n            choose_num(7, 37)\n            >>>-1\n            choose_num(7,\
    \ 38)\n            >>>-1\n            choose_num(7, 39)\n            >>>-1\n \
    \           choose_num(7, 40)\n            >>>-1\n            choose_num(7, 41)\n\
    \            >>>-1\n            choose_num(7, 42)\n            >>>-1\n       \
    \     choose_num(7, 43)\n            >>>-1\n            choose_num(7, 44)\n  \
    \          >>>-1\n            choose_num(7, 45)\n            >>>-1\n         \
    \   choose_num(7, 46)\n            >>>-1\n            choose_num(7, 47)\n    \
    \        >>>-1\n            choose_num(7, 48)\n            >>>-1\n           \
    \ choose_num(7, 49)\n            >>>-1\n            choose_num(7, 50)\n      \
    \      >>>-1\n            choose_num(7, 51)\n            >>>-1\n            choose_num(7,\
    \ 52)\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert\
    \ candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert\
    \ candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27,\
    \ 10) == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546)\
    \ == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphss5v18n.py\"\
    , line 8\n    choose_num(7, 12)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(7, 10)\n            >> 7\n            \"\"\"\n    \"\"\"\n\
    \    if x > y:\n        x, y = y, x\n    \n    if x % 2 == 0:\n        if y %\
    \ 2 == 0:\n            return x\n        else:\n            return y\n    else:\n\
    \        if y % 2 == 0:\n            return y\n        else:\n            return\
    \ x\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnh0bly9j.py\"\
    , line 8\n    choose_num(7, 10)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(7, 8)\n            >>>8\n            choose_num(7, 9)\n \
    \           >>>-1\n            choose_num(7, 10)\n            >>>-1\n        \
    \    choose_num(7, 11)\n            >>>-1\n            choose_num(7, 12)\n   \
    \         >>>-1\n            choose_num(7, 13)\n            >>>-1\n          \
    \  choose_num(7, 14)\n            >>>-1\n            choose_num(7, 15)\n     \
    \       >>>-1\n            choose_num(7, 16)\n            >>>-1\n            choose_num(7,\
    \ 17)\n            >>>-1\n            choose_num(7, 18)\n            >>>-1\n \
    \           choose_num(7, 19)\n            >>>-1\n            choose_num(7, 20)\n\
    \            >>>-1\n            choose_num(7, 21)\n            >>>-1\n       \
    \     choose_num(7, 22)\n            >>>-1\n            choose_num(7, 23)\n  \
    \          >>>-1\n            choose_num(7, 24)\n            >>>-1\n         \
    \   choose_num(7, 25)\n            >>>-1\n            choose_num(7, 26)\n    \
    \        >>>-1\n            choose_num(7, 27)\n            >>>-1\n           \
    \ choose_num(7, 28)\n            >>>-1\n            choose_num(7, 29)\n      \
    \      >>>-1\n            choose_num(7, 30)\n            >>>-1\n            choose_num(7,\
    \ 31)\n            >>>-1\n            choose_num(7, 32)\n            >>>-1\n \
    \           choose_num(7, 33)\n            >>>-1\n            choose_num(7, 34)\n\
    \            >>>-1\n            choose_num(7, 35)\n            >>>-1\n       \
    \     choose_num(7, 36)\n            >>>-1\n            choose_num(7, 37)\n  \
    \          >>>-1\n            choose_num(7, 38)\n            >>>-1\n         \
    \   choose_num(7, 39)\n            >>>-1\n            choose_num(7, 40)\n    \
    \        >>>-1\n            choose_num(7, 41)\n            >>>-1\n           \
    \ choose_num(7, 42)\n            >>>-1\n            choose_num(7, 43)\n      \
    \      >>>-1\n            choose_num(7, 44)\n            >>>-1\n            choose_num(7,\
    \ 45)\n            >>>-1\n            choose_num(7, 46)\n            >>>-1\n \
    \           choose_num(7, 47)\n            >>>-1\n            choose_num(7, 48)\n\
    \            >>>-1\ndef check(candidate):\n    assert candidate(12, 15) == 14\n\
    \    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbqj4nzz6.py\"\
    , line 8\n    choose_num(7, 8)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(7, 9)\n            choose_num(7, 10)\n            choose_num(7,\
    \ 11)\n            choose_num(7, 12)\n            choose_num(7, 13)\n        \
    \    choose_num(7, 14)\n            choose_num(7, 15)\n            choose_num(7,\
    \ 16)\n            choose_num(7, 17)\n            choose_num(7, 18)\n        \
    \    choose_num(7, 19)\n            choose_num(7, 20)\n            choose_num(7,\
    \ 21)\n            choose_num(7, 22)\n            choose_num(7, 23)\n        \
    \    choose_num(7, 24)\n            choose_num(7, 25)\n            choose_num(7,\
    \ 26)\n            choose_num(7, 27)\n            choose_num(7, 28)\n        \
    \    choose_num(7, 29)\n            choose_num(7, 30)\n            choose_num(7,\
    \ 31)\n            choose_num(7, 32)\n            choose_num(7, 33)\n        \
    \    choose_num(7, 34)\n            choose_num(7, 35)\n            choose_num(7,\
    \ 36)\n            choose_num(7, 37)\n            choose_num(7, 38)\n        \
    \    choose_num(7, 39)\n            choose_num(7, 40)\n            choose_num(7,\
    \ 41)\n            choose_num(7, 42)\n            choose_num(7, 43)\n        \
    \    choose_num(7, 44)\n            choose_num(7, 45)\n            choose_num(7,\
    \ 46)\n            choose_num(7, 47)\n            choose_num(7, 48)\n        \
    \    choose_num(7, 49)\n            choose_num(7, 50)\n            choose_num(7,\
    \ 51)\n            choose_num(7, 52)\n            choose_num(7, 53)\n        \
    \    choose_num(7, 54)\n            choose_num(7, 55)\n            choose_num(7,\
    \ 56)\n            choose_num(7, 57)\n            choose_num(7, 58)\n        \
    \    choose_num(7, 59)\n            choose_num(7, 60)\n            choose_num(7,\
    \ 61)\n            choose_num(7, 62)\n            choose_num(7, 63)\n        \
    \    choose_num(7, 64)\n            choose_num(7, 65)\n            choose_num(7,\
    \ 66)\n            choose_num(7, 67)\n            choose_\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptpdvw5qm.py\"\
    , line 8\n    choose_num(7, 9)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(7, 3)\n            >> 6\n            choose_num(7, 4)\n \
    \           >> -1\n            choose_num(7, 5)\n            >> -1\n         \
    \   choose_num(7, 6)\n            >> -1\n            choose_num(7, 7)\n      \
    \      >> 7\n            choose_num(7, 8)\n            >> -1\n            choose_num(7,\
    \ 9)\n            >> -1\n            choose_num(7, 10)\n            >> -1\n  \
    \          choose_num(7, 11)\n            >> -1\n            choose_num(7, 12)\n\
    \            >> -1\n            choose_num(7, 13)\n            >> -1\n       \
    \     choose_num(7, 14)\n            >> -1\n            choose_num(7, 15)\n  \
    \          >> -1\n            choose_num(7, 16)\n            >> -1\n         \
    \   choose_num(7, 17)\n            >> -1\n            choose_num(7, 18)\n    \
    \        >> -1\n            choose_num(7, 19)\n            >> -1\n           \
    \ choose_num(7, 20)\n            >> -1\n            choose_num(7, 21)\n      \
    \      >> -1\n            choose_num(7, 22)\n            >> -1\n            choose_num(7,\
    \ 23)\n            >> -1\n            choose_num(7, 24)\n            >> -1\n \
    \           choose_num(7, 25)\n            >> -1\n            choose_num(7, 26)\n\
    \            >> -1\n            choose_num(7, 27)\n            >> -1\n       \
    \     choose_num(7, 28)\n            >> -1\n            choose_num(7, 29)\n  \
    \          >> -1\n            choose_num(7, 30)\n            >> -1\n         \
    \   choose_num(7, 31)\n            >> -1\n            choose_num(7, 32)\n    \
    \        >> -1\n            choose_num(7, 33)\n            >> -1\n           \
    \ choose_num(7, 34)\n            >> -1\n            choose_num(7, 35)\n      \
    \      >> -1\n            choose_num(7, 36)\n            >> -1\n            choose_num(7,\
    \ 37)\n            >> -1\n            choose_num(7, 38)\n            >> -1\n \
    \           choose_num(7, 39)\n            >> -1\n            choose_num(7, 40)\n\
    \            >> -1\n            choose_num(7, 41)\n            >> -1\n       \
    \     choose_num(7, 42)\n            >> -1\n            choose_num(7, 43)\n  \
    \          >> -1\n            choose_num\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpogftvtl4.py\"\
    , line 8\n    choose_num(7, 3)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(7, 9)\n            >> 7\n            choose_num(7, 10)\n\
    \            >> -1\n            choose_num(7, 11)\n            >> -1\n       \
    \     choose_num(7, 12)\n            >> -1\n            choose_num(7, 13)\n  \
    \          >> -1\n            choose_num(7, 14)\n            >> -1\n         \
    \   choose_num(7, 15)\n            >> -1\n            choose_num(7, 16)\n    \
    \        >> -1\n            choose_num(7, 17)\n            >> -1\n           \
    \ choose_num(7, 18)\n            >> -1\n            choose_num(7, 19)\n      \
    \      >> -1\n            choose_num(7, 20)\n            >> -1\n            choose_num(7,\
    \ 21)\n            >> -1\n            choose_num(7, 22)\n            >> -1\n \
    \           choose_num(7, 23)\n            >> -1\n            choose_num(7, 24)\n\
    \            >> -1\n            choose_num(7, 25)\n            >> -1\n       \
    \     choose_num(7, 26)\n            >> -1\n            choose_num(7, 27)\n  \
    \          >> -1\n            choose_num(7, 28)\n            >> -1\n         \
    \   choose_num(7, 29)\n            >> -1\n            choose_num(7, 30)\n    \
    \        >> -1\n            choose_num(7, 31)\n            >> -1\n           \
    \ choose_num(7, 32)\n            >> -1\n            choose_num(7, 33)\n      \
    \      >> -1\n            choose_num(7, 34)\n            >> -1\n            choose_num(7,\
    \ 35)\n            >> -1\n            choose_num(7, 36)\n            >> -1\n \
    \           choose_num(7, 37)\n            >> -1\n            choose_num(7, 38)\n\
    \            >> -1\n            choose_num(7, 39)\n            >> -1\n       \
    \     choose_num(7, 40)\n            >> -1\n            choose_num(7, 41)\n  \
    \          >> -1\n            choose_num(7, 42)\n            >> -1\n         \
    \   choose_num(7, 43)\n            >> -1\n            choose_num(7, 44)\n    \
    \        >> -1\n            choose_num(7, 45)\n            >> -1\n           \
    \ choose_num(7, 46)\n            >> -1\n            choose_num(7, 47)\n      \
    \      >> -1\n            choose_num(7, 48)\n            >> -1\n            choose_num(7,\
    \ 49)\n            >> \ndef check(candidate):\n    assert candidate(12, 15) ==\
    \ 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp427uaoes.py\"\
    , line 8\n    choose_num(7, 9)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(7, 8)\n            >>>8\n            choose_num(7, 9)\n \
    \           >>>-1\n            choose_num(7, 10)\n            >>>-1\n        \
    \    choose_num(7, 11)\n            >>>-1\n            choose_num(7, 12)\n   \
    \         >>>-1\n            choose_num(7, 13)\n            >>>-1\n          \
    \  choose_num(7, 14)\n            >>>-1\n            choose_num(7, 15)\n     \
    \       >>>-1\n            choose_num(7, 16)\n            >>>-1\n            choose_num(7,\
    \ 17)\n            >>>-1\n            choose_num(7, 18)\n            >>>-1\n \
    \           choose_num(7, 19)\n            >>>-1\n            choose_num(7, 20)\n\
    \            >>>-1\n            choose_num(7, 21)\n            >>>-1\n       \
    \     choose_num(7, 22)\n            >>>-1\n            choose_num(7, 23)\n  \
    \          >>>-1\n            choose_num(7, 24)\n            >>>-1\n         \
    \   choose_num(7, 25)\n            >>>-1\n            choose_num(7, 26)\n    \
    \        >>>-1\n            choose_num(7, 27)\n            >>>-1\n           \
    \ choose_num(7, 28)\n            >>>-1\n            choose_num(7, 29)\n      \
    \      >>>-1\n            choose_num(7, 30)\n            >>>-1\n            choose_num(7,\
    \ 31)\n            >>>-1\n            choose_num(7, 32)\n            >>>-1\n \
    \           choose_num(7, 33)\n            >>>-1\n            choose_num(7, 34)\n\
    \            >>>-1\n            choose_num(7, 35)\n            >>>-1\n       \
    \     choose_num(7, 36)\n            >>>-1\n            choose_num(7, 37)\n  \
    \          >>>-1\n            choose_num(7, 38)\n            >>>-1\n         \
    \   choose_num(7, 39)\n            >>>-1\n            choose_num(7, 40)\n    \
    \        >>>-1\n            choose_num(7, 41)\n            >>>-1\n           \
    \ choose_num(7, 42)\n            >>>-1\n            choose_num(7, 43)\n      \
    \      >>>-1\n            choose_num(7, 44)\n            >>>-1\n            choose_num(7,\
    \ 45)\n            >>>-1\n            choose_num(7, 46)\n            >>>-1\n \
    \           choose_num(7, 47)\n            >>>-1\n            choose_num(7, 48)\n\
    \            >>>-1\ndef check(candidate):\n    assert candidate(12, 15) == 14\n\
    \    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptl1wm8fx.py\"\
    , line 8\n    choose_num(7, 8)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(7, 9)\n            >>>7\n            choose_num(7, 10)\n\
    \            >>>-1\n            choose_num(7, 11)\n            >>>-1\n       \
    \     choose_num(7, 12)\n            >>>-1\n            choose_num(7, 13)\n  \
    \          >>>-1\n            choose_num(7, 14)\n            >>>-1\n         \
    \   choose_num(7, 15)\n            >>>-1\n            choose_num(7, 16)\n    \
    \        >>>-1\n            choose_num(7, 17)\n            >>>-1\n           \
    \ choose_num(7, 18)\n            >>>-1\n            choose_num(7, 19)\n      \
    \      >>>-1\n            choose_num(7, 20)\n            >>>-1\n            choose_num(7,\
    \ 21)\n            >>>-1\n            choose_num(7, 22)\n            >>>-1\n \
    \           choose_num(7, 23)\n            >>>-1\n            choose_num(7, 24)\n\
    \            >>>-1\n            choose_num(7, 25)\n            >>>-1\n       \
    \     choose_num(7, 26)\n            >>>-1\n            choose_num(7, 27)\n  \
    \          >>>-1\n            choose_num(7, 28)\n            >>>-1\n         \
    \   choose_num(7, 29)\n            >>>-1\n            choose_num(7, 30)\n    \
    \        >>>-1\n            choose_num(7, 31)\n            >>>-1\n           \
    \ choose_num(7, 32)\n            >>>-1\n            choose_num(7, 33)\n      \
    \      >>>-1\n            choose_num(7, 34)\n            >>>-1\n            choose_num(7,\
    \ 35)\n            >>>-1\n            choose_num(7, 36)\n            >>>-1\n \
    \           choose_num(7, 37)\n            >>>-1\n            choose_num(7, 38)\n\
    \            >>>-1\n            choose_num(7, 39)\n            >>>-1\n       \
    \     choose_num(7, 40)\n            >>>-1\n            choose_num(7, 41)\n  \
    \          >>>-1\n            choose_num(7, 42)\n            >>>-1\n         \
    \   choose_num(7, 43)\n            >>>-1\n            choose_num(7, 44)\n    \
    \        >>>-1\n            choose_num(7, 45)\n            >>>-1\n           \
    \ choose_num(7, 46)\n            >>>-1\n            choose_num(7, 47)\n      \
    \      >>>-1\n            choose_num(7, 48)\n            >>>-1\n            choose_num(7,\
    \ 49)\n            >>>\ndef check(candidate):\n    assert candidate(12, 15) ==\
    \ 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6ha0brhh.py\"\
    , line 8\n    choose_num(7, 9)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(7, 9)\n            >>>8\n            choose_num(7, 10)\n\
    \            >>>-1\n            choose_num(7, 11)\n            >>>-1\n       \
    \     choose_num(7, 12)\n            >>>-1\n            choose_num(7, 13)\n  \
    \          >>>-1\n            choose_num(7, 14)\n            >>>-1\n         \
    \   choose_num(7, 15)\n            >>>-1\n            choose_num(7, 16)\n    \
    \        >>>-1\n            choose_num(7, 17)\n            >>>-1\n           \
    \ choose_num(7, 18)\n            >>>-1\n            choose_num(7, 19)\n      \
    \      >>>-1\n            choose_num(7, 20)\n            >>>-1\n            choose_num(7,\
    \ 21)\n            >>>-1\n            choose_num(7, 22)\n            >>>-1\n \
    \           choose_num(7, 23)\n            >>>-1\n            choose_num(7, 24)\n\
    \            >>>-1\n            choose_num(7, 25)\n            >>>-1\n       \
    \     choose_num(7, 26)\n            >>>-1\n            choose_num(7, 27)\n  \
    \          >>>-1\n            choose_num(7, 28)\n            >>>-1\n         \
    \   choose_num(7, 29)\n            >>>-1\n            choose_num(7, 30)\n    \
    \        >>>-1\n            choose_num(7, 31)\n            >>>-1\n           \
    \ choose_num(7, 32)\n            >>>-1\n            choose_num(7, 33)\n      \
    \      >>>-1\n            choose_num(7, 34)\n            >>>-1\n            choose_num(7,\
    \ 35)\n            >>>-1\n            choose_num(7, 36)\n            >>>-1\n \
    \           choose_num(7, 37)\n            >>>-1\n            choose_num(7, 38)\n\
    \            >>>-1\n            choose_num(7, 39)\n            >>>-1\n       \
    \     choose_num(7, 40)\n            >>>-1\n            choose_num(7, 41)\n  \
    \          >>>-1\n            choose_num(7, 42)\n            >>>-1\n         \
    \   choose_num(7, 43)\n            >>>-1\n            choose_num(7, 44)\n    \
    \        >>>-1\n            choose_num(7, 45)\n            >>>-1\n           \
    \ choose_num(7, 46)\n            >>>-1\n            choose_num(7, 47)\n      \
    \      >>>-1\n            choose_num(7, 48)\n            >>>-1\n            choose_num(7,\
    \ 49)\n            >>>\ndef check(candidate):\n    assert candidate(12, 15) ==\
    \ 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgogtrr0v.py\"\
    , line 8\n    choose_num(7, 9)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(7, 9)\n            >>>8\n            choose_num(7, 10)\n\
    \            >>>-1\n            choose_num(7, 11)\n            >>>-1\n       \
    \     choose_num(7, 12)\n            >>>-1\n            choose_num(7, 13)\n  \
    \          >>>-1\n            choose_num(7, 14)\n            >>>-1\n         \
    \   choose_num(7, 15)\n            >>>-1\n            choose_num(7, 16)\n    \
    \        >>>-1\n            choose_num(7, 17)\n            >>>-1\n           \
    \ choose_num(7, 18)\n            >>>-1\n            choose_num(7, 19)\n      \
    \      >>>-1\n            choose_num(7, 20)\n            >>>-1\n            choose_num(7,\
    \ 21)\n            >>>-1\n            choose_num(7, 22)\n            >>>-1\n \
    \           choose_num(7, 23)\n            >>>-1\n            choose_num(7, 24)\n\
    \            >>>-1\n            choose_num(7, 25)\n            >>>-1\n       \
    \     choose_num(7, 26)\n            >>>-1\n            choose_num(7, 27)\n  \
    \          >>>-1\n            choose_num(7, 28)\n            >>>-1\n         \
    \   choose_num(7, 29)\n            >>>-1\n            choose_num(7, 30)\n    \
    \        >>>-1\n            choose_num(7, 31)\n            >>>-1\n           \
    \ choose_num(7, 32)\n            >>>-1\n            choose_num(7, 33)\n      \
    \      >>>-1\n            choose_num(7, 34)\n            >>>-1\n            choose_num(7,\
    \ 35)\n            >>>-1\n            choose_num(7, 36)\n            >>>-1\n \
    \           choose_num(7, 37)\n            >>>-1\n            choose_num(7, 38)\n\
    \            >>>-1\n            choose_num(7, 39)\n            >>>-1\n       \
    \     choose_num(7, 40)\n            >>>-1\n            choose_num(7, 41)\n  \
    \          >>>-1\n            choose_num(7, 42)\n            >>>-1\n         \
    \   choose_num(7, 43)\n            >>>-1\n            choose_num(7, 44)\n    \
    \        >>>-1\n            choose_num(7, 45)\n            >>>-1\n           \
    \ choose_num(7, 46)\n            >>>-1\n            choose_num(7, 47)\n      \
    \      >>>-1\n            choose_num(7, 48)\n            >>>-1\n            choose_num(7,\
    \ 49)\n            >>>\ndef check(candidate):\n    assert candidate(12, 15) ==\
    \ 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdqv99445.py\"\
    , line 8\n    choose_num(7, 9)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(7, 10)\n            >>>10\n            choose_num(7, 11)\n\
    \            >>>-1\n            choose_num(7, 12)\n            >>>-1\n       \
    \     choose_num(7, 13)\n            >>>-1\n            choose_num(7, 14)\n  \
    \          >>>-1\n            choose_num(7, 15)\n            >>>-1\n         \
    \   choose_num(7, 16)\n            >>>-1\n            choose_num(7, 17)\n    \
    \        >>>-1\n            choose_num(7, 18)\n            >>>-1\n           \
    \ choose_num(7, 19)\n            >>>-1\n            choose_num(7, 20)\n      \
    \      >>>-1\n            choose_num(7, 21)\n            >>>-1\n            choose_num(7,\
    \ 22)\n            >>>-1\n            choose_num(7, 23)\n            >>>-1\n \
    \           choose_num(7, 24)\n            >>>-1\n            choose_num(7, 25)\n\
    \            >>>-1\n            choose_num(7, 26)\n            >>>-1\n       \
    \     choose_num(7, 27)\n            >>>-1\n            choose_num(7, 28)\n  \
    \          >>>-1\n            choose_num(7, 29)\n            >>>-1\n         \
    \   choose_num(7, 30)\n            >>>-1\n            choose_num(7, 31)\n    \
    \        >>>-1\n            choose_num(7, 32)\n            >>>-1\n           \
    \ choose_num(7, 33)\n            >>>-1\n            choose_num(7, 34)\n      \
    \      >>>-1\n            choose_num(7, 35)\n            >>>-1\n            choose_num(7,\
    \ 36)\n            >>>-1\n            choose_num(7, 37)\n            >>>-1\n \
    \           choose_num(7, 38)\n            >>>-1\n            choose_num(7, 39)\n\
    \            >>>-1\n            choose_num(7, 40)\n            >>>-1\n       \
    \     choose_num(7, 41)\n            >>>-1\n            choose_num(7, 42)\n  \
    \          >>>-1\n            choose_num(7, 43)\n            >>>-1\n         \
    \   choose_num(7, 44)\n            >>>-1\n            choose_num(7, 45)\n    \
    \        >>>-1\n            choose_num(7, 46)\n            >>>-1\n           \
    \ choose_num(7, 47)\n            >>>-1\n            choose_num(7, 48)\n      \
    \      >>>-1\n            choose_num(7, 49)\n            >>>-1\n            choose_num(7,\
    \ 50)\n            >>>\ndef check(candidate):\n    assert candidate(12, 15) ==\
    \ 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp97_8p4gj.py\"\
    , line 8\n    choose_num(7, 10)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(7, 10)\n            >>>8\n            choose_num(7, 11)\n\
    \            >>>-1\n            \"\"\"\n    \"\"\"\n    if x >= y:\n        return\
    \ -1\n    \n    even = x % 2 == 0\n    \n    if even:\n        \n        if x\
    \ % 4 == 0:\n            return x\n        elif x % 8 == 0:\n            return\
    \ y\n        else:\n            return -1\n    else:\n        \n        if y %\
    \ 4 == 0:\n            return y\n        elif y % 8 == 0:\n            return\
    \ x\n        else:\n            return -1\n\ndef check(candidate):\n    assert\
    \ candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33,\
    \ 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6,\
    \ 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) ==\
    \ -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5l1la1m3.py\"\
    , line 8\n    choose_num(7, 10)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(7, 12)\n            >>>12\n            choose_num(7, 11)\n\
    \            >>>-1\n            choose_num(7, 10)\n            >>>-1\n       \
    \     choose_num(7, 8)\n            >>>-1\n            choose_num(7, 7)\n    \
    \        >>>-1\n            choose_num(7, 6)\n            >>>-1\n            choose_num(7,\
    \ 5)\n            >>>-1\n            choose_num(7, 4)\n            >>>-1\n   \
    \         choose_num(7, 3)\n            >>>-1\n            choose_num(7, 2)\n\
    \            >>>-1\n            choose_num(7, 1)\n            >>>-1\n        \
    \    choose_num(7, 0)\n            >>>-1\n            choose_num(6, 12)\n    \
    \        >>>12\n            choose_num(6, 11)\n            >>>-1\n           \
    \ choose_num(6, 10)\n            >>>-1\n            choose_num(6, 8)\n       \
    \     >>>-1\n            choose_num(6, 7)\n            >>>-1\n            choose_num(6,\
    \ 6)\n            >>>-1\n            choose_num(6, 5)\n            >>>-1\n   \
    \         choose_num(6, 4)\n            >>>-1\n            choose_num(6, 3)\n\
    \            >>>-1\n            choose_num(6, 2)\n            >>>-1\n        \
    \    choose_num(6, 1)\n            >>>-1\n            choose_num(6, 0)\n     \
    \       >>>-1\n            choose_num(5, 12)\n            >>>12\n            choose_num(5,\
    \ 11)\n            >>>-1\n            choose_num(5, 10)\n            >>>-1\n \
    \           choose_num(5, 8)\n            >>>-1\n            choose_num(5, 7)\n\
    \            >>>-1\n            choose_num(5, 6)\n            >>>-1\n        \
    \    choose_num(5, 5)\n            >>>-1\n            choose_num(5, 4)\n     \
    \       >>>-1\n            choose_num(5, 3)\n            >>>-1\n            choose_num(5,\
    \ 2)\n            >>>-1\n            choose_num(5, 1)\n            >>>-1\n   \
    \         choose_num(5, 0)\n            >>>-1\n            choose_num(4, 12)\n\
    \            >>>12\n            choose_num(4, 11)\n            >>>-1\n       \
    \     choose_num(4, 10)\n            >>>-1\n            choose_num(4, 8)\n   \
    \         >>>-1\n            choose_num(4, 7)\n            >>>-1\n           \
    \ choose_num(4, 6)\n            >>>-1\n            choose_num(4, 5)\n        \
    \    >>>-1\n            choose_num(4, 4)\n            >>>-1\n            choose_num\n\
    def check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpormq2l39.py\"\
    , line 8\n    choose_num(7, 12)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(3,5)\n            choose_num(3,5)\n            choose_num(3,5)\n\
    \            choose_num(3,5)\n            choose_num(3,5)\n            choose_num(3,5)\n\
    \            choose_num(3,5)\n            choose_num(3,5)\n            choose_num(3,5)\n\
    \            choose_num(3,5)\n            choose_num(3,5)\n            choose_num(3,5)\n\
    \            choose_num(3,5)\n            choose_num(3,5)\n            choose_num(3,5)\n\
    \            choose_num(3,5)\n            choose_num(3,5)\n            choose_num(3,5)\n\
    \            choose_num(3,5)\n            choose_num(3,5)\n            choose_num(3,5)\n\
    \            choose_num(3,5)\n            choose_num(3,5)\n            choose_num(3,5)\n\
    \            choose_num(3,5)\n            choose_num(3,5)\n            choose_num(3,5)\n\
    \            choose_num(3,5)\n            choose_num(3,5)\n            choose_num(3,5)\n\
    \            choose_num(3,5)\n            choose_num(3,5)\n            choose_num(3,5)\n\
    \            choose_num(3,5)\n            choose_num(3,5)\n            choose_num(3,5)\n\
    \            choose_num(3,5)\n            choose_num(3,5)\n            choose_num(3,5)\n\
    \            choose_num(3,5)\n            choose_num(3,5)\n            choose_num(3,5)\n\
    \            choose_num(3,5)\n            choose_num(3,5)\n            choose_num(3,5)\n\
    \            choose_num(3,5)\n            choose_num(3,5)\n            choose_num(3,5)\n\
    \            choose_num(3,5)\n            choose_num(3,5)\n            choose_num(3,5)\n\
    \            choose_num(3,5)\n            choose_num(3,5)\n            choose_num(3,5)\n\
    \            choose_num(3,5)\n            choose_num(3,5)\n            choose_num(3,5)\n\
    \            choose_num(3,5)\n            choose_num(3,5)\n            choose_num(3,5)\n\
    \            choose_num(3,5)\n            choose_num(3,5)\n            choose_num(3,5)\n\
    \            choose_num(3,5)\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwl8383z1.py\"\
    , line 8\n    choose_num(3,5)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(3,4)\n            choose_num(3,5)\n            choose_num(3,6)\n\
    \            choose_num(3,7)\n            choose_num(3,8)\n            choose_num(3,9)\n\
    \            choose_num(4,10)\n            choose_num(4,11)\n            choose_num(4,12)\n\
    \            choose_num(4,13)\n            choose_num(4,14)\n            choose_num(4,15)\n\
    \            choose_num(4,16)\n            choose_num(4,17)\n            choose_num(4,18)\n\
    \            choose_num(4,19)\n            choose_num(4,20)\n            choose_num(4,21)\n\
    \            choose_num(4,22)\n            choose_num(4,23)\n            choose_num(4,24)\n\
    \            choose_num(4,25)\n            choose_num(4,26)\n            choose_num(4,27)\n\
    \            choose_num(4,28)\n            choose_num(4,29)\n            choose_num(4,30)\n\
    \            choose_num(4,31)\n            choose_num(4,32)\n            choose_num(4,33)\n\
    \            choose_num(4,34)\n            choose_num(4,35)\n            choose_num(4,36)\n\
    \            choose_num(4,37)\n            choose_num(4,38)\n            choose_num(4,39)\n\
    \            choose_num(4,40)\n            choose_num(4,41)\n            choose_num(4,42)\n\
    \            choose_num(4,43)\n            choose_num(4,44)\n            choose_num(4,45)\n\
    \            choose_num(4,46)\n            choose_num(4,47)\n            choose_num(4,48)\n\
    \            choose_num(4,49)\n            choose_num(4,50)\n            choose_num(4,51)\n\
    \            choose_num(4,52)\n            choose_num(4,53)\n            choose_num(4,54)\n\
    \            choose_num(4,55)\n            choose_num(4,56)\n            choose_num(4,57)\n\
    \            choose_num(4,58)\n            choose_num(4,59)\n            choose_num(4,60)\n\
    \            choose_num(4,61)\n            choose_num(4,62)\n            choose_num(4,63\n\
    def check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8c908mr7.py\"\
    , line 8\n    choose_num(3,4)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \ >>> choose_num(7, 10)\n    7\n    >>> choose_num(7, 9)\n    7\n    >>> choose_num(7,\
    \ 11)\n    -1\n    >>> choose_num(7, 12)\n    -1\n    \"\"\"\n    if x > y:\n\
    \        x, y = y, x\n    if x % 2 == 0:\n        if y % 2 == 0:\n           \
    \ return x\n        else:\n            return y\n    else:\n        if y % 2 ==\
    \ 0:\n            return y\n        else:\n            return x\n\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf8mzb16d.py\"\
    , line 16\n    \"\"\"\n    ^\nSyntaxError: unterminated triple-quoted string literal\
    \ (detected at line 44)\n"
  exit_code: 1
  status: SyntaxError
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(7, 10)\n            >>>8\n            choose_num(7, 12)\n\
    \            >>>8\n            choose_num(7, 13)\n            >>>-1\n        \
    \    choose_num(7, 14)\n            >>>-1\n            choose_num(7, 15)\n   \
    \         >>>-1\n            choose_num(7, 16)\n            >>>-1\n          \
    \  choose_num(7, 17)\n            >>>-1\n            choose_num(7, 18)\n     \
    \       >>>-1\n            choose_num(7, 19)\n            >>>-1\n            choose_num(7,\
    \ 20)\n            >>>-1\n            choose_num(7, 21)\n            >>>-1\n \
    \           choose_num(7, 22)\n            >>>-1\n            choose_num(7, 23)\n\
    \            >>>-1\n            choose_num(7, 24)\n            >>>-1\n       \
    \     choose_num(7, 25)\n            >>>-1\n            choose_num(7, 26)\n  \
    \          >>>-1\n            choose_num(7, 27)\n            >>>-1\n         \
    \   choose_num(7, 28)\n            >>>-1\n            choose_num(7, 29)\n    \
    \        >>>-1\n            choose_num(7, 30)\n            >>>-1\n           \
    \ choose_num(7, 31)\n            >>>-1\n            choose_num(7, 32)\n      \
    \      >>>-1\n            choose_num(7, 33)\n            >>>-1\n            choose_num(7,\
    \ 34)\n            >>>-1\n            choose_num(7, 35)\n            >>>-1\n \
    \           choose_num(7, 36)\n            >>>-1\n            choose_num(7, 37)\n\
    \            >>>-1\n            choose_num(7, 38)\n            >>>-1\n       \
    \     choose_num(7, 39)\n            >>>-1\n            choose_num(7, 40)\n  \
    \          >>>-1\n            choose_num(7, 41)\n            >>>-1\n         \
    \   choose_num(7, 42)\n            >>>-1\n            choose_num(7, 43)\n    \
    \        >>>-1\n            choose_num(7, 44)\n            >>>-1\n           \
    \ choose_num(7, 45)\n            >>>-1\n            choose_num(7, 46)\n      \
    \      >>>-1\n            choose_num(7, 47)\n            >>>-1\n            choose_num(7,\
    \ 48)\n            >>>-1\n            choose_num(7, 49)\n            >>>-1\n \
    \           choose_num(7, 50)\n            >>>-1\n            choose_num(7, 51)\n\
    \            \ndef check(candidate):\n    assert candidate(12, 15) == 14\n   \
    \ assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n \
    \   assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n  \
    \  assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpi8i7z5g7.py\"\
    , line 8\n    choose_num(7, 10)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(7, 9)\n            >>>9\n            choose_num(7, 10)\n\
    \            >>>-1\n            choose_num(7, 11)\n            >>>-1\n       \
    \     choose_num(7, 12)\n            >>>-1\n            choose_num(7, 13)\n  \
    \          >>>-1\n            choose_num(7, 14)\n            >>>-1\n         \
    \   choose_num(7, 15)\n            >>>-1\n            choose_num(7, 16)\n    \
    \        >>>-1\n            choose_num(7, 17)\n            >>>-1\n           \
    \ choose_num(7, 18)\n            >>>-1\n            choose_num(7, 19)\n      \
    \      >>>-1\n            choose_num(7, 20)\n            >>>-1\n            choose_num(7,\
    \ 21)\n            >>>-1\n            choose_num(7, 22)\n            >>>-1\n \
    \           choose_num(7, 23)\n            >>>-1\n            choose_num(7, 24)\n\
    \            >>>-1\n            choose_num(7, 25)\n            >>>-1\n       \
    \     choose_num(7, 26)\n            >>>-1\n            choose_num(7, 27)\n  \
    \          >>>-1\n            choose_num(7, 28)\n            >>>-1\n         \
    \   choose_num(7, 29)\n            >>>-1\n            choose_num(7, 30)\n    \
    \        >>>-1\n            choose_num(7, 31)\n            >>>-1\n           \
    \ choose_num(7, 32)\n            >>>-1\n            choose_num(7, 33)\n      \
    \      >>>-1\n            choose_num(7, 34)\n            >>>-1\n            choose_num(7,\
    \ 35)\n            >>>-1\n            choose_num(7, 36)\n            >>>-1\n \
    \           choose_num(7, 37)\n            >>>-1\n            choose_num(7, 38)\n\
    \            >>>-1\n            choose_num(7, 39)\n            >>>-1\n       \
    \     choose_num(7, 40)\n            >>>-1\n            choose_num(7, 41)\n  \
    \          >>>-1\n            choose_num(7, 42)\n            >>>-1\n         \
    \   choose_num(7, 43)\n            >>>-1\n            choose_num(7, 44)\n    \
    \        >>>-1\n            choose_num(7, 45)\n            >>>-1\n           \
    \ choose_num(7, 46)\n            >>>-1\n            choose_num(7, 47)\n      \
    \      >>>-1\n            choose_num(7, 48)\n            >>>-1\n            choose_num(7,\
    \ 49)\n            >>>\ndef check(candidate):\n    assert candidate(12, 15) ==\
    \ 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvqhddcgq.py\"\
    , line 8\n    choose_num(7, 9)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(3,5)\n            choose_num(3,4)\n            choose_num(3,6)\n\
    \            choose_num(3,7)\n            choose_num(3,8)\n            choose_num(3,9)\n\
    \            choose_num(3,10)\n            choose_num(3,11)\n            choose_num(3,12)\n\
    \            choose_num(3,13)\n            choose_num(3,14)\n            choose_num(3,15)\n\
    \            choose_num(3,16)\n            choose_num(3,17)\n            choose_num(3,18)\n\
    \            choose_num(3,19)\n            choose_num(3,20)\n            choose_num(3,21)\n\
    \            choose_num(3,22)\n            choose_num(3,23)\n            choose_num(3,24)\n\
    \            choose_num(3,25)\n            choose_num(3,26)\n            choose_num(3,27)\n\
    \            choose_num(3,28)\n            choose_num(3,29)\n            choose_num(3,30)\n\
    \            choose_num(3,31)\n            choose_num(3,32)\n            choose_num(3,33)\n\
    \            choose_num(3,34)\n            choose_num(3,35)\n            choose_num(3,36)\n\
    \            choose_num(3,37)\n            choose_num(3,38)\n            choose_num(3,39)\n\
    \            choose_num(3,40)\n            choose_num(3,41)\n            choose_num(3,42)\n\
    \            choose_num(3,43)\n            choose_num(3,44)\n            choose_num(3,45)\n\
    \            choose_num(3,46)\n            choose_num(3,47)\n            choose_num(3,48)\n\
    \            choose_num(3,49)\n            choose_num(3,50)\n            choose_num(3,51)\n\
    \            choose_num(3,52)\n            choose_num(3,53)\n            choose_num(3,54)\n\
    \            choose_num(3,55)\n            choose_num(3,56)\n            choose_num(3,57)\n\
    \            choose_num(3,58)\n            choose_num(3,59)\n            choose_num(3,60)\n\
    \            choose_num(3,61)\n            choose_num(3,62)\n            choose_num(3,63\n\
    def check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdb8b466b.py\"\
    , line 8\n    choose_num(3,5)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(7, 9)\n            choose_num(7, 10)\n            choose_num(7,\
    \ 11)\n            choose_num(7, 12)\n            choose_num(7, 13)\n        \
    \    choose_num(7, 14)\n            choose_num(7, 15)\n            choose_num(7,\
    \ 16)\n            choose_num(7, 17)\n            choose_num(7, 18)\n        \
    \    choose_num(7, 19)\n            choose_num(7, 20)\n            choose_num(7,\
    \ 21)\n            choose_num(7, 22)\n            choose_num(7, 23)\n        \
    \    choose_num(7, 24)\n            choose_num(7, 25)\n            choose_num(7,\
    \ 26)\n            choose_num(7, 27)\n            choose_num(7, 28)\n        \
    \    choose_num(7, 29)\n            choose_num(7, 30)\n            choose_num(7,\
    \ 31)\n            choose_num(7, 32)\n            choose_num(7, 33)\n        \
    \    choose_num(7, 34)\n            choose_num(7, 35)\n            choose_num(7,\
    \ 36)\n            choose_num(7, 37)\n            choose_num(7, 38)\n        \
    \    choose_num(7, 39)\n            choose_num(7, 40)\n            choose_num(7,\
    \ 41)\n            choose_num(7, 42)\n            choose_num(7, 43)\n        \
    \    choose_num(7, 44)\n            choose_num(7, 45)\n            choose_num(7,\
    \ 46)\n            choose_num(7, 47)\n            choose_num(7, 48)\n        \
    \    choose_num(7, 49)\n            choose_num(7, 50)\n            choose_num(7,\
    \ 51)\n            choose_num(7, 52)\n            choose_num(7, 53)\n        \
    \    choose_num(7, 54)\n            choose_num(7, 55)\n            choose_num(7,\
    \ 56)\n            choose_num(7, 57)\n            choose_num(7, 58)\n        \
    \    choose_num(7, 59)\n            choose_num(7, 60)\n            choose_num(7,\
    \ 61)\n            choose_num(7, 62)\n            choose_num(7, 63)\n        \
    \    choose_num(7, 64)\n            choose_num(7, 65)\n            choose_num(7,\
    \ 66)\n            choose_num(7, 67)\n            choose_\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps_r1qhqx.py\"\
    , line 8\n    choose_num(7, 9)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(7, 10)\n            >>>7\n            choose_num(7, 11)\n\
    \            >>>-1\n            choose_num(7, 12)\n            >>>-1\n       \
    \     choose_num(7, 13)\n            >>>-1\n            choose_num(7, 14)\n  \
    \          >>>-1\n            choose_num(7, 15)\n            >>>-1\n         \
    \   choose_num(7, 16)\n            >>>-1\n            choose_num(7, 17)\n    \
    \        >>>-1\n            choose_num(7, 18)\n            >>>-1\n           \
    \ choose_num(7, 19)\n            >>>-1\n            choose_num(7, 20)\n      \
    \      >>>-1\n            choose_num(7, 21)\n            >>>-1\n            choose_num(7,\
    \ 22)\n            >>>-1\n            choose_num(7, 23)\n            >>>-1\n \
    \           choose_num(7, 24)\n            >>>-1\n            choose_num(7, 25)\n\
    \            >>>-1\n            choose_num(7, 26)\n            >>>-1\n       \
    \     choose_num(7, 27)\n            >>>-1\n            choose_num(7, 28)\n  \
    \          >>>-1\n            choose_num(7, 29)\n            >>>-1\n         \
    \   choose_num(7, 30)\n            >>>-1\n            choose_num(7, 31)\n    \
    \        >>>-1\n            choose_num(7, 32)\n            >>>-1\n           \
    \ choose_num(7, 33)\n            >>>-1\n            choose_num(7, 34)\n      \
    \      >>>-1\n            choose_num(7, 35)\n            >>>-1\n            choose_num(7,\
    \ 36)\n            >>>-1\n            choose_num(7, 37)\n            >>>-1\n \
    \           choose_num(7, 38)\n            >>>-1\n            choose_num(7, 39)\n\
    \            >>>-1\n            choose_num(7, 40)\n            >>>-1\n       \
    \     choose_num(7, 41)\n            >>>-1\n            choose_num(7, 42)\n  \
    \          >>>-1\n            choose_num(7, 43)\n            >>>-1\n         \
    \   choose_num(7, 44)\n            >>>-1\n            choose_num(7, 45)\n    \
    \        >>>-1\n            choose_num(7, 46)\n            >>>-1\n           \
    \ choose_num(7, 47)\n            >>>-1\n            choose_num(7, 48)\n      \
    \      >>>-1\n            choose_num(7, 49)\n            >>>-1\n            choose_num(7,\
    \ 50)\n            >>>\ndef check(candidate):\n    assert candidate(12, 15) ==\
    \ 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1wjzpyck.py\"\
    , line 8\n    choose_num(7, 10)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(7, 9)\n            >>>8\n            choose_num(7, 10)\n\
    \            >>>-1\n            choose_num(7, 11)\n            >>>-1\n       \
    \     choose_num(7, 12)\n            >>>-1\n            choose_num(7, 13)\n  \
    \          >>>-1\n            choose_num(7, 14)\n            >>>-1\n         \
    \   choose_num(7, 15)\n            >>>-1\n            choose_num(7, 16)\n    \
    \        >>>-1\n            choose_num(7, 17)\n            >>>-1\n           \
    \ choose_num(7, 18)\n            >>>-1\n            choose_num(7, 19)\n      \
    \      >>>-1\n            choose_num(7, 20)\n            >>>-1\n            choose_num(7,\
    \ 21)\n            >>>-1\n            choose_num(7, 22)\n            >>>-1\n \
    \           choose_num(7, 23)\n            >>>-1\n            choose_num(7, 24)\n\
    \            >>>-1\n            choose_num(7, 25)\n            >>>-1\n       \
    \     choose_num(7, 26)\n            >>>-1\n            choose_num(7, 27)\n  \
    \          >>>-1\n            choose_num(7, 28)\n            >>>-1\n         \
    \   choose_num(7, 29)\n            >>>-1\n            choose_num(7, 30)\n    \
    \        >>>-1\n            choose_num(7, 31)\n            >>>-1\n           \
    \ choose_num(7, 32)\n            >>>-1\n            choose_num(7, 33)\n      \
    \      >>>-1\n            choose_num(7, 34)\n            >>>-1\n            choose_num(7,\
    \ 35)\n            >>>-1\n            choose_num(7, 36)\n            >>>-1\n \
    \           choose_num(7, 37)\n            >>>-1\n            choose_num(7, 38)\n\
    \            >>>-1\n            choose_num(7, 39)\n            >>>-1\n       \
    \     choose_num(7, 40)\n            >>>-1\n            choose_num(7, 41)\n  \
    \          >>>-1\n            choose_num(7, 42)\n            >>>-1\n         \
    \   choose_num(7, 43)\n            >>>-1\n            choose_num(7, 44)\n    \
    \        >>>-1\n            choose_num(7, 45)\n            >>>-1\n           \
    \ choose_num(7, 46)\n            >>>-1\n            choose_num(7, 47)\n      \
    \      >>>-1\n            choose_num(7, 48)\n            >>>-1\n            choose_num(7,\
    \ 49)\n            >>>\ndef check(candidate):\n    assert candidate(12, 15) ==\
    \ 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnyib693w.py\"\
    , line 8\n    choose_num(7, 9)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(7, 3)\n            choose_num(7, 4)\n            choose_num(7,\
    \ 5)\n            choose_num(7, 6)\n            choose_num(7, 7)\n           \
    \ choose_num(7, 8)\n            choose_num(7, 9)\n            choose_num(7, 10)\n\
    \            choose_num(7, 11)\n            choose_num(7, 12)\n            choose_num(7,\
    \ 13)\n            choose_num(7, 14)\n            choose_num(7, 15)\n        \
    \    choose_num(7, 16)\n            choose_num(7, 17)\n            choose_num(7,\
    \ 18)\n            choose_num(7, 19)\n            choose_num(7, 20)\n        \
    \    choose_num(7, 21)\n            choose_num(7, 22)\n            choose_num(7,\
    \ 23)\n            choose_num(7, 24)\n            choose_num(7, 25)\n        \
    \    choose_num(7, 26)\n            choose_num(7, 27)\n            choose_num(7,\
    \ 28)\n            choose_num(7, 29)\n            choose_num(7, 30)\n        \
    \    choose_num(7, 31)\n            choose_num(7, 32)\n            choose_num(7,\
    \ 33)\n            choose_num(7, 34)\n            choose_num(7, 35)\n        \
    \    choose_num(7, 36)\n            choose_num(7, 37)\n            choose_num(7,\
    \ 38)\n            choose_num(7, 39)\n            choose_num(7, 40)\n        \
    \    choose_num(7, 41)\n            choose_num(7, 42)\n            choose_num(7,\
    \ 43)\n            choose_num(7, 44)\n            choose_num(7, 45)\n        \
    \    choose_num(7, 46)\n            choose_num(7, 47)\n            choose_num(7,\
    \ 48)\n            choose_num(7, 49)\n            choose_num(7, 50)\n        \
    \    choose_num(7, 51)\n            choose_num(7, 52)\n            choose_num(7,\
    \ 53)\n            choose_num(7, 54)\n            choose_num(7, 55)\n        \
    \    choose_num(7, 56)\n            choose_num(7, 57)\n            choose_num(7,\
    \ 58)\n            choose_num(7, 59)\n            choose_num(7, 60)\n        \
    \    choose_num(7, 61)\n            choose_num(7, 62)\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkqt3wc3r.py\"\
    , line 8\n    choose_num(7, 3)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(7, 8)\n            > 8\n            choose_num(7, 9)\n  \
    \          > -1\n            choose_num(7, 10)\n            > -1\n           \
    \ choose_num(7, 11)\n            > -1\n            choose_num(7, 12)\n       \
    \     > -1\n            choose_num(7, 13)\n            > -1\n            choose_num(7,\
    \ 14)\n            > -1\n            choose_num(7, 15)\n            > -1\n   \
    \         choose_num(7, 16)\n            > -1\n            choose_num(7, 17)\n\
    \            > -1\n            choose_num(7, 18)\n            > -1\n         \
    \   choose_num(7, 19)\n            > -1\n            choose_num(7, 20)\n     \
    \       > -1\n            choose_num(7, 21)\n            > -1\n            choose_num(7,\
    \ 22)\n            > -1\n            choose_num(7, 23)\n            > -1\n   \
    \         choose_num(7, 24)\n            > -1\n            choose_num(7, 25)\n\
    \            > -1\n            choose_num(7, 26)\n            > -1\n         \
    \   choose_num(7, 27)\n            > -1\n            choose_num(7, 28)\n     \
    \       > -1\n            choose_num(7, 29)\n            > -1\n            choose_num(7,\
    \ 30)\n            > -1\n            choose_num(7, 31)\n            > -1\n   \
    \         choose_num(7, 32)\n            > -1\n            choose_num(7, 33)\n\
    \            > -1\n            choose_num(7, 34)\n            > -1\n         \
    \   choose_num(7, 35)\n            > -1\n            choose_num(7, 36)\n     \
    \       > -1\n            choose_num(7, 37)\n            > -1\n            choose_num(7,\
    \ 38)\n            > -1\n            choose_num(7, 39)\n            > -1\n   \
    \         choose_num(7, 40)\n            > -1\n            choose_num(7, 41)\n\
    \            > -1\n            choose_num(7, 42)\n            > -1\n         \
    \   choose_num(7, 43)\n            > -1\n            choose_num(7, 44)\n     \
    \       > -1\n            choose_num(7, 45)\n            > -1\n            choose_num(7,\
    \ 46)\n            > -1\n            choose_num(7, 47)\n            > -1\n   \
    \         choose_num(7, 48)\n            > -1\ndef check(candidate):\n    assert\
    \ candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33,\
    \ 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6,\
    \ 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) ==\
    \ -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5rpowgfe.py\"\
    , line 8\n    choose_num(7, 8)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(7, 10)\n            >>>7\n            choose_num(7, 11)\n\
    \            >>>-1\n            choose_num(7, 12)\n            >>>-1\n       \
    \     choose_num(7, 13)\n            >>>-1\n            choose_num(7, 14)\n  \
    \          >>>-1\n            choose_num(7, 15)\n            >>>-1\n         \
    \   choose_num(7, 16)\n            >>>-1\n            choose_num(7, 17)\n    \
    \        >>>-1\n            choose_num(7, 18)\n            >>>-1\n           \
    \ choose_num(7, 19)\n            >>>-1\n            choose_num(7, 20)\n      \
    \      >>>-1\n            choose_num(7, 21)\n            >>>-1\n            choose_num(7,\
    \ 22)\n            >>>-1\n            choose_num(7, 23)\n            >>>-1\n \
    \           choose_num(7, 24)\n            >>>-1\n            choose_num(7, 25)\n\
    \            >>>-1\n            choose_num(7, 26)\n            >>>-1\n       \
    \     choose_num(7, 27)\n            >>>-1\n            choose_num(7, 28)\n  \
    \          >>>-1\n            choose_num(7, 29)\n            >>>-1\n         \
    \   choose_num(7, 30)\n            >>>-1\n            choose_num(7, 31)\n    \
    \        >>>-1\n            choose_num(7, 32)\n            >>>-1\n           \
    \ choose_num(7, 33)\n            >>>-1\n            choose_num(7, 34)\n      \
    \      >>>-1\n            choose_num(7, 35)\n            >>>-1\n            choose_num(7,\
    \ 36)\n            >>>-1\n            choose_num(7, 37)\n            >>>-1\n \
    \           choose_num(7, 38)\n            >>>-1\n            choose_num(7, 39)\n\
    \            >>>-1\n            choose_num(7, 40)\n            >>>-1\n       \
    \     choose_num(7, 41)\n            >>>-1\n            choose_num(7, 42)\n  \
    \          >>>-1\n            choose_num(7, 43)\n            >>>-1\n         \
    \   choose_num(7, 44)\n            >>>-1\n            choose_num(7, 45)\n    \
    \        >>>-1\n            choose_num(7, 46)\n            >>>-1\n           \
    \ choose_num(7, 47)\n            >>>-1\n            choose_num(7, 48)\n      \
    \      >>>-1\n            choose_num(7, 49)\n            >>>-1\n            choose_num(7,\
    \ 50)\n            >>>\ndef check(candidate):\n    assert candidate(12, 15) ==\
    \ 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsht7a8bn.py\"\
    , line 8\n    choose_num(7, 10)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \ >>> choose_num(1, 10)\n    10\n    >>> choose_num(100, 1000)\n    1000\n   \
    \ >>> choose_num(100, -1000)\n    -1\n    \"\"\"\n    if x > y:\n        x, y\
    \ = y, x\n    if x == y:\n        return -1\n    if x % 2 == 0:\n        return\
    \ x // 2\n    if y % 2 == 0:\n        return y // 2\n    if x % 2 == 0 and y %\
    \ 2 == 0:\n        return x // 2 + y // 2\n    if x % 2 == 0 and y % 2 != 0:\n\
    \        return x // 2 + 1\n    if x % 2 != 0 and y % 2 == 0:\n        return\
    \ y // 2 + 1\n    if x % 2 != 0 and y % 2 != 0:\n        return x // 2 + y //\
    \ 2\n    return -1\n\n\ndef check(candidate):\n    assert candidate(12, 15) ==\
    \ 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqcqpsim_.py\"\
    , line 14\n    \"\"\"\n    ^\nSyntaxError: unterminated triple-quoted string literal\
    \ (detected at line 47)\n"
  exit_code: 1
  status: SyntaxError
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(7, 3)\n            >>>7\n            choose_num(7, 4)\n \
    \           >>>-1\n            choose_num(7, 5)\n            >>>-1\n         \
    \   choose_num(7, 6)\n            >>>-1\n            choose_num(7, 7)\n      \
    \      >>>7\n            choose_num(7, 8)\n            >>>-1\n            choose_num(7,\
    \ 9)\n            >>>-1\n            choose_num(7, 10)\n            >>>-1\n  \
    \          choose_num(7, 11)\n            >>>-1\n            choose_num(7, 12)\n\
    \            >>>-1\n            choose_num(7, 13)\n            >>>7\n        \
    \    choose_num(7, 14)\n            >>>-1\n            choose_num(7, 15)\n   \
    \         >>>-1\n            choose_num(7, 16)\n            >>>-1\n          \
    \  choose_num(7, 17)\n            >>>-1\n            choose_num(7, 18)\n     \
    \       >>>-1\n            choose_num(7, 19)\n            >>>-1\n            choose_num(7,\
    \ 20)\n            >>>-1\n            choose_num(7, 21)\n            >>>-1\n \
    \           choose_num(7, 22)\n            >>>-1\n            choose_num(7, 23)\n\
    \            >>>-1\n            choose_num(7, 24)\n            >>>-1\n       \
    \     choose_num(7, 25)\n            >>>-1\n            choose_num(7, 26)\n  \
    \          >>>-1\n            choose_num(7, 27)\n            >>>-1\n         \
    \   choose_num(7, 28)\n            >>>-1\n            choose_num(7, 29)\n    \
    \        >>>-1\n            choose_num(7, 30)\n            >>>-1\n           \
    \ choose_num(7, 31)\n            >>>-1\n            choose_num(7, 32)\n      \
    \      >>>-1\n            choose_num(7, 33)\n            >>>-1\n            choose_num(7,\
    \ 34)\n            >>>-1\n            choose_num(7, 35)\n            >>>-1\n \
    \           choose_num(7, 36)\n            >>>-1\n            choose_num(7, 37)\n\
    \            >>>-1\n            choose_num(7, 38)\n            >>>-1\n       \
    \     choose_num(7, 39)\n            >>>-1\n            choose_num(7, 40)\n  \
    \          >>>-1\n            choose_num(7, 41)\n            >>>-1\n         \
    \   choose_num(7, 42)\n            >>>-1\n            choose_num(7, 43)\n    \
    \        >>>-1\n            choose_num\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8d9vp87p.py\"\
    , line 8\n    choose_num(7, 3)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(7, 10)\n            >>>10\n            choose_num(7, 9)\n\
    \            >>>-1\n            choose_num(7, 11)\n            >>>-1\n       \
    \     choose_num(7, 12)\n            >>>-1\n            choose_num(7, 13)\n  \
    \          >>>-1\n            choose_num(7, 14)\n            >>>-1\n         \
    \   choose_num(7, 15)\n            >>>-1\n            choose_num(7, 16)\n    \
    \        >>>-1\n            choose_num(7, 17)\n            >>>-1\n           \
    \ choose_num(7, 18)\n            >>>-1\n            choose_num(7, 19)\n      \
    \      >>>-1\n            choose_num(7, 20)\n            >>>-1\n            choose_num(7,\
    \ 21)\n            >>>-1\n            choose_num(7, 22)\n            >>>-1\n \
    \           choose_num(7, 23)\n            >>>-1\n            choose_num(7, 24)\n\
    \            >>>-1\n            choose_num(7, 25)\n            >>>-1\n       \
    \     choose_num(7, 26)\n            >>>-1\n            choose_num(7, 27)\n  \
    \          >>>-1\n            choose_num(7, 28)\n            >>>-1\n         \
    \   choose_num(7, 29)\n            >>>-1\n            choose_num(7, 30)\n    \
    \        >>>-1\n            choose_num(7, 31)\n            >>>-1\n           \
    \ choose_num(7, 32)\n            >>>-1\n            choose_num(7, 33)\n      \
    \      >>>-1\n            choose_num(7, 34)\n            >>>-1\n            choose_num(7,\
    \ 35)\n            >>>-1\n            choose_num(7, 36)\n            >>>-1\n \
    \           choose_num(7, 37)\n            >>>-1\n            choose_num(7, 38)\n\
    \            >>>-1\n            choose_num(7, 39)\n            >>>-1\n       \
    \     choose_num(7, 40)\n            >>>-1\n            choose_num(7, 41)\n  \
    \          >>>-1\n            choose_num(7, 42)\n            >>>-1\n         \
    \   choose_num(7, 43)\n            >>>-1\n            choose_num(7, 44)\n    \
    \        >>>-1\n            choose_num(7, 45)\n            >>>-1\n           \
    \ choose_num(7, 46)\n            >>>-1\n            choose_num(7, 47)\n      \
    \      >>>-1\n            choose_num(7, 48)\n            >>>-1\n            choose_num(7,\
    \ 49)\n            >>>\ndef check(candidate):\n    assert candidate(12, 15) ==\
    \ 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmputxs6xm7.py\"\
    , line 8\n    choose_num(7, 10)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \ >>> choose_num(100, 200)\n    200\n    >>> choose_num(100, 0)\n    -1\n    >>>\
    \ choose_num(0, 0)\n    -1\n    >>> choose_num(100, -10)\n    -1\n    >>> choose_num(100,\
    \ 10)\n    100\n    \"\"\"\n    if x >= y:\n        return -1\n    if x % 2 ==\
    \ 0:\n        return x // 2\n    else:\n        return x + 1\n\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd8esd357.py\"\
    , line 18\n    \"\"\"\n    ^\nSyntaxError: unterminated triple-quoted string literal\
    \ (detected at line 40)\n"
  exit_code: 1
  status: SyntaxError
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \ >>> choose_num(1, 10)\n    10\n    >>> choose_num(100, 200)\n    200\n    >>>\
    \ choose_num(100, 0)\n    -1\n    \"\"\"\n    if x > y:\n        x, y = y, x\n\
    \    if x % 2 == 0:\n        return y\n    if y % 2 == 0:\n        return x\n\
    \    if x % 2 == 0 and y % 2 == 0:\n        return x // 2\n    if x % 2 == 1 and\
    \ y % 2 == 1:\n        return x // 2 + 1\n    return -1\n\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpaokl00o4.py\"\
    , line 14\n    \"\"\"\n    ^\nSyntaxError: unterminated triple-quoted string literal\
    \ (detected at line 41)\n"
  exit_code: 1
  status: SyntaxError
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(7, 9)\n            >>>7\n            choose_num(7, 10)\n\
    \            >>>-1\n            choose_num(7, 11)\n            >>>-1\n       \
    \     choose_num(7, 12)\n            >>>-1\n            choose_num(7, 13)\n  \
    \          >>>-1\n            choose_num(7, 14)\n            >>>-1\n         \
    \   choose_num(7, 15)\n            >>>-1\n            choose_num(7, 16)\n    \
    \        >>>-1\n            choose_num(7, 17)\n            >>>-1\n           \
    \ choose_num(7, 18)\n            >>>-1\n            choose_num(7, 19)\n      \
    \      >>>-1\n            choose_num(7, 20)\n            >>>-1\n            choose_num(7,\
    \ 21)\n            >>>-1\n            choose_num(7, 22)\n            >>>-1\n \
    \           choose_num(7, 23)\n            >>>-1\n            choose_num(7, 24)\n\
    \            >>>-1\n            choose_num(7, 25)\n            >>>-1\n       \
    \     choose_num(7, 26)\n            >>>-1\n            choose_num(7, 27)\n  \
    \          >>>-1\n            choose_num(7, 28)\n            >>>-1\n         \
    \   choose_num(7, 29)\n            >>>-1\n            choose_num(7, 30)\n    \
    \        >>>-1\n            choose_num(7, 31)\n            >>>-1\n           \
    \ choose_num(7, 32)\n            >>>-1\n            choose_num(7, 33)\n      \
    \      >>>-1\n            choose_num(7, 34)\n            >>>-1\n            choose_num(7,\
    \ 35)\n            >>>-1\n            choose_num(7, 36)\n            >>>-1\n \
    \           choose_num(7, 37)\n            >>>-1\n            choose_num(7, 38)\n\
    \            >>>-1\n            choose_num(7, 39)\n            >>>-1\n       \
    \     choose_num(7, 40)\n            >>>-1\n            choose_num(7, 41)\n  \
    \          >>>-1\n            choose_num(7, 42)\n            >>>-1\n         \
    \   choose_num(7, 43)\n            >>>-1\n            choose_num(7, 44)\n    \
    \        >>>-1\n            choose_num(7, 45)\n            >>>-1\n           \
    \ choose_num(7, 46)\n            >>>-1\n            choose_num(7, 47)\n      \
    \      >>>-1\n            choose_num(7, 48)\n            >>>-1\n            choose_num(7,\
    \ 49)\n            >>>\ndef check(candidate):\n    assert candidate(12, 15) ==\
    \ 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyspyux94.py\"\
    , line 8\n    choose_num(7, 9)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(6, 10)\n            >> 10\n            \"\"\"\n    \"\"\"\
    \n    if x > y:\n        x, y = y, x\n    if x % 2 == 0:\n        if y % 2 ==\
    \ 0:\n            return x\n        else:\n            return y\n    else:\n \
    \       if y % 2 == 0:\n            return y\n        else:\n            return\
    \ x\n\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert\
    \ candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert\
    \ candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27,\
    \ 10) == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546)\
    \ == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpepieo9u2.py\"\
    , line 8\n    choose_num(6, 10)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(7, 12)\n            >>>12\n            choose_num(7, 13)\n\
    \            >>>-1\n            choose_num(7, 14)\n            >>>-1\n       \
    \     choose_num(7, 15)\n            >>>-1\n            choose_num(7, 16)\n  \
    \          >>>-1\n            choose_num(7, 17)\n            >>>-1\n         \
    \   choose_num(7, 18)\n            >>>-1\n            choose_num(7, 19)\n    \
    \        >>>-1\n            choose_num(7, 20)\n            >>>-1\n           \
    \ choose_num(7, 21)\n            >>>-1\n            choose_num(7, 22)\n      \
    \      >>>-1\n            choose_num(7, 23)\n            >>>-1\n            choose_num(7,\
    \ 24)\n            >>>-1\n            choose_num(7, 25)\n            >>>-1\n \
    \           choose_num(7, 26)\n            >>>-1\n            choose_num(7, 27)\n\
    \            >>>-1\n            choose_num(7, 28)\n            >>>-1\n       \
    \     choose_num(7, 29)\n            >>>-1\n            choose_num(7, 30)\n  \
    \          >>>-1\n            choose_num(7, 31)\n            >>>-1\n         \
    \   choose_num(7, 32)\n            >>>-1\n            choose_num(7, 33)\n    \
    \        >>>-1\n            choose_num(7, 34)\n            >>>-1\n           \
    \ choose_num(7, 35)\n            >>>-1\n            choose_num(7, 36)\n      \
    \      >>>-1\n            choose_num(7, 37)\n            >>>-1\n            choose_num(7,\
    \ 38)\n            >>>-1\n            choose_num(7, 39)\n            >>>-1\n \
    \           choose_num(7, 40)\n            >>>-1\n            choose_num(7, 41)\n\
    \            >>>-1\n            choose_num(7, 42)\n            >>>-1\n       \
    \     choose_num(7, 43)\n            >>>-1\n            choose_num(7, 44)\n  \
    \          >>>-1\n            choose_num(7, 45)\n            >>>-1\n         \
    \   choose_num(7, 46)\n            >>>-1\n            choose_num(7, 47)\n    \
    \        >>>-1\n            choose_num(7, 48)\n            >>>-1\n           \
    \ choose_num(7, 49)\n            >>>-1\n            choose_num(7, 50)\n      \
    \      >>>-1\n            choose_num(7, 51)\n            >>>-1\n            choose_num(7,\
    \ 52)\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert\
    \ candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert\
    \ candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27,\
    \ 10) == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546)\
    \ == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_qrv1ixk.py\"\
    , line 8\n    choose_num(7, 12)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(7, 10)\n            >>>10\n            choose_num(7, 8)\n\
    \            >>>-1\n            choose_num(7, 11)\n            >>>-1\n       \
    \     choose_num(7, -1)\n            >>>-1\n            choose_num(7, -10)\n \
    \           >>>-1\n            choose_num(7, -7)\n            >>>-1\n        \
    \    choose_num(7, -6)\n            >>>-1\n            choose_num(7, -5)\n   \
    \         >>>-1\n            choose_num(7, -4)\n            >>>-1\n          \
    \  choose_num(7, -3)\n            >>>-1\n            choose_num(7, -2)\n     \
    \       >>>-1\n            choose_num(7, -1)\n            >>>-1\n            choose_num(7,\
    \ 0)\n            >>>-1\n            choose_num(7, 1)\n            >>>-1\n   \
    \         choose_num(7, 2)\n            >>>-1\n            choose_num(7, 3)\n\
    \            >>>-1\n            choose_num(7, 4)\n            >>>-1\n        \
    \    choose_num(7, 5)\n            >>>-1\n            choose_num(7, 6)\n     \
    \       >>>-1\n            choose_num(7, 7)\n            >>>-1\n            choose_num(7,\
    \ 8)\n            >>>-1\n            choose_num(7, 9)\n            >>>-1\n   \
    \         choose_num(7, 10)\n            >>>10\n            choose_num(7, 11)\n\
    \            >>>10\n            choose_num(7, 12)\n            >>>10\n       \
    \     choose_num(7, 13)\n            >>>10\n            choose_num(7, 14)\n  \
    \          >>>10\n            choose_num(7, 15)\n            >>>10\n         \
    \   choose_num(7, 16)\n            >>>10\n            choose_num(7, 17)\n    \
    \        >>>10\n            choose_num(7, 18)\n            >>>10\n           \
    \ choose_num(7, 19)\n            >>>10\n            choose_num(7, 20)\n      \
    \      >>>10\n            choose_num(7, 21)\n            >>>10\n            choose_num(7,\
    \ 22)\n            >>>10\n            choose_num(7, 23)\n            >>>10\n \
    \           choose_num(7, 24)\n            >>>10\n            choose_num(7, 25)\n\
    \            >>>10\n            choose_num(7, 26)\n            >>>10\n       \
    \     choose_num(7, 27)\n            >>>10\n            choose_num(7, 28)\n  \
    \          >>>10\n            choose_num(7, 29)\ndef check(candidate):\n    assert\
    \ candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33,\
    \ 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6,\
    \ 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) ==\
    \ -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzivj0ubm.py\"\
    , line 8\n    choose_num(7, 10)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(6, 8)\n            >>>8\n            choose_num(6, 10)\n\
    \            >>>-1\n            \"\"\"\n    \"\"\"\n    \n    if x > y:\n    \
    \    x, y = y, x\n    \n    even = x % 2 == 0\n    \n    if even:\n        \n\
    \        if y % 2 == 0:\n            return y\n        else:\n            return\
    \ -1\n    else:\n        \n        if y % 2 == 0:\n            return -1\n   \
    \     else:\n            return y\n    \n    \ndef check(candidate):\n    assert\
    \ candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33,\
    \ 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6,\
    \ 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) ==\
    \ -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpphn8y283.py\"\
    , line 8\n    choose_num(6, 8)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \ >>> choose_num(1, 10)\n    10\n    >>> choose_num(11, 10)\n    10\n    >>> choose_num(11,\
    \ 11)\n    11\n    >>> choose_num(11, 12)\n    -1\n    >>> choose_num(11, 13)\n\
    \    -1\n    \"\"\"\n    if x <= y:\n        if x % 2 == 0:\n            return\
    \ x\n        else:\n            return y\n    else:\n        if y % 2 == 0:\n\
    \            return y\n        else:\n            return x\n\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpeauky_tr.py\"\
    , line 18\n    \"\"\"\n    ^\nSyntaxError: unterminated triple-quoted string literal\
    \ (detected at line 44)\n"
  exit_code: 1
  status: SyntaxError
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \ >>> choose_num(1, 10)\n    10\n    >>> choose_num(9, 10)\n    10\n    >>> choose_num(9,\
    \ 9)\n    -1\n    >>> choose_num(9, 10)\n    -1\n    \"\"\"\n    if x >= y:\n\
    \        return -1\n    \n    even = x % 2 == 0\n    \n    if even:\n        \n\
    \        if y > x:\n            return y\n        else:\n            return x\n\
    \    else:\n        \n        if y > x:\n            return x\n        else:\n\
    \            return y\n    \ndef check(candidate):\n    assert candidate(12, 15)\
    \ == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) ==\
    \ 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) ==\
    \ 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n \
    \   assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9b39wwi2.py\"\
    , line 16\n    \"\"\"\n    ^\nSyntaxError: unterminated triple-quoted string literal\
    \ (detected at line 48)\n"
  exit_code: 1
  status: SyntaxError
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \ >>> choose_num(7, 8)\n    7\n    >>> choose_num(7, 9)\n    -1\n    >>> choose_num(7,\
    \ 10)\n    -1\n    >>> choose_num(7, 11)\n    -1\n    >>> choose_num(7, 12)\n\
    \    -1\n    \"\"\"\n    if x > y:\n        x, y = y, x\n    if x % 2 == 0:\n\
    \        if y % 2 == 0:\n            return x\n        else:\n            return\
    \ y\n    else:\n        if y % 2 == 0:\n            return y\n        else:\n\
    \            return x\n\n\ndef check(candidate):\n    assert candidate(12, 15)\
    \ == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) ==\
    \ 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) ==\
    \ 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n \
    \   assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1sntogfb.py\"\
    , line 18\n    \"\"\"\n    ^\nSyntaxError: unterminated triple-quoted string literal\
    \ (detected at line 46)\n"
  exit_code: 1
  status: SyntaxError
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \ >>> choose_num(7, 9)\n    7\n    >>> choose_num(7, 10)\n    -1\n    \"\"\"\n\
    \    if x > y:\n        x, y = y, x\n    if x % 2 == 0:\n        if y % 2 == 0:\n\
    \            return x\n        else:\n            return -1\n    else:\n     \
    \   if y % 2 == 0:\n            return -1\n        else:\n            return x\n\
    \n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpatnmxi81.py\"\
    , line 12\n    \"\"\"\n    ^\nSyntaxError: unterminated triple-quoted string literal\
    \ (detected at line 40)\n"
  exit_code: 1
  status: SyntaxError
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \ >>> choose_num(7, 10)\n    7\n    >>> choose_num(7, 11)\n    -1\n    >>> choose_num(7,\
    \ 12)\n    -1\n    >>> choose_num(7, 13)\n    -1\n    >>> choose_num(7, 14)\n\
    \    -1\n    >>> choose_num(7, 15)\n    -1\n    >>> choose_num(7, 16)\n    -1\n\
    \    >>> choose_num(7, 17)\n    -1\n    >>> choose_num(7, 18)\n    -1\n    >>>\
    \ choose_num(7, 19)\n    -1\n    >>> choose_num(7, 20)\n    -1\n    >>> choose_num(7,\
    \ 21)\n    -1\n    >>> choose_num(7, 22)\n    -1\n    >>> choose_num(7, 23)\n\
    \    -1\n    >>> choose_num(7, 24)\n    -1\n    >>> choose_num(7, 25)\n    -1\n\
    \    >>> choose_num(7, 26)\n    -1\n    >>> choose_num(7, 27)\n    -1\n    >>>\
    \ choose_num(7, 28)\n    -1\n    >>> choose_num(7, 29)\n    -1\n    >>> choose_num(7,\
    \ 30)\n    -1\n    >>> choose_num(7, 31)\n    -1\n    >>> choose_num(7, 32)\n\
    \    -1\n    >>> choose_num(7, 33)\n    -1\n    >>> choose_num(7, 34)\n    -1\n\
    \    >>> choose_num(7, 35)\n    -1\n    >>> choose_num(7, 36)\n    -1\n    >>>\
    \ choose_num(7, 37)\n    -1\n    >>> choose_num(7, 38)\n    -1\n    >>> choose_num(7,\
    \ 39)\n    -1\n    >>> choose_num(7, 40)\n    -1\n    >>> choose_num(7, 41)\n\
    \    -1\n    >>> choose_num(7, 42)\n    -1\n    >>> choose_num(7, 43)\n    -1\n\
    \    >>> choose_num(7, 44)\n    -1\n    >>> choose_num(7, 45)\n    -1\n    >>>\
    \ choose_num(7, 46)\n    -1\n    >>> choose_num(7, 47)\n    -1\n    >>> choose_num(7,\
    \ 48)\n    -1\n    >>> choose_num(7, 49)\n    -1\n    >>> choose_num(7, 50)\n\
    \    -1\n    >>> choose_num(7, 51)\n    -1\n    >>> choose_num(7, 52)\n    -1\n\
    \    >>> choose_num(7, 53)\n    -1\n    >>> choose_\ndef check(candidate):\n \
    \   assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpibkoqi6h.py\"\
    , line 8\n    >>> choose_num(7, 10)\n    ^^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \ >>> choose_num(7, 8)\n    8\n    >>> choose_num(7, 9)\n    -1\n    \"\"\"\n\
    \    if x >= y:\n        return -1\n    if x % 2 == 0:\n        return x // 2\n\
    \    if y % 2 == 0:\n        return y // 2\n    if x > y:\n        return choose_num(x\
    \ - 1, y)\n    if y > x:\n        return choose_num(x, y - 1)\n    return -1\n\
    \n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz4j9bw_v.py\"\
    , line 12\n    \"\"\"\n    ^\nSyntaxError: unterminated triple-quoted string literal\
    \ (detected at line 39)\n"
  exit_code: 1
  status: SyntaxError
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(7, 8)\n            >>>8\n            choose_num(7, 9)\n \
    \           >>>-1\n            choose_num(7, 10)\n            >>>-1\n        \
    \    choose_num(7, 11)\n            >>>-1\n            choose_num(7, 12)\n   \
    \         >>>-1\n            choose_num(7, 13)\n            >>>-1\n          \
    \  choose_num(7, 14)\n            >>>-1\n            choose_num(7, 15)\n     \
    \       >>>-1\n            choose_num(7, 16)\n            >>>-1\n            choose_num(7,\
    \ 17)\n            >>>-1\n            choose_num(7, 18)\n            >>>-1\n \
    \           choose_num(7, 19)\n            >>>-1\n            choose_num(7, 20)\n\
    \            >>>-1\n            choose_num(7, 21)\n            >>>-1\n       \
    \     choose_num(7, 22)\n            >>>-1\n            choose_num(7, 23)\n  \
    \          >>>-1\n            choose_num(7, 24)\n            >>>-1\n         \
    \   choose_num(7, 25)\n            >>>-1\n            choose_num(7, 26)\n    \
    \        >>>-1\n            choose_num(7, 27)\n            >>>-1\n           \
    \ choose_num(7, 28)\n            >>>-1\n            choose_num(7, 29)\n      \
    \      >>>-1\n            choose_num(7, 30)\n            >>>-1\n            choose_num(7,\
    \ 31)\n            >>>-1\n            choose_num(7, 32)\n            >>>-1\n \
    \           choose_num(7, 33)\n            >>>-1\n            choose_num(7, 34)\n\
    \            >>>-1\n            choose_num(7, 35)\n            >>>-1\n       \
    \     choose_num(7, 36)\n            >>>-1\n            choose_num(7, 37)\n  \
    \          >>>-1\n            choose_num(7, 38)\n            >>>-1\n         \
    \   choose_num(7, 39)\n            >>>-1\n            choose_num(7, 40)\n    \
    \        >>>-1\n            choose_num(7, 41)\n            >>>-1\n           \
    \ choose_num(7, 42)\n            >>>-1\n            choose_num(7, 43)\n      \
    \      >>>-1\n            choose_num(7, 44)\n            >>>-1\n            choose_num(7,\
    \ 45)\n            >>>-1\n            choose_num(7, 46)\n            >>>-1\n \
    \           choose_num(7, 47)\n            >>>-1\n            choose_num(7, 48)\n\
    \            >>>-1\ndef check(candidate):\n    assert candidate(12, 15) == 14\n\
    \    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzmj9u0zo.py\"\
    , line 8\n    choose_num(7, 8)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(7, 9)\n            choose_num(7, 10)\n            choose_num(7,\
    \ 11)\n            choose_num(7, 12)\n            choose_num(7, 13)\n        \
    \    choose_num(7, 14)\n            choose_num(7, 15)\n            choose_num(7,\
    \ 16)\n            choose_num(7, 17)\n            choose_num(7, 18)\n        \
    \    choose_num(7, 19)\n            choose_num(7, 20)\n            choose_num(7,\
    \ 21)\n            choose_num(7, 22)\n            choose_num(7, 23)\n        \
    \    choose_num(7, 24)\n            choose_num(7, 25)\n            choose_num(7,\
    \ 26)\n            choose_num(7, 27)\n            choose_num(7, 28)\n        \
    \    choose_num(7, 29)\n            choose_num(7, 30)\n            choose_num(7,\
    \ 31)\n            choose_num(7, 32)\n            choose_num(7, 33)\n        \
    \    choose_num(7, 34)\n            choose_num(7, 35)\n            choose_num(7,\
    \ 36)\n            choose_num(7, 37)\n            choose_num(7, 38)\n        \
    \    choose_num(7, 39)\n            choose_num(7, 40)\n            choose_num(7,\
    \ 41)\n            choose_num(7, 42)\n            choose_num(7, 43)\n        \
    \    choose_num(7, 44)\n            choose_num(7, 45)\n            choose_num(7,\
    \ 46)\n            choose_num(7, 47)\n            choose_num(7, 48)\n        \
    \    choose_num(7, 49)\n            choose_num(7, 50)\n            choose_num(7,\
    \ 51)\n            choose_num(7, 52)\n            choose_num(7, 53)\n        \
    \    choose_num(7, 54)\n            choose_num(7, 55)\n            choose_num(7,\
    \ 56)\n            choose_num(7, 57)\n            choose_num(7, 58)\n        \
    \    choose_num(7, 59)\n            choose_num(7, 60)\n            choose_num(7,\
    \ 61)\n            choose_num(7, 62)\n            choose_num(7, 63)\n        \
    \    choose_num(7, 64)\n            choose_num(7, 65)\n            choose_num(7,\
    \ 66)\n            choose_num(7, 67)\n            choose_\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmponbbpdqs.py\"\
    , line 8\n    choose_num(7, 9)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(7, 9)\n            >>>7\n            choose_num(7, 10)\n\
    \            >>>-1\n            choose_num(7, 11)\n            >>>-1\n       \
    \     choose_num(7, 12)\n            >>>-1\n            choose_num(7, 13)\n  \
    \          >>>-1\n            choose_num(7, 14)\n            >>>-1\n         \
    \   choose_num(7, 15)\n            >>>-1\n            choose_num(7, 16)\n    \
    \        >>>-1\n            choose_num(7, 17)\n            >>>-1\n           \
    \ choose_num(7, 18)\n            >>>-1\n            choose_num(7, 19)\n      \
    \      >>>-1\n            choose_num(7, 20)\n            >>>-1\n            choose_num(7,\
    \ 21)\n            >>>-1\n            choose_num(7, 22)\n            >>>-1\n \
    \           choose_num(7, 23)\n            >>>-1\n            choose_num(7, 24)\n\
    \            >>>-1\n            choose_num(7, 25)\n            >>>-1\n       \
    \     choose_num(7, 26)\n            >>>-1\n            choose_num(7, 27)\n  \
    \          >>>-1\n            choose_num(7, 28)\n            >>>-1\n         \
    \   choose_num(7, 29)\n            >>>-1\n            choose_num(7, 30)\n    \
    \        >>>-1\n            choose_num(7, 31)\n            >>>-1\n           \
    \ choose_num(7, 32)\n            >>>-1\n            choose_num(7, 33)\n      \
    \      >>>-1\n            choose_num(7, 34)\n            >>>-1\n            choose_num(7,\
    \ 35)\n            >>>-1\n            choose_num(7, 36)\n            >>>-1\n \
    \           choose_num(7, 37)\n            >>>-1\n            choose_num(7, 38)\n\
    \            >>>-1\n            choose_num(7, 39)\n            >>>-1\n       \
    \     choose_num(7, 40)\n            >>>-1\n            choose_num(7, 41)\n  \
    \          >>>-1\n            choose_num(7, 42)\n            >>>-1\n         \
    \   choose_num(7, 43)\n            >>>-1\n            choose_num(7, 44)\n    \
    \        >>>-1\n            choose_num(7, 45)\n            >>>-1\n           \
    \ choose_num(7, 46)\n            >>>-1\n            choose_num(7, 47)\n      \
    \      >>>-1\n            choose_num(7, 48)\n            >>>-1\n            choose_num(7,\
    \ 49)\n            >>>\ndef check(candidate):\n    assert candidate(12, 15) ==\
    \ 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp33ap_pj0.py\"\
    , line 8\n    choose_num(7, 9)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(7, 9)\n            >> 7\n            choose_num(7, 8)\n \
    \           >> -1\n            choose_num(7, 10)\n            >> -1\n        \
    \    choose_num(7, 11)\n            >> -1\n            choose_num(7, 12)\n   \
    \         >> -1\n            choose_num(7, 13)\n            >> -1\n          \
    \  choose_num(7, 14)\n            >> -1\n            choose_num(7, 15)\n     \
    \       >> -1\n            choose_num(7, 16)\n            >> -1\n            choose_num(7,\
    \ 17)\n            >> -1\n            choose_num(7, 18)\n            >> -1\n \
    \           choose_num(7, 19)\n            >> -1\n            choose_num(7, 20)\n\
    \            >> -1\n            choose_num(7, 21)\n            >> -1\n       \
    \     choose_num(7, 22)\n            >> -1\n            choose_num(7, 23)\n  \
    \          >> -1\n            choose_num(7, 24)\n            >> -1\n         \
    \   choose_num(7, 25)\n            >> -1\n            choose_num(7, 26)\n    \
    \        >> -1\n            choose_num(7, 27)\n            >> -1\n           \
    \ choose_num(7, 28)\n            >> -1\n            choose_num(7, 29)\n      \
    \      >> -1\n            choose_num(7, 30)\n            >> -1\n            choose_num(7,\
    \ 31)\n            >> -1\n            choose_num(7, 32)\n            >> -1\n \
    \           choose_num(7, 33)\n            >> -1\n            choose_num(7, 34)\n\
    \            >> -1\n            choose_num(7, 35)\n            >> -1\n       \
    \     choose_num(7, 36)\n            >> -1\n            choose_num(7, 37)\n  \
    \          >> -1\n            choose_num(7, 38)\n            >> -1\n         \
    \   choose_num(7, 39)\n            >> -1\n            choose_num(7, 40)\n    \
    \        >> -1\n            choose_num(7, 41)\n            >> -1\n           \
    \ choose_num(7, 42)\n            >> -1\n            choose_num(7, 43)\n      \
    \      >> -1\n            choose_num(7, 44)\n            >> -1\n            choose_num(7,\
    \ 45)\n            >> -1\n            choose_num(7, 46)\n            >> -1\n \
    \           choose_num(7, 47)\n            >> -1\n            choose_num(7, 48)\n\
    \            >> -1\ndef check(candidate):\n    assert candidate(12, 15) == 14\n\
    \    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpocvz_g2l.py\"\
    , line 8\n    choose_num(7, 9)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(7, 10)\n            >> 7\n            choose_num(7, 8)\n\
    \            >> -1\n            choose_num(7, 9)\n            >> -1\n        \
    \    choose_num(7, 11)\n            >> -1\n            choose_num(7, 12)\n   \
    \         >> -1\n            choose_num(7, 13)\n            >> -1\n          \
    \  choose_num(7, 14)\n            >> -1\n            choose_num(7, 15)\n     \
    \       >> -1\n            choose_num(7, 16)\n            >> -1\n            choose_num(7,\
    \ 17)\n            >> -1\n            choose_num(7, 18)\n            >> -1\n \
    \           choose_num(7, 19)\n            >> -1\n            choose_num(7, 20)\n\
    \            >> -1\n            choose_num(7, 21)\n            >> -1\n       \
    \     choose_num(7, 22)\n            >> -1\n            choose_num(7, 23)\n  \
    \          >> -1\n            choose_num(7, 24)\n            >> -1\n         \
    \   choose_num(7, 25)\n            >> -1\n            choose_num(7, 26)\n    \
    \        >> -1\n            choose_num(7, 27)\n            >> -1\n           \
    \ choose_num(7, 28)\n            >> -1\n            choose_num(7, 29)\n      \
    \      >> -1\n            choose_num(7, 30)\n            >> -1\n            choose_num(7,\
    \ 31)\n            >> -1\n            choose_num(7, 32)\n            >> -1\n \
    \           choose_num(7, 33)\n            >> -1\n            choose_num(7, 34)\n\
    \            >> -1\n            choose_num(7, 35)\n            >> -1\n       \
    \     choose_num(7, 36)\n            >> -1\n            choose_num(7, 37)\n  \
    \          >> -1\n            choose_num(7, 38)\n            >> -1\n         \
    \   choose_num(7, 39)\n            >> -1\n            choose_num(7, 40)\n    \
    \        >> -1\n            choose_num(7, 41)\n            >> -1\n           \
    \ choose_num(7, 42)\n            >> -1\n            choose_num(7, 43)\n      \
    \      >> -1\n            choose_num(7, 44)\n            >> -1\n            choose_num(7,\
    \ 45)\n            >> -1\n            choose_num(7, 46)\n            >> -1\n \
    \           choose_num(7, 47)\n            >> -1\n            choose_num(7, 48)\n\
    \            >> -1\ndef check(candidate):\n    assert candidate(12, 15) == 14\n\
    \    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt77vq0m1.py\"\
    , line 8\n    choose_num(7, 10)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(7, 9)\n            choose_num(7, 10)\n            choose_num(7,\
    \ 11)\n            choose_num(7, 12)\n            choose_num(7, 13)\n        \
    \    choose_num(7, 14)\n            choose_num(7, 15)\n            choose_num(7,\
    \ 16)\n            choose_num(7, 17)\n            choose_num(7, 18)\n        \
    \    choose_num(7, 19)\n            choose_num(7, 20)\n            choose_num(7,\
    \ 21)\n            choose_num(7, 22)\n            choose_num(7, 23)\n        \
    \    choose_num(7, 24)\n            choose_num(7, 25)\n            choose_num(7,\
    \ 26)\n            choose_num(7, 27)\n            choose_num(7, 28)\n        \
    \    choose_num(7, 29)\n            choose_num(7, 30)\n            choose_num(7,\
    \ 31)\n            choose_num(7, 32)\n            choose_num(7, 33)\n        \
    \    choose_num(7, 34)\n            choose_num(7, 35)\n            choose_num(7,\
    \ 36)\n            choose_num(7, 37)\n            choose_num(7, 38)\n        \
    \    choose_num(7, 39)\n            choose_num(7, 40)\n            choose_num(7,\
    \ 41)\n            choose_num(7, 42)\n            choose_num(7, 43)\n        \
    \    choose_num(7, 44)\n            choose_num(7, 45)\n            choose_num(7,\
    \ 46)\n            choose_num(7, 47)\n            choose_num(7, 48)\n        \
    \    choose_num(7, 49)\n            choose_num(7, 50)\n            choose_num(7,\
    \ 51)\n            choose_num(7, 52)\n            choose_num(7, 53)\n        \
    \    choose_num(7, 54)\n            choose_num(7, 55)\n            choose_num(7,\
    \ 56)\n            choose_num(7, 57)\n            choose_num(7, 58)\n        \
    \    choose_num(7, 59)\n            choose_num(7, 60)\n            choose_num(7,\
    \ 61)\n            choose_num(7, 62)\n            choose_num(7, 63)\n        \
    \    choose_num(7, 64)\n            choose_num(7, 65)\n            choose_num(7,\
    \ 66)\n            choose_num(7, 67)\n            choose_\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmjyfe9m9.py\"\
    , line 8\n    choose_num(7, 9)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(7, 10)\n            >>>10\n            choose_num(7, 11)\n\
    \            >>>-1\n            choose_num(7, 12)\n            >>>-1\n       \
    \     choose_num(7, 13)\n            >>>-1\n            choose_num(7, 14)\n  \
    \          >>>-1\n            choose_num(7, 15)\n            >>>-1\n         \
    \   choose_num(7, 16)\n            >>>-1\n            choose_num(7, 17)\n    \
    \        >>>-1\n            choose_num(7, 18)\n            >>>-1\n           \
    \ choose_num(7, 19)\n            >>>-1\n            choose_num(7, 20)\n      \
    \      >>>-1\n            choose_num(7, 21)\n            >>>-1\n            choose_num(7,\
    \ 22)\n            >>>-1\n            choose_num(7, 23)\n            >>>-1\n \
    \           choose_num(7, 24)\n            >>>-1\n            choose_num(7, 25)\n\
    \            >>>-1\n            choose_num(7, 26)\n            >>>-1\n       \
    \     choose_num(7, 27)\n            >>>-1\n            choose_num(7, 28)\n  \
    \          >>>-1\n            choose_num(7, 29)\n            >>>-1\n         \
    \   choose_num(7, 30)\n            >>>-1\n            choose_num(7, 31)\n    \
    \        >>>-1\n            choose_num(7, 32)\n            >>>-1\n           \
    \ choose_num(7, 33)\n            >>>-1\n            choose_num(7, 34)\n      \
    \      >>>-1\n            choose_num(7, 35)\n            >>>-1\n            choose_num(7,\
    \ 36)\n            >>>-1\n            choose_num(7, 37)\n            >>>-1\n \
    \           choose_num(7, 38)\n            >>>-1\n            choose_num(7, 39)\n\
    \            >>>-1\n            choose_num(7, 40)\n            >>>-1\n       \
    \     choose_num(7, 41)\n            >>>-1\n            choose_num(7, 42)\n  \
    \          >>>-1\n            choose_num(7, 43)\n            >>>-1\n         \
    \   choose_num(7, 44)\n            >>>-1\n            choose_num(7, 45)\n    \
    \        >>>-1\n            choose_num(7, 46)\n            >>>-1\n           \
    \ choose_num(7, 47)\n            >>>-1\n            choose_num(7, 48)\n      \
    \      >>>-1\n            choose_num(7, 49)\n            >>>-1\n            choose_num(7,\
    \ 50)\n            >>>\ndef check(candidate):\n    assert candidate(12, 15) ==\
    \ 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2n9il0jx.py\"\
    , line 8\n    choose_num(7, 10)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \ >>> choose_num(1, 10)\n    10\n    >>> choose_num(100, 1000)\n    1000\n   \
    \ >>> choose_num(100, 0)\n    -1\n    \"\"\"\n    if x <= y:\n        biggest_even\
    \ = y\n    else:\n        biggest_even = x\n    \n    while biggest_even % 2 ==\
    \ 0:\n        biggest_even -= 1\n    \n    return biggest_even\n\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpclhc_iv7.py\"\
    , line 14\n    \"\"\"\n    ^\nSyntaxError: unterminated triple-quoted string literal\
    \ (detected at line 39)\n"
  exit_code: 1
  status: SyntaxError
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(7, 9)\n            >>>8\n            choose_num(7, 10)\n\
    \            >>>-1\n            \"\"\"\n    \"\"\"\n    if x > y:\n        x,\
    \ y = y, x\n    \n    if x % 2 == 0:\n        if y % 2 == 0:\n            return\
    \ x\n        else:\n            return -1\n    else:\n        if y % 2 == 0:\n\
    \            return -1\n        else:\n            return y\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmkc8lv17.py\"\
    , line 8\n    choose_num(7, 9)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(7, 10)\n            choose_num(7, 7)\n            choose_num(7,\
    \ 8)\n            choose_num(7, 9)\n            choose_num(7, 10)\n          \
    \  choose_num(7, 11)\n            choose_num(7, 12)\n            choose_num(7,\
    \ 13)\n            choose_num(7, 14)\n            choose_num(7, 15)\n        \
    \    choose_num(7, 16)\n            choose_num(7, 17)\n            choose_num(7,\
    \ 18)\n            choose_num(7, 19)\n            choose_num(7, 20)\n        \
    \    choose_num(7, 21)\n            choose_num(7, 22)\n            choose_num(7,\
    \ 23)\n            choose_num(7, 24)\n            choose_num(7, 25)\n        \
    \    choose_num(7, 26)\n            choose_num(7, 27)\n            choose_num(7,\
    \ 28)\n            choose_num(7, 29)\n            choose_num(7, 30)\n        \
    \    choose_num(7, 31)\n            choose_num(7, 32)\n            choose_num(7,\
    \ 33)\n            choose_num(7, 34)\n            choose_num(7, 35)\n        \
    \    choose_num(7, 36)\n            choose_num(7, 37)\n            choose_num(7,\
    \ 38)\n            choose_num(7, 39)\n            choose_num(7, 40)\n        \
    \    choose_num(7, 41)\n            choose_num(7, 42)\n            choose_num(7,\
    \ 43)\n            choose_num(7, 44)\n            choose_num(7, 45)\n        \
    \    choose_num(7, 46)\n            choose_num(7, 47)\n            choose_num(7,\
    \ 48)\n            choose_num(7, 49)\n            choose_num(7, 50)\n        \
    \    choose_num(7, 51)\n            choose_num(7, 52)\n            choose_num(7,\
    \ 53)\n            choose_num(7, 54)\n            choose_num(7, 55)\n        \
    \    choose_num(7, 56)\n            choose_num(7, 57)\n            choose_num(7,\
    \ 58)\n            choose_num(7, 59)\n            choose_num(7, 60)\n        \
    \    choose_num(7, 61)\n            choose_num(7, 62)\n            choose_num(7,\
    \ 63)\n            choose_num(7, 64)\n            choose_num(7, \ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnvytl2us.py\"\
    , line 8\n    choose_num(7, 10)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \ >>> choose_num(1, 10)\n    10\n    >>> choose_num(9, 10)\n    10\n    >>> choose_num(9,\
    \ 11)\n    -1\n    >>> choose_num(9, 12)\n    -1\n    >>> choose_num(9, 13)\n\
    \    -1\n    >>> choose_num(9, 14)\n    -1\n    >>> choose_num(9, 15)\n    -1\n\
    \    >>> choose_num(9, 16)\n    -1\n    >>> choose_num(9, 17)\n    -1\n    >>>\
    \ choose_num(9, 18)\n    -1\n    >>> choose_num(9, 19)\n    -1\n    >>> choose_num(9,\
    \ 20)\n    -1\n    >>> choose_num(9, 21)\n    -1\n    >>> choose_num(9, 22)\n\
    \    -1\n    >>> choose_num(9, 23)\n    -1\n    >>> choose_num(9, 24)\n    -1\n\
    \    >>> choose_num(9, 25)\n    -1\n    >>> choose_num(9, 26)\n    -1\n    >>>\
    \ choose_num(9, 27)\n    -1\n    >>> choose_num(9, 28)\n    -1\n    >>> choose_num(9,\
    \ 29)\n    -1\n    >>> choose_num(9, 30)\n    -1\n    >>> choose_num(9, 31)\n\
    \    -1\n    >>> choose_num(9, 32)\n    -1\n    >>> choose_num(9, 33)\n    -1\n\
    \    >>> choose_num(9, 34)\n    -1\n    >>> choose_num(9, 35)\n    -1\n    >>>\
    \ choose_num(9, 36)\n    -1\n    >>> choose_num(9, 37)\n    -1\n    >>> choose_num(9,\
    \ 38)\n    -1\n    >>> choose_num(9, 39)\n    -1\n    >>> choose_num(9, 40)\n\
    \    -1\n    >>> choose_num(9, 41)\n    -1\n    >>> choose_num(9, 42)\n    -1\n\
    \    >>> choose_num(9, 43)\n    -1\n    >>> choose_num(9, 44)\n    -1\n    >>>\
    \ choose_num(9, 45)\n    -1\n    >>> choose_num(9, 46)\n    -1\n    >>> choose_num(9,\
    \ 47)\n    -1\n    >>> choose_num(9, 48)\n    -1\n    >>> choose_num(9, 49)\n\
    \    -1\n    >>> choose_num(9, 50)\n    -1\n    >>> choose_num(9, 51)\n    -1\n\
    \    >>> choose_num(9, 52)\n    -1\n    >>> choose_num(\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwjnuu04p.py\"\
    , line 8\n    >>> choose_num(1, 10)\n    ^^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(7, 8)\n            choose_num(7, 9)\n            choose_num(7,\
    \ 10)\n            choose_num(7, 11)\n            choose_num(7, 12)\n        \
    \    choose_num(7, 13)\n            choose_num(7, 14)\n            choose_num(7,\
    \ 15)\n            choose_num(7, 16)\n            choose_num(7, 17)\n        \
    \    choose_num(7, 18)\n            choose_num(7, 19)\n            choose_num(7,\
    \ 20)\n            choose_num(7, 21)\n            choose_num(7, 22)\n        \
    \    choose_num(7, 23)\n            choose_num(7, 24)\n            choose_num(7,\
    \ 25)\n            choose_num(7, 26)\n            choose_num(7, 27)\n        \
    \    choose_num(7, 28)\n            choose_num(7, 29)\n            choose_num(7,\
    \ 30)\n            choose_num(7, 31)\n            choose_num(7, 32)\n        \
    \    choose_num(7, 33)\n            choose_num(7, 34)\n            choose_num(7,\
    \ 35)\n            choose_num(7, 36)\n            choose_num(7, 37)\n        \
    \    choose_num(7, 38)\n            choose_num(7, 39)\n            choose_num(7,\
    \ 40)\n            choose_num(7, 41)\n            choose_num(7, 42)\n        \
    \    choose_num(7, 43)\n            choose_num(7, 44)\n            choose_num(7,\
    \ 45)\n            choose_num(7, 46)\n            choose_num(7, 47)\n        \
    \    choose_num(7, 48)\n            choose_num(7, 49)\n            choose_num(7,\
    \ 50)\n            choose_num(7, 51)\n            choose_num(7, 52)\n        \
    \    choose_num(7, 53)\n            choose_num(7, 54)\n            choose_num(7,\
    \ 55)\n            choose_num(7, 56)\n            choose_num(7, 57)\n        \
    \    choose_num(7, 58)\n            choose_num(7, 59)\n            choose_num(7,\
    \ 60)\n            choose_num(7, 61)\n            choose_num(7, 62)\n        \
    \    choose_num(7, 63)\n            choose_num(7, 64)\n            choose_num(7,\
    \ 65)\n            choose_num(7, 66)\n            choose_num\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5c36c_38.py\"\
    , line 8\n    choose_num(7, 8)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(7, 9)\n            >>>8\n            choose_num(7, 10)\n\
    \            >>>-1\n            choose_num(7, 11)\n            >>>-1\n       \
    \     choose_num(7, 12)\n            >>>-1\n            choose_num(7, 13)\n  \
    \          >>>-1\n            choose_num(7, 14)\n            >>>-1\n         \
    \   choose_num(7, 15)\n            >>>-1\n            choose_num(7, 16)\n    \
    \        >>>-1\n            choose_num(7, 17)\n            >>>-1\n           \
    \ choose_num(7, 18)\n            >>>-1\n            choose_num(7, 19)\n      \
    \      >>>-1\n            choose_num(7, 20)\n            >>>-1\n            choose_num(7,\
    \ 21)\n            >>>-1\n            choose_num(7, 22)\n            >>>-1\n \
    \           choose_num(7, 23)\n            >>>-1\n            choose_num(7, 24)\n\
    \            >>>-1\n            choose_num(7, 25)\n            >>>-1\n       \
    \     choose_num(7, 26)\n            >>>-1\n            choose_num(7, 27)\n  \
    \          >>>-1\n            choose_num(7, 28)\n            >>>-1\n         \
    \   choose_num(7, 29)\n            >>>-1\n            choose_num(7, 30)\n    \
    \        >>>-1\n            choose_num(7, 31)\n            >>>-1\n           \
    \ choose_num(7, 32)\n            >>>-1\n            choose_num(7, 33)\n      \
    \      >>>-1\n            choose_num(7, 34)\n            >>>-1\n            choose_num(7,\
    \ 35)\n            >>>-1\n            choose_num(7, 36)\n            >>>-1\n \
    \           choose_num(7, 37)\n            >>>-1\n            choose_num(7, 38)\n\
    \            >>>-1\n            choose_num(7, 39)\n            >>>-1\n       \
    \     choose_num(7, 40)\n            >>>-1\n            choose_num(7, 41)\n  \
    \          >>>-1\n            choose_num(7, 42)\n            >>>-1\n         \
    \   choose_num(7, 43)\n            >>>-1\n            choose_num(7, 44)\n    \
    \        >>>-1\n            choose_num(7, 45)\n            >>>-1\n           \
    \ choose_num(7, 46)\n            >>>-1\n            choose_num(7, 47)\n      \
    \      >>>-1\n            choose_num(7, 48)\n            >>>-1\n            choose_num(7,\
    \ 49)\n            >>>\ndef check(candidate):\n    assert candidate(12, 15) ==\
    \ 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpei43rxyo.py\"\
    , line 8\n    choose_num(7, 9)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(7, 10)\n            >>>8\n            choose_num(7, 11)\n\
    \            >>>-1\n            choose_num(7, 12)\n            >>>-1\n       \
    \     choose_num(7, 13)\n            >>>-1\n            choose_num(7, 14)\n  \
    \          >>>-1\n            choose_num(7, 15)\n            >>>-1\n         \
    \   choose_num(7, 16)\n            >>>-1\n            choose_num(7, 17)\n    \
    \        >>>-1\n            choose_num(7, 18)\n            >>>-1\n           \
    \ choose_num(7, 19)\n            >>>-1\n            choose_num(7, 20)\n      \
    \      >>>-1\n            choose_num(7, 21)\n            >>>-1\n            choose_num(7,\
    \ 22)\n            >>>-1\n            choose_num(7, 23)\n            >>>-1\n \
    \           choose_num(7, 24)\n            >>>-1\n            choose_num(7, 25)\n\
    \            >>>-1\n            choose_num(7, 26)\n            >>>-1\n       \
    \     choose_num(7, 27)\n            >>>-1\n            choose_num(7, 28)\n  \
    \          >>>-1\n            choose_num(7, 29)\n            >>>-1\n         \
    \   choose_num(7, 30)\n            >>>-1\n            choose_num(7, 31)\n    \
    \        >>>-1\n            choose_num(7, 32)\n            >>>-1\n           \
    \ choose_num(7, 33)\n            >>>-1\n            choose_num(7, 34)\n      \
    \      >>>-1\n            choose_num(7, 35)\n            >>>-1\n            choose_num(7,\
    \ 36)\n            >>>-1\n            choose_num(7, 37)\n            >>>-1\n \
    \           choose_num(7, 38)\n            >>>-1\n            choose_num(7, 39)\n\
    \            >>>-1\n            choose_num(7, 40)\n            >>>-1\n       \
    \     choose_num(7, 41)\n            >>>-1\n            choose_num(7, 42)\n  \
    \          >>>-1\n            choose_num(7, 43)\n            >>>-1\n         \
    \   choose_num(7, 44)\n            >>>-1\n            choose_num(7, 45)\n    \
    \        >>>-1\n            choose_num(7, 46)\n            >>>-1\n           \
    \ choose_num(7, 47)\n            >>>-1\n            choose_num(7, 48)\n      \
    \      >>>-1\n            choose_num(7, 49)\n            >>>-1\n            choose_num(7,\
    \ 50)\n            >>>\ndef check(candidate):\n    assert candidate(12, 15) ==\
    \ 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpj6towcv0.py\"\
    , line 8\n    choose_num(7, 10)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(7, 10)\n            choose_num(7, 12)\n            choose_num(7,\
    \ 13)\n            choose_num(7, 14)\n            choose_num(7, 15)\n        \
    \    choose_num(7, 16)\n            choose_num(7, 17)\n            choose_num(7,\
    \ 18)\n            choose_num(7, 19)\n            choose_num(7, 20)\n        \
    \    choose_num(7, 21)\n            choose_num(7, 22)\n            choose_num(7,\
    \ 23)\n            choose_num(7, 24)\n            choose_num(7, 25)\n        \
    \    choose_num(7, 26)\n            choose_num(7, 27)\n            choose_num(7,\
    \ 28)\n            choose_num(7, 29)\n            choose_num(7, 30)\n        \
    \    choose_num(7, 31)\n            choose_num(7, 32)\n            choose_num(7,\
    \ 33)\n            choose_num(7, 34)\n            choose_num(7, 35)\n        \
    \    choose_num(7, 36)\n            choose_num(7, 37)\n            choose_num(7,\
    \ 38)\n            choose_num(7, 39)\n            choose_num(7, 40)\n        \
    \    choose_num(7, 41)\n            choose_num(7, 42)\n            choose_num(7,\
    \ 43)\n            choose_num(7, 44)\n            choose_num(7, 45)\n        \
    \    choose_num(7, 46)\n            choose_num(7, 47)\n            choose_num(7,\
    \ 48)\n            choose_num(7, 49)\n            choose_num(7, 50)\n        \
    \    choose_num(7, 51)\n            choose_num(7, 52)\n            choose_num(7,\
    \ 53)\n            choose_num(7, 54)\n            choose_num(7, 55)\n        \
    \    choose_num(7, 56)\n            choose_num(7, 57)\n            choose_num(7,\
    \ 58)\n            choose_num(7, 59)\n            choose_num(7, 60)\n        \
    \    choose_num(7, 61)\n            choose_num(7, 62)\n            choose_num(7,\
    \ 63)\n            choose_num(7, 64)\n            choose_num(7, 65)\n        \
    \    choose_num(7, 66)\n            choose_num(7, 67)\n            choose_num(7,\
    \ 68)\n            choose_num(7, 69)\n            \ndef check(candidate):\n  \
    \  assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgeupd43s.py\"\
    , line 8\n    choose_num(7, 10)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(7, 9)\n            >> 7\n            choose_num(7, 8)\n \
    \           >> -1\n            choose_num(7, 10)\n            >> -1\n        \
    \    choose_num(7, 11)\n            >> -1\n            choose_num(7, 12)\n   \
    \         >> -1\n            choose_num(7, 13)\n            >> -1\n          \
    \  choose_num(7, 14)\n            >> -1\n            choose_num(7, 15)\n     \
    \       >> -1\n            choose_num(7, 16)\n            >> -1\n            choose_num(7,\
    \ 17)\n            >> -1\n            choose_num(7, 18)\n            >> -1\n \
    \           choose_num(7, 19)\n            >> -1\n            choose_num(7, 20)\n\
    \            >> -1\n            choose_num(7, 21)\n            >> -1\n       \
    \     choose_num(7, 22)\n            >> -1\n            choose_num(7, 23)\n  \
    \          >> -1\n            choose_num(7, 24)\n            >> -1\n         \
    \   choose_num(7, 25)\n            >> -1\n            choose_num(7, 26)\n    \
    \        >> -1\n            choose_num(7, 27)\n            >> -1\n           \
    \ choose_num(7, 28)\n            >> -1\n            choose_num(7, 29)\n      \
    \      >> -1\n            choose_num(7, 30)\n            >> -1\n            choose_num(7,\
    \ 31)\n            >> -1\n            choose_num(7, 32)\n            >> -1\n \
    \           choose_num(7, 33)\n            >> -1\n            choose_num(7, 34)\n\
    \            >> -1\n            choose_num(7, 35)\n            >> -1\n       \
    \     choose_num(7, 36)\n            >> -1\n            choose_num(7, 37)\n  \
    \          >> -1\n            choose_num(7, 38)\n            >> -1\n         \
    \   choose_num(7, 39)\n            >> -1\n            choose_num(7, 40)\n    \
    \        >> -1\n            choose_num(7, 41)\n            >> -1\n           \
    \ choose_num(7, 42)\n            >> -1\n            choose_num(7, 43)\n      \
    \      >> -1\n            choose_num(7, 44)\n            >> -1\n            choose_num(7,\
    \ 45)\n            >> -1\n            choose_num(7, 46)\n            >> -1\n \
    \           choose_num(7, 47)\n            >> -1\n            choose_num(7, 48)\n\
    \            >> -1\ndef check(candidate):\n    assert candidate(12, 15) == 14\n\
    \    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplrs80ypa.py\"\
    , line 8\n    choose_num(7, 9)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(7, 10)\n            >>>7\n            \"\"\"\n    \"\"\"\n\
    \    if x > y:\n        x, y = y, x\n    if x % 2 == 0:\n        x -= 1\n    if\
    \ y % 2 == 0:\n        y -= 1\n    while x != y:\n        if x % 2 == 0:\n   \
    \         x -= 1\n            y -= 1\n        elif y % 2 == 0:\n            y\
    \ -= 1\n        else:\n            x -= 1\n            y -= 1\n    return x if\
    \ x % 2 == 0 else -1\n\n\ndef check(candidate):\n    assert candidate(12, 15)\
    \ == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) ==\
    \ 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) ==\
    \ 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n \
    \   assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgewrhngf.py\"\
    , line 8\n    choose_num(7, 10)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(7, 10)\n            >>>7\n            choose_num(7, 8)\n\
    \            >>>8\n            choose_num(7, 9)\n            >>>-1\n         \
    \   choose_num(7, 10)\n            >>>-1\n            choose_num(7, 11)\n    \
    \        >>>-1\n            choose_num(7, 12)\n            >>>-1\n           \
    \ choose_num(7, 13)\n            >>>-1\n            choose_num(7, 14)\n      \
    \      >>>-1\n            choose_num(7, 15)\n            >>>-1\n            choose_num(7,\
    \ 16)\n            >>>-1\n            choose_num(7, 17)\n            >>>-1\n \
    \           choose_num(7, 18)\n            >>>-1\n            choose_num(7, 19)\n\
    \            >>>-1\n            choose_num(7, 20)\n            >>>-1\n       \
    \     choose_num(7, 21)\n            >>>-1\n            choose_num(7, 22)\n  \
    \          >>>-1\n            choose_num(7, 23)\n            >>>-1\n         \
    \   choose_num(7, 24)\n            >>>-1\n            choose_num(7, 25)\n    \
    \        >>>-1\n            choose_num(7, 26)\n            >>>-1\n           \
    \ choose_num(7, 27)\n            >>>-1\n            choose_num(7, 28)\n      \
    \      >>>-1\n            choose_num(7, 29)\n            >>>-1\n            choose_num(7,\
    \ 30)\n            >>>-1\n            choose_num(7, 31)\n            >>>-1\n \
    \           choose_num(7, 32)\n            >>>-1\n            choose_num(7, 33)\n\
    \            >>>-1\n            choose_num(7, 34)\n            >>>-1\n       \
    \     choose_num(7, 35)\n            >>>-1\n            choose_num(7, 36)\n  \
    \          >>>-1\n            choose_num(7, 37)\n            >>>-1\n         \
    \   choose_num(7, 38)\n            >>>-1\n            choose_num(7, 39)\n    \
    \        >>>-1\n            choose_num(7, 40)\n            >>>-1\n           \
    \ choose_num(7, 41)\n            >>>-1\n            choose_num(7, 42)\n      \
    \      >>>-1\n            choose_num(7, 43)\n            >>>-1\n            choose_num(7,\
    \ 44)\n            >>>-1\n            choose_num(7, 45)\n            >>>-1\n \
    \           choose_num(7, 46)\n            >>>-1\n            choose_num(7, 47)\n\
    \            >>>-1\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n\
    \    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxeth63jh.py\"\
    , line 8\n    choose_num(7, 10)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(1, 10)\n            >> 8\n            choose_num(11, 20)\n\
    \            >> -1\n            \"\"\"\n    \"\"\"\n    if x > y:\n        x,\
    \ y = y, x\n    if x % 2 == 0:\n        return x // 2\n    if y % 2 == 0:\n  \
    \      return y // 2\n    if x <= y:\n        return -1\n    return -1\n\n\ndef\
    \ check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppv786alo.py\"\
    , line 8\n    choose_num(1, 10)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(7, 9)\n            choose_num(7, 10)\n            choose_num(7,\
    \ 11)\n            choose_num(7, 12)\n            choose_num(7, 13)\n        \
    \    choose_num(7, 14)\n            choose_num(7, 15)\n            choose_num(7,\
    \ 16)\n            choose_num(7, 17)\n            choose_num(7, 18)\n        \
    \    choose_num(7, 19)\n            choose_num(7, 20)\n            choose_num(7,\
    \ 21)\n            choose_num(7, 22)\n            choose_num(7, 23)\n        \
    \    choose_num(7, 24)\n            choose_num(7, 25)\n            choose_num(7,\
    \ 26)\n            choose_num(7, 27)\n            choose_num(7, 28)\n        \
    \    choose_num(7, 29)\n            choose_num(7, 30)\n            choose_num(7,\
    \ 31)\n            choose_num(7, 32)\n            choose_num(7, 33)\n        \
    \    choose_num(7, 34)\n            choose_num(7, 35)\n            choose_num(7,\
    \ 36)\n            choose_num(7, 37)\n            choose_num(7, 38)\n        \
    \    choose_num(7, 39)\n            choose_num(7, 40)\n            choose_num(7,\
    \ 41)\n            choose_num(7, 42)\n            choose_num(7, 43)\n        \
    \    choose_num(7, 44)\n            choose_num(7, 45)\n            choose_num(7,\
    \ 46)\n            choose_num(7, 47)\n            choose_num(7, 48)\n        \
    \    choose_num(7, 49)\n            choose_num(7, 50)\n            choose_num(7,\
    \ 51)\n            choose_num(7, 52)\n            choose_num(7, 53)\n        \
    \    choose_num(7, 54)\n            choose_num(7, 55)\n            choose_num(7,\
    \ 56)\n            choose_num(7, 57)\n            choose_num(7, 58)\n        \
    \    choose_num(7, 59)\n            choose_num(7, 60)\n            choose_num(7,\
    \ 61)\n            choose_num(7, 62)\n            choose_num(7, 63)\n        \
    \    choose_num(7, 64)\n            choose_num(7, 65)\n            choose_num(7,\
    \ 66)\n            choose_num(7, 67)\n            choose_\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpluq7ii7e.py\"\
    , line 8\n    choose_num(7, 9)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(1, 10)\n            >>>10\n            choose_num(11, 10)\n\
    \            >>>10\n            choose_num(11, 11)\n            >>>-1\n      \
    \      choose_num(11, 12)\n            >>>-1\n            choose_num(11, 13)\n\
    \            >>>-1\n            choose_num(11, 14)\n            >>>-1\n      \
    \      choose_num(11, 15)\n            >>>-1\n            choose_num(11, 16)\n\
    \            >>>-1\n            choose_num(11, 17)\n            >>>-1\n      \
    \      choose_num(11, 18)\n            >>>-1\n            choose_num(11, 19)\n\
    \            >>>-1\n            choose_num(11, 20)\n            >>>-1\n      \
    \      choose_num(11, 21)\n            >>>-1\n            choose_num(11, 22)\n\
    \            >>>-1\n            choose_num(11, 23)\n            >>>-1\n      \
    \      choose_num(11, 24)\n            >>>-1\n            choose_num(11, 25)\n\
    \            >>>-1\n            choose_num(11, 26)\n            >>>-1\n      \
    \      choose_num(11, 27)\n            >>>-1\n            choose_num(11, 28)\n\
    \            >>>-1\n            choose_num(11, 29)\n            >>>-1\n      \
    \      choose_num(11, 30)\n            >>>-1\n            choose_num(11, 31)\n\
    \            >>>-1\n            choose_num(11, 32)\n            >>>-1\n      \
    \      choose_num(11, 33)\n            >>>-1\n            choose_num(11, 34)\n\
    \            >>>-1\n            choose_num(11, 35)\n            >>>-1\n      \
    \      choose_num(11, 36)\n            >>>-1\n            choose_num(11, 37)\n\
    \            >>>-1\n            choose_num(11, 38)\n            >>>-1\n      \
    \      choose_num(11, 39)\n            >>>-1\n            choose_num(11, 40)\n\
    \            >>>-1\n            choose_num(11, 41)\n            >>>-1\n      \
    \      choose_num(11, 42)\n            >>>-1\n            choose_num(11, 43)\n\
    \            >>>-1\n            choose_num(11, 44)\n            >>>-1\n      \
    \      choose_num(11, 45)\n            >>>-1\n            choose_num(11, 46)\n\
    \            >>>-1\n            choose_num(11, 47)\n            >>>-1\n      \
    \      choose_num(11, 48)\n            >>>-1\n            choose_num(11, 49)\n\
    \            >>>-1\ndef check(candidate):\n    assert candidate(12, 15) == 14\n\
    \    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp_snvur4.py\"\
    , line 8\n    choose_num(1, 10)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \ >>> choose_num(7, 3)\n    7\n    >>> choose_num(7, 4)\n    -1\n    >>> choose_num(7,\
    \ 5)\n    -1\n    >>> choose_num(7, 6)\n    -1\n    >>> choose_num(7, 7)\n   \
    \ -1\n    >>> choose_num(7, 8)\n    -1\n    >>> choose_num(7, 9)\n    -1\n   \
    \ >>> choose_num(7, 10)\n    -1\n    >>> choose_num(7, 11)\n    -1\n    >>> choose_num(7,\
    \ 12)\n    -1\n    >>> choose_num(7, 13)\n    -1\n    >>> choose_num(7, 14)\n\
    \    -1\n    >>> choose_num(7, 15)\n    -1\n    >>> choose_num(7, 16)\n    -1\n\
    \    >>> choose_num(7, 17)\n    -1\n    >>> choose_num(7, 18)\n    -1\n    >>>\
    \ choose_num(7, 19)\n    -1\n    >>> choose_num(7, 20)\n    -1\n    >>> choose_num(7,\
    \ 21)\n    -1\n    >>> choose_num(7, 22)\n    -1\n    >>> choose_num(7, 23)\n\
    \    -1\n    >>> choose_num(7, 24)\n    -1\n    >>> choose_num(7, 25)\n    -1\n\
    \    >>> choose_num(7, 26)\n    -1\n    >>> choose_num(7, 27)\n    -1\n    >>>\
    \ choose_num(7, 28)\n    -1\n    >>> choose_num(7, 29)\n    -1\n    >>> choose_num(7,\
    \ 30)\n    -1\n    >>> choose_num(7, 31)\n    -1\n    >>> choose_num(7, 32)\n\
    \    -1\n    >>> choose_num(7, 33)\n    -1\n    >>> choose_num(7, 34)\n    -1\n\
    \    >>> choose_num(7, 35)\n    -1\n    >>> choose_num(7, 36)\n    -1\n    >>>\
    \ choose_num(7, 37)\n    -1\n    >>> choose_num(7, 38)\n    -1\n    >>> choose_num(7,\
    \ 39)\n    -1\n    >>> choose_num(7, 40)\n    -1\n    >>> choose_num(7, 41)\n\
    \    -1\n    >>> choose_num(7, 42)\n    -1\n    >>> choose_num(7, 43)\n    -1\n\
    \    >>> choose_num(7, 44)\n    -1\n    >>> choose_num(7, 45)\n    -1\n    >>>\
    \ choose_num(7, 46)\n    -1\n    >>> choose_num(7, 47)\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcvdxyfr0.py\"\
    , line 8\n    >>> choose_num(7, 3)\n    ^^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(3,4)\n            choose_num(3,5)\n            choose_num(3,6)\n\
    \            choose_num(3,7)\n            choose_num(3,8)\n            choose_num(3,9)\n\
    \            choose_num(3,10)\n            choose_num(3,11)\n            choose_num(3,12)\n\
    \            choose_num(3,13)\n            choose_num(3,14)\n            choose_num(3,15)\n\
    \            choose_num(3,16)\n            choose_num(3,17)\n            choose_num(3,18)\n\
    \            choose_num(3,19)\n            choose_num(3,20)\n            choose_num(3,21)\n\
    \            choose_num(3,22)\n            choose_num(3,23)\n            choose_num(3,24)\n\
    \            choose_num(3,25)\n            choose_num(3,26)\n            choose_num(3,27)\n\
    \            choose_num(3,28)\n            choose_num(3,29)\n            choose_num(3,30)\n\
    \            choose_num(3,31)\n            choose_num(3,32)\n            choose_num(3,33)\n\
    \            choose_num(3,34)\n            choose_num(3,35)\n            choose_num(3,36)\n\
    \            choose_num(3,37)\n            choose_num(3,38)\n            choose_num(3,39)\n\
    \            choose_num(3,40)\n            choose_num(3,41)\n            choose_num(3,42)\n\
    \            choose_num(3,43)\n            choose_num(3,44)\n            choose_num(3,45)\n\
    \            choose_num(3,46)\n            choose_num(3,47)\n            choose_num(3,48)\n\
    \            choose_num(3,49)\n            choose_num(3,50)\n            choose_num(3,51)\n\
    \            choose_num(3,52)\n            choose_num(3,53)\n            choose_num(3,54)\n\
    \            choose_num(3,55)\n            choose_num(3,56)\n            choose_num(3,57)\n\
    \            choose_num(3,58)\n            choose_num(3,59)\n            choose_num(3,60)\n\
    \            choose_num(3,61)\n            choose_num(3,62)\n            choose_num(3,63\n\
    def check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfvyi1zbb.py\"\
    , line 8\n    choose_num(3,4)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(7, 3)\n            >>>5\n            choose_num(7, 4)\n \
    \           >>>-1\n            \"\"\"\n    \"\"\"\n    if x > y:\n        x, y\
    \ = y, x\n    if x % 2 == 0:\n        return x // 2\n    if y % 2 == 0:\n    \
    \    return y // 2\n    if x > y:\n        x, y = y, x\n    if x % 2 == 0 and\
    \ y % 2 == 0:\n        return x // 2 + y // 2\n    if x % 2 == 0 and y % 2 !=\
    \ 0:\n        return x // 2 + 1\n    if x % 2 != 0 and y % 2 == 0:\n        return\
    \ x // 2 + 1\n    if x % 2 != 0 and y % 2 != 0:\n        return x // 2 + y //\
    \ 2\n    return -1\n\n\ndef check(candidate):\n    assert candidate(12, 15) ==\
    \ 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8s45x9hb.py\"\
    , line 8\n    choose_num(7, 3)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(7, 9)\n            >>>8\n            choose_num(7, 10)\n\
    \            >>>-1\n            choose_num(7, 11)\n            >>>-1\n       \
    \     choose_num(7, 12)\n            >>>-1\n            choose_num(7, 13)\n  \
    \          >>>-1\n            choose_num(7, 14)\n            >>>-1\n         \
    \   choose_num(7, 15)\n            >>>-1\n            choose_num(7, 16)\n    \
    \        >>>-1\n            choose_num(7, 17)\n            >>>-1\n           \
    \ choose_num(7, 18)\n            >>>-1\n            choose_num(7, 19)\n      \
    \      >>>-1\n            choose_num(7, 20)\n            >>>-1\n            choose_num(7,\
    \ 21)\n            >>>-1\n            choose_num(7, 22)\n            >>>-1\n \
    \           choose_num(7, 23)\n            >>>-1\n            choose_num(7, 24)\n\
    \            >>>-1\n            choose_num(7, 25)\n            >>>-1\n       \
    \     choose_num(7, 26)\n            >>>-1\n            choose_num(7, 27)\n  \
    \          >>>-1\n            choose_num(7, 28)\n            >>>-1\n         \
    \   choose_num(7, 29)\n            >>>-1\n            choose_num(7, 30)\n    \
    \        >>>-1\n            choose_num(7, 31)\n            >>>-1\n           \
    \ choose_num(7, 32)\n            >>>-1\n            choose_num(7, 33)\n      \
    \      >>>-1\n            choose_num(7, 34)\n            >>>-1\n            choose_num(7,\
    \ 35)\n            >>>-1\n            choose_num(7, 36)\n            >>>-1\n \
    \           choose_num(7, 37)\n            >>>-1\n            choose_num(7, 38)\n\
    \            >>>-1\n            choose_num(7, 39)\n            >>>-1\n       \
    \     choose_num(7, 40)\n            >>>-1\n            choose_num(7, 41)\n  \
    \          >>>-1\n            choose_num(7, 42)\n            >>>-1\n         \
    \   choose_num(7, 43)\n            >>>-1\n            choose_num(7, 44)\n    \
    \        >>>-1\n            choose_num(7, 45)\n            >>>-1\n           \
    \ choose_num(7, 46)\n            >>>-1\n            choose_num(7, 47)\n      \
    \      >>>-1\n            choose_num(7, 48)\n            >>>-1\n            choose_num(7,\
    \ 49)\n            >>>\ndef check(candidate):\n    assert candidate(12, 15) ==\
    \ 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwct3d91n.py\"\
    , line 8\n    choose_num(7, 9)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \ >>> choose_num(7, 9)\n    7\n    >>> choose_num(7, 10)\n    -1\n    >>> choose_num(7,\
    \ 11)\n    -1\n    >>> choose_num(7, 12)\n    -1\n    \"\"\"\n    if x > y:\n\
    \        x, y = y, x\n    if x % 2 == 0:\n        if y % 2 == 0:\n           \
    \ return x\n        else:\n            return -1\n    else:\n        if y % 2\
    \ == 0:\n            return -1\n        else:\n            return y\n\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps5jetwhf.py\"\
    , line 16\n    \"\"\"\n    ^\nSyntaxError: unterminated triple-quoted string literal\
    \ (detected at line 44)\n"
  exit_code: 1
  status: SyntaxError
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \ >>> choose_num(1, 10)\n    10\n    >>> choose_num(7, 10)\n    -1\n    >>> choose_num(7,\
    \ 8)\n    -1\n    \"\"\"\n    if x > y:\n        x, y = y, x\n    \n    if x %\
    \ 2 == 0:\n        if y % 2 == 0:\n            return x\n        else:\n     \
    \       return y\n    else:\n        if y % 2 == 0:\n            return y\n  \
    \      else:\n            return x\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprt5v8yya.py\"\
    , line 14\n    \"\"\"\n    ^\nSyntaxError: unterminated triple-quoted string literal\
    \ (detected at line 42)\n"
  exit_code: 1
  status: SyntaxError
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(3,5)\n            choose_num(3,4)\n            choose_num(3,6)\n\
    \            choose_num(3,7)\n            choose_num(3,8)\n            choose_num(3,9)\n\
    \            choose_num(3,10)\n            choose_num(3,11)\n            choose_num(3,12)\n\
    \            choose_num(3,13)\n            choose_num(3,14)\n            choose_num(3,15)\n\
    \            choose_num(3,16)\n            choose_num(3,17)\n            choose_num(3,18)\n\
    \            choose_num(3,19)\n            choose_num(3,20)\n            choose_num(3,21)\n\
    \            choose_num(3,22)\n            choose_num(3,23)\n            choose_num(3,24)\n\
    \            choose_num(3,25)\n            choose_num(3,26)\n            choose_num(3,27)\n\
    \            choose_num(3,28)\n            choose_num(3,29)\n            choose_num(3,30)\n\
    \            choose_num(3,31)\n            choose_num(3,32)\n            choose_num(3,33)\n\
    \            choose_num(3,34)\n            choose_num(3,35)\n            choose_num(3,36)\n\
    \            choose_num(3,37)\n            choose_num(3,38)\n            choose_num(3,39)\n\
    \            choose_num(3,40)\n            choose_num(3,41)\n            choose_num(3,42)\n\
    \            choose_num(3,43)\n            choose_num(3,44)\n            choose_num(3,45)\n\
    \            choose_num(3,46)\n            choose_num(3,47)\n            choose_num(3,48)\n\
    \            choose_num(3,49)\n            choose_num(3,50)\n            choose_num(3,51)\n\
    \            choose_num(3,52)\n            choose_num(3,53)\n            choose_num(3,54)\n\
    \            choose_num(3,55)\n            choose_num(3,56)\n            choose_num(3,57)\n\
    \            choose_num(3,58)\n            choose_num(3,59)\n            choose_num(3,60)\n\
    \            choose_num(3,61)\n            choose_num(3,62)\n            choose_num(3,63\n\
    def check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqmlamemf.py\"\
    , line 8\n    choose_num(3,5)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \ >>> choose_num(1, 10)\n    10\n    >>> choose_num(9, 10)\n    10\n    >>> choose_num(11,\
    \ 10)\n    10\n    >>> choose_num(11, 11)\n    -1\n    \"\"\"\n    if x > y:\n\
    \        x, y = y, x\n    if x % 2 == 0:\n        if y % 2 == 0:\n           \
    \ return x\n        else:\n            return y\n    else:\n        if y % 2 ==\
    \ 0:\n            return y\n        else:\n            return x\n\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgqpuw_lk.py\"\
    , line 16\n    \"\"\"\n    ^\nSyntaxError: unterminated triple-quoted string literal\
    \ (detected at line 44)\n"
  exit_code: 1
  status: SyntaxError
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(7, 10)\n            >>>7\n            choose_num(7, 11)\n\
    \            >>>-1\n            choose_num(7, 12)\n            >>>-1\n       \
    \     choose_num(7, 13)\n            >>>-1\n            choose_num(7, 14)\n  \
    \          >>>-1\n            choose_num(7, 15)\n            >>>-1\n         \
    \   choose_num(7, 16)\n            >>>-1\n            choose_num(7, 17)\n    \
    \        >>>-1\n            choose_num(7, 18)\n            >>>-1\n           \
    \ choose_num(7, 19)\n            >>>-1\n            choose_num(7, 20)\n      \
    \      >>>-1\n            choose_num(7, 21)\n            >>>-1\n            choose_num(7,\
    \ 22)\n            >>>-1\n            choose_num(7, 23)\n            >>>-1\n \
    \           choose_num(7, 24)\n            >>>-1\n            choose_num(7, 25)\n\
    \            >>>-1\n            choose_num(7, 26)\n            >>>-1\n       \
    \     choose_num(7, 27)\n            >>>-1\n            choose_num(7, 28)\n  \
    \          >>>-1\n            choose_num(7, 29)\n            >>>-1\n         \
    \   choose_num(7, 30)\n            >>>-1\n            choose_num(7, 31)\n    \
    \        >>>-1\n            choose_num(7, 32)\n            >>>-1\n           \
    \ choose_num(7, 33)\n            >>>-1\n            choose_num(7, 34)\n      \
    \      >>>-1\n            choose_num(7, 35)\n            >>>-1\n            choose_num(7,\
    \ 36)\n            >>>-1\n            choose_num(7, 37)\n            >>>-1\n \
    \           choose_num(7, 38)\n            >>>-1\n            choose_num(7, 39)\n\
    \            >>>-1\n            choose_num(7, 40)\n            >>>-1\n       \
    \     choose_num(7, 41)\n            >>>-1\n            choose_num(7, 42)\n  \
    \          >>>-1\n            choose_num(7, 43)\n            >>>-1\n         \
    \   choose_num(7, 44)\n            >>>-1\n            choose_num(7, 45)\n    \
    \        >>>-1\n            choose_num(7, 46)\n            >>>-1\n           \
    \ choose_num(7, 47)\n            >>>-1\n            choose_num(7, 48)\n      \
    \      >>>-1\n            choose_num(7, 49)\n            >>>-1\n            choose_num(7,\
    \ 50)\n            >>>\ndef check(candidate):\n    assert candidate(12, 15) ==\
    \ 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4b4clkon.py\"\
    , line 8\n    choose_num(7, 10)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(7, 12)\n            >> 12\n            choose_num(7, 13)\n\
    \            >> -1\n            choose_num(7, 14)\n            >> -1\n       \
    \     choose_num(7, 15)\n            >> -1\n            choose_num(7, 16)\n  \
    \          >> -1\n            choose_num(7, 17)\n            >> -1\n         \
    \   choose_num(7, 18)\n            >> 18\n            choose_num(7, 19)\n    \
    \        >> -1\n            choose_num(7, 20)\n            >> -1\n           \
    \ choose_num(7, 21)\n            >> -1\n            choose_num(7, 22)\n      \
    \      >> -1\n            choose_num(7, 23)\n            >> -1\n            choose_num(7,\
    \ 24)\n            >> -1\n            choose_num(7, 25)\n            >> 25\n \
    \           choose_num(7, 26)\n            >> -1\n            choose_num(7, 27)\n\
    \            >> -1\n            choose_num(7, 28)\n            >> -1\n       \
    \     choose_num(7, 29)\n            >> -1\n            choose_num(7, 30)\n  \
    \          >> -1\n            choose_num(7, 31)\n            >> -1\n         \
    \   choose_num(7, 32)\n            >> -1\n            choose_num(7, 33)\n    \
    \        >> -1\n            choose_num(7, 34)\n            >> -1\n           \
    \ choose_num(7, 35)\n            >> 35\n            choose_num(7, 36)\n      \
    \      >> -1\n            choose_num(7, 37)\n            >> -1\n            choose_num(7,\
    \ 38)\n            >> -1\n            choose_num(7, 39)\n            >> -1\n \
    \           choose_num(7, 40)\n            >> -1\n            choose_num(7, 41)\n\
    \            >> -1\n            choose_num(7, 42)\n            >> -1\n       \
    \     choose_num(7, 43)\n            >> -1\n            choose_num(7, 44)\n  \
    \          >> -1\n            choose_num(7, 45)\n            >> -1\n         \
    \   choose_num(7, 46)\n            >> -1\n            choose_num(7, 47)\n    \
    \        >> -1\n            choose_num(7, 48)\n            >> -1\n           \
    \ choose_num(7, 49)\n            >> -1\n            choose_num(7, 50)\n      \
    \      >> -1\n            choose_num(7, 51)\n            >> -1\n            choose_num(7,\
    \ 52)\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert\
    \ candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert\
    \ candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27,\
    \ 10) == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546)\
    \ == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpohqwpmv2.py\"\
    , line 8\n    choose_num(7, 12)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(7, 12)\n            >> 7\n            choose_num(7, 13)\n\
    \            >> -1\n            choose_num(7, 14)\n            >> -1\n       \
    \     choose_num(7, 15)\n            >> -1\n            choose_num(7, 16)\n  \
    \          >> -1\n            choose_num(7, 17)\n            >> -1\n         \
    \   choose_num(7, 18)\n            >> -1\n            choose_num(7, 19)\n    \
    \        >> -1\n            choose_num(7, 20)\n            >> -1\n           \
    \ choose_num(7, 21)\n            >> -1\n            choose_num(7, 22)\n      \
    \      >> -1\n            choose_num(7, 23)\n            >> -1\n            choose_num(7,\
    \ 24)\n            >> -1\n            choose_num(7, 25)\n            >> -1\n \
    \           choose_num(7, 26)\n            >> -1\n            choose_num(7, 27)\n\
    \            >> -1\n            choose_num(7, 28)\n            >> -1\n       \
    \     choose_num(7, 29)\n            >> -1\n            choose_num(7, 30)\n  \
    \          >> -1\n            choose_num(7, 31)\n            >> -1\n         \
    \   choose_num(7, 32)\n            >> -1\n            choose_num(7, 33)\n    \
    \        >> -1\n            choose_num(7, 34)\n            >> -1\n           \
    \ choose_num(7, 35)\n            >> -1\n            choose_num(7, 36)\n      \
    \      >> -1\n            choose_num(7, 37)\n            >> -1\n            choose_num(7,\
    \ 38)\n            >> -1\n            choose_num(7, 39)\n            >> -1\n \
    \           choose_num(7, 40)\n            >> -1\n            choose_num(7, 41)\n\
    \            >> -1\n            choose_num(7, 42)\n            >> -1\n       \
    \     choose_num(7, 43)\n            >> -1\n            choose_num(7, 44)\n  \
    \          >> -1\n            choose_num(7, 45)\n            >> -1\n         \
    \   choose_num(7, 46)\n            >> -1\n            choose_num(7, 47)\n    \
    \        >> -1\n            choose_num(7, 48)\n            >> -1\n           \
    \ choose_num(7, 49)\n            >> -1\n            choose_num(7, 50)\n      \
    \      >> -1\n            choose_num(7, 51)\n            >> -1\n            choose_num(7,\
    \ 52)\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert\
    \ candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert\
    \ candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27,\
    \ 10) == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546)\
    \ == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzuk7vwcy.py\"\
    , line 8\n    choose_num(7, 12)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(7, 9)\n            choose_num(7, 8)\n            choose_num(7,\
    \ 7)\n            choose_num(7, 6)\n            choose_num(7, 5)\n           \
    \ choose_num(7, 4)\n            choose_num(7, 3)\n            choose_num(7, 2)\n\
    \            choose_num(7, 1)\n            choose_num(7, 0)\n            choose_num(6,\
    \ 9)\n            choose_num(6, 8)\n            choose_num(6, 7)\n           \
    \ choose_num(6, 6)\n            choose_num(6, 5)\n            choose_num(6, 4)\n\
    \            choose_num(6, 3)\n            choose_num(6, 2)\n            choose_num(6,\
    \ 1)\n            choose_num(6, 0)\n            choose_num(5, 9)\n           \
    \ choose_num(5, 8)\n            choose_num(5, 7)\n            choose_num(5, 6)\n\
    \            choose_num(5, 5)\n            choose_num(5, 4)\n            choose_num(5,\
    \ 3)\n            choose_num(5, 2)\n            choose_num(5, 1)\n           \
    \ choose_num(5, 0)\n            choose_num(4, 9)\n            choose_num(4, 8)\n\
    \            choose_num(4, 7)\n            choose_num(4, 6)\n            choose_num(4,\
    \ 5)\n            choose_num(4, 4)\n            choose_num(4, 3)\n           \
    \ choose_num(4, 2)\n            choose_num(4, 1)\n            choose_num(4, 0)\n\
    \            choose_num(3, 9)\n            choose_num(3, 8)\n            choose_num(3,\
    \ 7)\n            choose_num(3, 6)\n            choose_num(3, 5)\n           \
    \ choose_num(3, 4)\n            choose_num(3, 3)\n            choose_num(3, 2)\n\
    \            choose_num(3, 1)\n            choose_num(3, 0)\n            choose_num(2,\
    \ 9)\n            choose_num(2, 8)\n            choose_num(2, 7)\n           \
    \ choose_num(2, 6)\n            choose_num(2, 5)\n            choose_num(2, 4)\n\
    \            choose_num(2, 3)\n            choose_num(2, 2)\n            choose_num(2,\
    \ 1)\n            choose_num(2, 0)\n            choose_num(1, 9)\n           \
    \ choose_num(1, 8)\n            choose_num(1, 7)\n            choose_num(1, 6)\n\
    \            choose_num(1, 5)\n            choose_num(1, 4)\n            choose_num(1,\
    \ 3)\n            choose_num(1, 2)\n            choose_num(1, 1)\n           \
    \ choose_num(1, 0)\n            choose_\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkatqbfqc.py\"\
    , line 8\n    choose_num(7, 9)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(7, 9)\n            choose_num(7, 10)\n            choose_num(7,\
    \ 11)\n            choose_num(7, 12)\n            choose_num(7, 13)\n        \
    \    choose_num(7, 14)\n            choose_num(7, 15)\n            choose_num(7,\
    \ 16)\n            choose_num(7, 17)\n            choose_num(7, 18)\n        \
    \    choose_num(7, 19)\n            choose_num(7, 20)\n            choose_num(7,\
    \ 21)\n            choose_num(7, 22)\n            choose_num(7, 23)\n        \
    \    choose_num(7, 24)\n            choose_num(7, 25)\n            choose_num(7,\
    \ 26)\n            choose_num(7, 27)\n            choose_num(7, 28)\n        \
    \    choose_num(7, 29)\n            choose_num(7, 30)\n            choose_num(7,\
    \ 31)\n            choose_num(7, 32)\n            choose_num(7, 33)\n        \
    \    choose_num(7, 34)\n            choose_num(7, 35)\n            choose_num(7,\
    \ 36)\n            choose_num(7, 37)\n            choose_num(7, 38)\n        \
    \    choose_num(7, 39)\n            choose_num(7, 40)\n            choose_num(7,\
    \ 41)\n            choose_num(7, 42)\n            choose_num(7, 43)\n        \
    \    choose_num(7, 44)\n            choose_num(7, 45)\n            choose_num(7,\
    \ 46)\n            choose_num(7, 47)\n            choose_num(7, 48)\n        \
    \    choose_num(7, 49)\n            choose_num(7, 50)\n            choose_num(7,\
    \ 51)\n            choose_num(7, 52)\n            choose_num(7, 53)\n        \
    \    choose_num(7, 54)\n            choose_num(7, 55)\n            choose_num(7,\
    \ 56)\n            choose_num(7, 57)\n            choose_num(7, 58)\n        \
    \    choose_num(7, 59)\n            choose_num(7, 60)\n            choose_num(7,\
    \ 61)\n            choose_num(7, 62)\n            choose_num(7, 63)\n        \
    \    choose_num(7, 64)\n            choose_num(7, 65)\n            choose_num(7,\
    \ 66)\n            choose_num(7, 67)\n            choose_\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd4schhsw.py\"\
    , line 8\n    choose_num(7, 9)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(7, 8)\n            >> 8\n            choose_num(7, 10)\n\
    \            >> -1\n            choose_num(7, 11)\n            >> -1\n       \
    \     choose_num(7, 12)\n            >> -1\n            choose_num(7, 13)\n  \
    \          >> -1\n            choose_num(7, 14)\n            >> -1\n         \
    \   choose_num(7, 15)\n            >> -1\n            choose_num(7, 16)\n    \
    \        >> -1\n            choose_num(7, 17)\n            >> -1\n           \
    \ choose_num(7, 18)\n            >> -1\n            choose_num(7, 19)\n      \
    \      >> -1\n            choose_num(7, 20)\n            >> -1\n            choose_num(7,\
    \ 21)\n            >> -1\n            choose_num(7, 22)\n            >> -1\n \
    \           choose_num(7, 23)\n            >> -1\n            choose_num(7, 24)\n\
    \            >> -1\n            choose_num(7, 25)\n            >> -1\n       \
    \     choose_num(7, 26)\n            >> -1\n            choose_num(7, 27)\n  \
    \          >> -1\n            choose_num(7, 28)\n            >> -1\n         \
    \   choose_num(7, 29)\n            >> -1\n            choose_num(7, 30)\n    \
    \        >> -1\n            choose_num(7, 31)\n            >> -1\n           \
    \ choose_num(7, 32)\n            >> -1\n            choose_num(7, 33)\n      \
    \      >> -1\n            choose_num(7, 34)\n            >> -1\n            choose_num(7,\
    \ 35)\n            >> -1\n            choose_num(7, 36)\n            >> -1\n \
    \           choose_num(7, 37)\n            >> -1\n            choose_num(7, 38)\n\
    \            >> -1\n            choose_num(7, 39)\n            >> -1\n       \
    \     choose_num(7, 40)\n            >> -1\n            choose_num(7, 41)\n  \
    \          >> -1\n            choose_num(7, 42)\n            >> -1\n         \
    \   choose_num(7, 43)\n            >> -1\n            choose_num(7, 44)\n    \
    \        >> -1\n            choose_num(7, 45)\n            >> -1\n           \
    \ choose_num(7, 46)\n            >> -1\n            choose_num(7, 47)\n      \
    \      >> -1\n            choose_num(7, 48)\n            >> -1\n            choose_num(7,\
    \ 49)\n            >> \ndef check(candidate):\n    assert candidate(12, 15) ==\
    \ 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpao_scqo7.py\"\
    , line 8\n    choose_num(7, 8)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(7, 8)\n            >>>8\n            choose_num(7, 10)\n\
    \            >>>-1\n            choose_num(7, 11)\n            >>>-1\n       \
    \     choose_num(7, 12)\n            >>>-1\n            choose_num(7, 13)\n  \
    \          >>>-1\n            choose_num(7, 14)\n            >>>-1\n         \
    \   choose_num(7, 15)\n            >>>-1\n            choose_num(7, 16)\n    \
    \        >>>-1\n            choose_num(7, 17)\n            >>>-1\n           \
    \ choose_num(7, 18)\n            >>>-1\n            choose_num(7, 19)\n      \
    \      >>>-1\n            choose_num(7, 20)\n            >>>-1\n            choose_num(7,\
    \ 21)\n            >>>-1\n            choose_num(7, 22)\n            >>>-1\n \
    \           choose_num(7, 23)\n            >>>-1\n            choose_num(7, 24)\n\
    \            >>>-1\n            choose_num(7, 25)\n            >>>-1\n       \
    \     choose_num(7, 26)\n            >>>-1\n            choose_num(7, 27)\n  \
    \          >>>-1\n            choose_num(7, 28)\n            >>>-1\n         \
    \   choose_num(7, 29)\n            >>>-1\n            choose_num(7, 30)\n    \
    \        >>>-1\n            choose_num(7, 31)\n            >>>-1\n           \
    \ choose_num(7, 32)\n            >>>-1\n            choose_num(7, 33)\n      \
    \      >>>-1\n            choose_num(7, 34)\n            >>>-1\n            choose_num(7,\
    \ 35)\n            >>>-1\n            choose_num(7, 36)\n            >>>-1\n \
    \           choose_num(7, 37)\n            >>>-1\n            choose_num(7, 38)\n\
    \            >>>-1\n            choose_num(7, 39)\n            >>>-1\n       \
    \     choose_num(7, 40)\n            >>>-1\n            choose_num(7, 41)\n  \
    \          >>>-1\n            choose_num(7, 42)\n            >>>-1\n         \
    \   choose_num(7, 43)\n            >>>-1\n            choose_num(7, 44)\n    \
    \        >>>-1\n            choose_num(7, 45)\n            >>>-1\n           \
    \ choose_num(7, 46)\n            >>>-1\n            choose_num(7, 47)\n      \
    \      >>>-1\n            choose_num(7, 48)\n            >>>-1\n            choose_num(7,\
    \ 49)\n            >>>\ndef check(candidate):\n    assert candidate(12, 15) ==\
    \ 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc1l1u5w6.py\"\
    , line 8\n    choose_num(7, 8)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(7, 10)\n            >>>8\n            choose_num(7, 8)\n\
    \            >>>-1\n            \"\"\"\n    \"\"\"\n    if x > y:\n        x,\
    \ y = y, x\n    if x % 2 == 0:\n        if y % 2 == 0:\n            return x\n\
    \        else:\n            return y\n    else:\n        if y % 2 == 0:\n    \
    \        return y\n        else:\n            return x\n\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbrp8wbzj.py\"\
    , line 8\n    choose_num(7, 10)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(7, 10)\n            >>>8\n            choose_num(7, 11)\n\
    \            >>>-1\n            \"\"\"\n    \"\"\"\n    if x > y:\n        x,\
    \ y = y, x\n    if x % 2 == 0:\n        if y % 2 == 0:\n            return x\n\
    \        else:\n            return -1\n    else:\n        if y % 2 == 0:\n   \
    \         return -1\n        else:\n            return x\n\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjf8p_fgo.py\"\
    , line 8\n    choose_num(7, 10)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(6, 8)\n            choose_num(6, 10)\n            choose_num(6,\
    \ 12)\n            choose_num(6, 14)\n            choose_num(6, 16)\n        \
    \    choose_num(6, 18)\n            choose_num(6, 20)\n            choose_num(6,\
    \ 22)\n            choose_num(6, 24)\n            choose_num(6, 26)\n        \
    \    choose_num(6, 28)\n            choose_num(6, 30)\n            choose_num(6,\
    \ 32)\n            choose_num(6, 34)\n            choose_num(6, 36)\n        \
    \    choose_num(6, 38)\n            choose_num(6, 40)\n            choose_num(6,\
    \ 42)\n            choose_num(6, 44)\n            choose_num(6, 46)\n        \
    \    choose_num(6, 48)\n            choose_num(6, 50)\n            choose_num(6,\
    \ 52)\n            choose_num(6, 54)\n            choose_num(6, 56)\n        \
    \    choose_num(6, 58)\n            choose_num(6, 60)\n            choose_num(6,\
    \ 62)\n            choose_num(6, 64)\n            choose_num(6, 66)\n        \
    \    choose_num(6, 68)\n            choose_num(6, 70)\n            choose_num(6,\
    \ 72)\n            choose_num(6, 74)\n            choose_num(6, 76)\n        \
    \    choose_num(6, 78)\n            choose_num(6, 80)\n            choose_num(6,\
    \ 82)\n            choose_num(6, 84)\n            choose_num(6, 86)\n        \
    \    choose_num(6, 88)\n            choose_num(6, 90)\n            choose_num(6,\
    \ 92)\n            choose_num(6, 94)\n            choose_num(6, 96)\n        \
    \    choose_num(6, 98)\n            choose_num(6, 100)\n            choose_num(6,\
    \ 102)\n            choose_num(6, 104)\n            choose_num(6, 106)\n     \
    \       choose_num(6, 108)\n            choose_num(6, 110)\n            choose_num(6,\
    \ 112)\n            choose_num(6, 114)\n            choose_num(6, 116)\n     \
    \       choose_num(6, 118)\n            choose_num(6, 120)\n            choose_num(6,\
    \ 122)\n            choose_num(6, 124)\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpinru5efk.py\"\
    , line 8\n    choose_num(6, 8)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(7, 10)\n            >> 7\n            choose_num(7, 11)\n\
    \            >> -1\n            choose_num(7, 12)\n            >> -1\n       \
    \     choose_num(7, 13)\n            >> -1\n            choose_num(7, 14)\n  \
    \          >> -1\n            choose_num(7, 15)\n            >> -1\n         \
    \   choose_num(7, 16)\n            >> -1\n            choose_num(7, 17)\n    \
    \        >> -1\n            choose_num(7, 18)\n            >> -1\n           \
    \ choose_num(7, 19)\n            >> -1\n            choose_num(7, 20)\n      \
    \      >> -1\n            choose_num(7, 21)\n            >> -1\n            choose_num(7,\
    \ 22)\n            >> -1\n            choose_num(7, 23)\n            >> -1\n \
    \           choose_num(7, 24)\n            >> -1\n            choose_num(7, 25)\n\
    \            >> -1\n            choose_num(7, 26)\n            >> -1\n       \
    \     choose_num(7, 27)\n            >> -1\n            choose_num(7, 28)\n  \
    \          >> -1\n            choose_num(7, 29)\n            >> -1\n         \
    \   choose_num(7, 30)\n            >> -1\n            choose_num(7, 31)\n    \
    \        >> -1\n            choose_num(7, 32)\n            >> -1\n           \
    \ choose_num(7, 33)\n            >> -1\n            choose_num(7, 34)\n      \
    \      >> -1\n            choose_num(7, 35)\n            >> -1\n            choose_num(7,\
    \ 36)\n            >> -1\n            choose_num(7, 37)\n            >> -1\n \
    \           choose_num(7, 38)\n            >> -1\n            choose_num(7, 39)\n\
    \            >> -1\n            choose_num(7, 40)\n            >> -1\n       \
    \     choose_num(7, 41)\n            >> -1\n            choose_num(7, 42)\n  \
    \          >> -1\n            choose_num(7, 43)\n            >> -1\n         \
    \   choose_num(7, 44)\n            >> -1\n            choose_num(7, 45)\n    \
    \        >> -1\n            choose_num(7, 46)\n            >> -1\n           \
    \ choose_num(7, 47)\n            >> -1\n            choose_num(7, 48)\n      \
    \      >> -1\n            choose_num(7, 49)\n            >> -1\n            choose_num(7,\
    \ 50)\n            >> \ndef check(candidate):\n    assert candidate(12, 15) ==\
    \ 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsm_s4jas.py\"\
    , line 8\n    choose_num(7, 10)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(7, 3)\n            >>>6\n            choose_num(7, 4)\n \
    \           >>>-1\n            \"\"\"\n    \"\"\"\n    if x >= y:\n        return\
    \ -1\n    if x % 2 == 0:\n        return x // 2\n    if y % 2 == 0:\n        return\
    \ y // 2\n    if x > y:\n        return choose_num(y - 1, x)\n    if x < y:\n\
    \        return choose_num(y, x - 1)\n    return -1\n\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnug45503.py\"\
    , line 8\n    choose_num(7, 3)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(7, 12)\n            >>>12\n            choose_num(7, 13)\n\
    \            >>>-1\n            choose_num(7, 14)\n            >>>-1\n       \
    \     choose_num(7, 15)\n            >>>-1\n            choose_num(7, 16)\n  \
    \          >>>-1\n            choose_num(7, 17)\n            >>>-1\n         \
    \   choose_num(7, 18)\n            >>>-1\n            choose_num(7, 19)\n    \
    \        >>>-1\n            choose_num(7, 20)\n            >>>-1\n           \
    \ choose_num(7, 21)\n            >>>-1\n            choose_num(7, 22)\n      \
    \      >>>-1\n            choose_num(7, 23)\n            >>>-1\n            choose_num(7,\
    \ 24)\n            >>>-1\n            choose_num(7, 25)\n            >>>-1\n \
    \           choose_num(7, 26)\n            >>>-1\n            choose_num(7, 27)\n\
    \            >>>-1\n            choose_num(7, 28)\n            >>>-1\n       \
    \     choose_num(7, 29)\n            >>>-1\n            choose_num(7, 30)\n  \
    \          >>>-1\n            choose_num(7, 31)\n            >>>-1\n         \
    \   choose_num(7, 32)\n            >>>-1\n            choose_num(7, 33)\n    \
    \        >>>-1\n            choose_num(7, 34)\n            >>>-1\n           \
    \ choose_num(7, 35)\n            >>>-1\n            choose_num(7, 36)\n      \
    \      >>>-1\n            choose_num(7, 37)\n            >>>-1\n            choose_num(7,\
    \ 38)\n            >>>-1\n            choose_num(7, 39)\n            >>>-1\n \
    \           choose_num(7, 40)\n            >>>-1\n            choose_num(7, 41)\n\
    \            >>>-1\n            choose_num(7, 42)\n            >>>-1\n       \
    \     choose_num(7, 43)\n            >>>-1\n            choose_num(7, 44)\n  \
    \          >>>-1\n            choose_num(7, 45)\n            >>>-1\n         \
    \   choose_num(7, 46)\n            >>>-1\n            choose_num(7, 47)\n    \
    \        >>>-1\n            choose_num(7, 48)\n            >>>-1\n           \
    \ choose_num(7, 49)\n            >>>-1\n            choose_num(7, 50)\n      \
    \      >>>-1\n            choose_num(7, 51)\n            >>>-1\n            choose_num(7,\
    \ 52)\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert\
    \ candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert\
    \ candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27,\
    \ 10) == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546)\
    \ == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyfslbmle.py\"\
    , line 8\n    choose_num(7, 12)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(7, 8)\n            > 8\n            choose_num(7, 9)\n  \
    \          > -1\n            choose_num(8, 9)\n            > -1\n            choose_num(9,\
    \ 9)\n            > -1\n            choose_num(9, 10)\n            > -1\n    \
    \        choose_num(10, 10)\n            > 10\n            choose_num(11, 10)\n\
    \            > -1\n            choose_num(11, 11)\n            > 11\n        \
    \    choose_num(12, 11)\n            > -1\n            choose_num(12, 12)\n  \
    \          > 12\n            choose_num(13, 12)\n            > -1\n          \
    \  choose_num(13, 13)\n            > 13\n            choose_num(14, 13)\n    \
    \        > -1\n            choose_num(14, 14)\n            > -1\n            choose_num(15,\
    \ 14)\n            > -1\n            choose_num(15, 15)\n            > -1\n  \
    \          choose_num(16, 15)\n            > -1\n            choose_num(16, 16)\n\
    \            > -1\n            choose_num(17, 16)\n            > -1\n        \
    \    choose_num(17, 17)\n            > 17\n            choose_num(18, 17)\n  \
    \          > -1\n            choose_num(18, 18)\n            > -1\n          \
    \  choose_num(19, 18)\n            > -1\n            choose_num(19, 19)\n    \
    \        > -1\n            choose_num(20, 19)\n            > -1\n            choose_num(20,\
    \ 20)\n            > 20\n            choose_num(21, 20)\n            > -1\n  \
    \          choose_num(21, 21)\n            > 21\n            choose_num(22, 21)\n\
    \            > -1\n            choose_num(22, 22)\n            > 22\n        \
    \    choose_num(23, 22)\n            > -1\n            choose_num(23, 23)\n  \
    \          > 23\n            choose_num(24, 23)\n            > -1\n          \
    \  choose_num(24, 24)\n            > -1\n            choose_num(25, 24)\n    \
    \        > -1\n            choose_num(25, 25)\n            > 25\n            choose_num(26,\
    \ 25)\n            > -1\n            choose_num(26, 26)\n            > -1\n  \
    \          choose_num(27, 26)\n            > -1\n            choose_num(27, 27)\n\
    \            > 27\n            choose_num(28, 27)\n            > -1\n        \
    \    choose_num(28, 28)\n            > -1\n\ndef check(candidate):\n    assert\
    \ candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33,\
    \ 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6,\
    \ 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) ==\
    \ -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppqva4odf.py\"\
    , line 8\n    choose_num(7, 8)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \ >>> choose_num(1, 10)\n    10\n    >>> choose_num(11, 10)\n    10\n    >>> choose_num(11,\
    \ 11)\n    11\n    >>> choose_num(11, 12)\n    -1\n    \"\"\"\n    if x < y:\n\
    \        x, y = y, x\n    \n    if x % 2 == 0:\n        return y\n    else:\n\
    \        return -1\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n\
    \    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgck0we7i.py\"\
    , line 16\n    \"\"\"\n    ^\nSyntaxError: unterminated triple-quoted string literal\
    \ (detected at line 38)\n"
  exit_code: 1
  status: SyntaxError
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(7, 10)\n            >>>8\n            choose_num(7, 11)\n\
    \            >>>-1\n            choose_num(7, 12)\n            >>>-1\n       \
    \     choose_num(7, 13)\n            >>>-1\n            choose_num(7, 14)\n  \
    \          >>>-1\n            choose_num(7, 15)\n            >>>-1\n         \
    \   choose_num(7, 16)\n            >>>-1\n            choose_num(7, 17)\n    \
    \        >>>-1\n            choose_num(7, 18)\n            >>>-1\n           \
    \ choose_num(7, 19)\n            >>>-1\n            choose_num(7, 20)\n      \
    \      >>>-1\n            choose_num(7, 21)\n            >>>-1\n            choose_num(7,\
    \ 22)\n            >>>-1\n            choose_num(7, 23)\n            >>>-1\n \
    \           choose_num(7, 24)\n            >>>-1\n            choose_num(7, 25)\n\
    \            >>>-1\n            choose_num(7, 26)\n            >>>-1\n       \
    \     choose_num(7, 27)\n            >>>-1\n            choose_num(7, 28)\n  \
    \          >>>-1\n            choose_num(7, 29)\n            >>>-1\n         \
    \   choose_num(7, 30)\n            >>>-1\n            choose_num(7, 31)\n    \
    \        >>>-1\n            choose_num(7, 32)\n            >>>-1\n           \
    \ choose_num(7, 33)\n            >>>-1\n            choose_num(7, 34)\n      \
    \      >>>-1\n            choose_num(7, 35)\n            >>>-1\n            choose_num(7,\
    \ 36)\n            >>>-1\n            choose_num(7, 37)\n            >>>-1\n \
    \           choose_num(7, 38)\n            >>>-1\n            choose_num(7, 39)\n\
    \            >>>-1\n            choose_num(7, 40)\n            >>>-1\n       \
    \     choose_num(7, 41)\n            >>>-1\n            choose_num(7, 42)\n  \
    \          >>>-1\n            choose_num(7, 43)\n            >>>-1\n         \
    \   choose_num(7, 44)\n            >>>-1\n            choose_num(7, 45)\n    \
    \        >>>-1\n            choose_num(7, 46)\n            >>>-1\n           \
    \ choose_num(7, 47)\n            >>>-1\n            choose_num(7, 48)\n      \
    \      >>>-1\n            choose_num(7, 49)\n            >>>-1\n            choose_num(7,\
    \ 50)\n            >>>\ndef check(candidate):\n    assert candidate(12, 15) ==\
    \ 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuzrrw4mm.py\"\
    , line 8\n    choose_num(7, 10)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(7, 12)\n            >>>12\n            choose_num(7, 13)\n\
    \            >>>-1\n            choose_num(7, 14)\n            >>>-1\n       \
    \     choose_num(7, 15)\n            >>>-1\n            choose_num(7, 16)\n  \
    \          >>>-1\n            choose_num(7, 17)\n            >>>-1\n         \
    \   choose_num(7, 18)\n            >>>-1\n            choose_num(7, 19)\n    \
    \        >>>-1\n            choose_num(7, 20)\n            >>>-1\n           \
    \ choose_num(7, 21)\n            >>>-1\n            choose_num(7, 22)\n      \
    \      >>>-1\n            choose_num(7, 23)\n            >>>-1\n            choose_num(7,\
    \ 24)\n            >>>-1\n            choose_num(7, 25)\n            >>>-1\n \
    \           choose_num(7, 26)\n            >>>-1\n            choose_num(7, 27)\n\
    \            >>>-1\n            choose_num(7, 28)\n            >>>-1\n       \
    \     choose_num(7, 29)\n            >>>-1\n            choose_num(7, 30)\n  \
    \          >>>-1\n            choose_num(7, 31)\n            >>>-1\n         \
    \   choose_num(7, 32)\n            >>>-1\n            choose_num(7, 33)\n    \
    \        >>>-1\n            choose_num(7, 34)\n            >>>-1\n           \
    \ choose_num(7, 35)\n            >>>-1\n            choose_num(7, 36)\n      \
    \      >>>-1\n            choose_num(7, 37)\n            >>>-1\n            choose_num(7,\
    \ 38)\n            >>>-1\n            choose_num(7, 39)\n            >>>-1\n \
    \           choose_num(7, 40)\n            >>>-1\n            choose_num(7, 41)\n\
    \            >>>-1\n            choose_num(7, 42)\n            >>>-1\n       \
    \     choose_num(7, 43)\n            >>>-1\n            choose_num(7, 44)\n  \
    \          >>>-1\n            choose_num(7, 45)\n            >>>-1\n         \
    \   choose_num(7, 46)\n            >>>-1\n            choose_num(7, 47)\n    \
    \        >>>-1\n            choose_num(7, 48)\n            >>>-1\n           \
    \ choose_num(7, 49)\n            >>>-1\n            choose_num(7, 50)\n      \
    \      >>>-1\n            choose_num(7, 51)\n            >>>-1\n            choose_num(7,\
    \ 52)\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert\
    \ candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert\
    \ candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27,\
    \ 10) == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546)\
    \ == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmc1538ij.py\"\
    , line 8\n    choose_num(7, 12)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(6, 8)\n            >> 8\n            choose_num(6, 7)\n \
    \           >> -1\n            \"\"\"\n    \"\"\"\n    if x > y:\n        x, y\
    \ = y, x\n    \n    if x % 2 == 0:\n        if y % 2 == 0:\n            return\
    \ x\n        else:\n            return -1\n    else:\n        if y % 2 == 0:\n\
    \            return y\n        else:\n            return -1\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt12vo41r.py\"\
    , line 8\n    choose_num(6, 8)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(7, 12)\n            >>>12\n            choose_num(7, 13)\n\
    \            >>>-1\n            choose_num(7, 14)\n            >>>-1\n       \
    \     choose_num(7, 15)\n            >>>-1\n            choose_num(7, 16)\n  \
    \          >>>-1\n            choose_num(7, 17)\n            >>>-1\n         \
    \   choose_num(7, 18)\n            >>>-1\n            choose_num(7, 19)\n    \
    \        >>>-1\n            choose_num(7, 20)\n            >>>-1\n           \
    \ choose_num(7, 21)\n            >>>-1\n            choose_num(7, 22)\n      \
    \      >>>-1\n            choose_num(7, 23)\n            >>>-1\n            choose_num(7,\
    \ 24)\n            >>>-1\n            choose_num(7, 25)\n            >>>-1\n \
    \           choose_num(7, 26)\n            >>>-1\n            choose_num(7, 27)\n\
    \            >>>-1\n            choose_num(7, 28)\n            >>>-1\n       \
    \     choose_num(7, 29)\n            >>>-1\n            choose_num(7, 30)\n  \
    \          >>>-1\n            choose_num(7, 31)\n            >>>-1\n         \
    \   choose_num(7, 32)\n            >>>-1\n            choose_num(7, 33)\n    \
    \        >>>-1\n            choose_num(7, 34)\n            >>>-1\n           \
    \ choose_num(7, 35)\n            >>>-1\n            choose_num(7, 36)\n      \
    \      >>>-1\n            choose_num(7, 37)\n            >>>-1\n            choose_num(7,\
    \ 38)\n            >>>-1\n            choose_num(7, 39)\n            >>>-1\n \
    \           choose_num(7, 40)\n            >>>-1\n            choose_num(7, 41)\n\
    \            >>>-1\n            choose_num(7, 42)\n            >>>-1\n       \
    \     choose_num(7, 43)\n            >>>-1\n            choose_num(7, 44)\n  \
    \          >>>-1\n            choose_num(7, 45)\n            >>>-1\n         \
    \   choose_num(7, 46)\n            >>>-1\n            choose_num(7, 47)\n    \
    \        >>>-1\n            choose_num(7, 48)\n            >>>-1\n           \
    \ choose_num(7, 49)\n            >>>-1\n            choose_num(7, 50)\n      \
    \      >>>-1\n            choose_num(7, 51)\n            >>>-1\n            choose_num(7,\
    \ 52)\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert\
    \ candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert\
    \ candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27,\
    \ 10) == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546)\
    \ == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf8vx0cl6.py\"\
    , line 8\n    choose_num(7, 12)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(7, 9)\n            >>>8\n            choose_num(7, 10)\n\
    \            >>>-1\n            choose_num(7, 11)\n            >>>-1\n       \
    \     choose_num(7, 12)\n            >>>-1\n            choose_num(7, 13)\n  \
    \          >>>-1\n            choose_num(7, 14)\n            >>>-1\n         \
    \   choose_num(7, 15)\n            >>>-1\n            choose_num(7, 16)\n    \
    \        >>>-1\n            choose_num(7, 17)\n            >>>-1\n           \
    \ choose_num(7, 18)\n            >>>-1\n            choose_num(7, 19)\n      \
    \      >>>-1\n            choose_num(7, 20)\n            >>>-1\n            choose_num(7,\
    \ 21)\n            >>>-1\n            choose_num(7, 22)\n            >>>-1\n \
    \           choose_num(7, 23)\n            >>>-1\n            choose_num(7, 24)\n\
    \            >>>-1\n            choose_num(7, 25)\n            >>>-1\n       \
    \     choose_num(7, 26)\n            >>>-1\n            choose_num(7, 27)\n  \
    \          >>>-1\n            choose_num(7, 28)\n            >>>-1\n         \
    \   choose_num(7, 29)\n            >>>-1\n            choose_num(7, 30)\n    \
    \        >>>-1\n            choose_num(7, 31)\n            >>>-1\n           \
    \ choose_num(7, 32)\n            >>>-1\n            choose_num(7, 33)\n      \
    \      >>>-1\n            choose_num(7, 34)\n            >>>-1\n            choose_num(7,\
    \ 35)\n            >>>-1\n            choose_num(7, 36)\n            >>>-1\n \
    \           choose_num(7, 37)\n            >>>-1\n            choose_num(7, 38)\n\
    \            >>>-1\n            choose_num(7, 39)\n            >>>-1\n       \
    \     choose_num(7, 40)\n            >>>-1\n            choose_num(7, 41)\n  \
    \          >>>-1\n            choose_num(7, 42)\n            >>>-1\n         \
    \   choose_num(7, 43)\n            >>>-1\n            choose_num(7, 44)\n    \
    \        >>>-1\n            choose_num(7, 45)\n            >>>-1\n           \
    \ choose_num(7, 46)\n            >>>-1\n            choose_num(7, 47)\n      \
    \      >>>-1\n            choose_num(7, 48)\n            >>>-1\n            choose_num(7,\
    \ 49)\n            >>>\ndef check(candidate):\n    assert candidate(12, 15) ==\
    \ 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpolb9ouqy.py\"\
    , line 8\n    choose_num(7, 9)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(7, 12)\n            >>>12\n            choose_num(7, 11)\n\
    \            >>>-1\n            choose_num(7, 10)\n            >>>-1\n       \
    \     choose_num(7, 9)\n            >>>-1\n            choose_num(7, 8)\n    \
    \        >>>-1\n            choose_num(7, 7)\n            >>>-1\n            choose_num(7,\
    \ 6)\n            >>>-1\n            choose_num(7, 5)\n            >>>-1\n   \
    \         choose_num(7, 4)\n            >>>-1\n            choose_num(7, 3)\n\
    \            >>>-1\n            choose_num(7, 2)\n            >>>-1\n        \
    \    choose_num(7, 1)\n            >>>-1\n            choose_num(7, 0)\n     \
    \       >>>-1\n            choose_num(6, 12)\n            >>>12\n            choose_num(6,\
    \ 11)\n            >>>-1\n            choose_num(6, 10)\n            >>>-1\n \
    \           choose_num(6, 9)\n            >>>-1\n            choose_num(6, 8)\n\
    \            >>>-1\n            choose_num(6, 7)\n            >>>-1\n        \
    \    choose_num(6, 6)\n            >>>-1\n            choose_num(6, 5)\n     \
    \       >>>-1\n            choose_num(6, 4)\n            >>>-1\n            choose_num(6,\
    \ 3)\n            >>>-1\n            choose_num(6, 2)\n            >>>-1\n   \
    \         choose_num(6, 1)\n            >>>-1\n            choose_num(6, 0)\n\
    \            >>>-1\n            choose_num(5, 12)\n            >>>12\n       \
    \     choose_num(5, 11)\n            >>>-1\n            choose_num(5, 10)\n  \
    \          >>>-1\n            choose_num(5, 9)\n            >>>-1\n          \
    \  choose_num(5, 8)\n            >>>-1\n            choose_num(5, 7)\n       \
    \     >>>-1\n            choose_num(5, 6)\n            >>>-1\n            choose_num(5,\
    \ 5)\n            >>>-1\n            choose_num(5, 4)\n            >>>-1\n   \
    \         choose_num(5, 3)\n            >>>-1\n            choose_num(5, 2)\n\
    \            >>>-1\n            choose_num(5, 1)\n            >>>-1\n        \
    \    choose_num(5, 0)\n            >>>-1\n            choose_num(4, 12)\n    \
    \        >>>12\n            choose_num(4, 11)\n            >>>-1\n           \
    \ choose_num(4, 10)\n            >>>-1\n            choose_num(4, 9)\n       \
    \     >>>-1\n            choose_num(4, 8)\n            >>>-1\n            cho\n\
    def check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptwtxytc1.py\"\
    , line 8\n    choose_num(7, 12)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(7, 10)\n            >>>7\n            choose_num(7, 11)\n\
    \            >>>-1\n            choose_num(7, 12)\n            >>>-1\n       \
    \     choose_num(7, 13)\n            >>>-1\n            choose_num(7, 14)\n  \
    \          >>>-1\n            choose_num(7, 15)\n            >>>-1\n         \
    \   choose_num(7, 16)\n            >>>-1\n            choose_num(7, 17)\n    \
    \        >>>-1\n            choose_num(7, 18)\n            >>>-1\n           \
    \ choose_num(7, 19)\n            >>>-1\n            choose_num(7, 20)\n      \
    \      >>>-1\n            choose_num(7, 21)\n            >>>-1\n            choose_num(7,\
    \ 22)\n            >>>-1\n            choose_num(7, 23)\n            >>>-1\n \
    \           choose_num(7, 24)\n            >>>-1\n            choose_num(7, 25)\n\
    \            >>>-1\n            choose_num(7, 26)\n            >>>-1\n       \
    \     choose_num(7, 27)\n            >>>-1\n            choose_num(7, 28)\n  \
    \          >>>-1\n            choose_num(7, 29)\n            >>>-1\n         \
    \   choose_num(7, 30)\n            >>>-1\n            choose_num(7, 31)\n    \
    \        >>>-1\n            choose_num(7, 32)\n            >>>-1\n           \
    \ choose_num(7, 33)\n            >>>-1\n            choose_num(7, 34)\n      \
    \      >>>-1\n            choose_num(7, 35)\n            >>>-1\n            choose_num(7,\
    \ 36)\n            >>>-1\n            choose_num(7, 37)\n            >>>-1\n \
    \           choose_num(7, 38)\n            >>>-1\n            choose_num(7, 39)\n\
    \            >>>-1\n            choose_num(7, 40)\n            >>>-1\n       \
    \     choose_num(7, 41)\n            >>>-1\n            choose_num(7, 42)\n  \
    \          >>>-1\n            choose_num(7, 43)\n            >>>-1\n         \
    \   choose_num(7, 44)\n            >>>-1\n            choose_num(7, 45)\n    \
    \        >>>-1\n            choose_num(7, 46)\n            >>>-1\n           \
    \ choose_num(7, 47)\n            >>>-1\n            choose_num(7, 48)\n      \
    \      >>>-1\n            choose_num(7, 49)\n            >>>-1\n            choose_num(7,\
    \ 50)\n            >>>\ndef check(candidate):\n    assert candidate(12, 15) ==\
    \ 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvszm2tk6.py\"\
    , line 8\n    choose_num(7, 10)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(7, 8)\n            > 7\n            choose_num(7, 9)\n  \
    \          > -1\n            choose_num(7, 10)\n            > -1\n           \
    \ choose_num(7, 11)\n            > -1\n            choose_num(7, 12)\n       \
    \     > -1\n            choose_num(7, 13)\n            > -1\n            choose_num(7,\
    \ 14)\n            > -1\n            choose_num(7, 15)\n            > -1\n   \
    \         choose_num(7, 16)\n            > -1\n            choose_num(7, 17)\n\
    \            > -1\n            choose_num(7, 18)\n            > -1\n         \
    \   choose_num(7, 19)\n            > -1\n            choose_num(7, 20)\n     \
    \       > -1\n            choose_num(7, 21)\n            > -1\n            choose_num(7,\
    \ 22)\n            > -1\n            choose_num(7, 23)\n            > -1\n   \
    \         choose_num(7, 24)\n            > -1\n            choose_num(7, 25)\n\
    \            > -1\n            choose_num(7, 26)\n            > -1\n         \
    \   choose_num(7, 27)\n            > -1\n            choose_num(7, 28)\n     \
    \       > -1\n            choose_num(7, 29)\n            > -1\n            choose_num(7,\
    \ 30)\n            > -1\n            choose_num(7, 31)\n            > -1\n   \
    \         choose_num(7, 32)\n            > -1\n            choose_num(7, 33)\n\
    \            > -1\n            choose_num(7, 34)\n            > -1\n         \
    \   choose_num(7, 35)\n            > -1\n            choose_num(7, 36)\n     \
    \       > -1\n            choose_num(7, 37)\n            > -1\n            choose_num(7,\
    \ 38)\n            > -1\n            choose_num(7, 39)\n            > -1\n   \
    \         choose_num(7, 40)\n            > -1\n            choose_num(7, 41)\n\
    \            > -1\n            choose_num(7, 42)\n            > -1\n         \
    \   choose_num(7, 43)\n            > -1\n            choose_num(7, 44)\n     \
    \       > -1\n            choose_num(7, 45)\n            > -1\n            choose_num(7,\
    \ 46)\n            > -1\n            choose_num(7, 47)\n            > -1\n   \
    \         choose_num(7, 48)\n            > -1\ndef check(candidate):\n    assert\
    \ candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33,\
    \ 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6,\
    \ 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) ==\
    \ -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpub8evl3l.py\"\
    , line 8\n    choose_num(7, 8)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(6, 10)\n            >> 8\n            choose_num(6, 7)\n\
    \            >> -1\n            choose_num(6, 8)\n            >> -1\n        \
    \    choose_num(6, 9)\n            >> -1\n            choose_num(6, 10)\n    \
    \        >> 8\n            choose_num(6, 11)\n            >> -1\n            choose_num(6,\
    \ 12)\n            >> -1\n            choose_num(6, 13)\n            >> -1\n \
    \           choose_num(6, 14)\n            >> -1\n            choose_num(6, 15)\n\
    \            >> -1\n            choose_num(6, 16)\n            >> -1\n       \
    \     choose_num(6, 17)\n            >> -1\n            choose_num(6, 18)\n  \
    \          >> -1\n            choose_num(6, 19)\n            >> -1\n         \
    \   choose_num(6, 20)\n            >> -1\n            choose_num(6, 21)\n    \
    \        >> -1\n            choose_num(6, 22)\n            >> -1\n           \
    \ choose_num(6, 23)\n            >> -1\n            choose_num(6, 24)\n      \
    \      >> -1\n            choose_num(6, 25)\n            >> -1\n            choose_num(6,\
    \ 26)\n            >> -1\n            choose_num(6, 27)\n            >> -1\n \
    \           choose_num(6, 28)\n            >> -1\n            choose_num(6, 29)\n\
    \            >> -1\n            choose_num(6, 30)\n            >> -1\n       \
    \     choose_num(6, 31)\n            >> -1\n            choose_num(6, 32)\n  \
    \          >> -1\n            choose_num(6, 33)\n            >> -1\n         \
    \   choose_num(6, 34)\n            >> -1\n            choose_num(6, 35)\n    \
    \        >> -1\n            choose_num(6, 36)\n            >> -1\n           \
    \ choose_num(6, 37)\n            >> -1\n            choose_num(6, 38)\n      \
    \      >> -1\n            choose_num(6, 39)\n            >> -1\n            choose_num(6,\
    \ 40)\n            >> -1\n            choose_num(6, 41)\n            >> -1\n \
    \           choose_num(6, 42)\n            >> -1\n            choose_num(6, 43)\n\
    \            >> -1\n            choose_num(6, 44)\n            >> -1\n       \
    \     choose_num(6, 45)\n            >> -1\n            choose_num(6, 46)\n  \
    \          >> -1\n            \ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsymrdaoq.py\"\
    , line 8\n    choose_num(6, 10)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(7, 12)\n            >> 8\n            choose_num(7, 13)\n\
    \            >> -1\n            \"\"\"\n    \"\"\"\n    if x < y:\n        x,\
    \ y = y, x\n    if x % 2 == 0:\n        return x // 2\n    else:\n        return\
    \ -1\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert\
    \ candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert\
    \ candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27,\
    \ 10) == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546)\
    \ == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm2jdvwf3.py\"\
    , line 8\n    choose_num(7, 12)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(3,4)\n            choose_num(3,5)\n            choose_num(3,6)\n\
    \            choose_num(3,7)\n            choose_num(3,8)\n            choose_num(3,9)\n\
    \            choose_num(3,10)\n            choose_num(3,11)\n            choose_num(3,12)\n\
    \            choose_num(3,13)\n            choose_num(3,14)\n            choose_num(3,15)\n\
    \            choose_num(3,16)\n            choose_num(3,17)\n            choose_num(3,18)\n\
    \            choose_num(3,19)\n            choose_num(3,20)\n            choose_num(3,21)\n\
    \            choose_num(3,22)\n            choose_num(3,23)\n            choose_num(3,24)\n\
    \            choose_num(3,25)\n            choose_num(3,26)\n            choose_num(3,27)\n\
    \            choose_num(3,28)\n            choose_num(3,29)\n            choose_num(3,30)\n\
    \            choose_num(3,31)\n            choose_num(3,32)\n            choose_num(3,33)\n\
    \            choose_num(3,34)\n            choose_num(3,35)\n            choose_num(3,36)\n\
    \            choose_num(3,37)\n            choose_num(3,38)\n            choose_num(3,39)\n\
    \            choose_num(3,40)\n            choose_num(3,41)\n            choose_num(3,42)\n\
    \            choose_num(3,43)\n            choose_num(3,44)\n            choose_num(3,45)\n\
    \            choose_num(3,46)\n            choose_num(3,47)\n            choose_num(3,48)\n\
    \            choose_num(3,49)\n            choose_num(3,50)\n            choose_num(3,51)\n\
    \            choose_num(3,52)\n            choose_num(3,53)\n            choose_num(3,54)\n\
    \            choose_num(3,55)\n            choose_num(3,56)\n            choose_num(3,57)\n\
    \            choose_num(3,58)\n            choose_num(3,59)\n            choose_num(3,60)\n\
    \            choose_num(3,61)\n            choose_num(3,62)\n            choose_num(3,63\n\
    def check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4jn_t2_8.py\"\
    , line 8\n    choose_num(3,4)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(7, 9)\n            >> 7\n            choose_num(7, 10)\n\
    \            >> -1\n            choose_num(7, 11)\n            >> -1\n       \
    \     choose_num(7, 12)\n            >> -1\n            choose_num(7, 13)\n  \
    \          >> -1\n            choose_num(7, 14)\n            >> -1\n         \
    \   choose_num(7, 15)\n            >> -1\n            choose_num(7, 16)\n    \
    \        >> -1\n            choose_num(7, 17)\n            >> -1\n           \
    \ choose_num(7, 18)\n            >> -1\n            choose_num(7, 19)\n      \
    \      >> -1\n            choose_num(7, 20)\n            >> -1\n            choose_num(7,\
    \ 21)\n            >> -1\n            choose_num(7, 22)\n            >> -1\n \
    \           choose_num(7, 23)\n            >> -1\n            choose_num(7, 24)\n\
    \            >> -1\n            choose_num(7, 25)\n            >> -1\n       \
    \     choose_num(7, 26)\n            >> -1\n            choose_num(7, 27)\n  \
    \          >> -1\n            choose_num(7, 28)\n            >> -1\n         \
    \   choose_num(7, 29)\n            >> -1\n            choose_num(7, 30)\n    \
    \        >> -1\n            choose_num(7, 31)\n            >> -1\n           \
    \ choose_num(7, 32)\n            >> -1\n            choose_num(7, 33)\n      \
    \      >> -1\n            choose_num(7, 34)\n            >> -1\n            choose_num(7,\
    \ 35)\n            >> -1\n            choose_num(7, 36)\n            >> -1\n \
    \           choose_num(7, 37)\n            >> -1\n            choose_num(7, 38)\n\
    \            >> -1\n            choose_num(7, 39)\n            >> -1\n       \
    \     choose_num(7, 40)\n            >> -1\n            choose_num(7, 41)\n  \
    \          >> -1\n            choose_num(7, 42)\n            >> -1\n         \
    \   choose_num(7, 43)\n            >> -1\n            choose_num(7, 44)\n    \
    \        >> -1\n            choose_num(7, 45)\n            >> -1\n           \
    \ choose_num(7, 46)\n            >> -1\n            choose_num(7, 47)\n      \
    \      >> -1\n            choose_num(7, 48)\n            >> -1\n            choose_num(7,\
    \ 49)\n            >> \ndef check(candidate):\n    assert candidate(12, 15) ==\
    \ 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyrjuzod2.py\"\
    , line 8\n    choose_num(7, 9)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(4,5)\n            choose_num(3,4)\n            choose_num(3,3)\n\
    \            choose_num(3,2)\n            choose_num(3,1)\n            choose_num(3,0)\n\
    \            choose_num(3,-1)\n            choose_num(3,-2)\n            choose_num(3,-3)\n\
    \            choose_num(3,-4)\n            choose_num(3,-5)\n            choose_num(3,-6)\n\
    \            choose_num(3,-7)\n            choose_num(3,-8)\n            choose_num(3,-9)\n\
    \            choose_num(3,-10)\n            choose_num(3,-11)\n            choose_num(3,-12)\n\
    \            choose_num(3,-13)\n            choose_num(3,-14)\n            choose_num(3,-15)\n\
    \            choose_num(3,-16)\n            choose_num(3,-17)\n            choose_num(3,-18)\n\
    \            choose_num(3,-19)\n            choose_num(3,-20)\n            choose_num(3,-21)\n\
    \            choose_num(3,-22)\n            choose_num(3,-23)\n            choose_num(3,-24)\n\
    \            choose_num(3,-25)\n            choose_num(3,-26)\n            choose_num(3,-27)\n\
    \            choose_num(3,-28)\n            choose_num(3,-29)\n            choose_num(3,-30)\n\
    \            choose_num(3,-31)\n            choose_num(3,-32)\n            choose_num(3,-33)\n\
    \            choose_num(3,-34)\n            choose_num(3,-35)\n            choose_num(3,-36)\n\
    \            choose_num(3,-37)\n            choose_num(3,-38)\n            choose_num(3,-39)\n\
    \            choose_num(3,-40)\n            choose_num(3,-41)\n            choose_num(3,-42)\n\
    \            choose_num(3,-43)\n            choose_num(3,-44)\n            choose_num(3,-45)\n\
    \            choose_num(3,-46)\n            choose_num(3,-47)\n            choose_num(3,-48)\n\
    \            choose_num(3,-49)\n            choose_num(3,\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2ddhydsv.py\"\
    , line 8\n    choose_num(4,5)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(7, 10)\n            >>>7\n            choose_num(7, 8)\n\
    \            >>>-1\n            choose_num(7, 11)\n            >>>-1\n       \
    \     choose_num(7, 12)\n            >>>-1\n            choose_num(7, 13)\n  \
    \          >>>-1\n            choose_num(7, 14)\n            >>>-1\n         \
    \   choose_num(7, 15)\n            >>>-1\n            choose_num(7, 16)\n    \
    \        >>>-1\n            choose_num(7, 17)\n            >>>-1\n           \
    \ choose_num(7, 18)\n            >>>-1\n            choose_num(7, 19)\n      \
    \      >>>-1\n            choose_num(7, 20)\n            >>>-1\n            choose_num(7,\
    \ 21)\n            >>>-1\n            choose_num(7, 22)\n            >>>-1\n \
    \           choose_num(7, 23)\n            >>>-1\n            choose_num(7, 24)\n\
    \            >>>-1\n            choose_num(7, 25)\n            >>>-1\n       \
    \     choose_num(7, 26)\n            >>>-1\n            choose_num(7, 27)\n  \
    \          >>>-1\n            choose_num(7, 28)\n            >>>-1\n         \
    \   choose_num(7, 29)\n            >>>-1\n            choose_num(7, 30)\n    \
    \        >>>-1\n            choose_num(7, 31)\n            >>>-1\n           \
    \ choose_num(7, 32)\n            >>>-1\n            choose_num(7, 33)\n      \
    \      >>>-1\n            choose_num(7, 34)\n            >>>-1\n            choose_num(7,\
    \ 35)\n            >>>-1\n            choose_num(7, 36)\n            >>>-1\n \
    \           choose_num(7, 37)\n            >>>-1\n            choose_num(7, 38)\n\
    \            >>>-1\n            choose_num(7, 39)\n            >>>-1\n       \
    \     choose_num(7, 40)\n            >>>-1\n            choose_num(7, 41)\n  \
    \          >>>-1\n            choose_num(7, 42)\n            >>>-1\n         \
    \   choose_num(7, 43)\n            >>>-1\n            choose_num(7, 44)\n    \
    \        >>>-1\n            choose_num(7, 45)\n            >>>-1\n           \
    \ choose_num(7, 46)\n            >>>-1\n            choose_num(7, 47)\n      \
    \      >>>-1\n            choose_num(7, 48)\n            >>>-1\n            choose_num(7,\
    \ 49)\n            >>>\ndef check(candidate):\n    assert candidate(12, 15) ==\
    \ 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcarrd1q4.py\"\
    , line 8\n    choose_num(7, 10)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(7, 9)\n            choose_num(7, 10)\n            choose_num(7,\
    \ 11)\n            choose_num(7, 12)\n            choose_num(7, 13)\n        \
    \    choose_num(7, 14)\n            choose_num(7, 15)\n            choose_num(7,\
    \ 16)\n            choose_num(7, 17)\n            choose_num(7, 18)\n        \
    \    choose_num(7, 19)\n            choose_num(7, 20)\n            choose_num(7,\
    \ 21)\n            choose_num(7, 22)\n            choose_num(7, 23)\n        \
    \    choose_num(7, 24)\n            choose_num(7, 25)\n            choose_num(7,\
    \ 26)\n            choose_num(7, 27)\n            choose_num(7, 28)\n        \
    \    choose_num(7, 29)\n            choose_num(7, 30)\n            choose_num(7,\
    \ 31)\n            choose_num(7, 32)\n            choose_num(7, 33)\n        \
    \    choose_num(7, 34)\n            choose_num(7, 35)\n            choose_num(7,\
    \ 36)\n            choose_num(7, 37)\n            choose_num(7, 38)\n        \
    \    choose_num(7, 39)\n            choose_num(7, 40)\n            choose_num(7,\
    \ 41)\n            choose_num(7, 42)\n            choose_num(7, 43)\n        \
    \    choose_num(7, 44)\n            choose_num(7, 45)\n            choose_num(7,\
    \ 46)\n            choose_num(7, 47)\n            choose_num(7, 48)\n        \
    \    choose_num(7, 49)\n            choose_num(7, 50)\n            choose_num(7,\
    \ 51)\n            choose_num(7, 52)\n            choose_num(7, 53)\n        \
    \    choose_num(7, 54)\n            choose_num(7, 55)\n            choose_num(7,\
    \ 56)\n            choose_num(7, 57)\n            choose_num(7, 58)\n        \
    \    choose_num(7, 59)\n            choose_num(7, 60)\n            choose_num(7,\
    \ 61)\n            choose_num(7, 62)\n            choose_num(7, 63)\n        \
    \    choose_num(7, 64)\n            choose_num(7, 65)\n            choose_num(7,\
    \ 66)\n            choose_num(7, 67)\n            choose_\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphk6uanas.py\"\
    , line 8\n    choose_num(7, 9)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(7, 9)\n            >>>7\n            choose_num(7, 10)\n\
    \            >>>-1\n            choose_num(7, 11)\n            >>>-1\n       \
    \     choose_num(7, 12)\n            >>>-1\n            choose_num(7, 13)\n  \
    \          >>>-1\n            choose_num(7, 14)\n            >>>-1\n         \
    \   choose_num(7, 15)\n            >>>-1\n            choose_num(7, 16)\n    \
    \        >>>-1\n            choose_num(7, 17)\n            >>>-1\n           \
    \ choose_num(7, 18)\n            >>>-1\n            choose_num(7, 19)\n      \
    \      >>>-1\n            choose_num(7, 20)\n            >>>-1\n            choose_num(7,\
    \ 21)\n            >>>-1\n            choose_num(7, 22)\n            >>>-1\n \
    \           choose_num(7, 23)\n            >>>-1\n            choose_num(7, 24)\n\
    \            >>>-1\n            choose_num(7, 25)\n            >>>-1\n       \
    \     choose_num(7, 26)\n            >>>-1\n            choose_num(7, 27)\n  \
    \          >>>-1\n            choose_num(7, 28)\n            >>>-1\n         \
    \   choose_num(7, 29)\n            >>>-1\n            choose_num(7, 30)\n    \
    \        >>>-1\n            choose_num(7, 31)\n            >>>-1\n           \
    \ choose_num(7, 32)\n            >>>-1\n            choose_num(7, 33)\n      \
    \      >>>-1\n            choose_num(7, 34)\n            >>>-1\n            choose_num(7,\
    \ 35)\n            >>>-1\n            choose_num(7, 36)\n            >>>-1\n \
    \           choose_num(7, 37)\n            >>>-1\n            choose_num(7, 38)\n\
    \            >>>-1\n            choose_num(7, 39)\n            >>>-1\n       \
    \     choose_num(7, 40)\n            >>>-1\n            choose_num(7, 41)\n  \
    \          >>>-1\n            choose_num(7, 42)\n            >>>-1\n         \
    \   choose_num(7, 43)\n            >>>-1\n            choose_num(7, 44)\n    \
    \        >>>-1\n            choose_num(7, 45)\n            >>>-1\n           \
    \ choose_num(7, 46)\n            >>>-1\n            choose_num(7, 47)\n      \
    \      >>>-1\n            choose_num(7, 48)\n            >>>-1\n            choose_num(7,\
    \ 49)\n            >>>\ndef check(candidate):\n    assert candidate(12, 15) ==\
    \ 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2ndl79bw.py\"\
    , line 8\n    choose_num(7, 9)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \ >>> choose_num(7, 8)\n    8\n    >>> choose_num(7, 9)\n    -1\n    \"\"\"\n\
    \    if x >= y:\n        return -1\n    elif x % 2 == 0:\n        return x //\
    \ 2\n    elif y % 2 == 0:\n        return y // 2\n    elif x % 2 == 0 and y %\
    \ 2 == 0:\n        return x // 2 + y // 2\n    else:\n        return -1\n\n\n\
    def check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp78gvjryg.py\"\
    , line 12\n    \"\"\"\n    ^\nSyntaxError: unterminated triple-quoted string literal\
    \ (detected at line 38)\n"
  exit_code: 1
  status: SyntaxError
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(7, 9)\n            >> 7\n            choose_num(7, 10)\n\
    \            >> -1\n            choose_num(7, 11)\n            >> -1\n       \
    \     choose_num(7, 12)\n            >> -1\n            choose_num(7, 13)\n  \
    \          >> -1\n            choose_num(7, 14)\n            >> -1\n         \
    \   choose_num(7, 15)\n            >> -1\n            choose_num(7, 16)\n    \
    \        >> -1\n            choose_num(7, 17)\n            >> -1\n           \
    \ choose_num(7, 18)\n            >> -1\n            choose_num(7, 19)\n      \
    \      >> -1\n            choose_num(7, 20)\n            >> -1\n            choose_num(7,\
    \ 21)\n            >> -1\n            choose_num(7, 22)\n            >> -1\n \
    \           choose_num(7, 23)\n            >> -1\n            choose_num(7, 24)\n\
    \            >> -1\n            choose_num(7, 25)\n            >> -1\n       \
    \     choose_num(7, 26)\n            >> -1\n            choose_num(7, 27)\n  \
    \          >> -1\n            choose_num(7, 28)\n            >> -1\n         \
    \   choose_num(7, 29)\n            >> -1\n            choose_num(7, 30)\n    \
    \        >> -1\n            choose_num(7, 31)\n            >> -1\n           \
    \ choose_num(7, 32)\n            >> -1\n            choose_num(7, 33)\n      \
    \      >> -1\n            choose_num(7, 34)\n            >> -1\n            choose_num(7,\
    \ 35)\n            >> -1\n            choose_num(7, 36)\n            >> -1\n \
    \           choose_num(7, 37)\n            >> -1\n            choose_num(7, 38)\n\
    \            >> -1\n            choose_num(7, 39)\n            >> -1\n       \
    \     choose_num(7, 40)\n            >> -1\n            choose_num(7, 41)\n  \
    \          >> -1\n            choose_num(7, 42)\n            >> -1\n         \
    \   choose_num(7, 43)\n            >> -1\n            choose_num(7, 44)\n    \
    \        >> -1\n            choose_num(7, 45)\n            >> -1\n           \
    \ choose_num(7, 46)\n            >> -1\n            choose_num(7, 47)\n      \
    \      >> -1\n            choose_num(7, 48)\n            >> -1\n            choose_num(7,\
    \ 49)\n            >> \ndef check(candidate):\n    assert candidate(12, 15) ==\
    \ 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsm9dz5lc.py\"\
    , line 8\n    choose_num(7, 9)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(6, 8)\n            >> 8\n            choose_num(6, 7)\n \
    \           >> -1\n            choose_num(6, 10)\n            >> -1\n        \
    \    choose_num(6, 11)\n            >> -1\n            choose_num(6, 12)\n   \
    \         >> -1\n            choose_num(6, 13)\n            >> -1\n          \
    \  choose_num(6, 14)\n            >> -1\n            choose_num(6, 15)\n     \
    \       >> -1\n            choose_num(6, 16)\n            >> -1\n            choose_num(6,\
    \ 17)\n            >> -1\n            choose_num(6, 18)\n            >> -1\n \
    \           choose_num(6, 19)\n            >> -1\n            choose_num(6, 20)\n\
    \            >> -1\n            choose_num(6, 21)\n            >> -1\n       \
    \     choose_num(6, 22)\n            >> -1\n            choose_num(6, 23)\n  \
    \          >> -1\n            choose_num(6, 24)\n            >> -1\n         \
    \   choose_num(6, 25)\n            >> -1\n            choose_num(6, 26)\n    \
    \        >> -1\n            choose_num(6, 27)\n            >> -1\n           \
    \ choose_num(6, 28)\n            >> -1\n            choose_num(6, 29)\n      \
    \      >> -1\n            choose_num(6, 30)\n            >> -1\n            choose_num(6,\
    \ 31)\n            >> -1\n            choose_num(6, 32)\n            >> -1\n \
    \           choose_num(6, 33)\n            >> -1\n            choose_num(6, 34)\n\
    \            >> -1\n            choose_num(6, 35)\n            >> -1\n       \
    \     choose_num(6, 36)\n            >> -1\n            choose_num(6, 37)\n  \
    \          >> -1\n            choose_num(6, 38)\n            >> -1\n         \
    \   choose_num(6, 39)\n            >> -1\n            choose_num(6, 40)\n    \
    \        >> -1\n            choose_num(6, 41)\n            >> -1\n           \
    \ choose_num(6, 42)\n            >> -1\n            choose_num(6, 43)\n      \
    \      >> -1\n            choose_num(6, 44)\n            >> -1\n            choose_num(6,\
    \ 45)\n            >> -1\n            choose_num(6, 46)\n            >> -1\n \
    \           choose_num(6, 47)\n            >> -1\n            choose_num(6, 48)\n\
    \            >> -1\ndef check(candidate):\n    assert candidate(12, 15) == 14\n\
    \    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1r83iz6d.py\"\
    , line 8\n    choose_num(6, 8)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \ >>> choose_num(7, 9)\n    7\n    >>> choose_num(7, 10)\n    -1\n    \"\"\"\n\
    \    if x > y:\n        x, y = y, x\n    if x % 2 == 0:\n        if y % 2 == 0:\n\
    \            return x\n        else:\n            return -1\n    else:\n     \
    \   if y % 2 == 0:\n            return -1\n        else:\n            return x\n\
    \n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq8jsq529.py\"\
    , line 12\n    \"\"\"\n    ^\nSyntaxError: unterminated triple-quoted string literal\
    \ (detected at line 40)\n"
  exit_code: 1
  status: SyntaxError
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(7, 8)\n            >>>8\n            choose_num(7, 9)\n \
    \           >>>-1\n            \"\"\"\n    \"\"\"\n    if x >= y:\n        return\
    \ -1\n    if x % 2 == 0:\n        if y % 2 == 0:\n            return x\n     \
    \   else:\n            return y\n    else:\n        if y % 2 == 0:\n         \
    \   return y\n        else:\n            return x\n\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_t45egh2.py\"\
    , line 8\n    choose_num(7, 8)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(7, 10)\n            >>>10\n            choose_num(7, 8)\n\
    \            >>>-1\n            \"\"\"\n    \"\"\"\n    if x >= y:\n        return\
    \ -1\n    if x % 2 == 0:\n        return x // 2\n    if y % 2 == 0:\n        return\
    \ y // 2\n    if x > y:\n        x, y = y, x\n    \n    even = x // 2\n    odd\
    \ = y // 2\n    \n    while even > odd:\n        even = even // 2\n        odd\
    \ = odd // 2\n    \n    return even\n\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwmkynbpm.py\"\
    , line 8\n    choose_num(7, 10)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(7, 8)\n            >>>8\n            choose_num(7, 9)\n \
    \           >>>8\n            choose_num(7, 10)\n            >>>-1\n         \
    \   choose_num(7, 11)\n            >>>-1\n            choose_num(7, 12)\n    \
    \        >>>-1\n            choose_num(7, 13)\n            >>>-1\n           \
    \ choose_num(7, 14)\n            >>>-1\n            choose_num(7, 15)\n      \
    \      >>>-1\n            choose_num(7, 16)\n            >>>-1\n            choose_num(7,\
    \ 17)\n            >>>-1\n            choose_num(7, 18)\n            >>>-1\n \
    \           choose_num(7, 19)\n            >>>-1\n            choose_num(7, 20)\n\
    \            >>>-1\n            choose_num(7, 21)\n            >>>-1\n       \
    \     choose_num(7, 22)\n            >>>-1\n            choose_num(7, 23)\n  \
    \          >>>-1\n            choose_num(7, 24)\n            >>>-1\n         \
    \   choose_num(7, 25)\n            >>>-1\n            choose_num(7, 26)\n    \
    \        >>>-1\n            choose_num(7, 27)\n            >>>-1\n           \
    \ choose_num(7, 28)\n            >>>-1\n            choose_num(7, 29)\n      \
    \      >>>-1\n            choose_num(7, 30)\n            >>>-1\n            choose_num(7,\
    \ 31)\n            >>>-1\n            choose_num(7, 32)\n            >>>-1\n \
    \           choose_num(7, 33)\n            >>>-1\n            choose_num(7, 34)\n\
    \            >>>-1\n            choose_num(7, 35)\n            >>>-1\n       \
    \     choose_num(7, 36)\n            >>>-1\n            choose_num(7, 37)\n  \
    \          >>>-1\n            choose_num(7, 38)\n            >>>-1\n         \
    \   choose_num(7, 39)\n            >>>-1\n            choose_num(7, 40)\n    \
    \        >>>-1\n            choose_num(7, 41)\n            >>>-1\n           \
    \ choose_num(7, 42)\n            >>>-1\n            choose_num(7, 43)\n      \
    \      >>>-1\n            choose_num(7, 44)\n            >>>-1\n            choose_num(7,\
    \ 45)\n            >>>-1\n            choose_num(7, 46)\n            >>>-1\n \
    \           choose_num(7, 47)\n            >>>-1\n            choose_num(7, 48)\n\
    \            >>>-1\ndef check(candidate):\n    assert candidate(12, 15) == 14\n\
    \    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwh8_m3iu.py\"\
    , line 8\n    choose_num(7, 8)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(7, 10)\n            >>>7\n            choose_num(7, 11)\n\
    \            >>>-1\n            choose_num(7, 12)\n            >>>-1\n       \
    \     choose_num(7, 13)\n            >>>-1\n            choose_num(7, 14)\n  \
    \          >>>-1\n            choose_num(7, 15)\n            >>>-1\n         \
    \   choose_num(7, 16)\n            >>>-1\n            choose_num(7, 17)\n    \
    \        >>>-1\n            choose_num(7, 18)\n            >>>-1\n           \
    \ choose_num(7, 19)\n            >>>-1\n            choose_num(7, 20)\n      \
    \      >>>-1\n            choose_num(7, 21)\n            >>>-1\n            choose_num(7,\
    \ 22)\n            >>>-1\n            choose_num(7, 23)\n            >>>-1\n \
    \           choose_num(7, 24)\n            >>>-1\n            choose_num(7, 25)\n\
    \            >>>-1\n            choose_num(7, 26)\n            >>>-1\n       \
    \     choose_num(7, 27)\n            >>>-1\n            choose_num(7, 28)\n  \
    \          >>>-1\n            choose_num(7, 29)\n            >>>-1\n         \
    \   choose_num(7, 30)\n            >>>-1\n            choose_num(7, 31)\n    \
    \        >>>-1\n            choose_num(7, 32)\n            >>>-1\n           \
    \ choose_num(7, 33)\n            >>>-1\n            choose_num(7, 34)\n      \
    \      >>>-1\n            choose_num(7, 35)\n            >>>-1\n            choose_num(7,\
    \ 36)\n            >>>-1\n            choose_num(7, 37)\n            >>>-1\n \
    \           choose_num(7, 38)\n            >>>-1\n            choose_num(7, 39)\n\
    \            >>>-1\n            choose_num(7, 40)\n            >>>-1\n       \
    \     choose_num(7, 41)\n            >>>-1\n            choose_num(7, 42)\n  \
    \          >>>-1\n            choose_num(7, 43)\n            >>>-1\n         \
    \   choose_num(7, 44)\n            >>>-1\n            choose_num(7, 45)\n    \
    \        >>>-1\n            choose_num(7, 46)\n            >>>-1\n           \
    \ choose_num(7, 47)\n            >>>-1\n            choose_num(7, 48)\n      \
    \      >>>-1\n            choose_num(7, 49)\n            >>>-1\n            choose_num(7,\
    \ 50)\n            >>>\ndef check(candidate):\n    assert candidate(12, 15) ==\
    \ 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpakoq5qs9.py\"\
    , line 8\n    choose_num(7, 10)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(7, 9)\n            choose_num(7, 10)\n            choose_num(7,\
    \ 11)\n            choose_num(7, 12)\n            choose_num(7, 13)\n        \
    \    choose_num(7, 14)\n            choose_num(7, 15)\n            choose_num(7,\
    \ 16)\n            choose_num(7, 17)\n            choose_num(7, 18)\n        \
    \    choose_num(7, 19)\n            choose_num(7, 20)\n            choose_num(7,\
    \ 21)\n            choose_num(7, 22)\n            choose_num(7, 23)\n        \
    \    choose_num(7, 24)\n            choose_num(7, 25)\n            choose_num(7,\
    \ 26)\n            choose_num(7, 27)\n            choose_num(7, 28)\n        \
    \    choose_num(7, 29)\n            choose_num(7, 30)\n            choose_num(7,\
    \ 31)\n            choose_num(7, 32)\n            choose_num(7, 33)\n        \
    \    choose_num(7, 34)\n            choose_num(7, 35)\n            choose_num(7,\
    \ 36)\n            choose_num(7, 37)\n            choose_num(7, 38)\n        \
    \    choose_num(7, 39)\n            choose_num(7, 40)\n            choose_num(7,\
    \ 41)\n            choose_num(7, 42)\n            choose_num(7, 43)\n        \
    \    choose_num(7, 44)\n            choose_num(7, 45)\n            choose_num(7,\
    \ 46)\n            choose_num(7, 47)\n            choose_num(7, 48)\n        \
    \    choose_num(7, 49)\n            choose_num(7, 50)\n            choose_num(7,\
    \ 51)\n            choose_num(7, 52)\n            choose_num(7, 53)\n        \
    \    choose_num(7, 54)\n            choose_num(7, 55)\n            choose_num(7,\
    \ 56)\n            choose_num(7, 57)\n            choose_num(7, 58)\n        \
    \    choose_num(7, 59)\n            choose_num(7, 60)\n            choose_num(7,\
    \ 61)\n            choose_num(7, 62)\n            choose_num(7, 63)\n        \
    \    choose_num(7, 64)\n            choose_num(7, 65)\n            choose_num(7,\
    \ 66)\n            choose_num(7, 67)\n            choose_\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9jsa299e.py\"\
    , line 8\n    choose_num(7, 9)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(8, 10)\n            >> 8\n            choose_num(8, 11)\n\
    \            >> -1\n            \"\"\"\n    \"\"\"\n    if x <= y:\n        if\
    \ x % 2 == 0:\n            return x\n        else:\n            return y\n   \
    \ else:\n        if y % 2 == 0:\n            return y\n        else:\n       \
    \     return x\n\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n\
    \    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplhtytiyr.py\"\
    , line 8\n    choose_num(8, 10)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(7, 10)\n            >>>7\n            choose_num(7, 8)\n\
    \            >>>-1\n            choose_num(7, 11)\n            >>>-1\n       \
    \     choose_num(7, 12)\n            >>>-1\n            choose_num(7, 13)\n  \
    \          >>>-1\n            choose_num(7, 14)\n            >>>-1\n         \
    \   choose_num(7, 15)\n            >>>-1\n            choose_num(7, 16)\n    \
    \        >>>-1\n            choose_num(7, 17)\n            >>>-1\n           \
    \ choose_num(7, 18)\n            >>>-1\n            choose_num(7, 19)\n      \
    \      >>>-1\n            choose_num(7, 20)\n            >>>-1\n            choose_num(7,\
    \ 21)\n            >>>-1\n            choose_num(7, 22)\n            >>>-1\n \
    \           choose_num(7, 23)\n            >>>-1\n            choose_num(7, 24)\n\
    \            >>>-1\n            choose_num(7, 25)\n            >>>-1\n       \
    \     choose_num(7, 26)\n            >>>-1\n            choose_num(7, 27)\n  \
    \          >>>-1\n            choose_num(7, 28)\n            >>>-1\n         \
    \   choose_num(7, 29)\n            >>>-1\n            choose_num(7, 30)\n    \
    \        >>>-1\n            choose_num(7, 31)\n            >>>-1\n           \
    \ choose_num(7, 32)\n            >>>-1\n            choose_num(7, 33)\n      \
    \      >>>-1\n            choose_num(7, 34)\n            >>>-1\n            choose_num(7,\
    \ 35)\n            >>>-1\n            choose_num(7, 36)\n            >>>-1\n \
    \           choose_num(7, 37)\n            >>>-1\n            choose_num(7, 38)\n\
    \            >>>-1\n            choose_num(7, 39)\n            >>>-1\n       \
    \     choose_num(7, 40)\n            >>>-1\n            choose_num(7, 41)\n  \
    \          >>>-1\n            choose_num(7, 42)\n            >>>-1\n         \
    \   choose_num(7, 43)\n            >>>-1\n            choose_num(7, 44)\n    \
    \        >>>-1\n            choose_num(7, 45)\n            >>>-1\n           \
    \ choose_num(7, 46)\n            >>>-1\n            choose_num(7, 47)\n      \
    \      >>>-1\n            choose_num(7, 48)\n            >>>-1\n            choose_num(7,\
    \ 49)\n            >>>\ndef check(candidate):\n    assert candidate(12, 15) ==\
    \ 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz4_0wrj9.py\"\
    , line 8\n    choose_num(7, 10)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(7, 8)\n            >>>8\n            choose_num(7, 9)\n \
    \           >>>-1\n            choose_num(7, 10)\n            >>>-1\n        \
    \    choose_num(7, 11)\n            >>>-1\n            choose_num(7, 12)\n   \
    \         >>>-1\n            choose_num(7, 13)\n            >>>-1\n          \
    \  choose_num(7, 14)\n            >>>-1\n            choose_num(7, 15)\n     \
    \       >>>-1\n            choose_num(7, 16)\n            >>>-1\n            choose_num(7,\
    \ 17)\n            >>>-1\n            choose_num(7, 18)\n            >>>-1\n \
    \           choose_num(7, 19)\n            >>>-1\n            choose_num(7, 20)\n\
    \            >>>-1\n            choose_num(7, 21)\n            >>>-1\n       \
    \     choose_num(7, 22)\n            >>>-1\n            choose_num(7, 23)\n  \
    \          >>>-1\n            choose_num(7, 24)\n            >>>-1\n         \
    \   choose_num(7, 25)\n            >>>-1\n            choose_num(7, 26)\n    \
    \        >>>-1\n            choose_num(7, 27)\n            >>>-1\n           \
    \ choose_num(7, 28)\n            >>>-1\n            choose_num(7, 29)\n      \
    \      >>>-1\n            choose_num(7, 30)\n            >>>-1\n            choose_num(7,\
    \ 31)\n            >>>-1\n            choose_num(7, 32)\n            >>>-1\n \
    \           choose_num(7, 33)\n            >>>-1\n            choose_num(7, 34)\n\
    \            >>>-1\n            choose_num(7, 35)\n            >>>-1\n       \
    \     choose_num(7, 36)\n            >>>-1\n            choose_num(7, 37)\n  \
    \          >>>-1\n            choose_num(7, 38)\n            >>>-1\n         \
    \   choose_num(7, 39)\n            >>>-1\n            choose_num(7, 40)\n    \
    \        >>>-1\n            choose_num(7, 41)\n            >>>-1\n           \
    \ choose_num(7, 42)\n            >>>-1\n            choose_num(7, 43)\n      \
    \      >>>-1\n            choose_num(7, 44)\n            >>>-1\n            choose_num(7,\
    \ 45)\n            >>>-1\n            choose_num(7, 46)\n            >>>-1\n \
    \           choose_num(7, 47)\n            >>>-1\n            choose_num(7, 48)\n\
    \            >>>-1\ndef check(candidate):\n    assert candidate(12, 15) == 14\n\
    \    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzfvzyjm1.py\"\
    , line 8\n    choose_num(7, 8)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(7, 10)\n            >>>7\n            choose_num(7, 15)\n\
    \            >>>-1\n            \"\"\"\n    \"\"\"\n    if x > y:\n        x,\
    \ y = y, x\n    if x % 2 == 0:\n        if y % 2 == 0:\n            return x\n\
    \        else:\n            return -1\n    else:\n        if y % 2 == 0:\n   \
    \         return -1\n        else:\n            return x\n\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpr5n7wnxv.py\"\
    , line 8\n    choose_num(7, 10)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(7, 10)\n            >>>10\n            choose_num(7, 8)\n\
    \            >>>8\n            choose_num(7, 11)\n            >>>-1\n        \
    \    choose_num(7, -1)\n            >>>-1\n            choose_num(7, 0)\n    \
    \        >>>-1\n            choose_num(7, 7)\n            >>>7\n            choose_num(7,\
    \ -1)\n            >>>-1\n            choose_num(7, -7)\n            >>>-1\n \
    \           choose_num(7, -10)\n            >>>-1\n            choose_num(7, -13)\n\
    \            >>>-1\n            choose_num(7, -14)\n            >>>-1\n      \
    \      choose_num(7, -15)\n            >>>-1\n            choose_num(7, -16)\n\
    \            >>>-1\n            choose_num(7, -17)\n            >>>-1\n      \
    \      choose_num(7, -18)\n            >>>-1\n            choose_num(7, -19)\n\
    \            >>>-1\n            choose_num(7, -20)\n            >>>-1\n      \
    \      choose_num(7, -21)\n            >>>-1\n            choose_num(7, -22)\n\
    \            >>>-1\n            choose_num(7, -23)\n            >>>-1\n      \
    \      choose_num(7, -24)\n            >>>-1\n            choose_num(7, -25)\n\
    \            >>>-1\n            choose_num(7, -26)\n            >>>-1\n      \
    \      choose_num(7, -27)\n            >>>-1\n            choose_num(7, -28)\n\
    \            >>>-1\n            choose_num(7, -29)\n            >>>-1\n      \
    \      choose_num(7, -30)\n            >>>-1\n            choose_num(7, -31)\n\
    \            >>>-1\n            choose_num(7, -32)\n            >>>-1\n      \
    \      choose_num(7, -33)\n            >>>-1\n            choose_num(7, -34)\n\
    \            >>>-1\n            choose_num(7, -35)\n            >>>-1\n      \
    \      choose_num(7, -36)\n            >>>-1\n            choose_num(7, -37)\n\
    \            >>>-1\n            choose_num(7, -38)\n            >>>-1\n      \
    \      choose_num(7, -39)\n            >>>-1\n            choose_num(7, -40)\n\
    \            >>>-1\n            choose_num(7, -41)\n            >>>-1\n      \
    \      choose_num(7, -42)\n            >>>-1\n\ndef check(candidate):\n    assert\
    \ candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33,\
    \ 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6,\
    \ 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) ==\
    \ -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqgpcgoew.py\"\
    , line 8\n    choose_num(7, 10)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(7, 10)\n            >>>8\n            choose_num(7, 8)\n\
    \            >>>-1\n            choose_num(7, 9)\n            >>>-1\n        \
    \    choose_num(7, 10)\n            >>>-1\n            choose_num(7, 11)\n   \
    \         >>>-1\n            choose_num(7, 12)\n            >>>-1\n          \
    \  choose_num(7, 13)\n            >>>-1\n            choose_num(7, 14)\n     \
    \       >>>-1\n            choose_num(7, 15)\n            >>>-1\n            choose_num(7,\
    \ 16)\n            >>>-1\n            choose_num(7, 17)\n            >>>-1\n \
    \           choose_num(7, 18)\n            >>>-1\n            choose_num(7, 19)\n\
    \            >>>-1\n            choose_num(7, 20)\n            >>>-1\n       \
    \     choose_num(7, 21)\n            >>>-1\n            choose_num(7, 22)\n  \
    \          >>>-1\n            choose_num(7, 23)\n            >>>-1\n         \
    \   choose_num(7, 24)\n            >>>-1\n            choose_num(7, 25)\n    \
    \        >>>-1\n            choose_num(7, 26)\n            >>>-1\n           \
    \ choose_num(7, 27)\n            >>>-1\n            choose_num(7, 28)\n      \
    \      >>>-1\n            choose_num(7, 29)\n            >>>-1\n            choose_num(7,\
    \ 30)\n            >>>-1\n            choose_num(7, 31)\n            >>>-1\n \
    \           choose_num(7, 32)\n            >>>-1\n            choose_num(7, 33)\n\
    \            >>>-1\n            choose_num(7, 34)\n            >>>-1\n       \
    \     choose_num(7, 35)\n            >>>-1\n            choose_num(7, 36)\n  \
    \          >>>-1\n            choose_num(7, 37)\n            >>>-1\n         \
    \   choose_num(7, 38)\n            >>>-1\n            choose_num(7, 39)\n    \
    \        >>>-1\n            choose_num(7, 40)\n            >>>-1\n           \
    \ choose_num(7, 41)\n            >>>-1\n            choose_num(7, 42)\n      \
    \      >>>-1\n            choose_num(7, 43)\n            >>>-1\n            choose_num(7,\
    \ 44)\n            >>>-1\n            choose_num(7, 45)\n            >>>-1\n \
    \           choose_num(7, 46)\n            >>>-1\n            choose_num(7, 47)\n\
    \            >>>-1\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n\
    \    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3j2pvz94.py\"\
    , line 8\n    choose_num(7, 10)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(7, 12)\n            choose_num(7, 10)\n            choose_num(7,\
    \ 11)\n            choose_num(7, 13)\n            choose_num(7, 14)\n        \
    \    choose_num(7, 15)\n            choose_num(7, 16)\n            choose_num(7,\
    \ 17)\n            choose_num(7, 18)\n            choose_num(7, 19)\n        \
    \    choose_num(7, 20)\n            choose_num(7, 21)\n            choose_num(7,\
    \ 22)\n            choose_num(7, 23)\n            choose_num(7, 24)\n        \
    \    choose_num(7, 25)\n            choose_num(7, 26)\n            choose_num(7,\
    \ 27)\n            choose_num(7, 28)\n            choose_num(7, 29)\n        \
    \    choose_num(7, 30)\n            choose_num(7, 31)\n            choose_num(7,\
    \ 32)\n            choose_num(7, 33)\n            choose_num(7, 34)\n        \
    \    choose_num(7, 35)\n            choose_num(7, 36)\n            choose_num(7,\
    \ 37)\n            choose_num(7, 38)\n            choose_num(7, 39)\n        \
    \    choose_num(7, 40)\n            choose_num(7, 41)\n            choose_num(7,\
    \ 42)\n            choose_num(7, 43)\n            choose_num(7, 44)\n        \
    \    choose_num(7, 45)\n            choose_num(7, 46)\n            choose_num(7,\
    \ 47)\n            choose_num(7, 48)\n            choose_num(7, 49)\n        \
    \    choose_num(7, 50)\n            choose_num(7, 51)\n            choose_num(7,\
    \ 52)\n            choose_num(7, 53)\n            choose_num(7, 54)\n        \
    \    choose_num(7, 55)\n            choose_num(7, 56)\n            choose_num(7,\
    \ 57)\n            choose_num(7, 58)\n            choose_num(7, 59)\n        \
    \    choose_num(7, 60)\n            choose_num(7, 61)\n            choose_num(7,\
    \ 62)\n            choose_num(7, 63)\n            choose_num(7, 64)\n        \
    \    choose_num(7, 65)\n            choose_num(7, 66)\n            choose_num(7,\
    \ 67)\n            choose_num(7, 68)\n            cho\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdju7ar1z.py\"\
    , line 8\n    choose_num(7, 12)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(7, 8)\n            >>>8\n            choose_num(7, 9)\n \
    \           >>>-1\n            choose_num(8, 9)\n            >>>-1\n         \
    \   choose_num(9, 9)\n            >>>-1\n            choose_num(9, 10)\n     \
    \       >>>-1\n            choose_num(9, 11)\n            >>>-1\n            choose_num(9,\
    \ 12)\n            >>>-1\n            choose_num(9, 13)\n            >>>-1\n \
    \           choose_num(9, 14)\n            >>>-1\n            choose_num(9, 15)\n\
    \            >>>-1\n            choose_num(9, 16)\n            >>>-1\n       \
    \     choose_num(9, 17)\n            >>>-1\n            choose_num(9, 18)\n  \
    \          >>>-1\n            choose_num(9, 19)\n            >>>-1\n         \
    \   choose_num(9, 20)\n            >>>-1\n            choose_num(9, 21)\n    \
    \        >>>-1\n            choose_num(9, 22)\n            >>>-1\n           \
    \ choose_num(9, 23)\n            >>>-1\n            choose_num(9, 24)\n      \
    \      >>>-1\n            choose_num(9, 25)\n            >>>-1\n            choose_num(9,\
    \ 26)\n            >>>-1\n            choose_num(9, 27)\n            >>>-1\n \
    \           choose_num(9, 28)\n            >>>-1\n            choose_num(9, 29)\n\
    \            >>>-1\n            choose_num(9, 30)\n            >>>-1\n       \
    \     choose_num(9, 31)\n            >>>-1\n            choose_num(9, 32)\n  \
    \          >>>-1\n            choose_num(9, 33)\n            >>>-1\n         \
    \   choose_num(9, 34)\n            >>>-1\n            choose_num(9, 35)\n    \
    \        >>>-1\n            choose_num(9, 36)\n            >>>-1\n           \
    \ choose_num(9, 37)\n            >>>-1\n            choose_num(9, 38)\n      \
    \      >>>-1\n            choose_num(9, 39)\n            >>>-1\n            choose_num(9,\
    \ 40)\n            >>>-1\n            choose_num(9, 41)\n            >>>-1\n \
    \           choose_num(9, 42)\n            >>>-1\n            choose_num(9, 43)\n\
    \            >>>-1\n            choose_num(9, 44)\n            >>>-1\n       \
    \     choose_num(9, 45)\n            >>>-1\n            choose_num(9, 46)\n  \
    \          >>>-1\n            \ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_gnc9f15.py\"\
    , line 8\n    choose_num(7, 8)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(7, 9)\n            >>>8\n            choose_num(7, 10)\n\
    \            >>>-1\n            choose_num(7, 11)\n            >>>-1\n       \
    \     choose_num(7, 12)\n            >>>-1\n            choose_num(7, 13)\n  \
    \          >>>-1\n            choose_num(7, 14)\n            >>>-1\n         \
    \   choose_num(7, 15)\n            >>>-1\n            choose_num(7, 16)\n    \
    \        >>>-1\n            choose_num(7, 17)\n            >>>-1\n           \
    \ choose_num(7, 18)\n            >>>-1\n            choose_num(7, 19)\n      \
    \      >>>-1\n            choose_num(7, 20)\n            >>>-1\n            choose_num(7,\
    \ 21)\n            >>>-1\n            choose_num(7, 22)\n            >>>-1\n \
    \           choose_num(7, 23)\n            >>>-1\n            choose_num(7, 24)\n\
    \            >>>-1\n            choose_num(7, 25)\n            >>>-1\n       \
    \     choose_num(7, 26)\n            >>>-1\n            choose_num(7, 27)\n  \
    \          >>>-1\n            choose_num(7, 28)\n            >>>-1\n         \
    \   choose_num(7, 29)\n            >>>-1\n            choose_num(7, 30)\n    \
    \        >>>-1\n            choose_num(7, 31)\n            >>>-1\n           \
    \ choose_num(7, 32)\n            >>>-1\n            choose_num(7, 33)\n      \
    \      >>>-1\n            choose_num(7, 34)\n            >>>-1\n            choose_num(7,\
    \ 35)\n            >>>-1\n            choose_num(7, 36)\n            >>>-1\n \
    \           choose_num(7, 37)\n            >>>-1\n            choose_num(7, 38)\n\
    \            >>>-1\n            choose_num(7, 39)\n            >>>-1\n       \
    \     choose_num(7, 40)\n            >>>-1\n            choose_num(7, 41)\n  \
    \          >>>-1\n            choose_num(7, 42)\n            >>>-1\n         \
    \   choose_num(7, 43)\n            >>>-1\n            choose_num(7, 44)\n    \
    \        >>>-1\n            choose_num(7, 45)\n            >>>-1\n           \
    \ choose_num(7, 46)\n            >>>-1\n            choose_num(7, 47)\n      \
    \      >>>-1\n            choose_num(7, 48)\n            >>>-1\n            choose_num(7,\
    \ 49)\n            >>>\ndef check(candidate):\n    assert candidate(12, 15) ==\
    \ 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbcyous5w.py\"\
    , line 8\n    choose_num(7, 9)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(7, 10)\n            >>>7\n            choose_num(7, 11)\n\
    \            >>>-1\n            choose_num(7, 12)\n            >>>-1\n       \
    \     choose_num(7, 13)\n            >>>-1\n            choose_num(7, 14)\n  \
    \          >>>-1\n            choose_num(7, 15)\n            >>>-1\n         \
    \   choose_num(7, 16)\n            >>>-1\n            choose_num(7, 17)\n    \
    \        >>>-1\n            choose_num(7, 18)\n            >>>-1\n           \
    \ choose_num(7, 19)\n            >>>-1\n            choose_num(7, 20)\n      \
    \      >>>-1\n            choose_num(7, 21)\n            >>>-1\n            choose_num(7,\
    \ 22)\n            >>>-1\n            choose_num(7, 23)\n            >>>-1\n \
    \           choose_num(7, 24)\n            >>>-1\n            choose_num(7, 25)\n\
    \            >>>-1\n            choose_num(7, 26)\n            >>>-1\n       \
    \     choose_num(7, 27)\n            >>>-1\n            choose_num(7, 28)\n  \
    \          >>>-1\n            choose_num(7, 29)\n            >>>-1\n         \
    \   choose_num(7, 30)\n            >>>-1\n            choose_num(7, 31)\n    \
    \        >>>-1\n            choose_num(7, 32)\n            >>>-1\n           \
    \ choose_num(7, 33)\n            >>>-1\n            choose_num(7, 34)\n      \
    \      >>>-1\n            choose_num(7, 35)\n            >>>-1\n            choose_num(7,\
    \ 36)\n            >>>-1\n            choose_num(7, 37)\n            >>>-1\n \
    \           choose_num(7, 38)\n            >>>-1\n            choose_num(7, 39)\n\
    \            >>>-1\n            choose_num(7, 40)\n            >>>-1\n       \
    \     choose_num(7, 41)\n            >>>-1\n            choose_num(7, 42)\n  \
    \          >>>-1\n            choose_num(7, 43)\n            >>>-1\n         \
    \   choose_num(7, 44)\n            >>>-1\n            choose_num(7, 45)\n    \
    \        >>>-1\n            choose_num(7, 46)\n            >>>-1\n           \
    \ choose_num(7, 47)\n            >>>-1\n            choose_num(7, 48)\n      \
    \      >>>-1\n            choose_num(7, 49)\n            >>>-1\n            choose_num(7,\
    \ 50)\n            >>>\ndef check(candidate):\n    assert candidate(12, 15) ==\
    \ 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7fikk7rz.py\"\
    , line 8\n    choose_num(7, 10)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(7, 9)\n            >>>8\n            choose_num(7, 10)\n\
    \            >>>-1\n            \"\"\"\n    \"\"\"\n    if x > y:\n        x,\
    \ y = y, x\n    if x % 2 == 0:\n        if y % 2 == 0:\n            return x\n\
    \        else:\n            return -1\n    else:\n        if y % 2 == 0:\n   \
    \         return -1\n        else:\n            return x\n\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_pwwov1c.py\"\
    , line 8\n    choose_num(7, 9)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(3,5)\n            choose_num(3,4)\n            choose_num(3,6)\n\
    \            choose_num(3,7)\n            choose_num(3,8)\n            choose_num(3,9)\n\
    \            choose_num(3,10)\n            choose_num(3,11)\n            choose_num(3,12)\n\
    \            choose_num(3,13)\n            choose_num(3,14)\n            choose_num(3,15)\n\
    \            choose_num(3,16)\n            choose_num(3,17)\n            choose_num(3,18)\n\
    \            choose_num(3,19)\n            choose_num(3,20)\n            choose_num(3,21)\n\
    \            choose_num(3,22)\n            choose_num(3,23)\n            choose_num(3,24)\n\
    \            choose_num(3,25)\n            choose_num(3,26)\n            choose_num(3,27)\n\
    \            choose_num(3,28)\n            choose_num(3,29)\n            choose_num(3,30)\n\
    \            choose_num(3,31)\n            choose_num(3,32)\n            choose_num(3,33)\n\
    \            choose_num(3,34)\n            choose_num(3,35)\n            choose_num(3,36)\n\
    \            choose_num(3,37)\n            choose_num(3,38)\n            choose_num(3,39)\n\
    \            choose_num(3,40)\n            choose_num(3,41)\n            choose_num(3,42)\n\
    \            choose_num(3,43)\n            choose_num(3,44)\n            choose_num(3,45)\n\
    \            choose_num(3,46)\n            choose_num(3,47)\n            choose_num(3,48)\n\
    \            choose_num(3,49)\n            choose_num(3,50)\n            choose_num(3,51)\n\
    \            choose_num(3,52)\n            choose_num(3,53)\n            choose_num(3,54)\n\
    \            choose_num(3,55)\n            choose_num(3,56)\n            choose_num(3,57)\n\
    \            choose_num(3,58)\n            choose_num(3,59)\n            choose_num(3,60)\n\
    \            choose_num(3,61)\n            choose_num(3,62)\n            choose_num(3,63\n\
    def check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuia2jzok.py\"\
    , line 8\n    choose_num(3,5)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(4,5)\n            choose_num(3,4)\n            choose_num(3,5)\n\
    \            choose_num(4,6)\n            choose_num(5,6)\n            choose_num(5,7)\n\
    \            choose_num(6,7)\n            choose_num(7,7)\n            choose_num(8,9)\n\
    \            choose_num(9,9)\n            choose_num(10,11)\n            choose_num(11,11)\n\
    \            choose_num(12,13)\n            choose_num(13,13)\n            choose_num(14,15)\n\
    \            choose_num(15,15)\n            choose_num(16,17)\n            choose_num(17,17)\n\
    \            choose_num(18,19)\n            choose_num(19,19)\n            choose_num(20,21)\n\
    \            choose_num(21,21)\n            choose_num(22,23)\n            choose_num(23,23)\n\
    \            choose_num(24,25)\n            choose_num(25,25)\n            choose_num(26,27)\n\
    \            choose_num(27,27)\n            choose_num(28,29)\n            choose_num(29,29)\n\
    \            choose_num(30,31)\n            choose_num(31,31)\n            choose_num(32,33)\n\
    \            choose_num(33,33)\n            choose_num(34,35)\n            choose_num(35,35)\n\
    \            choose_num(36,37)\n            choose_num(37,37)\n            choose_num(38,39)\n\
    \            choose_num(39,39)\n            choose_num(40,41)\n            choose_num(41,41)\n\
    \            choose_num(42,43)\n            choose_num(43,43)\n            choose_num(44,45)\n\
    \            choose_num(45,45)\n            choose_num(46,47)\n            choose_num(47,47)\n\
    \            choose_num(48,49)\n            choose_num(49,49)\n            choose_num(50,51)\n\
    \            choose_num(51,51)\n            choose_num(52,53)\n            choose_num(53,53)\n\
    \            choose_num(54,55)\n            choose_num(55,55)\n            choose_num(56,57)\n\
    \            choose_num(57,57)\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpknevi21j.py\"\
    , line 8\n    choose_num(4,5)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(7, 10)\n            >> 7\n            choose_num(7, 8)\n\
    \            >> -1\n            choose_num(7, 11)\n            >> -1\n       \
    \     choose_num(7, 12)\n            >> -1\n            choose_num(7, 13)\n  \
    \          >> -1\n            choose_num(7, 14)\n            >> -1\n         \
    \   choose_num(7, 15)\n            >> -1\n            choose_num(7, 16)\n    \
    \        >> -1\n            choose_num(7, 17)\n            >> -1\n           \
    \ choose_num(7, 18)\n            >> -1\n            choose_num(7, 19)\n      \
    \      >> -1\n            choose_num(7, 20)\n            >> -1\n            choose_num(7,\
    \ 21)\n            >> -1\n            choose_num(7, 22)\n            >> -1\n \
    \           choose_num(7, 23)\n            >> -1\n            choose_num(7, 24)\n\
    \            >> -1\n            choose_num(7, 25)\n            >> -1\n       \
    \     choose_num(7, 26)\n            >> -1\n            choose_num(7, 27)\n  \
    \          >> -1\n            choose_num(7, 28)\n            >> -1\n         \
    \   choose_num(7, 29)\n            >> -1\n            choose_num(7, 30)\n    \
    \        >> -1\n            choose_num(7, 31)\n            >> -1\n           \
    \ choose_num(7, 32)\n            >> -1\n            choose_num(7, 33)\n      \
    \      >> -1\n            choose_num(7, 34)\n            >> -1\n            choose_num(7,\
    \ 35)\n            >> -1\n            choose_num(7, 36)\n            >> -1\n \
    \           choose_num(7, 37)\n            >> -1\n            choose_num(7, 38)\n\
    \            >> -1\n            choose_num(7, 39)\n            >> -1\n       \
    \     choose_num(7, 40)\n            >> -1\n            choose_num(7, 41)\n  \
    \          >> -1\n            choose_num(7, 42)\n            >> -1\n         \
    \   choose_num(7, 43)\n            >> -1\n            choose_num(7, 44)\n    \
    \        >> -1\n            choose_num(7, 45)\n            >> -1\n           \
    \ choose_num(7, 46)\n            >> -1\n            choose_num(7, 47)\n      \
    \      >> -1\n            choose_num(7, 48)\n            >> -1\n            choose_num(7,\
    \ 49)\n            >> \ndef check(candidate):\n    assert candidate(12, 15) ==\
    \ 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpse0mq34t.py\"\
    , line 8\n    choose_num(7, 10)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(1, 10)\n            choose_num(7, 10)\n            choose_num(7,\
    \ 8)\n            choose_num(7, 9)\n            choose_num(7, 11)\n          \
    \  choose_num(7, 12)\n            choose_num(7, 13)\n            choose_num(7,\
    \ 14)\n            choose_num(7, 15)\n            choose_num(7, 16)\n        \
    \    choose_num(7, 17)\n            choose_num(7, 18)\n            choose_num(7,\
    \ 19)\n            choose_num(7, 20)\n            choose_num(7, 21)\n        \
    \    choose_num(7, 22)\n            choose_num(7, 23)\n            choose_num(7,\
    \ 24)\n            choose_num(7, 25)\n            choose_num(7, 26)\n        \
    \    choose_num(7, 27)\n            choose_num(7, 28)\n            choose_num(7,\
    \ 29)\n            choose_num(7, 30)\n            choose_num(7, 31)\n        \
    \    choose_num(7, 32)\n            choose_num(7, 33)\n            choose_num(7,\
    \ 34)\n            choose_num(7, 35)\n            choose_num(7, 36)\n        \
    \    choose_num(7, 37)\n            choose_num(7, 38)\n            choose_num(7,\
    \ 39)\n            choose_num(7, 40)\n            choose_num(7, 41)\n        \
    \    choose_num(7, 42)\n            choose_num(7, 43)\n            choose_num(7,\
    \ 44)\n            choose_num(7, 45)\n            choose_num(7, 46)\n        \
    \    choose_num(7, 47)\n            choose_num(7, 48)\n            choose_num(7,\
    \ 49)\n            choose_num(7, 50)\n            choose_num(7, 51)\n        \
    \    choose_num(7, 52)\n            choose_num(7, 53)\n            choose_num(7,\
    \ 54)\n            choose_num(7, 55)\n            choose_num(7, 56)\n        \
    \    choose_num(7, 57)\n            choose_num(7, 58)\n            choose_num(7,\
    \ 59)\n            choose_num(7, 60)\n            choose_num(7, 61)\n        \
    \    choose_num(7, 62)\n            choose_num(7, 63)\n            choose_num(7,\
    \ 64)\n            choose_num(7, 65)\n            choose_num(7, \ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprhuqnu_l.py\"\
    , line 8\n    choose_num(1, 10)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(7, 10)\n            >>>10\n            choose_num(7, 11)\n\
    \            >>>-1\n            choose_num(7, 12)\n            >>>-1\n       \
    \     choose_num(7, 13)\n            >>>-1\n            choose_num(7, 14)\n  \
    \          >>>-1\n            choose_num(7, 15)\n            >>>-1\n         \
    \   choose_num(7, 16)\n            >>>-1\n            choose_num(7, 17)\n    \
    \        >>>-1\n            choose_num(7, 18)\n            >>>-1\n           \
    \ choose_num(7, 19)\n            >>>-1\n            choose_num(7, 20)\n      \
    \      >>>-1\n            choose_num(7, 21)\n            >>>-1\n            choose_num(7,\
    \ 22)\n            >>>-1\n            choose_num(7, 23)\n            >>>-1\n \
    \           choose_num(7, 24)\n            >>>-1\n            choose_num(7, 25)\n\
    \            >>>-1\n            choose_num(7, 26)\n            >>>-1\n       \
    \     choose_num(7, 27)\n            >>>-1\n            choose_num(7, 28)\n  \
    \          >>>-1\n            choose_num(7, 29)\n            >>>-1\n         \
    \   choose_num(7, 30)\n            >>>-1\n            choose_num(7, 31)\n    \
    \        >>>-1\n            choose_num(7, 32)\n            >>>-1\n           \
    \ choose_num(7, 33)\n            >>>-1\n            choose_num(7, 34)\n      \
    \      >>>-1\n            choose_num(7, 35)\n            >>>-1\n            choose_num(7,\
    \ 36)\n            >>>-1\n            choose_num(7, 37)\n            >>>-1\n \
    \           choose_num(7, 38)\n            >>>-1\n            choose_num(7, 39)\n\
    \            >>>-1\n            choose_num(7, 40)\n            >>>-1\n       \
    \     choose_num(7, 41)\n            >>>-1\n            choose_num(7, 42)\n  \
    \          >>>-1\n            choose_num(7, 43)\n            >>>-1\n         \
    \   choose_num(7, 44)\n            >>>-1\n            choose_num(7, 45)\n    \
    \        >>>-1\n            choose_num(7, 46)\n            >>>-1\n           \
    \ choose_num(7, 47)\n            >>>-1\n            choose_num(7, 48)\n      \
    \      >>>-1\n            choose_num(7, 49)\n            >>>-1\n            choose_num(7,\
    \ 50)\n            >>>\ndef check(candidate):\n    assert candidate(12, 15) ==\
    \ 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvpefj20i.py\"\
    , line 8\n    choose_num(7, 10)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \ >>> choose_num(7, 12)\n    7\n    >>> choose_num(7, 8)\n    -1\n    >>> choose_num(7,\
    \ 10)\n    -1\n    >>> choose_num(7, 11)\n    -1\n    >>> choose_num(7, 15)\n\
    \    -1\n    >>> choose_num(7, 16)\n    -1\n    >>> choose_num(7, 17)\n    -1\n\
    \    >>> choose_num(7, 18)\n    -1\n    >>> choose_num(7, 19)\n    -1\n    >>>\
    \ choose_num(7, 20)\n    -1\n    >>> choose_num(7, 21)\n    -1\n    >>> choose_num(7,\
    \ 22)\n    -1\n    >>> choose_num(7, 23)\n    -1\n    >>> choose_num(7, 24)\n\
    \    -1\n    >>> choose_num(7, 25)\n    -1\n    >>> choose_num(7, 26)\n    -1\n\
    \    >>> choose_num(7, 27)\n    -1\n    >>> choose_num(7, 28)\n    -1\n    >>>\
    \ choose_num(7, 29)\n    -1\n    >>> choose_num(7, 30)\n    -1\n    >>> choose_num(7,\
    \ 31)\n    -1\n    >>> choose_num(7, 32)\n    -1\n    >>> choose_num(7, 33)\n\
    \    -1\n    >>> choose_num(7, 34)\n    -1\n    >>> choose_num(7, 35)\n    -1\n\
    \    >>> choose_num(7, 36)\n    -1\n    >>> choose_num(7, 37)\n    -1\n    >>>\
    \ choose_num(7, 38)\n    -1\n    >>> choose_num(7, 39)\n    -1\n    >>> choose_num(7,\
    \ 40)\n    -1\n    >>> choose_num(7, 41)\n    -1\n    >>> choose_num(7, 42)\n\
    \    -1\n    >>> choose_num(7, 43)\n    -1\n    >>> choose_num(7, 44)\n    -1\n\
    \    >>> choose_num(7, 45)\n    -1\n    >>> choose_num(7, 46)\n    -1\n    >>>\
    \ choose_num(7, 47)\n    -1\n    >>> choose_num(7, 48)\n    -1\n    >>> choose_num(7,\
    \ 49)\n    -1\n    >>> choose_num(7, 50)\n    -1\n    >>> choose_num(7, 51)\n\
    \    -1\n    >>> choose_num(7, 52)\n    -1\n    >>> choose_num(7, 53)\n    -1\n\
    \    >>> choose_num(7, 54)\n    -1\n    >>> cho\ndef check(candidate):\n    assert\
    \ candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33,\
    \ 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6,\
    \ 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) ==\
    \ -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdrrgp230.py\"\
    , line 8\n    >>> choose_num(7, 12)\n    ^^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(3,5)\n            choose_num(3,10)\n            choose_num(3,15)\n\
    \            choose_num(3,20)\n            choose_num(3,25)\n            choose_num(3,30)\n\
    \            choose_num(3,35)\n            choose_num(3,40)\n            choose_num(3,45)\n\
    \            choose_num(3,50)\n            choose_num(3,55)\n            choose_num(3,60)\n\
    \            choose_num(3,65)\n            choose_num(3,70)\n            choose_num(3,75)\n\
    \            choose_num(3,80)\n            choose_num(3,85)\n            choose_num(3,90)\n\
    \            choose_num(3,95)\n            choose_num(3,100)\n            choose_num(3,105)\n\
    \            choose_num(3,110)\n            choose_num(3,115)\n            choose_num(3,120)\n\
    \            choose_num(3,125)\n            choose_num(3,130)\n            choose_num(3,135)\n\
    \            choose_num(3,140)\n            choose_num(3,145)\n            choose_num(3,150)\n\
    \            choose_num(3,155)\n            choose_num(3,160)\n            choose_num(3,165)\n\
    \            choose_num(3,170)\n            choose_num(3,175)\n            choose_num(3,180)\n\
    \            choose_num(3,185)\n            choose_num(3,190)\n            choose_num(3,195)\n\
    \            choose_num(3,200)\n            choose_num(3,205)\n            choose_num(3,210)\n\
    \            choose_num(3,215)\n            choose_num(3,220)\n            choose_num(3,225)\n\
    \            choose_num(3,230)\n            choose_num(3,235)\n            choose_num(3,240)\n\
    \            choose_num(3,245)\n            choose_num(3,250)\n            choose_num(3,255)\n\
    \            choose_num(3,260)\n            choose_num(3,265)\n            choose_num(3,270)\n\
    \            choose_num(3,275)\n            choose_num(3,280)\n            choose_num(3,285)\n\
    \            choose_num(3,290)\n            choose_num(\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1cvveqtr.py\"\
    , line 8\n    choose_num(3,5)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(8, 10)\n            choose_num(8, 11)\n            choose_num(8,\
    \ 12)\n            choose_num(8, 13)\n            choose_num(8, 14)\n        \
    \    choose_num(8, 15)\n            choose_num(8, 16)\n            choose_num(8,\
    \ 17)\n            choose_num(8, 18)\n            choose_num(8, 19)\n        \
    \    choose_num(8, 20)\n            choose_num(8, 21)\n            choose_num(8,\
    \ 22)\n            choose_num(8, 23)\n            choose_num(8, 24)\n        \
    \    choose_num(8, 25)\n            choose_num(8, 26)\n            choose_num(8,\
    \ 27)\n            choose_num(8, 28)\n            choose_num(8, 29)\n        \
    \    choose_num(8, 30)\n            choose_num(8, 31)\n            choose_num(8,\
    \ 32)\n            choose_num(8, 33)\n            choose_num(8, 34)\n        \
    \    choose_num(8, 35)\n            choose_num(8, 36)\n            choose_num(8,\
    \ 37)\n            choose_num(8, 38)\n            choose_num(8, 39)\n        \
    \    choose_num(8, 40)\n            choose_num(8, 41)\n            choose_num(8,\
    \ 42)\n            choose_num(8, 43)\n            choose_num(8, 44)\n        \
    \    choose_num(8, 45)\n            choose_num(8, 46)\n            choose_num(8,\
    \ 47)\n            choose_num(8, 48)\n            choose_num(8, 49)\n        \
    \    choose_num(8, 50)\n            choose_num(8, 51)\n            choose_num(8,\
    \ 52)\n            choose_num(8, 53)\n            choose_num(8, 54)\n        \
    \    choose_num(8, 55)\n            choose_num(8, 56)\n            choose_num(8,\
    \ 57)\n            choose_num(8, 58)\n            choose_num(8, 59)\n        \
    \    choose_num(8, 60)\n            choose_num(8, 61)\n            choose_num(8,\
    \ 62)\n            choose_num(8, 63)\n            choose_num(8, 64)\n        \
    \    choose_num(8, 65)\n            choose_num(8, 66)\n            choose_num(8,\
    \ 67)\n            choose_num(8, 68)\n            cho\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptdlpujeo.py\"\
    , line 8\n    choose_num(8, 10)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(3,4)\n            choose_num(3,5)\n            choose_num(3,6)\n\
    \            choose_num(3,7)\n            choose_num(3,8)\n            choose_num(3,9)\n\
    \            choose_num(3,10)\n            choose_num(3,11)\n            choose_num(3,12)\n\
    \            choose_num(3,13)\n            choose_num(3,14)\n            choose_num(3,15)\n\
    \            choose_num(3,16)\n            choose_num(3,17)\n            choose_num(3,18)\n\
    \            choose_num(3,19)\n            choose_num(3,20)\n            choose_num(3,21)\n\
    \            choose_num(3,22)\n            choose_num(3,23)\n            choose_num(3,24)\n\
    \            choose_num(3,25)\n            choose_num(3,26)\n            choose_num(3,27)\n\
    \            choose_num(3,28)\n            choose_num(3,29)\n            choose_num(3,30)\n\
    \            choose_num(3,31)\n            choose_num(3,32)\n            choose_num(3,33)\n\
    \            choose_num(3,34)\n            choose_num(3,35)\n            choose_num(3,36)\n\
    \            choose_num(3,37)\n            choose_num(3,38)\n            choose_num(3,39)\n\
    \            choose_num(3,40)\n            choose_num(3,41)\n            choose_num(3,42)\n\
    \            choose_num(3,43)\n            choose_num(3,44)\n            choose_num(3,45)\n\
    \            choose_num(3,46)\n            choose_num(3,47)\n            choose_num(3,48)\n\
    \            choose_num(3,49)\n            choose_num(3,50)\n            choose_num(3,51)\n\
    \            choose_num(3,52)\n            choose_num(3,53)\n            choose_num(3,54)\n\
    \            choose_num(3,55)\n            choose_num(3,56)\n            choose_num(3,57)\n\
    \            choose_num(3,58)\n            choose_num(3,59)\n            choose_num(3,60)\n\
    \            choose_num(3,61)\n            choose_num(3,62)\n            choose_num(3,63\n\
    def check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmcu0bbk7.py\"\
    , line 8\n    choose_num(3,4)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \ >>> choose_num(20, 30)\n    40\n    >>> choose_num(20, 30)\n    -1\n    \"\"\
    \"\n    if x > y:\n        x, y = y, x\n    \n    even = x % 2 == 0\n    \n  \
    \  if even:\n        \n        if y % 2 == 0:\n            return y\n        else:\n\
    \            return -1\n    else:\n        \n        if y % 2 == 0:\n        \
    \    return -1\n        else:\n            return y\n    \ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplo9kzl7n.py\"\
    , line 12\n    \"\"\"\n    ^\nSyntaxError: unterminated triple-quoted string literal\
    \ (detected at line 44)\n"
  exit_code: 1
  status: SyntaxError
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(7, 9)\n            >>>7\n            choose_num(7, 10)\n\
    \            >>>-1\n            choose_num(7, 11)\n            >>>-1\n       \
    \     choose_num(7, 12)\n            >>>-1\n            choose_num(7, 13)\n  \
    \          >>>-1\n            choose_num(7, 14)\n            >>>-1\n         \
    \   choose_num(7, 15)\n            >>>-1\n            choose_num(7, 16)\n    \
    \        >>>-1\n            choose_num(7, 17)\n            >>>-1\n           \
    \ choose_num(7, 18)\n            >>>-1\n            choose_num(7, 19)\n      \
    \      >>>-1\n            choose_num(7, 20)\n            >>>-1\n            choose_num(7,\
    \ 21)\n            >>>-1\n            choose_num(7, 22)\n            >>>-1\n \
    \           choose_num(7, 23)\n            >>>-1\n            choose_num(7, 24)\n\
    \            >>>-1\n            choose_num(7, 25)\n            >>>-1\n       \
    \     choose_num(7, 26)\n            >>>-1\n            choose_num(7, 27)\n  \
    \          >>>-1\n            choose_num(7, 28)\n            >>>-1\n         \
    \   choose_num(7, 29)\n            >>>-1\n            choose_num(7, 30)\n    \
    \        >>>-1\n            choose_num(7, 31)\n            >>>-1\n           \
    \ choose_num(7, 32)\n            >>>-1\n            choose_num(7, 33)\n      \
    \      >>>-1\n            choose_num(7, 34)\n            >>>-1\n            choose_num(7,\
    \ 35)\n            >>>-1\n            choose_num(7, 36)\n            >>>-1\n \
    \           choose_num(7, 37)\n            >>>-1\n            choose_num(7, 38)\n\
    \            >>>-1\n            choose_num(7, 39)\n            >>>-1\n       \
    \     choose_num(7, 40)\n            >>>-1\n            choose_num(7, 41)\n  \
    \          >>>-1\n            choose_num(7, 42)\n            >>>-1\n         \
    \   choose_num(7, 43)\n            >>>-1\n            choose_num(7, 44)\n    \
    \        >>>-1\n            choose_num(7, 45)\n            >>>-1\n           \
    \ choose_num(7, 46)\n            >>>-1\n            choose_num(7, 47)\n      \
    \      >>>-1\n            choose_num(7, 48)\n            >>>-1\n            choose_num(7,\
    \ 49)\n            >>>\ndef check(candidate):\n    assert candidate(12, 15) ==\
    \ 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4jca_l51.py\"\
    , line 8\n    choose_num(7, 9)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(8, 10)\n            >>>8\n            choose_num(8, 11)\n\
    \            >>>-1\n            choose_num(8, 12)\n            >>>-1\n       \
    \     choose_num(8, 13)\n            >>>-1\n            choose_num(8, 14)\n  \
    \          >>>-1\n            choose_num(8, 15)\n            >>>-1\n         \
    \   choose_num(8, 16)\n            >>>-1\n            choose_num(8, 17)\n    \
    \        >>>-1\n            choose_num(8, 18)\n            >>>-1\n           \
    \ choose_num(8, 19)\n            >>>-1\n            choose_num(8, 20)\n      \
    \      >>>-1\n            choose_num(8, 21)\n            >>>-1\n            choose_num(8,\
    \ 22)\n            >>>-1\n            choose_num(8, 23)\n            >>>-1\n \
    \           choose_num(8, 24)\n            >>>-1\n            choose_num(8, 25)\n\
    \            >>>-1\n            choose_num(8, 26)\n            >>>-1\n       \
    \     choose_num(8, 27)\n            >>>-1\n            choose_num(8, 28)\n  \
    \          >>>-1\n            choose_num(8, 29)\n            >>>-1\n         \
    \   choose_num(8, 30)\n            >>>-1\n            choose_num(8, 31)\n    \
    \        >>>-1\n            choose_num(8, 32)\n            >>>-1\n           \
    \ choose_num(8, 33)\n            >>>-1\n            choose_num(8, 34)\n      \
    \      >>>-1\n            choose_num(8, 35)\n            >>>-1\n            choose_num(8,\
    \ 36)\n            >>>-1\n            choose_num(8, 37)\n            >>>-1\n \
    \           choose_num(8, 38)\n            >>>-1\n            choose_num(8, 39)\n\
    \            >>>-1\n            choose_num(8, 40)\n            >>>-1\n       \
    \     choose_num(8, 41)\n            >>>-1\n            choose_num(8, 42)\n  \
    \          >>>-1\n            choose_num(8, 43)\n            >>>-1\n         \
    \   choose_num(8, 44)\n            >>>-1\n            choose_num(8, 45)\n    \
    \        >>>-1\n            choose_num(8, 46)\n            >>>-1\n           \
    \ choose_num(8, 47)\n            >>>-1\n            choose_num(8, 48)\n      \
    \      >>>-1\n            choose_num(8, 49)\n            >>>-1\n            choose_num(8,\
    \ 50)\n            >>>\ndef check(candidate):\n    assert candidate(12, 15) ==\
    \ 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0qwm96_j.py\"\
    , line 8\n    choose_num(8, 10)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(7, 3)\n            >>>5\n            choose_num(7, 4)\n \
    \           >>>-1\n            choose_num(7, 5)\n            >>>-1\n         \
    \   choose_num(7, 6)\n            >>>-1\n            choose_num(7, 7)\n      \
    \      >>>-1\n            choose_num(7, 8)\n            >>>-1\n            choose_num(7,\
    \ 9)\n            >>>-1\n            choose_num(7, 10)\n            >>>-1\n  \
    \          choose_num(7, 11)\n            >>>-1\n            choose_num(7, 12)\n\
    \            >>>-1\n            choose_num(7, 13)\n            >>>-1\n       \
    \     choose_num(7, 14)\n            >>>-1\n            choose_num(7, 15)\n  \
    \          >>>-1\n            choose_num(7, 16)\n            >>>-1\n         \
    \   choose_num(7, 17)\n            >>>-1\n            choose_num(7, 18)\n    \
    \        >>>-1\n            choose_num(7, 19)\n            >>>-1\n           \
    \ choose_num(7, 20)\n            >>>-1\n            choose_num(7, 21)\n      \
    \      >>>-1\n            choose_num(7, 22)\n            >>>-1\n            choose_num(7,\
    \ 23)\n            >>>-1\n            choose_num(7, 24)\n            >>>-1\n \
    \           choose_num(7, 25)\n            >>>-1\n            choose_num(7, 26)\n\
    \            >>>-1\n            choose_num(7, 27)\n            >>>-1\n       \
    \     choose_num(7, 28)\n            >>>-1\n            choose_num(7, 29)\n  \
    \          >>>-1\n            choose_num(7, 30)\n            >>>-1\n         \
    \   choose_num(7, 31)\n            >>>-1\n            choose_num(7, 32)\n    \
    \        >>>-1\n            choose_num(7, 33)\n            >>>-1\n           \
    \ choose_num(7, 34)\n            >>>-1\n            choose_num(7, 35)\n      \
    \      >>>-1\n            choose_num(7, 36)\n            >>>-1\n            choose_num(7,\
    \ 37)\n            >>>-1\n            choose_num(7, 38)\n            >>>-1\n \
    \           choose_num(7, 39)\n            >>>-1\n            choose_num(7, 40)\n\
    \            >>>-1\n            choose_num(7, 41)\n            >>>-1\n       \
    \     choose_num(7, 42)\n            >>>-1\n            choose_num(7, 43)\n  \
    \          >>>-1\n            choose_num\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw0txo2nd.py\"\
    , line 8\n    choose_num(7, 3)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(6, 8)\n            > 8\n            choose_num(6, 7)\n  \
    \          > -1\n            choose_num(6, 10)\n            > -1\n           \
    \ choose_num(6, 11)\n            > -1\n            choose_num(6, 12)\n       \
    \     > -1\n            choose_num(6, 13)\n            > -1\n            choose_num(6,\
    \ 14)\n            > -1\n            choose_num(6, 15)\n            > -1\n   \
    \         choose_num(6, 16)\n            > -1\n            choose_num(6, 17)\n\
    \            > -1\n            choose_num(6, 18)\n            > -1\n         \
    \   choose_num(6, 19)\n            > -1\n            choose_num(6, 20)\n     \
    \       > -1\n            choose_num(6, 21)\n            > -1\n            choose_num(6,\
    \ 22)\n            > -1\n            choose_num(6, 23)\n            > -1\n   \
    \         choose_num(6, 24)\n            > -1\n            choose_num(6, 25)\n\
    \            > -1\n            choose_num(6, 26)\n            > -1\n         \
    \   choose_num(6, 27)\n            > -1\n            choose_num(6, 28)\n     \
    \       > -1\n            choose_num(6, 29)\n            > -1\n            choose_num(6,\
    \ 30)\n            > -1\n            choose_num(6, 31)\n            > -1\n   \
    \         choose_num(6, 32)\n            > -1\n            choose_num(6, 33)\n\
    \            > -1\n            choose_num(6, 34)\n            > -1\n         \
    \   choose_num(6, 35)\n            > -1\n            choose_num(6, 36)\n     \
    \       > -1\n            choose_num(6, 37)\n            > -1\n            choose_num(6,\
    \ 38)\n            > -1\n            choose_num(6, 39)\n            > -1\n   \
    \         choose_num(6, 40)\n            > -1\n            choose_num(6, 41)\n\
    \            > -1\n            choose_num(6, 42)\n            > -1\n         \
    \   choose_num(6, 43)\n            > -1\n            choose_num(6, 44)\n     \
    \       > -1\n            choose_num(6, 45)\n            > -1\n            choose_num(6,\
    \ 46)\n            > -1\n            choose_num(6, 47)\n            > -1\n   \
    \         choose_num(6, 48)\n            > -1\ndef check(candidate):\n    assert\
    \ candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33,\
    \ 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6,\
    \ 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) ==\
    \ -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3fg9lxf3.py\"\
    , line 8\n    choose_num(6, 8)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(7, 10)\n            >>>7\n            choose_num(7, 8)\n\
    \            >>>-1\n            choose_num(7, 11)\n            >>>-1\n       \
    \     choose_num(7, 12)\n            >>>-1\n            choose_num(7, 13)\n  \
    \          >>>-1\n            choose_num(7, 14)\n            >>>-1\n         \
    \   choose_num(7, 15)\n            >>>-1\n            choose_num(7, 16)\n    \
    \        >>>-1\n            choose_num(7, 17)\n            >>>-1\n           \
    \ choose_num(7, 18)\n            >>>-1\n            choose_num(7, 19)\n      \
    \      >>>-1\n            choose_num(7, 20)\n            >>>-1\n            choose_num(7,\
    \ 21)\n            >>>-1\n            choose_num(7, 22)\n            >>>-1\n \
    \           choose_num(7, 23)\n            >>>-1\n            choose_num(7, 24)\n\
    \            >>>-1\n            choose_num(7, 25)\n            >>>-1\n       \
    \     choose_num(7, 26)\n            >>>-1\n            choose_num(7, 27)\n  \
    \          >>>-1\n            choose_num(7, 28)\n            >>>-1\n         \
    \   choose_num(7, 29)\n            >>>-1\n            choose_num(7, 30)\n    \
    \        >>>-1\n            choose_num(7, 31)\n            >>>-1\n           \
    \ choose_num(7, 32)\n            >>>-1\n            choose_num(7, 33)\n      \
    \      >>>-1\n            choose_num(7, 34)\n            >>>-1\n            choose_num(7,\
    \ 35)\n            >>>-1\n            choose_num(7, 36)\n            >>>-1\n \
    \           choose_num(7, 37)\n            >>>-1\n            choose_num(7, 38)\n\
    \            >>>-1\n            choose_num(7, 39)\n            >>>-1\n       \
    \     choose_num(7, 40)\n            >>>-1\n            choose_num(7, 41)\n  \
    \          >>>-1\n            choose_num(7, 42)\n            >>>-1\n         \
    \   choose_num(7, 43)\n            >>>-1\n            choose_num(7, 44)\n    \
    \        >>>-1\n            choose_num(7, 45)\n            >>>-1\n           \
    \ choose_num(7, 46)\n            >>>-1\n            choose_num(7, 47)\n      \
    \      >>>-1\n            choose_num(7, 48)\n            >>>-1\n            choose_num(7,\
    \ 49)\n            >>>\ndef check(candidate):\n    assert candidate(12, 15) ==\
    \ 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1bnzgt12.py\"\
    , line 8\n    choose_num(7, 10)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(7, 8)\n            >>>8\n            choose_num(7, 9)\n \
    \           >>>-1\n            choose_num(7, 10)\n            >>>-1\n        \
    \    choose_num(7, 11)\n            >>>-1\n            choose_num(7, 12)\n   \
    \         >>>-1\n            choose_num(7, 13)\n            >>>-1\n          \
    \  choose_num(7, 14)\n            >>>-1\n            choose_num(7, 15)\n     \
    \       >>>-1\n            choose_num(7, 16)\n            >>>-1\n            choose_num(7,\
    \ 17)\n            >>>-1\n            choose_num(7, 18)\n            >>>-1\n \
    \           choose_num(7, 19)\n            >>>-1\n            choose_num(7, 20)\n\
    \            >>>-1\n            choose_num(7, 21)\n            >>>-1\n       \
    \     choose_num(7, 22)\n            >>>-1\n            choose_num(7, 23)\n  \
    \          >>>-1\n            choose_num(7, 24)\n            >>>-1\n         \
    \   choose_num(7, 25)\n            >>>-1\n            choose_num(7, 26)\n    \
    \        >>>-1\n            choose_num(7, 27)\n            >>>-1\n           \
    \ choose_num(7, 28)\n            >>>-1\n            choose_num(7, 29)\n      \
    \      >>>-1\n            choose_num(7, 30)\n            >>>-1\n            choose_num(7,\
    \ 31)\n            >>>-1\n            choose_num(7, 32)\n            >>>-1\n \
    \           choose_num(7, 33)\n            >>>-1\n            choose_num(7, 34)\n\
    \            >>>-1\n            choose_num(7, 35)\n            >>>-1\n       \
    \     choose_num(7, 36)\n            >>>-1\n            choose_num(7, 37)\n  \
    \          >>>-1\n            choose_num(7, 38)\n            >>>-1\n         \
    \   choose_num(7, 39)\n            >>>-1\n            choose_num(7, 40)\n    \
    \        >>>-1\n            choose_num(7, 41)\n            >>>-1\n           \
    \ choose_num(7, 42)\n            >>>-1\n            choose_num(7, 43)\n      \
    \      >>>-1\n            choose_num(7, 44)\n            >>>-1\n            choose_num(7,\
    \ 45)\n            >>>-1\n            choose_num(7, 46)\n            >>>-1\n \
    \           choose_num(7, 47)\n            >>>-1\n            choose_num(7, 48)\n\
    \            >>>-1\ndef check(candidate):\n    assert candidate(12, 15) == 14\n\
    \    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcj275fzq.py\"\
    , line 8\n    choose_num(7, 8)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(7, 10)\n            >> 7\n            choose_num(7, 9)\n\
    \            >> -1\n            choose_num(7, 11)\n            >> -1\n       \
    \     choose_num(7, 12)\n            >> -1\n            choose_num(7, 13)\n  \
    \          >> -1\n            choose_num(7, 14)\n            >> -1\n         \
    \   choose_num(7, 15)\n            >> -1\n            choose_num(7, 16)\n    \
    \        >> -1\n            choose_num(7, 17)\n            >> -1\n           \
    \ choose_num(7, 18)\n            >> -1\n            choose_num(7, 19)\n      \
    \      >> -1\n            choose_num(7, 20)\n            >> -1\n            choose_num(7,\
    \ 21)\n            >> -1\n            choose_num(7, 22)\n            >> -1\n \
    \           choose_num(7, 23)\n            >> -1\n            choose_num(7, 24)\n\
    \            >> -1\n            choose_num(7, 25)\n            >> -1\n       \
    \     choose_num(7, 26)\n            >> -1\n            choose_num(7, 27)\n  \
    \          >> -1\n            choose_num(7, 28)\n            >> -1\n         \
    \   choose_num(7, 29)\n            >> -1\n            choose_num(7, 30)\n    \
    \        >> -1\n            choose_num(7, 31)\n            >> -1\n           \
    \ choose_num(7, 32)\n            >> -1\n            choose_num(7, 33)\n      \
    \      >> -1\n            choose_num(7, 34)\n            >> -1\n            choose_num(7,\
    \ 35)\n            >> -1\n            choose_num(7, 36)\n            >> -1\n \
    \           choose_num(7, 37)\n            >> -1\n            choose_num(7, 38)\n\
    \            >> -1\n            choose_num(7, 39)\n            >> -1\n       \
    \     choose_num(7, 40)\n            >> -1\n            choose_num(7, 41)\n  \
    \          >> -1\n            choose_num(7, 42)\n            >> -1\n         \
    \   choose_num(7, 43)\n            >> -1\n            choose_num(7, 44)\n    \
    \        >> -1\n            choose_num(7, 45)\n            >> -1\n           \
    \ choose_num(7, 46)\n            >> -1\n            choose_num(7, 47)\n      \
    \      >> -1\n            choose_num(7, 48)\n            >> -1\n            choose_num(7,\
    \ 49)\n            >> \ndef check(candidate):\n    assert candidate(12, 15) ==\
    \ 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq1wdnm9q.py\"\
    , line 8\n    choose_num(7, 10)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(7, 9)\n            > 7\n            choose_num(7, 10)\n \
    \           > 7\n            choose_num(7, 11)\n            > 7\n            choose_num(7,\
    \ 12)\n            > 7\n            choose_num(7, 13)\n            > 7\n     \
    \       choose_num(7, 14)\n            > 7\n            choose_num(7, 15)\n  \
    \          > 7\n            choose_num(7, 16)\n            > 7\n            choose_num(7,\
    \ 17)\n            > 7\n            choose_num(7, 18)\n            > 7\n     \
    \       choose_num(7, 19)\n            > 7\n            choose_num(7, 20)\n  \
    \          > 7\n            choose_num(7, 21)\n            > 7\n            choose_num(7,\
    \ 22)\n            > 7\n            choose_num(7, 23)\n            > 7\n     \
    \       choose_num(7, 24)\n            > 7\n            choose_num(7, 25)\n  \
    \          > 7\n            choose_num(7, 26)\n            > 7\n            choose_num(7,\
    \ 27)\n            > 7\n            choose_num(7, 28)\n            > 7\n     \
    \       choose_num(7, 29)\n            > 7\n            choose_num(7, 30)\n  \
    \          > 7\n            choose_num(7, 31)\n            > 7\n            choose_num(7,\
    \ 32)\n            > 7\n            choose_num(7, 33)\n            > 7\n     \
    \       choose_num(7, 34)\n            > 7\n            choose_num(7, 35)\n  \
    \          > 7\n            choose_num(7, 36)\n            > 7\n            choose_num(7,\
    \ 37)\n            > 7\n            choose_num(7, 38)\n            > 7\n     \
    \       choose_num(7, 39)\n            > 7\n            choose_num(7, 40)\n  \
    \          > 7\n            choose_num(7, 41)\n            > 7\n            choose_num(7,\
    \ 42)\n            > 7\n            choose_num(7, 43)\n            > 7\n     \
    \       choose_num(7, 44)\n            > 7\n            choose_num(7, 45)\n  \
    \          > 7\n            choose_num(7, 46)\n            > 7\n            choose_num(7,\
    \ 47)\n            > 7\n            choose_num(7, 48)\n            > 7\n     \
    \       choose_num(7, 49)\n            > \ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa0b9ob6w.py\"\
    , line 8\n    choose_num(7, 9)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(7, 3)\n            >>>6\n            choose_num(7, 4)\n \
    \           >>>-1\n            \"\"\"\n    \"\"\"\n    if x > y:\n        x, y\
    \ = y, x\n    if x % 2 == 0:\n        if y % 2 == 0:\n            return x\n \
    \       else:\n            return -1\n    else:\n        if y % 2 == 0:\n    \
    \        return -1\n        else:\n            return x\n\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjpfuvd_i.py\"\
    , line 8\n    choose_num(7, 3)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(7, 9)\n            >>>8\n            choose_num(7, 10)\n\
    \            >>>-1\n            choose_num(7, 11)\n            >>>-1\n       \
    \     choose_num(7, 12)\n            >>>-1\n            choose_num(7, 13)\n  \
    \          >>>-1\n            choose_num(7, 14)\n            >>>-1\n         \
    \   choose_num(7, 15)\n            >>>-1\n            choose_num(7, 16)\n    \
    \        >>>-1\n            choose_num(7, 17)\n            >>>-1\n           \
    \ choose_num(7, 18)\n            >>>-1\n            choose_num(7, 19)\n      \
    \      >>>-1\n            choose_num(7, 20)\n            >>>-1\n            choose_num(7,\
    \ 21)\n            >>>-1\n            choose_num(7, 22)\n            >>>-1\n \
    \           choose_num(7, 23)\n            >>>-1\n            choose_num(7, 24)\n\
    \            >>>-1\n            choose_num(7, 25)\n            >>>-1\n       \
    \     choose_num(7, 26)\n            >>>-1\n            choose_num(7, 27)\n  \
    \          >>>-1\n            choose_num(7, 28)\n            >>>-1\n         \
    \   choose_num(7, 29)\n            >>>-1\n            choose_num(7, 30)\n    \
    \        >>>-1\n            choose_num(7, 31)\n            >>>-1\n           \
    \ choose_num(7, 32)\n            >>>-1\n            choose_num(7, 33)\n      \
    \      >>>-1\n            choose_num(7, 34)\n            >>>-1\n            choose_num(7,\
    \ 35)\n            >>>-1\n            choose_num(7, 36)\n            >>>-1\n \
    \           choose_num(7, 37)\n            >>>-1\n            choose_num(7, 38)\n\
    \            >>>-1\n            choose_num(7, 39)\n            >>>-1\n       \
    \     choose_num(7, 40)\n            >>>-1\n            choose_num(7, 41)\n  \
    \          >>>-1\n            choose_num(7, 42)\n            >>>-1\n         \
    \   choose_num(7, 43)\n            >>>-1\n            choose_num(7, 44)\n    \
    \        >>>-1\n            choose_num(7, 45)\n            >>>-1\n           \
    \ choose_num(7, 46)\n            >>>-1\n            choose_num(7, 47)\n      \
    \      >>>-1\n            choose_num(7, 48)\n            >>>-1\n            choose_num(7,\
    \ 49)\n            >>>\ndef check(candidate):\n    assert candidate(12, 15) ==\
    \ 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo9oa3fh0.py\"\
    , line 8\n    choose_num(7, 9)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(7, 9)\n            choose_num(7, 8)\n            choose_num(7,\
    \ 7)\n            choose_num(7, 6)\n            choose_num(7, 5)\n           \
    \ choose_num(7, 4)\n            choose_num(7, 3)\n            choose_num(7, 2)\n\
    \            choose_num(7, 1)\n            choose_num(7, 0)\n            choose_num(6,\
    \ 9)\n            choose_num(6, 8)\n            choose_num(6, 7)\n           \
    \ choose_num(6, 6)\n            choose_num(6, 5)\n            choose_num(6, 4)\n\
    \            choose_num(6, 3)\n            choose_num(6, 2)\n            choose_num(6,\
    \ 1)\n            choose_num(6, 0)\n            choose_num(5, 9)\n           \
    \ choose_num(5, 8)\n            choose_num(5, 7)\n            choose_num(5, 6)\n\
    \            choose_num(5, 5)\n            choose_num(5, 4)\n            choose_num(5,\
    \ 3)\n            choose_num(5, 2)\n            choose_num(5, 1)\n           \
    \ choose_num(5, 0)\n            choose_num(4, 9)\n            choose_num(4, 8)\n\
    \            choose_num(4, 7)\n            choose_num(4, 6)\n            choose_num(4,\
    \ 5)\n            choose_num(4, 4)\n            choose_num(4, 3)\n           \
    \ choose_num(4, 2)\n            choose_num(4, 1)\n            choose_num(4, 0)\n\
    \            choose_num(3, 9)\n            choose_num(3, 8)\n            choose_num(3,\
    \ 7)\n            choose_num(3, 6)\n            choose_num(3, 5)\n           \
    \ choose_num(3, 4)\n            choose_num(3, 3)\n            choose_num(3, 2)\n\
    \            choose_num(3, 1)\n            choose_num(3, 0)\n            choose_num(2,\
    \ 9)\n            choose_num(2, 8)\n            choose_num(2, 7)\n           \
    \ choose_num(2, 6)\n            choose_num(2, 5)\n            choose_num(2, 4)\n\
    \            choose_num(2, 3)\n            choose_num(2, 2)\n            choose_num(2,\
    \ 1)\n            choose_num(2, 0)\n            choose_num(1, 9)\n           \
    \ choose_num(1, 8)\n            choose_num(1, 7)\n            choose_num(1, 6)\n\
    \            choose_num(1, 5)\n            choose_num(1, 4)\n            choose_num(1,\
    \ 3)\n            choose_num(1, 2)\n            choose_num(1, 1)\n           \
    \ choose_num(1, 0)\n            choose_\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp296vuy_n.py\"\
    , line 8\n    choose_num(7, 9)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \ >>> choose_num(6, 10)\n    8\n    >>> choose_num(6, 11)\n    -1\n    >>> choose_num(6,\
    \ 12)\n    -1\n    \"\"\"\n    if x > y:\n        x, y = y, x\n    if x % 2 ==\
    \ 0:\n        return x // 2\n    elif y % 2 == 0:\n        return y // 2\n   \
    \ else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7857ny45.py\"\
    , line 14\n    \"\"\"\n    ^\nSyntaxError: unterminated triple-quoted string literal\
    \ (detected at line 38)\n"
  exit_code: 1
  status: SyntaxError
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(7, 3)\n            > 7\n            choose_num(7, 4)\n  \
    \          > -1\n            \"\"\"\n    \"\"\"\n    if x > y:\n        x, y =\
    \ y, x\n    if x % 2 == 0:\n        if y % 2 == 0:\n            return x\n   \
    \     else:\n            return -1\n    else:\n        if y % 2 == 0:\n      \
    \      return -1\n        else:\n            return x\n\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqgvby0mi.py\"\
    , line 8\n    choose_num(7, 3)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(7, 10)\n            >>>7\n            choose_num(7, 11)\n\
    \            >>>-1\n            \"\"\"\n    \"\"\"\n    if x > y:\n        x,\
    \ y = y, x\n    if x % 2 == 0:\n        if y % 2 == 0:\n            return x\n\
    \        else:\n            return -1\n    else:\n        if y % 2 == 0:\n   \
    \         return -1\n        else:\n            return x\n\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv26r2f01.py\"\
    , line 8\n    choose_num(7, 10)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(7, 8)\n            >> 7\n            choose_num(7, 9)\n \
    \           >> -1\n            choose_num(7, 10)\n            >> -1\n        \
    \    choose_num(7, 11)\n            >> -1\n            choose_num(7, 12)\n   \
    \         >> -1\n            choose_num(7, 13)\n            >> -1\n          \
    \  choose_num(7, 14)\n            >> -1\n            choose_num(7, 15)\n     \
    \       >> -1\n            choose_num(7, 16)\n            >> -1\n            choose_num(7,\
    \ 17)\n            >> -1\n            choose_num(7, 18)\n            >> -1\n \
    \           choose_num(7, 19)\n            >> -1\n            choose_num(7, 20)\n\
    \            >> -1\n            choose_num(7, 21)\n            >> -1\n       \
    \     choose_num(7, 22)\n            >> -1\n            choose_num(7, 23)\n  \
    \          >> -1\n            choose_num(7, 24)\n            >> -1\n         \
    \   choose_num(7, 25)\n            >> -1\n            choose_num(7, 26)\n    \
    \        >> -1\n            choose_num(7, 27)\n            >> -1\n           \
    \ choose_num(7, 28)\n            >> -1\n            choose_num(7, 29)\n      \
    \      >> -1\n            choose_num(7, 30)\n            >> -1\n            choose_num(7,\
    \ 31)\n            >> -1\n            choose_num(7, 32)\n            >> -1\n \
    \           choose_num(7, 33)\n            >> -1\n            choose_num(7, 34)\n\
    \            >> -1\n            choose_num(7, 35)\n            >> -1\n       \
    \     choose_num(7, 36)\n            >> -1\n            choose_num(7, 37)\n  \
    \          >> -1\n            choose_num(7, 38)\n            >> -1\n         \
    \   choose_num(7, 39)\n            >> -1\n            choose_num(7, 40)\n    \
    \        >> -1\n            choose_num(7, 41)\n            >> -1\n           \
    \ choose_num(7, 42)\n            >> -1\n            choose_num(7, 43)\n      \
    \      >> -1\n            choose_num(7, 44)\n            >> -1\n            choose_num(7,\
    \ 45)\n            >> -1\n            choose_num(7, 46)\n            >> -1\n \
    \           choose_num(7, 47)\n            >> -1\n            choose_num(7, 48)\n\
    \            >> -1\ndef check(candidate):\n    assert candidate(12, 15) == 14\n\
    \    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnpvaym24.py\"\
    , line 8\n    choose_num(7, 8)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(3,4)\n            choose_num(3,5)\n            choose_num(3,6)\n\
    \            choose_num(3,7)\n            choose_num(3,8)\n            choose_num(3,9)\n\
    \            choose_num(3,10)\n            choose_num(3,11)\n            choose_num(3,12)\n\
    \            choose_num(3,13)\n            choose_num(3,14)\n            choose_num(3,15)\n\
    \            choose_num(3,16)\n            choose_num(3,17)\n            choose_num(3,18)\n\
    \            choose_num(3,19)\n            choose_num(3,20)\n            choose_num(3,21)\n\
    \            choose_num(3,22)\n            choose_num(3,23)\n            choose_num(3,24)\n\
    \            choose_num(3,25)\n            choose_num(3,26)\n            choose_num(3,27)\n\
    \            choose_num(3,28)\n            choose_num(3,29)\n            choose_num(3,30)\n\
    \            choose_num(3,31)\n            choose_num(3,32)\n            choose_num(3,33)\n\
    \            choose_num(3,34)\n            choose_num(3,35)\n            choose_num(3,36)\n\
    \            choose_num(3,37)\n            choose_num(3,38)\n            choose_num(3,39)\n\
    \            choose_num(3,40)\n            choose_num(3,41)\n            choose_num(3,42)\n\
    \            choose_num(3,43)\n            choose_num(3,44)\n            choose_num(3,45)\n\
    \            choose_num(3,46)\n            choose_num(3,47)\n            choose_num(3,48)\n\
    \            choose_num(3,49)\n            choose_num(3,50)\n            choose_num(3,51)\n\
    \            choose_num(3,52)\n            choose_num(3,53)\n            choose_num(3,54)\n\
    \            choose_num(3,55)\n            choose_num(3,56)\n            choose_num(3,57)\n\
    \            choose_num(3,58)\n            choose_num(3,59)\n            choose_num(3,60)\n\
    \            choose_num(3,61)\n            choose_num(3,62)\n            choose_num(3,63\n\
    def check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0vgopvdg.py\"\
    , line 8\n    choose_num(3,4)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(7, 10)\n            >>>10\n            choose_num(7, 11)\n\
    \            >>>-1\n            choose_num(7, 12)\n            >>>-1\n       \
    \     choose_num(7, 13)\n            >>>-1\n            choose_num(7, 14)\n  \
    \          >>>-1\n            choose_num(7, 15)\n            >>>-1\n         \
    \   choose_num(7, 16)\n            >>>-1\n            choose_num(7, 17)\n    \
    \        >>>-1\n            choose_num(7, 18)\n            >>>-1\n           \
    \ choose_num(7, 19)\n            >>>-1\n            choose_num(7, 20)\n      \
    \      >>>-1\n            choose_num(7, 21)\n            >>>-1\n            choose_num(7,\
    \ 22)\n            >>>-1\n            choose_num(7, 23)\n            >>>-1\n \
    \           choose_num(7, 24)\n            >>>-1\n            choose_num(7, 25)\n\
    \            >>>-1\n            choose_num(7, 26)\n            >>>-1\n       \
    \     choose_num(7, 27)\n            >>>-1\n            choose_num(7, 28)\n  \
    \          >>>-1\n            choose_num(7, 29)\n            >>>-1\n         \
    \   choose_num(7, 30)\n            >>>-1\n            choose_num(7, 31)\n    \
    \        >>>-1\n            choose_num(7, 32)\n            >>>-1\n           \
    \ choose_num(7, 33)\n            >>>-1\n            choose_num(7, 34)\n      \
    \      >>>-1\n            choose_num(7, 35)\n            >>>-1\n            choose_num(7,\
    \ 36)\n            >>>-1\n            choose_num(7, 37)\n            >>>-1\n \
    \           choose_num(7, 38)\n            >>>-1\n            choose_num(7, 39)\n\
    \            >>>-1\n            choose_num(7, 40)\n            >>>-1\n       \
    \     choose_num(7, 41)\n            >>>-1\n            choose_num(7, 42)\n  \
    \          >>>-1\n            choose_num(7, 43)\n            >>>-1\n         \
    \   choose_num(7, 44)\n            >>>-1\n            choose_num(7, 45)\n    \
    \        >>>-1\n            choose_num(7, 46)\n            >>>-1\n           \
    \ choose_num(7, 47)\n            >>>-1\n            choose_num(7, 48)\n      \
    \      >>>-1\n            choose_num(7, 49)\n            >>>-1\n            choose_num(7,\
    \ 50)\n            >>>\ndef check(candidate):\n    assert candidate(12, 15) ==\
    \ 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2p_xknrn.py\"\
    , line 8\n    choose_num(7, 10)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(7, 10)\n            >>>8\n            choose_num(7, 8)\n\
    \            >>>-1\n            choose_num(7, 9)\n            >>>-1\n        \
    \    choose_num(7, 11)\n            >>>-1\n            choose_num(7, 12)\n   \
    \         >>>-1\n            choose_num(7, 13)\n            >>>-1\n          \
    \  choose_num(7, 14)\n            >>>-1\n            choose_num(7, 15)\n     \
    \       >>>-1\n            choose_num(7, 16)\n            >>>-1\n            choose_num(7,\
    \ 17)\n            >>>-1\n            choose_num(7, 18)\n            >>>-1\n \
    \           choose_num(7, 19)\n            >>>-1\n            choose_num(7, 20)\n\
    \            >>>-1\n            choose_num(7, 21)\n            >>>-1\n       \
    \     choose_num(7, 22)\n            >>>-1\n            choose_num(7, 23)\n  \
    \          >>>-1\n            choose_num(7, 24)\n            >>>-1\n         \
    \   choose_num(7, 25)\n            >>>-1\n            choose_num(7, 26)\n    \
    \        >>>-1\n            choose_num(7, 27)\n            >>>-1\n           \
    \ choose_num(7, 28)\n            >>>-1\n            choose_num(7, 29)\n      \
    \      >>>-1\n            choose_num(7, 30)\n            >>>-1\n            choose_num(7,\
    \ 31)\n            >>>-1\n            choose_num(7, 32)\n            >>>-1\n \
    \           choose_num(7, 33)\n            >>>-1\n            choose_num(7, 34)\n\
    \            >>>-1\n            choose_num(7, 35)\n            >>>-1\n       \
    \     choose_num(7, 36)\n            >>>-1\n            choose_num(7, 37)\n  \
    \          >>>-1\n            choose_num(7, 38)\n            >>>-1\n         \
    \   choose_num(7, 39)\n            >>>-1\n            choose_num(7, 40)\n    \
    \        >>>-1\n            choose_num(7, 41)\n            >>>-1\n           \
    \ choose_num(7, 42)\n            >>>-1\n            choose_num(7, 43)\n      \
    \      >>>-1\n            choose_num(7, 44)\n            >>>-1\n            choose_num(7,\
    \ 45)\n            >>>-1\n            choose_num(7, 46)\n            >>>-1\n \
    \           choose_num(7, 47)\n            >>>-1\n            choose_num(7, 48)\n\
    \            >>>-1\ndef check(candidate):\n    assert candidate(12, 15) == 14\n\
    \    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfulyofkp.py\"\
    , line 8\n    choose_num(7, 10)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n            \"\"\"\n   \
    \         choose_num(7, 8)\n            >> 8\n            choose_num(7, 9)\n \
    \           >> -1\n            \"\"\"\n    \"\"\"\n    if x > y:\n        x, y\
    \ = y, x\n    \n    if x % 2 == 0:\n        if y % 2 == 0:\n            return\
    \ x\n        else:\n            return -1\n    else:\n        if y % 2 == 0:\n\
    \            return -1\n        else:\n            return y\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpss8v295a.py\"\
    , line 8\n    choose_num(7, 8)\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
