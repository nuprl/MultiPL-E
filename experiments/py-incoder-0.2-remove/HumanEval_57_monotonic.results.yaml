name: HumanEval_57_monotonic
language: py
results:
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    \n    prev\
    \ = l[0]\n    for x in l[1:]:\n        if prev < x:\n            return False\n\
    \        prev = x\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7n9ir06b.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7n9ir06b.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7n9ir06b.py\"\
    , line 17, in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    \n    prev\
    \ = l[0]\n    for x in l[1:]:\n        if prev < x:\n            return False\n\
    \        prev = x\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuz_33myf.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuz_33myf.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuz_33myf.py\"\
    , line 17, in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    \n    prev\
    \ = l[0]\n    for x in l[1:]:\n        if prev > x:\n            return False\n\
    \        prev = x\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe5x5dl3t.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe5x5dl3t.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe5x5dl3t.py\"\
    , line 20, in check\n    assert candidate([4, 1, 0, -10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    \n    prev\
    \ = l[0]\n    for x in l[1:]:\n        if prev > x:\n            return False\n\
    \        prev = x\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp04y3t08p.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp04y3t08p.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp04y3t08p.py\"\
    , line 20, in check\n    assert candidate([4, 1, 0, -10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 1:\n        return True\n    else:\n\
    \        first = l[0]\n        last = l[-1]\n        if first < last:\n      \
    \      return False\n        else:\n            mid = first + (last - first) //\
    \ 2\n            if l[mid] > l[mid+1]:\n                return True\n        \
    \    else:\n                return False\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n\
    \    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0,\
    \ -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1,\
    \ 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpaz2cisxj.py\"\
    , line 33, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpaz2cisxj.py\"\
    , line 31, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpaz2cisxj.py\"\
    , line 21, in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    if l[0]\
    \ > l[-1]:\n        return False\n    i, j = 0, 1\n    while i < len(l) and j\
    \ < len(l):\n        if l[i] > l[j]:\n            return False\n        i += 1\n\
    \        j += 1\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprif5iqgq.py\"\
    , line 31, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprif5iqgq.py\"\
    , line 29, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprif5iqgq.py\"\
    , line 22, in check\n    assert candidate([4, 1, 0, -10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    \n    prev\
    \ = l[0]\n    for x in l[1:]:\n        if prev > x:\n            return False\n\
    \        prev = x\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9gsif_14.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9gsif_14.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9gsif_14.py\"\
    , line 20, in check\n    assert candidate([4, 1, 0, -10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    \n    prev\
    \ = l[0]\n    for x in l[1:]:\n        if prev > x:\n            return False\n\
    \        prev = x\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnsp5elkw.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnsp5elkw.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnsp5elkw.py\"\
    , line 20, in check\n    assert candidate([4, 1, 0, -10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    \n    prev\
    \ = l[0]\n    for x in l[1:]:\n        if prev < x:\n            return False\n\
    \        prev = x\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2h61i8ve.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2h61i8ve.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2h61i8ve.py\"\
    , line 17, in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    \n    if len(l) < 2:\n        return True\n    \n\
    \    prev = l[0]\n    for x in l[1:]:\n        if x < prev:\n            return\
    \ False\n        prev = x\n    return True\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n\
    \    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0,\
    \ -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1,\
    \ 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpowdnvkat.py\"\
    , line 30, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpowdnvkat.py\"\
    , line 28, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpowdnvkat.py\"\
    , line 21, in check\n    assert candidate([4, 1, 0, -10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 1:\n        return True\n    else:\n\
    \        prev = l[0]\n        for el in l[1:]:\n            if el < prev:\n  \
    \              return False\n            prev = el\n    return True\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx8ol9332.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx8ol9332.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx8ol9332.py\"\
    , line 20, in check\n    assert candidate([4, 1, 0, -10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    \n    prev\
    \ = l[0]\n    for x in l[1:]:\n        if prev < x:\n            return False\n\
    \        prev = x\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyn0h6io_.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyn0h6io_.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyn0h6io_.py\"\
    , line 17, in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    \n    prev\
    \ = l[0]\n    for x in l[1:]:\n        if prev < x:\n            return False\n\
    \        prev = x\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9fild1tb.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9fild1tb.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9fild1tb.py\"\
    , line 17, in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 1:\n        return True\n    \n    prev\
    \ = l[0]\n    for x in l[1:]:\n        if prev > x:\n            return False\n\
    \        prev = x\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqp6pxj8l.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqp6pxj8l.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqp6pxj8l.py\"\
    , line 20, in check\n    assert candidate([4, 1, 0, -10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    \n    prev\
    \ = l[0]\n    for x in l[1:]:\n        if prev > x:\n            return False\n\
    \        prev = x\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdsdcb4v1.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdsdcb4v1.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdsdcb4v1.py\"\
    , line 20, in check\n    assert candidate([4, 1, 0, -10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    \n    prev\
    \ = l[0]\n    for x in l[1:]:\n        if prev > x:\n            return False\n\
    \        prev = x\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqvuk0bjx.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqvuk0bjx.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqvuk0bjx.py\"\
    , line 20, in check\n    assert candidate([4, 1, 0, -10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    else:\n\
    \        first = l[0]\n        last = l[-1]\n        if first < last:\n      \
    \      return True\n        else:\n            return False\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw9il9ypn.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw9il9ypn.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw9il9ypn.py\"\
    , line 19, in check\n    assert candidate([1, 20, 4, 10]) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    \n    prev\
    \ = l[0]\n    for x in l[1:]:\n        if prev < x:\n            return False\n\
    \        prev = x\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7anpcr6j.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7anpcr6j.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7anpcr6j.py\"\
    , line 17, in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    \n    prev\
    \ = l[0]\n    for x in l[1:]:\n        if prev > x:\n            return False\n\
    \        prev = x\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8763z7in.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8763z7in.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8763z7in.py\"\
    , line 20, in check\n    assert candidate([4, 1, 0, -10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    \n    prev\
    \ = l[0]\n    for x in l[1:]:\n        if prev > x:\n            return False\n\
    \        prev = x\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl3b059_b.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl3b059_b.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl3b059_b.py\"\
    , line 20, in check\n    assert candidate([4, 1, 0, -10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 1:\n        return True\n    \n    prev\
    \ = l[0]\n    for x in l[1:]:\n        if prev > x:\n            return False\n\
    \        prev = x\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2_jvxkz2.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2_jvxkz2.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2_jvxkz2.py\"\
    , line 20, in check\n    assert candidate([4, 1, 0, -10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    \n    prev\
    \ = l[0]\n    for x in l[1:]:\n        if prev > x:\n            return False\n\
    \        prev = x\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpr13qu1ey.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpr13qu1ey.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpr13qu1ey.py\"\
    , line 20, in check\n    assert candidate([4, 1, 0, -10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    \n    prev\
    \ = l[0]\n    for x in l[1:]:\n        if prev > x:\n            return False\n\
    \        prev = x\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyqlgkd55.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyqlgkd55.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyqlgkd55.py\"\
    , line 20, in check\n    assert candidate([4, 1, 0, -10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    \n    prev\
    \ = l[0]\n    for x in l[1:]:\n        if prev > x:\n            return False\n\
    \        prev = x\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpei36h7vq.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpei36h7vq.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpei36h7vq.py\"\
    , line 20, in check\n    assert candidate([4, 1, 0, -10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    \n    prev\
    \ = l[0]\n    for i in l[1:]:\n        if prev > i:\n            return False\n\
    \        prev = i\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxqmidym9.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxqmidym9.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxqmidym9.py\"\
    , line 20, in check\n    assert candidate([4, 1, 0, -10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    if l[0]\
    \ < l[1]:\n        return False\n    i = 2\n    while i < len(l):\n        if\
    \ l[i] < l[i-1]:\n            return False\n        i += 1\n    return True\n\n\
    def check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppz7k1np3.py\"\
    , line 30, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppz7k1np3.py\"\
    , line 28, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppz7k1np3.py\"\
    , line 18, in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    \n    prev\
    \ = l[0]\n    for x in l[1:]:\n        if prev < x:\n            return False\n\
    \        prev = x\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpishqiac0.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpishqiac0.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpishqiac0.py\"\
    , line 17, in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    length = len(l)\n    if length < 2:\n        return\
    \ True\n    \n    i = 0\n    j = length - 1\n    \n    while i < j:\n        if\
    \ l[i] > l[j]:\n            return False\n        elif l[i] < l[j]:\n        \
    \    i += 1\n        else:\n            j -= 1\n    return True\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz15q7en0.py\"\
    , line 35, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz15q7en0.py\"\
    , line 33, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz15q7en0.py\"\
    , line 26, in check\n    assert candidate([4, 1, 0, -10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    \n    if len(l) < 2:\n        return True\n    \n\
    \    prev = l[0]\n    for x in l[1:]:\n        if prev > x:\n            return\
    \ False\n        prev = x\n    return True\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n\
    \    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0,\
    \ -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1,\
    \ 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt2814k83.py\"\
    , line 30, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt2814k83.py\"\
    , line 28, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt2814k83.py\"\
    , line 21, in check\n    assert candidate([4, 1, 0, -10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    \n    # Your code here\n    \n    return True # Replace\
    \ this line\n\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) ==\
    \ True\n    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1,\
    \ 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert\
    \ candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) ==\
    \ False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9,\
    \ 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptnzwfk0q.py\"\
    , line 25, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptnzwfk0q.py\"\
    , line 23, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptnzwfk0q.py\"\
    , line 15, in check\n    assert candidate([1, 20, 4, 10]) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    \n    prev\
    \ = l[0]\n    for x in l[1:]:\n        if prev < x:\n            return False\n\
    \        prev = x\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkmc48gsc.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkmc48gsc.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkmc48gsc.py\"\
    , line 17, in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 1:\n        return True\n    \n    prev\
    \ = l[0]\n    for x in l[1:]:\n        if prev > x:\n            return False\n\
    \        prev = x\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpk9i3_nq4.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpk9i3_nq4.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpk9i3_nq4.py\"\
    , line 20, in check\n    assert candidate([4, 1, 0, -10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    \n    prev\
    \ = l[0]\n    for x in l[1:]:\n        if prev > x:\n            return False\n\
    \        prev = x\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpghb9lct7.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpghb9lct7.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpghb9lct7.py\"\
    , line 20, in check\n    assert candidate([4, 1, 0, -10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    \n    length = len(l)\n    if length == 0:\n    \
    \    return True\n    if length == 1:\n        return l[0] > l[1]\n    \n    mid\
    \ = length // 2\n    \n    left_is_less = l[mid] < l[mid-1]\n    right_is_less\
    \ = l[mid] < l[mid+1]\n    \n    return left_is_less or right_is_less\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwj0gbqk9.py\"\
    , line 33, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwj0gbqk9.py\"\
    , line 31, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwj0gbqk9.py\"\
    , line 23, in check\n    assert candidate([1, 20, 4, 10]) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    \n    if len(l) < 2:\n        return True\n    \n\
    \    prev = l[0]\n    for x in l[1:]:\n        if prev < x:\n            return\
    \ False\n        prev = x\n    return True\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n\
    \    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0,\
    \ -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1,\
    \ 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkiejrgo3.py\"\
    , line 30, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkiejrgo3.py\"\
    , line 28, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkiejrgo3.py\"\
    , line 18, in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    \n    prev\
    \ = l[0]\n    for x in l[1:]:\n        if prev < x:\n            return False\n\
    \        prev = x\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmzpd63oc.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmzpd63oc.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmzpd63oc.py\"\
    , line 17, in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    \n    prev\
    \ = l[0]\n    for x in l[1:]:\n        if prev > x:\n            return False\n\
    \        prev = x\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvekjj6tz.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvekjj6tz.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvekjj6tz.py\"\
    , line 20, in check\n    assert candidate([4, 1, 0, -10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    \n    prev\
    \ = l[0]\n    for x in l[1:]:\n        if prev < x:\n            return False\n\
    \        prev = x\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy7lxr68g.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy7lxr68g.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy7lxr68g.py\"\
    , line 17, in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    \n    prev\
    \ = l[0]\n    for x in l[1:]:\n        if prev < x:\n            return False\n\
    \        prev = x\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfr4c5jrj.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfr4c5jrj.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfr4c5jrj.py\"\
    , line 17, in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    \n    prev\
    \ = l[0]\n    for x in l[1:]:\n        if prev > x:\n            return False\n\
    \        prev = x\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwpnzsxd2.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwpnzsxd2.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwpnzsxd2.py\"\
    , line 20, in check\n    assert candidate([4, 1, 0, -10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    \n    prev\
    \ = l[0]\n    for x in l[1:]:\n        if prev > x:\n            return False\n\
    \        prev = x\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm9f35715.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm9f35715.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm9f35715.py\"\
    , line 20, in check\n    assert candidate([4, 1, 0, -10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    \n    prev\
    \ = l[0]\n    for x in l[1:]:\n        if prev < x:\n            return False\n\
    \        prev = x\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprzodkjj7.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprzodkjj7.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprzodkjj7.py\"\
    , line 17, in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    \n    length = len(l)\n    if length < 2:\n     \
    \   return True\n    \n    prev = l[0]\n    current = l[1]\n    \n    for i in\
    \ range(2, length):\n        if current < prev:\n            return False\n  \
    \      \n        prev = current\n        current = l[i]\n    \n    return True\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1ens1pxy.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1ens1pxy.py\"\
    , line 34, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1ens1pxy.py\"\
    , line 27, in check\n    assert candidate([4, 1, 0, -10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    \n    prev\
    \ = l[0]\n    for x in l[1:]:\n        if prev > x:\n            return False\n\
    \        prev = x\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpibo0y0pj.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpibo0y0pj.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpibo0y0pj.py\"\
    , line 20, in check\n    assert candidate([4, 1, 0, -10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    \n    prev\
    \ = l[0]\n    for x in l[1:]:\n        if prev < x:\n            return False\n\
    \        prev = x\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp02wdd97e.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp02wdd97e.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp02wdd97e.py\"\
    , line 17, in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    else:\n\
    \        return all(l[i] <= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6p054aqc.py\"\
    , line 24, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6p054aqc.py\"\
    , line 22, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6p054aqc.py\"\
    , line 15, in check\n    assert candidate([4, 1, 0, -10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    \n    prev\
    \ = l[0]\n    for x in l[1:]:\n        if prev < x:\n            return False\n\
    \        prev = x\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa1hiiwdv.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa1hiiwdv.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa1hiiwdv.py\"\
    , line 17, in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    \n    prev\
    \ = l[0]\n    for x in l[1:]:\n        if prev < x:\n            return False\n\
    \        prev = x\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy30_ihkt.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy30_ihkt.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy30_ihkt.py\"\
    , line 17, in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    \n    prev\
    \ = l[0]\n    for x in l[1:]:\n        if prev < x:\n            return False\n\
    \        prev = x\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzicpsh9v.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzicpsh9v.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzicpsh9v.py\"\
    , line 17, in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    \n    prev\
    \ = l[0]\n    for x in l[1:]:\n        if prev < x:\n            return False\n\
    \        prev = x\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkoxp4uhz.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkoxp4uhz.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkoxp4uhz.py\"\
    , line 17, in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    \n    prev\
    \ = l[0]\n    for x in l[1:]:\n        if prev <= x:\n            return False\n\
    \        prev = x\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp219acju5.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp219acju5.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp219acju5.py\"\
    , line 17, in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    \n    prev\
    \ = l[0]\n    for x in l[1:]:\n        if prev < x:\n            return False\n\
    \        prev = x\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgtxukepc.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgtxukepc.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgtxukepc.py\"\
    , line 17, in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    if l[0]\
    \ > l[-1]:\n        return False\n    mid = len(l) // 2\n    left, right = l[:mid],\
    \ l[mid:]\n    return left == right or monotonic(left) or monotonic(right)\n\n\
    def check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5zdgsf0y.py\"\
    , line 27, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5zdgsf0y.py\"\
    , line 25, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5zdgsf0y.py\"\
    , line 17, in check\n    assert candidate([1, 20, 4, 10]) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    if l[0]\
    \ > l[1]:\n        return False\n    mid = l[0]\n    left = []\n    right = []\n\
    \    for x in l:\n        if x < mid:\n            left.append(x)\n        elif\
    \ x > mid:\n            right.append(x)\n        else:\n            return True\n\
    \        mid = (left + right) // 2\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp46axp1bj.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp46axp1bj.py\"\
    , line 34, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp46axp1bj.py\"\
    , line 26, in check\n    assert candidate([1, 20, 4, 10]) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    else:\n\
    \        first = l[0]\n        last = l[-1]\n        if first < last:\n      \
    \      return True\n        else:\n            return False\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvjiashga.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvjiashga.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvjiashga.py\"\
    , line 19, in check\n    assert candidate([1, 20, 4, 10]) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    \n    prev\
    \ = l[0]\n    for x in l[1:]:\n        if prev > x:\n            return False\n\
    \        prev = x\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzdddlq_a.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzdddlq_a.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzdddlq_a.py\"\
    , line 20, in check\n    assert candidate([4, 1, 0, -10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    \n    prev\
    \ = l[0]\n    for x in l[1:]:\n        if prev < x:\n            return False\n\
    \        prev = x\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgqxfcxb8.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgqxfcxb8.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgqxfcxb8.py\"\
    , line 17, in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    \n    prev\
    \ = l[0]\n    for x in l[1:]:\n        if prev > x:\n            return False\n\
    \        prev = x\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph4bpm_ka.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph4bpm_ka.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph4bpm_ka.py\"\
    , line 20, in check\n    assert candidate([4, 1, 0, -10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    \n    prev\
    \ = l[0]\n    for x in l[1:]:\n        if prev > x:\n            return False\n\
    \        prev = x\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbaqo7nzo.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbaqo7nzo.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbaqo7nzo.py\"\
    , line 20, in check\n    assert candidate([4, 1, 0, -10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    \n    if len(l) < 2:\n        return True\n    \n\
    \    prev = l[0]\n    for i in l[1:]:\n        if i > prev:\n            return\
    \ False\n        prev = i\n    return True\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n\
    \    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0,\
    \ -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1,\
    \ 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpza10j0g1.py\"\
    , line 30, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpza10j0g1.py\"\
    , line 28, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpza10j0g1.py\"\
    , line 18, in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    \n    l = sorted(l)\n    \n    return l[0] < l[-1]\n\
    </cell>\n<cell>\nmonotonic([1,2,3])\n</cell>\n<cell>\nmonotonic([1,3,2])\n</cell>\n\
    <cell>\nmonotonic([1,3,2])\n</cell>\n<cell>\nmonotonic([1,3,2])\n</cell>\n<cell>\n\
    monotonic([1,3,2])\n</cell>\n<cell>\nmonotonic([1,3,2])\n</cell>\n<cell>\nmonotonic([1,3,2])\n\
    </cell>\n<cell>\nmonotonic([1,3,2])\n</cell>\n<cell>\nmonotonic([1,3,2])\n</cell>\n\
    <cell>\nmonotonic([1,3,2])\n</cell>\n<cell>\nmonotonic([1,3,2])\n</cell>\n<cell>\n\
    monotonic([1,3,2])\n</cell>\n<cell>\nmonotonic([1,3,2])\n</cell>\n<cell>\nmonotonic([1,3,2])\n\
    </cell>\n<cell>\nmonotonic([1,3,2])\n</cell>\n<cell>\nmonotonic([1,3,2])\n</cell>\n\
    <cell>\nmonotonic([1,3,2])\n</cell>\n<cell>\nmonotonic([1,3,2])\n</cell>\n<cell>\n\
    monotonic([1,3,2])\n</cell>\n<cell>\nmonotonic([1,3,2])\n</cell>\n<cell>\nmonotonic([1,3,2])\n\
    </cell>\n<cell>\nmonotonic([1,3,2])\n</cell>\n<cell>\nmonotonic([1,3,2])\n</cell>\n\
    <cell>\nmonotonic([1,3,2])\n</cell>\n<cell>\nmonotonic([1,3,2])\n</cell>\n<cell>\n\
    monotonic([1,3,2])\n</cell>\n<cell>\nmonotonic([1,3,2])\n</cell>\n<cell>\nmonotonic([1,3,2])\n\
    </cell>\n<cell>\nmonotonic([1,3,2])\n</cell>\n<cell>\nmonotonic([1,3,2])\n</cell>\n\
    <cell>\nmonotonic([1,3,2])\n</cell>\n<cell>\nmonotonic([1,3,2])\n</cell>\n<cell>\n\
    monotonic([1,3,2])\n</cell\ndef check(candidate):\n    assert candidate([1, 2,\
    \ 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1,\
    \ 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert\
    \ candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) ==\
    \ False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9,\
    \ 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpem7gvzmy.py\"\
    , line 10\n    </cell>\n    ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    \n    prev\
    \ = l[0]\n    for x in l[1:]:\n        if prev < x:\n            return False\n\
    \        prev = x\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp00frw9c5.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp00frw9c5.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp00frw9c5.py\"\
    , line 17, in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    \n    prev\
    \ = l[0]\n    for x in l[1:]:\n        if prev > x:\n            return False\n\
    \        prev = x\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy_0x9f2u.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy_0x9f2u.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy_0x9f2u.py\"\
    , line 20, in check\n    assert candidate([4, 1, 0, -10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 1:\n        return True\n    \n    prev\
    \ = l[0]\n    for i in l[1:]:\n        if prev > i:\n            return False\n\
    \        prev = i\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfdxajmj7.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfdxajmj7.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfdxajmj7.py\"\
    , line 20, in check\n    assert candidate([4, 1, 0, -10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    \n    prev\
    \ = l[0]\n    for x in l[1:]:\n        if prev < x:\n            return False\n\
    \        prev = x\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph_6jx9pa.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph_6jx9pa.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph_6jx9pa.py\"\
    , line 17, in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    \n    prev\
    \ = l[0]\n    for x in l[1:]:\n        if prev < x:\n            return False\n\
    \        prev = x\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsn0mktpu.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsn0mktpu.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsn0mktpu.py\"\
    , line 17, in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    \n    prev\
    \ = l[0]\n    for x in l[1:]:\n        if prev > x:\n            return False\n\
    \        prev = x\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjslf3f5o.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjslf3f5o.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjslf3f5o.py\"\
    , line 20, in check\n    assert candidate([4, 1, 0, -10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    \n    prev\
    \ = l[0]\n    for x in l[1:]:\n        if prev > x:\n            return False\n\
    \        prev = x\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzl_awd11.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzl_awd11.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzl_awd11.py\"\
    , line 20, in check\n    assert candidate([4, 1, 0, -10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    else:\n\
    \        first = l[0]\n        last = l[-1]\n        if first < last:\n      \
    \      return True\n        else:\n            return False\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp72rfwexg.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp72rfwexg.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp72rfwexg.py\"\
    , line 19, in check\n    assert candidate([1, 20, 4, 10]) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    \n    prev\
    \ = l[0]\n    for x in l[1:]:\n        if prev > x:\n            return False\n\
    \        prev = x\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn0i1j58w.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn0i1j58w.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn0i1j58w.py\"\
    , line 20, in check\n    assert candidate([4, 1, 0, -10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    \n    prev\
    \ = l[0]\n    for x in l[1:]:\n        if prev > x:\n            return False\n\
    \        prev = x\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptwa5jqyv.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptwa5jqyv.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptwa5jqyv.py\"\
    , line 20, in check\n    assert candidate([4, 1, 0, -10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    \n    prev\
    \ = l[0]\n    for x in l[1:]:\n        if prev < x:\n            return False\n\
    \        prev = x\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn7qs_bka.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn7qs_bka.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn7qs_bka.py\"\
    , line 17, in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    if l[0]\
    \ > l[1]:\n        return False\n    mid = l[0]\n    left = [x for x in l if x\
    \ < mid]\n    right = [x for x in l if x > mid]\n    return monotonic(left) and\
    \ monotonic(right)\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10])\
    \ == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1,\
    \ 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert\
    \ candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) ==\
    \ False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9,\
    \ 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpk3bwkfna.py\"\
    , line 28, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpk3bwkfna.py\"\
    , line 26, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpk3bwkfna.py\"\
    , line 19, in check\n    assert candidate([4, 1, 0, -10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    else:\n\
    \        first = l[0]\n        last = l[-1]\n        if first < last:\n      \
    \      return False\n        else:\n            mid = l[int(len(l)/2)]\n     \
    \       if mid < first:\n                return False\n            elif mid >\
    \ last:\n                return True\n            else:\n                return\
    \ monotonic(l[:int(len(l)/2)-1]) and monotonic(l[int(len(l)/2):])\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzpcis_yh.py\"\
    , line 35, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzpcis_yh.py\"\
    , line 33, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzpcis_yh.py\"\
    , line 23, in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    \n    prev\
    \ = l[0]\n    for x in l[1:]:\n        if prev <= x:\n            return False\n\
    \        prev = x\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3dkop330.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3dkop330.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3dkop330.py\"\
    , line 17, in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    \n    prev\
    \ = l[0]\n    for x in l[1:]:\n        if x < prev:\n            return False\n\
    \        prev = x\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc3kzs6y6.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc3kzs6y6.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc3kzs6y6.py\"\
    , line 20, in check\n    assert candidate([4, 1, 0, -10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    \n    prev\
    \ = l[0]\n    for x in l[1:]:\n        if prev < x:\n            return False\n\
    \        prev = x\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy_f4wxly.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy_f4wxly.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy_f4wxly.py\"\
    , line 17, in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    \n    prev\
    \ = l[0]\n    for x in l[1:]:\n        if prev < x:\n            return False\n\
    \        prev = x\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn1zdqla0.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn1zdqla0.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn1zdqla0.py\"\
    , line 17, in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    \n    prev\
    \ = l[0]\n    for x in l[1:]:\n        if prev < x:\n            return False\n\
    \        prev = x\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjge6eyqg.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjge6eyqg.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjge6eyqg.py\"\
    , line 17, in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    \n    prev\
    \ = l[0]\n    for x in l[1:]:\n        if prev < x:\n            return False\n\
    \        prev = x\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7nry0hgl.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7nry0hgl.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7nry0hgl.py\"\
    , line 17, in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    \n    prev\
    \ = l[0]\n    for x in l[1:]:\n        if prev < x:\n            return False\n\
    \        prev = x\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt1aax7cf.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt1aax7cf.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt1aax7cf.py\"\
    , line 17, in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsnc8pbz7.py\"\
    , line 276, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsnc8pbz7.py\"\
    , line 274, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsnc8pbz7.py\"\
    , line 264, in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    \n    prev\
    \ = l[0]\n    for x in l[1:]:\n        if prev > x:\n            return False\n\
    \        prev = x\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpydd0gxha.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpydd0gxha.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpydd0gxha.py\"\
    , line 20, in check\n    assert candidate([4, 1, 0, -10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    \n    prev\
    \ = l[0]\n    for x in l[1:]:\n        if prev < x:\n            return False\n\
    \        prev = x\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf_6n2_cc.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf_6n2_cc.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf_6n2_cc.py\"\
    , line 17, in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    \n    prev\
    \ = l[0]\n    for x in l[1:]:\n        if prev > x:\n            return False\n\
    \        prev = x\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppis5t83o.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppis5t83o.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppis5t83o.py\"\
    , line 20, in check\n    assert candidate([4, 1, 0, -10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    else:\n\
    \        first = l[0]\n        last = l[-1]\n        if first < last:\n      \
    \      return True\n        else:\n            return False\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0o9_pc8y.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0o9_pc8y.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0o9_pc8y.py\"\
    , line 19, in check\n    assert candidate([1, 20, 4, 10]) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    \n    prev\
    \ = l[0]\n    for x in l[1:]:\n        if prev < x:\n            return False\n\
    \        prev = x\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu649dp20.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu649dp20.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu649dp20.py\"\
    , line 17, in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    \n    prev\
    \ = l[0]\n    for x in l[1:]:\n        if prev > x:\n            return False\n\
    \        prev = x\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp64_til2d.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp64_til2d.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp64_til2d.py\"\
    , line 20, in check\n    assert candidate([4, 1, 0, -10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 1:\n        return True\n    \n    prev\
    \ = l[0]\n    for x in l[1:]:\n        if prev > x:\n            return False\n\
    \        prev = x\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv41wo45p.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv41wo45p.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv41wo45p.py\"\
    , line 20, in check\n    assert candidate([4, 1, 0, -10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    \n    prev\
    \ = l[0]\n    for x in l[1:]:\n        if prev > x:\n            return False\n\
    \        prev = x\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkzlzv94o.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkzlzv94o.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkzlzv94o.py\"\
    , line 20, in check\n    assert candidate([4, 1, 0, -10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    \n    prev\
    \ = l[0]\n    for x in l[1:]:\n        if x < prev:\n            return False\n\
    \        prev = x\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpaoq3j6h_.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpaoq3j6h_.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpaoq3j6h_.py\"\
    , line 20, in check\n    assert candidate([4, 1, 0, -10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    \n    prev\
    \ = l[0]\n    for x in l[1:]:\n        if prev < x:\n            return False\n\
    \        prev = x\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_4tfao9y.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_4tfao9y.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_4tfao9y.py\"\
    , line 17, in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 1:\n        return True\n    else:\n\
    \        prev = l[0]\n        for el in l[1:]:\n            if prev <= el:\n \
    \               return False\n            prev = el\n        return True\n\ndef\
    \ check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1,\
    \ 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert\
    \ candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n\
    \    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1,\
    \ 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef\
    \ test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3kop9ebg.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3kop9ebg.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3kop9ebg.py\"\
    , line 17, in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    if l[0]\
    \ > l[1]:\n        return False\n    mid = l[0]\n    left = [x for x in l if x\
    \ < mid]\n    right = [x for x in l if x > mid]\n    return monotonic(left) and\
    \ monotonic(right)\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10])\
    \ == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1,\
    \ 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert\
    \ candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) ==\
    \ False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9,\
    \ 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0wti9f4p.py\"\
    , line 28, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0wti9f4p.py\"\
    , line 26, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0wti9f4p.py\"\
    , line 19, in check\n    assert candidate([4, 1, 0, -10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    \n    prev\
    \ = l[0]\n    for x in l[1:]:\n        if prev > x:\n            return False\n\
    \        prev = x\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx10yo0pg.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx10yo0pg.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx10yo0pg.py\"\
    , line 20, in check\n    assert candidate([4, 1, 0, -10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 1:\n        return True\n    else:\n\
    \        prev = l[0]\n        for el in l[1:]:\n            if el < prev:\n  \
    \              return False\n            prev = el\n        return True\n\ndef\
    \ check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1,\
    \ 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert\
    \ candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n\
    \    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1,\
    \ 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef\
    \ test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3lh7bdln.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3lh7bdln.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3lh7bdln.py\"\
    , line 20, in check\n    assert candidate([4, 1, 0, -10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    \n    prev\
    \ = l[0]\n    for x in l[1:]:\n        if prev < x:\n            return False\n\
    \        prev = x\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptcx8m_5w.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptcx8m_5w.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptcx8m_5w.py\"\
    , line 17, in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    \n    length = len(l)\n    \n    if length == 0:\n\
    \        return True\n    \n    if length == 1:\n        return l[0] > l[1]\n\
    \    \n    if length == 2:\n        return l[0] > l[1] and l[0] < l[1]\n    \n\
    \    if length == 3:\n        return l[0] > l[1] and l[0] < l[1] and l[0] > l[2]\n\
    \    \n    if length == 4:\n        return l[0] > l[1] and l[0] < l[1] and l[0]\
    \ > l[2] and l[0] < l[3]\n    \n    if length == 5:\n        return l[0] > l[1]\
    \ and l[0] < l[1] and l[0] > l[2] and l[0] < l[3] and l[0] > l[4]\n    \n    if\
    \ length == 6:\n        return l[0] > l[1] and l[0] < l[1] and l[0] > l[2] and\
    \ l[0] < l[3] and l[0] > l[4] and l[0] < l[5]\n    \n    if length == 7:\n   \
    \     return l[0] > l[1] and l[0] < l[1] and l[0] > l[2] and l[0] < l[3] and l[0]\
    \ > l[4] and l[0] < l[5] and l[0] > l[6]\n    \n    if length == 8:\n        return\
    \ l[0] > l[1] and l[0] < l[1] and l[0] > l[2] and l[0] < l[3] and l[0] > l[4]\
    \ and l[0] < l[5] and l[0] > l[6] and l[0] < l[7]\n    \n    if length == 9:\n\
    \        return l[0] > l[1] and l[0] < l[1] and l[0] > l[2] and l[0] < l[3] and\
    \ l[0] > l[4] and l[0] < l[5] and l[0] > l[6] and l[0] < l[7] and l[0] > l[8]\n\
    \    \n    if length == 10:\n        return l[0] > l[1] and l[0] < l[1] and l[0]\
    \ > l[2] and l[0] < l[3] and l[0] > l[4] and l[0] < l[5] and l[0] > l[6] and l[0]\
    \ < l[7] and l[0] > l[8] and l[0] < l[9]\n    \n    if length == 11:\n       \
    \ return l[0] > l[1] and l[0] < l[1] and l[0] > l[2] and l[0] < l[3] and l[0]\
    \ > l[4] and l[0] < l[5] and l[0] > l[6] and l[0] < l[7] and l[0] > l[8] and l[0]\
    \ < l[9] and l[0] > l[10]\n    \n    if length == 12:\n        return l[0] > \n\
    def check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_0o3ldg3.py\"\
    , line 46\n    return l[0] > \n                  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    if l[0]\
    \ < l[1]:\n        return False\n    mid = l[0] + (l[1] - l[0]) // 2\n    return\
    \ monotonic(mid) or monotonic(l[1:])\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfmb8v1cs.py\"\
    , line 26, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfmb8v1cs.py\"\
    , line 24, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfmb8v1cs.py\"\
    , line 14, in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    if l[0]\
    \ > l[-1]:\n        return False\n    current = l[0]\n    for x in l[1:]:\n  \
    \      if x > current:\n            return False\n        current = x\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n\
    \    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4,\
    \ 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4,\
    \ 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2quhew2b.py\"\
    , line 30, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2quhew2b.py\"\
    , line 28, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2quhew2b.py\"\
    , line 18, in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 1:\n        return True\n    \n    prev\
    \ = l[0]\n    for i in l[1:]:\n        if prev > i:\n            return False\n\
    \        prev = i\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwqbpo64j.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwqbpo64j.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwqbpo64j.py\"\
    , line 20, in check\n    assert candidate([4, 1, 0, -10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    if l[0]\
    \ > l[-1]:\n        return False\n    \n    mid = len(l) // 2\n    \n    if l[mid]\
    \ < l[mid-1]:\n        return False\n    \n    left = [l[i] for i in range(mid)]\n\
    \    right = [l[i] for i in range(mid, len(l))]\n    \n    return monotonic(left)\
    \ and monotonic(right)\n\ndef check(candidate):\n    assert candidate([1, 2, 4,\
    \ 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1,\
    \ 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert\
    \ candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) ==\
    \ False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9,\
    \ 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvaawmg7w.py\"\
    , line 34, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvaawmg7w.py\"\
    , line 32, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvaawmg7w.py\"\
    , line 25, in check\n    assert candidate([4, 1, 0, -10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    \n    prev\
    \ = l[0]\n    for x in l[1:]:\n        if prev < x:\n            return False\n\
    \        prev = x\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe7m875_0.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe7m875_0.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe7m875_0.py\"\
    , line 17, in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    if l[0]\
    \ > l[1]:\n        return False\n    mid = len(l) // 2\n    left_is_less = l[mid]\
    \ < l[mid-1]\n    right_is_less = l[mid] > l[mid+1]\n    if left_is_less and right_is_less:\n\
    \        return True\n    elif left_is_less:\n        return False\n    else:\n\
    \        return right_is_less\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpku61ps5c.py\"\
    , line 33, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpku61ps5c.py\"\
    , line 31, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpku61ps5c.py\"\
    , line 21, in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    \n    prev\
    \ = l[0]\n    for x in l[1:]:\n        if prev > x:\n            return False\n\
    \        prev = x\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpem5hbreh.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpem5hbreh.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpem5hbreh.py\"\
    , line 20, in check\n    assert candidate([4, 1, 0, -10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    \n    prev\
    \ = l[0]\n    for x in l[1:]:\n        if prev < x:\n            return False\n\
    \        prev = x\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpk_96z2zq.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpk_96z2zq.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpk_96z2zq.py\"\
    , line 17, in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    \n    prev\
    \ = l[0]\n    for x in l[1:]:\n        if prev < x:\n            return False\n\
    \        prev = x\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe9ltktdm.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe9ltktdm.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe9ltktdm.py\"\
    , line 17, in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    \n    prev\
    \ = l[0]\n    for x in l[1:]:\n        if prev > x:\n            return False\n\
    \        prev = x\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp94vdoaui.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp94vdoaui.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp94vdoaui.py\"\
    , line 20, in check\n    assert candidate([4, 1, 0, -10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    \n    prev\
    \ = l[0]\n    for x in l[1:]:\n        if prev > x:\n            return False\n\
    \        prev = x\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprtqjgki1.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprtqjgki1.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprtqjgki1.py\"\
    , line 20, in check\n    assert candidate([4, 1, 0, -10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    length = len(l)\n    if length < 2:\n        return\
    \ True\n    if length == 2:\n        if l[0] > l[1]:\n            return True\n\
    \        else:\n            return False\n    if length == 3:\n        if l[0]\
    \ > l[1] and l[1] > l[2]:\n            return True\n        else:\n          \
    \  return False\n    if length == 4:\n        if l[0] > l[1] and l[1] > l[2] and\
    \ l[2] > l[3]:\n            return True\n        else:\n            return False\n\
    \    if length == 5:\n        if l[0] > l[1] and l[1] > l[2] and l[2] > l[3] and\
    \ l[3] > l[4]:\n            return True\n        else:\n            return False\n\
    \    if length == 6:\n        if l[0] > l[1] and l[1] > l[2] and l[2] > l[3] and\
    \ l[3] > l[4] and l[4] > l[5]:\n            return True\n        else:\n     \
    \       return False\n    if length == 7:\n        if l[0] > l[1] and l[1] > l[2]\
    \ and l[2] > l[3] and l[3] > l[4] and l[4] > l[5] and l[5] > l[6]:\n         \
    \   return True\n        else:\n            return False\n    if length == 8:\n\
    \        if l[0] > l[1] and l[1] > l[2] and l[2] > l[3] and l[3] > l[4] and l[4]\
    \ > l[5] and l[5] > l[6] and l[6] > l[7]:\n            return True\n        else:\n\
    \            return False\n    if length == 9:\n        if l[0] > l[1] and l[1]\
    \ > l[2] and l[2] > l[3] and l[3] > l[4] and l[4] > l[5] and l[5] > l[6] and l[6]\
    \ > l[7] and l[7] > l[8]:\n            return True\n        else:\n          \
    \  return False\n    if length == 10:\n        if l[0] > l[1] and l[1] > l[2]\
    \ and l[2] > l[3] and l[3] > l[4] and l[4] > l[5] and l[5] > l[6] and l[6] > l[7]\
    \ and l[7] > l[8] and l[8] > l[9]:\n            return True\n        else:\n \
    \           return False\n    if length == 11:\n        if l[0] > l[1] and l[1]\
    \ > l[2] and l[2] > l[3] and l[3] > l[4] and l[4] > l[5] and l[5] > l[6] and l[6]\
    \ > l[7] and l[7] > l[8] and l[8] > l[9] and l[9] > l[10]:\n            return\
    \ True\n        else:\n            return False\n    if length == 12:\n      \
    \  if l[0] > l[1] and l[1] > l[2] and l[2] > l[3] and l[3] > l[4] and l[4] > l[5]\
    \ and l[5] > l[6] and l\ndef check(candidate):\n    assert candidate([1, 2, 4,\
    \ 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1,\
    \ 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert\
    \ candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) ==\
    \ False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9,\
    \ 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwvgb5fhh.py\"\
    , line 60\n    if l[0] > l[1] and l[1] > l[2] and l[2] > l[3] and l[3] > l[4]\
    \ and l[4] > l[5] and l[5] > l[6] and l\n                                    \
    \                                                                    ^\nSyntaxError:\
    \ expected ':'\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    \n    prev\
    \ = l[0]\n    for x in l[1:]:\n        if prev > x:\n            return False\n\
    \        prev = x\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxmis71ly.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxmis71ly.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxmis71ly.py\"\
    , line 20, in check\n    assert candidate([4, 1, 0, -10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    \n    prev\
    \ = l[0]\n    for x in l[1:]:\n        if prev < x:\n            return False\n\
    \        prev = x\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3_r1eerl.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3_r1eerl.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3_r1eerl.py\"\
    , line 17, in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    \n    prev\
    \ = l[0]\n    for x in l[1:]:\n        if prev > x:\n            return False\n\
    \        prev = x\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph43ai8fy.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph43ai8fy.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph43ai8fy.py\"\
    , line 20, in check\n    assert candidate([4, 1, 0, -10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    \n    prev\
    \ = l[0]\n    for x in l[1:]:\n        if prev > x:\n            return False\n\
    \        prev = x\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4efkvg1h.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4efkvg1h.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4efkvg1h.py\"\
    , line 20, in check\n    assert candidate([4, 1, 0, -10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    \n    prev\
    \ = l[0]\n    for x in l[1:]:\n        if prev > x:\n            return False\n\
    \        prev = x\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpybtl2dcz.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpybtl2dcz.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpybtl2dcz.py\"\
    , line 20, in check\n    assert candidate([4, 1, 0, -10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 1:\n        return True\n    \n    prev\
    \ = l[0]\n    for x in l[1:]:\n        if prev < x:\n            return False\n\
    \        prev = x\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5xtgz5vk.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5xtgz5vk.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5xtgz5vk.py\"\
    , line 17, in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    \n    prev\
    \ = l[0]\n    for x in l[1:]:\n        if prev < x:\n            return False\n\
    \        prev = x\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp38xi6ptb.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp38xi6ptb.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp38xi6ptb.py\"\
    , line 17, in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    \n    prev\
    \ = l[0]\n    for x in l[1:]:\n        if prev < x:\n            return False\n\
    \        prev = x\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpera_jlk_.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpera_jlk_.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpera_jlk_.py\"\
    , line 17, in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    \n    prev\
    \ = l[0]\n    for x in l[1:]:\n        if prev > x:\n            return False\n\
    \        prev = x\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyc5d81gk.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyc5d81gk.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyc5d81gk.py\"\
    , line 20, in check\n    assert candidate([4, 1, 0, -10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    \n    sorted_list = sorted(l)\n    \n    return sorted_list[0]\
    \ == sorted_list[-1]\n    \ndef check(candidate):\n    assert candidate([1, 2,\
    \ 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1,\
    \ 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert\
    \ candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) ==\
    \ False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9,\
    \ 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppcwegl_2.py\"\
    , line 24, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppcwegl_2.py\"\
    , line 22, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppcwegl_2.py\"\
    , line 12, in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 1:\n        return True\n    \n    prev\
    \ = l[0]\n    for i in l[1:]:\n        if prev > i:\n            return False\n\
    \        prev = i\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3z2tw3cd.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3z2tw3cd.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3z2tw3cd.py\"\
    , line 20, in check\n    assert candidate([4, 1, 0, -10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    \n    prev\
    \ = l[0]\n    for x in l[1:]:\n        if prev > x:\n            return False\n\
    \        prev = x\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpky8hhjcw.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpky8hhjcw.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpky8hhjcw.py\"\
    , line 20, in check\n    assert candidate([4, 1, 0, -10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    \n    prev\
    \ = l[0]\n    for x in l[1:]:\n        if prev > x:\n            return False\n\
    \        prev = x\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdx5laj69.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdx5laj69.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdx5laj69.py\"\
    , line 20, in check\n    assert candidate([4, 1, 0, -10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    \n    prev\
    \ = l[0]\n    for x in l[1:]:\n        if prev > x:\n            return False\n\
    \        prev = x\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsn9ziz2x.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsn9ziz2x.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsn9ziz2x.py\"\
    , line 20, in check\n    assert candidate([4, 1, 0, -10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    \n    prev\
    \ = l[0]\n    for i in l[1:]:\n        if i > prev:\n            return False\n\
    \        prev = i\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu800bii8.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu800bii8.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu800bii8.py\"\
    , line 17, in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 1:\n        return True\n    \n    prev\
    \ = l[0]\n    for x in l[1:]:\n        if prev > x:\n            return False\n\
    \        prev = x\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphrfxl_fj.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphrfxl_fj.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphrfxl_fj.py\"\
    , line 20, in check\n    assert candidate([4, 1, 0, -10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    \n    prev\
    \ = l[0]\n    for i in l[1:]:\n        if prev > i:\n            return False\n\
    \        prev = i\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpspkf53__.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpspkf53__.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpspkf53__.py\"\
    , line 20, in check\n    assert candidate([4, 1, 0, -10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    \n    prev\
    \ = l[0]\n    for x in l[1:]:\n        if x < prev:\n            return False\n\
    \        prev = x\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxxb25w7t.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxxb25w7t.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxxb25w7t.py\"\
    , line 20, in check\n    assert candidate([4, 1, 0, -10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    \n    prev\
    \ = l[0]\n    for x in l[1:]:\n        if prev > x:\n            return False\n\
    \        prev = x\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxyo87_xb.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxyo87_xb.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxyo87_xb.py\"\
    , line 20, in check\n    assert candidate([4, 1, 0, -10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    \n    prev\
    \ = l[0]\n    for x in l[1:]:\n        if prev > x:\n            return False\n\
    \        prev = x\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpne467wuw.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpne467wuw.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpne467wuw.py\"\
    , line 20, in check\n    assert candidate([4, 1, 0, -10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    if l[0]\
    \ > l[-1]:\n        return False\n    \n    left_index = -1\n    right_index =\
    \ len(l) - 1\n    \n    while left_index < right_index:\n        left_value =\
    \ l[left_index]\n        right_value = l[right_index]\n        \n        if left_value\
    \ < right_value:\n            left_index += 1\n        elif left_value > right_value:\n\
    \            right_index -= 1\n        else:\n            return True\n    return\
    \ False\n</cell>\n<cell>\nmonotonic([1,2,3])\n</cell>\n<cell>\nmonotonic([2,1,3])\n\
    </cell>\n<cell>\nmonotonic([2,1,3])\n</cell>\n<cell>\nmonotonic([2,1,3])\n</cell>\n\
    <cell>\nmonotonic([2,1,3])\n</cell>\n<cell>\nmonotonic([2,1,3])\n</cell>\n<cell>\n\
    monotonic([2,1,3])\n</cell>\n<cell>\nmonotonic([2,1,3])\n</cell>\n<cell>\nmonotonic([2,1,3])\n\
    </cell>\n<cell>\nmonotonic([2,1,3])\n</cell>\n<cell>\nmonotonic([2,1,3])\n</cell>\n\
    <cell>\nmonotonic([2,1,3])\n</cell>\n<cell>\nmonotonic([2,1,3])\n</cell>\n<cell>\n\
    monotonic([2,1,3])\n</cell>\n<cell>\nmonotonic([2,1,3])\n</cell>\n<cell>\nmonotonic([2,1,3])\n\
    </cell>\n<cell>\nmonotonic([2,1,3])\n</cell>\n<cell>\nmonotonic([2,1,3])\n</cell>\n\
    <cell>\nmonotonic([2,1,3])\n</cell>\n<cell>\nmonotonic([2,1,3])\n</cell>\n<cell>\n\
    monotonic([2,1,3])\n</cell>\n<cell>\nmonotonic([2,1,3])\n</cell>\n<cell>\nmonotonic([2,1,3])\n\
    </cell>\n<cell>\nmonotonic([2,1,3])\n</cell>\n<cell>\nmonotonic([2,1,3])\n</cell>\n\
    <cell>\nmonotonic([2,1,3])\n</cell>\n<cell>\nmonotonic([2,1,3])\n</cell>\n<cell>\n\
    monotonic([2,1,3])\n</cell>\n<cell>\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkrzn58nu.py\"\
    , line 25\n    </cell>\n    ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    if l[0]\
    \ > l[1]:\n        return False\n    mid = l[1]\n    left = l[2:]\n    right =\
    \ l[:1]\n    return monotonic(left) and monotonic(right) and mid <= max(left,\
    \ right)\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n\
    \    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4,\
    \ 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4,\
    \ 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5etlac72.py\"\
    , line 28, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5etlac72.py\"\
    , line 26, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5etlac72.py\"\
    , line 16, in check\n    assert candidate([1, 2, 4, 10]) == True\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5etlac72.py\"\
    , line 13, in monotonic\n    return monotonic(left) and monotonic(right) and mid\
    \ <= max(left, right)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5etlac72.py\"\
    , line 13, in monotonic\n    return monotonic(left) and monotonic(right) and mid\
    \ <= max(left, right)\nTypeError: '<=' not supported between instances of 'int'\
    \ and 'list'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    else:\n\
    \        return all(l[i] <= l[i + 1] for i in range(len(l) - 1))\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgtmqajln.py\"\
    , line 24, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgtmqajln.py\"\
    , line 22, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgtmqajln.py\"\
    , line 15, in check\n    assert candidate([4, 1, 0, -10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    \n    prev\
    \ = l[0]\n    for x in l[1:]:\n        if prev > x:\n            return False\n\
    \        prev = x\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjld7ou6a.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjld7ou6a.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjld7ou6a.py\"\
    , line 20, in check\n    assert candidate([4, 1, 0, -10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    \n    prev\
    \ = l[0]\n    for x in l[1:]:\n        if prev > x:\n            return False\n\
    \        prev = x\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvrvw88za.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvrvw88za.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvrvw88za.py\"\
    , line 20, in check\n    assert candidate([4, 1, 0, -10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4om2m278.py\"\
    , line 276, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4om2m278.py\"\
    , line 274, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4om2m278.py\"\
    , line 264, in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    \n    prev\
    \ = l[0]\n    for x in l[1:]:\n        if prev < x:\n            return False\n\
    \        prev = x\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpeif06gkv.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpeif06gkv.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpeif06gkv.py\"\
    , line 17, in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    \n    prev\
    \ = l[0]\n    for x in l[1:]:\n        if prev > x:\n            return False\n\
    \        prev = x\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnwlymoti.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnwlymoti.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnwlymoti.py\"\
    , line 20, in check\n    assert candidate([4, 1, 0, -10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    \n    sorted_list = sorted(l)\n    \n    if len(sorted_list)\
    \ <= 1:\n        return True\n    \n    if sorted_list[-1] < sorted_list[0]:\n\
    \        return False\n    \n    previous_value = sorted_list[0]\n    \n    for\
    \ value in sorted_list[1:]:\n        if value > previous_value:\n            return\
    \ False\n        \n        previous_value = value\n    \n    return True\n\ndef\
    \ check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1,\
    \ 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert\
    \ candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n\
    \    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1,\
    \ 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef\
    \ test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkqqeozky.py\"\
    , line 38, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkqqeozky.py\"\
    , line 36, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkqqeozky.py\"\
    , line 26, in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    l = sorted(l)\n    return l[0] < l[-1]\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyz1n5phn.py\"\
    , line 22, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyz1n5phn.py\"\
    , line 20, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyz1n5phn.py\"\
    , line 12, in check\n    assert candidate([1, 20, 4, 10]) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    if l[0]\
    \ > l[1]:\n        return False\n    mid = l[0]\n    left = []\n    right = []\n\
    \    for x in l:\n        if x < mid:\n            left.append(x)\n        else:\n\
    \            right.append(x)\n    if left == []:\n        return True\n    if\
    \ right == []:\n        return False\n    return monotonic(left) and monotonic(right)\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn4ajg1bz.py\"\
    , line 37, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn4ajg1bz.py\"\
    , line 35, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn4ajg1bz.py\"\
    , line 27, in check\n    assert candidate([1, 20, 4, 10]) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    if l[0]\
    \ < l[1]:\n        return False\n    mid = l[0] + (l[1] - l[0]) / 2\n    if l[0]\
    \ > mid:\n        return True\n    if l[1] > mid:\n        return False\n    return\
    \ monotonic(l[1:])\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10])\
    \ == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1,\
    \ 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert\
    \ candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) ==\
    \ False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9,\
    \ 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbe2_pz7d.py\"\
    , line 30, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbe2_pz7d.py\"\
    , line 28, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbe2_pz7d.py\"\
    , line 18, in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    \n    prev\
    \ = l[0]\n    for i in l[1:]:\n        if prev > i:\n            return False\n\
    \        prev = i\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_iag9sb4.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_iag9sb4.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_iag9sb4.py\"\
    , line 20, in check\n    assert candidate([4, 1, 0, -10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    \n    prev\
    \ = l[0]\n    for x in l[1:]:\n        if prev < x:\n            return False\n\
    \        prev = x\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkkt8itb8.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkkt8itb8.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkkt8itb8.py\"\
    , line 17, in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    \n    prev\
    \ = l[0]\n    for x in l[1:]:\n        if prev < x:\n            return False\n\
    \        prev = x\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl23bxok6.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl23bxok6.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl23bxok6.py\"\
    , line 17, in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    \n    prev\
    \ = l[0]\n    for x in l[1:]:\n        if prev > x:\n            return False\n\
    \        prev = x\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu8bnb8hw.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu8bnb8hw.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu8bnb8hw.py\"\
    , line 20, in check\n    assert candidate([4, 1, 0, -10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    \n    prev\
    \ = l[0]\n    for i in l[1:]:\n        if prev > i:\n            return False\n\
    \        prev = i\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp01ghj_k8.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp01ghj_k8.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp01ghj_k8.py\"\
    , line 20, in check\n    assert candidate([4, 1, 0, -10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 1:\n        return True\n    \n    prev\
    \ = l[0]\n    for x in l[1:]:\n        if prev < x:\n            return False\n\
    \        prev = x\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp925mr3z9.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp925mr3z9.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp925mr3z9.py\"\
    , line 17, in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    \n    prev\
    \ = l[0]\n    for x in l[1:]:\n        if prev > x:\n            return False\n\
    \        prev = x\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa6nhe7mh.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa6nhe7mh.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa6nhe7mh.py\"\
    , line 20, in check\n    assert candidate([4, 1, 0, -10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    \n    prev\
    \ = l[0]\n    for x in l[1:]:\n        if prev > x:\n            return False\n\
    \        prev = x\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq7me0r1f.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq7me0r1f.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq7me0r1f.py\"\
    , line 20, in check\n    assert candidate([4, 1, 0, -10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    if l[0]\
    \ > l[-1]:\n        return False\n    \n    mid = len(l) // 2\n    \n    left_is_less\
    \ = l[mid] < l[mid-1]\n    right_is_less = l[mid] < l[mid+1]\n    \n    return\
    \ left_is_less or right_is_less\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpj752ry2e.py\"\
    , line 31, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpj752ry2e.py\"\
    , line 29, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpj752ry2e.py\"\
    , line 21, in check\n    assert candidate([1, 20, 4, 10]) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    \n    prev\
    \ = l[0]\n    for x in l[1:]:\n        if prev <= x:\n            return False\n\
    \        prev = x\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3ait1uk0.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3ait1uk0.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3ait1uk0.py\"\
    , line 17, in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    \n    prev\
    \ = l[0]\n    for x in l[1:]:\n        if prev > x:\n            return False\n\
    \        prev = x\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwb01a8wi.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwb01a8wi.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwb01a8wi.py\"\
    , line 20, in check\n    assert candidate([4, 1, 0, -10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    \n    prev\
    \ = l[0]\n    for x in l[1:]:\n        if prev > x:\n            return False\n\
    \        prev = x\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplyzxwoj4.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplyzxwoj4.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplyzxwoj4.py\"\
    , line 20, in check\n    assert candidate([4, 1, 0, -10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    if l[0]\
    \ > l[-1]:\n        return True\n    if l[0] == l[-1]:\n        return False\n\
    \    mid = len(l) // 2\n    if l[mid] > l[mid+1]:\n        return monotonic(l[:mid])\n\
    \    else:\n        return monotonic(l[mid+1:])\n\ndef check(candidate):\n   \
    \ assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprl64a31o.py\"\
    , line 31, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprl64a31o.py\"\
    , line 29, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprl64a31o.py\"\
    , line 21, in check\n    assert candidate([1, 20, 4, 10]) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    \n    l = sorted(l)\n    \n    return l[0] < l[-1]\n\
    </cell>\n<cell>\nmonotonic([1,2,3])\n</cell>\n<cell>\nmonotonic([3,2,1])\n</cell>\n\
    <cell>\nmonotonic([1,3,2])\n</cell>\n<text>\nThe monotonicity of lists is a very\
    \ useful property in many algorithms. For example, a sorting algorithm may need\
    \ to know if its input list is monotonically increasing or decreasing. The monotonicity\
    \ of a list tells us if the first element in the list must be greater or less\
    \ than the second element. Here is an example of a monotonic list that satisfies\
    \ the monotonicity property:\n\n\n</text>\n<cell>\nmonotonic([1,2,3,4,5])\n</cell>\n\
    <text>\nWe can also use the monotonicity property to determine if an algorithm\
    \ will terminate or if it will run forever. For example, a sorting algorithm may\
    \ need to know if the list contains any duplicate elements. A list that contains\
    \ a single element will always satisfy the monotonicity property:\n\n\n</text>\n\
    <cell>\nmonotonic([1,1,1,2,2])\n</cell>\n<text>\nExercise: Write a function that\
    \ takes a list of numbers and returns True if the list contains any duplicates.\
    \ If the list contains no duplicates, return False.\n\n\n</text>\n<cell>\ndef\
    \ check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1,\
    \ 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert\
    \ candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n\
    \    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1,\
    \ 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef\
    \ test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1gownsar.py\"\
    , line 10\n    </cell>\n    ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    if l[0]\
    \ > l[1]:\n        return True\n    return False\n\ndef check(candidate):\n  \
    \  assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy605w8l9.py\"\
    , line 25, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy605w8l9.py\"\
    , line 23, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy605w8l9.py\"\
    , line 13, in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    \n    prev\
    \ = l[0]\n    for x in l[1:]:\n        if prev < x:\n            return False\n\
    \        prev = x\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpiyl7048l.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpiyl7048l.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpiyl7048l.py\"\
    , line 17, in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    \n    prev\
    \ = l[0]\n    for x in l[1:]:\n        if prev < x:\n            return False\n\
    \        prev = x\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5fo57z5_.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5fo57z5_.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5fo57z5_.py\"\
    , line 17, in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    \n    prev\
    \ = l[0]\n    for x in l[1:]:\n        if prev <= x:\n            return False\n\
    \        prev = x\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpaqvgvy_e.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpaqvgvy_e.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpaqvgvy_e.py\"\
    , line 17, in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    \n    prev\
    \ = l[0]\n    for x in l[1:]:\n        if prev > x:\n            return False\n\
    \        prev = x\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd5w06l9m.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd5w06l9m.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd5w06l9m.py\"\
    , line 20, in check\n    assert candidate([4, 1, 0, -10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    else:\n\
    \        prev = l[0]\n        for el in l[1:]:\n            if el < prev:\n  \
    \              return False\n            prev = el\n        return True\n\ndef\
    \ check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1,\
    \ 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert\
    \ candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n\
    \    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1,\
    \ 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef\
    \ test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdp0xtt3k.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdp0xtt3k.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdp0xtt3k.py\"\
    , line 20, in check\n    assert candidate([4, 1, 0, -10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    if l[0]\
    \ < l[1]:\n        return False\n    mid = l[1]\n    left = [x for x in l if x\
    \ < mid]\n    right = [x for x in l if x > mid]\n    return left and right\n\n\
    def check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkjgmkh_2.py\"\
    , line 28, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkjgmkh_2.py\"\
    , line 26, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkjgmkh_2.py\"\
    , line 16, in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    \n    prev\
    \ = l[0]\n    for x in l[1:]:\n        if prev < x:\n            return False\n\
    \        prev = x\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzcqirziy.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzcqirziy.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzcqirziy.py\"\
    , line 17, in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    \n    prev\
    \ = l[0]\n    for x in l[1:]:\n        if prev > x:\n            return False\n\
    \        prev = x\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc81_q5l_.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc81_q5l_.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc81_q5l_.py\"\
    , line 20, in check\n    assert candidate([4, 1, 0, -10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    \n    prev\
    \ = l[0]\n    for i in l[1:]:\n        if prev > i:\n            return False\n\
    \        prev = i\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppyesyogl.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppyesyogl.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppyesyogl.py\"\
    , line 20, in check\n    assert candidate([4, 1, 0, -10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    \n    prev\
    \ = l[0]\n    for i in l[1:]:\n        if prev > i:\n            return False\n\
    \        prev = i\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_6si1a0f.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_6si1a0f.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_6si1a0f.py\"\
    , line 20, in check\n    assert candidate([4, 1, 0, -10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    if l[0]\
    \ > l[1]:\n        return False\n    mid = l[1]\n    for x in l[2:]:\n       \
    \ if x > mid:\n            return False\n        mid = x\n    return True\n\n\
    def check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppa_myu17.py\"\
    , line 30, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppa_myu17.py\"\
    , line 28, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppa_myu17.py\"\
    , line 18, in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    \n    prev\
    \ = l[0]\n    for x in l[1:]:\n        if prev < x:\n            return False\n\
    \        prev = x\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprqltqifb.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprqltqifb.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprqltqifb.py\"\
    , line 17, in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    \n    prev\
    \ = l[0]\n    for x in l[1:]:\n        if prev <= x:\n            return False\n\
    \        prev = x\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo6fdr76q.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo6fdr76q.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo6fdr76q.py\"\
    , line 17, in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    \n    prev\
    \ = l[0]\n    for x in l[1:]:\n        if prev <= x:\n            return False\n\
    \        prev = x\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp53iba7hy.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp53iba7hy.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp53iba7hy.py\"\
    , line 17, in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    \n    sorted_list = sorted(l)\n    \n    if sorted_list[0]\
    \ == sorted_list[-1]:\n        return True\n    else:\n        return False\n\
    \    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n  \
    \  assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10])\
    \ == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4,\
    \ 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpch4iwtjl.py\"\
    , line 27, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpch4iwtjl.py\"\
    , line 25, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpch4iwtjl.py\"\
    , line 15, in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    if l[0]\
    \ < l[1]:\n        return True\n    if l[-1] < l[-2]:\n        return True\n \
    \   return False\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10])\
    \ == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1,\
    \ 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert\
    \ candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) ==\
    \ False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9,\
    \ 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx5_eydc6.py\"\
    , line 27, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx5_eydc6.py\"\
    , line 25, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx5_eydc6.py\"\
    , line 17, in check\n    assert candidate([1, 20, 4, 10]) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    \n    prev\
    \ = l[0]\n    for x in l[1:]:\n        if prev > x:\n            return False\n\
    \        prev = x\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmqa64m15.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmqa64m15.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmqa64m15.py\"\
    , line 20, in check\n    assert candidate([4, 1, 0, -10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    \n    prev\
    \ = l[0]\n    for x in l[1:]:\n        if prev > x:\n            return False\n\
    \        prev = x\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp57qstonj.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp57qstonj.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp57qstonj.py\"\
    , line 20, in check\n    assert candidate([4, 1, 0, -10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    \n    prev\
    \ = l[0]\n    for x in l[1:]:\n        if prev < x:\n            return False\n\
    \        prev = x\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8h1vtlqr.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8h1vtlqr.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8h1vtlqr.py\"\
    , line 17, in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    \n    prev\
    \ = l[0]\n    for x in l[1:]:\n        if prev < x:\n            return False\n\
    \        prev = x\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphywm_0dh.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphywm_0dh.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphywm_0dh.py\"\
    , line 17, in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    \n    prev\
    \ = l[0]\n    for x in l[1:]:\n        if prev < x:\n            return False\n\
    \        prev = x\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsi817zjr.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsi817zjr.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsi817zjr.py\"\
    , line 17, in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    \n    prev\
    \ = l[0]\n    for i in l[1:]:\n        if prev > i:\n            return False\n\
    \        prev = i\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjuqmmye9.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjuqmmye9.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjuqmmye9.py\"\
    , line 20, in check\n    assert candidate([4, 1, 0, -10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    \n    prev\
    \ = l[0]\n    for x in l[1:]:\n        if prev < x:\n            return False\n\
    \        prev = x\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyqzqf2ls.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyqzqf2ls.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyqzqf2ls.py\"\
    , line 17, in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    \n    prev\
    \ = l[0]\n    for x in l[1:]:\n        if prev < x:\n            return False\n\
    \        prev = x\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2syf0x7u.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2syf0x7u.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2syf0x7u.py\"\
    , line 17, in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    \n    prev\
    \ = l[0]\n    for x in l[1:]:\n        if prev > x:\n            return False\n\
    \        prev = x\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsgonyyln.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsgonyyln.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsgonyyln.py\"\
    , line 20, in check\n    assert candidate([4, 1, 0, -10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 1:\n        return True\n    \n    prev\
    \ = l[0]\n    for x in l[1:]:\n        if prev > x:\n            return False\n\
    \        prev = x\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc5vza7cx.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc5vza7cx.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc5vza7cx.py\"\
    , line 20, in check\n    assert candidate([4, 1, 0, -10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    \n    prev\
    \ = l[0]\n    for x in l[1:]:\n        if prev > x:\n            return False\n\
    \        prev = x\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpke8sgz6y.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpke8sgz6y.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpke8sgz6y.py\"\
    , line 20, in check\n    assert candidate([4, 1, 0, -10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 1:\n        return True\n    else:\n\
    \        mid = len(l) // 2\n        left = l[:mid]\n        right = l[mid:]\n\
    \        return monotonic(left) and monotonic(right)\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6vw45qt4.py\"\
    , line 27, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6vw45qt4.py\"\
    , line 25, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6vw45qt4.py\"\
    , line 17, in check\n    assert candidate([1, 20, 4, 10]) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    \n    prev\
    \ = l[0]\n    for x in l[1:]:\n        if prev < x:\n            return False\n\
    \        prev = x\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz670dzgp.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz670dzgp.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz670dzgp.py\"\
    , line 17, in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    \n    prev\
    \ = l[0]\n    for x in l[1:]:\n        if prev > x:\n            return False\n\
    \        prev = x\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp94ss_hux.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp94ss_hux.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp94ss_hux.py\"\
    , line 20, in check\n    assert candidate([4, 1, 0, -10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    \n    prev\
    \ = l[0]\n    for x in l[1:]:\n        if prev > x:\n            return False\n\
    \        prev = x\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpobrwz56g.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpobrwz56g.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpobrwz56g.py\"\
    , line 20, in check\n    assert candidate([4, 1, 0, -10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    \n    prev\
    \ = l[0]\n    for x in l[1:]:\n        if prev < x:\n            return False\n\
    \        prev = x\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcalya8h8.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcalya8h8.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcalya8h8.py\"\
    , line 17, in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    \n    prev\
    \ = l[0]\n    for x in l[1:]:\n        if prev <= x:\n            return False\n\
    \        prev = x\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpibzki3p3.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpibzki3p3.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpibzki3p3.py\"\
    , line 17, in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    \n    prev\
    \ = l[0]\n    for x in l[1:]:\n        if prev > x:\n            return False\n\
    \        prev = x\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnoj_fwrz.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnoj_fwrz.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnoj_fwrz.py\"\
    , line 20, in check\n    assert candidate([4, 1, 0, -10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    \n    prev\
    \ = l[0]\n    for x in l[1:]:\n        if prev < x:\n            return False\n\
    \        prev = x\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq_adev_r.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq_adev_r.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq_adev_r.py\"\
    , line 17, in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 1:\n        return True\n    \n    prev\
    \ = l[0]\n    for x in l[1:]:\n        if prev > x:\n            return False\n\
    \        prev = x\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnas_dlz0.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnas_dlz0.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnas_dlz0.py\"\
    , line 20, in check\n    assert candidate([4, 1, 0, -10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    \n    prev\
    \ = l[0]\n    for x in l[1:]:\n        if prev > x:\n            return False\n\
    \        prev = x\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpojr7_qvj.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpojr7_qvj.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpojr7_qvj.py\"\
    , line 20, in check\n    assert candidate([4, 1, 0, -10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    if l[0]\
    \ < l[1]:\n        return False\n    mid = l[0] + (l[1] - l[0]) // 2\n    return\
    \ monotonic(mid) or monotonic(l[1:])\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvtando_t.py\"\
    , line 26, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvtando_t.py\"\
    , line 24, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvtando_t.py\"\
    , line 14, in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    \n    prev\
    \ = l[0]\n    for i in l[1:]:\n        if prev > i:\n            return False\n\
    \        prev = i\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqixpsufq.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqixpsufq.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqixpsufq.py\"\
    , line 20, in check\n    assert candidate([4, 1, 0, -10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    \n    prev\
    \ = l[0]\n    for x in l[1:]:\n        if prev > x:\n            return False\n\
    \        prev = x\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6b8jj3p6.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6b8jj3p6.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6b8jj3p6.py\"\
    , line 20, in check\n    assert candidate([4, 1, 0, -10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    \n    prev\
    \ = l[0]\n    for x in l[1:]:\n        if prev < x:\n            return False\n\
    \        prev = x\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4ogzfhcb.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4ogzfhcb.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4ogzfhcb.py\"\
    , line 17, in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    else:\n\
    \        prev = l[0]\n        for el in l[1:]:\n            if el < prev:\n  \
    \              return False\n            prev = el\n        return True\n\ndef\
    \ check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1,\
    \ 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert\
    \ candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n\
    \    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1,\
    \ 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef\
    \ test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3mqyw4zl.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3mqyw4zl.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3mqyw4zl.py\"\
    , line 20, in check\n    assert candidate([4, 1, 0, -10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    \n    prev\
    \ = l[0]\n    for x in l[1:]:\n        if prev < x:\n            return False\n\
    \        prev = x\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppkc6gt70.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppkc6gt70.py\"\
    , line 27, in test_check\n    check(monotonic)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppkc6gt70.py\"\
    , line 17, in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
