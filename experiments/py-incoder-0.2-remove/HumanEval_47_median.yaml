name: HumanEval_47_median
language: py
prompt: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"\
  Return median of elements in the list l.\n            \"\"\"\n"
tests: "def check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert\
  \ candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n\
  \    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7])\
  \ == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n"
completions: ["    l = sorted(l)\n    if len(l) % 2 == 0:\n        return l[(len(l)\
    \ // 2) - 1]\n    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1])\
    \ / 2\n", "    length = len(l)\n    if length % 2 == 1:\n        return l[(length//2)-1]\n\
    \    else:\n        return (l[(length//2)-1] + l[(length//2)]) / 2\n", "    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[(len(l) // 2) - 1]\n\
    \    else:\n        return l[len(l) // 2]\n", "    length = len(l)\n    if length\
    \ % 2 == 0:\n        return l[length//2]\n    else:\n        return (l[length//2]\
    \ + l[length//2 - 1]) // 2\n", "    length = len(l)\n    if length % 2 == 0:\n\
    \        return l[(length//2)-1]\n    else:\n        return (l[length//2] + l[length//2-1])/2.0\n",
  "    l = sorted(l)\n    if len(l) % 2 == 0:\n        return l[len(l) // 2]\n   \
    \ else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) // 2\n", "    return\
    \ sorted(l)[0]\n", "    length = len(l)\n    if length % 2 == 1:\n        return\
    \ l[length//2]\n    else:\n        return (l[length//2] + l[length//2 - 1]) //\
    \ 2\n", "    l = sorted(l)\n    if len(l) % 2 == 0:\n        return l[((len(l)\
    \ - 1) // 2) - 1]\n    else:\n        return l[len(l) // 2]\n", "    return sorted(l)[0]\n",
  "    l = sorted(l)\n    if len(l) % 2 == 0:\n        return l[len(l) // 2]\n   \
    \ else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) // 2\n", "    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[(len(l) // 2) - 1]\n\
    \    else:\n        return l[len(l) // 2]\n", "    l = sorted(l)\n    if len(l)\
    \ % 2 == 0:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l)\
    \ // 2] + l[len(l) // 2 - 1]) // 2\n", "    l = sorted(l)\n    if len(l) % 2 ==\
    \ 0:\n        return l[(len(l) // 2) - 1]\n    else:\n        return l[len(l)\
    \ // 2]\n", "    if len(l) < 1:\n        return None\n    l.sort()\n    if len(l)\
    \ % 2 == 0:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l)\
    \ // 2] + l[len(l) // 2 - 1]) // 2\n", "    return sorted(l)[0]\n", "    sorted_list\
    \ = sorted(l)\n    length = len(sorted_list)\n    if length % 2 == 1:\n      \
    \  return sorted_list[length//2]\n    else:\n        return (sorted_list[length//2]\
    \ + sorted_list[length//2 - 1])/2.0\n", "    length = len(l)\n    if length %\
    \ 2 == 1:\n        return l[(length-1)//2]\n    else:\n        return (l[(length-1)//2]\
    \ + l[(length-1)//2-1])/2.0\n", "    return sorted(l)[0]\n", "    return sorted(l)[0]\n",
  "    if len(l) < 1:\n        return None\n    else:\n        mid = len(l) // 2\n\
    \        return (l[mid] + l[mid-1]) / 2\n", "    l = sorted(l)\n    if len(l)\
    \ % 2 == 0:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l)\
    \ // 2] + l[len(l) // 2 - 1]) // 2\n", "    if len(l) % 2 == 0:\n        return\
    \ sorted(l)[0]\n    else:\n        middle = len(l) // 2\n        left = sorted(l[:middle])\n\
    \        right = sorted(l[middle:])\n        return 0.5 * (left[len(left) // 2]\
    \ + right[len(right) // 2])\n", "    l = sorted(l)\n    if len(l) % 2 == 0:\n\
    \        return l[((len(l) - 1) // 2) - 1]\n    else:\n        return l[len(l)\
    \ // 2]\n", "    length = len(l)\n    if length % 2 == 0:\n        return l[length//2]\n\
    \    else:\n        return (l[length//2] + l[length//2 - 1]) // 2\n", "    l =\
    \ sorted(l)\n    if len(l) % 2 == 0:\n        return l[len(l) // 2]\n    else:\n\
    \        return (l[len(l) // 2] + l[len(l) // 2 - 1]) // 2\n", "    length = len(l)\n\
    \    if length % 2 == 0:\n        return (l[length//2] + l[length//2 - 1])/2.0\n\
    \    else:\n        return l[length//2]\n", "    l = sorted(l)\n    if len(l)\
    \ % 2 == 0:\n        return l[(len(l) // 2) - 1]\n    else:\n        return l[len(l)\
    \ // 2]\n", "    length = len(l)\n    if length % 2 == 1:\n        return l[(length-1)//2]\n\
    \    else:\n        return (l[(length-1)//2] + l[length//2-1])/2\n", "    l =\
    \ sorted(l)\n    if len(l) % 2 == 0:\n        return l[(len(l) // 2) - 1]\n  \
    \  else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n", "    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[((len(l) - 1) // 2) -\
    \ 1]\n    else:\n        return l[len(l) // 2]\n", "    sorted_list = sorted(l)\n\
    \    length = len(sorted_list)\n    if length % 2 == 0:\n        return (sorted_list[length//2]\
    \ + sorted_list[length//2 - 1])/2\n    else:\n        return sorted_list[length//2]\n",
  "    length = len(l)\n    if length % 2 == 0:\n        return l[length//2]\n   \
    \ else:\n        return (l[length//2] + l[length//2 - 1]) // 2\n", "    l = sorted(l)\n\
    \    if len(l) % 2 == 0:\n        return l[len(l) // 2]\n    else:\n        return\
    \ (l[len(l) // 2] + l[len(l) // 2 - 1]) // 2\n", "    l = sorted(l)\n    if len(l)\
    \ % 2 == 0:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l)\
    \ // 2] + l[len(l) // 2 - 1]) // 2\n", "    sorted_list = sorted(l)\n    if len(sorted_list)\
    \ % 2 == 0:\n        return sorted_list[len(sorted_list) // 2]\n    else:\n  \
    \      return (sorted_list[(len(sorted_list) // 2) - 1] + sorted_list[(len(sorted_list)\
    \ // 2)]) / 2\n", "    l = sorted(l)\n    if len(l) % 2 == 0:\n        return\
    \ l[len(l) // 2]\n    else:\n        return (l[len(l) // 2] + l[len(l) // 2 -\
    \ 1]) // 2\n", "    l = sorted(l)\n    if len(l) % 2 == 0:\n        return l[((len(l)\
    \ + 1) // 2) - 1]\n    else:\n        return l[len(l) // 2]\n", "    length =\
    \ len(l)\n    if length % 2 == 1:\n        return l[(length-1)//2]\n    else:\n\
    \        middle = length // 2\n        return (l[middle-1] + l[middle])/2\n",
  "    return sorted(l)[0]\n", "    length = len(l)\n    if length % 2 == 0:\n   \
    \     return l[length//2]\n    else:\n        return (l[length//2] + l[length//2\
    \ - 1]) // 2\n", "    sorted_list = sorted(l)\n    if len(sorted_list) % 2 ==\
    \ 0:\n        return sorted_list[len(sorted_list) // 2]\n    else:\n        return\
    \ (sorted_list[(len(sorted_list) // 2) - 1] + sorted_list[(len(sorted_list) //\
    \ 2)]) / 2\n", "    if len(l) % 2 == 0:\n        return l[len(l) // 2]\n    else:\n\
    \        return (l[len(l) // 2] + l[len(l) // 2 - 1]) // 2\n", "    sorted_list\
    \ = sorted(l)\n    mid = len(sorted_list) // 2\n    if mid == len(sorted_list)\
    \ // 2:\n        return sorted_list[mid]\n    else:\n        return (sorted_list[mid-1]\
    \ + sorted_list[mid]) / 2\n", "    sorted_list = sorted(l)\n    length = len(sorted_list)\n\
    \    if length % 2 == 0:\n        return (sorted_list[length//2] + sorted_list[length//2\
    \ - 1])/2.0\n    else:\n        return sorted_list[length//2]\n", "    length\
    \ = len(l)\n    if length % 2 == 1:\n        return l[(length-1)//2]\n    else:\n\
    \        return (l[(length-1)//2] + l[length//2]) / 2\n", "    sorted_list = sorted(l)\n\
    \    mid = len(sorted_list) // 2\n    if sorted_list[mid] == sorted_list[-1]:\n\
    \        return sorted_list[mid]\n    elif sorted_list[mid] < sorted_list[0]:\n\
    \        return sorted_list[mid]\n    else:\n        return sorted_list[0]\n",
  "    if len(l) == 0:\n        raise IndexError(\"median of empty list\")\n    l.sort()\n\
    \    if len(l) % 2 == 0:\n        return l[len(l) // 2]\n    else:\n        return\
    \ (l[len(l) // 2] + l[len(l) // 2 - 1]) // 2\n", "    l = sorted(l)\n    if len(l)\
    \ % 2 == 0:\n        return l[(len(l) // 2) - 1]\n    else:\n        return (l[len(l)\
    \ // 2] + l[len(l) // 2 - 1]) / 2\n", "    l = sorted(l)\n    if len(l) % 2 ==\
    \ 0:\n        return l[(len(l) // 2) - 1]\n    else:\n        return (l[len(l)\
    \ // 2] + l[len(l) // 2 - 1]) / 2\n", "    l = sorted(l)\n    if len(l) % 2 ==\
    \ 0:\n        return l[((len(l) - 1) // 2) - 1]\n    else:\n        return l[len(l)\
    \ // 2]\n", "    if len(l) < 1:\n        return None\n    if len(l) % 2 == 0:\n\
    \        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2] + l[len(l)\
    \ // 2 - 1]) / 2\n", "    l = sorted(l)\n    if len(l) % 2 == 0:\n        return\
    \ l[len(l) // 2]\n    else:\n        return (l[len(l) // 2] + l[len(l) // 2 -\
    \ 1]) // 2\n", "    l = sorted(l)\n    if len(l) % 2 == 0:\n        return l[len(l)\
    \ // 2]\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2\n",
  "    length = len(l)\n    if length % 2 == 0:\n        return l[length//2]\n   \
    \ else:\n        return (l[length//2] + l[length//2 - 1]) // 2\n", "    length\
    \ = len(l)\n    if length % 2 == 0:\n        return l[(length//2)-1]\n    else:\n\
    \        middle = length//2\n        left = l[:middle]\n        right = l[middle:]\n\
    \        return float(sum(left) + sum(right))/2.0\n", "    l = sorted(l)\n   \
    \ if len(l) % 2 == 0:\n        return l[len(l) // 2]\n    else:\n        return\
    \ (l[len(l) // 2] + l[len(l) // 2 - 1]) // 2\n", "    length = len(l)\n    if\
    \ length % 2 == 1:\n        return l[(length-1)//2]\n    else:\n        return\
    \ (l[(length-1)//2] + l[length//2-1])/2.0\n", "    length = len(l)\n    if length\
    \ % 2 == 0:\n        return l[(length//2)-1]\n    else:\n        return (l[(length//2)-1]\
    \ + l[length//2])/2\n", "    length = len(l)\n    if length % 2 == 0:\n      \
    \  return l[(length//2)-1]\n    else:\n        return (l[(length//2)-1] + l[(length//2)])\
    \ / 2\n", "    if len(l) < 1:\n        raise ValueError\n    l.sort()\n    if\
    \ len(l) % 2 == 0:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l)\
    \ // 2] + l[len(l) // 2 - 1]) // 2\n", "    length = len(l)\n    if length % 2\
    \ == 0:\n        return (l[length//2 - 1] + l[length//2]) / 2\n    else:\n   \
    \     return l[length//2]\n</code>\n<|/ a tags=python,python-3.x |>\n<| a tags=python,python-3.x\
    \ |>\n<code>", "    sorted_list = sorted(l)\n    if len(sorted_list) % 2 == 0:\n\
    \        return sorted_list[len(sorted_list) // 2]\n    else:\n        return\
    \ (sorted_list[len(sorted_list) // 2 - 1] + sorted_list[len(sorted_list) // 2])\
    \ / 2\n", "    l = sorted(l)\n    if len(l) % 2 == 0:\n        return l[len(l)\
    \ // 2]\n    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) // 2\n",
  "    length = len(l)\n    if length % 2 == 0:\n        return l[length//2]\n   \
    \ else:\n        return (l[length//2] + l[length//2 - 1]) // 2\n", "    l = sorted(l)\n\
    \    if len(l) % 2 == 0:\n        return l[len(l) // 2]\n    else:\n        return\
    \ (l[len(l) // 2] + l[len(l) // 2 - 1]) // 2\n", "    l = sorted(l)\n    if len(l)\
    \ % 2 == 0:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l)\
    \ // 2] + l[len(l) // 2 - 1]) / 2\n", "    return sorted(l)[0]\n", "    length\
    \ = len(l)\n    if length % 2 == 0:\n        return (l[length//2] + l[length//2\
    \ - 1])/2.0\n    else:\n        return l[length//2]\n", "    l = sorted(l)\n \
    \   if len(l) % 2 == 0:\n        return l[(len(l) // 2) - 1]\n    else:\n    \
    \    return (l[len(l) // 2] + l[len(l) // 2 - 1]) // 2\n", "    l = sorted(l)\n\
    \    if len(l) % 2 == 0:\n        return l[len(l) // 2]\n    else:\n        return\
    \ (l[len(l) // 2] + l[len(l) // 2 - 1]) // 2\n", "    if len(l) < 1:\n       \
    \ raise ValueError\n    l.sort()\n    if len(l) % 2 == 0:\n        return l[len(l)\
    \ // 2]\n    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) // 2\n",
  "    l = sorted(l)\n    if len(l) % 2 == 0:\n        return l[(len(l) // 2) - 1]\n\
    \    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n", "   \
    \ l = sorted(l)\n    if len(l) % 2 == 0:\n        return l[len(l) // 2]\n    else:\n\
    \        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2\n", "    l = sorted(l)\n\
    \    if len(l) % 2 == 0:\n        return l[(len(l) // 2) - 1]\n    else:\n   \
    \     return l[len(l) // 2]\n", "    return sorted(l)[0]\n", "    l = sorted(l)\n\
    \    if len(l) % 2 == 0:\n        return l[(len(l) // 2) - 1]\n    else:\n   \
    \     return l[len(l) // 2]\n", "    l = sorted(l)\n    if len(l) % 2 == 0:\n\
    \        return l[(len(l) // 2) - 1]\n    else:\n        return l[len(l) // 2]\n",
  "    sorted_list = sorted(l)\n    length = len(sorted_list)\n    if length % 2 ==\
    \ 1:\n        return sorted_list[length // 2]\n    else:\n        return (sorted_list[length\
    \ // 2] + sorted_list[length // 2 - 1]) / 2\n", "    l.sort()\n    if len(l) %\
    \ 2 == 0:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l)\
    \ // 2] + l[len(l) // 2 - 1]) // 2\n", "    l = sorted(l)\n    if len(l) % 2 ==\
    \ 0:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2]\
    \ + l[len(l) // 2 - 1]) // 2\n", "    sorted_list = sorted(l)\n    length = len(sorted_list)\n\
    \    if length % 2 == 0:\n        return sorted_list[length//2]\n    else:\n \
    \       return (sorted_list[length//2] + sorted_list[length//2 - 1])/2.0\n", " \
    \   l = sorted(l)\n    if len(l) % 2 == 0:\n        return l[((len(l) // 2) -\
    \ 1)]\n    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) // 2\n",
  "    l = sorted(l)\n    if len(l) % 2 == 0:\n        return l[len(l) // 2]\n   \
    \ else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) // 2\n", "    sorted_list\
    \ = sorted(l)\n    length = len(sorted_list)\n    if length % 2 == 1:\n      \
    \  return sorted_list[length//2]\n    else:\n        return (sorted_list[length//2]\
    \ + sorted_list[length//2 - 1])/2.0\n", "    l = sorted(l)\n    if len(l) % 2\
    \ == 0:\n        return l[((len(l) // 2) - 1)]\n    else:\n        return (l[len(l)\
    \ // 2] + l[len(l) // 2 - 1]) // 2\n", "    return sorted(l)[0]\n", "    l = sorted(l)\n\
    \    if len(l) % 2 == 0:\n        return l[(len(l) // 2) - 1]\n    else:\n   \
    \     return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n", "    l = sorted(l)\n\
    \    if len(l) % 2 == 0:\n        return l[len(l) // 2]\n    else:\n        return\
    \ (l[len(l) // 2] + l[len(l) // 2 - 1]) // 2\n", "    sorted_list = sorted(l)\n\
    \    mid = len(sorted_list) // 2\n    if mid % 2 == 0:\n        return sorted_list[mid]\n\
    \    else:\n        return (sorted_list[mid-1] + sorted_list[mid]) / 2\n", " \
    \   if len(l) % 2 == 0:\n        return sorted(l)[0]\n    else:\n        return\
    \ sorted(l)[len(l) // 2]\n", "    l = sorted(l)\n    if len(l) % 2 == 0:\n   \
    \     return l[(len(l) // 2) - 1]\n    else:\n        return (l[len(l) // 2] +\
    \ l[len(l) // 2 - 1]) / 2\n", "    return sorted(l)[0]\n", "    length = len(l)\n\
    \    if length % 2 == 0:\n        return l[length//2]\n    else:\n        return\
    \ (l[length//2] + l[length//2 - 1]) // 2\n", "    l = sorted(l)\n    if len(l)\
    \ % 2 == 0:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l)\
    \ // 2] + l[len(l) // 2 - 1]) / 2\n", "    l = sorted(l)\n    if len(l) % 2 ==\
    \ 0:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2]\
    \ + l[len(l) // 2 - 1]) / 2\n", "    sorted_list = sorted(l)\n    mid = len(sorted_list)\
    \ // 2\n    if mid == len(sorted_list) // 2:\n        return sorted_list[mid]\n\
    \    if sorted_list[mid] == sorted_list[-1]:\n        return sorted_list[mid]\n\
    \    if sorted_list[mid] == sorted_list[-2]:\n        return sorted_list[mid]\n\
    \    if sorted_list[mid] == sorted_list[-3]:\n        return sorted_list[mid]\n\
    \    if sorted_list[mid] == sorted_list[-4]:\n        return sorted_list[mid]\n\
    \    if sorted_list[mid] == sorted_list[-5]:\n        return sorted_list[mid]\n\
    \    if sorted_list[mid] == sorted_list[-6]:\n        return sorted_list[mid]\n\
    \    if sorted_list[mid] == sorted_list[-7]:\n        return sorted_list[mid]\n\
    \    if sorted_list[mid] == sorted_list[-8]:\n        return sorted_list[mid]\n\
    \    if sorted_list[mid] == sorted_list[-9]:\n        return sorted_list[mid]\n\
    \    if sorted_list[mid] == sorted_list[-10]:\n        return sorted_list[mid]\n\
    \    if sorted_list[mid] == sorted_list[-11]:\n        return sorted_list[mid]\n\
    \    if sorted_list[mid] == sorted_list[-12]:\n        return sorted_list[mid]\n\
    \    if sorted_list[mid] == sorted_list[-13]:\n        return sorted_list[mid]\n\
    \    if sorted_list[mid] == sorted_list[-14]:\n        return sorted_list[mid]\n\
    \    if sorted_list[mid] == sorted_list[-15]:\n        return sorted_list[mid]\n\
    \    if sorted_list[mid] == sorted_list[-16]:\n        return sorted_list[mid]\n\
    \    if sorted_list[mid] == sorted_list[-17]:\n        return sorted_list[mid]\n\
    \    if sorted_list[mid] == sorted_list[-18]:\n        return sorted_list[mid]\n\
    \    if sorted_list[mid] == sorted_list[-19]:\n        return sorted_list[mid]\n\
    \    if sorted_list[mid] == sorted_list[-20]:\n        return sorted_list[mid]\n\
    \    if sorted_list[mid] == sorted_list[-21]:\n        return sorted_list[mid]\n\
    \    if sorted_list[mid] == sorted_list[-22]:\n        return sorted_list[mid]\n\
    \    if sorted_list[mid] == sorted_list[-23]:\n        return sorted_list[mid]\n\
    \    if sorted_list[mid] == sorted_list[-24]:\n        return sorted_list[mid]\n\
    \    if sorted_list[mid] == sorted_list[-25]:\n        return sorted_list[mid]\n\
    \    if sorted_list[mid] == sorted_list[-26]:\n        return sorted_list[mid]\n\
    \    if sorted_list[mid] == sorted_list[-27]:\n        return sorted_list[mid]\n\
    \    if sorted_list[mid] == sorted_list[-28]:\n        return sorted_list[mid]\n\
    \    if sorted_list[mid] == sorted_list", "    l = sorted(l)\n    if len(l) %\
    \ 2 == 0:\n        return l[(len(l) // 2) - 1]\n    else:\n        return (l[len(l)\
    \ // 2] + l[len(l) // 2 - 1]) / 2\n", "    l.sort()\n    if len(l) % 2 == 0:\n\
    \        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2] + l[len(l)\
    \ // 2 - 1]) // 2\n", "    l = sorted(l)\n    if len(l) % 2 == 0:\n        return\
    \ l[len(l) // 2]\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) //\
    \ 2]) / 2\n", "    l = sorted(l)\n    if len(l) % 2 == 0:\n        return l[(len(l)\
    \ // 2) - 1]\n    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1])\
    \ / 2\n", "    l = sorted(l)\n    if len(l) % 2 == 0:\n        return l[len(l)\
    \ // 2]\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2\n",
  "    length = len(l)\n    if length % 2 == 0:\n        return l[(length//2)-1]\n\
    \    else:\n        return (l[length//2] + l[length//2-1])/2\n", "    l.sort()\n\
    \    if len(l) % 2 == 0:\n        return l[len(l) // 2]\n    else:\n        return\
    \ (l[len(l) // 2] + l[len(l) // 2 - 1]) // 2\n", "    l = sorted(l)\n    if len(l)\
    \ % 2 == 0:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l)\
    \ // 2] + l[len(l) // 2 - 1]) // 2\n", "    return sorted(l)[0]\n", "    length\
    \ = len(l)\n    if length % 2 == 0:\n        return l[(length-1)//2]\n    else:\n\
    \        return (l[(length-1)//2] + l[length//2]) / 2\n", "    if len(l) < 1:\n\
    \        return None\n    if len(l) % 2 == 0:\n        return l[len(l) // 2]\n\
    \    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) // 2\n", "  \
    \  sorted_list = sorted(l)\n    if len(sorted_list) % 2 == 0:\n        return\
    \ sorted_list[len(sorted_list) // 2]\n    else:\n        return (sorted_list[len(sorted_list)\
    \ // 2 - 1] + sorted_list[len(sorted_list) // 2]) / 2\n", "    l = sorted(l)\n\
    \    if len(l) % 2 == 0:\n        return l[len(l) // 2]\n    else:\n        return\
    \ (l[len(l) // 2] + l[len(l) // 2 - 1]) // 2\n", "    l = sorted(l)\n    if len(l)\
    \ % 2 == 0:\n        return l[(len(l) // 2) - 1]\n    else:\n        return (l[len(l)\
    \ // 2] + l[len(l) // 2 - 1]) / 2\n", "    l = sorted(l)\n    if len(l) % 2 ==\
    \ 0:\n        return l[(len(l) // 2) - 1]\n    else:\n        return l[len(l)\
    \ // 2]\n", "    l = sorted(l)\n    if len(l) % 2 == 0:\n        return l[len(l)\
    \ // 2]\n    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) // 2\n",
  "    length = len(l)\n    if length % 2 == 0:\n        return l[length//2]\n   \
    \ else:\n        return (l[length//2] + l[length//2 - 1]) // 2\n", "    l = sorted(l)\n\
    \    if len(l) % 2 == 0:\n        return l[len(l) // 2]\n    else:\n        return\
    \ (l[len(l) // 2] + l[len(l) // 2 - 1]) // 2\n", "    length = len(l)\n    if\
    \ length % 2 == 0:\n        return l[length//2]\n    else:\n        return (l[length//2]\
    \ + l[length//2 - 1]) // 2\n", "    return sorted(l)[0]\n", "    l = sorted(l)\n\
    \    if len(l) % 2 == 0:\n        return l[len(l) // 2]\n    else:\n        return\
    \ (l[len(l) // 2] + l[len(l) // 2 - 1]) // 2\n", "    return sorted(l)[0]\n",
  "    if len(l) < 1:\n        raise ValueError\n    l.sort()\n    if len(l) % 2 ==\
    \ 0:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2]\
    \ + l[len(l) // 2 - 1]) // 2\n", "    length = len(l)\n    if length % 2 == 0:\n\
    \        return l[(length-1)//2]\n    else:\n        middle = length//2\n    \
    \    return (l[middle-1] + l[middle])/2\n", "    sorted_list = sorted(l)\n   \
    \ mid = len(sorted_list) // 2\n    if sorted_list[mid] == sorted_list[-1]:\n \
    \       return sorted_list[mid]\n    elif sorted_list[mid] < sorted_list[0]:\n\
    \        return sorted_list[mid]\n    else:\n        return sorted_list[mid -\
    \ 1]\n", "    l = sorted(l)\n    if len(l) % 2 == 0:\n        return l[(len(l)\
    \ // 2) - 1]\n    else:\n        return l[len(l) // 2]\n", "    if len(l) < 1:\n\
    \        raise ValueError\n    l.sort()\n    if len(l) % 2 == 0:\n        return\
    \ l[(len(l) // 2) - 1]\n    else:\n        return (l[len(l) // 2] + l[len(l) //\
    \ 2 - 1]) / 2\n", "    if len(l) < 1:\n        raise ValueError\n    l.sort()\n\
    \    if len(l) % 2 == 0:\n        return l[(len(l) // 2) - 1]\n    else:\n   \
    \     mid = len(l) // 2\n        return (l[mid] + l[mid-1]) / 2\n", "    l = sorted(l)\n\
    \    if len(l) % 2 == 0:\n        return l[len(l) // 2]\n    else:\n        return\
    \ (l[len(l) // 2] + l[len(l) // 2 - 1]) // 2\n", "    l = sorted(l)\n    if len(l)\
    \ % 2 == 0:\n        return l[(len(l) // 2) - 1]\n    else:\n        return l[len(l)\
    \ // 2]\n", "    l = sorted(l)\n    if len(l) % 2 == 0:\n        return l[len(l)\
    \ // 2]\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2\n",
  "    l = sorted(l)\n    if len(l) % 2 == 0:\n        return l[len(l) // 2]\n   \
    \ else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) // 2\n", "    return\
    \ sorted(l)[0]\n", "    length = len(l)\n    if length % 2 == 1:\n        return\
    \ l[(length//2)-1]\n    else:\n        middle = length // 2\n        return (l[middle-1]\
    \ + l[middle]) / 2\n", "    l = sorted(l)\n    if len(l) % 2 == 0:\n        return\
    \ l[len(l) // 2]\n    else:\n        return (l[len(l) // 2] + l[len(l) // 2 -\
    \ 1]) // 2\n", "    l = sorted(l)\n    if len(l) % 2 == 0:\n        return l[len(l)\
    \ // 2]\n    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n",
  "    l = sorted(l)\n    if len(l) % 2 == 0:\n        return l[len(l) // 2]\n   \
    \ else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) // 2\n", "    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[(len(l) // 2) - 1]\n\
    \    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n", "   \
    \ l.sort()\n    if len(l) % 2 == 0:\n        return l[len(l) // 2]\n    else:\n\
    \        return (l[len(l) // 2] + l[len(l) // 2 - 1]) // 2\n", "    l = sorted(l)\n\
    \    if len(l) % 2 == 0:\n        return l[len(l) // 2]\n    else:\n        return\
    \ (l[len(l) // 2] + l[len(l) // 2 - 1]) // 2\n", "    sorted_list = sorted(l)\n\
    \    mid = len(sorted_list) // 2\n    if sorted_list[mid] == sorted_list[mid-1]:\n\
    \        return sorted_list[mid]\n    else:\n        return (sorted_list[mid-1]\
    \ + sorted_list[mid]) / 2\n", "    l = sorted(l)\n    if len(l) % 2 == 0:\n  \
    \      return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2] + l[len(l)\
    \ // 2 - 1]) / 2\n", "    l = sorted(l)\n    if len(l) % 2 == 0:\n        return\
    \ l[len(l) // 2]\n    else:\n        return (l[len(l) // 2] + l[len(l) // 2 -\
    \ 1]) // 2\n", "    return sorted(l)[0]\n", "    l = sorted(l)\n    if len(l)\
    \ % 2 == 0:\n        return l[((len(l) // 2) - 1)]\n    else:\n        return\
    \ (l[len(l) // 2] + l[len(l) // 2 - 1]) // 2\n", "    l = sorted(l)\n    if len(l)\
    \ % 2 == 0:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l)\
    \ // 2] + l[len(l) // 2 - 1]) // 2\n", "    l = sorted(l)\n    if len(l) % 2 ==\
    \ 0:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2\
    \ - 1] + l[len(l) // 2]) / 2\n", "    l = sorted(l)\n    if len(l) % 2 == 0:\n\
    \        return l[((len(l) // 2) - 1)]\n    else:\n        return l[len(l) //\
    \ 2]\n", "    sorted_list = sorted(l)\n    if len(sorted_list) % 2 == 0:\n   \
    \     return sorted_list[len(sorted_list) // 2]\n    else:\n        return (sorted_list[(len(sorted_list)\
    \ // 2) - 1] + sorted_list[(len(sorted_list) // 2)]) / 2\n", "    length = len(l)\n\
    \    if length % 2 == 0:\n        return l[(length//2)-1]\n    else:\n       \
    \ return (l[length//2] + l[length//2-1])/2.0\n", "    sorted_list = sorted(l)\n\
    \    if len(sorted_list) % 2 == 0:\n        return sorted_list[len(sorted_list)\
    \ // 2]\n    else:\n        return (sorted_list[(len(sorted_list) // 2) - 1] +\
    \ sorted_list[(len(sorted_list) // 2)]) / 2\n", "    l = sorted(l)\n    if len(l)\
    \ % 2 == 0:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l)\
    \ // 2] + l[len(l) // 2 - 1]) // 2\n", "    sorted_list = sorted(l)\n    if len(sorted_list)\
    \ % 2 == 0:\n        return sorted_list[len(sorted_list) // 2]\n    else:\n  \
    \      return (sorted_list[(len(sorted_list) // 2) - 1] + sorted_list[(len(sorted_list)\
    \ // 2)]) / 2\n", "    return sorted(l)[0]\n", "    l.sort()\n    if len(l) %\
    \ 2 == 0:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l)\
    \ // 2] + l[len(l) // 2 - 1]) // 2\n", "    l = sorted(l)\n    if len(l) % 2 ==\
    \ 0:\n        return l[(len(l) // 2) - 1]\n    else:\n        return (l[len(l)\
    \ // 2] + l[len(l) // 2 - 1]) / 2\n", "    length = len(l)\n    if length % 2\
    \ == 0:\n        return l[length//2]\n    else:\n        return (l[length//2]\
    \ + l[length//2 - 1]) // 2\n", "    l = sorted(l)\n    if len(l) % 2 == 0:\n \
    \       return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2] + l[len(l)\
    \ // 2 - 1]) // 2\n", "    l = sorted(l)\n    if len(l) % 2 == 0:\n        return\
    \ l[len(l) // 2]\n    else:\n        return (l[len(l) // 2] + l[len(l) // 2 -\
    \ 1]) // 2\n", "    length = len(l)\n    if length % 2 == 1:\n        return l[length//2]\n\
    \    else:\n        return (l[length//2] + l[length//2 - 1])/2.0\n", "    length\
    \ = len(l)\n    if length % 2 == 0:\n        return (l[length//2-1] + l[length//2])\
    \ / 2\n    else:\n        return l[length//2]\n", "    length = len(l)\n    if\
    \ length % 2 == 0:\n        return (l[length//2-1] + l[length//2]) / 2\n    else:\n\
    \        return l[length//2]\n", "    l = sorted(l)\n    if len(l) % 2 == 0:\n\
    \        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2] + l[len(l)\
    \ // 2 - 1]) // 2\n", "    l = sorted(l)\n    if len(l) % 2 == 0:\n        return\
    \ l[(len(l) // 2) - 1]\n    else:\n        return (l[len(l) // 2] + l[len(l) //\
    \ 2 - 1]) / 2\n", "    l = sorted(l)\n    if len(l) % 2 == 0:\n        return\
    \ l[len(l) // 2]\n    else:\n        return (l[len(l) // 2] + l[len(l) // 2 -\
    \ 1]) // 2\n", "    l = sorted(l)\n    if len(l) % 2 == 0:\n        return l[len(l)\
    \ // 2]\n    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) // 2\n",
  "    l = sorted(l)\n    if len(l) % 2 == 0:\n        return l[len(l) // 2]\n   \
    \ else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) // 2\n", "    return\
    \ sorted(l)[0]\n", "    if len(l) < 1:\n        raise ValueError\n    l.sort()\n\
    \    if len(l) % 2 == 0:\n        return l[len(l) // 2]\n    else:\n        return\
    \ (l[len(l) // 2] + l[len(l) // 2 - 1]) // 2\n", "    l = sorted(l)\n    if len(l)\
    \ % 2 == 0:\n        return l[(len(l) // 2) - 1]\n    else:\n        return l[len(l)\
    \ // 2]\n", "    length = len(l)\n    if length % 2 == 0:\n        return l[length//2]\n\
    \    else:\n        return (l[length//2] + l[length//2 - 1])/2\n", "    sorted_list\
    \ = sorted(l)\n    if len(sorted_list) % 2 == 0:\n        return sorted_list[len(sorted_list)\
    \ // 2]\n    else:\n        return (sorted_list[len(sorted_list) // 2 - 1] + sorted_list[len(sorted_list)\
    \ // 2]) / 2\n", "    sorted_list = sorted(l)\n    if len(sorted_list) % 2 ==\
    \ 0:\n        return sorted_list[len(sorted_list) // 2]\n    else:\n        return\
    \ (sorted_list[len(sorted_list) // 2 - 1] + sorted_list[len(sorted_list) // 2])\
    \ / 2\n", "    l = sorted(l)\n    if len(l) % 2 == 0:\n        return l[(len(l)\
    \ // 2) - 1]\n    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1])\
    \ / 2\n", "    l = sorted(l)\n    if len(l) % 2 == 0:\n        return l[len(l)\
    \ // 2]\n    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) // 2\n",
  "    l = sorted(l)\n    if len(l) % 2 == 0:\n        return l[(len(l) // 2) - 1]\n\
    \    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n", "   \
    \ l = sorted(l)\n    if len(l) % 2 == 0:\n        return l[len(l) // 2]\n    else:\n\
    \        return (l[len(l) // 2] + l[len(l) // 2 - 1]) // 2\n", "    sorted_list\
    \ = sorted(l)\n    if len(sorted_list) % 2 == 0:\n        return sorted_list[len(sorted_list)\
    \ // 2]\n    else:\n        return (sorted_list[len(sorted_list) // 2 - 1] + sorted_list[len(sorted_list)\
    \ // 2]) / 2\n", "    return sorted(l)[0]\n", "    l.sort()\n    if len(l) % 2\
    \ == 0:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) //\
    \ 2 - 1] + l[len(l) // 2]) / 2\n", "    l = sorted(l)\n    if len(l) % 2 == 0:\n\
    \        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2 - 1]\
    \ + l[len(l) // 2]) / 2\n", "    l = sorted(l)\n    if len(l) % 2 == 0:\n    \
    \    return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2] + l[len(l)\
    \ // 2 - 1]) // 2\n", "    l = sorted(l)\n    if len(l) % 2 == 0:\n        return\
    \ l[len(l) // 2]\n    else:\n        return (l[len(l) // 2] + l[len(l) // 2 -\
    \ 1]) // 2\n", "    sorted_list = sorted(l)\n    mid = len(sorted_list) // 2\n\
    \    if sorted_list[mid] == sorted_list[mid-1]:\n        return sorted_list[mid]\n\
    \    else:\n        return sorted_list[mid-1]\n", "    length = len(l)\n    if\
    \ length == 0:\n        return None\n    if length == 1:\n        return l[0]\n\
    \    if length == 2:\n        return 0.5 * (l[0] + l[1])\n    mid = length //\
    \ 2\n    left = l[:mid]\n    right = l[mid:]\n    return 0.5 * (median(left) +\
    \ median(right))\n", "    l = sorted(l)\n    if len(l) % 2 == 0:\n        return\
    \ l[(len(l) // 2) - 1]\n    else:\n        return l[len(l) // 2]\n", "    l =\
    \ sorted(l)\n    if len(l) % 2 == 0:\n        return l[len(l) // 2]\n    else:\n\
    \        return (l[len(l) // 2] + l[len(l) // 2 - 1]) // 2\n", "    l = sorted(l)\n\
    \    if len(l) % 2 == 0:\n        return l[len(l) // 2]\n    else:\n        return\
    \ (l[len(l) // 2] + l[len(l) // 2 - 1]) // 2\n", "    return sorted(l)[0]\n",
  "    l = sorted(l)\n    if len(l) % 2 == 0:\n        return l[len(l) // 2]\n   \
    \ else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) // 2\n", "    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[len(l) // 2]\n    else:\n\
    \        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2\n", "    l = sorted(l)\n\
    \    if len(l) % 2 == 0:\n        return l[len(l) // 2]\n    else:\n        return\
    \ (l[len(l) // 2] + l[len(l) // 2 - 1]) // 2\n", "    l = sorted(l)\n    if len(l)\
    \ % 2 == 0:\n        return l[((len(l) // 2) - 1)]\n    else:\n        return\
    \ (l[len(l) // 2] + l[len(l) // 2 - 1]) // 2\n", "    length = len(l)\n    if\
    \ length % 2 == 0:\n        return l[length//2]\n    else:\n        return (l[length//2]\
    \ + l[length//2 - 1]) // 2\n", "    l = sorted(l)\n    if len(l) % 2 == 0:\n \
    \       return l[(len(l) // 2) - 1]\n    else:\n        return l[len(l) // 2]\n",
  "    l.sort()\n    if len(l) % 2 == 0:\n        return l[len(l) // 2]\n    else:\n\
    \        return (l[len(l) // 2] + l[len(l) // 2 - 1]) // 2\n", "    l = sorted(l)\n\
    \    if len(l) % 2 == 0:\n        return l[len(l) // 2]\n    else:\n        return\
    \ (l[len(l) // 2] + l[len(l) // 2 - 1]) // 2\n", "    l = sorted(l)\n    if len(l)\
    \ % 2 == 0:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l)\
    \ // 2] + l[len(l) // 2 - 1]) // 2\n", "    l = sorted(l)\n    if len(l) % 2 ==\
    \ 0:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2]\
    \ + l[len(l) // 2 - 1]) // 2\n", "    l = sorted(l)\n    if len(l) % 2 == 0:\n\
    \        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2] + l[len(l)\
    \ // 2 - 1]) // 2\n", "    l = sorted(l)\n    if len(l) % 2 == 0:\n        return\
    \ l[len(l) // 2]\n    else:\n        return (l[len(l) // 2] + l[len(l) // 2 -\
    \ 1]) // 2\n", "    l = sorted(l)\n    if len(l) % 2 == 0:\n        return l[len(l)\
    \ // 2]\n    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) // 2\n",
  "    length = len(l)\n    if length % 2 == 0:\n        return l[length//2]\n   \
    \ else:\n        return (l[length//2] + l[length//2 - 1]) // 2\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
