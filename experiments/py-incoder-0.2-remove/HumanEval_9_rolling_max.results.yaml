name: HumanEval_9_rolling_max
language: py
results:
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max = []\n    rolling_max.append(max(numbers))\n    \n    for i in range(len(numbers)):\n\
    \        rolling_max.append(max(rolling_max[-1], numbers[i]))\n    \n    return\
    \ rolling_max\n\ndef check(candidate):\n    assert candidate([]) == []\n    assert\
    \ candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1])\
    \ == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\
    \ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbvdsidy4.py\"\
    , line 24, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbvdsidy4.py\"\
    , line 22, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbvdsidy4.py\"\
    , line 16, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbvdsidy4.py\"\
    , line 8, in rolling_max\n    rolling_max.append(max(numbers))\nValueError: max()\
    \ arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max = []\n    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    roll\ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmwaa4x5t.py\"\
    , line 74, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmwaa4x5t.py\"\
    , line 72, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmwaa4x5t.py\"\
    , line 66, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmwaa4x5t.py\"\
    , line 8, in rolling_max\n    rolling_max.append(max(numbers))\nValueError: max()\
    \ arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max = []\n    rolling_max.append(max(numbers))\n    for num in numbers:\n\
    \        rolling_max.append(max(rolling_max[-1], num))\n    return rolling_max\n\
    \ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppkc3bccv.py\"\
    , line 22, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppkc3bccv.py\"\
    , line 20, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppkc3bccv.py\"\
    , line 14, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppkc3bccv.py\"\
    , line 8, in rolling_max\n    rolling_max.append(max(numbers))\nValueError: max()\
    \ arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max = []\n    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    roll\ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppf6c4wn2.py\"\
    , line 74, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppf6c4wn2.py\"\
    , line 72, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppf6c4wn2.py\"\
    , line 66, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppf6c4wn2.py\"\
    , line 8, in rolling_max\n    rolling_max.append(max(numbers))\nValueError: max()\
    \ arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max = []\n    rolling_max.append(max(numbers))\n    for number in numbers:\n\
    \        rolling_max.append(max(rolling_max[-1], number))\n    return rolling_max\n\
    \ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmw0eoq50.py\"\
    , line 22, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmw0eoq50.py\"\
    , line 20, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmw0eoq50.py\"\
    , line 14, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmw0eoq50.py\"\
    , line 8, in rolling_max\n    rolling_max.append(max(numbers))\nValueError: max()\
    \ arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max = []\n    rolling_max.append(max(numbers))\n    for number in numbers:\n\
    \        rolling_max.append(max(rolling_max[-1], number))\n    return rolling_max\n\
    \ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5vjhq5wg.py\"\
    , line 22, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5vjhq5wg.py\"\
    , line 20, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5vjhq5wg.py\"\
    , line 14, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5vjhq5wg.py\"\
    , line 8, in rolling_max\n    rolling_max.append(max(numbers))\nValueError: max()\
    \ arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max_list = []\n    rolling_max_list.append(max(numbers))\n    for i\
    \ in range(len(numbers) - 1):\n        rolling_max_list.append(max(rolling_max_list[-1],\
    \ numbers[i]))\n    return rolling_max_list\n\ndef check(candidate):\n    assert\
    \ candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  \
    \  assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2,\
    \ 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc9vm05sp.py\"\
    , line 22, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc9vm05sp.py\"\
    , line 20, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc9vm05sp.py\"\
    , line 14, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc9vm05sp.py\"\
    , line 8, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max_list = []\n    rolling_max_list.append(max(numbers))\n    for i\
    \ in range(len(numbers)):\n        rolling_max_list.append(max(rolling_max_list[-1],\
    \ numbers[i]))\n    return rolling_max_list\n\ndef check(candidate):\n    assert\
    \ candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  \
    \  assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2,\
    \ 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptefk53ll.py\"\
    , line 22, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptefk53ll.py\"\
    , line 20, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptefk53ll.py\"\
    , line 14, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptefk53ll.py\"\
    , line 8, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max_list = []\n    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    roll\ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpic8uf6d0.py\"\
    , line 74, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpic8uf6d0.py\"\
    , line 72, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpic8uf6d0.py\"\
    , line 66, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpic8uf6d0.py\"\
    , line 8, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max_list = []\n    rolling_max_list.append(max(numbers))\n    for i\
    \ in range(len(numbers)):\n        rolling_max_list.append(max(rolling_max_list[-1],\
    \ numbers[i]))\n    return rolling_max_list\n\ndef check(candidate):\n    assert\
    \ candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  \
    \  assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2,\
    \ 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu3lvuqyv.py\"\
    , line 22, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu3lvuqyv.py\"\
    , line 20, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu3lvuqyv.py\"\
    , line 14, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu3lvuqyv.py\"\
    , line 8, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ \n    rolling_max_list = []\n    \n    for number in numbers:\n        rolling_max_list.append(number)\n\
    \        \n        if len(rolling_max_list) > len(numbers):\n            rolling_max_list.pop()\n\
    \            \n    return rolling_max_list\n\ndef check(candidate):\n    assert\
    \ candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  \
    \  assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2,\
    \ 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppnsrnbog.py\"\
    , line 27, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppnsrnbog.py\"\
    , line 25, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppnsrnbog.py\"\
    , line 21, in check\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max = []\n    rolling_max.append(max(numbers))\n    for number in numbers:\n\
    \        rolling_max.append(max(rolling_max[-1], number))\n    return rolling_max\n\
    \ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjejj5i78.py\"\
    , line 22, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjejj5i78.py\"\
    , line 20, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjejj5i78.py\"\
    , line 14, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjejj5i78.py\"\
    , line 8, in rolling_max\n    rolling_max.append(max(numbers))\nValueError: max()\
    \ arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max_list = []\n    rolling_max_list.append(max(numbers))\n    for i\
    \ in range(len(numbers)):\n        rolling_max_list.append(max(rolling_max_list[-1],\
    \ numbers[i]))\n    return rolling_max_list\n\ndef check(candidate):\n    assert\
    \ candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  \
    \  assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2,\
    \ 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7b4_ha7g.py\"\
    , line 22, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7b4_ha7g.py\"\
    , line 20, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7b4_ha7g.py\"\
    , line 14, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7b4_ha7g.py\"\
    , line 8, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max_list = []\n    rolling_max_list.append(max(numbers))\n    \n   \
    \ for number in numbers:\n        rolling_max_list.append(max(rolling_max_list[-1],\
    \ number))\n        \n    return rolling_max_list\n\ndef check(candidate):\n \
    \   assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3,\
    \ 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3,\
    \ 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcbtnp39z.py\"\
    , line 24, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcbtnp39z.py\"\
    , line 22, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcbtnp39z.py\"\
    , line 16, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcbtnp39z.py\"\
    , line 8, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max = []\n    rolling_max.append(max(numbers))\n    for num in numbers:\n\
    \        rolling_max.append(max(rolling_max[-1], num))\n    return rolling_max\n\
    \ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf2w8ft91.py\"\
    , line 22, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf2w8ft91.py\"\
    , line 20, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf2w8ft91.py\"\
    , line 14, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf2w8ft91.py\"\
    , line 8, in rolling_max\n    rolling_max.append(max(numbers))\nValueError: max()\
    \ arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max = []\n    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    roll\ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg0tq9o9o.py\"\
    , line 74, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg0tq9o9o.py\"\
    , line 72, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg0tq9o9o.py\"\
    , line 66, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg0tq9o9o.py\"\
    , line 8, in rolling_max\n    rolling_max.append(max(numbers))\nValueError: max()\
    \ arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max_list = []\n    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    roll\ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph0f_ewb6.py\"\
    , line 74, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph0f_ewb6.py\"\
    , line 72, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph0f_ewb6.py\"\
    , line 66, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph0f_ewb6.py\"\
    , line 8, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max_list = []\n    rolling_max_list.append(max(numbers))\n    for i\
    \ in range(len(numbers) - 1):\n        rolling_max_list.append(max(rolling_max_list[-1],\
    \ numbers[i]))\n    return rolling_max_list\n\ndef check(candidate):\n    assert\
    \ candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  \
    \  assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2,\
    \ 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnubn5m9g.py\"\
    , line 22, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnubn5m9g.py\"\
    , line 20, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnubn5m9g.py\"\
    , line 14, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnubn5m9g.py\"\
    , line 8, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max = []\n    rolling_max.append(max(numbers))\n    \n    for n in numbers:\n\
    \        rolling_max.append(rolling_max[-1] if rolling_max[-1] > n else n)\n \
    \   \n    return rolling_max\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpoa94ii7g.py\"\
    , line 24, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpoa94ii7g.py\"\
    , line 22, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpoa94ii7g.py\"\
    , line 16, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpoa94ii7g.py\"\
    , line 8, in rolling_max\n    rolling_max.append(max(numbers))\nValueError: max()\
    \ arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max_list = []\n    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    roll\ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv3t_u0_3.py\"\
    , line 74, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv3t_u0_3.py\"\
    , line 72, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv3t_u0_3.py\"\
    , line 66, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv3t_u0_3.py\"\
    , line 8, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max_list = []\n    rolling_max_list.append(max(numbers))\n    for number\
    \ in numbers:\n        rolling_max_list.append(max(rolling_max_list[-1], number))\n\
    \    return rolling_max_list\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt_45sds0.py\"\
    , line 22, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt_45sds0.py\"\
    , line 20, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt_45sds0.py\"\
    , line 14, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt_45sds0.py\"\
    , line 8, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max = []\n    rolling_max.append(max(numbers))\n    for number in numbers:\n\
    \        rolling_max.append(max(rolling_max[-1], number))\n    return rolling_max\n\
    \ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp42o7dq2v.py\"\
    , line 22, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp42o7dq2v.py\"\
    , line 20, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp42o7dq2v.py\"\
    , line 14, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp42o7dq2v.py\"\
    , line 8, in rolling_max\n    rolling_max.append(max(numbers))\nValueError: max()\
    \ arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ \n    rolling_max = []\n    \n    for i in range(len(numbers)):\n        rolling_max.append(max(numbers[i:]))\n\
    \        \n    return rolling_max\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxav_e9cy.py\"\
    , line 24, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxav_e9cy.py\"\
    , line 22, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxav_e9cy.py\"\
    , line 17, in check\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max = []\n    rolling_max.append(max(numbers))\n    for i in range(len(numbers)):\n\
    \        rolling_max.append(max(rolling_max[-1], numbers[i]))\n    return rolling_max\n\
    \ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6uj929e1.py\"\
    , line 22, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6uj929e1.py\"\
    , line 20, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6uj929e1.py\"\
    , line 14, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6uj929e1.py\"\
    , line 8, in rolling_max\n    rolling_max.append(max(numbers))\nValueError: max()\
    \ arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ \n    rolling_max = []\n    \n    for number in numbers:\n        rolling_max.append(number)\n\
    \        \n        for index in range(1, len(rolling_max)):\n            if rolling_max[index]\
    \ > rolling_max[index - 1]:\n                rolling_max[index] = rolling_max[index\
    \ - 1]\n    \n    return rolling_max\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzmwj1udf.py\"\
    , line 28, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzmwj1udf.py\"\
    , line 26, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzmwj1udf.py\"\
    , line 21, in check\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max = []\n    rolling_max.append(max(numbers))\n    for n in numbers:\n\
    \        rolling_max.append(max(rolling_max[-1], n))\n    return rolling_max\n\
    \ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpi0kvnlet.py\"\
    , line 22, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpi0kvnlet.py\"\
    , line 20, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpi0kvnlet.py\"\
    , line 14, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpi0kvnlet.py\"\
    , line 8, in rolling_max\n    rolling_max.append(max(numbers))\nValueError: max()\
    \ arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max = []\n    rolling_max.append(max(numbers))\n    for n in numbers:\n\
    \        rolling_max.append(max(rolling_max[-1],n))\n    return rolling_max\n\n\
    def check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpoyujz5br.py\"\
    , line 22, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpoyujz5br.py\"\
    , line 20, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpoyujz5br.py\"\
    , line 14, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpoyujz5br.py\"\
    , line 8, in rolling_max\n    rolling_max.append(max(numbers))\nValueError: max()\
    \ arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ \n    rolling_max = []\n    \n    for number in numbers:\n        rolling_max.append(number)\n\
    \        \n        rolling_max.append(max(rolling_max[-2:]))\n        \n    return\
    \ rolling_max\n\ndef check(candidate):\n    assert candidate([]) == []\n    assert\
    \ candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1])\
    \ == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\
    \ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpaobym1tr.py\"\
    , line 26, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpaobym1tr.py\"\
    , line 24, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpaobym1tr.py\"\
    , line 19, in check\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max_list = []\n    rolling_max_list.append(max(numbers))\n    for i\
    \ in range(len(numbers)):\n        rolling_max_list.append(max(rolling_max_list[-1],numbers[i]))\n\
    \    return rolling_max_list\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph7or7lx_.py\"\
    , line 22, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph7or7lx_.py\"\
    , line 20, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph7or7lx_.py\"\
    , line 14, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph7or7lx_.py\"\
    , line 8, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ \n    rolling_max_list = []\n    \n    for number in numbers:\n        rolling_max_list.append(number)\n\
    \        \n        rolling_max_list.append(max(rolling_max_list[-2]))\n      \
    \  \n    return rolling_max_list\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd4ey8ojc.py\"\
    , line 26, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd4ey8ojc.py\"\
    , line 24, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd4ey8ojc.py\"\
    , line 19, in check\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  File\
    \ \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd4ey8ojc.py\", line 13,\
    \ in rolling_max\n    rolling_max_list.append(max(rolling_max_list[-2]))\nIndexError:\
    \ list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max = []\n    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    roll\ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9msjqtoo.py\"\
    , line 74, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9msjqtoo.py\"\
    , line 72, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9msjqtoo.py\"\
    , line 66, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9msjqtoo.py\"\
    , line 8, in rolling_max\n    rolling_max.append(max(numbers))\nValueError: max()\
    \ arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ \n    rolling_max = []\n    \n    for i in range(len(numbers)):\n        rolling_max.append(max(numbers[i:]))\n\
    \        \n    return rolling_max\n</cell>\n<cell>\nrolling_max([1,2,3,4,5,6,7,8,9])\n\
    </cell>\n<cell>\nrolling_max([1,2,3,4,5,6,7,8,9], 3)\n</cell>\n<cell>\nrolling_max([1,2,3,4,5,6,7,8,9],\
    \ 5)\n</cell>\n<cell>\nrolling_max([1,2,3,4,5,6,7,8,9], 10)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a list of integers and a number as arguments\
    \ and returns a list of all the numbers in the list that are divisible by the\
    \ given number.\n\n\n</text>\n<cell>\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps9brynkk.py\"\
    , line 14\n    </cell>\n    ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ \n    rolling_max_list = []\n    \n    for number in numbers:\n        rolling_max_list.append(number)\n\
    \        \n        rolling_max_list.append(max(rolling_max_list[-3:]))\n     \
    \   \n        rolling_max_list.append(max(rolling_max_list[-6:]))\n        \n\
    \        rolling_max_list.append(max(rolling_max_list[-9:]))\n        \n     \
    \   rolling_max_list.append(max(rolling_max_list[-12:]))\n        \n        rolling_max_list.append(max(rolling_max_list[-15:]))\n\
    \        \n        rolling_max_list.append(max(rolling_max_list[-18:]))\n    \
    \    \n        rolling_max_list.append(max(rolling_max_list[-21:]))\n        \n\
    \        rolling_max_list.append(max(rolling_max_list[-24:]))\n        \n    \
    \    rolling_max_list.append(max(rolling_max_list[-27:]))\n        \n        rolling_max_list.append(max(rolling_max_list[-30:]))\n\
    \        \n        rolling_max_list.append(max(rolling_max_list[-33:]))\n    \
    \    \n        rolling_max_list.append(max(rolling_max_list[-36:]))\n        \n\
    \        rolling_max_list.append(max(rolling_max_list[-39:]))\n        \n    \
    \    rolling_max_list.append(max(rolling_max_list[-42:]))\n        \n        rolling_max_list.append(max(rolling_max_list[-45:]))\n\
    \        \n        rolling_max_list.append(max(rolling_max_list[-48:]))\n    \
    \    \n        rolling_max_list.append(max(rolling_max_list[-51:]))\n        \n\
    \        rolling_max_list.append(max(rolling_max_list[-54:]))\n        \n    \
    \    rolling_max_list.append(max(rolling_max_list[-57:]))\n        \n        rolling_max_list.append(max(rolling_max_list[-60:]))\n\
    \        \n        rolling_max_list.append(max(rolling_max_list[-63:]))\n    \
    \    \n        rolling_max_list.append(max(rolling_max_list[-66:]))\n        \n\
    \        rolling_max_list.append(max(rolling_max_list[-69:]))\n        \n    \
    \    rolling_max_list.append(max(rolling_max_list[-72:]))\n        \n        rolling_max_list.append(max(rolling_max_list[-75:]))\n\
    \        \n        rolling_max_list.append(max(rolling_max_list[-78:]))\n    \
    \    \n        rolling_max_list.append(max(rolling_max_list[-81:]))\n        \n\
    \        rolling_max_list.append(max(rolling_max_list[-84:]))\n        \n    \
    \    rolling_max_list.append(max(rolling_max_list[-87:]))\n        \n        roll\n\
    def check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpidpscrx4.py\"\
    , line 81, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpidpscrx4.py\"\
    , line 79, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpidpscrx4.py\"\
    , line 73, in check\n    assert candidate([]) == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ \n    rolling_max = []\n    \n    for number in numbers:\n        rolling_max.append(number)\n\
    \        \n        rolling_max.append(max(rolling_max[-2:]))\n        \n    return\
    \ rolling_max\n\ndef check(candidate):\n    assert candidate([]) == []\n    assert\
    \ candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1])\
    \ == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\
    \ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8kv57chg.py\"\
    , line 26, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8kv57chg.py\"\
    , line 24, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8kv57chg.py\"\
    , line 19, in check\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max_list = []\n    rolling_max_list.append(max(numbers))\n    \n   \
    \ for i in range(len(numbers)):\n        rolling_max_list.append(max(rolling_max_list[-1],numbers[i]))\n\
    \    return rolling_max_list\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg3weqsnz.py\"\
    , line 23, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg3weqsnz.py\"\
    , line 21, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg3weqsnz.py\"\
    , line 15, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg3weqsnz.py\"\
    , line 8, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max = []\n    rolling_max.append(max(numbers))\n    for num in numbers:\n\
    \        rolling_max.append(max(rolling_max[-1], num))\n    return rolling_max\n\
    \ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjdk8s5o0.py\"\
    , line 22, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjdk8s5o0.py\"\
    , line 20, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjdk8s5o0.py\"\
    , line 14, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjdk8s5o0.py\"\
    , line 8, in rolling_max\n    rolling_max.append(max(numbers))\nValueError: max()\
    \ arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max_list = []\n    rolling_max_list.append(max(numbers))\n    \n   \
    \ for number in numbers:\n        rolling_max_list.append(max(rolling_max_list[-1],\
    \ number))\n    \n    return rolling_max_list\n\ndef check(candidate):\n    assert\
    \ candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  \
    \  assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2,\
    \ 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4edu3qg5.py\"\
    , line 24, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4edu3qg5.py\"\
    , line 22, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4edu3qg5.py\"\
    , line 16, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4edu3qg5.py\"\
    , line 8, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max = []\n    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    roll\ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0y1a7cf0.py\"\
    , line 74, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0y1a7cf0.py\"\
    , line 72, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0y1a7cf0.py\"\
    , line 66, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0y1a7cf0.py\"\
    , line 8, in rolling_max\n    rolling_max.append(max(numbers))\nValueError: max()\
    \ arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max_list = []\n    rolling_max_list.append(max(numbers))\n    for i\
    \ in range(len(numbers)):\n        rolling_max_list.append(max(rolling_max_list[-1],\
    \ numbers[i]))\n    return rolling_max_list\n\ndef check(candidate):\n    assert\
    \ candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  \
    \  assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2,\
    \ 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6ug9incu.py\"\
    , line 22, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6ug9incu.py\"\
    , line 20, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6ug9incu.py\"\
    , line 14, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6ug9incu.py\"\
    , line 8, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max_list = []\n    rolling_max_list.append(max(numbers))\n    \n   \
    \ for i in range(len(numbers)):\n        rolling_max_list.append(max(rolling_max_list[-1],\
    \ numbers[i]))\n    \n    return rolling_max_list\n\ndef check(candidate):\n \
    \   assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3,\
    \ 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3,\
    \ 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1_sc4bm1.py\"\
    , line 24, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1_sc4bm1.py\"\
    , line 22, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1_sc4bm1.py\"\
    , line 16, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1_sc4bm1.py\"\
    , line 8, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max = []\n    rolling_max.append(max(numbers))\n    for n in numbers:\n\
    \        rolling_max.append(rolling_max[-1] if rolling_max[-1] > n else n)\n \
    \   return rolling_max\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6202_q63.py\"\
    , line 22, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6202_q63.py\"\
    , line 20, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6202_q63.py\"\
    , line 14, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6202_q63.py\"\
    , line 8, in rolling_max\n    rolling_max.append(max(numbers))\nValueError: max()\
    \ arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max_list = []\n    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    roll\ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_sgxa441.py\"\
    , line 74, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_sgxa441.py\"\
    , line 72, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_sgxa441.py\"\
    , line 66, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_sgxa441.py\"\
    , line 8, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max_list = []\n    rolling_max_list.append(max(numbers))\n    \n   \
    \ for i in range(len(numbers)):\n        rolling_max_list.append(max(rolling_max_list[-1],\
    \ numbers[i]))\n    \n    return rolling_max_list\n\ndef check(candidate):\n \
    \   assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3,\
    \ 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3,\
    \ 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmwumz0pp.py\"\
    , line 24, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmwumz0pp.py\"\
    , line 22, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmwumz0pp.py\"\
    , line 16, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmwumz0pp.py\"\
    , line 8, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max = []\n    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    roll\ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3y82rqtt.py\"\
    , line 74, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3y82rqtt.py\"\
    , line 72, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3y82rqtt.py\"\
    , line 66, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3y82rqtt.py\"\
    , line 8, in rolling_max\n    rolling_max.append(max(numbers))\nValueError: max()\
    \ arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max_list = []\n    rolling_max_list.append(max(numbers))\n    \n   \
    \ for num in numbers:\n        rolling_max_list.append(max(rolling_max_list[-1],\
    \ num))\n    \n    return rolling_max_list\n\ndef check(candidate):\n    assert\
    \ candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  \
    \  assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2,\
    \ 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpicyn_ndu.py\"\
    , line 24, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpicyn_ndu.py\"\
    , line 22, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpicyn_ndu.py\"\
    , line 16, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpicyn_ndu.py\"\
    , line 8, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max = []\n    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    roll\ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwo_0mneq.py\"\
    , line 74, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwo_0mneq.py\"\
    , line 72, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwo_0mneq.py\"\
    , line 66, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwo_0mneq.py\"\
    , line 8, in rolling_max\n    rolling_max.append(max(numbers))\nValueError: max()\
    \ arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max = []\n    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    roll\ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpthpgxqep.py\"\
    , line 74, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpthpgxqep.py\"\
    , line 72, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpthpgxqep.py\"\
    , line 66, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpthpgxqep.py\"\
    , line 8, in rolling_max\n    rolling_max.append(max(numbers))\nValueError: max()\
    \ arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ \n    rolling_max_list = []\n    \n    for number in numbers:\n        rolling_max_list.append(number)\n\
    \        \n    return rolling_max_list\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppk76f0vp.py\"\
    , line 24, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppk76f0vp.py\"\
    , line 22, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppk76f0vp.py\"\
    , line 18, in check\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max_list = []\n    rolling_max_list.append(max(numbers))\n    \n   \
    \ for index in range(1, len(numbers)):\n        rolling_max_list.append(max(rolling_max_list[-1],\
    \ numbers[index]))\n        \n    return rolling_max_list\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2,\
    \ 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3,\
    \ 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq518nmym.py\"\
    , line 24, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq518nmym.py\"\
    , line 22, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq518nmym.py\"\
    , line 16, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq518nmym.py\"\
    , line 8, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max = []\n    rolling_max.append(max(numbers))\n    for i in range(len(numbers)):\n\
    \        rolling_max.append(max(rolling_max[-1], numbers[i]))\n    return rolling_max\n\
    \ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4jc6z3q8.py\"\
    , line 22, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4jc6z3q8.py\"\
    , line 20, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4jc6z3q8.py\"\
    , line 14, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4jc6z3q8.py\"\
    , line 8, in rolling_max\n    rolling_max.append(max(numbers))\nValueError: max()\
    \ arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max_list = []\n    rolling_max_list.append(max(numbers))\n    for i\
    \ in range(len(numbers)):\n        rolling_max_list.append(max(rolling_max_list[-1],\
    \ numbers[i]))\n    return rolling_max_list\n\ndef check(candidate):\n    assert\
    \ candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  \
    \  assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2,\
    \ 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpitmg9omi.py\"\
    , line 22, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpitmg9omi.py\"\
    , line 20, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpitmg9omi.py\"\
    , line 14, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpitmg9omi.py\"\
    , line 8, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ \n    rolling_max_list = []\n    \n    for number in numbers:\n        rolling_max_list.append(number)\n\
    \        \n        while len(rolling_max_list) > len(numbers):\n            rolling_max_list.pop()\n\
    \            \n    return rolling_max_list\n\ndef check(candidate):\n    assert\
    \ candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  \
    \  assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2,\
    \ 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl6m8qr1e.py\"\
    , line 27, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl6m8qr1e.py\"\
    , line 25, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl6m8qr1e.py\"\
    , line 21, in check\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max = []\n    rolling_max.append(max(numbers))\n    for number in numbers:\n\
    \        rolling_max.append(max(rolling_max[-1], number))\n    return rolling_max\n\
    \ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp34aspj8l.py\"\
    , line 22, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp34aspj8l.py\"\
    , line 20, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp34aspj8l.py\"\
    , line 14, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp34aspj8l.py\"\
    , line 8, in rolling_max\n    rolling_max.append(max(numbers))\nValueError: max()\
    \ arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max_list = []\n    rolling_max_list.append(max(numbers))\n    \n   \
    \ for number in numbers:\n        rolling_max_list.append(max(rolling_max_list[-1],\
    \ number))\n        \n    return rolling_max_list\n\ndef check(candidate):\n \
    \   assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3,\
    \ 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3,\
    \ 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzvdnh75c.py\"\
    , line 24, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzvdnh75c.py\"\
    , line 22, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzvdnh75c.py\"\
    , line 16, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzvdnh75c.py\"\
    , line 8, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max_list = []\n    rolling_max_list.append(max(numbers))\n    for number\
    \ in numbers:\n        rolling_max_list.append(max(rolling_max_list[-1], number))\n\
    \    return rolling_max_list\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpogii5c0d.py\"\
    , line 22, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpogii5c0d.py\"\
    , line 20, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpogii5c0d.py\"\
    , line 14, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpogii5c0d.py\"\
    , line 8, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max_list = []\n    rolling_max_list.append(max(numbers))\n    for number\
    \ in numbers:\n        rolling_max_list.append(max(rolling_max_list[-1], number))\n\
    \    return rolling_max_list\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyjh053no.py\"\
    , line 22, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyjh053no.py\"\
    , line 20, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyjh053no.py\"\
    , line 14, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyjh053no.py\"\
    , line 8, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ \n    rolling_max_list = []\n    \n    for number in numbers:\n        rolling_max_list.append(number)\n\
    \        \n        rolling_max_list.append(max(rolling_max_list[-2]))\n      \
    \  \n    return rolling_max_list\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe22dh0n4.py\"\
    , line 26, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe22dh0n4.py\"\
    , line 24, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe22dh0n4.py\"\
    , line 19, in check\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  File\
    \ \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe22dh0n4.py\", line 13,\
    \ in rolling_max\n    rolling_max_list.append(max(rolling_max_list[-2]))\nIndexError:\
    \ list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max_list = []\n    rolling_max_list.append(max(numbers))\n    for num\
    \ in numbers:\n        rolling_max_list.append(max(rolling_max_list[-1], num))\n\
    \    return rolling_max_list\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpajcpbuke.py\"\
    , line 22, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpajcpbuke.py\"\
    , line 20, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpajcpbuke.py\"\
    , line 14, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpajcpbuke.py\"\
    , line 8, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max_list = []\n    rolling_max_list.append(max(numbers))\n    for i\
    \ in range(len(numbers)):\n        rolling_max_list.append(max(rolling_max_list[-1],\
    \ numbers[i]))\n    return rolling_max_list\n\ndef check(candidate):\n    assert\
    \ candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  \
    \  assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2,\
    \ 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph0otq3xv.py\"\
    , line 22, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph0otq3xv.py\"\
    , line 20, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph0otq3xv.py\"\
    , line 14, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph0otq3xv.py\"\
    , line 8, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max_list = []\n    rolling_max_list.append(max(numbers))\n    for number\
    \ in numbers:\n        rolling_max_list.append(max(rolling_max_list[-1], number))\n\
    \    return rolling_max_list\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7mac9k2a.py\"\
    , line 22, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7mac9k2a.py\"\
    , line 20, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7mac9k2a.py\"\
    , line 14, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7mac9k2a.py\"\
    , line 8, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ \n    rolling_max = []\n    \n    rolling_max.append(max(numbers))\n    \n \
    \   for number in numbers:\n        rolling_max.append(max(rolling_max[-1], number))\n\
    \        \n    return rolling_max\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd3lnn39b.py\"\
    , line 26, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd3lnn39b.py\"\
    , line 24, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd3lnn39b.py\"\
    , line 18, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd3lnn39b.py\"\
    , line 10, in rolling_max\n    rolling_max.append(max(numbers))\nValueError: max()\
    \ arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max_list = []\n    rolling_max_list.append(max(numbers))\n    \n   \
    \ for i in range(len(numbers)):\n        rolling_max_list.append(max(rolling_max_list[-1],\
    \ numbers[i]))\n    \n    return rolling_max_list\n\ndef check(candidate):\n \
    \   assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3,\
    \ 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3,\
    \ 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzcxkvo2l.py\"\
    , line 24, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzcxkvo2l.py\"\
    , line 22, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzcxkvo2l.py\"\
    , line 16, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzcxkvo2l.py\"\
    , line 8, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max_list = []\n    rolling_max_list.append(max(numbers))\n    for num\
    \ in numbers:\n        rolling_max_list.append(max(rolling_max_list[-1], num))\n\
    \    return rolling_max_list\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_5guo4cl.py\"\
    , line 22, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_5guo4cl.py\"\
    , line 20, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_5guo4cl.py\"\
    , line 14, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_5guo4cl.py\"\
    , line 8, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max_list = []\n    rolling_max_list.append(max(numbers))\n    \n   \
    \ for number in numbers:\n        rolling_max_list.append(max(rolling_max_list[-1],\
    \ number))\n    \n    return rolling_max_list\n\ndef check(candidate):\n    assert\
    \ candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  \
    \  assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2,\
    \ 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyi33nvw6.py\"\
    , line 24, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyi33nvw6.py\"\
    , line 22, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyi33nvw6.py\"\
    , line 16, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyi33nvw6.py\"\
    , line 8, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max = []\n    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    roll\ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa6od_kj0.py\"\
    , line 74, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa6od_kj0.py\"\
    , line 72, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa6od_kj0.py\"\
    , line 66, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa6od_kj0.py\"\
    , line 8, in rolling_max\n    rolling_max.append(max(numbers))\nValueError: max()\
    \ arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max_list = []\n    rolling_max_list.append(max(numbers))\n    for i\
    \ in range(len(numbers)):\n        rolling_max_list.append(max(rolling_max_list[-1],numbers[i]))\n\
    \    return rolling_max_list\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa033brvw.py\"\
    , line 22, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa033brvw.py\"\
    , line 20, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa033brvw.py\"\
    , line 14, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa033brvw.py\"\
    , line 8, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max = []\n    rolling_max.append(max(numbers))\n    for number in numbers:\n\
    \        rolling_max.append(max(rolling_max[-1], number))\n    return rolling_max\n\
    \ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph_hpl5ab.py\"\
    , line 22, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph_hpl5ab.py\"\
    , line 20, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph_hpl5ab.py\"\
    , line 14, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph_hpl5ab.py\"\
    , line 8, in rolling_max\n    rolling_max.append(max(numbers))\nValueError: max()\
    \ arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max_list = []\n    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    roll\ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl_a4lxbo.py\"\
    , line 74, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl_a4lxbo.py\"\
    , line 72, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl_a4lxbo.py\"\
    , line 66, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl_a4lxbo.py\"\
    , line 8, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max = []\n    rolling_max.append(max(numbers))\n    \n    for number\
    \ in numbers:\n        rolling_max.append(max(rolling_max[-1], number))\n    \n\
    \    return rolling_max\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz5watto9.py\"\
    , line 24, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz5watto9.py\"\
    , line 22, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz5watto9.py\"\
    , line 16, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz5watto9.py\"\
    , line 8, in rolling_max\n    rolling_max.append(max(numbers))\nValueError: max()\
    \ arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max_list = []\n    rolling_max_list.append(max(numbers))\n    \n   \
    \ for number in numbers:\n        rolling_max_list.append(max(rolling_max_list[-1],\
    \ number))\n    \n    return rolling_max_list\n\ndef check(candidate):\n    assert\
    \ candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  \
    \  assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2,\
    \ 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo89u2g5n.py\"\
    , line 24, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo89u2g5n.py\"\
    , line 22, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo89u2g5n.py\"\
    , line 16, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo89u2g5n.py\"\
    , line 8, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max_list = []\n    rolling_max_list.append(max(numbers))\n    \n   \
    \ for num in numbers:\n        rolling_max_list.append(max(rolling_max_list[-1],\
    \ num))\n    \n    return rolling_max_list\n\ndef check(candidate):\n    assert\
    \ candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  \
    \  assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2,\
    \ 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp92eh3yrx.py\"\
    , line 24, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp92eh3yrx.py\"\
    , line 22, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp92eh3yrx.py\"\
    , line 16, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp92eh3yrx.py\"\
    , line 8, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max_list = []\n    rolling_max_list.append(max(numbers))\n    \n   \
    \ for number in numbers:\n        rolling_max_list.append(max(rolling_max_list[-1],\
    \ number))\n    \n    return rolling_max_list\n\ndef check(candidate):\n    assert\
    \ candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  \
    \  assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2,\
    \ 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp95bnuvyo.py\"\
    , line 24, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp95bnuvyo.py\"\
    , line 22, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp95bnuvyo.py\"\
    , line 16, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp95bnuvyo.py\"\
    , line 8, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max_list = []\n    rolling_max_list.append(max(numbers))\n    for number\
    \ in numbers:\n        rolling_max_list.append(max(rolling_max_list[-1], number))\n\
    \    return rolling_max_list\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp999wm256.py\"\
    , line 22, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp999wm256.py\"\
    , line 20, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp999wm256.py\"\
    , line 14, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp999wm256.py\"\
    , line 8, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ \n    rolling_max_list = []\n    \n    for number in numbers:\n        rolling_max_list.append(number)\n\
    \        \n        rolling_max_list.append(max(rolling_max_list[-3:]))\n     \
    \   \n    return rolling_max_list\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2tivcds0.py\"\
    , line 26, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2tivcds0.py\"\
    , line 24, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2tivcds0.py\"\
    , line 19, in check\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ \n    rolling_max_list = []\n    \n    for number in numbers:\n        rolling_max_list.append(number)\n\
    \        \n        rolling_max_list.append(max(rolling_max_list[-3:]))\n     \
    \   \n        rolling_max_list.append(max(rolling_max_list[-6:]))\n        \n\
    \        rolling_max_list.append(max(rolling_max_list[-9:]))\n        \n     \
    \   rolling_max_list.append(max(rolling_max_list[-12:]))\n        \n        rolling_max_list.append(max(rolling_max_list[-15:]))\n\
    \        \n        rolling_max_list.append(max(rolling_max_list[-18:]))\n    \
    \    \n        rolling_max_list.append(max(rolling_max_list[-21:]))\n        \n\
    \        rolling_max_list.append(max(rolling_max_list[-24:]))\n        \n    \
    \    rolling_max_list.append(max(rolling_max_list[-27:]))\n        \n        rolling_max_list.append(max(rolling_max_list[-30:]))\n\
    \        \n        rolling_max_list.append(max(rolling_max_list[-33:]))\n    \
    \    \n        rolling_max_list.append(max(rolling_max_list[-36:]))\n        \n\
    \        rolling_max_list.append(max(rolling_max_list[-39:]))\n        \n    \
    \    rolling_max_list.append(max(rolling_max_list[-42:]))\n        \n        rolling_max_list.append(max(rolling_max_list[-45:]))\n\
    \        \n        rolling_max_list.append(max(rolling_max_list[-48:]))\n    \
    \    \n        rolling_max_list.append(max(rolling_max_list[-51:]))\n        \n\
    \        rolling_max_list.append(max(rolling_max_list[-54:]))\n        \n    \
    \    rolling_max_list.append(max(rolling_max_list[-57:]))\n        \n        rolling_max_list.append(max(rolling_max_list[-60:]))\n\
    \        \n        rolling_max_list.append(max(rolling_max_list[-63:]))\n    \
    \    \n        rolling_max_list.append(max(rolling_max_list[-66:]))\n        \n\
    \        rolling_max_list.append(max(rolling_max_list[-69:]))\n        \n    \
    \    rolling_max_list.append(max(rolling_max_list[-72:]))\n        \n        rolling_max_list.append(max(rolling_max_list[-75:]))\n\
    \        \n        rolling_max_list.append(max(rolling_max_list[-78:]))\n    \
    \    \n        rolling_max_list.append(max(rolling_max_list[-81:]))\n        \n\
    \        rolling_max_list.append(max(rolling_max_list[-84:]))\n        \n    \
    \    rolling_max_list.append(max(rolling_max_list[-87:]))\n        \n        roll\n\
    def check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_7z_v4oi.py\"\
    , line 81, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_7z_v4oi.py\"\
    , line 79, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_7z_v4oi.py\"\
    , line 73, in check\n    assert candidate([]) == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max_list = []\n    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    roll\ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfn6hs861.py\"\
    , line 74, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfn6hs861.py\"\
    , line 72, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfn6hs861.py\"\
    , line 66, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfn6hs861.py\"\
    , line 8, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max_list = []\n    rolling_max_list.append(max(numbers))\n    for i\
    \ in range(len(numbers)):\n        rolling_max_list.append(max(rolling_max_list[-1],numbers[i]))\n\
    \    return rolling_max_list\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8y0pgnwk.py\"\
    , line 22, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8y0pgnwk.py\"\
    , line 20, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8y0pgnwk.py\"\
    , line 14, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8y0pgnwk.py\"\
    , line 8, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max_list = []\n    rolling_max_list.append(max(numbers))\n    for i\
    \ in range(len(numbers)):\n        rolling_max_list.append(max(rolling_max_list[-1],\
    \ numbers[i]))\n    return rolling_max_list\n\ndef check(candidate):\n    assert\
    \ candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  \
    \  assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2,\
    \ 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp19_nvca7.py\"\
    , line 22, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp19_nvca7.py\"\
    , line 20, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp19_nvca7.py\"\
    , line 14, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp19_nvca7.py\"\
    , line 8, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max_list = []\n    rolling_max_list.append(max(numbers))\n    for number\
    \ in numbers:\n        rolling_max_list.append(max(rolling_max_list[-1], number))\n\
    \    return rolling_max_list\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdz_ex_s3.py\"\
    , line 22, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdz_ex_s3.py\"\
    , line 20, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdz_ex_s3.py\"\
    , line 14, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdz_ex_s3.py\"\
    , line 8, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max = []\n    rolling_max.append(max(numbers))\n    for i in range(len(numbers)):\n\
    \        rolling_max.append(max(rolling_max[-1], numbers[i]))\n    return rolling_max\n\
    \ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8je1sexg.py\"\
    , line 22, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8je1sexg.py\"\
    , line 20, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8je1sexg.py\"\
    , line 14, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8je1sexg.py\"\
    , line 8, in rolling_max\n    rolling_max.append(max(numbers))\nValueError: max()\
    \ arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max = []\n    rolling_max.append(max(numbers))\n    for i in range(len(numbers)):\n\
    \        rolling_max.append(max(rolling_max[-1], numbers[i]))\n    return rolling_max\n\
    \ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6ja8cxqo.py\"\
    , line 22, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6ja8cxqo.py\"\
    , line 20, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6ja8cxqo.py\"\
    , line 14, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6ja8cxqo.py\"\
    , line 8, in rolling_max\n    rolling_max.append(max(numbers))\nValueError: max()\
    \ arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max = []\n    rolling_max.append(max(numbers))\n    \n    for i in range(len(numbers)):\n\
    \        rolling_max.append(max(rolling_max[i - 1] + 1, numbers[i]))\n    \n \
    \   return rolling_max\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt4gkqgsr.py\"\
    , line 24, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt4gkqgsr.py\"\
    , line 22, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt4gkqgsr.py\"\
    , line 16, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt4gkqgsr.py\"\
    , line 8, in rolling_max\n    rolling_max.append(max(numbers))\nValueError: max()\
    \ arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ \n    rolling_max_list = []\n    \n    for number in numbers:\n        rolling_max_list.append(number)\n\
    \        \n        rolling_max_list.append(max(rolling_max_list[-3:]))\n     \
    \   \n        rolling_max_list.append(max(rolling_max_list[-6:]))\n        \n\
    \        rolling_max_list.append(max(rolling_max_list[-9:]))\n        \n     \
    \   rolling_max_list.append(max(rolling_max_list[-12:]))\n        \n        rolling_max_list.append(max(rolling_max_list[-15:]))\n\
    \        \n        rolling_max_list.append(max(rolling_max_list[-18:]))\n    \
    \    \n        rolling_max_list.append(max(rolling_max_list[-21:]))\n        \n\
    \        rolling_max_list.append(max(rolling_max_list[-24:]))\n        \n    \
    \    rolling_max_list.append(max(rolling_max_list[-27:]))\n        \n        rolling_max_list.append(max(rolling_max_list[-30:]))\n\
    \        \n        rolling_max_list.append(max(rolling_max_list[-33:]))\n    \
    \    \n        rolling_max_list.append(max(rolling_max_list[-36:]))\n        \n\
    \        rolling_max_list.append(max(rolling_max_list[-39:]))\n        \n    \
    \    rolling_max_list.append(max(rolling_max_list[-42:]))\n        \n        rolling_max_list.append(max(rolling_max_list[-45:]))\n\
    \        \n        rolling_max_list.append(max(rolling_max_list[-48:]))\n    \
    \    \n        rolling_max_list.append(max(rolling_max_list[-51:]))\n        \n\
    \        rolling_max_list.append(max(rolling_max_list[-54:]))\n        \n    \
    \    rolling_max_list.append(max(rolling_max_list[-57:]))\n        \n        rolling_max_list.append(max(rolling_max_list[-60:]))\n\
    \        \n        rolling_max_list.append(max(rolling_max_list[-63:]))\n    \
    \    \n        rolling_max_list.append(max(rolling_max_list[-66:]))\n        \n\
    \        rolling_max_list.append(max(rolling_max_list[-69:]))\n        \n    \
    \    rolling_max_list.append(max(rolling_max_list[-72:]))\n        \n        rolling_max_list.append(max(rolling_max_list[-75:]))\n\
    \        \n        rolling_max_list.append(max(rolling_max_list[-78:]))\n    \
    \    \n        rolling_max_list.append(max(rolling_max_list[-81:]))\n        \n\
    \        rolling_max_list.append(max(rolling_max_list[-84:]))\n        \n    \
    \    rolling_max_list.append(max(rolling_max_list[-87:]))\n        \n        roll\n\
    def check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgsqntk0j.py\"\
    , line 81, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgsqntk0j.py\"\
    , line 79, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgsqntk0j.py\"\
    , line 73, in check\n    assert candidate([]) == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max = []\n    rolling_max.append(max(numbers))\n    for i in range(len(numbers)):\n\
    \        rolling_max.append(max(rolling_max[-1], numbers[i]))\n    return rolling_max\n\
    \ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf2bgjag1.py\"\
    , line 22, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf2bgjag1.py\"\
    , line 20, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf2bgjag1.py\"\
    , line 14, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf2bgjag1.py\"\
    , line 8, in rolling_max\n    rolling_max.append(max(numbers))\nValueError: max()\
    \ arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max_list = []\n    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    roll\ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8c02hbdu.py\"\
    , line 74, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8c02hbdu.py\"\
    , line 72, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8c02hbdu.py\"\
    , line 66, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8c02hbdu.py\"\
    , line 8, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max = []\n    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    roll\ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsff8esi7.py\"\
    , line 74, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsff8esi7.py\"\
    , line 72, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsff8esi7.py\"\
    , line 66, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsff8esi7.py\"\
    , line 8, in rolling_max\n    rolling_max.append(max(numbers))\nValueError: max()\
    \ arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max = []\n    rolling_max.append(max(numbers))\n    for i in range(len(numbers)):\n\
    \        rolling_max.append(max(rolling_max[-1], numbers[i]))\n    return rolling_max\n\
    \ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbxruwy9h.py\"\
    , line 22, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbxruwy9h.py\"\
    , line 20, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbxruwy9h.py\"\
    , line 14, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbxruwy9h.py\"\
    , line 8, in rolling_max\n    rolling_max.append(max(numbers))\nValueError: max()\
    \ arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max = []\n    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    roll\ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpflp2abzj.py\"\
    , line 74, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpflp2abzj.py\"\
    , line 72, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpflp2abzj.py\"\
    , line 66, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpflp2abzj.py\"\
    , line 8, in rolling_max\n    rolling_max.append(max(numbers))\nValueError: max()\
    \ arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max_list = []\n    rolling_max_list.append(max(numbers))\n    for i\
    \ in range(len(numbers)):\n        rolling_max_list.append(max(rolling_max_list[-1],\
    \ numbers[i]))\n    return rolling_max_list\n\ndef check(candidate):\n    assert\
    \ candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  \
    \  assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2,\
    \ 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgn2lucse.py\"\
    , line 22, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgn2lucse.py\"\
    , line 20, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgn2lucse.py\"\
    , line 14, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgn2lucse.py\"\
    , line 8, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max_list = []\n    rolling_max_list.append(max(numbers))\n    for number\
    \ in numbers:\n        rolling_max_list.append(max(rolling_max_list[-1], number))\n\
    \    return rolling_max_list\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsto5b4sl.py\"\
    , line 22, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsto5b4sl.py\"\
    , line 20, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsto5b4sl.py\"\
    , line 14, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsto5b4sl.py\"\
    , line 8, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max_list = []\n    rolling_max_list.append(max(numbers))\n    for i\
    \ in range(len(numbers)):\n        rolling_max_list.append(max(rolling_max_list[-1],\
    \ numbers[i]))\n    return rolling_max_list\n\ndef check(candidate):\n    assert\
    \ candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  \
    \  assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2,\
    \ 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9avr32cs.py\"\
    , line 22, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9avr32cs.py\"\
    , line 20, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9avr32cs.py\"\
    , line 14, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9avr32cs.py\"\
    , line 8, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max = []\n    rolling_max.append(max(numbers))\n    for i in range(len(numbers)):\n\
    \        rolling_max.append(max(rolling_max[-1], numbers[i]))\n    return rolling_max\n\
    \ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfzg49bpe.py\"\
    , line 22, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfzg49bpe.py\"\
    , line 20, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfzg49bpe.py\"\
    , line 14, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfzg49bpe.py\"\
    , line 8, in rolling_max\n    rolling_max.append(max(numbers))\nValueError: max()\
    \ arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ \n    rolling_max_list = []\n    \n    for number in numbers:\n        rolling_max_list.append(number)\n\
    \        \n        rolling_max_list.append(max(rolling_max_list[-3:]))\n     \
    \   \n        rolling_max_list.append(max(rolling_max_list[-3:]))\n        \n\
    \        rolling_max_list.append(max(rolling_max_list[-3:]))\n        \n     \
    \   rolling_max_list.append(max(rolling_max_list[-3:]))\n        \n        rolling_max_list.append(max(rolling_max_list[-3:]))\n\
    \        \n        rolling_max_list.append(max(rolling_max_list[-3:]))\n     \
    \   \n        rolling_max_list.append(max(rolling_max_list[-3:]))\n        \n\
    \        rolling_max_list.append(max(rolling_max_list[-3:]))\n        \n     \
    \   rolling_max_list.append(max(rolling_max_list[-3:]))\n        \n        rolling_max_list.append(max(rolling_max_list[-3:]))\n\
    \        \n        rolling_max_list.append(max(rolling_max_list[-3:]))\n     \
    \   \n        rolling_max_list.append(max(rolling_max_list[-3:]))\n        \n\
    \        rolling_max_list.append(max(rolling_max_list[-3:]))\n        \n     \
    \   rolling_max_list.append(max(rolling_max_list[-3:]))\n        \n        rolling_max_list.append(max(rolling_max_list[-3:]))\n\
    \        \n        rolling_max_list.append(max(rolling_max_list[-3:]))\n     \
    \   \n        rolling_max_list.append(max(rolling_max_list[-3:]))\n        \n\
    \        rolling_max_list.append(max(rolling_max_list[-3:]))\n        \n     \
    \   rolling_max_list.append(max(rolling_max_list[-3:]))\n        \n        rolling_max_list.append(max(rolling_max_list[-3:]))\n\
    \        \n        rolling_max_list.append(max(rolling_max_list[-3:]))\n     \
    \   \n        rolling_max_list.append(max(rolling_max_list[-3:]))\n        \n\
    \        rolling_max_list.append(max(rolling_max_list[-3:]))\n        \n     \
    \   rolling_max_list.append(max(rolling_max_list[-3:]))\n        \n        rolling_max_list.append(max(rolling_max_list[-3:]))\n\
    \        \n        rolling_max_list.append(max(rolling_max_list[-3:]))\n     \
    \   \n        rolling_max_list.append(max(rolling_max_list[-3:]))\n        \n\
    \        rolling_max_list.append(max(rolling_max_list[-3:]))\n        \n     \
    \   rolling_max_list.append(max(rolling_max_list[-3:]))\n        \n        rolling_max_list.append(max(rolling_max_list[-3:]))\n\
    \        \n        rolling_max_list.append(max(roll\ndef check(candidate):\n \
    \   assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3,\
    \ 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3,\
    \ 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpav76vbcu.py\"\
    , line 73\n    rolling_max_list.append(max(roll\n                            \
    \   ^\nSyntaxError: '(' was never closed\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ \n    rolling_max = []\n    \n    for number in numbers:\n        rolling_max.append(number)\n\
    \        \n        rolling_max.append(max(rolling_max[-2:]))\n        \n    return\
    \ rolling_max\n</cell>\n<cell>\nrolling_max([1,2,3,4,5,6,7,8,9,10])\n</cell>\n\
    <text>\nThe above function can be easily modified to accept a window size as parameter\
    \ and generate the rolling maximum.\n\n\n</text>\n<cell>\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2,\
    \ 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3,\
    \ 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2soxhwgi.py\"\
    , line 16\n    </cell>\n    ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max_list = []\n    rolling_max_list.append(max(numbers))\n    for i\
    \ in range(len(numbers)):\n        rolling_max_list.append(max(rolling_max_list[-1],\
    \ numbers[i]))\n    return rolling_max_list\n\ndef check(candidate):\n    assert\
    \ candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  \
    \  assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2,\
    \ 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqzytj20l.py\"\
    , line 22, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqzytj20l.py\"\
    , line 20, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqzytj20l.py\"\
    , line 14, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqzytj20l.py\"\
    , line 8, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max_list = []\n    rolling_max_list.append(max(numbers))\n    \n   \
    \ for number in numbers:\n        rolling_max_list.append(max(rolling_max_list[-1],\
    \ number))\n        \n    return rolling_max_list\n</cell>\n<cell>\nrolling_max([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<text>\nProblem 7\nWrite a function that takes a list and a number as\
    \ input, and returns a list with the number repeated n times in the list.\n\n\n\
    </text>\n<cell>\ndef check(candidate):\n    assert candidate([]) == []\n    assert\
    \ candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1])\
    \ == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\
    \ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpiky1xq90.py\"\
    , line 14\n    </cell>\n    ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max_list = []\n    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    roll\ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz0tf6oe_.py\"\
    , line 74, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz0tf6oe_.py\"\
    , line 72, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz0tf6oe_.py\"\
    , line 66, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz0tf6oe_.py\"\
    , line 8, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max_list = []\n    rolling_max_list.append(max(numbers))\n    for i\
    \ in range(len(numbers)):\n        rolling_max_list.append(max(rolling_max_list[-1],\
    \ numbers[i]))\n    return rolling_max_list\n\ndef check(candidate):\n    assert\
    \ candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  \
    \  assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2,\
    \ 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcb5_218u.py\"\
    , line 22, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcb5_218u.py\"\
    , line 20, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcb5_218u.py\"\
    , line 14, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcb5_218u.py\"\
    , line 8, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ \n    rolling_max_list = []\n    \n    for i in range(len(numbers)):\n     \
    \   rolling_max_list.append(max(numbers[i:]))\n        \n    return rolling_max_list\n\
    \ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxbl6o469.py\"\
    , line 24, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxbl6o469.py\"\
    , line 22, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxbl6o469.py\"\
    , line 17, in check\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ \n    rolling_max_list = []\n    \n    for i in range(len(numbers)):\n     \
    \   rolling_max_list.append(max(numbers[i:]))\n        \n    return rolling_max_list\n\
    </cell>\n<cell>\nrolling_max([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<cell>\nrolling_max([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<cell>\nrolling_max([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100])\n\
    </cell>\n<cell>\nrolling_max([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100])\n\
    </cell>\n<cell>\nrolling_max([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66\n\
    def check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm3hhnkjs.py\"\
    , line 14\n    </cell>\n    ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ \n    rolling_max = []\n    \n    for number in numbers:\n        rolling_max.append(number)\n\
    \        \n        rolling_max.append(max(rolling_max[-2:]))\n        \n    return\
    \ rolling_max\n\ndef check(candidate):\n    assert candidate([]) == []\n    assert\
    \ candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1])\
    \ == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\
    \ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5hbs9o_5.py\"\
    , line 26, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5hbs9o_5.py\"\
    , line 24, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5hbs9o_5.py\"\
    , line 19, in check\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max_list = []\n    rolling_max_list.append(max(numbers))\n    for i\
    \ in range(len(numbers) - 1):\n        rolling_max_list.append(max(rolling_max_list[-1],\
    \ numbers[i]))\n    return rolling_max_list\n\ndef check(candidate):\n    assert\
    \ candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  \
    \  assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2,\
    \ 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm_f2o1hr.py\"\
    , line 22, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm_f2o1hr.py\"\
    , line 20, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm_f2o1hr.py\"\
    , line 14, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm_f2o1hr.py\"\
    , line 8, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max = []\n    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    roll\ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfweoa_m6.py\"\
    , line 74, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfweoa_m6.py\"\
    , line 72, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfweoa_m6.py\"\
    , line 66, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfweoa_m6.py\"\
    , line 8, in rolling_max\n    rolling_max.append(max(numbers))\nValueError: max()\
    \ arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max_list = []\n    rolling_max_list.append(max(numbers))\n    \n   \
    \ for index in range(1, len(numbers)):\n        rolling_max_list.append(max(rolling_max_list[-1],\
    \ numbers[index]))\n    \n    return rolling_max_list\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2,\
    \ 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3,\
    \ 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_b52az7h.py\"\
    , line 24, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_b52az7h.py\"\
    , line 22, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_b52az7h.py\"\
    , line 16, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_b52az7h.py\"\
    , line 8, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max_list = []\n    rolling_max_list.append(max(numbers))\n    \n   \
    \ for number in numbers:\n        rolling_max_list.append(max(rolling_max_list[-1],\
    \ number))\n    \n    return rolling_max_list\n\ndef check(candidate):\n    assert\
    \ candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  \
    \  assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2,\
    \ 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnb81jx1s.py\"\
    , line 24, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnb81jx1s.py\"\
    , line 22, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnb81jx1s.py\"\
    , line 16, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnb81jx1s.py\"\
    , line 8, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ \n    rolling_max_list = []\n    \n    rolling_max_list.append(max(numbers))\n\
    \    \n    for i in range(len(numbers)):\n        rolling_max_list.append(max(numbers[i:i+2]))\n\
    \        \n    return rolling_max_list\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp06309f0o.py\"\
    , line 26, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp06309f0o.py\"\
    , line 24, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp06309f0o.py\"\
    , line 18, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp06309f0o.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ \n    rolling_max = []\n    \n    for number in numbers:\n        rolling_max.append(number)\n\
    \        \n        rolling_max.append(max(rolling_max[-2:]))\n        \n    return\
    \ rolling_max\n\ndef check(candidate):\n    assert candidate([]) == []\n    assert\
    \ candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1])\
    \ == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\
    \ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphj7a_4qc.py\"\
    , line 26, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphj7a_4qc.py\"\
    , line 24, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphj7a_4qc.py\"\
    , line 19, in check\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max = []\n    rolling_max.append(max(numbers))\n    for num in numbers:\n\
    \        rolling_max.append(max(rolling_max[-1], num))\n    return rolling_max\n\
    \ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5dc2aept.py\"\
    , line 22, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5dc2aept.py\"\
    , line 20, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5dc2aept.py\"\
    , line 14, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5dc2aept.py\"\
    , line 8, in rolling_max\n    rolling_max.append(max(numbers))\nValueError: max()\
    \ arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ \n    rolling_max = []\n    \n    for number in numbers:\n        rolling_max.append(number)\n\
    \        \n        rolling_max.append(max(rolling_max[-2:]))\n        \n    return\
    \ rolling_max\n\ndef check(candidate):\n    assert candidate([]) == []\n    assert\
    \ candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1])\
    \ == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\
    \ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpin8ho1mi.py\"\
    , line 26, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpin8ho1mi.py\"\
    , line 24, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpin8ho1mi.py\"\
    , line 19, in check\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max_list = []\n    rolling_max_list.append(max(numbers))\n    for num\
    \ in numbers:\n        rolling_max_list.append(max(rolling_max_list[-1], num))\n\
    \    return rolling_max_list\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpriqtgxrw.py\"\
    , line 22, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpriqtgxrw.py\"\
    , line 20, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpriqtgxrw.py\"\
    , line 14, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpriqtgxrw.py\"\
    , line 8, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max = []\n    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    roll\ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp39ee6w9k.py\"\
    , line 74, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp39ee6w9k.py\"\
    , line 72, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp39ee6w9k.py\"\
    , line 66, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp39ee6w9k.py\"\
    , line 8, in rolling_max\n    rolling_max.append(max(numbers))\nValueError: max()\
    \ arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max = []\n    rolling_max.append(max(numbers))\n    for i in range(len(numbers)):\n\
    \        rolling_max.append(max(rolling_max[-1], numbers[i]))\n    return rolling_max\n\
    \ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzgpygzv4.py\"\
    , line 22, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzgpygzv4.py\"\
    , line 20, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzgpygzv4.py\"\
    , line 14, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzgpygzv4.py\"\
    , line 8, in rolling_max\n    rolling_max.append(max(numbers))\nValueError: max()\
    \ arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max = []\n    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    roll\ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5y3r0xj7.py\"\
    , line 74, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5y3r0xj7.py\"\
    , line 72, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5y3r0xj7.py\"\
    , line 66, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5y3r0xj7.py\"\
    , line 8, in rolling_max\n    rolling_max.append(max(numbers))\nValueError: max()\
    \ arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max_list = []\n    rolling_max_list.append(max(numbers))\n    for number\
    \ in numbers:\n        rolling_max_list.append(max(rolling_max_list[-1], number))\n\
    \    return rolling_max_list\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkuukohb0.py\"\
    , line 22, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkuukohb0.py\"\
    , line 20, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkuukohb0.py\"\
    , line 14, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkuukohb0.py\"\
    , line 8, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max = []\n    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    roll\ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1pv7yuxv.py\"\
    , line 74, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1pv7yuxv.py\"\
    , line 72, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1pv7yuxv.py\"\
    , line 66, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1pv7yuxv.py\"\
    , line 8, in rolling_max\n    rolling_max.append(max(numbers))\nValueError: max()\
    \ arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ \n    rolling_max_list = []\n    \n    for number in numbers:\n        rolling_max_list.append(number)\n\
    \        \n        rolling_max_list.append(max(rolling_max_list[-3:]))\n     \
    \   \n        rolling_max_list.append(max(rolling_max_list[-6:]))\n        \n\
    \        rolling_max_list.append(max(rolling_max_list[-9:]))\n        \n     \
    \   rolling_max_list.append(max(rolling_max_list[-12:]))\n        \n        rolling_max_list.append(max(rolling_max_list[-15:]))\n\
    \        \n        rolling_max_list.append(max(rolling_max_list[-18:]))\n    \
    \    \n        rolling_max_list.append(max(rolling_max_list[-21:]))\n        \n\
    \        rolling_max_list.append(max(rolling_max_list[-24:]))\n        \n    \
    \    rolling_max_list.append(max(rolling_max_list[-27:]))\n        \n        rolling_max_list.append(max(rolling_max_list[-30:]))\n\
    \        \n        rolling_max_list.append(max(rolling_max_list[-33:]))\n    \
    \    \n        rolling_max_list.append(max(rolling_max_list[-36:]))\n        \n\
    \        rolling_max_list.append(max(rolling_max_list[-39:]))\n        \n    \
    \    rolling_max_list.append(max(rolling_max_list[-42:]))\n        \n        rolling_max_list.append(max(rolling_max_list[-45:]))\n\
    \        \n        rolling_max_list.append(max(rolling_max_list[-48:]))\n    \
    \    \n        rolling_max_list.append(max(rolling_max_list[-51:]))\n        \n\
    \        rolling_max_list.append(max(rolling_max_list[-54:]))\n        \n    \
    \    rolling_max_list.append(max(rolling_max_list[-57:]))\n        \n        rolling_max_list.append(max(rolling_max_list[-60:]))\n\
    \        \n        rolling_max_list.append(max(rolling_max_list[-63:]))\n    \
    \    \n        rolling_max_list.append(max(rolling_max_list[-66:]))\n        \n\
    \        rolling_max_list.append(max(rolling_max_list[-69:]))\n        \n    \
    \    rolling_max_list.append(max(rolling_max_list[-72:]))\n        \n        rolling_max_list.append(max(rolling_max_list[-75:]))\n\
    \        \n        rolling_max_list.append(max(rolling_max_list[-78:]))\n    \
    \    \n        rolling_max_list.append(max(rolling_max_list[-81:]))\n        \n\
    \        rolling_max_list.append(max(rolling_max_list[-84:]))\n        \n    \
    \    rolling_max_list.append(max(rolling_max_list[-87:]))\n        \n        roll\n\
    def check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2zmhjhxt.py\"\
    , line 81, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2zmhjhxt.py\"\
    , line 79, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2zmhjhxt.py\"\
    , line 73, in check\n    assert candidate([]) == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max = []\n    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    roll\ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplj6mz9qv.py\"\
    , line 74, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplj6mz9qv.py\"\
    , line 72, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplj6mz9qv.py\"\
    , line 66, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplj6mz9qv.py\"\
    , line 8, in rolling_max\n    rolling_max.append(max(numbers))\nValueError: max()\
    \ arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ \n    rolling_max = []\n    \n    for number in numbers:\n        rolling_max.append(number)\n\
    \        \n        rolling_max.append(max(rolling_max[-2:]))\n        \n    return\
    \ rolling_max\n\ndef check(candidate):\n    assert candidate([]) == []\n    assert\
    \ candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1])\
    \ == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\
    \ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpby37c23m.py\"\
    , line 26, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpby37c23m.py\"\
    , line 24, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpby37c23m.py\"\
    , line 19, in check\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max_list = []\n    rolling_max_list.append(max(numbers))\n    for number\
    \ in numbers:\n        rolling_max_list.append(max(rolling_max_list[-1], number))\n\
    \    return rolling_max_list\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq2bdb244.py\"\
    , line 22, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq2bdb244.py\"\
    , line 20, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq2bdb244.py\"\
    , line 14, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq2bdb244.py\"\
    , line 8, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max_list = []\n    rolling_max_list.append(max(numbers))\n    for i\
    \ in range(len(numbers)):\n        rolling_max_list.append(max(rolling_max_list[-1],\
    \ numbers[i]))\n    return rolling_max_list\n\ndef check(candidate):\n    assert\
    \ candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  \
    \  assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2,\
    \ 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptnibovta.py\"\
    , line 22, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptnibovta.py\"\
    , line 20, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptnibovta.py\"\
    , line 14, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptnibovta.py\"\
    , line 8, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_maxes = []\n    rolling_maxes.append(max(numbers))\n    for num in numbers:\n\
    \        rolling_maxes.append(max(rolling_maxes[-1], num))\n    return rolling_maxes\n\
    \ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpefpivb62.py\"\
    , line 22, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpefpivb62.py\"\
    , line 20, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpefpivb62.py\"\
    , line 14, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpefpivb62.py\"\
    , line 8, in rolling_max\n    rolling_maxes.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max = []\n    rolling_max.append(max(numbers))\n    for number in numbers:\n\
    \        rolling_max.append(max(rolling_max[-1], number))\n    return rolling_max\n\
    \ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwc0v37ta.py\"\
    , line 22, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwc0v37ta.py\"\
    , line 20, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwc0v37ta.py\"\
    , line 14, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwc0v37ta.py\"\
    , line 8, in rolling_max\n    rolling_max.append(max(numbers))\nValueError: max()\
    \ arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ \n    rolling_max = []\n    \n    for i in range(len(numbers)):\n        rolling_max.append(max(numbers[i:]))\n\
    \    \n    return rolling_max\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0xqegt8d.py\"\
    , line 24, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0xqegt8d.py\"\
    , line 22, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0xqegt8d.py\"\
    , line 17, in check\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max = []\n    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    roll\ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1efhx4q6.py\"\
    , line 74, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1efhx4q6.py\"\
    , line 72, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1efhx4q6.py\"\
    , line 66, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1efhx4q6.py\"\
    , line 8, in rolling_max\n    rolling_max.append(max(numbers))\nValueError: max()\
    \ arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max = []\n    rolling_max.append(max(numbers))\n    for i in range(len(numbers)):\n\
    \        rolling_max.append(max(rolling_max[-1], numbers[i]))\n    return rolling_max\n\
    \ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp662iesxh.py\"\
    , line 22, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp662iesxh.py\"\
    , line 20, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp662iesxh.py\"\
    , line 14, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp662iesxh.py\"\
    , line 8, in rolling_max\n    rolling_max.append(max(numbers))\nValueError: max()\
    \ arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ \n    rolling_max = []\n    \n    for number in numbers:\n        rolling_max.append(number)\n\
    \        \n        if len(rolling_max) > len(numbers):\n            break\n  \
    \      \n        rolling_max.append(max(rolling_max))\n        \n    return rolling_max\n\
    \ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4nx325yq.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4nx325yq.py\"\
    , line 27, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4nx325yq.py\"\
    , line 22, in check\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max_list = []\n    rolling_max_list.append(max(numbers))\n    for num\
    \ in numbers:\n        rolling_max_list.append(max(rolling_max_list[-1], num))\n\
    \    return rolling_max_list\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps9_1pkoe.py\"\
    , line 22, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps9_1pkoe.py\"\
    , line 20, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps9_1pkoe.py\"\
    , line 14, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps9_1pkoe.py\"\
    , line 8, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max_list = []\n    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    roll\ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpb4otpclk.py\"\
    , line 74, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpb4otpclk.py\"\
    , line 72, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpb4otpclk.py\"\
    , line 66, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpb4otpclk.py\"\
    , line 8, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max_list = []\n    rolling_max_list.append(max(numbers))\n    \n   \
    \ for i in range(len(numbers)):\n        rolling_max_list.append(max(rolling_max_list[-1],\
    \ numbers[i]))\n    \n    return rolling_max_list\n\ndef check(candidate):\n \
    \   assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3,\
    \ 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3,\
    \ 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbhez1awv.py\"\
    , line 24, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbhez1awv.py\"\
    , line 22, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbhez1awv.py\"\
    , line 16, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbhez1awv.py\"\
    , line 8, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max = []\n    rolling_max.append(max(numbers))\n    \n    for number\
    \ in numbers:\n        rolling_max.append(max(rolling_max[-1], number))\n    \
    \    \n    return rolling_max\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpha8ps5tx.py\"\
    , line 24, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpha8ps5tx.py\"\
    , line 22, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpha8ps5tx.py\"\
    , line 16, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpha8ps5tx.py\"\
    , line 8, in rolling_max\n    rolling_max.append(max(numbers))\nValueError: max()\
    \ arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max_list = []\n    rolling_max_list.append(max(numbers))\n    \n   \
    \ for i in range(len(numbers)):\n        rolling_max_list.append(max(rolling_max_list[-1],numbers[i]))\n\
    \    return rolling_max_list\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpr34ocq5f.py\"\
    , line 23, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpr34ocq5f.py\"\
    , line 21, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpr34ocq5f.py\"\
    , line 15, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpr34ocq5f.py\"\
    , line 8, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max_list = []\n    rolling_max_list.append(max(numbers))\n    for i\
    \ in range(len(numbers)):\n        rolling_max_list.append(max(rolling_max_list[-1],\
    \ numbers[i]))\n    return rolling_max_list\n\ndef check(candidate):\n    assert\
    \ candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  \
    \  assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2,\
    \ 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp23tcx48w.py\"\
    , line 22, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp23tcx48w.py\"\
    , line 20, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp23tcx48w.py\"\
    , line 14, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp23tcx48w.py\"\
    , line 8, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max = []\n    rolling_max.append(max(numbers))\n    for n in numbers:\n\
    \        rolling_max.append(rolling_max[n-1])\n    return rolling_max\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2,\
    \ 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3,\
    \ 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_kwxxsfs.py\"\
    , line 22, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_kwxxsfs.py\"\
    , line 20, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_kwxxsfs.py\"\
    , line 14, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_kwxxsfs.py\"\
    , line 8, in rolling_max\n    rolling_max.append(max(numbers))\nValueError: max()\
    \ arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ \n    rolling_max = []\n    \n    for number in numbers:\n        rolling_max.append(number)\n\
    \        \n        while len(rolling_max) > len(numbers):\n            rolling_max.pop()\n\
    \            \n    return rolling_max\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd3bs2m36.py\"\
    , line 27, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd3bs2m36.py\"\
    , line 25, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd3bs2m36.py\"\
    , line 21, in check\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max = []\n    rolling_max.append(max(numbers))\n    for num in numbers:\n\
    \        if num > rolling_max[-1]:\n            rolling_max.append(num)\n    return\
    \ rolling_max\n\ndef check(candidate):\n    assert candidate([]) == []\n    assert\
    \ candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1])\
    \ == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\
    \ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqjt7lwhn.py\"\
    , line 23, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqjt7lwhn.py\"\
    , line 21, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqjt7lwhn.py\"\
    , line 15, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqjt7lwhn.py\"\
    , line 8, in rolling_max\n    rolling_max.append(max(numbers))\nValueError: max()\
    \ arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max_list = []\n    rolling_max_list.append(max(numbers))\n    for i\
    \ in range(len(numbers)):\n        rolling_max_list.append(max(rolling_max_list[-1],\
    \ numbers[i]))\n    return rolling_max_list\n\ndef check(candidate):\n    assert\
    \ candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  \
    \  assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2,\
    \ 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgvgmqxhf.py\"\
    , line 22, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgvgmqxhf.py\"\
    , line 20, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgvgmqxhf.py\"\
    , line 14, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgvgmqxhf.py\"\
    , line 8, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max = []\n    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    roll\ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl82zuj8e.py\"\
    , line 74, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl82zuj8e.py\"\
    , line 72, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl82zuj8e.py\"\
    , line 66, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl82zuj8e.py\"\
    , line 8, in rolling_max\n    rolling_max.append(max(numbers))\nValueError: max()\
    \ arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max = []\n    rolling_max.append(max(numbers))\n    for num in numbers:\n\
    \        rolling_max.append(max(rolling_max[-1], num))\n    return rolling_max\n\
    \ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3wqogkih.py\"\
    , line 22, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3wqogkih.py\"\
    , line 20, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3wqogkih.py\"\
    , line 14, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3wqogkih.py\"\
    , line 8, in rolling_max\n    rolling_max.append(max(numbers))\nValueError: max()\
    \ arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ \n    rolling_max = []\n    \n    for i in range(len(numbers)):\n        rolling_max.append(max(numbers[i:]))\n\
    \        \n    return rolling_max\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3ssnyw_m.py\"\
    , line 24, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3ssnyw_m.py\"\
    , line 22, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3ssnyw_m.py\"\
    , line 17, in check\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ \n    rolling_max = []\n    \n    for number in numbers:\n        rolling_max.append(number)\n\
    \        \n        rolling_max.append(max(rolling_max[-2:]))\n        \n    return\
    \ rolling_max\n\ndef check(candidate):\n    assert candidate([]) == []\n    assert\
    \ candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1])\
    \ == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\
    \ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzs96fbas.py\"\
    , line 26, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzs96fbas.py\"\
    , line 24, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzs96fbas.py\"\
    , line 19, in check\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max_list = []\n    rolling_max_list.append(max(numbers))\n    for index\
    \ in range(1, len(numbers)):\n        rolling_max_list.append(max(rolling_max_list[-1],\
    \ numbers[index]))\n    return rolling_max_list\n\ndef check(candidate):\n   \
    \ assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3,\
    \ 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3,\
    \ 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgkevpzsx.py\"\
    , line 22, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgkevpzsx.py\"\
    , line 20, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgkevpzsx.py\"\
    , line 14, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgkevpzsx.py\"\
    , line 8, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max = []\n    rolling_max.append(max(numbers))\n    for n in numbers:\n\
    \        rolling_max.append(rolling_max[-1] if rolling_max[-1] > n else n)\n \
    \   return rolling_max\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppmbtb01s.py\"\
    , line 22, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppmbtb01s.py\"\
    , line 20, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppmbtb01s.py\"\
    , line 14, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppmbtb01s.py\"\
    , line 8, in rolling_max\n    rolling_max.append(max(numbers))\nValueError: max()\
    \ arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max_list = []\n    rolling_max_list.append(max(numbers))\n    for i\
    \ in range(len(numbers)):\n        rolling_max_list.append(max(rolling_max_list[-1],\
    \ numbers[i]))\n    return rolling_max_list\n\ndef check(candidate):\n    assert\
    \ candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  \
    \  assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2,\
    \ 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfjwb06o3.py\"\
    , line 22, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfjwb06o3.py\"\
    , line 20, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfjwb06o3.py\"\
    , line 14, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfjwb06o3.py\"\
    , line 8, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max_list = []\n    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    roll\ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpttw6wned.py\"\
    , line 74, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpttw6wned.py\"\
    , line 72, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpttw6wned.py\"\
    , line 66, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpttw6wned.py\"\
    , line 8, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max_list = []\n    rolling_max_list.append(max(numbers))\n    for i\
    \ in range(len(numbers) - 1):\n        rolling_max_list.append(max(rolling_max_list[-1],\
    \ numbers[i]))\n    return rolling_max_list\n\ndef check(candidate):\n    assert\
    \ candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  \
    \  assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2,\
    \ 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfskmiqto.py\"\
    , line 22, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfskmiqto.py\"\
    , line 20, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfskmiqto.py\"\
    , line 14, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfskmiqto.py\"\
    , line 8, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max_list = []\n    rolling_max_list.append(max(numbers))\n    for number\
    \ in numbers:\n        rolling_max_list.append(max(rolling_max_list[-1], number))\n\
    \    return rolling_max_list\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjuw3rx51.py\"\
    , line 22, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjuw3rx51.py\"\
    , line 20, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjuw3rx51.py\"\
    , line 14, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjuw3rx51.py\"\
    , line 8, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max = []\n    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    roll\ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphuldcsbe.py\"\
    , line 74, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphuldcsbe.py\"\
    , line 72, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphuldcsbe.py\"\
    , line 66, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphuldcsbe.py\"\
    , line 8, in rolling_max\n    rolling_max.append(max(numbers))\nValueError: max()\
    \ arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ \n    rolling_max = []\n    \n    for number in numbers:\n        rolling_max.append(number)\n\
    \        \n        rolling_max.append(max(rolling_max[-2:]))\n        \n    return\
    \ rolling_max\n\ndef check(candidate):\n    assert candidate([]) == []\n    assert\
    \ candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1])\
    \ == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\
    \ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptkqw3yjf.py\"\
    , line 26, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptkqw3yjf.py\"\
    , line 24, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptkqw3yjf.py\"\
    , line 19, in check\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max_list = []\n    rolling_max_list.append(max(numbers))\n    for number\
    \ in numbers:\n        rolling_max_list.append(max(rolling_max_list[-1], number))\n\
    \    return rolling_max_list\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3smp6hnf.py\"\
    , line 22, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3smp6hnf.py\"\
    , line 20, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3smp6hnf.py\"\
    , line 14, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3smp6hnf.py\"\
    , line 8, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max_list = []\n    rolling_max_list.append(max(numbers))\n    \n   \
    \ for i in range(len(numbers)-1):\n        rolling_max_list.append(max(rolling_max_list[-1],\
    \ numbers[i]))\n    \n    return rolling_max_list\n\ndef check(candidate):\n \
    \   assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3,\
    \ 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3,\
    \ 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp789077tl.py\"\
    , line 24, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp789077tl.py\"\
    , line 22, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp789077tl.py\"\
    , line 16, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp789077tl.py\"\
    , line 8, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max_list = []\n    rolling_max_list.append(max(numbers))\n    for i\
    \ in range(len(numbers)):\n        rolling_max_list.append(max(rolling_max_list[-1],\
    \ numbers[i]))\n    return rolling_max_list\n\ndef check(candidate):\n    assert\
    \ candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  \
    \  assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2,\
    \ 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe8l0wrt_.py\"\
    , line 22, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe8l0wrt_.py\"\
    , line 20, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe8l0wrt_.py\"\
    , line 14, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe8l0wrt_.py\"\
    , line 8, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ \n    rolling_max = []\n    \n    for number in numbers:\n        rolling_max.append(number)\n\
    \        \n        rolling_max.append(max(rolling_max[-2:]))\n        \n    return\
    \ rolling_max\n\ndef check(candidate):\n    assert candidate([]) == []\n    assert\
    \ candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1])\
    \ == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\
    \ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe3lbks59.py\"\
    , line 26, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe3lbks59.py\"\
    , line 24, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe3lbks59.py\"\
    , line 19, in check\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_maxes = []\n    rolling_max = 0\n    for number in numbers:\n      \
    \  rolling_max = max(rolling_max, number)\n        rolling_maxes.append(rolling_max)\n\
    \    return rolling_maxes\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max = []\n    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    roll\ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe_j6l092.py\"\
    , line 74, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe_j6l092.py\"\
    , line 72, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe_j6l092.py\"\
    , line 66, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe_j6l092.py\"\
    , line 8, in rolling_max\n    rolling_max.append(max(numbers))\nValueError: max()\
    \ arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ \n    rolling_max_list = []\n    \n    for number in numbers:\n        rolling_max_list.append(number)\n\
    \        \n        rolling_max_list.append(max(rolling_max_list[-3:]))\n     \
    \   \n        rolling_max_list.append(max(rolling_max_list[-6:]))\n        \n\
    \        rolling_max_list.append(max(rolling_max_list[-9:]))\n        \n     \
    \   rolling_max_list.append(max(rolling_max_list[-12:]))\n        \n        rolling_max_list.append(max(rolling_max_list[-15:]))\n\
    \        \n        rolling_max_list.append(max(rolling_max_list[-18:]))\n    \
    \    \n        rolling_max_list.append(max(rolling_max_list[-21:]))\n        \n\
    \        rolling_max_list.append(max(rolling_max_list[-24:]))\n        \n    \
    \    rolling_max_list.append(max(rolling_max_list[-27:]))\n        \n        rolling_max_list.append(max(rolling_max_list[-30:]))\n\
    \        \n        rolling_max_list.append(max(rolling_max_list[-33:]))\n    \
    \    \n        rolling_max_list.append(max(rolling_max_list[-36:]))\n        \n\
    \        rolling_max_list.append(max(rolling_max_list[-39:]))\n        \n    \
    \    rolling_max_list.append(max(rolling_max_list[-42:]))\n        \n        rolling_max_list.append(max(rolling_max_list[-45:]))\n\
    \        \n        rolling_max_list.append(max(rolling_max_list[-48:]))\n    \
    \    \n        rolling_max_list.append(max(rolling_max_list[-51:]))\n        \n\
    \        rolling_max_list.append(max(rolling_max_list[-54:]))\n        \n    \
    \    rolling_max_list.append(max(rolling_max_list[-57:]))\n        \n        rolling_max_list.append(max(rolling_max_list[-60:]))\n\
    \        \n        rolling_max_list.append(max(rolling_max_list[-63:]))\n    \
    \    \n        rolling_max_list.append(max(rolling_max_list[-66:]))\n        \n\
    \        rolling_max_list.append(max(rolling_max_list[-69:]))\n        \n    \
    \    rolling_max_list.append(max(rolling_max_list[-72:]))\n        \n        rolling_max_list.append(max(rolling_max_list[-75:]))\n\
    \        \n        rolling_max_list.append(max(rolling_max_list[-78:]))\n    \
    \    \n        rolling_max_list.append(max(rolling_max_list[-81:]))\n        \n\
    \        rolling_max_list.append(max(rolling_max_list[-84:]))\n        \n    \
    \    rolling_max_list.append(max(rolling_max_list[-87:]))\n        \n        roll\n\
    def check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8d1xz91n.py\"\
    , line 81, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8d1xz91n.py\"\
    , line 79, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8d1xz91n.py\"\
    , line 73, in check\n    assert candidate([]) == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max_list = []\n    rolling_max_list.append(max(numbers))\n    for i\
    \ in range(len(numbers) - 1):\n        rolling_max_list.append(max(rolling_max_list[-1],\
    \ numbers[i]))\n    return rolling_max_list\n\ndef check(candidate):\n    assert\
    \ candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  \
    \  assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2,\
    \ 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy7mx043l.py\"\
    , line 22, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy7mx043l.py\"\
    , line 20, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy7mx043l.py\"\
    , line 14, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy7mx043l.py\"\
    , line 8, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max_list = []\n    rolling_max_list.append(max(numbers))\n    \n   \
    \ for index in range(1, len(numbers)):\n        rolling_max_list.append(max(rolling_max_list[-1],\
    \ numbers[index]))\n        \n    return rolling_max_list\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2,\
    \ 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3,\
    \ 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprp4rst5m.py\"\
    , line 24, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprp4rst5m.py\"\
    , line 22, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprp4rst5m.py\"\
    , line 16, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprp4rst5m.py\"\
    , line 8, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ \n    rolling_max = []\n    \n    for number in numbers:\n        rolling_max.append(number)\n\
    \        \n        while len(rolling_max) > len(numbers):\n            rolling_max.pop()\n\
    \            \n    return rolling_max\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5m3vwgr9.py\"\
    , line 27, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5m3vwgr9.py\"\
    , line 25, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5m3vwgr9.py\"\
    , line 21, in check\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ \n    rolling_max = []\n    \n    for number in numbers:\n        rolling_max.append(number)\n\
    \        \n        rolling_max.append(max(rolling_max[-2:]))\n        \n    return\
    \ rolling_max\n\ndef check(candidate):\n    assert candidate([]) == []\n    assert\
    \ candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1])\
    \ == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\
    \ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn0izq8k2.py\"\
    , line 26, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn0izq8k2.py\"\
    , line 24, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn0izq8k2.py\"\
    , line 19, in check\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max = []\n    rolling_max.append(max(numbers))\n    \n    for number\
    \ in numbers:\n        rolling_max.append(max(rolling_max[-1], number))\n    \n\
    \    return rolling_max\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp6tl7tmq.py\"\
    , line 24, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp6tl7tmq.py\"\
    , line 22, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp6tl7tmq.py\"\
    , line 16, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp6tl7tmq.py\"\
    , line 8, in rolling_max\n    rolling_max.append(max(numbers))\nValueError: max()\
    \ arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max = []\n    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    roll\ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9y8yyd8g.py\"\
    , line 74, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9y8yyd8g.py\"\
    , line 72, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9y8yyd8g.py\"\
    , line 66, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9y8yyd8g.py\"\
    , line 8, in rolling_max\n    rolling_max.append(max(numbers))\nValueError: max()\
    \ arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max = []\n    rolling_max.append(max(numbers))\n    \n    for num in\
    \ numbers:\n        rolling_max.append(max(rolling_max[-1], num))\n    \n    return\
    \ rolling_max\n\ndef check(candidate):\n    assert candidate([]) == []\n    assert\
    \ candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1])\
    \ == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\
    \ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa76bg80p.py\"\
    , line 24, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa76bg80p.py\"\
    , line 22, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa76bg80p.py\"\
    , line 16, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa76bg80p.py\"\
    , line 8, in rolling_max\n    rolling_max.append(max(numbers))\nValueError: max()\
    \ arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max_list = []\n    rolling_max_list.append(max(numbers))\n    \n   \
    \ for number in numbers:\n        rolling_max_list.append(max(rolling_max_list[-1],\
    \ number))\n    \n    return rolling_max_list\n\ndef check(candidate):\n    assert\
    \ candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  \
    \  assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2,\
    \ 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsyhlnpbi.py\"\
    , line 24, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsyhlnpbi.py\"\
    , line 22, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsyhlnpbi.py\"\
    , line 16, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsyhlnpbi.py\"\
    , line 8, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ \n    rolling_max_list = []\n    \n    for number in numbers:\n        rolling_max_list.append(number)\n\
    \        \n        for index in range(1, len(numbers)):\n            if number\
    \ > numbers[index]:\n                rolling_max_list.append(numbers[index])\n\
    \                \n    return rolling_max_list\n</cell>\n<cell>\nrolling_max([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<cell>\nrolling_max([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<cell>\nrolling_max([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,\n\
    def check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3_m0h7nn.py\"\
    , line 18\n    </cell>\n    ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max_list = []\n    rolling_max_list.append(max(numbers))\n    \n   \
    \ for number in numbers:\n        rolling_max_list.append(max(rolling_max_list[-1],\
    \ number))\n    \n    return rolling_max_list\n\ndef check(candidate):\n    assert\
    \ candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  \
    \  assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2,\
    \ 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpk0npg73o.py\"\
    , line 24, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpk0npg73o.py\"\
    , line 22, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpk0npg73o.py\"\
    , line 16, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpk0npg73o.py\"\
    , line 8, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max = []\n    rolling_max.append(max(numbers))\n    for i in range(len(numbers)):\n\
    \        rolling_max.append(max(rolling_max[-1], numbers[i]))\n    return rolling_max\n\
    \ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdegnqay5.py\"\
    , line 22, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdegnqay5.py\"\
    , line 20, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdegnqay5.py\"\
    , line 14, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdegnqay5.py\"\
    , line 8, in rolling_max\n    rolling_max.append(max(numbers))\nValueError: max()\
    \ arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max = []\n    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    roll\ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpppgsewxu.py\"\
    , line 74, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpppgsewxu.py\"\
    , line 72, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpppgsewxu.py\"\
    , line 66, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpppgsewxu.py\"\
    , line 8, in rolling_max\n    rolling_max.append(max(numbers))\nValueError: max()\
    \ arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max_list = []\n    rolling_max_list.append(max(numbers))\n    \n   \
    \ for number in numbers:\n        rolling_max_list.append(max(rolling_max_list[-1],\
    \ number))\n    \n    return rolling_max_list\n\ndef check(candidate):\n    assert\
    \ candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  \
    \  assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2,\
    \ 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqg547b2r.py\"\
    , line 24, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqg547b2r.py\"\
    , line 22, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqg547b2r.py\"\
    , line 16, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqg547b2r.py\"\
    , line 8, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max_list = []\n    rolling_max_list.append(max(numbers))\n    for number\
    \ in numbers:\n        rolling_max_list.append(max(rolling_max_list[-1], number))\n\
    \    return rolling_max_list\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvn6cv1i_.py\"\
    , line 22, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvn6cv1i_.py\"\
    , line 20, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvn6cv1i_.py\"\
    , line 14, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvn6cv1i_.py\"\
    , line 8, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ \n    rolling_max = []\n    \n    for number in numbers:\n        rolling_max.append(number)\n\
    \        \n        rolling_max.append(max(rolling_max[-2:]))\n        \n    return\
    \ rolling_max\n\ndef check(candidate):\n    assert candidate([]) == []\n    assert\
    \ candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1])\
    \ == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\
    \ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2vs78j_3.py\"\
    , line 26, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2vs78j_3.py\"\
    , line 24, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2vs78j_3.py\"\
    , line 19, in check\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ \n    rolling_max_list = []\n    \n    for number in numbers:\n        rolling_max_list.append(number)\n\
    \        \n        rolling_max_list.append(max(rolling_max_list[-3:]))\n     \
    \   \n    return rolling_max_list\n</cell>\n<cell>\nrolling_max([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<cell>\nrolling_max([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])\n</cell>\n\
    <cell>\nrolling_max([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,\n\
    def check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnud3q0c5.py\"\
    , line 16\n    </cell>\n    ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max_list = []\n    rolling_max_list.append(max(numbers))\n    for number\
    \ in numbers:\n        rolling_max_list.append(max(rolling_max_list[-1], number))\n\
    \    return rolling_max_list\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8mww4exx.py\"\
    , line 22, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8mww4exx.py\"\
    , line 20, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8mww4exx.py\"\
    , line 14, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8mww4exx.py\"\
    , line 8, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max_list = []\n    rolling_max_list.append(max(numbers))\n    for num\
    \ in numbers:\n        rolling_max_list.append(max(rolling_max_list[-1], num))\n\
    \    return rolling_max_list\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuz2xoit8.py\"\
    , line 22, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuz2xoit8.py\"\
    , line 20, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuz2xoit8.py\"\
    , line 14, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuz2xoit8.py\"\
    , line 8, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max_list = []\n    rolling_max_list.append(max(numbers))\n    for number\
    \ in numbers:\n        rolling_max_list.append(max(rolling_max_list[-1], number))\n\
    \    return rolling_max_list\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmrpu005w.py\"\
    , line 22, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmrpu005w.py\"\
    , line 20, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmrpu005w.py\"\
    , line 14, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmrpu005w.py\"\
    , line 8, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max_list = []\n    rolling_max_list.append(max(numbers))\n    for index\
    \ in range(1, len(numbers)):\n        rolling_max_list.append(max(rolling_max_list[-1],\
    \ numbers[index]))\n    return rolling_max_list\n\ndef check(candidate):\n   \
    \ assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3,\
    \ 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3,\
    \ 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6f1n0mvk.py\"\
    , line 22, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6f1n0mvk.py\"\
    , line 20, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6f1n0mvk.py\"\
    , line 14, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6f1n0mvk.py\"\
    , line 8, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max_list = []\n    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    roll\ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2oalexf4.py\"\
    , line 74, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2oalexf4.py\"\
    , line 72, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2oalexf4.py\"\
    , line 66, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2oalexf4.py\"\
    , line 8, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max = []\n    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    roll\ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4k9jzk2f.py\"\
    , line 74, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4k9jzk2f.py\"\
    , line 72, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4k9jzk2f.py\"\
    , line 66, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4k9jzk2f.py\"\
    , line 8, in rolling_max\n    rolling_max.append(max(numbers))\nValueError: max()\
    \ arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max = []\n    rolling_max.append(max(numbers))\n    for number in numbers:\n\
    \        rolling_max.append(max(rolling_max[-1], number))\n    return rolling_max\n\
    \ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt1gdm8of.py\"\
    , line 22, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt1gdm8of.py\"\
    , line 20, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt1gdm8of.py\"\
    , line 14, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt1gdm8of.py\"\
    , line 8, in rolling_max\n    rolling_max.append(max(numbers))\nValueError: max()\
    \ arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max = []\n    rolling_max.append(max(numbers))\n    for number in numbers:\n\
    \        rolling_max.append(max(rolling_max[-1], number))\n    return rolling_max\n\
    \ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9li4o8pc.py\"\
    , line 22, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9li4o8pc.py\"\
    , line 20, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9li4o8pc.py\"\
    , line 14, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9li4o8pc.py\"\
    , line 8, in rolling_max\n    rolling_max.append(max(numbers))\nValueError: max()\
    \ arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max = []\n    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    roll\ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpltsaakyu.py\"\
    , line 74, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpltsaakyu.py\"\
    , line 72, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpltsaakyu.py\"\
    , line 66, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpltsaakyu.py\"\
    , line 8, in rolling_max\n    rolling_max.append(max(numbers))\nValueError: max()\
    \ arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ \n    rolling_max = []\n    \n    for i in range(len(numbers)):\n        rolling_max.append(max(numbers[i:]))\n\
    \    \n    return rolling_max\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4wsn2fzv.py\"\
    , line 24, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4wsn2fzv.py\"\
    , line 22, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4wsn2fzv.py\"\
    , line 17, in check\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max_list = []\n    rolling_max_list.append(max(numbers))\n    \n   \
    \ for number in numbers:\n        rolling_max_list.append(max(rolling_max_list[-1],\
    \ number))\n    \n    return rolling_max_list\n\ndef check(candidate):\n    assert\
    \ candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  \
    \  assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2,\
    \ 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmploe5226y.py\"\
    , line 24, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmploe5226y.py\"\
    , line 22, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmploe5226y.py\"\
    , line 16, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmploe5226y.py\"\
    , line 8, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max_list = []\n    rolling_max_list.append(max(numbers))\n    \n   \
    \ for number in numbers:\n        rolling_max_list.append(max(rolling_max_list[-1],\
    \ number))\n    \n    return rolling_max_list\n\ndef check(candidate):\n    assert\
    \ candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  \
    \  assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2,\
    \ 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg9jow6dp.py\"\
    , line 24, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg9jow6dp.py\"\
    , line 22, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg9jow6dp.py\"\
    , line 16, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg9jow6dp.py\"\
    , line 8, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max = []\n    rolling_max.append(max(numbers))\n    for i in range(len(numbers)):\n\
    \        rolling_max.append(max(rolling_max[-1], numbers[i]))\n    return rolling_max\n\
    \ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9rktf8od.py\"\
    , line 22, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9rktf8od.py\"\
    , line 20, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9rktf8od.py\"\
    , line 14, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9rktf8od.py\"\
    , line 8, in rolling_max\n    rolling_max.append(max(numbers))\nValueError: max()\
    \ arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max = []\n    rolling_max.append(max(numbers))\n    for num in numbers:\n\
    \        rolling_max.append(max(rolling_max[-1], num))\n    return rolling_max\n\
    \ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpajuyq0cn.py\"\
    , line 22, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpajuyq0cn.py\"\
    , line 20, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpajuyq0cn.py\"\
    , line 14, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpajuyq0cn.py\"\
    , line 8, in rolling_max\n    rolling_max.append(max(numbers))\nValueError: max()\
    \ arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_maxes = []\n    rolling_max = 0\n    for number in numbers:\n      \
    \  rolling_max = max(rolling_max, number)\n        rolling_maxes.append(rolling_max)\n\
    \    return rolling_maxes\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max = []\n    rolling_max.append(max(numbers))\n    for number in numbers:\n\
    \        rolling_max.append(max(rolling_max[-1], number))\n    return rolling_max\n\
    \ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqoj4rj4_.py\"\
    , line 22, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqoj4rj4_.py\"\
    , line 20, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqoj4rj4_.py\"\
    , line 14, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqoj4rj4_.py\"\
    , line 8, in rolling_max\n    rolling_max.append(max(numbers))\nValueError: max()\
    \ arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max = []\n    rolling_max.append(max(numbers))\n    for i in range(len(numbers)):\n\
    \        rolling_max.append(max(rolling_max[-1], numbers[i]))\n    return rolling_max\n\
    \ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpj3k_up22.py\"\
    , line 22, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpj3k_up22.py\"\
    , line 20, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpj3k_up22.py\"\
    , line 14, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpj3k_up22.py\"\
    , line 8, in rolling_max\n    rolling_max.append(max(numbers))\nValueError: max()\
    \ arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max_list = []\n    rolling_max_list.append(max(numbers))\n    \n   \
    \ for number in numbers:\n        rolling_max_list.append(max(rolling_max_list[-1],\
    \ number))\n    \n    return rolling_max_list\n\ndef check(candidate):\n    assert\
    \ candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  \
    \  assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2,\
    \ 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2v8f2ftk.py\"\
    , line 24, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2v8f2ftk.py\"\
    , line 22, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2v8f2ftk.py\"\
    , line 16, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2v8f2ftk.py\"\
    , line 8, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max_list = []\n    rolling_max_list.append(max(numbers))\n    for i\
    \ in range(len(numbers)):\n        rolling_max_list.append(max(rolling_max_list[-1],\
    \ numbers[i]))\n    return rolling_max_list\n\ndef check(candidate):\n    assert\
    \ candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  \
    \  assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2,\
    \ 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd00nk8mh.py\"\
    , line 22, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd00nk8mh.py\"\
    , line 20, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd00nk8mh.py\"\
    , line 14, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd00nk8mh.py\"\
    , line 8, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ \n    rolling_max_list = []\n    \n    for number in numbers:\n        rolling_max_list.append(number)\n\
    \        \n        rolling_max_list.append(max(rolling_max_list[-3:]))\n     \
    \   \n    return rolling_max_list\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3_i3qgfm.py\"\
    , line 26, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3_i3qgfm.py\"\
    , line 24, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3_i3qgfm.py\"\
    , line 19, in check\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max_list = []\n    rolling_max_list.append(max(numbers))\n    \n   \
    \ for num in numbers:\n        rolling_max_list.append(max(rolling_max_list[-1],\
    \ num))\n        \n    return rolling_max_list\n\ndef check(candidate):\n    assert\
    \ candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  \
    \  assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2,\
    \ 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3oqa5_zf.py\"\
    , line 24, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3oqa5_zf.py\"\
    , line 22, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3oqa5_zf.py\"\
    , line 16, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3oqa5_zf.py\"\
    , line 8, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max_list = []\n    rolling_max_list.append(max(numbers))\n    for i\
    \ in range(len(numbers)):\n        rolling_max_list.append(max(rolling_max_list[-1],\
    \ numbers[i]))\n    return rolling_max_list\n\ndef check(candidate):\n    assert\
    \ candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  \
    \  assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2,\
    \ 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5q63q6l1.py\"\
    , line 22, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5q63q6l1.py\"\
    , line 20, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5q63q6l1.py\"\
    , line 14, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5q63q6l1.py\"\
    , line 8, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max_list = []\n    rolling_max_list.append(max(numbers))\n    \n   \
    \ for index in range(1, len(numbers)):\n        rolling_max_list.append(max(rolling_max_list[-1],\
    \ numbers[index]))\n    \n    return rolling_max_list\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2,\
    \ 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3,\
    \ 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx4x30scu.py\"\
    , line 24, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx4x30scu.py\"\
    , line 22, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx4x30scu.py\"\
    , line 16, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx4x30scu.py\"\
    , line 8, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ \n    rolling_max_list = []\n    \n    for i in range(len(numbers)):\n     \
    \   rolling_max_list.append(max(numbers[i:]))\n        \n    return rolling_max_list\n\
    </cell>\n<cell>\nrolling_max([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<cell>\nrolling_max([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<cell>\nrolling_max([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100])\n\
    </cell>\n<cell>\nrolling_max([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100])\n\
    </cell>\n<cell>\nrolling_max([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66\n\
    def check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyoq3_kek.py\"\
    , line 14\n    </cell>\n    ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ \n    rolling_max_list = []\n    \n    for number in numbers:\n        rolling_max_list.append(number)\n\
    \        \n        rolling_max_list.append(max(rolling_max_list[-3:]))\n     \
    \   \n        rolling_max_list.append(max(rolling_max_list[-6:]))\n        \n\
    \        rolling_max_list.append(max(rolling_max_list[-9:]))\n        \n     \
    \   rolling_max_list.append(max(rolling_max_list[-12:]))\n        \n        rolling_max_list.append(max(rolling_max_list[-15:]))\n\
    \        \n        rolling_max_list.append(max(rolling_max_list[-18:]))\n    \
    \    \n        rolling_max_list.append(max(rolling_max_list[-21:]))\n        \n\
    \        rolling_max_list.append(max(rolling_max_list[-24:]))\n        \n    \
    \    rolling_max_list.append(max(rolling_max_list[-27:]))\n        \n        rolling_max_list.append(max(rolling_max_list[-30:]))\n\
    \        \n        rolling_max_list.append(max(rolling_max_list[-33:]))\n    \
    \    \n        rolling_max_list.append(max(rolling_max_list[-36:]))\n        \n\
    \        rolling_max_list.append(max(rolling_max_list[-39:]))\n        \n    \
    \    rolling_max_list.append(max(rolling_max_list[-42:]))\n        \n        rolling_max_list.append(max(rolling_max_list[-45:]))\n\
    \        \n        rolling_max_list.append(max(rolling_max_list[-48:]))\n    \
    \    \n        rolling_max_list.append(max(rolling_max_list[-51:]))\n        \n\
    \        rolling_max_list.append(max(rolling_max_list[-54:]))\n        \n    \
    \    rolling_max_list.append(max(rolling_max_list[-57:]))\n        \n        rolling_max_list.append(max(rolling_max_list[-60:]))\n\
    \        \n        rolling_max_list.append(max(rolling_max_list[-63:]))\n    \
    \    \n        rolling_max_list.append(max(rolling_max_list[-66:]))\n        \n\
    \        rolling_max_list.append(max(rolling_max_list[-69:]))\n        \n    \
    \    rolling_max_list.append(max(rolling_max_list[-72:]))\n        \n        rolling_max_list.append(max(rolling_max_list[-75:]))\n\
    \        \n        rolling_max_list.append(max(rolling_max_list[-78:]))\n    \
    \    \n        rolling_max_list.append(max(rolling_max_list[-81:]))\n        \n\
    \        rolling_max_list.append(max(rolling_max_list[-84:]))\n        \n    \
    \    rolling_max_list.append(max(rolling_max_list[-87:]))\n        \n        roll\n\
    def check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprqruqg47.py\"\
    , line 81, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprqruqg47.py\"\
    , line 79, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprqruqg47.py\"\
    , line 73, in check\n    assert candidate([]) == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max = []\n    rolling_max.append(max(numbers))\n    for number in numbers:\n\
    \        rolling_max.append(max(rolling_max[-1], number))\n    return rolling_max\n\
    \ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpi2lxmge6.py\"\
    , line 22, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpi2lxmge6.py\"\
    , line 20, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpi2lxmge6.py\"\
    , line 14, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpi2lxmge6.py\"\
    , line 8, in rolling_max\n    rolling_max.append(max(numbers))\nValueError: max()\
    \ arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max_list = []\n    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    roll\ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9iydruaq.py\"\
    , line 74, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9iydruaq.py\"\
    , line 72, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9iydruaq.py\"\
    , line 66, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9iydruaq.py\"\
    , line 8, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max = []\n    rolling_max.append(max(numbers))\n    \n    for number\
    \ in numbers:\n        rolling_max.append(max(rolling_max[-1], number))\n    \n\
    \    return rolling_max\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpaqfr2kli.py\"\
    , line 24, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpaqfr2kli.py\"\
    , line 22, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpaqfr2kli.py\"\
    , line 16, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpaqfr2kli.py\"\
    , line 8, in rolling_max\n    rolling_max.append(max(numbers))\nValueError: max()\
    \ arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max = []\n    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    rolling_max.append(max(numbers))\n    rolling_max.append(max(numbers))\n\
    \    roll\ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl5wmwp3c.py\"\
    , line 74, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl5wmwp3c.py\"\
    , line 72, in test_check\n    check(rolling_max)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl5wmwp3c.py\"\
    , line 66, in check\n    assert candidate([]) == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl5wmwp3c.py\"\
    , line 8, in rolling_max\n    rolling_max.append(max(numbers))\nValueError: max()\
    \ arg is an empty sequence\n"
  exit_code: -1
  status: Exception
