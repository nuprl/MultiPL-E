name: HumanEval_7_filter_by_substring
language: py
results:
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
