name: HumanEval_2_truncate_number
language: py
results:
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ integer_part = int(number)\n    decimal_part = number - integer_part\n    return\
    \ decimal_part\n\n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n\
    \    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\ndef\
    \ test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ int_part = int(number)\n    decimal_part = number - int_part\n    return decimal_part\n\
    \n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ integer_part = int(number)\n    decimal_part = number - integer_part\n    return\
    \ decimal_part\n\n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n\
    \    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\ndef\
    \ test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ int_part = int(number)\n    decimal_part = number - int_part\n    return decimal_part\n\
    \n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ integer_part = int(number)\n    decimal_part = number - integer_part\n    return\
    \ decimal_part\n\n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n\
    \    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\ndef\
    \ test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ integer_part = int(number)\n    decimal_part = number - integer_part\n    return\
    \ decimal_part\n\n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n\
    \    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\ndef\
    \ test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ integer_part = int(number)\n    decimal_part = number - integer_part\n    return\
    \ decimal_part\n\n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n\
    \    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\ndef\
    \ test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ int_part = int(number)\n    decimal_part = number - int_part\n    return decimal_part\n\
    \n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ integer_part = int(number)\n    decimal_part = number - integer_part\n    return\
    \ decimal_part\n\n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n\
    \    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\ndef\
    \ test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ integer_part = int(number)\n    decimal_part = number - integer_part\n    return\
    \ decimal_part\n\n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n\
    \    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\ndef\
    \ test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ integer_part = int(number)\n    decimal_part = number - integer_part\n    return\
    \ decimal_part\n\n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n\
    \    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\ndef\
    \ test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ decimals = math.fmod(number, 1)\n    integer = math.floor(number)\n    return\
    \ integer + decimals\n\n\ndef check(candidate):\n    assert candidate(3.5) ==\
    \ 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5qxzsp0r.py\"\
    , line 21, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5qxzsp0r.py\"\
    , line 19, in test_check\n    check(truncate_number)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5qxzsp0r.py\"\
    , line 14, in check\n    assert candidate(3.5) == 0.5\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5qxzsp0r.py\"\
    , line 8, in truncate_number\n    decimals = math.fmod(number, 1)\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ integer_part = int(number)\n    decimal_part = number - integer_part\n    return\
    \ decimal_part\n\n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n\
    \    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\ndef\
    \ test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ integer_part = int(number)\n    decimal_part = number - integer_part\n    return\
    \ decimal_part\n\n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n\
    \    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\ndef\
    \ test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ decimals = math.floor(math.log10(number))\n    return number / (10 ** decimals)\n\
    \n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpr1jq_6i0.py\"\
    , line 20, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpr1jq_6i0.py\"\
    , line 18, in test_check\n    check(truncate_number)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpr1jq_6i0.py\"\
    , line 13, in check\n    assert candidate(3.5) == 0.5\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpr1jq_6i0.py\"\
    , line 8, in truncate_number\n    decimals = math.floor(math.log10(number))\n\
    NameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ integer_part = int(number)\n    decimal_part = number - integer_part\n    return\
    \ decimal_part\n\n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n\
    \    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\ndef\
    \ test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ integer_part = int(number)\n    decimal_part = number - integer_part\n    return\
    \ decimal_part\n\n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n\
    \    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\ndef\
    \ test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ integer_part = int(number)\n    decimal_part = number - integer_part\n    return\
    \ decimal_part\n\n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n\
    \    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\ndef\
    \ test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ number = float(number)\n    integer = int(number)\n    decimal = number - integer\n\
    \    return decimal\n\n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n\
    \    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\ndef\
    \ test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ decimals = math.modf(number)[0]\n    return number - decimals\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf1udcmwa.py\"\
    , line 20, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf1udcmwa.py\"\
    , line 18, in test_check\n    check(truncate_number)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf1udcmwa.py\"\
    , line 13, in check\n    assert candidate(3.5) == 0.5\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf1udcmwa.py\"\
    , line 8, in truncate_number\n    decimals = math.modf(number)[0]\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ decimals = math.floor(math.log10(number))\n    return number / 10 ** decimals\n\
    \n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp66_ziisp.py\"\
    , line 20, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp66_ziisp.py\"\
    , line 18, in test_check\n    check(truncate_number)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp66_ziisp.py\"\
    , line 13, in check\n    assert candidate(3.5) == 0.5\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp66_ziisp.py\"\
    , line 8, in truncate_number\n    decimals = math.floor(math.log10(number))\n\
    NameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ decimals = math.fmod(number, 1)\n    integer = math.floor(number)\n    return\
    \ integer + decimals\n\n\ndef check(candidate):\n    assert candidate(3.5) ==\
    \ 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbs8itw2u.py\"\
    , line 21, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbs8itw2u.py\"\
    , line 19, in test_check\n    check(truncate_number)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbs8itw2u.py\"\
    , line 14, in check\n    assert candidate(3.5) == 0.5\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbs8itw2u.py\"\
    , line 8, in truncate_number\n    decimals = math.fmod(number, 1)\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ int_part = int(number)\n    decimal_part = number - int_part\n    return decimal_part\n\
    \n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number) if number < 0 else number\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprwcotn6t.py\"\
    , line 19, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprwcotn6t.py\"\
    , line 17, in test_check\n    check(truncate_number)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprwcotn6t.py\"\
    , line 12, in check\n    assert candidate(3.5) == 0.5\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ int_part = int(number)\n    decimal_part = number - int_part\n    return decimal_part\n\
    \n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ decimals = math.modf(number)[0]\n    return number - decimals\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm_e4mnmh.py\"\
    , line 20, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm_e4mnmh.py\"\
    , line 18, in test_check\n    check(truncate_number)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm_e4mnmh.py\"\
    , line 13, in check\n    assert candidate(3.5) == 0.5\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm_e4mnmh.py\"\
    , line 8, in truncate_number\n    decimals = math.modf(number)[0]\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ int_part = int(number)\n    decimal_part = number - int_part\n    return decimal_part\n\
    \n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ decimal = number % 1\n    number = number - decimal\n    return number\n\n\n\
    def check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzuz6ze0k.py\"\
    , line 21, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzuz6ze0k.py\"\
    , line 19, in test_check\n    check(truncate_number)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzuz6ze0k.py\"\
    , line 14, in check\n    assert candidate(3.5) == 0.5\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ int_part = int(number)\n    decimal_part = number - int_part\n    return decimal_part\n\
    \n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ number = float(number)\n    integer_part = int(number)\n    decimal_part = number\
    \ - integer_part\n    return decimal_part\n\n\ndef check(candidate):\n    assert\
    \ candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0)\
    \ == 0.0\n\ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ integer_part = int(number)\n    decimal_part = number - integer_part\n    return\
    \ decimal_part\n\n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n\
    \    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\ndef\
    \ test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ int_part = int(number)\n    decimal_part = number - int_part\n    return decimal_part\n\
    \n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ integer_part = int(number)\n    decimal_part = number - integer_part\n    return\
    \ decimal_part\n\n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n\
    \    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\ndef\
    \ test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ integer_part = int(number)\n    decimal_part = number - integer_part\n    return\
    \ decimal_part\n\n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n\
    \    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\ndef\
    \ test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ decimals = math.floor(math.log10(number))\n    return number / 10**decimals\n\
    \n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpywu2lq_e.py\"\
    , line 20, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpywu2lq_e.py\"\
    , line 18, in test_check\n    check(truncate_number)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpywu2lq_e.py\"\
    , line 13, in check\n    assert candidate(3.5) == 0.5\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpywu2lq_e.py\"\
    , line 8, in truncate_number\n    decimals = math.floor(math.log10(number))\n\
    NameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ int_part = int(number)\n    decimal_part = number - int_part\n    return decimal_part\n\
    \n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ int_part = int(number)\n    decimal_part = number - int_part\n    return decimal_part\n\
    \n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ integer_part = int(number)\n    decimal_part = number - integer_part\n    return\
    \ decimal_part\n\n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n\
    \    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\ndef\
    \ test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ decimals = math.floor(math.log10(number))\n    decimals = decimals if decimals\
    \ > 0 else 0\n    decimals = decimals if decimals < 6 else 6\n    decimals = decimals\
    \ + 1\n    number = round(number, decimals)\n    return number\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp0ohymlq.py\"\
    , line 24, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp0ohymlq.py\"\
    , line 22, in test_check\n    check(truncate_number)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp0ohymlq.py\"\
    , line 17, in check\n    assert candidate(3.5) == 0.5\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp0ohymlq.py\"\
    , line 8, in truncate_number\n    decimals = math.floor(math.log10(number))\n\
    NameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ int_part = int(number)\n    decimal_part = number - int_part\n    return decimal_part\n\
    \n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ integer_part = int(number)\n    decimal_part = number - integer_part\n    return\
    \ decimal_part\n\n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n\
    \    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\ndef\
    \ test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ decimals = 0.0\n    integer = 0.0\n    exponent = 0.0\n    sign = 1.0\n\n  \
    \  if number < 0.0:\n        sign = -1.0\n        number = -number\n\n    if number\
    \ == 0.0:\n        return 0.0\n\n    exponent = math.floor(math.log(number, 10))\n\
    \    integer = number / math.pow(10.0, exponent)\n    decimals = exponent - math.floor(exponent)\n\
    \n    return sign * integer + decimals\n\n\ndef check(candidate):\n    assert\
    \ candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0)\
    \ == 0.0\n\ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9__z_bo1.py\"\
    , line 35, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9__z_bo1.py\"\
    , line 33, in test_check\n    check(truncate_number)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9__z_bo1.py\"\
    , line 28, in check\n    assert candidate(3.5) == 0.5\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9__z_bo1.py\"\
    , line 20, in truncate_number\n    exponent = math.floor(math.log(number, 10))\n\
    NameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ decimals = math.floor(math.log10(number))\n    return number / (10 ** decimals)\n\
    \n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5p20em18.py\"\
    , line 20, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5p20em18.py\"\
    , line 18, in test_check\n    check(truncate_number)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5p20em18.py\"\
    , line 13, in check\n    assert candidate(3.5) == 0.5\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5p20em18.py\"\
    , line 8, in truncate_number\n    decimals = math.floor(math.log10(number))\n\
    NameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ int_part = int(number)\n    decimal_part = number - int_part\n    return decimal_part\n\
    \n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ integer_part = int(number)\n    decimal_part = number - integer_part\n    return\
    \ decimal_part\n\n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n\
    \    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\ndef\
    \ test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ int_part = int(number)\n    decimal_part = number - int_part\n    return decimal_part\n\
    \n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ int_part = int(number)\n    decimal_part = number - int_part\n    return decimal_part\n\
    \n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ int_part = int(number)\n    decimal_part = number - int_part\n    return decimal_part\n\
    \n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ int_part = int(number)\n    decimal_part = number - int_part\n    return decimal_part\n\
    \n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ integer_part = int(number)\n    decimal_part = number - integer_part\n    return\
    \ decimal_part\n\n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n\
    \    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\ndef\
    \ test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ integer_part = int(number)\n    decimal_part = number - integer_part\n    return\
    \ decimal_part\n\n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n\
    \    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\ndef\
    \ test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ int_part = int(number)\n    decimal_part = number - int_part\n    return decimal_part\n\
    \n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number) if number > 0 else 0\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ decimals = math.floor(math.log10(number))\n    number = round(number, decimals)\n\
    \    return number\n\n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n\
    \    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\ndef\
    \ test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsuc6wt5r.py\"\
    , line 21, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsuc6wt5r.py\"\
    , line 19, in test_check\n    check(truncate_number)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsuc6wt5r.py\"\
    , line 14, in check\n    assert candidate(3.5) == 0.5\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsuc6wt5r.py\"\
    , line 8, in truncate_number\n    decimals = math.floor(math.log10(number))\n\
    NameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ number = float(number)\n    integer_part = int(number)\n    decimal_part = number\
    \ - integer_part\n    return decimal_part\n\n\ndef check(candidate):\n    assert\
    \ candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0)\
    \ == 0.0\n\ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ integer_part = int(number)\n    decimal_part = number - integer_part\n    return\
    \ decimal_part\n\n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n\
    \    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\ndef\
    \ test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ int_part = int(number)\n    decimal_part = number - int_part\n    return decimal_part\n\
    \n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ decimals = math.modf(number)[0]\n    return number - decimals\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd7hw_77t.py\"\
    , line 20, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd7hw_77t.py\"\
    , line 18, in test_check\n    check(truncate_number)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd7hw_77t.py\"\
    , line 13, in check\n    assert candidate(3.5) == 0.5\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd7hw_77t.py\"\
    , line 8, in truncate_number\n    decimals = math.modf(number)[0]\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ integer_part = int(number)\n    decimal_part = number - integer_part\n    return\
    \ decimal_part\n\n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n\
    \    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\ndef\
    \ test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ int_part = int(number)\n    decimal_part = number - int_part\n    return decimal_part\n\
    \n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ integer_part = int(number)\n    decimal_part = number - integer_part\n    return\
    \ decimal_part\n\n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n\
    \    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\ndef\
    \ test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ integer_part = int(number)\n    decimal_part = number - integer_part\n    return\
    \ decimal_part\n\n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n\
    \    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\ndef\
    \ test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ decimals = math.fmod(number, 1)\n    integer = math.floor(number)\n    if decimals\
    \ > 0.5:\n        decimals = math.floor(decimals + 0.5)\n    else:\n        decimals\
    \ = math.ceil(decimals + 0.5)\n    return float(integer) + decimals\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz8o0lb24.py\"\
    , line 25, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz8o0lb24.py\"\
    , line 23, in test_check\n    check(truncate_number)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz8o0lb24.py\"\
    , line 18, in check\n    assert candidate(3.5) == 0.5\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz8o0lb24.py\"\
    , line 8, in truncate_number\n    decimals = math.fmod(number, 1)\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ int_part, decimal = math.modf(number)\n    return decimal\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpir_t4sr0.py\"\
    , line 20, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpir_t4sr0.py\"\
    , line 18, in test_check\n    check(truncate_number)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpir_t4sr0.py\"\
    , line 13, in check\n    assert candidate(3.5) == 0.5\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpir_t4sr0.py\"\
    , line 8, in truncate_number\n    int_part, decimal = math.modf(number)\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ decimals = math.floor(math.log10(number))\n    return number / 10**decimals\n\
    \n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps_zbyqxt.py\"\
    , line 20, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps_zbyqxt.py\"\
    , line 18, in test_check\n    check(truncate_number)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps_zbyqxt.py\"\
    , line 13, in check\n    assert candidate(3.5) == 0.5\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps_zbyqxt.py\"\
    , line 8, in truncate_number\n    decimals = math.floor(math.log10(number))\n\
    NameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ int_part = int(number)\n    decimal_part = number - int_part\n    return decimal_part\n\
    \n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ int_part = int(number)\n    decimal_part = number - int_part\n    return decimal_part\n\
    \n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ integer_part = int(number)\n    decimal_part = number - integer_part\n    return\
    \ decimal_part\n\n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n\
    \    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\ndef\
    \ test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ int_part = int(number)\n    decimal_part = number - int_part\n    return decimal_part\n\
    \n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ int_part = int(number)\n    decimal_part = number - int_part\n    return decimal_part\n\
    \n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ int_part = int(number)\n    decimal_part = number - int_part\n    return decimal_part\n\
    \n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ integer_part = int(number)\n    decimal_part = number - integer_part\n    return\
    \ decimal_part\n\n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n\
    \    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\ndef\
    \ test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ int_part = int(number)\n    decimal_part = number - int_part\n    return decimal_part\n\
    \n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ integer_part = int(number)\n    decimal_part = number - integer_part\n    return\
    \ decimal_part\n\n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n\
    \    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\ndef\
    \ test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ int_part = int(number)\n    decimal_part = number - int_part\n    return decimal_part\n\
    \n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ number = float(number)\n    integer_part = int(number)\n    decimal_part = number\
    \ - integer_part\n    return decimal_part\n\n\ndef check(candidate):\n    assert\
    \ candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0)\
    \ == 0.0\n\ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ decimals = math.floor(math.log10(number))\n    number = round(number, decimals)\n\
    \    return number\n\n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n\
    \    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\ndef\
    \ test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfmnjgh65.py\"\
    , line 21, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfmnjgh65.py\"\
    , line 19, in test_check\n    check(truncate_number)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfmnjgh65.py\"\
    , line 14, in check\n    assert candidate(3.5) == 0.5\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfmnjgh65.py\"\
    , line 8, in truncate_number\n    decimals = math.floor(math.log10(number))\n\
    NameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ int_part = int(number)\n    decimal_part = number - int_part\n    return decimal_part\n\
    \n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ integer_part = int(number)\n    decimal_part = number - integer_part\n    return\
    \ decimal_part\n\n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n\
    \    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\ndef\
    \ test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ decimals = math.floor(math.log10(number))\n    integer = number / 10 ** decimals\n\
    \    return integer\n\n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n\
    \    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\ndef\
    \ test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0affvn98.py\"\
    , line 21, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0affvn98.py\"\
    , line 19, in test_check\n    check(truncate_number)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0affvn98.py\"\
    , line 14, in check\n    assert candidate(3.5) == 0.5\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0affvn98.py\"\
    , line 8, in truncate_number\n    decimals = math.floor(math.log10(number))\n\
    NameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ int_part = int(number)\n    decimal_part = number - int_part\n    return decimal_part\n\
    \n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ decimals = math.floor(math.log10(number))\n    decimals = decimals if decimals\
    \ > 0 else 0\n    decimals = decimals if decimals < 3 else 3\n    decimals = decimals\
    \ if decimals > 0 else 0\n    decimals = decimals if decimals < 3 else 3\n   \
    \ decimals = decimals if decimals > 0 else 0\n    decimals = decimals if decimals\
    \ < 3 else 3\n    decimals = decimals if decimals > 0 else 0\n    decimals = decimals\
    \ if decimals < 3 else 3\n    decimals = decimals if decimals > 0 else 0\n   \
    \ decimals = decimals if decimals < 3 else 3\n    decimals = decimals if decimals\
    \ > 0 else 0\n    decimals = decimals if decimals < 3 else 3\n    decimals = decimals\
    \ if decimals > 0 else 0\n    decimals = decimals if decimals < 3 else 3\n   \
    \ decimals = decimals if decimals > 0 else 0\n    decimals = decimals if decimals\
    \ < 3 else 3\n    decimals = decimals if decimals > 0 else 0\n    decimals = decimals\
    \ if decimals < 3 else 3\n    decimals = decimals if decimals > 0 else 0\n   \
    \ decimals = decimals if decimals < 3 else 3\n    decimals = decimals if decimals\
    \ > 0 else 0\n    decimals = decimals if decimals < 3 else 3\n    decimals = decimals\
    \ if decimals > 0 else 0\n    decimals = decimals if decimals < 3 else 3\n   \
    \ decimals = decimals if decimals > 0 else 0\n    decimals = decimals if decimals\
    \ < 3 else 3\n    decimals = decimals if decimals > 0 else 0\n    decimals = decimals\
    \ if decimals < 3 else 3\n    decimals = decimals if decimals > 0 else 0\n   \
    \ decimals = decimals if decimals < 3 else 3\n    decimals = decimals if decimals\
    \ > 0 else 0\n    decimals = decimals if decimals < 3 else 3\n    decimals = decimals\
    \ if decimals > 0 else 0\n    decimals = decimals if decimals < 3 else 3\n   \
    \ decimals = decimals if decimals > 0 else 0\n    decimals = decimals if decimals\
    \ < 3 else 3\n    decimals = decimals if decimals > 0 else 0\n    decimals = decimals\
    \ if decimals < 3 else 3\n    decimals = decimals if decimals > 0 else 0\n   \
    \ decimals = decimals if decimals < 3 else 3\n    decimals = decimals if decimals\
    \ > 0 else 0\n    decimals = decimals if decimals < 3 else 3\n    decimals = decimals\
    \ if decimals > 0 else 0\n    decimals = decimals if decimals < 3 else 3\n   \
    \ decimals = decimals if decimals > 0 else 0\n    decimals = decimals if decimals\
    \ < 3 else 3\n    decimals = decimals if decimals > 0 else 0\n    decimals = decimals\
    \ if decimals < 3 \ndef check(candidate):\n    assert candidate(3.5) == 0.5\n\
    \    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\ndef\
    \ test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnp72j8pe.py\"\
    , line 56\n    decimals = decimals if decimals < 3 \n               ^^^^^^^^^^^^^^^^^^^^^^^^\n\
    SyntaxError: expected 'else' after 'if' expression\n"
  exit_code: 1
  status: SyntaxError
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ int_part = int(number)\n    decimal_part = number - int_part\n    return decimal_part\n\
    \n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ int_part, decimal_part = math.modf(number)\n    return decimal_part\n\n\ndef\
    \ check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpodpjxczf.py\"\
    , line 20, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpodpjxczf.py\"\
    , line 18, in test_check\n    check(truncate_number)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpodpjxczf.py\"\
    , line 13, in check\n    assert candidate(3.5) == 0.5\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpodpjxczf.py\"\
    , line 8, in truncate_number\n    int_part, decimal_part = math.modf(number)\n\
    NameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ decimal = number - int(number)\n    return decimal\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ int_part = int(number)\n    decimal_part = number - int_part\n    return decimal_part\n\
    \n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ int_part = int(number)\n    decimal_part = number - int_part\n    return decimal_part\n\
    \n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ int_part = int(number)\n    decimal_part = number - int_part\n    return decimal_part\n\
    \n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ int_part = int(number)\n    decimal_part = number - int_part\n    return decimal_part\n\
    \n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ int_part = int(number)\n    decimal_part = number - int_part\n    return decimal_part\n\
    \n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number) if number < 0 else number\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvju0wzo7.py\"\
    , line 19, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvju0wzo7.py\"\
    , line 17, in test_check\n    check(truncate_number)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvju0wzo7.py\"\
    , line 12, in check\n    assert candidate(3.5) == 0.5\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ int_part = int(number)\n    decimal_part = number - int_part\n    return decimal_part\n\
    \n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ decimals = math.floor(math.log10(number))\n    return number / 10**decimals\n\
    \n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpusydbyxn.py\"\
    , line 20, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpusydbyxn.py\"\
    , line 18, in test_check\n    check(truncate_number)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpusydbyxn.py\"\
    , line 13, in check\n    assert candidate(3.5) == 0.5\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpusydbyxn.py\"\
    , line 8, in truncate_number\n    decimals = math.floor(math.log10(number))\n\
    NameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return float(number) - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ integer_part = int(number)\n    decimal_part = number - integer_part\n    return\
    \ decimal_part\n\n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n\
    \    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\ndef\
    \ test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ decimals = math.floor(math.log10(number))\n    return number / 10 ** decimals\n\
    \n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp82irgwu9.py\"\
    , line 20, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp82irgwu9.py\"\
    , line 18, in test_check\n    check(truncate_number)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp82irgwu9.py\"\
    , line 13, in check\n    assert candidate(3.5) == 0.5\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp82irgwu9.py\"\
    , line 8, in truncate_number\n    decimals = math.floor(math.log10(number))\n\
    NameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ int_part = int(number)\n    decimal_part = number - int_part\n    return decimal_part\n\
    \n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ int_part = int(number)\n    decimal_part = number - int_part\n    return decimal_part\n\
    \n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ decimals = math.floor(math.log10(number))\n    return number / 10 ** decimals\n\
    \n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf6qe9f5q.py\"\
    , line 20, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf6qe9f5q.py\"\
    , line 18, in test_check\n    check(truncate_number)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf6qe9f5q.py\"\
    , line 13, in check\n    assert candidate(3.5) == 0.5\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf6qe9f5q.py\"\
    , line 8, in truncate_number\n    decimals = math.floor(math.log10(number))\n\
    NameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ int_part = int(number)\n    decimal_part = number - int_part\n    return decimal_part\n\
    \n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ decimals = math.floor(math.log10(number))\n    number = round(number, decimals)\n\
    \    return number\n\n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n\
    \    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\ndef\
    \ test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpspybey3j.py\"\
    , line 21, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpspybey3j.py\"\
    , line 19, in test_check\n    check(truncate_number)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpspybey3j.py\"\
    , line 14, in check\n    assert candidate(3.5) == 0.5\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpspybey3j.py\"\
    , line 8, in truncate_number\n    decimals = math.floor(math.log10(number))\n\
    NameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ number = float(number)\n    decimals = math.floor(math.log10(number))\n    decimals\
    \ = decimals + 1 if decimals % 2 == 0 else decimals\n    decimals = decimals if\
    \ decimals <= 3 else decimals - 1\n    return number / 10 ** decimals\n\n\ndef\
    \ check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3mx5622n.py\"\
    , line 23, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3mx5622n.py\"\
    , line 21, in test_check\n    check(truncate_number)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3mx5622n.py\"\
    , line 16, in check\n    assert candidate(3.5) == 0.5\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3mx5622n.py\"\
    , line 9, in truncate_number\n    decimals = math.floor(math.log10(number))\n\
    NameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ integer_part = int(number)\n    decimal_part = number - integer_part\n    return\
    \ decimal_part\n\n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n\
    \    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\ndef\
    \ test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number) if number > 0 else 0\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ decimals = math.floor(math.log10(number))\n    return number / (10**decimals)\n\
    \n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6xpoovd3.py\"\
    , line 20, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6xpoovd3.py\"\
    , line 18, in test_check\n    check(truncate_number)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6xpoovd3.py\"\
    , line 13, in check\n    assert candidate(3.5) == 0.5\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6xpoovd3.py\"\
    , line 8, in truncate_number\n    decimals = math.floor(math.log10(number))\n\
    NameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ int_part = int(number)\n    decimal_part = number - int_part\n    return decimal_part\n\
    \n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ int_part = int(number)\n    decimal_part = number - int_part\n    return decimal_part\n\
    \n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ int_part = int(number)\n    decimal_part = number - int_part\n    return decimal_part\n\
    \n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ int_part = int(number)\n    decimal_part = number - int_part\n    return decimal_part\n\
    \n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ decimals = math.floor((number - math.floor(number)) * 100)\n    return number\
    \ - decimals\n\n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n  \
    \  assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n\
    \    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3sgnxx1a.py\"\
    , line 20, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3sgnxx1a.py\"\
    , line 18, in test_check\n    check(truncate_number)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3sgnxx1a.py\"\
    , line 13, in check\n    assert candidate(3.5) == 0.5\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3sgnxx1a.py\"\
    , line 8, in truncate_number\n    decimals = math.floor((number - math.floor(number))\
    \ * 100)\nNameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ int_part, decimal = math.modf(number)\n    return decimal\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2wziyfma.py\"\
    , line 20, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2wziyfma.py\"\
    , line 18, in test_check\n    check(truncate_number)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2wziyfma.py\"\
    , line 13, in check\n    assert candidate(3.5) == 0.5\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2wziyfma.py\"\
    , line 8, in truncate_number\n    int_part, decimal = math.modf(number)\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ int_part, decimal = math.modf(number)\n    return decimal\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdy5w8f6_.py\"\
    , line 20, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdy5w8f6_.py\"\
    , line 18, in test_check\n    check(truncate_number)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdy5w8f6_.py\"\
    , line 13, in check\n    assert candidate(3.5) == 0.5\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdy5w8f6_.py\"\
    , line 8, in truncate_number\n    int_part, decimal = math.modf(number)\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ decimals = math.floor(math.log10(number))\n    decimals = decimals if decimals\
    \ > 0 else 0\n    decimals = decimals if decimals < 6 else 6\n    decimals = decimals\
    \ if number < 1 else 1\n    return number / 10 ** decimals\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplh5lrwah.py\"\
    , line 23, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplh5lrwah.py\"\
    , line 21, in test_check\n    check(truncate_number)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplh5lrwah.py\"\
    , line 16, in check\n    assert candidate(3.5) == 0.5\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplh5lrwah.py\"\
    , line 8, in truncate_number\n    decimals = math.floor(math.log10(number))\n\
    NameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ decimals = math.modf(number)[0]\n    integer = 0\n    if decimals > 0:\n   \
    \     integer = math.trunc(number)\n    return integer + decimals\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbtdyut83.py\"\
    , line 23, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbtdyut83.py\"\
    , line 21, in test_check\n    check(truncate_number)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbtdyut83.py\"\
    , line 16, in check\n    assert candidate(3.5) == 0.5\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbtdyut83.py\"\
    , line 8, in truncate_number\n    decimals = math.modf(number)[0]\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ decimals = math.floor(math.log10(number))\n    number = round(number, decimals)\n\
    \    return number\n\n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n\
    \    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\ndef\
    \ test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzqk84yx9.py\"\
    , line 21, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzqk84yx9.py\"\
    , line 19, in test_check\n    check(truncate_number)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzqk84yx9.py\"\
    , line 14, in check\n    assert candidate(3.5) == 0.5\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzqk84yx9.py\"\
    , line 8, in truncate_number\n    decimals = math.floor(math.log10(number))\n\
    NameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ int_part = int(number)\n    decimal_part = number - int_part\n    return decimal_part\n\
    \n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ int_part = int(number)\n    decimal_part = number - int_part\n    return decimal_part\n\
    \n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ decimals = math.floor(math.log10(number))\n    int_part = number / 10 ** decimals\n\
    \    return int_part\n\n\ndef check(candidate):\n    assert candidate(3.5) ==\
    \ 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa6qa6js4.py\"\
    , line 21, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa6qa6js4.py\"\
    , line 19, in test_check\n    check(truncate_number)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa6qa6js4.py\"\
    , line 14, in check\n    assert candidate(3.5) == 0.5\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa6qa6js4.py\"\
    , line 8, in truncate_number\n    decimals = math.floor(math.log10(number))\n\
    NameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ decimals = 0.0\n    if number < 1.0:\n        decimals = math.floor(math.log(number)\
    \ / math.log10)\n    return number - decimals * math.pow(10, -decimals)\n\n\n\
    def check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe6rq2kih.py\"\
    , line 22, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe6rq2kih.py\"\
    , line 20, in test_check\n    check(truncate_number)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe6rq2kih.py\"\
    , line 15, in check\n    assert candidate(3.5) == 0.5\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe6rq2kih.py\"\
    , line 11, in truncate_number\n    return number - decimals * math.pow(10, -decimals)\n\
    NameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ int_part = int(number)\n    decimal_part = number - int_part\n    return decimal_part\n\
    \n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ int_part = int(number)\n    decimal_part = number - int_part\n    return decimal_part\n\
    \n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ decimals = math.floor(math.log10(number))\n    decimals = decimals if decimals\
    \ > 0 else 0\n    return number / (10 ** decimals)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprbi4klsr.py\"\
    , line 21, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprbi4klsr.py\"\
    , line 19, in test_check\n    check(truncate_number)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprbi4klsr.py\"\
    , line 14, in check\n    assert candidate(3.5) == 0.5\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprbi4klsr.py\"\
    , line 8, in truncate_number\n    decimals = math.floor(math.log10(number))\n\
    NameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ decimals = math.modf(number)[0]\n    return number - decimals\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd3n132ou.py\"\
    , line 20, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd3n132ou.py\"\
    , line 18, in test_check\n    check(truncate_number)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd3n132ou.py\"\
    , line 13, in check\n    assert candidate(3.5) == 0.5\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd3n132ou.py\"\
    , line 8, in truncate_number\n    decimals = math.modf(number)[0]\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ integer_part = int(number)\n    decimal_part = number - integer_part\n    return\
    \ decimal_part\n\n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n\
    \    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\ndef\
    \ test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ decimals = math.floor((number - int(number)) * 10)\n    return number - decimals\n\
    \n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyoyteev8.py\"\
    , line 20, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyoyteev8.py\"\
    , line 18, in test_check\n    check(truncate_number)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyoyteev8.py\"\
    , line 13, in check\n    assert candidate(3.5) == 0.5\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyoyteev8.py\"\
    , line 8, in truncate_number\n    decimals = math.floor((number - int(number))\
    \ * 10)\nNameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ decimals = math.floor(math.log10(number))\n    decimals = decimals if decimals\
    \ > 0 else 0\n    decimals = decimals if decimals < 3 else 3\n    decimals = decimals\
    \ + 1\n    number = round(number, decimals)\n    return number\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc1rq19k3.py\"\
    , line 24, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc1rq19k3.py\"\
    , line 22, in test_check\n    check(truncate_number)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc1rq19k3.py\"\
    , line 17, in check\n    assert candidate(3.5) == 0.5\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc1rq19k3.py\"\
    , line 8, in truncate_number\n    decimals = math.floor(math.log10(number))\n\
    NameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ integer_part = int(number)\n    decimal_part = number - integer_part\n    return\
    \ decimal_part\n\n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n\
    \    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\ndef\
    \ test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ int_part = int(number)\n    decimal_part = number - int_part\n    return decimal_part\n\
    \n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ decimals = math.fmod(number, 1)\n    integer = math.floor(number)\n    return\
    \ integer + decimals\n\n\ndef check(candidate):\n    assert candidate(3.5) ==\
    \ 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvu_84je_.py\"\
    , line 21, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvu_84je_.py\"\
    , line 19, in test_check\n    check(truncate_number)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvu_84je_.py\"\
    , line 14, in check\n    assert candidate(3.5) == 0.5\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvu_84je_.py\"\
    , line 8, in truncate_number\n    decimals = math.fmod(number, 1)\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ decimals = math.floor(math.log10(number))\n    number = round(number, decimals)\n\
    \    return number\n\n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n\
    \    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\ndef\
    \ test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpny3mz5so.py\"\
    , line 21, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpny3mz5so.py\"\
    , line 19, in test_check\n    check(truncate_number)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpny3mz5so.py\"\
    , line 14, in check\n    assert candidate(3.5) == 0.5\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpny3mz5so.py\"\
    , line 8, in truncate_number\n    decimals = math.floor(math.log10(number))\n\
    NameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ int_part = int(number)\n    decimal_part = number - int_part\n    return decimal_part\n\
    \n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ int_part = int(number)\n    decimal_part = number - int_part\n    return decimal_part\n\
    \n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number) if number > 0 else 0\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ int_part = int(number)\n    decimal_part = number - int_part\n    return decimal_part\n\
    \n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ integer_part = int(number)\n    decimal_part = number - integer_part\n    return\
    \ decimal_part\n\n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n\
    \    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\ndef\
    \ test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ int_part = int(number)\n    decimal_part = number - int_part\n    return decimal_part\n\
    \n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ number = float(number)\n    integer_part = int(number)\n    decimal_part = number\
    \ - integer_part\n    return decimal_part\n\n\ndef check(candidate):\n    assert\
    \ candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0)\
    \ == 0.0\n\ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ integer_part = int(number)\n    decimal_part = number - integer_part\n    return\
    \ decimal_part\n\n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n\
    \    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\ndef\
    \ test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ int_part = int(number)\n    decimal_part = number - int_part\n    return decimal_part\n\
    \n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ decimals = math.floor(math.log10(number))\n    number = round(number, decimals)\n\
    \    return number\n\n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n\
    \    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\ndef\
    \ test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpga914be9.py\"\
    , line 21, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpga914be9.py\"\
    , line 19, in test_check\n    check(truncate_number)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpga914be9.py\"\
    , line 14, in check\n    assert candidate(3.5) == 0.5\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpga914be9.py\"\
    , line 8, in truncate_number\n    decimals = math.floor(math.log10(number))\n\
    NameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ decimals = math.floor(math.log10(number))\n    decimals = decimals - 1 if decimals\
    \ > 0 else 0\n    decimals = decimals + 1 if decimals < 0 else 0\n    return number\
    \ / 10 ** decimals\n\n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n\
    \    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\ndef\
    \ test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp948cnj4n.py\"\
    , line 22, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp948cnj4n.py\"\
    , line 20, in test_check\n    check(truncate_number)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp948cnj4n.py\"\
    , line 15, in check\n    assert candidate(3.5) == 0.5\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp948cnj4n.py\"\
    , line 8, in truncate_number\n    decimals = math.floor(math.log10(number))\n\
    NameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ decimal = number - int(number)\n    return decimal\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ decimals = math.modf(number)[0]\n    return round(number, decimals)\n\n\ndef\
    \ check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp84926cta.py\"\
    , line 20, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp84926cta.py\"\
    , line 18, in test_check\n    check(truncate_number)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp84926cta.py\"\
    , line 13, in check\n    assert candidate(3.5) == 0.5\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp84926cta.py\"\
    , line 8, in truncate_number\n    decimals = math.modf(number)[0]\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ decimals = math.floor(math.log10(number))\n    decimals = decimals if decimals\
    \ > 0 else 0\n    decimals = decimals if decimals < 6 else 6\n    decimals = decimals\
    \ - 1 if decimals > 0 else 0\n    return number / 10 ** decimals\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy0pcjksi.py\"\
    , line 23, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy0pcjksi.py\"\
    , line 21, in test_check\n    check(truncate_number)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy0pcjksi.py\"\
    , line 16, in check\n    assert candidate(3.5) == 0.5\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy0pcjksi.py\"\
    , line 8, in truncate_number\n    decimals = math.floor(math.log10(number))\n\
    NameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ decimals = math.floor(math.log10(number))\n    return number / 10 ** decimals\n\
    \n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn602tn5z.py\"\
    , line 20, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn602tn5z.py\"\
    , line 18, in test_check\n    check(truncate_number)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn602tn5z.py\"\
    , line 13, in check\n    assert candidate(3.5) == 0.5\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn602tn5z.py\"\
    , line 8, in truncate_number\n    decimals = math.floor(math.log10(number))\n\
    NameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ int_part = int(number)\n    decimal_part = number - int_part\n    return decimal_part\n\
    \n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number) if number < 0 else number\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxn8u_pi4.py\"\
    , line 19, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxn8u_pi4.py\"\
    , line 17, in test_check\n    check(truncate_number)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxn8u_pi4.py\"\
    , line 12, in check\n    assert candidate(3.5) == 0.5\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ int_part = int(number)\n    decimal_part = number - int_part\n    return decimal_part\n\
    \n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ int_part = int(number)\n    decimal_part = number - int_part\n    return decimal_part\n\
    \n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ int_part = int(number)\n    decimal_part = number - int_part\n    return decimal_part\n\
    \n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ int_part = int(number)\n    decimal_part = number - int_part\n    return decimal_part\n\
    \n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ number = float(number)\n    integer_part = int(number)\n    decimal_part = number\
    \ - integer_part\n    return decimal_part\n\n\ndef check(candidate):\n    assert\
    \ candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0)\
    \ == 0.0\n\ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ integer_part = int(number)\n    decimal_part = number - integer_part\n    return\
    \ decimal_part\n\n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n\
    \    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\ndef\
    \ test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ integer_part = int(number)\n    decimal_part = number - integer_part\n    return\
    \ decimal_part\n\n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n\
    \    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\ndef\
    \ test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ integer_part = int(number)\n    decimal_part = number - integer_part\n    return\
    \ decimal_part\n\n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n\
    \    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\ndef\
    \ test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ int_part = int(number)\n    decimal_part = number - int_part\n    return decimal_part\n\
    \n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ integer_part = int(number)\n    decimal_part = number - integer_part\n    return\
    \ decimal_part\n\n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n\
    \    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\ndef\
    \ test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ int_part = int(number)\n    decimal_part = number - int_part\n    return decimal_part\n\
    \n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ integer_part = int(number)\n    decimal_part = number - integer_part\n    return\
    \ decimal_part\n\n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n\
    \    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\ndef\
    \ test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ decimals = math.floor(math.log10(number))\n    decimals = decimals if decimals\
    \ > 0 else 0\n    decimals = decimals if decimals < 3 else 3\n    decimals = decimals\
    \ + 1\n    number = round(number, decimals)\n    return number\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3vko8sg9.py\"\
    , line 24, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3vko8sg9.py\"\
    , line 22, in test_check\n    check(truncate_number)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3vko8sg9.py\"\
    , line 17, in check\n    assert candidate(3.5) == 0.5\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3vko8sg9.py\"\
    , line 8, in truncate_number\n    decimals = math.floor(math.log10(number))\n\
    NameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ integer_part = int(number)\n    decimal_part = number - integer_part\n    return\
    \ decimal_part\n\n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n\
    \    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\ndef\
    \ test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ number = float(number)\n    integer = int(number)\n    decimal = number - integer\n\
    \    return decimal\n\n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n\
    \    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\ndef\
    \ test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number) if number > 0 else 0\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ int_part = int(number)\n    decimal_part = number - int_part\n    return decimal_part\n\
    \n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ decimals = math.floor((number - math.floor(number)) * 100)\n    return number\
    \ - decimals\n\n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n  \
    \  assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n\
    \    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4k4pl8yu.py\"\
    , line 20, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4k4pl8yu.py\"\
    , line 18, in test_check\n    check(truncate_number)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4k4pl8yu.py\"\
    , line 13, in check\n    assert candidate(3.5) == 0.5\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4k4pl8yu.py\"\
    , line 8, in truncate_number\n    decimals = math.floor((number - math.floor(number))\
    \ * 100)\nNameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ int_part = int(number)\n    decimal_part = number - int_part\n    return decimal_part\n\
    \n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ integer_part = int(number)\n    decimal_part = number - integer_part\n    return\
    \ decimal_part\n\n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n\
    \    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\ndef\
    \ test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ decimals = math.floor(math.log10(number))\n    int_part = number / 10 ** decimals\n\
    \    return int_part\n\n\ndef check(candidate):\n    assert candidate(3.5) ==\
    \ 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe2diu1sz.py\"\
    , line 21, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe2diu1sz.py\"\
    , line 19, in test_check\n    check(truncate_number)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe2diu1sz.py\"\
    , line 14, in check\n    assert candidate(3.5) == 0.5\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe2diu1sz.py\"\
    , line 8, in truncate_number\n    decimals = math.floor(math.log10(number))\n\
    NameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ int_part = int(number)\n    decimal_part = number - int_part\n    return decimal_part\n\
    \n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ integer_part = int(number)\n    decimal_part = number - integer_part\n    return\
    \ decimal_part\n\n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n\
    \    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\ndef\
    \ test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ integer_part = int(number)\n    decimal_part = number - integer_part\n    return\
    \ decimal_part\n\n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n\
    \    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\ndef\
    \ test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ decimals = math.fmod(number, 1)\n    integer = math.floor(number)\n    return\
    \ integer + decimals\n\n\ndef check(candidate):\n    assert candidate(3.5) ==\
    \ 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzc6fz1nd.py\"\
    , line 21, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzc6fz1nd.py\"\
    , line 19, in test_check\n    check(truncate_number)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzc6fz1nd.py\"\
    , line 14, in check\n    assert candidate(3.5) == 0.5\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzc6fz1nd.py\"\
    , line 8, in truncate_number\n    decimals = math.fmod(number, 1)\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ integer_part = int(number)\n    decimal_part = number - integer_part\n    return\
    \ decimal_part\n\n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n\
    \    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\ndef\
    \ test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ decimals = math.floor(math.log10(number))\n    return number / (10 ** decimals)\n\
    \n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcgauiv6m.py\"\
    , line 20, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcgauiv6m.py\"\
    , line 18, in test_check\n    check(truncate_number)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcgauiv6m.py\"\
    , line 13, in check\n    assert candidate(3.5) == 0.5\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcgauiv6m.py\"\
    , line 8, in truncate_number\n    decimals = math.floor(math.log10(number))\n\
    NameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ integer_part = int(number)\n    decimal_part = number - integer_part\n    return\
    \ decimal_part\n\n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n\
    \    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\ndef\
    \ test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ decimals = math.modf(number)[0]\n    return number - decimals\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpk7z4q0sd.py\"\
    , line 20, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpk7z4q0sd.py\"\
    , line 18, in test_check\n    check(truncate_number)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpk7z4q0sd.py\"\
    , line 13, in check\n    assert candidate(3.5) == 0.5\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpk7z4q0sd.py\"\
    , line 8, in truncate_number\n    decimals = math.modf(number)[0]\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ int_part = int(number)\n    decimal_part = number - int_part\n    return decimal_part\n\
    \n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number) if number < 0 else number\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa1w6ml9t.py\"\
    , line 19, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa1w6ml9t.py\"\
    , line 17, in test_check\n    check(truncate_number)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa1w6ml9t.py\"\
    , line 12, in check\n    assert candidate(3.5) == 0.5\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ int_part = int(number)\n    decimal_part = number - int_part\n    return decimal_part\n\
    \n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ int_part = int(number)\n    decimal_part = number - int_part\n    return decimal_part\n\
    \n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ integer_part = int(number)\n    decimal_part = number - integer_part\n    return\
    \ decimal_part\n\n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n\
    \    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\ndef\
    \ test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ integer_part = int(number)\n    decimal_part = number - integer_part\n    return\
    \ decimal_part\n\n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n\
    \    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\ndef\
    \ test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ int_part = int(number)\n    decimal_part = number - int_part\n    return decimal_part\n\
    \n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ decimal = number - int(number)\n    return decimal\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ decimals = math.floor(math.log10(number))\n    decimals = decimals if decimals\
    \ <= 3 else 3\n    decimals = decimals if decimals > 0 else 0\n    decimals =\
    \ decimals if decimals <= 3 else 3\n    decimals = decimals if decimals > 0 else\
    \ 0\n    decimals = decimals if decimals <= 3 else 3\n    decimals = decimals\
    \ if decimals > 0 else 0\n    decimals = decimals if decimals <= 3 else 3\n  \
    \  decimals = decimals if decimals > 0 else 0\n    decimals = decimals if decimals\
    \ <= 3 else 3\n    decimals = decimals if decimals > 0 else 0\n    decimals =\
    \ decimals if decimals <= 3 else 3\n    decimals = decimals if decimals > 0 else\
    \ 0\n    decimals = decimals if decimals <= 3 else 3\n    decimals = decimals\
    \ if decimals > 0 else 0\n    decimals = decimals if decimals <= 3 else 3\n  \
    \  decimals = decimals if decimals > 0 else 0\n    decimals = decimals if decimals\
    \ <= 3 else 3\n    decimals = decimals if decimals > 0 else 0\n    decimals =\
    \ decimals if decimals <= 3 else 3\n    decimals = decimals if decimals > 0 else\
    \ 0\n    decimals = decimals if decimals <= 3 else 3\n    decimals = decimals\
    \ if decimals > 0 else 0\n    decimals = decimals if decimals <= 3 else 3\n  \
    \  decimals = decimals if decimals > 0 else 0\n    decimals = decimals if decimals\
    \ <= 3 else 3\n    decimals = decimals if decimals > 0 else 0\n    decimals =\
    \ decimals if decimals <= 3 else 3\n    decimals = decimals if decimals > 0 else\
    \ 0\n    decimals = decimals if decimals <= 3 else 3\n    decimals = decimals\
    \ if decimals > 0 else 0\n    decimals = decimals if decimals <= 3 else 3\n  \
    \  decimals = decimals if decimals > 0 else 0\n    decimals = decimals if decimals\
    \ <= 3 else 3\n    decimals = decimals if decimals > 0 else 0\n    decimals =\
    \ decimals if decimals <= 3 else 3\n    decimals = decimals if decimals > 0 else\
    \ 0\n    decimals = decimals if decimals <= 3 else 3\n    decimals = decimals\
    \ if decimals > 0 else 0\n    decimals = decimals if decimals <= 3 else 3\n  \
    \  decimals = decimals if decimals > 0 else 0\n    decimals = decimals if decimals\
    \ <= 3 else 3\n    decimals = decimals if decimals > 0 else 0\n    decimals =\
    \ decimals if decimals <= 3 else 3\n    decimals = decimals if decimals > 0 else\
    \ 0\n    decimals = decimals if decimals <= 3 else 3\n    decimals = decimals\
    \ if \ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcbb8wab9.py\"\
    , line 54\n    decimals = decimals if \n                           ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ integer_part = int(number)\n    decimal_part = number - integer_part\n    return\
    \ decimal_part\n\n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n\
    \    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\ndef\
    \ test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ integer_part = int(number)\n    decimal_part = number - integer_part\n    return\
    \ decimal_part\n\n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n\
    \    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\ndef\
    \ test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ decimals = math.fmod(number, 1)\n    integer = int(number)\n    integer = max(integer,\
    \ decimals)\n    return float(integer), decimals\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt1z7bnwj.py\"\
    , line 22, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt1z7bnwj.py\"\
    , line 20, in test_check\n    check(truncate_number)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt1z7bnwj.py\"\
    , line 15, in check\n    assert candidate(3.5) == 0.5\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt1z7bnwj.py\"\
    , line 8, in truncate_number\n    decimals = math.fmod(number, 1)\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ integer_part = int(number)\n    decimal_part = number - integer_part\n    return\
    \ decimal_part\n\n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n\
    \    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\ndef\
    \ test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ int_part = int(number)\n    decimal_part = number - int_part\n    return decimal_part\n\
    \n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ integer_part = int(number)\n    decimal_part = number - integer_part\n    return\
    \ decimal_part\n\n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n\
    \    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\ndef\
    \ test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ decimals = math.modf(number)[1]\n    return number - decimals\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1ni6m26x.py\"\
    , line 20, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1ni6m26x.py\"\
    , line 18, in test_check\n    check(truncate_number)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1ni6m26x.py\"\
    , line 13, in check\n    assert candidate(3.5) == 0.5\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1ni6m26x.py\"\
    , line 8, in truncate_number\n    decimals = math.modf(number)[1]\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ decimals = math.modf(number)[0]\n    return number - decimals\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx80hk1fz.py\"\
    , line 20, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx80hk1fz.py\"\
    , line 18, in test_check\n    check(truncate_number)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx80hk1fz.py\"\
    , line 13, in check\n    assert candidate(3.5) == 0.5\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx80hk1fz.py\"\
    , line 8, in truncate_number\n    decimals = math.modf(number)[0]\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ decimals = math.floor((number - math.floor(number)) * 100)\n    return number\
    \ - decimals\n\n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n  \
    \  assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n\
    \    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkfdkx30x.py\"\
    , line 20, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkfdkx30x.py\"\
    , line 18, in test_check\n    check(truncate_number)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkfdkx30x.py\"\
    , line 13, in check\n    assert candidate(3.5) == 0.5\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkfdkx30x.py\"\
    , line 8, in truncate_number\n    decimals = math.floor((number - math.floor(number))\
    \ * 100)\nNameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ integer_part = int(number)\n    decimal_part = number - integer_part\n    return\
    \ decimal_part\n\n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n\
    \    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\ndef\
    \ test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ decimals = math.floor(math.log10(number))\n    decimals = decimals if decimals\
    \ > 0 else 0\n    decimals = decimals if decimals < 6 else 6\n    decimals = decimals\
    \ if decimals > 0 else 0\n    decimals = decimals if decimals < 6 else 6\n   \
    \ decimals = decimals if decimals > 0 else 0\n    decimals = decimals if decimals\
    \ < 6 else 6\n    decimals = decimals if decimals > 0 else 0\n    decimals = decimals\
    \ if decimals < 6 else 6\n    decimals = decimals if decimals > 0 else 0\n   \
    \ decimals = decimals if decimals < 6 else 6\n    decimals = decimals if decimals\
    \ > 0 else 0\n    decimals = decimals if decimals < 6 else 6\n    decimals = decimals\
    \ if decimals > 0 else 0\n    decimals = decimals if decimals < 6 else 6\n   \
    \ decimals = decimals if decimals > 0 else 0\n    decimals = decimals if decimals\
    \ < 6 else 6\n    decimals = decimals if decimals > 0 else 0\n    decimals = decimals\
    \ if decimals < 6 else 6\n    decimals = decimals if decimals > 0 else 0\n   \
    \ decimals = decimals if decimals < 6 else 6\n    decimals = decimals if decimals\
    \ > 0 else 0\n    decimals = decimals if decimals < 6 else 6\n    decimals = decimals\
    \ if decimals > 0 else 0\n    decimals = decimals if decimals < 6 else 6\n   \
    \ decimals = decimals if decimals > 0 else 0\n    decimals = decimals if decimals\
    \ < 6 else 6\n    decimals = decimals if decimals > 0 else 0\n    decimals = decimals\
    \ if decimals < 6 else 6\n    decimals = decimals if decimals > 0 else 0\n   \
    \ decimals = decimals if decimals < 6 else 6\n    decimals = decimals if decimals\
    \ > 0 else 0\n    decimals = decimals if decimals < 6 else 6\n    decimals = decimals\
    \ if decimals > 0 else 0\n    decimals = decimals if decimals < 6 else 6\n   \
    \ decimals = decimals if decimals > 0 else 0\n    decimals = decimals if decimals\
    \ < 6 else 6\n    decimals = decimals if decimals > 0 else 0\n    decimals = decimals\
    \ if decimals < 6 else 6\n    decimals = decimals if decimals > 0 else 0\n   \
    \ decimals = decimals if decimals < 6 else 6\n    decimals = decimals if decimals\
    \ > 0 else 0\n    decimals = decimals if decimals < 6 else 6\n    decimals = decimals\
    \ if decimals > 0 else 0\n    decimals = decimals if decimals < 6 else 6\n   \
    \ decimals = decimals if decimals > 0 else 0\n    decimals = decimals if decimals\
    \ < 6 else 6\n    decimals = decimals if decimals > 0 else 0\n    decimals = decimals\
    \ if decimals < 6 \ndef check(candidate):\n    assert candidate(3.5) == 0.5\n\
    \    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\ndef\
    \ test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprmoyu7r3.py\"\
    , line 56\n    decimals = decimals if decimals < 6 \n               ^^^^^^^^^^^^^^^^^^^^^^^^\n\
    SyntaxError: expected 'else' after 'if' expression\n"
  exit_code: 1
  status: SyntaxError
