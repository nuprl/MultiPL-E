name: HumanEval_58_common
language: py
results:
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    return sorted(set(l1) & set(l2))\n\ndef check(candidate):\n\
    \    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) ==\
    \ [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert\
    \ candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3,\
    \ 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    \n    common = []\n    \n    for el1 in l1:\n     \
    \   for el2 in l2:\n            if el1 == el2:\n                common.append(el1)\n\
    \                break\n    \n    return sorted(common)\n\ndef check(candidate):\n\
    \    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) ==\
    \ [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert\
    \ candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3,\
    \ 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    return list(set(l1) & set(l2))\n\ndef check(candidate):\n\
    \    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) ==\
    \ [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert\
    \ candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3,\
    \ 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    \n    common = []\n    \n    for el in l1:\n      \
    \  if el in l2:\n            common.append(el)\n    \n    return sorted(common)\n\
    \ndef check(candidate):\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2])\
    \ == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert\
    \ candidate([4, 3, 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    \n    common = []\n    \n    for e in l1:\n       \
    \ if e in l2:\n            common.append(e)\n    \n    return common\n\ndef check(candidate):\n\
    \    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) ==\
    \ [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert\
    \ candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3,\
    \ 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpokwz1kw9.py\"\
    , line 25, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpokwz1kw9.py\"\
    , line 23, in test_check\n    check(common)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpokwz1kw9.py\"\
    , line 17, in check\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1,\
    \ 5, 9, 653, 121]) == [1, 5, 653]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    return sorted(list(set(l1) & set(l2)))\n\ndef check(candidate):\n\
    \    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) ==\
    \ [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert\
    \ candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3,\
    \ 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    \n    common = []\n    \n    for el in l1:\n      \
    \  if el in l2:\n            common.append(el)\n    \n    return sorted(common)\n\
    \ndef check(candidate):\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2])\
    \ == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert\
    \ candidate([4, 3, 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    return sorted(list(set(l1) & set(l2)))\n\ndef check(candidate):\n\
    \    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) ==\
    \ [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert\
    \ candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3,\
    \ 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    \n    common = []\n    \n    for e in l1:\n       \
    \ if e in l2:\n            common.append(e)\n            \n    return sorted(common)\n\
    \    \ndef check(candidate):\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5,\
    \ 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3,\
    \ 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n\
    \    assert candidate([4, 3, 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    return sorted(list(set(l1) & set(l2)))\n\ndef check(candidate):\n\
    \    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) ==\
    \ [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert\
    \ candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3,\
    \ 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    \n    common = []\n    \n    for x in l1:\n       \
    \ if x in l2:\n            common.append(x)\n    \n    return common\n\ndef check(candidate):\n\
    \    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) ==\
    \ [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert\
    \ candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3,\
    \ 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnjdwz8cv.py\"\
    , line 25, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnjdwz8cv.py\"\
    , line 23, in test_check\n    check(common)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnjdwz8cv.py\"\
    , line 17, in check\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1,\
    \ 5, 9, 653, 121]) == [1, 5, 653]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    \n    common = []\n    \n    for el in l1:\n      \
    \  if el in l2:\n            common.append(el)\n    \n    return common\n\ndef\
    \ check(candidate):\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1,\
    \ 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2])\
    \ == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert\
    \ candidate([4, 3, 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmwvwfpjn.py\"\
    , line 25, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmwvwfpjn.py\"\
    , line 23, in test_check\n    check(common)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmwvwfpjn.py\"\
    , line 17, in check\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1,\
    \ 5, 9, 653, 121]) == [1, 5, 653]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    return list(set(l1) & set(l2))\n\ndef check(candidate):\n\
    \    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) ==\
    \ [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert\
    \ candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3,\
    \ 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    \n    common = []\n    \n    for e in l1:\n       \
    \ if e in l2:\n            common.append(e)\n    \n    return common\n\ndef check(candidate):\n\
    \    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) ==\
    \ [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert\
    \ candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3,\
    \ 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3z2aooru.py\"\
    , line 25, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3z2aooru.py\"\
    , line 23, in test_check\n    check(common)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3z2aooru.py\"\
    , line 17, in check\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1,\
    \ 5, 9, 653, 121]) == [1, 5, 653]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    \n    common = []\n    \n    for e in l1:\n       \
    \ if e in l2:\n            common.append(e)\n    \n    return sorted(common)\n\
    \ndef check(candidate):\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2])\
    \ == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert\
    \ candidate([4, 3, 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    \n    common = []\n    \n    for x in l1:\n       \
    \ if x in l2:\n            common.append(x)\n    \n    return common\n\ndef check(candidate):\n\
    \    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) ==\
    \ [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert\
    \ candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3,\
    \ 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt_ykvvfn.py\"\
    , line 25, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt_ykvvfn.py\"\
    , line 23, in test_check\n    check(common)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt_ykvvfn.py\"\
    , line 17, in check\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1,\
    \ 5, 9, 653, 121]) == [1, 5, 653]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    \n    common = []\n    \n    for x in l1:\n       \
    \ if x in l2:\n            common.append(x)\n            \n    return sorted(common)\n\
    \ndef check(candidate):\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2])\
    \ == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert\
    \ candidate([4, 3, 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    return sorted(list(set(l1) & set(l2)))\n\ndef check(candidate):\n\
    \    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) ==\
    \ [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert\
    \ candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3,\
    \ 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    return sorted(list(set(l1) & set(l2)))\n\ndef check(candidate):\n\
    \    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) ==\
    \ [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert\
    \ candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3,\
    \ 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    \n    common = []\n    \n    for el1 in l1:\n     \
    \   for el2 in l2:\n            if el1 == el2:\n                common.append(el1)\n\
    \                break\n    \n    return sorted(common)\n\ndef check(candidate):\n\
    \    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) ==\
    \ [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert\
    \ candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3,\
    \ 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    \n    common = []\n    \n    for x in l1:\n       \
    \ if x in l2:\n            common.append(x)\n    \n    return common\n    \ndef\
    \ check(candidate):\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1,\
    \ 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2])\
    \ == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert\
    \ candidate([4, 3, 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1wacdsaa.py\"\
    , line 25, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1wacdsaa.py\"\
    , line 23, in test_check\n    check(common)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1wacdsaa.py\"\
    , line 17, in check\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1,\
    \ 5, 9, 653, 121]) == [1, 5, 653]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    \n    common = []\n    \n    for x in l1:\n       \
    \ if x in l2:\n            common.append(x)\n            \n    return common\n\
    \ndef check(candidate):\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2])\
    \ == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert\
    \ candidate([4, 3, 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz0t7_9q2.py\"\
    , line 25, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz0t7_9q2.py\"\
    , line 23, in test_check\n    check(common)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz0t7_9q2.py\"\
    , line 17, in check\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1,\
    \ 5, 9, 653, 121]) == [1, 5, 653]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    \n    common = []\n    \n    for el1 in l1:\n     \
    \   for el2 in l2:\n            if el1 == el2:\n                common.append(el1)\n\
    \                break\n    \n    return sorted(common)\n\ndef check(candidate):\n\
    \    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) ==\
    \ [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert\
    \ candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3,\
    \ 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    return sorted(list(set(l1) & set(l2)))\n\ndef check(candidate):\n\
    \    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) ==\
    \ [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert\
    \ candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3,\
    \ 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    return sorted(list(set(l1) & set(l2)))\n\ndef check(candidate):\n\
    \    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) ==\
    \ [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert\
    \ candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3,\
    \ 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    \n    common = []\n    \n    for el in l1:\n      \
    \  if el in l2:\n            common.append(el)\n    \n    return common\n\ndef\
    \ check(candidate):\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1,\
    \ 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2])\
    \ == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert\
    \ candidate([4, 3, 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwqn2djqe.py\"\
    , line 25, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwqn2djqe.py\"\
    , line 23, in test_check\n    check(common)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwqn2djqe.py\"\
    , line 17, in check\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1,\
    \ 5, 9, 653, 121]) == [1, 5, 653]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    \n    common = []\n    \n    for x in l1:\n       \
    \ if x in l2:\n            common.append(x)\n    \n    return common\n\ndef check(candidate):\n\
    \    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) ==\
    \ [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert\
    \ candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3,\
    \ 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9tz9r1cw.py\"\
    , line 25, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9tz9r1cw.py\"\
    , line 23, in test_check\n    check(common)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9tz9r1cw.py\"\
    , line 17, in check\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1,\
    \ 5, 9, 653, 121]) == [1, 5, 653]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    \n    common = []\n    \n    for e in l1:\n       \
    \ if e in l2:\n            common.append(e)\n            \n    return common\n\
    \ndef check(candidate):\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2])\
    \ == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert\
    \ candidate([4, 3, 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3wckja2r.py\"\
    , line 25, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3wckja2r.py\"\
    , line 23, in test_check\n    check(common)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3wckja2r.py\"\
    , line 17, in check\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1,\
    \ 5, 9, 653, 121]) == [1, 5, 653]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    \n    common = []\n    \n    for el1 in l1:\n     \
    \   for el2 in l2:\n            if el1 == el2:\n                common.append(el1)\n\
    \                break\n    \n    return sorted(common)\n\ndef check(candidate):\n\
    \    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) ==\
    \ [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert\
    \ candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3,\
    \ 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    return list(set(l1) & set(l2))\n\ndef check(candidate):\n\
    \    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) ==\
    \ [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert\
    \ candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3,\
    \ 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    \n    common = []\n    \n    for x in l1:\n       \
    \ if x in l2:\n            common.append(x)\n            \n    return sorted(common)\n\
    \ndef check(candidate):\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2])\
    \ == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert\
    \ candidate([4, 3, 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    return sorted(list(set(l1) & set(l2)))\n\ndef check(candidate):\n\
    \    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) ==\
    \ [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert\
    \ candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3,\
    \ 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    \n    common = []\n    \n    for x in l1:\n       \
    \ if x in l2:\n            common.append(x)\n            \n    return sorted(common)\n\
    \ndef check(candidate):\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2])\
    \ == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert\
    \ candidate([4, 3, 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    return sorted(set(l1) & set(l2))\n\ndef check(candidate):\n\
    \    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) ==\
    \ [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert\
    \ candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3,\
    \ 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    \n    common = []\n    \n    for e in l1:\n       \
    \ if e in l2:\n            common.append(e)\n    \n    return common\n\ndef check(candidate):\n\
    \    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) ==\
    \ [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert\
    \ candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3,\
    \ 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4piywxuh.py\"\
    , line 25, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4piywxuh.py\"\
    , line 23, in test_check\n    check(common)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4piywxuh.py\"\
    , line 17, in check\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1,\
    \ 5, 9, 653, 121]) == [1, 5, 653]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    \n    common = []\n    \n    for x in l1:\n       \
    \ if x in l2:\n            common.append(x)\n    \n    return common\n\ndef check(candidate):\n\
    \    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) ==\
    \ [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert\
    \ candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3,\
    \ 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqvzfga1e.py\"\
    , line 25, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqvzfga1e.py\"\
    , line 23, in test_check\n    check(common)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqvzfga1e.py\"\
    , line 17, in check\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1,\
    \ 5, 9, 653, 121]) == [1, 5, 653]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    return sorted(list(set(l1) & set(l2)))\n\ndef check(candidate):\n\
    \    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) ==\
    \ [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert\
    \ candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3,\
    \ 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    \n    common = []\n    \n    for x in l1:\n       \
    \ if x in l2:\n            common.append(x)\n            \n    return sorted(common)\n\
    \ndef check(candidate):\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2])\
    \ == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert\
    \ candidate([4, 3, 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    \n    common = []\n    \n    for e in l1:\n       \
    \ if e in l2:\n            common.append(e)\n    \n    return common\n\ndef check(candidate):\n\
    \    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) ==\
    \ [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert\
    \ candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3,\
    \ 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpky9gao_e.py\"\
    , line 25, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpky9gao_e.py\"\
    , line 23, in test_check\n    check(common)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpky9gao_e.py\"\
    , line 17, in check\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1,\
    \ 5, 9, 653, 121]) == [1, 5, 653]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    \n    common = []\n    \n    for x in l1:\n       \
    \ if x in l2:\n            common.append(x)\n            \n    return common\n\
    \ndef check(candidate):\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2])\
    \ == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert\
    \ candidate([4, 3, 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjola0j9h.py\"\
    , line 25, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjola0j9h.py\"\
    , line 23, in test_check\n    check(common)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjola0j9h.py\"\
    , line 17, in check\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1,\
    \ 5, 9, 653, 121]) == [1, 5, 653]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    return sorted(set(l1) & set(l2))\n\ndef check(candidate):\n\
    \    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) ==\
    \ [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert\
    \ candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3,\
    \ 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    \n    common = []\n    \n    for x in l1:\n       \
    \ if x in l2:\n            common.append(x)\n            \n    return common\n\
    \ndef check(candidate):\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2])\
    \ == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert\
    \ candidate([4, 3, 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp046q4rc_.py\"\
    , line 25, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp046q4rc_.py\"\
    , line 23, in test_check\n    check(common)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp046q4rc_.py\"\
    , line 17, in check\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1,\
    \ 5, 9, 653, 121]) == [1, 5, 653]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    \n    common = []\n    \n    for x in l1:\n       \
    \ if x in l2:\n            common.append(x)\n    \n    return sorted(common)\n\
    \ndef check(candidate):\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2])\
    \ == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert\
    \ candidate([4, 3, 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    return sorted(set(l1) & set(l2))\n\ndef check(candidate):\n\
    \    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) ==\
    \ [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert\
    \ candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3,\
    \ 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    \n    common = []\n    \n    for x in l1:\n       \
    \ if x in l2:\n            common.append(x)\n    \n    return common\n\ndef check(candidate):\n\
    \    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) ==\
    \ [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert\
    \ candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3,\
    \ 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp732xnfzc.py\"\
    , line 25, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp732xnfzc.py\"\
    , line 23, in test_check\n    check(common)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp732xnfzc.py\"\
    , line 17, in check\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1,\
    \ 5, 9, 653, 121]) == [1, 5, 653]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    \n    common = []\n    \n    for el in l1:\n      \
    \  if el in l2:\n            common.append(el)\n    \n    return common\n\ndef\
    \ check(candidate):\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1,\
    \ 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2])\
    \ == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert\
    \ candidate([4, 3, 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnh9da71j.py\"\
    , line 25, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnh9da71j.py\"\
    , line 23, in test_check\n    check(common)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnh9da71j.py\"\
    , line 17, in check\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1,\
    \ 5, 9, 653, 121]) == [1, 5, 653]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    \n    common = []\n    \n    for el1 in l1:\n     \
    \   for el2 in l2:\n            if el1 == el2:\n                common.append(el1)\n\
    \                break\n    \n    return sorted(common)\n\ndef check(candidate):\n\
    \    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) ==\
    \ [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert\
    \ candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3,\
    \ 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    \n    common = []\n    \n    for x in l1:\n       \
    \ if x in l2:\n            common.append(x)\n    \n    return common\n\ndef check(candidate):\n\
    \    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) ==\
    \ [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert\
    \ candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3,\
    \ 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphooov6w3.py\"\
    , line 25, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphooov6w3.py\"\
    , line 23, in test_check\n    check(common)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphooov6w3.py\"\
    , line 17, in check\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1,\
    \ 5, 9, 653, 121]) == [1, 5, 653]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    \n    common = []\n    \n    for el1 in l1:\n     \
    \   for el2 in l2:\n            if el1 == el2:\n                common.append(el1)\n\
    \                break\n    \n    return sorted(common)\n\ndef check(candidate):\n\
    \    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) ==\
    \ [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert\
    \ candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3,\
    \ 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    \n    common = []\n    \n    for x in l1:\n       \
    \ if x in l2:\n            common.append(x)\n    \n    return common\n\ndef check(candidate):\n\
    \    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) ==\
    \ [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert\
    \ candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3,\
    \ 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpb0s4kszg.py\"\
    , line 25, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpb0s4kszg.py\"\
    , line 23, in test_check\n    check(common)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpb0s4kszg.py\"\
    , line 17, in check\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1,\
    \ 5, 9, 653, 121]) == [1, 5, 653]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    \n    common = []\n    \n    for x in l1:\n       \
    \ if x in l2:\n            common.append(x)\n    \n    return common\n\ndef check(candidate):\n\
    \    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) ==\
    \ [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert\
    \ candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3,\
    \ 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm59ehik7.py\"\
    , line 25, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm59ehik7.py\"\
    , line 23, in test_check\n    check(common)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm59ehik7.py\"\
    , line 17, in check\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1,\
    \ 5, 9, 653, 121]) == [1, 5, 653]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    \n    common = []\n    \n    for el in l1:\n      \
    \  if el in l2:\n            common.append(el)\n    \n    return sorted(common)\n\
    \ndef check(candidate):\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2])\
    \ == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert\
    \ candidate([4, 3, 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    return sorted(list(set(l1) & set(l2)))\n\ndef check(candidate):\n\
    \    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) ==\
    \ [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert\
    \ candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3,\
    \ 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    \n    common = []\n    \n    for e in l1:\n       \
    \ if e in l2:\n            common.append(e)\n    \n    return common\n\ndef check(candidate):\n\
    \    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) ==\
    \ [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert\
    \ candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3,\
    \ 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpj65yscy1.py\"\
    , line 25, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpj65yscy1.py\"\
    , line 23, in test_check\n    check(common)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpj65yscy1.py\"\
    , line 17, in check\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1,\
    \ 5, 9, 653, 121]) == [1, 5, 653]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    \n    common = []\n    \n    for x in l1:\n       \
    \ if x in l2:\n            common.append(x)\n            \n    return common\n\
    \ndef check(candidate):\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2])\
    \ == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert\
    \ candidate([4, 3, 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp40jnsdhd.py\"\
    , line 25, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp40jnsdhd.py\"\
    , line 23, in test_check\n    check(common)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp40jnsdhd.py\"\
    , line 17, in check\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1,\
    \ 5, 9, 653, 121]) == [1, 5, 653]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    return sorted(list(set(l1) & set(l2)))\n\ndef check(candidate):\n\
    \    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) ==\
    \ [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert\
    \ candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3,\
    \ 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    \n    common = []\n    \n    for x in l1:\n       \
    \ if x in l2:\n            common.append(x)\n    \n    return common\n\ndef check(candidate):\n\
    \    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) ==\
    \ [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert\
    \ candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3,\
    \ 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc_28zaej.py\"\
    , line 25, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc_28zaej.py\"\
    , line 23, in test_check\n    check(common)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc_28zaej.py\"\
    , line 17, in check\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1,\
    \ 5, 9, 653, 121]) == [1, 5, 653]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    return sorted(list(set(l1) & set(l2)))\n\ndef check(candidate):\n\
    \    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) ==\
    \ [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert\
    \ candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3,\
    \ 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    \n    common = []\n    \n    for el in l1:\n      \
    \  if el in l2:\n            common.append(el)\n    \n    return common\n\ndef\
    \ check(candidate):\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1,\
    \ 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2])\
    \ == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert\
    \ candidate([4, 3, 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjl6ms7nm.py\"\
    , line 25, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjl6ms7nm.py\"\
    , line 23, in test_check\n    check(common)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjl6ms7nm.py\"\
    , line 17, in check\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1,\
    \ 5, 9, 653, 121]) == [1, 5, 653]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    \n    common = []\n    \n    for x in l1:\n       \
    \ if x in l2:\n            common.append(x)\n            \n    return common\n\
    \    \ndef check(candidate):\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5,\
    \ 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3,\
    \ 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n\
    \    assert candidate([4, 3, 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp70u3nhvi.py\"\
    , line 25, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp70u3nhvi.py\"\
    , line 23, in test_check\n    check(common)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp70u3nhvi.py\"\
    , line 17, in check\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1,\
    \ 5, 9, 653, 121]) == [1, 5, 653]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    \n    common = []\n    \n    for e in l1:\n       \
    \ if e in l2:\n            common.append(e)\n    \n    return common\n\ndef check(candidate):\n\
    \    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) ==\
    \ [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert\
    \ candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3,\
    \ 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvc610huq.py\"\
    , line 25, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvc610huq.py\"\
    , line 23, in test_check\n    check(common)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvc610huq.py\"\
    , line 17, in check\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1,\
    \ 5, 9, 653, 121]) == [1, 5, 653]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    return sorted(set(l1) & set(l2))\n\ndef check(candidate):\n\
    \    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) ==\
    \ [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert\
    \ candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3,\
    \ 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    \n    common = []\n    \n    for x in l1:\n       \
    \ if x in l2:\n            common.append(x)\n            \n    return common\n\
    \    \ndef check(candidate):\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5,\
    \ 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3,\
    \ 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n\
    \    assert candidate([4, 3, 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpupfm5h0h.py\"\
    , line 25, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpupfm5h0h.py\"\
    , line 23, in test_check\n    check(common)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpupfm5h0h.py\"\
    , line 17, in check\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1,\
    \ 5, 9, 653, 121]) == [1, 5, 653]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    \n    common = []\n    \n    for el1 in l1:\n     \
    \   for el2 in l2:\n            if el1 == el2:\n                common.append(el1)\n\
    \                break\n    \n    return sorted(common)\n\ndef check(candidate):\n\
    \    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) ==\
    \ [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert\
    \ candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3,\
    \ 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    \n    common = []\n    \n    for el in l1:\n      \
    \  if el in l2:\n            common.append(el)\n            \n    return common\n\
    \ndef check(candidate):\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2])\
    \ == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert\
    \ candidate([4, 3, 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmyb51m7m.py\"\
    , line 25, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmyb51m7m.py\"\
    , line 23, in test_check\n    check(common)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmyb51m7m.py\"\
    , line 17, in check\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1,\
    \ 5, 9, 653, 121]) == [1, 5, 653]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    \n    common = []\n    \n    for el in l1:\n      \
    \  if el in l2:\n            common.append(el)\n    \n    return common\n\ndef\
    \ check(candidate):\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1,\
    \ 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2])\
    \ == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert\
    \ candidate([4, 3, 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2jjm0yxi.py\"\
    , line 25, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2jjm0yxi.py\"\
    , line 23, in test_check\n    check(common)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2jjm0yxi.py\"\
    , line 17, in check\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1,\
    \ 5, 9, 653, 121]) == [1, 5, 653]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    \n    common = []\n    \n    for el1 in l1:\n     \
    \   for el2 in l2:\n            if el1 == el2:\n                common.append(el1)\n\
    \                break\n    \n    return sorted(common)\n\ndef check(candidate):\n\
    \    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) ==\
    \ [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert\
    \ candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3,\
    \ 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    \n    common = []\n    \n    for x in l1:\n       \
    \ if x in l2:\n            common.append(x)\n    \n    return common\n\ndef check(candidate):\n\
    \    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) ==\
    \ [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert\
    \ candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3,\
    \ 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp17z4k2he.py\"\
    , line 25, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp17z4k2he.py\"\
    , line 23, in test_check\n    check(common)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp17z4k2he.py\"\
    , line 17, in check\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1,\
    \ 5, 9, 653, 121]) == [1, 5, 653]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    \n    common = []\n    \n    for el in l1:\n      \
    \  if el in l2:\n            common.append(el)\n            \n    return sorted(common)\n\
    \ndef check(candidate):\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2])\
    \ == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert\
    \ candidate([4, 3, 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    \n    common = []\n    \n    for x in l1:\n       \
    \ if x in l2:\n            common.append(x)\n    \n    return common\n\ndef check(candidate):\n\
    \    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) ==\
    \ [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert\
    \ candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3,\
    \ 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa7dfhkvh.py\"\
    , line 25, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa7dfhkvh.py\"\
    , line 23, in test_check\n    check(common)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa7dfhkvh.py\"\
    , line 17, in check\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1,\
    \ 5, 9, 653, 121]) == [1, 5, 653]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    \n    common = []\n    \n    for x in l1:\n       \
    \ if x in l2:\n            common.append(x)\n    \n    return common\n\ndef check(candidate):\n\
    \    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) ==\
    \ [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert\
    \ candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3,\
    \ 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_1y8wom2.py\"\
    , line 25, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_1y8wom2.py\"\
    , line 23, in test_check\n    check(common)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_1y8wom2.py\"\
    , line 17, in check\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1,\
    \ 5, 9, 653, 121]) == [1, 5, 653]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    \n    common = []\n    \n    for x in l1:\n       \
    \ if x in l2:\n            common.append(x)\n    \n    return common\n\ndef check(candidate):\n\
    \    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) ==\
    \ [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert\
    \ candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3,\
    \ 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuma1y4dh.py\"\
    , line 25, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuma1y4dh.py\"\
    , line 23, in test_check\n    check(common)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuma1y4dh.py\"\
    , line 17, in check\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1,\
    \ 5, 9, 653, 121]) == [1, 5, 653]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    \n    common = []\n    \n    for e in l1:\n       \
    \ if e in l2:\n            common.append(e)\n    \n    return sorted(common)\n\
    \ndef check(candidate):\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2])\
    \ == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert\
    \ candidate([4, 3, 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    \n    common = []\n    \n    for x in l1:\n       \
    \ if x in l2:\n            common.append(x)\n    \n    return common\n\ndef check(candidate):\n\
    \    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) ==\
    \ [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert\
    \ candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3,\
    \ 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpk0c0mq5h.py\"\
    , line 25, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpk0c0mq5h.py\"\
    , line 23, in test_check\n    check(common)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpk0c0mq5h.py\"\
    , line 17, in check\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1,\
    \ 5, 9, 653, 121]) == [1, 5, 653]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    return list(set(l1) & set(l2))\n\ndef check(candidate):\n\
    \    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) ==\
    \ [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert\
    \ candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3,\
    \ 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    \n    common = []\n    \n    for el1 in l1:\n     \
    \   for el2 in l2:\n            if el1 == el2:\n                common.append(el1)\n\
    \                break\n    \n    return common\n\ndef check(candidate):\n   \
    \ assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1,\
    \ 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4,\
    \ 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) ==\
    \ []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6en0q2as.py\"\
    , line 27, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6en0q2as.py\"\
    , line 25, in test_check\n    check(common)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6en0q2as.py\"\
    , line 19, in check\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1,\
    \ 5, 9, 653, 121]) == [1, 5, 653]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    \n    common = []\n    \n    for el1 in l1:\n     \
    \   for el2 in l2:\n            if el1 == el2:\n                common.append(el1)\n\
    \                break\n    \n    return sorted(common)\n\ndef check(candidate):\n\
    \    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) ==\
    \ [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert\
    \ candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3,\
    \ 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    return sorted(list(set(l1) & set(l2)))\n\ndef check(candidate):\n\
    \    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) ==\
    \ [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert\
    \ candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3,\
    \ 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    \n    common = []\n    \n    for x in l1:\n       \
    \ if x in l2:\n            common.append(x)\n    \n    return common\n\ndef check(candidate):\n\
    \    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) ==\
    \ [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert\
    \ candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3,\
    \ 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6ko2sc78.py\"\
    , line 25, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6ko2sc78.py\"\
    , line 23, in test_check\n    check(common)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6ko2sc78.py\"\
    , line 17, in check\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1,\
    \ 5, 9, 653, 121]) == [1, 5, 653]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    \n    common = []\n    \n    for el1 in l1:\n     \
    \   for el2 in l2:\n            if el1 == el2:\n                common.append(el1)\n\
    \                break\n    \n    return sorted(common)\n\ndef check(candidate):\n\
    \    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) ==\
    \ [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert\
    \ candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3,\
    \ 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    return sorted(list(set(l1) & set(l2)))\n\ndef check(candidate):\n\
    \    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) ==\
    \ [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert\
    \ candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3,\
    \ 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    \n    common = []\n    \n    for el1 in l1:\n     \
    \   for el2 in l2:\n            if el1 == el2:\n                common.append(el1)\n\
    \                break\n    \n    return sorted(common)\n\ndef check(candidate):\n\
    \    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) ==\
    \ [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert\
    \ candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3,\
    \ 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    return list(set(l1) & set(l2))\n\ndef check(candidate):\n\
    \    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) ==\
    \ [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert\
    \ candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3,\
    \ 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    \n    common = []\n    \n    for x in l1:\n       \
    \ if x in l2:\n            common.append(x)\n            \n    return sorted(common)\n\
    \ndef check(candidate):\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2])\
    \ == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert\
    \ candidate([4, 3, 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    \n    common = []\n    \n    for e in l1:\n       \
    \ if e in l2:\n            common.append(e)\n    \n    return common\n    \ndef\
    \ check(candidate):\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1,\
    \ 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2])\
    \ == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert\
    \ candidate([4, 3, 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg6can7_p.py\"\
    , line 25, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg6can7_p.py\"\
    , line 23, in test_check\n    check(common)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg6can7_p.py\"\
    , line 17, in check\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1,\
    \ 5, 9, 653, 121]) == [1, 5, 653]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    \n    common = []\n    \n    for el in l1:\n      \
    \  if el in l2:\n            common.append(el)\n    \n    return common\n\ndef\
    \ check(candidate):\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1,\
    \ 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2])\
    \ == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert\
    \ candidate([4, 3, 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8pg0ifcu.py\"\
    , line 25, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8pg0ifcu.py\"\
    , line 23, in test_check\n    check(common)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8pg0ifcu.py\"\
    , line 17, in check\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1,\
    \ 5, 9, 653, 121]) == [1, 5, 653]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    \n    common = []\n    \n    for x in l1:\n       \
    \ if x in l2:\n            common.append(x)\n    \n    return sorted(common)\n\
    \ndef check(candidate):\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2])\
    \ == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert\
    \ candidate([4, 3, 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    return sorted(list(set(l1) & set(l2)))\n\ndef check(candidate):\n\
    \    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) ==\
    \ [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert\
    \ candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3,\
    \ 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    \n    common = []\n    \n    for x in l1:\n       \
    \ if x in l2:\n            common.append(x)\n            \n    return common\n\
    \ndef check(candidate):\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2])\
    \ == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert\
    \ candidate([4, 3, 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpng9qeq8_.py\"\
    , line 25, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpng9qeq8_.py\"\
    , line 23, in test_check\n    check(common)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpng9qeq8_.py\"\
    , line 17, in check\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1,\
    \ 5, 9, 653, 121]) == [1, 5, 653]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    \n    common = []\n    \n    for x in l1:\n       \
    \ if x in l2:\n            common.append(x)\n    \n    return common\n\ndef check(candidate):\n\
    \    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) ==\
    \ [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert\
    \ candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3,\
    \ 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_v9z_twu.py\"\
    , line 25, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_v9z_twu.py\"\
    , line 23, in test_check\n    check(common)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_v9z_twu.py\"\
    , line 17, in check\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1,\
    \ 5, 9, 653, 121]) == [1, 5, 653]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    \n    common = []\n    \n    for x in l1:\n       \
    \ if x in l2:\n            common.append(x)\n            \n    return common\n\
    \    \ndef check(candidate):\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5,\
    \ 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3,\
    \ 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n\
    \    assert candidate([4, 3, 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptf0611mv.py\"\
    , line 25, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptf0611mv.py\"\
    , line 23, in test_check\n    check(common)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptf0611mv.py\"\
    , line 17, in check\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1,\
    \ 5, 9, 653, 121]) == [1, 5, 653]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    \n    common = []\n    \n    for x in l1:\n       \
    \ if x in l2:\n            common.append(x)\n    \n    return common\n\ndef check(candidate):\n\
    \    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) ==\
    \ [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert\
    \ candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3,\
    \ 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbp3xu2w0.py\"\
    , line 25, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbp3xu2w0.py\"\
    , line 23, in test_check\n    check(common)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbp3xu2w0.py\"\
    , line 17, in check\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1,\
    \ 5, 9, 653, 121]) == [1, 5, 653]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    \n    common = []\n    \n    for x in l1:\n       \
    \ if x in l2:\n            common.append(x)\n            \n    return common\n\
    \ndef check(candidate):\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2])\
    \ == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert\
    \ candidate([4, 3, 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdotfixfu.py\"\
    , line 25, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdotfixfu.py\"\
    , line 23, in test_check\n    check(common)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdotfixfu.py\"\
    , line 17, in check\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1,\
    \ 5, 9, 653, 121]) == [1, 5, 653]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    \n    common = []\n    \n    for x in l1:\n       \
    \ if x in l2:\n            common.append(x)\n    \n    return sorted(common)\n\
    \ndef check(candidate):\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2])\
    \ == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert\
    \ candidate([4, 3, 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    return sorted(set(l1) & set(l2))\n\ndef check(candidate):\n\
    \    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) ==\
    \ [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert\
    \ candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3,\
    \ 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    \n    common = []\n    \n    for x in l1:\n       \
    \ if x in l2:\n            common.append(x)\n    \n    return common\n\ndef check(candidate):\n\
    \    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) ==\
    \ [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert\
    \ candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3,\
    \ 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzfcwweot.py\"\
    , line 25, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzfcwweot.py\"\
    , line 23, in test_check\n    check(common)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzfcwweot.py\"\
    , line 17, in check\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1,\
    \ 5, 9, 653, 121]) == [1, 5, 653]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    \n    common = []\n    \n    for el in l1:\n      \
    \  if el in l2:\n            common.append(el)\n    \n    return common\n\ndef\
    \ check(candidate):\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1,\
    \ 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2])\
    \ == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert\
    \ candidate([4, 3, 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcx_urw5b.py\"\
    , line 25, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcx_urw5b.py\"\
    , line 23, in test_check\n    check(common)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcx_urw5b.py\"\
    , line 17, in check\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1,\
    \ 5, 9, 653, 121]) == [1, 5, 653]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    \n    common = []\n    \n    for x in l1:\n       \
    \ if x in l2:\n            common.append(x)\n            \n    return common\n\
    \ndef check(candidate):\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2])\
    \ == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert\
    \ candidate([4, 3, 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpojmdf_4o.py\"\
    , line 25, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpojmdf_4o.py\"\
    , line 23, in test_check\n    check(common)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpojmdf_4o.py\"\
    , line 17, in check\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1,\
    \ 5, 9, 653, 121]) == [1, 5, 653]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    \n    common = []\n    \n    for el in l1:\n      \
    \  if el in l2:\n            common.append(el)\n            \n    return sorted(common)\n\
    \ndef check(candidate):\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2])\
    \ == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert\
    \ candidate([4, 3, 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    \n    common = []\n    \n    for e in l1:\n       \
    \ if e in l2:\n            common.append(e)\n    \n    return sorted(common)\n\
    \ndef check(candidate):\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2])\
    \ == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert\
    \ candidate([4, 3, 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    \n    common = []\n    \n    for e in l1:\n       \
    \ if e in l2:\n            common.append(e)\n    \n    return sorted(common)\n\
    \ndef check(candidate):\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2])\
    \ == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert\
    \ candidate([4, 3, 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    \n    common = []\n    \n    for x in l1:\n       \
    \ if x in l2:\n            common.append(x)\n            \n    return common\n\
    \ndef check(candidate):\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2])\
    \ == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert\
    \ candidate([4, 3, 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3e_b5_v0.py\"\
    , line 25, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3e_b5_v0.py\"\
    , line 23, in test_check\n    check(common)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3e_b5_v0.py\"\
    , line 17, in check\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1,\
    \ 5, 9, 653, 121]) == [1, 5, 653]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    \n    common = []\n    \n    for x in l1:\n       \
    \ if x in l2:\n            common.append(x)\n            \n    return common\n\
    \    \ndef check(candidate):\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5,\
    \ 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3,\
    \ 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n\
    \    assert candidate([4, 3, 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1fnp_0q0.py\"\
    , line 25, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1fnp_0q0.py\"\
    , line 23, in test_check\n    check(common)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1fnp_0q0.py\"\
    , line 17, in check\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1,\
    \ 5, 9, 653, 121]) == [1, 5, 653]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    \n    common = []\n    \n    for el in l1:\n      \
    \  if el in l2:\n            common.append(el)\n    \n    return sorted(common)\n\
    \ndef check(candidate):\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2])\
    \ == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert\
    \ candidate([4, 3, 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    \n    common = []\n    \n    for x in l1:\n       \
    \ if x in l2:\n            common.append(x)\n    \n    return common\n\ndef check(candidate):\n\
    \    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) ==\
    \ [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert\
    \ candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3,\
    \ 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1w1fmh6j.py\"\
    , line 25, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1w1fmh6j.py\"\
    , line 23, in test_check\n    check(common)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1w1fmh6j.py\"\
    , line 17, in check\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1,\
    \ 5, 9, 653, 121]) == [1, 5, 653]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    \n    common = []\n    \n    for e in l1:\n       \
    \ if e in l2:\n            common.append(e)\n    \n    return common\n\ndef check(candidate):\n\
    \    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) ==\
    \ [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert\
    \ candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3,\
    \ 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp63uz4we6.py\"\
    , line 25, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp63uz4we6.py\"\
    , line 23, in test_check\n    check(common)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp63uz4we6.py\"\
    , line 17, in check\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1,\
    \ 5, 9, 653, 121]) == [1, 5, 653]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    return sorted(set(l1) & set(l2))\n\ndef check(candidate):\n\
    \    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) ==\
    \ [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert\
    \ candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3,\
    \ 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    \n    common = []\n    \n    for x in l1:\n       \
    \ if x in l2:\n            common.append(x)\n            \n    return common\n\
    \ndef check(candidate):\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2])\
    \ == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert\
    \ candidate([4, 3, 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5wat_l_i.py\"\
    , line 25, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5wat_l_i.py\"\
    , line 23, in test_check\n    check(common)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5wat_l_i.py\"\
    , line 17, in check\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1,\
    \ 5, 9, 653, 121]) == [1, 5, 653]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    \n    common = []\n    \n    for el in l1:\n      \
    \  if el in l2:\n            common.append(el)\n            \n    return common\n\
    \ndef check(candidate):\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2])\
    \ == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert\
    \ candidate([4, 3, 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpilfu_j7b.py\"\
    , line 25, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpilfu_j7b.py\"\
    , line 23, in test_check\n    check(common)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpilfu_j7b.py\"\
    , line 17, in check\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1,\
    \ 5, 9, 653, 121]) == [1, 5, 653]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    \n    common = []\n    \n    for x in l1:\n       \
    \ if x in l2:\n            common.append(x)\n    \n    return common\n\ndef check(candidate):\n\
    \    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) ==\
    \ [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert\
    \ candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3,\
    \ 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpinag3gxd.py\"\
    , line 25, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpinag3gxd.py\"\
    , line 23, in test_check\n    check(common)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpinag3gxd.py\"\
    , line 17, in check\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1,\
    \ 5, 9, 653, 121]) == [1, 5, 653]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    return list(set(l1) & set(l2))\n\ndef check(candidate):\n\
    \    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) ==\
    \ [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert\
    \ candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3,\
    \ 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    return list(set(l1) & set(l2))\n\ndef check(candidate):\n\
    \    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) ==\
    \ [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert\
    \ candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3,\
    \ 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    \n    common = []\n    \n    for x in l1:\n       \
    \ if x in l2:\n            common.append(x)\n            \n    return common\n\
    \ndef check(candidate):\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2])\
    \ == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert\
    \ candidate([4, 3, 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppt01nidf.py\"\
    , line 25, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppt01nidf.py\"\
    , line 23, in test_check\n    check(common)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppt01nidf.py\"\
    , line 17, in check\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1,\
    \ 5, 9, 653, 121]) == [1, 5, 653]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    \n    common = []\n    \n    for x in l1:\n       \
    \ if x in l2:\n            common.append(x)\n    \n    return common\n\ndef check(candidate):\n\
    \    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) ==\
    \ [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert\
    \ candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3,\
    \ 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8mimrag9.py\"\
    , line 25, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8mimrag9.py\"\
    , line 23, in test_check\n    check(common)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8mimrag9.py\"\
    , line 17, in check\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1,\
    \ 5, 9, 653, 121]) == [1, 5, 653]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    return sorted(list(set(l1) & set(l2)))\n\ndef check(candidate):\n\
    \    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) ==\
    \ [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert\
    \ candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3,\
    \ 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    \n    common = []\n    \n    for el1 in l1:\n     \
    \   for el2 in l2:\n            if el1 == el2:\n                common.append(el1)\n\
    \                break\n    \n    return sorted(common)\n\ndef check(candidate):\n\
    \    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) ==\
    \ [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert\
    \ candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3,\
    \ 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    \n    common = []\n    \n    for el1 in l1:\n     \
    \   for el2 in l2:\n            if el1 == el2:\n                common.append(el1)\n\
    \                break\n    \n    return sorted(common)\n\ndef check(candidate):\n\
    \    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) ==\
    \ [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert\
    \ candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3,\
    \ 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    return sorted(list(set(l1) & set(l2)))\n\ndef check(candidate):\n\
    \    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) ==\
    \ [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert\
    \ candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3,\
    \ 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    \n    common = []\n    \n    for x in l1:\n       \
    \ if x in l2:\n            common.append(x)\n    \n    return common\n\ndef check(candidate):\n\
    \    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) ==\
    \ [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert\
    \ candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3,\
    \ 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwc6wv7hq.py\"\
    , line 25, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwc6wv7hq.py\"\
    , line 23, in test_check\n    check(common)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwc6wv7hq.py\"\
    , line 17, in check\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1,\
    \ 5, 9, 653, 121]) == [1, 5, 653]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    return sorted(list(set(l1) & set(l2)))\n\ndef check(candidate):\n\
    \    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) ==\
    \ [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert\
    \ candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3,\
    \ 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    \n    common = []\n    \n    for x in l1:\n       \
    \ if x in l2:\n            common.append(x)\n    \n    return common\n    \ndef\
    \ check(candidate):\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1,\
    \ 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2])\
    \ == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert\
    \ candidate([4, 3, 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbe142ijx.py\"\
    , line 25, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbe142ijx.py\"\
    , line 23, in test_check\n    check(common)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbe142ijx.py\"\
    , line 17, in check\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1,\
    \ 5, 9, 653, 121]) == [1, 5, 653]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    \n    common = []\n    \n    for el1 in l1:\n     \
    \   for el2 in l2:\n            if el1 == el2:\n                common.append(el1)\n\
    \                break\n    return common\n\ndef check(candidate):\n    assert\
    \ candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n\
    \    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4,\
    \ 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) ==\
    \ []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkb5q3dv0.py\"\
    , line 26, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkb5q3dv0.py\"\
    , line 24, in test_check\n    check(common)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkb5q3dv0.py\"\
    , line 18, in check\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1,\
    \ 5, 9, 653, 121]) == [1, 5, 653]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    return sorted(list(set(l1) & set(l2)))\n\ndef check(candidate):\n\
    \    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) ==\
    \ [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert\
    \ candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3,\
    \ 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    \n    common = []\n    \n    for el1 in l1:\n     \
    \   for el2 in l2:\n            if el1 == el2:\n                common.append(el1)\n\
    \                break\n    \n    return sorted(common)\n</cell>\n<cell>\ncommon([1,2,3],\
    \ [4,5,6])\n</cell>\n<cell>\ncommon([1,2,3], [4,5,6,7])\n</cell>\n<cell>\ncommon([1,2,3],\
    \ [4,5,6,7,8])\n</cell>\n<cell>\ncommon([1,2,3], [4,5,6,7,8,9])\n</cell>\n<cell>\n\
    common([1,2,3], [4,5,6,7,8,9,10])\n</cell>\n<cell>\ncommon([1,2,3], [4,5,6,7,8,9,10,11])\n\
    </cell>\n<cell>\ncommon([1,2,3], [4,5,6,7,8,9,10,11,12])\n</cell>\n<cell>\ncommon([1,2,3],\
    \ [4,5,6,7,8,9,10,11,12,13])\n</cell>\n<cell>\ncommon([1,2,3], [4,5,6,7,8,9,10,11,12,13,14])\n\
    </cell>\n<cell>\ncommon([1,2,3], [4,5,6,7,8,9,10,11,12,13,14,15])\n</cell>\n<cell>\n\
    common([1,2,3], [4,5,6,7,8,9,10,11,12,13,14,15,16])\n</cell>\n<cell>\ncommon([1,2,3],\
    \ [4,5,6,7,8,9,10,11,12,13,14,15,16,17])\n</cell>\n<cell>\ncommon([1,2,3], [4,5,6,7,8,9,10,11,12,13,14,15,16,17,18])\n\
    </cell>\n<cell>\ncommon([1,2,3], [4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19])\n\
    </cell>\n<cell>\ncommon([1,2,3], [4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<cell>\ncommon([1,2,3], [4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21])\n\
    </cell>\n<cell>\ncommon([1,2,3], [4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22])\n\
    </cell>\n<cell>\ncommon([1,2,3], [4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23])\n\
    </cell>\n<cell>\ncommon([1,2,3], [4,5,6,\ndef check(candidate):\n    assert candidate([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert\
    \ candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8],\
    \ [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef\
    \ test_check():\n    check(common)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkub50vcj.py\"\
    , line 17\n    </cell>\n    ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    \n    common = []\n    \n    for x in l1:\n       \
    \ if x in l2:\n            common.append(x)\n            \n    return common\n\
    \ndef check(candidate):\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2])\
    \ == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert\
    \ candidate([4, 3, 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzbyvt92m.py\"\
    , line 25, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzbyvt92m.py\"\
    , line 23, in test_check\n    check(common)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzbyvt92m.py\"\
    , line 17, in check\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1,\
    \ 5, 9, 653, 121]) == [1, 5, 653]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    return sorted(list(set(l1) & set(l2)))\n\ndef check(candidate):\n\
    \    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) ==\
    \ [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert\
    \ candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3,\
    \ 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    \n    common = []\n    \n    for el in l1:\n      \
    \  if el in l2:\n            common.append(el)\n    \n    return sorted(common)\n\
    \ndef check(candidate):\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2])\
    \ == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert\
    \ candidate([4, 3, 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    \n    common = []\n    \n    for el1 in l1:\n     \
    \   for el2 in l2:\n            if el1 == el2:\n                common.append(el1)\n\
    \                break\n    \n    return common\n\ndef check(candidate):\n   \
    \ assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1,\
    \ 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4,\
    \ 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) ==\
    \ []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwsxw5gv3.py\"\
    , line 27, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwsxw5gv3.py\"\
    , line 25, in test_check\n    check(common)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwsxw5gv3.py\"\
    , line 19, in check\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1,\
    \ 5, 9, 653, 121]) == [1, 5, 653]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    \n    common = []\n    \n    for el in l1:\n      \
    \  if el in l2:\n            common.append(el)\n    \n    return common\n\ndef\
    \ check(candidate):\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1,\
    \ 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2])\
    \ == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert\
    \ candidate([4, 3, 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo0vkh68e.py\"\
    , line 25, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo0vkh68e.py\"\
    , line 23, in test_check\n    check(common)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo0vkh68e.py\"\
    , line 17, in check\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1,\
    \ 5, 9, 653, 121]) == [1, 5, 653]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    return list(set(l1) & set(l2))\n\ndef check(candidate):\n\
    \    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) ==\
    \ [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert\
    \ candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3,\
    \ 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    return list(set(l1) & set(l2))\n\ndef check(candidate):\n\
    \    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) ==\
    \ [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert\
    \ candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3,\
    \ 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    \n    common = []\n    \n    for e in l1:\n       \
    \ if e in l2:\n            common.append(e)\n    \n    return common\n\ndef check(candidate):\n\
    \    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) ==\
    \ [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert\
    \ candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3,\
    \ 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf5huaw5x.py\"\
    , line 25, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf5huaw5x.py\"\
    , line 23, in test_check\n    check(common)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf5huaw5x.py\"\
    , line 17, in check\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1,\
    \ 5, 9, 653, 121]) == [1, 5, 653]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    \n    common = []\n    \n    for el in l1:\n      \
    \  if el in l2:\n            common.append(el)\n    \n    return common\n    \n\
    def check(candidate):\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1,\
    \ 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2])\
    \ == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert\
    \ candidate([4, 3, 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo_qvl6a9.py\"\
    , line 25, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo_qvl6a9.py\"\
    , line 23, in test_check\n    check(common)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo_qvl6a9.py\"\
    , line 17, in check\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1,\
    \ 5, 9, 653, 121]) == [1, 5, 653]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    \n    common = []\n    \n    for x in l1:\n       \
    \ if x in l2:\n            common.append(x)\n            \n    return common\n\
    \ndef check(candidate):\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2])\
    \ == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert\
    \ candidate([4, 3, 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp76x1649g.py\"\
    , line 25, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp76x1649g.py\"\
    , line 23, in test_check\n    check(common)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp76x1649g.py\"\
    , line 17, in check\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1,\
    \ 5, 9, 653, 121]) == [1, 5, 653]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    \n    common = []\n    \n    for x in l1:\n       \
    \ if x in l2:\n            common.append(x)\n            \n    return common\n\
    \ndef check(candidate):\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2])\
    \ == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert\
    \ candidate([4, 3, 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5_sodx2t.py\"\
    , line 25, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5_sodx2t.py\"\
    , line 23, in test_check\n    check(common)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5_sodx2t.py\"\
    , line 17, in check\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1,\
    \ 5, 9, 653, 121]) == [1, 5, 653]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    \n    common = []\n    \n    for el1 in l1:\n     \
    \   for el2 in l2:\n            if el1 == el2:\n                common.append(el1)\n\
    \                break\n    \n    return sorted(common)\n\ndef check(candidate):\n\
    \    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) ==\
    \ [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert\
    \ candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3,\
    \ 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    \n    common = []\n    \n    for x in l1:\n       \
    \ if x in l2:\n            common.append(x)\n            \n    return common\n\
    \    \ndef check(candidate):\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5,\
    \ 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3,\
    \ 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n\
    \    assert candidate([4, 3, 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkhcq3acw.py\"\
    , line 25, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkhcq3acw.py\"\
    , line 23, in test_check\n    check(common)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkhcq3acw.py\"\
    , line 17, in check\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1,\
    \ 5, 9, 653, 121]) == [1, 5, 653]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    \n    common = []\n    \n    for el1 in l1:\n     \
    \   for el2 in l2:\n            if el1 == el2:\n                common.append(el1)\n\
    \                break\n    \n    return common\n\ndef check(candidate):\n   \
    \ assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1,\
    \ 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4,\
    \ 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) ==\
    \ []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbz3q0cz7.py\"\
    , line 27, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbz3q0cz7.py\"\
    , line 25, in test_check\n    check(common)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbz3q0cz7.py\"\
    , line 19, in check\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1,\
    \ 5, 9, 653, 121]) == [1, 5, 653]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    \n    common = []\n    \n    for x in l1:\n       \
    \ if x in l2:\n            common.append(x)\n    \n    return common\n\ndef check(candidate):\n\
    \    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) ==\
    \ [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert\
    \ candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3,\
    \ 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqpmt8d6_.py\"\
    , line 25, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqpmt8d6_.py\"\
    , line 23, in test_check\n    check(common)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqpmt8d6_.py\"\
    , line 17, in check\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1,\
    \ 5, 9, 653, 121]) == [1, 5, 653]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    \n    common = []\n    \n    for x in l1:\n       \
    \ if x in l2:\n            common.append(x)\n            \n    return common\n\
    \ndef check(candidate):\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2])\
    \ == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert\
    \ candidate([4, 3, 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpumjqza_1.py\"\
    , line 25, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpumjqza_1.py\"\
    , line 23, in test_check\n    check(common)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpumjqza_1.py\"\
    , line 17, in check\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1,\
    \ 5, 9, 653, 121]) == [1, 5, 653]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    \n    common = []\n    \n    for e in l1:\n       \
    \ if e in l2:\n            common.append(e)\n    \n    return common\n\ndef check(candidate):\n\
    \    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) ==\
    \ [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert\
    \ candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3,\
    \ 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpb82cl0pa.py\"\
    , line 25, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpb82cl0pa.py\"\
    , line 23, in test_check\n    check(common)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpb82cl0pa.py\"\
    , line 17, in check\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1,\
    \ 5, 9, 653, 121]) == [1, 5, 653]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    return sorted(list(set(l1) & set(l2)))\n\ndef check(candidate):\n\
    \    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) ==\
    \ [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert\
    \ candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3,\
    \ 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    \n    common = []\n    \n    for x in l1:\n       \
    \ if x in l2:\n            common.append(x)\n    \n    return sorted(common)\n\
    \ndef check(candidate):\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2])\
    \ == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert\
    \ candidate([4, 3, 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    \n    common = []\n    \n    for x in l1:\n       \
    \ if x in l2:\n            common.append(x)\n            \n    return sorted(common)\n\
    \ndef check(candidate):\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2])\
    \ == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert\
    \ candidate([4, 3, 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    return sorted(set(l1) & set(l2))\n\ndef check(candidate):\n\
    \    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) ==\
    \ [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert\
    \ candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3,\
    \ 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    return sorted(list(set(l1) & set(l2)))\n\ndef check(candidate):\n\
    \    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) ==\
    \ [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert\
    \ candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3,\
    \ 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    return sorted(list(set(l1) & set(l2)))\n\ndef check(candidate):\n\
    \    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) ==\
    \ [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert\
    \ candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3,\
    \ 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    \n    common = []\n    \n    for el1 in l1:\n     \
    \   for el2 in l2:\n            if el1 == el2:\n                common.append(el1)\n\
    \                break\n    \n    return sorted(common)\n\ndef check(candidate):\n\
    \    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) ==\
    \ [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert\
    \ candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3,\
    \ 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    \n    common = []\n    \n    for e in l1:\n       \
    \ if e in l2:\n            common.append(e)\n    \n    return common\n</cell>\n\
    <cell>\ncommon([1,2,3], [4,5,6])\n</cell>\n<cell>\ncommon([1,2,3], [4,5,6,7])\n\
    </cell>\n<cell>\ncommon([1,2,3], [4,5,6,7,8])\n</cell>\n<cell>\ncommon([1,2,3],\
    \ [4,5,6,7,8,9])\n</cell>\n<cell>\ncommon([1,2,3], [4,5,6,7,8,9,10])\n</cell>\n\
    <cell>\ncommon([1,2,3], [4,5,6,7,8,9,10,11])\n</cell>\n<cell>\ncommon([1,2,3],\
    \ [4,5,6,7,8,9,10,11,12])\n</cell>\n<cell>\ncommon([1,2,3], [4,5,6,7,8,9,10,11,12,13])\n\
    </cell>\n<cell>\ncommon([1,2,3], [4,5,6,7,8,9,10,11,12,13,14])\n</cell>\n<cell>\n\
    common([1,2,3], [4,5,6,7,8,9,10,11,12,13,14,15])\n</cell>\n<cell>\ncommon([1,2,3],\
    \ [4,5,6,7,8,9,10,11,12,13,14,15,16])\n</cell>\n<cell>\ncommon([1,2,3], [4,5,6,7,8,9,10,11,12,13,14,15,16,17])\n\
    </cell>\n<cell>\ncommon([1,2,3], [4,5,6,7,8,9,10,11,12,13,14,15,16,17,18])\n</cell>\n\
    <cell>\ncommon([1,2,3], [4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19])\n</cell>\n\
    <cell>\ncommon([1,2,3], [4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n</cell>\n\
    <cell>\ncommon([1,2,3], [4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21])\n</cell>\n\
    <cell>\ncommon([1,2,3], [4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22])\n\
    </cell>\n<cell>\ncommon([1,2,3], [4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23])\n\
    </cell>\n<cell>\ncommon([1,2,3], [4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,\n\
    def check(candidate):\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1,\
    \ 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2])\
    \ == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert\
    \ candidate([4, 3, 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptn1_12hy.py\"\
    , line 15\n    </cell>\n    ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    \n    common = []\n    \n    for el1 in l1:\n     \
    \   for el2 in l2:\n            if el1 == el2:\n                common.append(el1)\n\
    \                break\n    \n    return sorted(common)\n\ndef check(candidate):\n\
    \    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) ==\
    \ [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert\
    \ candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3,\
    \ 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    \n    common = []\n    \n    for el in l1:\n      \
    \  if el in l2:\n            common.append(el)\n    \n    return sorted(common)\n\
    \ndef check(candidate):\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2])\
    \ == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert\
    \ candidate([4, 3, 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    \n    common = []\n    \n    for x in l1:\n       \
    \ if x in l2:\n            common.append(x)\n    \n    return sorted(common)\n\
    \ndef check(candidate):\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2])\
    \ == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert\
    \ candidate([4, 3, 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    \n    common = []\n    \n    for x in l1:\n       \
    \ if x in l2:\n            common.append(x)\n            \n    return common\n\
    \ndef check(candidate):\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2])\
    \ == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert\
    \ candidate([4, 3, 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2zr2dd19.py\"\
    , line 25, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2zr2dd19.py\"\
    , line 23, in test_check\n    check(common)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2zr2dd19.py\"\
    , line 17, in check\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1,\
    \ 5, 9, 653, 121]) == [1, 5, 653]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    \n    common = []\n    \n    for e in l1:\n       \
    \ if e in l2:\n            common.append(e)\n    \n    return common\n\ndef check(candidate):\n\
    \    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) ==\
    \ [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert\
    \ candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3,\
    \ 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzgb6c1l3.py\"\
    , line 25, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzgb6c1l3.py\"\
    , line 23, in test_check\n    check(common)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzgb6c1l3.py\"\
    , line 17, in check\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1,\
    \ 5, 9, 653, 121]) == [1, 5, 653]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    \n    common = []\n    \n    for x in l1:\n       \
    \ if x in l2:\n            common.append(x)\n    \n    return sorted(common)\n\
    \ndef check(candidate):\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2])\
    \ == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert\
    \ candidate([4, 3, 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    \n    common = []\n    \n    for x in l1:\n       \
    \ if x in l2:\n            common.append(x)\n    \n    return sorted(common)\n\
    \ndef check(candidate):\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2])\
    \ == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert\
    \ candidate([4, 3, 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    \n    common = []\n    \n    for x in l1:\n       \
    \ if x in l2:\n            common.append(x)\n    \n    return sorted(common)\n\
    \    \ndef check(candidate):\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5,\
    \ 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3,\
    \ 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n\
    \    assert candidate([4, 3, 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    return sorted(list(set(l1) & set(l2)))\n\ndef check(candidate):\n\
    \    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) ==\
    \ [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert\
    \ candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3,\
    \ 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    \n    common = []\n    \n    for e in l1:\n       \
    \ if e in l2:\n            common.append(e)\n    \n    return common\n    \ndef\
    \ check(candidate):\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1,\
    \ 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2])\
    \ == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert\
    \ candidate([4, 3, 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv01fs3ek.py\"\
    , line 25, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv01fs3ek.py\"\
    , line 23, in test_check\n    check(common)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv01fs3ek.py\"\
    , line 17, in check\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1,\
    \ 5, 9, 653, 121]) == [1, 5, 653]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    \n    common = []\n    \n    for x in l1:\n       \
    \ if x in l2:\n            common.append(x)\n            \n    return sorted(common)\n\
    \ndef check(candidate):\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2])\
    \ == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert\
    \ candidate([4, 3, 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    \n    common = []\n    \n    for x in l1:\n       \
    \ if x in l2:\n            common.append(x)\n    \n    return sorted(common)\n\
    \ndef check(candidate):\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2])\
    \ == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert\
    \ candidate([4, 3, 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    \n    common = []\n    \n    for el in l1:\n      \
    \  if el in l2:\n            common.append(el)\n            \n    return common\n\
    \ndef check(candidate):\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2])\
    \ == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert\
    \ candidate([4, 3, 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9gdyck0i.py\"\
    , line 25, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9gdyck0i.py\"\
    , line 23, in test_check\n    check(common)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9gdyck0i.py\"\
    , line 17, in check\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1,\
    \ 5, 9, 653, 121]) == [1, 5, 653]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    \n    common = []\n    \n    for x in l1:\n       \
    \ if x in l2:\n            common.append(x)\n    \n    return common\n</cell>\n\
    <cell>\ncommon([1,2,3], [4,5,6])\n</cell>\n<cell>\ncommon([1,2,3], [4,5,6,7])\n\
    </cell>\n<cell>\ncommon([1,2,3], [4,5,6,7,8])\n</cell>\n<cell>\ncommon([1,2,3],\
    \ [4,5,6,7,8,9])\n</cell>\n<cell>\ncommon([1,2,3], [4,5,6,7,8,9,10])\n</cell>\n\
    <cell>\ncommon([1,2,3], [4,5,6,7,8,9,10,11])\n</cell>\n<cell>\ncommon([1,2,3],\
    \ [4,5,6,7,8,9,10,11,12])\n</cell>\n<cell>\ncommon([1,2,3], [4,5,6,7,8,9,10,11,12,13])\n\
    </cell>\n<cell>\ncommon([1,2,3], [4,5,6,7,8,9,10,11,12,13,14])\n</cell>\n<cell>\n\
    common([1,2,3], [4,5,6,7,8,9,10,11,12,13,14,15])\n</cell>\n<cell>\ncommon([1,2,3],\
    \ [4,5,6,7,8,9,10,11,12,13,14,15,16])\n</cell>\n<cell>\ncommon([1,2,3], [4,5,6,7,8,9,10,11,12,13,14,15,16,17])\n\
    </cell>\n<cell>\ncommon([1,2,3], [4,5,6,7,8,9,10,11,12,13,14,15,16,17,18])\n</cell>\n\
    <cell>\ncommon([1,2,3], [4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19])\n</cell>\n\
    <cell>\ncommon([1,2,3], [4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n</cell>\n\
    <cell>\ncommon([1,2,3], [4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21])\n</cell>\n\
    <cell>\ncommon([1,2,3], [4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22])\n\
    </cell>\n<cell>\ncommon([1,2,3], [4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23])\n\
    </cell>\n<cell>\ncommon([1,2,3], [4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,\n\
    def check(candidate):\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1,\
    \ 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2])\
    \ == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert\
    \ candidate([4, 3, 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbpqa_i13.py\"\
    , line 15\n    </cell>\n    ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    \n    common = []\n    \n    for x in l1:\n       \
    \ if x in l2:\n            common.append(x)\n            \n    return common\n\
    \ndef check(candidate):\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2])\
    \ == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert\
    \ candidate([4, 3, 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjimmggz7.py\"\
    , line 25, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjimmggz7.py\"\
    , line 23, in test_check\n    check(common)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjimmggz7.py\"\
    , line 17, in check\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1,\
    \ 5, 9, 653, 121]) == [1, 5, 653]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    return sorted(list(set(l1) & set(l2)))\n\ndef check(candidate):\n\
    \    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) ==\
    \ [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert\
    \ candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3,\
    \ 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    \n    common = []\n    \n    for el1 in l1:\n     \
    \   for el2 in l2:\n            if el1 == el2:\n                common.append(el1)\n\
    \                break\n    \n    return sorted(common)\n\ndef check(candidate):\n\
    \    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) ==\
    \ [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert\
    \ candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3,\
    \ 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    \n    common = []\n    \n    for x in l1:\n       \
    \ if x in l2:\n            common.append(x)\n    \n    return common\n\ndef check(candidate):\n\
    \    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) ==\
    \ [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert\
    \ candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3,\
    \ 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjby_too1.py\"\
    , line 25, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjby_too1.py\"\
    , line 23, in test_check\n    check(common)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjby_too1.py\"\
    , line 17, in check\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1,\
    \ 5, 9, 653, 121]) == [1, 5, 653]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    \n    common = []\n    \n    for x in l1:\n       \
    \ if x in l2:\n            common.append(x)\n    \n    return sorted(common)\n\
    \ndef check(candidate):\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2])\
    \ == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert\
    \ candidate([4, 3, 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    \n    common = []\n    \n    for x in l1:\n       \
    \ if x in l2:\n            common.append(x)\n    \n    return sorted(common)\n\
    \ndef check(candidate):\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2])\
    \ == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert\
    \ candidate([4, 3, 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    \n    common = []\n    \n    for el in l1:\n      \
    \  if el in l2:\n            common.append(el)\n    \n    return common\n    \n\
    def check(candidate):\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1,\
    \ 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2])\
    \ == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert\
    \ candidate([4, 3, 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvuznqqnb.py\"\
    , line 25, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvuznqqnb.py\"\
    , line 23, in test_check\n    check(common)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvuznqqnb.py\"\
    , line 17, in check\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1,\
    \ 5, 9, 653, 121]) == [1, 5, 653]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    \n    common = []\n    \n    for x in l1:\n       \
    \ if x in l2:\n            common.append(x)\n    \n    return common\n\ndef check(candidate):\n\
    \    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) ==\
    \ [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert\
    \ candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3,\
    \ 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp03tdppkl.py\"\
    , line 25, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp03tdppkl.py\"\
    , line 23, in test_check\n    check(common)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp03tdppkl.py\"\
    , line 17, in check\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1,\
    \ 5, 9, 653, 121]) == [1, 5, 653]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    return sorted(list(set(l1) & set(l2)))\n\ndef check(candidate):\n\
    \    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) ==\
    \ [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert\
    \ candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3,\
    \ 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    return list(set(l1) & set(l2))\n\ndef check(candidate):\n\
    \    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) ==\
    \ [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert\
    \ candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3,\
    \ 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    return sorted(list(set(l1) & set(l2)))\n\ndef check(candidate):\n\
    \    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) ==\
    \ [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert\
    \ candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3,\
    \ 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    return sorted(list(set(l1) & set(l2)))\n\ndef check(candidate):\n\
    \    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) ==\
    \ [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert\
    \ candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3,\
    \ 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    \n    common = []\n    \n    for x in l1:\n       \
    \ if x in l2:\n            common.append(x)\n    \n    return common\n    \ndef\
    \ check(candidate):\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1,\
    \ 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2])\
    \ == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert\
    \ candidate([4, 3, 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzhtwq_97.py\"\
    , line 25, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzhtwq_97.py\"\
    , line 23, in test_check\n    check(common)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzhtwq_97.py\"\
    , line 17, in check\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1,\
    \ 5, 9, 653, 121]) == [1, 5, 653]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    \n    common = []\n    \n    for el in l1:\n      \
    \  if el in l2:\n            common.append(el)\n    \n    return sorted(common)\n\
    \ndef check(candidate):\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2])\
    \ == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert\
    \ candidate([4, 3, 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    \n    common = []\n    \n    for x in l1:\n       \
    \ if x in l2:\n            common.append(x)\n    \n    return sorted(common)\n\
    \ndef check(candidate):\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2])\
    \ == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert\
    \ candidate([4, 3, 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    \n    common = []\n    \n    for x in l1:\n       \
    \ if x in l2:\n            common.append(x)\n    \n    return common\n\ndef check(candidate):\n\
    \    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) ==\
    \ [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert\
    \ candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3,\
    \ 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkumvna3y.py\"\
    , line 25, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkumvna3y.py\"\
    , line 23, in test_check\n    check(common)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkumvna3y.py\"\
    , line 17, in check\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1,\
    \ 5, 9, 653, 121]) == [1, 5, 653]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    \n    common = []\n    \n    for x in l1:\n       \
    \ if x in l2:\n            common.append(x)\n            \n    return common\n\
    \ndef check(candidate):\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2])\
    \ == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert\
    \ candidate([4, 3, 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpylwddn1s.py\"\
    , line 25, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpylwddn1s.py\"\
    , line 23, in test_check\n    check(common)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpylwddn1s.py\"\
    , line 17, in check\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1,\
    \ 5, 9, 653, 121]) == [1, 5, 653]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    \n    common = []\n    \n    for x in l1:\n       \
    \ if x in l2:\n            common.append(x)\n    \n    return common\n\ndef check(candidate):\n\
    \    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) ==\
    \ [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert\
    \ candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3,\
    \ 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphrltnb0c.py\"\
    , line 25, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphrltnb0c.py\"\
    , line 23, in test_check\n    check(common)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphrltnb0c.py\"\
    , line 17, in check\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1,\
    \ 5, 9, 653, 121]) == [1, 5, 653]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    return sorted(list(set(l1) & set(l2)))\n\ndef check(candidate):\n\
    \    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) ==\
    \ [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert\
    \ candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3,\
    \ 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    \n    common = []\n    \n    for x in l1:\n       \
    \ if x in l2:\n            common.append(x)\n            \n    return common\n\
    \    \ndef check(candidate):\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5,\
    \ 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3,\
    \ 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n\
    \    assert candidate([4, 3, 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpaxnxs2cf.py\"\
    , line 25, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpaxnxs2cf.py\"\
    , line 23, in test_check\n    check(common)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpaxnxs2cf.py\"\
    , line 17, in check\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1,\
    \ 5, 9, 653, 121]) == [1, 5, 653]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    return list(set(l1) & set(l2))\n\ndef check(candidate):\n\
    \    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) ==\
    \ [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert\
    \ candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3,\
    \ 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    \n    common = []\n    \n    for el1 in l1:\n     \
    \   for el2 in l2:\n            if el1 == el2:\n                common.append(el1)\n\
    \                break\n    \n    return common\n\ndef check(candidate):\n   \
    \ assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1,\
    \ 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4,\
    \ 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) ==\
    \ []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp36262bdr.py\"\
    , line 27, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp36262bdr.py\"\
    , line 25, in test_check\n    check(common)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp36262bdr.py\"\
    , line 19, in check\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1,\
    \ 5, 9, 653, 121]) == [1, 5, 653]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    return sorted(set(l1) & set(l2))\n\ndef check(candidate):\n\
    \    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) ==\
    \ [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert\
    \ candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3,\
    \ 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    \n    common = []\n    \n    for x in l1:\n       \
    \ if x in l2:\n            common.append(x)\n            \n    return common\n\
    \ndef check(candidate):\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2])\
    \ == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert\
    \ candidate([4, 3, 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpoi50gr_x.py\"\
    , line 25, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpoi50gr_x.py\"\
    , line 23, in test_check\n    check(common)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpoi50gr_x.py\"\
    , line 17, in check\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1,\
    \ 5, 9, 653, 121]) == [1, 5, 653]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    \n    common = []\n    \n    for x in l1:\n       \
    \ if x in l2:\n            common.append(x)\n    \n    return common\n\ndef check(candidate):\n\
    \    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) ==\
    \ [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert\
    \ candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3,\
    \ 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpab3qpjzn.py\"\
    , line 25, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpab3qpjzn.py\"\
    , line 23, in test_check\n    check(common)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpab3qpjzn.py\"\
    , line 17, in check\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1,\
    \ 5, 9, 653, 121]) == [1, 5, 653]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    \n    common = []\n    \n    for x in l1:\n       \
    \ if x in l2:\n            common.append(x)\n    \n    return common\n    \ndef\
    \ check(candidate):\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1,\
    \ 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2])\
    \ == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert\
    \ candidate([4, 3, 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvkd45lji.py\"\
    , line 25, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvkd45lji.py\"\
    , line 23, in test_check\n    check(common)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvkd45lji.py\"\
    , line 17, in check\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1,\
    \ 5, 9, 653, 121]) == [1, 5, 653]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    return sorted(set(l1) & set(l2))\n\ndef check(candidate):\n\
    \    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) ==\
    \ [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert\
    \ candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3,\
    \ 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    \n    common = []\n    \n    for el in l1:\n      \
    \  if el in l2:\n            common.append(el)\n    \n    return sorted(common)\n\
    \ndef check(candidate):\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2])\
    \ == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert\
    \ candidate([4, 3, 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    return sorted(list(set(l1) & set(l2)))\n\ndef check(candidate):\n\
    \    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) ==\
    \ [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert\
    \ candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3,\
    \ 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    \n    common = []\n    \n    for x in l1:\n       \
    \ if x in l2:\n            common.append(x)\n            \n    return common\n\
    \ndef check(candidate):\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2])\
    \ == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert\
    \ candidate([4, 3, 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsdl0wqf5.py\"\
    , line 25, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsdl0wqf5.py\"\
    , line 23, in test_check\n    check(common)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsdl0wqf5.py\"\
    , line 17, in check\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1,\
    \ 5, 9, 653, 121]) == [1, 5, 653]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    return sorted(set(l1) & set(l2))\n\ndef check(candidate):\n\
    \    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) ==\
    \ [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert\
    \ candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3,\
    \ 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    return sorted(list(set(l1) & set(l2)))\n\ndef check(candidate):\n\
    \    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) ==\
    \ [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert\
    \ candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3,\
    \ 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    \n    common = []\n    \n    for el in l1:\n      \
    \  if el in l2:\n            common.append(el)\n    \n    return sorted(common)\n\
    \ndef check(candidate):\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2])\
    \ == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert\
    \ candidate([4, 3, 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    \n    common = []\n    \n    for el1 in l1:\n     \
    \   for el2 in l2:\n            if el1 == el2:\n                common.append(el1)\n\
    \                break\n    \n    return sorted(common)\n\ndef check(candidate):\n\
    \    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) ==\
    \ [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert\
    \ candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3,\
    \ 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    \n    common = []\n    \n    for el1 in l1:\n     \
    \   for el2 in l2:\n            if el1 == el2:\n                common.append(el1)\n\
    \                break\n    \n    return sorted(common)\n    \ndef check(candidate):\n\
    \    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) ==\
    \ [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert\
    \ candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3,\
    \ 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    return sorted(list(set(l1) & set(l2)))\n\ndef check(candidate):\n\
    \    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) ==\
    \ [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert\
    \ candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3,\
    \ 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    \n    common = []\n    \n    for el1 in l1:\n     \
    \   for el2 in l2:\n            if el1 == el2:\n                common.append(el1)\n\
    \                break\n    \n    return sorted(common)\n\ndef check(candidate):\n\
    \    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) ==\
    \ [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert\
    \ candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3,\
    \ 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
