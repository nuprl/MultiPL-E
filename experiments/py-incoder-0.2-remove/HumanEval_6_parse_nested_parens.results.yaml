name: HumanEval_6_parse_nested_parens
language: py
results:
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_level\
    \ = 0\n    paren_levels = []\n    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudd2r_ab.py\"\
    , line 66\n    paren_levels.append(\n                       ^\nSyntaxError: '('\
    \ was never closed\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_stack\
    \ = []\n    level = 0\n    for c in paren_string:\n        if c == '(':\n    \
    \        paren_stack.append(level)\n        elif c == ')':\n            level\
    \ = paren_stack.pop()\n    return paren_stack\n\ndef check(candidate):\n    assert\
    \ candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('()\
    \ (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu2q6t7i7.py\"\
    , line 26, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu2q6t7i7.py\"\
    , line 24, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu2q6t7i7.py\"\
    , line 19, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_stack\
    \ = []\n    paren_level = 0\n    paren_levels = []\n    paren_levels_len = 0\n\
    \    paren_levels_lens = []\n    paren_levels_lens_len = 0\n    paren_levels_lens_lens\
    \ = []\n    paren_levels_lens_lens_len = 0\n    paren_levels_lens_lens_lens =\
    \ []\n    paren_levels_lens_lens_lens_len = 0\n    paren_levels_lens_lens_lens_lens\
    \ = []\n    paren_levels_lens_lens_lens_lens_len = 0\n    paren_levels_lens_lens_lens_lens_lens\
    \ = []\n    paren_levels_lens_lens_lens_lens_lens_len = 0\n    paren_levels_lens_lens_lens_lens_lens_lens\
    \ = []\n    paren_levels_lens_lens_lens_lens_lens_lens_len = 0\n    paren_levels_lens_lens_lens_lens_lens_lens_lens\
    \ = []\n    paren_levels_lens_lens_lens_lens_lens_lens_lens_len = 0\n    paren_levels_lens_lens_lens_lens_lens_lens_lens_lens\
    \ = []\n    paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_len = 0\n   \
    \ paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens = []\n    paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_len\
    \ = 0\n    paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens = []\n\
    \    paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_len = 0\n\
    \    paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens = []\n\
    \    paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_len =\
    \ 0\n    paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens\
    \ = []\n    paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_len\
    \ = 0\n    paren_levels_len\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpki_spbxc.py\"\
    , line 46, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpki_spbxc.py\"\
    , line 44, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpki_spbxc.py\"\
    , line 39, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_level\
    \ = 0\n    paren_stack = []\n    paren_stack.append(paren_string)\n    while len(paren_stack)\
    \ > 0:\n        paren_string = paren_stack.pop()\n        if paren_string == '(':\n\
    \            paren_level += 1\n        elif paren_string == ')':\n           \
    \ paren_level -= 1\n            if paren_level == 0:\n                return paren_stack\n\
    \        else:\n            paren_stack.append(paren_string)\n    raise ValueError(f\"\
    Parentheses string '{paren_string}' is not valid\")\n\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    stack =\
    \ []\n    level = 0\n    paren_level = 0\n    paren_levels = []\n    paren_levels_str\
    \ = \"\"\n    paren_levels_str_list = []\n    paren_levels_str_list.append(paren_levels_str)\n\
    \    paren_levels_str_list.append(paren_levels_str)\n    paren_levels_str_list.append(paren_levels_str)\n\
    \    paren_levels_str_list.append(paren_levels_str)\n    paren_levels_str_list.append(paren_levels_str)\n\
    \    paren_levels_str_list.append(paren_levels_str)\n    paren_levels_str_list.append(paren_levels_str)\n\
    \    paren_levels_str_list.append(paren_levels_str)\n    paren_levels_str_list.append(paren_levels_str)\n\
    \    paren_levels_str_list.append(paren_levels_str)\n    paren_levels_str_list.append(paren_levels_str)\n\
    \    paren_levels_str_list.append(paren_levels_str)\n    paren_levels_str_list.append(paren_levels_str)\n\
    \    paren_levels_str_list.append(paren_levels_str)\n    paren_levels_str_list.append(paren_levels_str)\n\
    \    paren_levels_str_list.append(paren_levels_str)\n    paren_levels_str_list.append(paren_levels_str)\n\
    \    paren_levels_str_list.append(paren_levels_str)\n    paren_levels_str_list.append(paren_levels_str)\n\
    \    paren_levels_str_list.append(paren_levels_str)\n    paren_levels_str_list.append(paren_levels_str)\n\
    \    paren_levels_str_list.append(paren_levels_str)\n    paren_levels_str_list.append(paren_levels_str)\n\
    \    paren_levels_str_list.append(paren_levels_str)\n    paren_levels_str_list.append(paren_levels_str)\n\
    \    paren_levels_str_list.append(paren_levels_str)\n    paren_levels_str_list.append(paren_levels_str)\n\
    \    paren_levels_str_list.append(paren_levels_str)\n    paren_levels_str_list.append(paren_levels_str)\n\
    \    paren_levels_str_list.append(paren_levels_str)\n    paren_levels_str_list.append(paren_levels_str)\n\
    \    paren_levels_str_list.append(paren_levels_str)\n    paren_levels_str_list.append(paren_levels_str)\n\
    \    paren_levels_str_list.append(paren_levels_str)\n    paren_levels_str_list.append(paren_levels_str)\n\
    \    paren_levels_str_list.append(paren_levels_str)\n    paren_levels_str_list.append(paren\n\
    def check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') ==\
    \ [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n\
    \    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppd7743ld.py\"\
    , line 51\n    paren_levels_str_list.append(paren\n                          \
    \      ^\nSyntaxError: '(' was never closed\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_level\
    \ = 0\n    paren_stack = []\n    paren_stack.append(paren_string)\n    while len(paren_stack)\
    \ > 0:\n        paren_str = paren_stack.pop()\n        paren_str = paren_str.replace('(',\
    \ ' ( ')\n        paren_str = paren_str.replace(')', ' ) ')\n        paren_str\
    \ = paren_str.replace(' ', '  ')\n        paren_str = paren_str.replace('  ',\
    \ ' ')\n        paren_str = paren_str.replace('  ', ' ')\n        paren_str =\
    \ paren_str.replace('  ', ' ')\n        paren_str = paren_str.replace('  ', '\
    \ ')\n        paren_str = paren_str.replace('  ', ' ')\n        paren_str = paren_str.replace('\
    \  ', ' ')\n        paren_str = paren_str.replace('  ', ' ')\n        paren_str\
    \ = paren_str.replace('  ', ' ')\n        paren_str = paren_str.replace('  ',\
    \ ' ')\n        paren_str = paren_str.replace('  ', ' ')\n        paren_str =\
    \ paren_str.replace('  ', ' ')\n        paren_str = paren_str.replace('  ', '\
    \ ')\n        paren_str = paren_str.replace('  ', ' ')\n        paren_str = paren_str.replace('\
    \  ', ' ')\n        paren_str = paren_str.replace('  ', ' ')\n        paren_str\
    \ = paren_str.replace('  ', ' ')\n        paren_str = paren_str.replace('  ',\
    \ ' ')\n        paren_str = paren_str.replace('  ', ' ')\n        paren_str =\
    \ paren_str.replace('  ', ' ')\n        paren_str = paren_str.replace('  ', '\
    \ ')\n        paren_str = paren_str.replace('  ', ' ')\n        paren_str = paren_str.replace('\
    \  ', ' ')\n        paren_str = paren_str.replace('  ', ' ')\n        paren_str\
    \ = paren_str.replace('  ', ' ')\n        paren_str = paren_str.replace('  ',\
    \ ' ')\n        paren_str = paren_str.replace('  ', ' ')\n        paren_str =\
    \ paren_str.replace('  ', ' ')\n        paren_str = paren_str.replace('  ', '\
    \ ')\n        paren_str = paren_str.replace('  ', ' ')\n        paren_str = paren_str.replace('\
    \  ', ' ')\n        paren_str = paren_str.replace('  ', ' ')\n        paren_str\
    \ = paren_str.replace('  ', ' ')\n        paren_str = paren_str.replace('  ',\
    \ ' ')\n        paren_str = paren_str.replace('  ', ' ')\n        paren_str =\
    \ paren_str.replace('  ', ' ')\n        paren_str = paren_str.replace('  ', '\
    \ ')\n        paren_str = \ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpiqtheomf.py\"\
    , line 53\n    paren_str = \n                ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_level\
    \ = 0\n    paren_stack = []\n    paren_stack.append(paren_string)\n    paren_level_string\
    \ = paren_string\n    while paren_level != len(paren_stack):\n        paren_level_string\
    \ = paren_stack.pop()\n        paren_level_string = paren_level_string.strip()\n\
    \        paren_level_string = paren_level_string.lstrip('(').rstrip(')')\n   \
    \     paren_level_string = paren_level_string.strip()\n        paren_level_string\
    \ = paren_level_string.lstrip('(').rstrip(')')\n        paren_level_string = paren_level_string.strip()\n\
    \        paren_level_string = paren_level_string.lstrip('(').rstrip(')')\n   \
    \     paren_level_string = paren_level_string.lstrip('(').rstrip(')')\n      \
    \  paren_level_string = paren_level_string.lstrip('(').rstrip(')')\n        paren_level_string\
    \ = paren_level_string.lstrip('(').rstrip(')')\n        paren_level_string = paren_level_string.lstrip('(').rstrip(')')\n\
    \        paren_level_string = paren_level_string.lstrip('(').rstrip(')')\n   \
    \     paren_level_string = paren_level_string.lstrip('(').rstrip(')')\n      \
    \  paren_level_string = paren_level_string.lstrip('(').rstrip(')')\n        paren_level_string\
    \ = paren_level_string.lstrip('(').rstrip(')')\n        paren_level_string = paren_level_string.lstrip('(').rstrip(')')\n\
    \        paren_level_string = paren_level_string.lstrip('(').rstrip(')')\n   \
    \     paren_level_string = paren_level_string.lstrip('(').rstrip(')')\n      \
    \  paren_level_string = paren_level_string.lstrip('(').rstrip(')')\n        paren_level_string\
    \ = paren_level_string.lstrip('(').rstrip(')')\n        paren_level_string = paren_level_string.lstrip('(').rstrip(')')\n\
    \        paren_level_string = paren_level_string.lstrip('(').rstrip(')')\n   \
    \     paren_level_string = paren_level_string.lstrip('(').rstrip(')')\n      \
    \  paren_level_string = paren_level_string.lstrip('(').rstrip(')')\n        paren_level_string\
    \ = paren_level_string.lstrip('(').rstrip(')')\n        paren_level_string = paren_level_string.lstrip('(').rstrip(')')\n\
    \        paren_\ndef check(candidate):\n    assert candidate('(()()) ((())) ()\
    \ ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe8ax3xcc.py\"\
    , line 49, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe8ax3xcc.py\"\
    , line 47, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe8ax3xcc.py\"\
    , line 42, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe8ax3xcc.py\"\
    , line 40, in parse_nested_parens\n    paren_\nNameError: name 'paren_' is not\
    \ defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    level =\
    \ 0\n    paren_stack = []\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpum4myhyu.py\"\
    , line 82\n    paren_stack.append(\n                      ^\nSyntaxError: '('\
    \ was never closed\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_stack\
    \ = []\n    paren_level = 0\n    paren_levels = []\n    paren_levels.append(0)\n\
    \    paren_stack.append(0)\n    paren_levels.append(0)\n    paren_stack.append(0)\n\
    \    paren_levels.append(0)\n    paren_stack.append(0)\n    paren_levels.append(0)\n\
    \    paren_stack.append(0)\n    paren_levels.append(0)\n    paren_stack.append(0)\n\
    \    paren_levels.append(0)\n    paren_stack.append(0)\n    paren_levels.append(0)\n\
    \    paren_stack.append(0)\n    paren_levels.append(0)\n    paren_stack.append(0)\n\
    \    paren_levels.append(0)\n    paren_stack.append(0)\n    paren_levels.append(0)\n\
    \    paren_stack.append(0)\n    paren_levels.append(0)\n    paren_stack.append(0)\n\
    \    paren_levels.append(0)\n    paren_stack.append(0)\n    paren_levels.append(0)\n\
    \    paren_stack.append(0)\n    paren_levels.append(0)\n    paren_stack.append(0)\n\
    \    paren_levels.append(0)\n    paren_stack.append(0)\n    paren_levels.append(0)\n\
    \    paren_stack.append(0)\n    paren_levels.append(0)\n    paren_stack.append(0)\n\
    \    paren_levels.append(0)\n    paren_stack.append(0)\n    paren_levels.append(0)\n\
    \    paren_stack.append(0)\n    paren_levels.append(0)\n    paren_stack.append(0)\n\
    \    paren_levels.append(0)\n    paren_stack.append(0)\n    paren_levels.append(0)\n\
    \    paren_stack.append(0)\n    paren_levels.append(0)\n    paren_stack.append(0)\n\
    \    paren_levels.append(0)\n    paren_stack.append(0)\n    paren_levels.append(0)\n\
    \    paren_stack.append(0)\n    paren_levels.append(0)\n    paren_stack.append(0)\n\
    \    paren_levels.append(0)\n    paren_stack.append(0)\n    paren_levels.append(0)\n\
    \    paren_stack.append(0)\n    paren_levels.append(0)\n    paren_stack.append(0)\n\
    \    paren_levels.append(0)\n    paren_stack.append(0)\n    paren_levels.append(0)\n\
    \    paren_stack.append(0)\n    paren_levels.append(0)\n    paren_stack.append(0)\n\
    \    paren_levels.append(0)\n    paren_stack.append(0)\n    paren_levels.append(0)\n\
    \    paren_stack.append(0)\n    paren_levels.append(0)\n    paren_stack.append(0)\n\
    \    paren_level\ndef check(candidate):\n    assert candidate('(()()) ((())) ()\
    \ ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgvs0yoh0.py\"\
    , line 91, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgvs0yoh0.py\"\
    , line 89, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgvs0yoh0.py\"\
    , line 84, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_stack\
    \ = []\n    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())')\
    \ == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3,\
    \ 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n   \
    \ check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3gnj4qfe.py\"\
    , line 91, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3gnj4qfe.py\"\
    , line 89, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3gnj4qfe.py\"\
    , line 84, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3gnj4qfe.py\"\
    , line 82, in parse_nested_parens\n    paren\nNameError: name 'paren' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_level\
    \ = 0\n    paren_levels = []\n    paren_levels_stack = []\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren\n\
    def check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') ==\
    \ [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n\
    \    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpeig7tmzx.py\"\
    , line 56\n    paren_levels_stack.append(paren\n                             ^\n\
    SyntaxError: '(' was never closed\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    stack =\
    \ []\n    level = 0\n    paren_level = 0\n    paren_level_stack = []\n    paren_level_stack.append(0)\n\
    \    paren_level_stack.append(0)\n    for c in paren_string:\n        if c ==\
    \ '(':\n            paren_level_stack[level] += 1\n            level += 1\n  \
    \      elif c == ')':\n            paren_level_stack[level] -= 1\n           \
    \ level -= 1\n            if paren_level_stack[level] == 0:\n                paren_level\
    \ -= 1\n                paren_level_stack.pop()\n        elif c == '[':\n    \
    \        paren_level_stack[level] += 1\n            level += 1\n        elif c\
    \ == ']':\n            paren_level_stack[level] -= 1\n            level -= 1\n\
    \            if paren_level_stack[level] == 0:\n                paren_level -=\
    \ 1\n                paren_level_stack.pop()\n        elif c == '{':\n       \
    \     paren_level_stack[level] += 1\n            level += 1\n        elif c ==\
    \ '}':\n            paren_level_stack[level] -= 1\n            level -= 1\n  \
    \          if paren_level_stack[level] == 0:\n                paren_level -= 1\n\
    \                paren_level_stack.pop()\n    \n    return paren_level\n\ndef\
    \ check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n\
    \    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4_3g7lk4.py\"\
    , line 54, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4_3g7lk4.py\"\
    , line 52, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4_3g7lk4.py\"\
    , line 47, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4_3g7lk4.py\"\
    , line 20, in parse_nested_parens\n    paren_level_stack[level] -= 1\nIndexError:\
    \ list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_level\
    \ = 0\n    paren_stack = []\n    paren_levels = []\n    paren_level = 0\n    paren_stack\
    \ = []\n    paren_levels = []\n    paren_level = 0\n    paren_stack = []\n   \
    \ paren_levels = []\n    paren_level = 0\n    paren_stack = []\n    paren_levels\
    \ = []\n    paren_level = 0\n    paren_stack = []\n    paren_levels = []\n   \
    \ paren_level = 0\n    paren_stack = []\n    paren_levels = []\n    paren_level\
    \ = 0\n    paren_stack = []\n    paren_levels = []\n    paren_level = 0\n    paren_stack\
    \ = []\n    paren_levels = []\n    paren_level = 0\n    paren_stack = []\n   \
    \ paren_levels = []\n    paren_level = 0\n    paren_stack = []\n    paren_levels\
    \ = []\n    paren_level = 0\n    paren_stack = []\n    paren_levels = []\n   \
    \ paren_level = 0\n    paren_stack = []\n    paren_levels = []\n    paren_level\
    \ = 0\n    paren_stack = []\n    paren_levels = []\n    paren_level = 0\n    paren_stack\
    \ = []\n    paren_levels = []\n    paren_level = 0\n    paren_stack = []\n   \
    \ paren_levels = []\n    paren_level = 0\n    paren_stack = []\n    paren_levels\
    \ = []\n    paren_level = 0\n    paren_stack = []\n    paren_levels = []\n   \
    \ paren_level = 0\n    paren_stack = []\n    paren_levels = []\n    paren_level\
    \ = 0\n    paren_stack = []\n    paren_levels = []\n    paren_level = 0\n    paren_stack\
    \ = []\n    paren_levels = []\n    paren_level = 0\n    paren_stack = []\n   \
    \ paren_levels = []\n    paren_level = 0\n    paren_stack = []\n    paren_levels\
    \ = []\n    paren_level = 0\n    paren_stack = []\n    paren_levels = []\n   \
    \ paren_level = 0\n    paren_stack = []\n    paren_levels = []\n    paren_level\
    \ = 0\n    paren_stack = []\n    paren_levels = []\n    paren_level = 0\n    paren_stack\
    \ = []\n    paren_levels = []\n    paren_level = 0\n    paren_stack = []\n   \
    \ paren_levels = []\n    paren_level = 0\n    paren_stack = []\n    paren_levels\
    \ = []\n    paren_level = 0\n    paren\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0c7re3jr.py\"\
    , line 103, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0c7re3jr.py\"\
    , line 101, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0c7re3jr.py\"\
    , line 96, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0c7re3jr.py\"\
    , line 94, in parse_nested_parens\n    paren\nNameError: name 'paren' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_stack\
    \ = []\n    paren_stack.append(0)\n    paren_level = 0\n    paren_levels = []\n\
    \    paren_levels.append(0)\n    paren_levels.append(0)\n    for index, char in\
    \ enumerate(paren_string):\n        if char == '(':\n            paren_stack.append(index)\n\
    \            paren_level += 1\n            paren_levels.append(paren_level)\n\
    \        elif char == ')':\n            paren_stack.pop()\n            paren_level\
    \ -= 1\n            paren_levels.append(paren_level)\n        elif char == ' ':\n\
    \            if paren_stack:\n                paren_levels[paren_stack[-1]] +=\
    \ 1\n    return paren_levels\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpejtejrri.py\"\
    , line 37, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpejtejrri.py\"\
    , line 35, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpejtejrri.py\"\
    , line 30, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_stack\
    \ = []\n    paren_level = 0\n    paren_levels = []\n    for c in paren_string:\n\
    \        if c == '(':\n            paren_stack.append(paren_level)\n         \
    \   paren_level += 1\n        elif c == ')':\n            paren_level -= 1\n \
    \           paren_levels.append(paren_level)\n        elif c == '[':\n       \
    \     paren_stack.append(paren_level)\n        elif c == ']':\n            paren_level\
    \ -= 1\n            paren_levels.append(paren_level)\n        elif c == ',':\n\
    \            paren_levels.append(paren_level)\n    return paren_levels\n\ndef\
    \ check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n\
    \    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm51hushm.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm51hushm.py\"\
    , line 34, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm51hushm.py\"\
    , line 29, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_level\
    \ = 0\n    paren_levels = []\n    paren_levels_string = \"\"\n    paren_levels_strings\
    \ = []\n    for char in paren_string:\n        if char == \"(\":\n           \
    \ paren_level += 1\n            paren_levels.append(paren_level)\n           \
    \ paren_levels_string += char\n        elif char == \")\":\n            paren_level\
    \ -= 1\n            paren_levels.append(paren_level)\n            paren_levels_string\
    \ += char\n        elif char == \" \":\n            paren_levels_strings.append(paren_levels_string)\n\
    \            paren_levels_string = \"\"\n    paren_levels_strings.append(paren_levels_string)\n\
    \    paren_levels_strings = list(set(paren_levels_strings))\n    paren_levels_strings.sort()\n\
    \    return paren_levels_strings\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyli96fy2.py\"\
    , line 38, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyli96fy2.py\"\
    , line 36, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyli96fy2.py\"\
    , line 31, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_stack\
    \ = []\n    paren_level = 0\n    paren_levels = []\n    paren_levels_count = 0\n\
    \    for c in paren_string:\n        if c == '(':\n            paren_stack.append(paren_level)\n\
    \            paren_level += 1\n        elif c == ')':\n            paren_level\
    \ -= 1\n            paren_levels.append(paren_level)\n            paren_levels_count\
    \ += 1\n        elif c == ' ':\n            if paren_level == 0:\n           \
    \     paren_levels.append(paren_level)\n                paren_levels_count +=\
    \ 1\n            else:\n                paren_levels.append(paren_level)\n   \
    \             paren_levels_count += 1\n                paren_level = 0\n    return\
    \ paren_levels\n\ndef check(candidate):\n    assert candidate('(()()) ((())) ()\
    \ ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4a68grk0.py\"\
    , line 39, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4a68grk0.py\"\
    , line 37, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4a68grk0.py\"\
    , line 32, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_stack\
    \ = []\n    paren_level = 0\n    paren_levels = []\n    paren_levels.append(paren_level)\n\
    \    paren_stack.append(paren_level)\n    paren_levels.append(paren_level)\n \
    \   paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n \
    \   paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n \
    \   paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n \
    \   paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n \
    \   paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n \
    \   paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n \
    \   paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n \
    \   paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n \
    \   paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n \
    \   paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n \
    \   paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n \
    \   paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n \
    \   paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n \
    \   paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n \
    \   paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n \
    \   paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n \
    \   paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n \
    \   paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n \
    \   paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n \
    \   paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n \
    \   paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n \
    \   paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n \
    \   paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n \
    \   paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n \
    \   paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n \
    \   paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\ndef\
    \ check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n\
    \    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0akwdpa8.py\"\
    , line 75, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0akwdpa8.py\"\
    , line 73, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0akwdpa8.py\"\
    , line 68, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_stack\
    \ = []\n    paren_level = 0\n    paren_stack.append(paren_level)\n    paren_level_string\
    \ = paren_string\n    paren_level_string = paren_string.strip()\n    paren_level_string\
    \ = paren_level_string.replace('(', ' ( ')\n    paren_level_string = paren_level_string.replace(')',\
    \ ' ) ')\n    paren_level_string = paren_level_string.replace('(', ' ( ')\n  \
    \  paren_level_string = paren_level_string.replace(')', ' ) ')\n    paren_level_string\
    \ = paren_level_string.replace('(', ' ( ')\n    paren_level_string = paren_level_string.replace(')',\
    \ ' ) ')\n    paren_level_string = paren_level_string.replace('(', ' ( ')\n  \
    \  paren_level_string = paren_level_string.replace(')', ' ) ')\n    paren_level_string\
    \ = paren_level_string.replace('(', ' ( ')\n    paren_level_string = paren_level_string.replace(')',\
    \ ' ) ')\n    paren_level_string = paren_level_string.replace('(', ' ( ')\n  \
    \  paren_level_string = paren_level_string.replace(')', ' ) ')\n    paren_level_string\
    \ = paren_level_string.replace('(', ' ( ')\n    paren_level_string = paren_level_string.replace(')',\
    \ ' ) ')\n    paren_level_string = paren_level_string.replace('(', ' ( ')\n  \
    \  paren_level_string = paren_level_string.replace(')', ' ) ')\n    paren_level_string\
    \ = paren_level_string.replace('(', ' ( ')\n    paren_level_string = paren_level_string.replace(')',\
    \ ' ) ')\n    paren_level_string = paren_level_string.replace('(', ' ( ')\n  \
    \  paren_level_string = paren_level_string.replace(')', ' ) ')\n    paren_level_string\
    \ = paren_level_string.replace('(', ' ( ')\n    paren_level_string = paren_level_string.replace(')',\
    \ ' ) ')\n    paren_level_string = paren_level_string.replace('(', ' ( ')\n  \
    \  paren_level_string = paren_level_string.replace(')', ' ) ')\n    paren_level_string\
    \ = paren_level_string.replace('(', ' ( ')\n    paren_level_string = paren_level_string.replace(')',\
    \ ' ) ')\n    paren_level_string = paren_level_string.replace('(', ' ( ')\n  \
    \  paren_level_string = paren_level_string.replace(')', ' ) ')\n    paren_level_string\
    \ = paren_level_string.replace('(', ' ( ')\n    paren_level_string = paren\ndef\
    \ check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n\
    \    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyeu97s0v.py\"\
    , line 52, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyeu97s0v.py\"\
    , line 50, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyeu97s0v.py\"\
    , line 45, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyeu97s0v.py\"\
    , line 43, in parse_nested_parens\n    paren_level_string = paren\nNameError:\
    \ name 'paren' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_stack\
    \ = []\n    paren_stack.append(0)\n    paren_level = 0\n    paren_level_list =\
    \ []\n    paren_level_list.append(0)\n    paren_level_list.append(0)\n    paren_level_list.append(0)\n\
    \    paren_level_list.append(0)\n    paren_level_list.append(0)\n    paren_level_list.append(0)\n\
    \    paren_level_list.append(0)\n    paren_level_list.append(0)\n    paren_level_list.append(0)\n\
    \    paren_level_list.append(0)\n    paren_level_list.append(0)\n    paren_level_list.append(0)\n\
    \    paren_level_list.append(0)\n    paren_level_list.append(0)\n    paren_level_list.append(0)\n\
    \    paren_level_list.append(0)\n    paren_level_list.append(0)\n    paren_level_list.append(0)\n\
    \    paren_level_list.append(0)\n    paren_level_list.append(0)\n    paren_level_list.append(0)\n\
    \    paren_level_list.append(0)\n    paren_level_list.append(0)\n    paren_level_list.append(0)\n\
    \    paren_level_list.append(0)\n    paren_level_list.append(0)\n    paren_level_list.append(0)\n\
    \    paren_level_list.append(0)\n    paren_level_list.append(0)\n    paren_level_list.append(0)\n\
    \    paren_level_list.append(0)\n    paren_level_list.append(0)\n    paren_level_list.append(0)\n\
    \    paren_level_list.append(0)\n    paren_level_list.append(0)\n    paren_level_list.append(0)\n\
    \    paren_level_list.append(0)\n    paren_level_list.append(0)\n    paren_level_list.append(0)\n\
    \    paren_level_list.append(0)\n    paren_level_list.append(0)\n    paren_level_list.append(0)\n\
    \    paren_level_list.append(0)\n    paren_level_list.append(0)\n    paren_level_list.append(0)\n\
    \    paren_level_list.append(0)\n    paren_level_list.append(0)\n    paren_level_list.append(0)\n\
    \    paren_level_list.append(0)\n    paren_level_list.append(0)\n    paren_level_list.append(0)\n\
    \    paren_level_list.append(0)\n    paren_level_list.append(0)\n    paren_level_list.append(0)\n\
    \    paren_level_list.append(0)\n    paren_level_list.append(0)\n    paren_level_list.append(0)\n\
    \    paren_level_list.append(0)\n    paren_level_list.append(0)\n    paren_level_list.append(0)\n\
    \    paren_level_list.append(0)\n    paren_level_list.append(0)\n    paren_level_list.append(0)\n\
    \    paren_level_list.append(0)\n    paren_level_list.append(0)\n    paren_level_list.append(0)\n\
    \    paren_level_list.append(0)\n    paren_level_list.append(0)\n    paren_level_list.append(0)\n\
    \    paren_level\ndef check(candidate):\n    assert candidate('(()()) ((())) ()\
    \ ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpoe25pqfc.py\"\
    , line 91, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpoe25pqfc.py\"\
    , line 89, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpoe25pqfc.py\"\
    , line 84, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_stack\
    \ = []\n    paren_stack.append(0)\n    paren_level = 0\n    paren_levels = []\n\
    \    paren_levels.append(0)\n    paren_levels.append(0)\n    paren_levels.append(0)\n\
    \    paren_levels.append(0)\n    paren_levels.append(0)\n    paren_levels.append(0)\n\
    \    paren_levels.append(0)\n    paren_levels.append(0)\n    paren_levels.append(0)\n\
    \    paren_levels.append(0)\n    paren_levels.append(0)\n    paren_levels.append(0)\n\
    \    paren_levels.append(0)\n    paren_levels.append(0)\n    paren_levels.append(0)\n\
    \    paren_levels.append(0)\n    paren_levels.append(0)\n    paren_levels.append(0)\n\
    \    paren_levels.append(0)\n    paren_levels.append(0)\n    paren_levels.append(0)\n\
    \    paren_levels.append(0)\n    paren_levels.append(0)\n    paren_levels.append(0)\n\
    \    paren_levels.append(0)\n    paren_levels.append(0)\n    paren_levels.append(0)\n\
    \    paren_levels.append(0)\n    paren_levels.append(0)\n    paren_levels.append(0)\n\
    \    paren_levels.append(0)\n    paren_levels.append(0)\n    paren_levels.append(0)\n\
    \    paren_levels.append(0)\n    paren_levels.append(0)\n    paren_levels.append(0)\n\
    \    paren_levels.append(0)\n    paren_levels.append(0)\n    paren_levels.append(0)\n\
    \    paren_levels.append(0)\n    paren_levels.append(0)\n    paren_levels.append(0)\n\
    \    paren_levels.append(0)\n    paren_levels.append(0)\n    paren_levels.append(0)\n\
    \    paren_levels.append(0)\n    paren_levels.append(0)\n    paren_levels.append(0)\n\
    \    paren_levels.append(0)\n    paren_levels.append(0)\n    paren_levels.append(0)\n\
    \    paren_levels.append(0)\n    paren_levels.append(0)\n    paren_levels.append(0)\n\
    \    paren_levels.append(0)\n    paren_levels.append(0)\n    paren_levels.append(0)\n\
    \    paren_levels.append(0)\n    paren_levels.append(0)\n    paren_levels.append(0)\n\
    \    paren_levels.append(0)\n    paren_levels.append(0)\n    paren_levels.append(0)\n\
    \    paren_levels.append(0)\n    paren_levels.append(0)\n    paren_levels.append(0)\n\
    \    paren_levels.append(0)\n    paren_levels.append(0)\n    paren_levels.append(0)\n\
    \    paren_level\ndef check(candidate):\n    assert candidate('(()()) ((())) ()\
    \ ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyq2kbh0e.py\"\
    , line 91, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyq2kbh0e.py\"\
    , line 89, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyq2kbh0e.py\"\
    , line 84, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    level =\
    \ 0\n    paren_stack = []\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0jh08cbg.py\"\
    , line 82\n    paren_stack.append(\n                      ^\nSyntaxError: '('\
    \ was never closed\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_stack\
    \ = []\n    paren_level = 0\n    paren_nesting = 0\n    paren_levels = []\n  \
    \  paren_nestings = []\n    paren_levels.append(paren_level)\n    paren_nestings.append(paren_nesting)\n\
    \    paren_level = 1\n    paren_nesting = 1\n    paren_levels.append(paren_level)\n\
    \    paren_nestings.append(paren_nesting)\n    paren_level = 2\n    paren_nesting\
    \ = 2\n    paren_levels.append(paren_level)\n    paren_nestings.append(paren_nesting)\n\
    \    paren_level = 3\n    paren_nesting = 3\n    paren_levels.append(paren_level)\n\
    \    paren_nestings.append(paren_nesting)\n    paren_level = 4\n    paren_nesting\
    \ = 4\n    paren_levels.append(paren_level)\n    paren_nestings.append(paren_nesting)\n\
    \    paren_level = 5\n    paren_nesting = 5\n    paren_levels.append(paren_level)\n\
    \    paren_nestings.append(paren_nesting)\n    paren_level = 6\n    paren_nesting\
    \ = 6\n    paren_levels.append(paren_level)\n    paren_nestings.append(paren_nesting)\n\
    \    paren_level = 7\n    paren_nesting = 7\n    paren_levels.append(paren_level)\n\
    \    paren_nestings.append(paren_nesting)\n    paren_level = 8\n    paren_nesting\
    \ = 8\n    paren_levels.append(paren_level)\n    paren_nestings.append(paren_nesting)\n\
    \    paren_level = 9\n    paren_nesting = 9\n    paren_levels.append(paren_level)\n\
    \    paren_nestings.append(paren_nesting)\n    paren_level = 10\n    paren_nesting\
    \ = 10\n    paren_levels.append(paren_level)\n    paren_nestings.append(paren_nesting)\n\
    \    paren_level = 11\n    paren_nesting = 11\n    paren_levels.append(paren_level)\n\
    \    paren_nestings.append(paren_nesting)\n    paren_level = 12\n    paren_nesting\
    \ = 12\n    paren_levels.append(paren_level)\n    paren_nestings.append(paren_nesting)\n\
    \    paren_level = 13\n    paren_nesting = 13\n    paren_levels.append(paren_level)\n\
    \    paren_nestings.append(paren_nesting)\n    paren_level = 14\n    paren_nesting\
    \ = 14\n    paren_levels.append(paren_level)\n    paren_nestings.append(paren_nest\n\
    def check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') ==\
    \ [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n\
    \    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpidn5luvf.py\"\
    , line 71\n    paren_nestings.append(paren_nest\n                         ^\n\
    SyntaxError: '(' was never closed\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_level\
    \ = 0\n    paren_stack = []\n    paren_stack.append(paren_string)\n    paren_level_string\
    \ = paren_string\n    while paren_stack:\n        paren_string = paren_stack.pop()\n\
    \        if paren_string in ('(', ')'):\n            paren_level += 1\n      \
    \      paren_stack.append(paren_string)\n        elif paren_string == '':\n  \
    \          paren_level -= 1\n            paren_stack.pop()\n        else:\n  \
    \          paren_level_string = paren_string\n    return paren_level_string\n\n\
    def check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') ==\
    \ [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n\
    \    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpymxep1ge.py\"\
    , line 33, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpymxep1ge.py\"\
    , line 31, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpymxep1ge.py\"\
    , line 26, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    stack =\
    \ []\n    level = 0\n    paren_level = 0\n    paren_levels = []\n    for c in\
    \ paren_string:\n        if c == '(':\n            paren_level += 1\n        \
    \    paren_levels.append(paren_level)\n            stack.append(c)\n        elif\
    \ c == ')':\n            paren_level -= 1\n            paren_levels.append(paren_level)\n\
    \            stack.pop()\n        elif c == '[':\n            level += 1\n   \
    \         paren_levels.append(level)\n            stack.append(c)\n        elif\
    \ c == ']':\n            level -= 1\n            paren_levels.append(level)\n\
    \            stack.pop()\n        elif c == '{':\n            level += 1\n   \
    \         paren_levels.append(level)\n            stack.append(c)\n        elif\
    \ c == '}':\n            level -= 1\n            paren_levels.append(level)\n\
    \            stack.pop()\n        elif c == '.':\n            stack.append(c)\n\
    \        elif c == ',':\n            stack.pop()\n    \n    return paren_levels\n\
    \ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') ==\
    \ [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n\
    \    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpto112kkn.py\"\
    , line 53, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpto112kkn.py\"\
    , line 51, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpto112kkn.py\"\
    , line 46, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_stack\
    \ = []\n    paren_level = 0\n    paren_nesting = 0\n    paren_levels = []\n  \
    \  paren_nestings = []\n    paren_levels.append(paren_level)\n    paren_nestings.append(paren_nesting)\n\
    \    for char in paren_string:\n        if char == '(':\n            paren_stack.append(char)\n\
    \            paren_level += 1\n            paren_nesting += 1\n            paren_levels.append(paren_level)\n\
    \            paren_nestings.append(paren_nesting)\n        elif char == ')':\n\
    \            paren_nesting -= 1\n            paren_level -= 1\n            paren_levels.append(paren_level)\n\
    \            paren_nestings.append(paren_nesting)\n        elif char == ' ':\n\
    \            paren_level -= 1\n            paren_levels.append(paren_level)\n\
    \            paren_nestings.append(paren_nesting)\n        elif char == '\\n':\n\
    \            paren_level = 0\n            paren_nesting = 0\n            paren_levels.append(paren_level)\n\
    \            paren_nestings.append(paren_nesting)\n        elif char == '\\t':\n\
    \            paren_level = 0\n            paren_nesting = 0\n            paren_levels.append(paren_level)\n\
    \            paren_nestings.append(paren_nesting)\n        elif char == '\\r':\n\
    \            paren_level = 0\n            paren_nesting = 0\n            paren_levels.append(paren_level)\n\
    \            paren_nestings.append(paren_nesting)\n        else:\n           \
    \ paren_level = 0\n            paren_nesting = 0\n            paren_levels.append(paren_level)\n\
    \            paren_nestings.append(paren_nesting)\n    return paren_levels\n\n\
    def check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') ==\
    \ [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n\
    \    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwcj1tt1f.py\"\
    , line 62, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwcj1tt1f.py\"\
    , line 60, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwcj1tt1f.py\"\
    , line 55, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_stack\
    \ = []\n    level = 0\n    paren_level = 0\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    def check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') ==\
    \ [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n\
    \    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpot43_55x.py\"\
    , line 91, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpot43_55x.py\"\
    , line 89, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpot43_55x.py\"\
    , line 84, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_stack\
    \ = []\n    paren_level = 0\n    paren_level_stack = []\n    paren_level_stack.append(paren_level)\n\
    \    paren_level_stack.append(paren_level)\n    paren_level_stack.append(paren_level)\n\
    \    paren_level_stack.append(paren_level)\n    paren_level_stack.append(paren_level)\n\
    \    paren_level_stack.append(paren_level)\n    paren_level_stack.append(paren_level)\n\
    \    paren_level_stack.append(paren_level)\n    paren_level_stack.append(paren_level)\n\
    \    paren_level_stack.append(paren_level)\n    paren_level_stack.append(paren_level)\n\
    \    paren_level_stack.append(paren_level)\n    paren_level_stack.append(paren_level)\n\
    \    paren_level_stack.append(paren_level)\n    paren_level_stack.append(paren_level)\n\
    \    paren_level_stack.append(paren_level)\n    paren_level_stack.append(paren_level)\n\
    \    paren_level_stack.append(paren_level)\n    paren_level_stack.append(paren_level)\n\
    \    paren_level_stack.append(paren_level)\n    paren_level_stack.append(paren_level)\n\
    \    paren_level_stack.append(paren_level)\n    paren_level_stack.append(paren_level)\n\
    \    paren_level_stack.append(paren_level)\n    paren_level_stack.append(paren_level)\n\
    \    paren_level_stack.append(paren_level)\n    paren_level_stack.append(paren_level)\n\
    \    paren_level_stack.append(paren_level)\n    paren_level_stack.append(paren_level)\n\
    \    paren_level_stack.append(paren_level)\n    paren_level_stack.append(paren_level)\n\
    \    paren_level_stack.append(paren_level)\n    paren_level_stack.append(paren_level)\n\
    \    paren_level_stack.append(paren_level)\n    paren_level_stack.append(paren_level)\n\
    \    paren_level_stack.append(paren_level)\n    paren_level_stack.append(paren_level)\n\
    \    paren_level_stack.append(paren_level)\n    paren_level_stack.append(paren_level)\n\
    \    paren_level_stack.append(paren_level)\n    paren_level_stack.append(paren_level)\n\
    \    paren_level_stack.append(paren_level)\n    paren_level_stack.append(paren_level)\n\
    \    paren_level_stack.append(paren_level)\n    paren_level_stack.append(paren_level)\n\
    \    paren_level_stack.append(paren_level)\n    paren_level_stack.append(paren_level)\n\
    \    paren_level_stack.append(paren_level)\n    paren_level_stack.append(paren_level)\n\
    \    paren_\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())')\
    \ == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3,\
    \ 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n   \
    \ check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxj49givk.py\"\
    , line 70, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxj49givk.py\"\
    , line 68, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxj49givk.py\"\
    , line 63, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxj49givk.py\"\
    , line 61, in parse_nested_parens\n    paren_\nNameError: name 'paren_' is not\
    \ defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_stack\
    \ = []\n    level = 0\n    paren_level = 0\n    paren_level_stack = []\n    paren_level_stack.append(level)\n\
    \    paren_level_stack.append(level)\n    paren_level_stack.append(level)\n  \
    \  paren_level_stack.append(level)\n    paren_level_stack.append(level)\n    paren_level_stack.append(level)\n\
    \    paren_level_stack.append(level)\n    paren_level_stack.append(level)\n  \
    \  paren_level_stack.append(level)\n    paren_level_stack.append(level)\n    paren_level_stack.append(level)\n\
    \    paren_level_stack.append(level)\n    paren_level_stack.append(level)\n  \
    \  paren_level_stack.append(level)\n    paren_level_stack.append(level)\n    paren_level_stack.append(level)\n\
    \    paren_level_stack.append(level)\n    paren_level_stack.append(level)\n  \
    \  paren_level_stack.append(level)\n    paren_level_stack.append(level)\n    paren_level_stack.append(level)\n\
    \    paren_level_stack.append(level)\n    paren_level_stack.append(level)\n  \
    \  paren_level_stack.append(level)\n    paren_level_stack.append(level)\n    paren_level_stack.append(level)\n\
    \    paren_level_stack.append(level)\n    paren_level_stack.append(level)\n  \
    \  paren_level_stack.append(level)\n    paren_level_stack.append(level)\n    paren_level_stack.append(level)\n\
    \    paren_level_stack.append(level)\n    paren_level_stack.append(level)\n  \
    \  paren_level_stack.append(level)\n    paren_level_stack.append(level)\n    paren_level_stack.append(level)\n\
    \    paren_level_stack.append(level)\n    paren_level_stack.append(level)\n  \
    \  paren_level_stack.append(level)\n    paren_level_stack.append(level)\n    paren_level_stack.append(level)\n\
    \    paren_level_stack.append(level)\n    paren_level_stack.append(level)\n  \
    \  paren_level_stack.append(level)\n    paren_level_stack.append(level)\n    paren_level_stack.append(level)\n\
    \    paren_level_stack.append(level)\n    paren_level_stack.append(level)\n  \
    \  paren_level_stack.append(level)\n    paren_level_stack.append(level)\n    paren_level_stack.append(level)\n\
    \    paren_level_stack.append(level)\n    paren_level_stack.append(level)\n  \
    \  paren_level_stack.append(level)\n    paren_level_stack.append(level)\n    paren_level_stack.append(level)\n\
    \    paren_level_stack.append(level)\n    paren_level_stack.append(level)\n  \
    \  paren_level_stack.append(level)\n    paren_level_stack.append(level)\n    paren_level_stack.append(level)\n\
    \    \ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())')\
    \ == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3,\
    \ 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n   \
    \ check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8ulzzgik.py\"\
    , line 83, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8ulzzgik.py\"\
    , line 81, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8ulzzgik.py\"\
    , line 76, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_stack\
    \ = []\n    level = 0\n    paren_level = 0\n    paren_levels = []\n    for char\
    \ in paren_string:\n        if char == '(':\n            paren_stack.append(level)\n\
    \            paren_level += 1\n            level += 1\n        elif char == ')':\n\
    \            paren_stack.pop()\n            level -= 1\n            paren_levels.append(paren_level)\n\
    \            paren_level -= 1\n        elif char == ' ':\n            level -=\
    \ 1\n    \n    return paren_levels\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5ybhwxki.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5ybhwxki.py\"\
    , line 34, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5ybhwxki.py\"\
    , line 29, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_stack\
    \ = []\n    level = 0\n    paren_level = 0\n    paren_level_stack = []\n    paren_level_stack.append(0)\n\
    \    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n\
    \    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n\
    \    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n\
    \    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n\
    \    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n\
    \    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n\
    \    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n\
    \    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n\
    \    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n\
    \    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n\
    \    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n\
    \    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n\
    \    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n\
    \    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n\
    \    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n\
    \    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n\
    \    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n\
    \    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n\
    \    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n\
    \    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n\
    \    \ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())')\
    \ == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3,\
    \ 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n   \
    \ check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9zii1mk3.py\"\
    , line 83, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9zii1mk3.py\"\
    , line 81, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9zii1mk3.py\"\
    , line 76, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_stack\
    \ = []\n    paren_level = 0\n    paren_levels = []\n    for char in paren_string:\n\
    \        if char == '(':\n            paren_stack.append(paren_level)\n      \
    \      paren_level += 1\n        elif char == ')':\n            paren_level -=\
    \ 1\n            paren_levels.append(paren_level)\n        elif char == ' ':\n\
    \            if paren_stack:\n                paren_levels.append(paren_stack[-1])\n\
    \    return paren_levels\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp0fcsj0k.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp0fcsj0k.py\"\
    , line 30, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp0fcsj0k.py\"\
    , line 25, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_stack\
    \ = []\n    paren_level = 0\n    paren_levels = []\n    paren_levels_count = 0\n\
    \    paren_levels_sum = 0\n    for c in paren_string:\n        if c == '(':\n\
    \            paren_stack.append(paren_level)\n            paren_level += 1\n \
    \           paren_levels_count += 1\n            paren_levels_sum += paren_level\n\
    \        elif c == ')':\n            paren_level -= 1\n            paren_levels_count\
    \ -= 1\n            paren_levels_sum += paren_level\n            if paren_levels_count\
    \ == 0:\n                paren_levels.append(paren_levels_sum)\n             \
    \   paren_levels_count = 0\n                paren_levels_sum = 0\n        else:\n\
    \            paren_levels_count = 0\n            paren_levels_sum = 0\n    return\
    \ paren_levels\n\ndef check(candidate):\n    assert candidate('(()()) ((())) ()\
    \ ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptho8a_5a.py\"\
    , line 41, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptho8a_5a.py\"\
    , line 39, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptho8a_5a.py\"\
    , line 34, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_level\
    \ = 0\n    paren_levels = []\n    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9oqo2i8v.py\"\
    , line 66\n    paren_levels.append(\n                       ^\nSyntaxError: '('\
    \ was never closed\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_stack\
    \ = []\n    paren_level = 0\n    paren_level_stack = []\n    paren_level_stack.append(paren_level)\n\
    \    for paren in paren_string.split():\n        if paren == '(':\n          \
    \  paren_stack.append(paren_level)\n            paren_level += 1\n        elif\
    \ paren == ')':\n            paren_level -= 1\n            paren_level_stack.pop()\n\
    \            paren_level_stack.append(paren_level)\n        elif paren == ',':\n\
    \            paren_level_stack.pop()\n            paren_level_stack.append(paren_level)\n\
    \        else:\n            raise ValueError('Parentheses cannot be nested')\n\
    \    return paren_stack\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt_dzg9vy.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt_dzg9vy.py\"\
    , line 34, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt_dzg9vy.py\"\
    , line 29, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt_dzg9vy.py\"\
    , line 25, in parse_nested_parens\n    raise ValueError('Parentheses cannot be\
    \ nested')\nValueError: Parentheses cannot be nested\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_stack\
    \ = []\n    level = 0\n    paren_level = 0\n    paren_stack.append(paren_string)\n\
    \    paren_level = len(paren_string)\n    paren_stack.append(paren_string)\n \
    \   while paren_stack:\n        paren_string = paren_stack.pop()\n        level\
    \ += 1\n        if paren_level == len(paren_string):\n            paren_level\
    \ = 0\n            paren_stack.append(paren_string)\n            level += 1\n\
    \        paren_level += 1\n    return level\n\ndef check(candidate):\n    assert\
    \ candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('()\
    \ (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo95uzdph.py\"\
    , line 33, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo95uzdph.py\"\
    , line 31, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo95uzdph.py\"\
    , line 26, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_stack\
    \ = []\n    paren_level = 0\n    paren_levels = []\n    paren_levels.append(paren_level)\n\
    \    paren_stack.append(paren_level)\n    paren_levels.append(paren_level)\n\n\
    \    for char in paren_string:\n        if char == '(':\n            paren_level\
    \ += 1\n            paren_levels.append(paren_level)\n            paren_stack.append(paren_level)\n\
    \        elif char == ')':\n            paren_level -= 1\n            paren_levels.append(paren_level)\n\
    \            paren_stack.append(paren_level)\n        elif char == ' ':\n    \
    \        paren_levels[paren_level] = max(paren_levels[paren_level], paren_stack[paren_level])\n\
    \            paren_stack[paren_level] = paren_levels[paren_level]\n        else:\n\
    \            paren_levels[paren_level] = max(paren_levels[paren_level], paren_stack[paren_level])\n\
    \            paren_stack[paren_level] = paren_levels[paren_level]\n\n    return\
    \ paren_levels\n\ndef check(candidate):\n    assert candidate('(()()) ((())) ()\
    \ ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyj1mcpw3.py\"\
    , line 42, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyj1mcpw3.py\"\
    , line 40, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyj1mcpw3.py\"\
    , line 35, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_level\
    \ = 0\n    paren_levels = []\n    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6na2nf2h.py\"\
    , line 66\n    paren_levels.append(\n                       ^\nSyntaxError: '('\
    \ was never closed\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_stack\
    \ = []\n    paren_level = 0\n    paren_levels = []\n    paren_levels_str = \"\"\
    \n    paren_levels_str_len = len(paren_levels_str)\n    paren_levels_str_len =\
    \ 0\n    paren_levels_str_len = 0\n    paren_levels_str_len = 0\n    paren_levels_str_len\
    \ = 0\n    paren_levels_str_len = 0\n    paren_levels_str_len = 0\n    paren_levels_str_len\
    \ = 0\n    paren_levels_str_len = 0\n    paren_levels_str_len = 0\n    paren_levels_str_len\
    \ = 0\n    paren_levels_str_len = 0\n    paren_levels_str_len = 0\n    paren_levels_str_len\
    \ = 0\n    paren_levels_str_len = 0\n    paren_levels_str_len = 0\n    paren_levels_str_len\
    \ = 0\n    paren_levels_str_len = 0\n    paren_levels_str_len = 0\n    paren_levels_str_len\
    \ = 0\n    paren_levels_str_len = 0\n    paren_levels_str_len = 0\n    paren_levels_str_len\
    \ = 0\n    paren_levels_str_len = 0\n    paren_levels_str_len = 0\n    paren_levels_str_len\
    \ = 0\n    paren_levels_str_len = 0\n    paren_levels_str_len = 0\n    paren_levels_str_len\
    \ = 0\n    paren_levels_str_len = 0\n    paren_levels_str_len = 0\n    paren_levels_str_len\
    \ = 0\n    paren_levels_str_len = 0\n    paren_levels_str_len = 0\n    paren_levels_str_len\
    \ = 0\n    paren_levels_str_len = 0\n    paren_levels_str_len = 0\n    paren_levels_str_len\
    \ = 0\n    paren_levels_str_len = 0\n    paren_levels_str_len = 0\n    paren_levels_str_len\
    \ = 0\n    paren_levels_str_len = 0\n    paren_levels_str_len = 0\n    paren_levels_str_len\
    \ = 0\n    paren_levels_str_len = 0\n    paren_levels_str_len = 0\n    paren_levels_str_len\
    \ = 0\n    paren_levels_str_len = 0\n    paren_levels_str_len = 0\n    paren_levels_str_len\
    \ = 0\n    paren_levels_str_len = 0\n    paren_levels_str_len = 0\n    paren_levels_str_len\
    \ = 0\n    paren_levels_\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfd_nj_kf.py\"\
    , line 75, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfd_nj_kf.py\"\
    , line 73, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfd_nj_kf.py\"\
    , line 68, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfd_nj_kf.py\"\
    , line 66, in parse_nested_parens\n    paren_levels_\nNameError: name 'paren_levels_'\
    \ is not defined. Did you mean: 'paren_levels'?\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_stack\
    \ = []\n    level = 0\n    paren_level = 0\n    paren_char = ''\n    paren_chars\
    \ = []\n    paren_chars.append(paren_string[0])\n    paren_chars.append(paren_string[0])\n\
    \    paren_chars.append(paren_string[0])\n    paren_chars.append(paren_string[0])\n\
    \    paren_chars.append(paren_string[0])\n    paren_chars.append(paren_string[0])\n\
    \    paren_chars.append(paren_string[0])\n    paren_chars.append(paren_string[0])\n\
    \    paren_chars.append(paren_string[0])\n    paren_chars.append(paren_string[0])\n\
    \    paren_chars.append(paren_string[0])\n    paren_chars.append(paren_string[0])\n\
    \    paren_chars.append(paren_string[0])\n    paren_chars.append(paren_string[0])\n\
    \    paren_chars.append(paren_string[0])\n    paren_chars.append(paren_string[0])\n\
    \    paren_chars.append(paren_string[0])\n    paren_chars.append(paren_string[0])\n\
    \    paren_chars.append(paren_string[0])\n    paren_chars.append(paren_string[0])\n\
    \    paren_chars.append(paren_string[0])\n    paren_chars.append(paren_string[0])\n\
    \    paren_chars.append(paren_string[0])\n    paren_chars.append(paren_string[0])\n\
    \    paren_chars.append(paren_string[0])\n    paren_chars.append(paren_string[0])\n\
    \    paren_chars.append(paren_string[0])\n    paren_chars.append(paren_string[0])\n\
    \    paren_chars.append(paren_string[0])\n    paren_chars.append(paren_string[0])\n\
    \    paren_chars.append(paren_string[0])\n    paren_chars.append(paren_string[0])\n\
    \    paren_chars.append(paren_string[0])\n    paren_chars.append(paren_string[0])\n\
    \    paren_chars.append(paren_string[0])\n    paren_chars.append(paren_string[0])\n\
    \    paren_chars.append(paren_string[0])\n    paren_chars.append(paren_string[0])\n\
    \    paren_chars.append(paren_string[0])\n    paren_chars.append(paren_string[0])\n\
    \    paren_chars.append(paren_string[0])\n    paren_chars.append(paren_string[0])\n\
    \    paren_chars.append(paren_string[0])\n    paren_chars.append(paren_string[0])\n\
    \    paren_chars.append(paren_string[0])\n    paren_chars.append(paren_string[0])\n\
    \    paren_chars.append(paren_string[0])\n    paren_chars.append(paren_string[0])\n\
    \    paren_chars.append(paren_string[0])\n    paren_chars.append(paren_string[0])\n\
    \    paren_chars.append(paren_string[0])\n    paren_chars.append(paren_string[0])\n\
    \    paren_chars.append(paren_string[0])\n    paren_chars.append(paren_string\n\
    def check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') ==\
    \ [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n\
    \    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp81fvx_uq.py\"\
    , line 67\n    paren_chars.append(paren_string\n                      ^\nSyntaxError:\
    \ '(' was never closed\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_level\
    \ = 0\n    paren_stack = []\n    paren_stack.append(paren_string)\n    paren_stack_string\
    \ = ''\n    while paren_stack:\n        paren_stack_string = paren_stack_string.strip()\n\
    \        paren_level = paren_level + 1\n        paren_stack_string = paren_stack_string.strip()\n\
    \        paren_stack_string = paren_stack_string.strip()\n        paren_stack_string\
    \ = paren_stack_string.strip()\n        paren_stack_string = paren_stack_string.strip()\n\
    \        paren_stack_string = paren_stack_string.strip()\n        paren_stack_string\
    \ = paren_stack_string.strip()\n        paren_stack_string = paren_stack_string.strip()\n\
    \        paren_stack_string = paren_stack_string.strip()\n        paren_stack_string\
    \ = paren_stack_string.strip()\n        paren_stack_string = paren_stack_string.strip()\n\
    \        paren_stack_string = paren_stack_string.strip()\n        paren_stack_string\
    \ = paren_stack_string.strip()\n        paren_stack_string = paren_stack_string.strip()\n\
    \        paren_stack_string = paren_stack_string.strip()\n        paren_stack_string\
    \ = paren_stack_string.strip()\n        paren_stack_string = paren_stack_string.strip()\n\
    \        paren_stack_string = paren_stack_string.strip()\n        paren_stack_string\
    \ = paren_stack_string.strip()\n        paren_stack_string = paren_stack_string.strip()\n\
    \        paren_stack_string = paren_stack_string.strip()\n        paren_stack_string\
    \ = paren_stack_string.strip()\n        paren_stack_string = paren_stack_string.strip()\n\
    \        paren_stack_string = paren_stack_string.strip()\n        paren_stack_string\
    \ = paren_stack_string.strip()\n        paren_stack_string = paren_stack_string.strip()\n\
    \        paren_stack_string = paren_stack_string.strip()\n        paren_stack_string\
    \ = paren_stack_string.strip()\n        paren_stack_string = paren_stack_string.strip()\n\
    \        paren_stack_string = paren_stack_string.strip()\n        paren_stack_string\
    \ = paren_stack_string.strip()\n        paren_stack_string = paren_stack_string.strip()\n\
    \        paren_stack_string = paren_stack_string.strip()\n        paren_stack_string\
    \ = paren_stack_string.strip()\n        paren_stack_string = paren_stack_string.strip()\n\
    \        paren_stack_string = paren_stack_string.strip()\n        \ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_stack\
    \ = []\n    paren_level = 0\n    paren_level_stack = []\n    paren_level_stack.append(paren_level)\n\
    \    paren_level_stack.append(paren_level)\n    paren_level_stack.append(paren_level)\n\
    \    paren_level_stack.append(paren_level)\n    paren_level_stack.append(paren_level)\n\
    \    paren_level_stack.append(paren_level)\n    paren_level_stack.append(paren_level)\n\
    \    paren_level_stack.append(paren_level)\n    paren_level_stack.append(paren_level)\n\
    \    paren_level_stack.append(paren_level)\n    paren_level_stack.append(paren_level)\n\
    \    paren_level_stack.append(paren_level)\n    paren_level_stack.append(paren_level)\n\
    \    paren_level_stack.append(paren_level)\n    paren_level_stack.append(paren_level)\n\
    \    paren_level_stack.append(paren_level)\n    paren_level_stack.append(paren_level)\n\
    \    paren_level_stack.append(paren_level)\n    paren_level_stack.append(paren_level)\n\
    \    paren_level_stack.append(paren_level)\n    paren_level_stack.append(paren_level)\n\
    \    paren_level_stack.append(paren_level)\n    paren_level_stack.append(paren_level)\n\
    \    paren_level_stack.append(paren_level)\n    paren_level_stack.append(paren_level)\n\
    \    paren_level_stack.append(paren_level)\n    paren_level_stack.append(paren_level)\n\
    \    paren_level_stack.append(paren_level)\n    paren_level_stack.append(paren_level)\n\
    \    paren_level_stack.append(paren_level)\n    paren_level_stack.append(paren_level)\n\
    \    paren_level_stack.append(paren_level)\n    paren_level_stack.append(paren_level)\n\
    \    paren_level_stack.append(paren_level)\n    paren_level_stack.append(paren_level)\n\
    \    paren_level_stack.append(paren_level)\n    paren_level_stack.append(paren_level)\n\
    \    paren_level_stack.append(paren_level)\n    paren_level_stack.append(paren_level)\n\
    \    paren_level_stack.append(paren_level)\n    paren_level_stack.append(paren_level)\n\
    \    paren_level_stack.append(paren_level)\n    paren_level_stack.append(paren_level)\n\
    \    paren_level_stack.append(paren_level)\n    paren_level_stack.append(paren_level)\n\
    \    paren_level_stack.append(paren_level)\n    paren_level_stack.append(paren_level)\n\
    \    paren_level_stack.append(paren_level)\n    paren_level_stack.append(paren_level)\n\
    \    paren_\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())')\
    \ == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3,\
    \ 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n   \
    \ check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplaw1wj83.py\"\
    , line 70, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplaw1wj83.py\"\
    , line 68, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplaw1wj83.py\"\
    , line 63, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplaw1wj83.py\"\
    , line 61, in parse_nested_parens\n    paren_\nNameError: name 'paren_' is not\
    \ defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_stack\
    \ = []\n    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())')\
    \ == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3,\
    \ 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n   \
    \ check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp79yq2rtj.py\"\
    , line 91, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp79yq2rtj.py\"\
    , line 89, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp79yq2rtj.py\"\
    , line 84, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp79yq2rtj.py\"\
    , line 82, in parse_nested_parens\n    paren\nNameError: name 'paren' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_stack\
    \ = []\n    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())')\
    \ == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3,\
    \ 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n   \
    \ check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5w8qu8dy.py\"\
    , line 91, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5w8qu8dy.py\"\
    , line 89, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5w8qu8dy.py\"\
    , line 84, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5w8qu8dy.py\"\
    , line 82, in parse_nested_parens\n    paren\nNameError: name 'paren' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    stack =\
    \ []\n    level = 0\n    \n    for char in paren_string:\n        if char == '(':\n\
    \            stack.append(level)\n        elif char == ')':\n            level\
    \ = stack.pop()\n        else:\n            level += 1\n    \n    return stack\n\
    \ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') ==\
    \ [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n\
    \    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0cfhwsfh.py\"\
    , line 30, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0cfhwsfh.py\"\
    , line 28, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0cfhwsfh.py\"\
    , line 23, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_stack\
    \ = []\n    paren_level = 0\n    paren_levels = []\n    paren_levels_string =\
    \ \"\"\n    for char in paren_string:\n        if char == \"(\":\n           \
    \ paren_stack.append(paren_level)\n            paren_level += 1\n            paren_levels.append(paren_level)\n\
    \            paren_levels_string += char\n        elif char == \")\":\n      \
    \      paren_level -= 1\n            paren_levels.append(paren_level)\n      \
    \      paren_levels_string += char\n        elif char == \" \":\n            paren_levels_string\
    \ += char\n        else:\n            paren_levels_string += char\n    \n    return\
    \ paren_levels\n\ndef check(candidate):\n    assert candidate('(()()) ((())) ()\
    \ ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz5f68d8c.py\"\
    , line 38, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz5f68d8c.py\"\
    , line 36, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz5f68d8c.py\"\
    , line 31, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    stack =\
    \ []\n    level = 0\n    paren_level = 0\n    paren_levels = []\n    paren_levels_string\
    \ = \"\"\n    for char in paren_string:\n        if char == \"(\":\n         \
    \   paren_level += 1\n            paren_levels.append(paren_level)\n         \
    \   paren_levels_string += char\n        elif char == \")\":\n            paren_level\
    \ -= 1\n            paren_levels.append(paren_level)\n            paren_levels_string\
    \ += char\n        elif char == \" \":\n            paren_levels_string += char\n\
    \        else:\n            paren_levels_string += char\n            paren_level\
    \ = 0\n    paren_levels_string = paren_levels_string[:-1]\n    paren_levels.append(paren_level)\n\
    \    paren_levels_string = paren_levels_string[:-1]\n    paren_levels_string =\
    \ paren_levels_string[:-1]\n    paren_levels_string = paren_levels_string[:-1]\n\
    \    paren_levels_string = paren_levels_string[:-1]\n    paren_levels_string =\
    \ paren_levels_string[:-1]\n    paren_levels_string = paren_levels_string[:-1]\n\
    \    paren_levels_string = paren_levels_string[:-1]\n    paren_levels_string =\
    \ paren_levels_string[:-1]\n    paren_levels_string = paren_levels_string[:-1]\n\
    \    paren_levels_string = paren_levels_string[:-1]\n    paren_levels_string =\
    \ paren_levels_string[:-1]\n    paren_levels_string = paren_levels_string[:-1]\n\
    \    paren_levels_string = paren_levels_string[:-1]\n    paren_levels_string =\
    \ paren_levels_string[:-1]\n    paren_levels_string = paren_levels_string[:-1]\n\
    \    paren_levels_string = paren_levels_string[:-1]\n    paren_levels_string =\
    \ paren_levels_string[:-1]\n    paren_levels_string = paren_levels_string[:-1]\n\
    \    paren_levels_string = paren_levels_string[:-1]\n    paren_levels_string =\
    \ paren_levels_string[:-1]\n    paren_levels_string = paren_levels_string[:-1]\n\
    \    paren_levels_string = paren_levels_string[:-1]\n    paren_levels_string =\
    \ paren_levels_string[:-1]\n    paren_levels_string = paren_levels_string[:-1]\n\
    \    paren_levels_string = paren_levels_string[:-1]\n    paren_levels_string =\
    \ paren_levels_string[:-1]\n    paren_levels_string = paren_levels_string[:-1]\n\
    \    paren_levels_string = paren_levels_string[:-1]\n    \ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsh7vckr3.py\"\
    , line 67, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsh7vckr3.py\"\
    , line 65, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsh7vckr3.py\"\
    , line 60, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_stack\
    \ = []\n    paren_level = 0\n    paren_levels = []\n    for c in paren_string:\n\
    \        if c == '(':\n            paren_stack.append(paren_level)\n         \
    \   paren_level += 1\n        elif c == ')':\n            paren_level -= 1\n \
    \           paren_levels.append(paren_level)\n        elif c == ' ':\n       \
    \     paren_levels.append(paren_level)\n    return paren_levels\n\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf08_xmbz.py\"\
    , line 31, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf08_xmbz.py\"\
    , line 29, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf08_xmbz.py\"\
    , line 24, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_stack\
    \ = []\n    paren_level = 0\n    paren_char = ''\n    paren_chars = []\n    for\
    \ char in paren_string:\n        if char == '(':\n            paren_stack.append(paren_level)\n\
    \            paren_level += 1\n            paren_chars.append(char)\n        elif\
    \ char == ')':\n            paren_level -= 1\n            paren_chars.append(char)\n\
    \        elif char == ' ':\n            if len(paren_chars) > 0:\n           \
    \     paren_chars.pop()\n        else:\n            paren_chars.append(char)\n\
    \    return paren_stack\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcbh_02fg.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcbh_02fg.py\"\
    , line 34, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcbh_02fg.py\"\
    , line 29, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_stack\
    \ = []\n    level = 0\n    paren_level = 0\n    paren_char = ''\n    paren_chars\
    \ = []\n    for char in paren_string:\n        if char == '(':\n            paren_stack.append(char)\n\
    \            paren_level += 1\n            paren_chars.append(char)\n        elif\
    \ char == ')':\n            paren_stack.pop()\n            paren_level -= 1\n\
    \            paren_chars.append(char)\n        elif char == ' ':\n           \
    \ if paren_level == 0:\n                paren_chars.append(char)\n           \
    \ else:\n                paren_chars.append(char)\n                paren_chars.append('\
    \ ')\n        else:\n            paren_chars.append(char)\n    \n    paren_chars\
    \ = ''.join(paren_chars)\n    \n    paren_levels = []\n    for paren_char in paren_chars:\n\
    \        if paren_char == '(':\n            paren_levels.append(paren_level)\n\
    \        elif paren_char == ')':\n            paren_levels.append(paren_levels.pop())\n\
    \        else:\n            paren_levels.append(paren_level)\n    \n    return\
    \ paren_levels\n\ndef check(candidate):\n    assert candidate('(()()) ((())) ()\
    \ ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxg1s3409.py\"\
    , line 53, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxg1s3409.py\"\
    , line 51, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxg1s3409.py\"\
    , line 46, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    stack =\
    \ []\n    level = 0\n    for c in paren_string:\n        if c == '(':\n      \
    \      stack.append(level)\n            level += 1\n        elif c == ')':\n \
    \           level -= 1\n            if level == 0:\n                stack.pop()\n\
    \            else:\n                stack.append(level)\n    return stack\n\n\
    def check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') ==\
    \ [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n\
    \    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp89n57bws.py\"\
    , line 31, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp89n57bws.py\"\
    , line 29, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp89n57bws.py\"\
    , line 24, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_level\
    \ = 0\n    paren_stack = []\n    paren_stack.append(paren_string)\n    paren_level_string\
    \ = \"\"\n    while len(paren_stack) > 0:\n        paren_level_string += paren_stack.pop(0)\n\
    \        if paren_level_string == \"(\":\n            paren_level += 1\n     \
    \   if paren_level_string == \")\":\n            paren_level -= 1\n        paren_level_string\
    \ += \" \"\n    return paren_level\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0yvgn8d5.py\"\
    , line 31, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0yvgn8d5.py\"\
    , line 29, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0yvgn8d5.py\"\
    , line 24, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    stack =\
    \ []\n    level = 0\n    paren_level = 0\n    paren_level_stack = []\n    for\
    \ c in paren_string:\n        if c == '(':\n            paren_level_stack.append(level)\n\
    \            level += 1\n        elif c == ')':\n            level = paren_level_stack.pop()\n\
    \        elif c == '[':\n            level += 1\n        elif c == ']':\n    \
    \        level -= 1\n        elif c == '{':\n            level += 1\n        elif\
    \ c == '}':\n            level -= 1\n        elif c == '.':\n            level\
    \ += 1\n        elif c == ',':\n            level -= 1\n        elif c == '+':\n\
    \            level += 1\n        elif c == '-':\n            level -= 1\n    \
    \    elif c == '*':\n            level += 1\n        elif c == '/':\n        \
    \    level -= 1\n        elif c == '%':\n            level += 1\n        elif\
    \ c == '^':\n            level -= 1\n        elif c == '!':\n            level\
    \ += 1\n        elif c == '=':\n            level -= 1\n        elif c == '<':\n\
    \            level += 1\n        elif c == '>':\n            level -= 1\n    \
    \    elif c == '!=':\n            level += 1\n        elif c == '<=':\n      \
    \      level -= 1\n        elif c == '>=':\n            level += 1\n        elif\
    \ c == '==':\n            level -= 1\n        elif c == '!=':\n            level\
    \ += 1\n        elif c == '<=':\n            level -= 1\n        elif c == '>=':\n\
    \            level += 1\n        elif c == '<':\n            level += 1\n    \
    \    elif c == '>':\n            level -= 1\n        elif c == '%':\n        \
    \    level += 1\n        elif c == '*':\n            level += 1\n        elif\
    \ c == '/':\n            level -= 1\n        elif c == '+':\n            level\
    \ += 1\n        elif c == '-':\n            level -= 1\n        elif c == '^':\n\
    \            level += 1\n        elif c == '=':\n            level -= 1\n    \
    \    elif c == '!':\n            level += 1\n        elif c == '.':\n        \
    \    level += 1\n        elif c == ',':\n            level -= 1\n        elif\
    \ c == '[':\n            level += 1\n        elif c == ']':\n            level\
    \ -= 1\n        elif c == '{':\n            level += 1\n        elif c == '}':\n\
    \            level -= 1\n        elif c == '(':\n            paren_level_stack.append(level)\n\
    \            level += 1\n        elif c == ')':\n            level = paren_level_stack.pop()\n\
    \        elif c == '[':\n            level += 1\n        elif c == ']':\n    \
    \        level -= 1\n        elif c == '{':\n            level += 1\n        elif\
    \ c == '}\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())')\
    \ == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3,\
    \ 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n   \
    \ check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn8krnz3f.py\"\
    , line 108\n    elif c == '}\n              ^\nSyntaxError: unterminated string\
    \ literal (detected at line 108)\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_stack\
    \ = []\n    paren_level = 0\n    paren_nesting = 0\n    paren_levels = []\n  \
    \  paren_nestings = []\n    paren_levels.append(paren_level)\n    paren_nestings.append(paren_nesting)\n\
    \    paren_level = 1\n    paren_nesting = 1\n    paren_levels.append(paren_level)\n\
    \    paren_nestings.append(paren_nesting)\n    paren_level = 2\n    paren_nesting\
    \ = 2\n    paren_levels.append(paren_level)\n    paren_nestings.append(paren_nesting)\n\
    \    paren_level = 3\n    paren_nesting = 3\n    paren_levels.append(paren_level)\n\
    \    paren_nestings.append(paren_nesting)\n    paren_level = 4\n    paren_nesting\
    \ = 4\n    paren_levels.append(paren_level)\n    paren_nestings.append(paren_nesting)\n\
    \    paren_level = 5\n    paren_nesting = 5\n    paren_levels.append(paren_level)\n\
    \    paren_nestings.append(paren_nesting)\n    paren_level = 6\n    paren_nesting\
    \ = 6\n    paren_levels.append(paren_level)\n    paren_nestings.append(paren_nesting)\n\
    \    paren_level = 7\n    paren_nesting = 7\n    paren_levels.append(paren_level)\n\
    \    paren_nestings.append(paren_nesting)\n    paren_level = 8\n    paren_nesting\
    \ = 8\n    paren_levels.append(paren_level)\n    paren_nestings.append(paren_nesting)\n\
    \    paren_level = 9\n    paren_nesting = 9\n    paren_levels.append(paren_level)\n\
    \    paren_nestings.append(paren_nesting)\n    paren_level = 10\n    paren_nesting\
    \ = 10\n    paren_levels.append(paren_level)\n    paren_nestings.append(paren_nesting)\n\
    \    paren_level = 11\n    paren_nesting = 11\n    paren_levels.append(paren_level)\n\
    \    paren_nestings.append(paren_nesting)\n    paren_level = 12\n    paren_nesting\
    \ = 12\n    paren_levels.append(paren_level)\n    paren_nestings.append(paren_nesting)\n\
    \    paren_level = 13\n    paren_nesting = 13\n    paren_levels.append(paren_level)\n\
    \    paren_nestings.append(paren_nesting)\n    paren_level = 14\n    paren_nesting\
    \ = 14\n    paren_levels.append(paren_level)\n    paren_nestings.append(paren_nest\n\
    def check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') ==\
    \ [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n\
    \    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptrdobgrr.py\"\
    , line 71\n    paren_nestings.append(paren_nest\n                         ^\n\
    SyntaxError: '(' was never closed\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_stack\
    \ = []\n    paren_stack.append(0)\n    paren_level = 0\n    paren_levels = []\n\
    \    paren_levels.append(0)\n    paren_levels.append(0)\n    paren_levels.append(0)\n\
    \    paren_levels.append(0)\n    paren_levels.append(0)\n    paren_levels.append(0)\n\
    \    paren_levels.append(0)\n    paren_levels.append(0)\n    paren_levels.append(0)\n\
    \    paren_levels.append(0)\n    paren_levels.append(0)\n    paren_levels.append(0)\n\
    \    paren_levels.append(0)\n    paren_levels.append(0)\n    paren_levels.append(0)\n\
    \    paren_levels.append(0)\n    paren_levels.append(0)\n    paren_levels.append(0)\n\
    \    paren_levels.append(0)\n    paren_levels.append(0)\n    paren_levels.append(0)\n\
    \    paren_levels.append(0)\n    paren_levels.append(0)\n    paren_levels.append(0)\n\
    \    paren_levels.append(0)\n    paren_levels.append(0)\n    paren_levels.append(0)\n\
    \    paren_levels.append(0)\n    paren_levels.append(0)\n    paren_levels.append(0)\n\
    \    paren_levels.append(0)\n    paren_levels.append(0)\n    paren_levels.append(0)\n\
    \    paren_levels.append(0)\n    paren_levels.append(0)\n    paren_levels.append(0)\n\
    \    paren_levels.append(0)\n    paren_levels.append(0)\n    paren_levels.append(0)\n\
    \    paren_levels.append(0)\n    paren_levels.append(0)\n    paren_levels.append(0)\n\
    \    paren_levels.append(0)\n    paren_levels.append(0)\n    paren_levels.append(0)\n\
    \    paren_levels.append(0)\n    paren_levels.append(0)\n    paren_levels.append(0)\n\
    \    paren_levels.append(0)\n    paren_levels.append(0)\n    paren_levels.append(0)\n\
    \    paren_levels.append(0)\n    paren_levels.append(0)\n    paren_levels.append(0)\n\
    \    paren_levels.append(0)\n    paren_levels.append(0)\n    paren_levels.append(0)\n\
    \    paren_levels.append(0)\n    paren_levels.append(0)\n    paren_levels.append(0)\n\
    \    paren_levels.append(0)\n    paren_levels.append(0)\n    paren_levels.append(0)\n\
    \    paren_levels.append(0)\n    paren_levels.append(0)\n    paren_levels.append(0)\n\
    \    paren_levels.append(0)\n    paren_levels.append(0)\n    paren_levels.append(0)\n\
    \    paren_level\ndef check(candidate):\n    assert candidate('(()()) ((())) ()\
    \ ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcqxp5bts.py\"\
    , line 91, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcqxp5bts.py\"\
    , line 89, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcqxp5bts.py\"\
    , line 84, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_stack\
    \ = []\n    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())')\
    \ == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3,\
    \ 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n   \
    \ check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2hmbqz8o.py\"\
    , line 91, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2hmbqz8o.py\"\
    , line 89, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2hmbqz8o.py\"\
    , line 84, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2hmbqz8o.py\"\
    , line 82, in parse_nested_parens\n    paren\nNameError: name 'paren' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_level\
    \ = 0\n    paren_levels = []\n    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgd6ftfta.py\"\
    , line 66\n    paren_levels.append(\n                       ^\nSyntaxError: '('\
    \ was never closed\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_level\
    \ = 0\n    paren_levels = []\n    paren_levels_stack = []\n    for char in paren_string:\n\
    \        if char == '(':\n            paren_level += 1\n            paren_levels.append(paren_level)\n\
    \            paren_levels_stack.append(paren_level)\n        elif char == ')':\n\
    \            paren_level -= 1\n            paren_levels_stack.pop()\n        \
    \    if paren_level == 0:\n                paren_levels.append(paren_level)\n\
    \        elif char == ' ':\n            if len(paren_levels_stack) > 0:\n    \
    \            paren_levels.append(paren_levels_stack[-1])\n    return paren_levels\n\
    \ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') ==\
    \ [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n\
    \    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq5vkvwcc.py\"\
    , line 35, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq5vkvwcc.py\"\
    , line 33, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq5vkvwcc.py\"\
    , line 28, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_stack\
    \ = []\n    level = 0\n    paren_level = 0\n    paren_level_stack = []\n    for\
    \ c in paren_string:\n        if c == '(':\n            paren_stack.append(c)\n\
    \            paren_level_stack.append(level)\n            level += 1\n       \
    \ elif c == ')':\n            paren_stack.pop()\n            paren_level_stack.pop()\n\
    \            level -= 1\n        elif c == '[':\n            paren_stack.append(c)\n\
    \            paren_level_stack.append(level)\n            level += 1\n       \
    \ elif c == ']':\n            paren_stack.pop()\n            paren_level_stack.pop()\n\
    \            level -= 1\n        elif c == ',':\n            level -= 1\n    \
    \    elif c == '{':\n            paren_stack.append(c)\n            paren_level_stack.append(level)\n\
    \            level += 1\n        elif c == '}':\n            paren_stack.pop()\n\
    \            paren_level_stack.pop()\n            level -= 1\n        elif c ==\
    \ '.':\n            level -= 1\n        elif c == '!':\n            level -= 1\n\
    \        elif c == '?':\n            level -= 1\n        elif c == '\\n':\n  \
    \          level -= 1\n        elif c == '\\t':\n            level -= 1\n    \
    \    elif c == '\\r':\n            level -= 1\n        elif c == '\\f':\n    \
    \        level -= 1\n        elif c == '\\v':\n            level -= 1\n      \
    \  elif c == '\\\\':\n            level -= 1\n        elif c == '%':\n       \
    \     level -= 1\n        elif c == '&':\n            level -= 1\n        elif\
    \ c == '(':\n            paren_stack.append(c)\n            paren_level_stack.append(level)\n\
    \            level += 1\n        elif c == ')':\n            paren_stack.pop()\n\
    \            paren_level_stack.pop()\n            level -= 1\n        elif c ==\
    \ '[':\n            paren_stack.append(c)\n            paren_level_stack.append(level)\n\
    \            level += 1\n        elif c == ']':\n            paren_stack.pop()\n\
    \            paren_level_stack.pop()\n            level -= 1\n        elif c ==\
    \ ',':\n            level -= 1\n        elif c == '{':\n            paren_stack.append(c)\n\
    \            paren_level_stack.append(level)\n            level += 1\n       \
    \ elif c == '}':\n            paren_stack.pop()\n            paren_level_stack.pop()\n\
    \            level -= 1\n        elif c == '.':\n            level -= 1\n    \
    \    elif c == '!':\n            level -= 1\n        elif c == '?':\n        \
    \    level -= 1\n        elif c == '\\n':\n            level -= 1\n        elif\
    \ c == '\\t':\n            level -= 1\n        elif c == '\\r':\n            level\
    \ -= 1\n        elif c == '\\f':\n            level -= 1\n        elif c\ndef\
    \ check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n\
    \    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu0hixwj_.py\"\
    , line 102\n    elif c\n          ^\nSyntaxError: expected ':'\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    level =\
    \ 0\n    paren_stack = []\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppgfsxoh7.py\"\
    , line 82\n    paren_stack.append(\n                      ^\nSyntaxError: '('\
    \ was never closed\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_stack\
    \ = []\n    level = 0\n    paren_level = 0\n    paren_level_stack = []\n    for\
    \ char in paren_string:\n        if char == '(':\n            paren_stack.append(char)\n\
    \            paren_level_stack.append(level)\n            level += 1\n       \
    \ elif char == ')':\n            paren_level_stack.pop()\n            level =\
    \ paren_level_stack[-1]\n            paren_stack.pop()\n        elif char == '\
    \ ':\n            level -= 1\n    \n    return paren_stack\n\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7z45la_n.py\"\
    , line 35, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7z45la_n.py\"\
    , line 33, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7z45la_n.py\"\
    , line 28, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7z45la_n.py\"\
    , line 20, in parse_nested_parens\n    level = paren_level_stack[-1]\nIndexError:\
    \ list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_level\
    \ = 0\n    paren_levels = []\n    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpoz1n2052.py\"\
    , line 66\n    paren_levels.append(\n                       ^\nSyntaxError: '('\
    \ was never closed\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_stack\
    \ = []\n    paren_level = 0\n    paren_levels = []\n    paren_levels.append(paren_level)\n\
    \    paren_stack.append(paren_level)\n    paren_levels.append(paren_level)\n \
    \   paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n \
    \   paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n \
    \   paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n \
    \   paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n \
    \   paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n \
    \   paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n \
    \   paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n \
    \   paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n \
    \   paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n \
    \   paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n \
    \   paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n \
    \   paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n \
    \   paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n \
    \   paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n \
    \   paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n \
    \   paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n \
    \   paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n \
    \   paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n \
    \   paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n \
    \   paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n \
    \   paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n \
    \   paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n \
    \   paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n \
    \   paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n \
    \   paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n \
    \   paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\ndef\
    \ check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n\
    \    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_35zat01.py\"\
    , line 75, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_35zat01.py\"\
    , line 73, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_35zat01.py\"\
    , line 68, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_stack\
    \ = []\n    paren_level = 0\n    paren_levels = []\n    paren_levels_str = \"\"\
    \n    for char in paren_string:\n        if char == \"(\":\n            paren_stack.append(paren_level)\n\
    \            paren_level += 1\n        elif char == \")\":\n            paren_level\
    \ -= paren_stack.pop()\n            paren_levels.append(paren_level)\n       \
    \     paren_levels_str += str(paren_level)\n        elif char == \" \":\n    \
    \        paren_levels_str += \" \"\n    return paren_levels\n\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn50eur5i.py\"\
    , line 33, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn50eur5i.py\"\
    , line 31, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn50eur5i.py\"\
    , line 26, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_stack\
    \ = []\n    paren_stack.append(0)\n    paren_level = 0\n    paren_levels = []\n\
    \    paren_levels.append(0)\n    paren_levels.append(0)\n    paren_levels.append(0)\n\
    \    paren_levels.append(0)\n    paren_levels.append(0)\n    paren_levels.append(0)\n\
    \    paren_levels.append(0)\n    paren_levels.append(0)\n    paren_levels.append(0)\n\
    \    paren_levels.append(0)\n    paren_levels.append(0)\n    paren_levels.append(0)\n\
    \    paren_levels.append(0)\n    paren_levels.append(0)\n    paren_levels.append(0)\n\
    \    paren_levels.append(0)\n    paren_levels.append(0)\n    paren_levels.append(0)\n\
    \    paren_levels.append(0)\n    paren_levels.append(0)\n    paren_levels.append(0)\n\
    \    paren_levels.append(0)\n    paren_levels.append(0)\n    paren_levels.append(0)\n\
    \    paren_levels.append(0)\n    paren_levels.append(0)\n    paren_levels.append(0)\n\
    \    paren_levels.append(0)\n    paren_levels.append(0)\n    paren_levels.append(0)\n\
    \    paren_levels.append(0)\n    paren_levels.append(0)\n    paren_levels.append(0)\n\
    \    paren_levels.append(0)\n    paren_levels.append(0)\n    paren_levels.append(0)\n\
    \    paren_levels.append(0)\n    paren_levels.append(0)\n    paren_levels.append(0)\n\
    \    paren_levels.append(0)\n    paren_levels.append(0)\n    paren_levels.append(0)\n\
    \    paren_levels.append(0)\n    paren_levels.append(0)\n    paren_levels.append(0)\n\
    \    paren_levels.append(0)\n    paren_levels.append(0)\n    paren_levels.append(0)\n\
    \    paren_levels.append(0)\n    paren_levels.append(0)\n    paren_levels.append(0)\n\
    \    paren_levels.append(0)\n    paren_levels.append(0)\n    paren_levels.append(0)\n\
    \    paren_levels.append(0)\n    paren_levels.append(0)\n    paren_levels.append(0)\n\
    \    paren_levels.append(0)\n    paren_levels.append(0)\n    paren_levels.append(0)\n\
    \    paren_levels.append(0)\n    paren_levels.append(0)\n    paren_levels.append(0)\n\
    \    paren_levels.append(0)\n    paren_levels.append(0)\n    paren_levels.append(0)\n\
    \    paren_levels.append(0)\n    paren_levels.append(0)\n    paren_levels.append(0)\n\
    \    paren_level\ndef check(candidate):\n    assert candidate('(()()) ((())) ()\
    \ ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnbbp0vv5.py\"\
    , line 91, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnbbp0vv5.py\"\
    , line 89, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnbbp0vv5.py\"\
    , line 84, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_level\
    \ = 0\n    paren_nesting = 0\n    paren_levels = []\n    paren_nestings = []\n\
    \    paren_levels.append(paren_level)\n    paren_nestings.append(paren_nesting)\n\
    \    paren_level = 1\n    paren_nesting = 1\n    paren_levels.append(paren_level)\n\
    \    paren_nestings.append(paren_nesting)\n    paren_level = 2\n    paren_nesting\
    \ = 2\n    paren_levels.append(paren_level)\n    paren_nestings.append(paren_nesting)\n\
    \    paren_level = 3\n    paren_nesting = 3\n    paren_levels.append(paren_level)\n\
    \    paren_nestings.append(paren_nesting)\n    paren_level = 4\n    paren_nesting\
    \ = 4\n    paren_levels.append(paren_level)\n    paren_nestings.append(paren_nesting)\n\
    \    paren_level = 5\n    paren_nesting = 5\n    paren_levels.append(paren_level)\n\
    \    paren_nestings.append(paren_nesting)\n    paren_level = 6\n    paren_nesting\
    \ = 6\n    paren_levels.append(paren_level)\n    paren_nestings.append(paren_nesting)\n\
    \    paren_level = 7\n    paren_nesting = 7\n    paren_levels.append(paren_level)\n\
    \    paren_nestings.append(paren_nesting)\n    paren_level = 8\n    paren_nesting\
    \ = 8\n    paren_levels.append(paren_level)\n    paren_nestings.append(paren_nesting)\n\
    \    paren_level = 9\n    paren_nesting = 9\n    paren_levels.append(paren_level)\n\
    \    paren_nestings.append(paren_nesting)\n    paren_level = 10\n    paren_nesting\
    \ = 10\n    paren_levels.append(paren_level)\n    paren_nestings.append(paren_nesting)\n\
    \    paren_level = 11\n    paren_nesting = 11\n    paren_levels.append(paren_level)\n\
    \    paren_nestings.append(paren_nesting)\n    paren_level = 12\n    paren_nesting\
    \ = 12\n    paren_levels.append(paren_level)\n    paren_nestings.append(paren_nesting)\n\
    \    paren_level = 13\n    paren_nesting = 13\n    paren_levels.append(paren_level)\n\
    \    paren_nestings.append(paren_nesting)\n    paren_level = 14\n    paren_nesting\
    \ = 14\n    paren_levels.append(paren_level)\n    paren_nestings.append(paren_nesting)\n\
    \    paren_level = \ndef check(candidate):\n    assert candidate('(()()) ((()))\
    \ () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl4dre9pi.py\"\
    , line 71\n    paren_level = \n                  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_stack\
    \ = []\n    level = 0\n    paren_level = 0\n    paren_nesting = 0\n    paren_levels\
    \ = []\n    for char in paren_string:\n        if char == '(':\n            paren_stack.append(char)\n\
    \            paren_level += 1\n            paren_nesting += 1\n        elif char\
    \ == ')':\n            paren_nesting -= 1\n            if paren_nesting == 0:\n\
    \                paren_stack.pop()\n                paren_level -= 1\n       \
    \         paren_levels.append(paren_level)\n            else:\n              \
    \  paren_levels.append(paren_level)\n                paren_nesting += 1\n    \
    \    elif char == ' ':\n            paren_levels.append(paren_level)\n       \
    \     paren_nesting += 1\n        elif char == ',':\n            paren_levels.append(paren_level)\n\
    \            paren_nesting += 1\n            paren_level = 0\n    return paren_levels\n\
    \ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') ==\
    \ [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n\
    \    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsjsspm5y.py\"\
    , line 45, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsjsspm5y.py\"\
    , line 43, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsjsspm5y.py\"\
    , line 38, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_stack\
    \ = []\n    paren_level = 0\n    paren_levels = []\n    paren_levels_count = 0\n\
    \    paren_levels_count_list = []\n    paren_levels_count_list.append(0)\n   \
    \ paren_levels_count_list.append(0)\n    paren_levels_count_list.append(0)\n \
    \   paren_levels_count_list.append(0)\n    paren_levels_count_list.append(0)\n\
    \    paren_levels_count_list.append(0)\n    paren_levels_count_list.append(0)\n\
    \    paren_levels_count_list.append(0)\n    paren_levels_count_list.append(0)\n\
    \    paren_levels_count_list.append(0)\n    paren_levels_count_list.append(0)\n\
    \    paren_levels_count_list.append(0)\n    paren_levels_count_list.append(0)\n\
    \    paren_levels_count_list.append(0)\n    paren_levels_count_list.append(0)\n\
    \    paren_levels_count_list.append(0)\n    paren_levels_count_list.append(0)\n\
    \    paren_levels_count_list.append(0)\n    paren_levels_count_list.append(0)\n\
    \    paren_levels_count_list.append(0)\n    paren_levels_count_list.append(0)\n\
    \    paren_levels_count_list.append(0)\n    paren_levels_count_list.append(0)\n\
    \    paren_levels_count_list.append(0)\n    paren_levels_count_list.append(0)\n\
    \    paren_levels_count_list.append(0)\n    paren_levels_count_list.append(0)\n\
    \    paren_levels_count_list.append(0)\n    paren_levels_count_list.append(0)\n\
    \    paren_levels_count_list.append(0)\n    paren_levels_count_list.append(0)\n\
    \    paren_levels_count_list.append(0)\n    paren_levels_count_list.append(0)\n\
    \    paren_levels_count_list.append(0)\n    paren_levels_count_list.append(0)\n\
    \    paren_levels_count_list.append(0)\n    paren_levels_count_list.append(0)\n\
    \    paren_levels_count_list.append(0)\n    paren_levels_count_list.append(0)\n\
    \    paren_levels_count_list.append(0)\n    paren_levels_count_list.append(0)\n\
    \    paren_levels_count_list.append(0)\n    paren_levels_count_list.append(0)\n\
    \    paren_levels_count_list.append(0)\n    paren_levels_count_list.append(0)\n\
    \    paren_levels_count_list.append(0)\n    paren_levels_count_list.append(0)\n\
    \    paren_levels_count_list.append(0)\n    paren_levels_count_list.append(0)\n\
    \    paren_levels_count_list.append(0)\n    paren_levels_count_list.append(0)\n\
    \    paren_levels_count_list.append(0)\n    paren_levels_count_list.append(0)\n\
    \    paren\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())')\
    \ == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3,\
    \ 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n   \
    \ check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw1ogqt7c.py\"\
    , line 76, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw1ogqt7c.py\"\
    , line 74, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw1ogqt7c.py\"\
    , line 69, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw1ogqt7c.py\"\
    , line 67, in parse_nested_parens\n    paren\nNameError: name 'paren' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_stack\
    \ = []\n    level = 0\n    paren_level = 0\n    paren_start = 0\n    paren_end\
    \ = 0\n    paren_level_count = 0\n    paren_level_count_list = []\n    paren_level_count_list.append(0)\n\
    \    paren_level_count_list.append(0)\n    paren_level_count_list.append(0)\n\
    \    paren_level_count_list.append(0)\n    paren_level_count_list.append(0)\n\
    \    paren_level_count_list.append(0)\n    paren_level_count_list.append(0)\n\
    \    paren_level_count_list.append(0)\n    paren_level_count_list.append(0)\n\
    \    paren_level_count_list.append(0)\n    paren_level_count_list.append(0)\n\
    \    paren_level_count_list.append(0)\n    paren_level_count_list.append(0)\n\
    \    paren_level_count_list.append(0)\n    paren_level_count_list.append(0)\n\
    \    paren_level_count_list.append(0)\n    paren_level_count_list.append(0)\n\
    \    paren_level_count_list.append(0)\n    paren_level_count_list.append(0)\n\
    \    paren_level_count_list.append(0)\n    paren_level_count_list.append(0)\n\
    \    paren_level_count_list.append(0)\n    paren_level_count_list.append(0)\n\
    \    paren_level_count_list.append(0)\n    paren_level_count_list.append(0)\n\
    \    paren_level_count_list.append(0)\n    paren_level_count_list.append(0)\n\
    \    paren_level_count_list.append(0)\n    paren_level_count_list.append(0)\n\
    \    paren_level_count_list.append(0)\n    paren_level_count_list.append(0)\n\
    \    paren_level_count_list.append(0)\n    paren_level_count_list.append(0)\n\
    \    paren_level_count_list.append(0)\n    paren_level_count_list.append(0)\n\
    \    paren_level_count_list.append(0)\n    paren_level_count_list.append(0)\n\
    \    paren_level_count_list.append(0)\n    paren_level_count_list.append(0)\n\
    \    paren_level_count_list.append(0)\n    paren_level_count_list.append(0)\n\
    \    paren_level_count_list.append(0)\n    paren_level_count_list.append(0)\n\
    \    paren_level_count_list.append(0)\n    paren_level_count_list.append(0)\n\
    \    paren_level_count_list.append(0)\n    paren_level_count_list.append(0)\n\
    \    paren_level_count_list.append(0)\n    paren_level_count_list.append(0)\n\
    \    paren_level_count_list.append(0)\n    paren_level_count_list.append(0)\n\
    \    paren_level_count_list.append(0)\n    paren_level_count_list.append(0)\n\
    \    paren_level_count_list.append(0)\n    paren_level_count_list.append(0)\n\
    \    paren_level_count_list.append(0)\n    paren_level_count_list.append(0)\n\
    \    paren_level_count_list.append(0)\n    paren_level_count_list.append(\ndef\
    \ check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n\
    \    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4bn65oae.py\"\
    , line 74\n    paren_level_count_list.append(\n                              \
    \   ^\nSyntaxError: '(' was never closed\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_stack\
    \ = []\n    level = 0\n    paren_level = 0\n    paren_stack.append(0)\n    for\
    \ index, char in enumerate(paren_string):\n        if char == '(':\n         \
    \   paren_stack.append(0)\n            paren_level += 1\n        elif char ==\
    \ ')':\n            paren_stack.pop()\n            paren_level -= 1\n        elif\
    \ char == ' ':\n            level += 1\n        elif char == '\\n':\n        \
    \    level -= 1\n            paren_level = 0\n        elif char == '\\t':\n  \
    \          level -= 1\n            paren_level = 0\n        elif char == '\\r':\n\
    \            level -= 1\n            paren_level = 0\n        elif char == '\\\
    v':\n            level -= 1\n            paren_level = 0\n        elif char ==\
    \ '\\f':\n            level -= 1\n            paren_level = 0\n        elif char\
    \ == '\\a':\n            level -= 1\n            paren_level = 0\n        elif\
    \ char == '\\e':\n            level -= 1\n            paren_level = 0\n      \
    \  elif char == '\\v':\n            level -= 1\n            paren_level = 0\n\
    \        elif char == '\\e':\n            level -= 1\n            paren_level\
    \ = 0\n        elif char == '\\e':\n            level -= 1\n            paren_level\
    \ = 0\n        elif char == '\\e':\n            level -= 1\n            paren_level\
    \ = 0\n        elif char == '\\e':\n            level -= 1\n            paren_level\
    \ = 0\n        elif char == '\\e':\n            level -= 1\n            paren_level\
    \ = 0\n        elif char == '\\e':\n            level -= 1\n            paren_level\
    \ = 0\n        elif char == '\\e':\n            level -= 1\n            paren_level\
    \ = 0\n        elif char == '\\e':\n            level -= 1\n            paren_level\
    \ = 0\n        elif char == '\\e':\n            level -= 1\n            paren_level\
    \ = 0\n        elif char == '\\e':\n            level -= 1\n            paren_level\
    \ = 0\n        elif char == '\\e':\n            level -= 1\n            paren_level\
    \ = 0\n        elif char == '\\e':\n            level -= 1\n            paren_level\
    \ = 0\n        elif char == '\\e':\n            level -= 1\n            paren_level\
    \ = 0\n        elif char == '\\e':\n            level -= 1\n            paren_level\
    \ = 0\n        elif char == '\\e':\n            level -= 1\n            paren_level\
    \ = 0\n        elif char == '\\e':\n            level -= 1\n            paren_level\
    \ = 0\n        elif char == '\\e':\n            level -= 1\n            paren_level\
    \ = 0\n        elif char == '\\e':\n            level -= 1\n            paren_\n\
    def check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') ==\
    \ [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n\
    \    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppif36jr2.py\"\
    , line 108, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppif36jr2.py\"\
    , line 106, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppif36jr2.py\"\
    , line 101, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_stack\
    \ = []\n    paren_level = 0\n    paren_levels = []\n    paren_levels_count = 0\n\
    \    paren_levels_count_max = 0\n    paren_levels_count_max = 0\n    for char\
    \ in paren_string:\n        if char == '(':\n            paren_stack.append(char)\n\
    \            paren_level += 1\n            paren_levels.append(paren_level)\n\
    \            paren_levels_count += 1\n        elif char == ')':\n            paren_levels_count\
    \ -= 1\n            if paren_levels_count == 0:\n                paren_levels_count_max\
    \ += 1\n                paren_levels_count_max = max(paren_levels_count_max, paren_levels_count)\n\
    \                paren_levels_count = min(paren_levels_count_max, len(paren_levels))\n\
    \                paren_levels.pop()\n                paren_levels_count -= 1\n\
    \            else:\n                paren_levels_count -= 1\n                paren_levels_count_max\
    \ += 1\n                paren_levels_count_max = max(paren_levels_count_max, paren_levels_count)\n\
    \                paren_levels_count = min(paren_levels_count_max, len(paren_levels))\n\
    \                paren_levels.pop()\n                paren_levels_count -= 1\n\
    \            paren_stack.pop()\n        else:\n            paren_stack.pop()\n\
    \    \n    return paren_levels\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6x6qebhm.py\"\
    , line 50, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6x6qebhm.py\"\
    , line 48, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6x6qebhm.py\"\
    , line 43, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6x6qebhm.py\"\
    , line 38, in parse_nested_parens\n    paren_stack.pop()\nIndexError: pop from\
    \ empty list\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_stack\
    \ = []\n    level = 0\n    paren_level = 0\n    paren_level_stack = []\n    paren_level_stack.append(level)\n\
    \    paren_stack.append(paren_level)\n    paren_level_stack.append(level)\n  \
    \  paren_level_stack.append(level)\n    paren_level_stack.append(level)\n    paren_level_stack.append(level)\n\
    \    paren_level_stack.append(level)\n    paren_level_stack.append(level)\n  \
    \  paren_level_stack.append(level)\n    paren_level_stack.append(level)\n    paren_level_stack.append(level)\n\
    \    paren_level_stack.append(level)\n    paren_level_stack.append(level)\n  \
    \  paren_level_stack.append(level)\n    paren_level_stack.append(level)\n    paren_level_stack.append(level)\n\
    \    paren_level_stack.append(level)\n    paren_level_stack.append(level)\n  \
    \  paren_level_stack.append(level)\n    paren_level_stack.append(level)\n    paren_level_stack.append(level)\n\
    \    paren_level_stack.append(level)\n    paren_level_stack.append(level)\n  \
    \  paren_level_stack.append(level)\n    paren_level_stack.append(level)\n    paren_level_stack.append(level)\n\
    \    paren_level_stack.append(level)\n    paren_level_stack.append(level)\n  \
    \  paren_level_stack.append(level)\n    paren_level_stack.append(level)\n    paren_level_stack.append(level)\n\
    \    paren_level_stack.append(level)\n    paren_level_stack.append(level)\n  \
    \  paren_level_stack.append(level)\n    paren_level_stack.append(level)\n    paren_level_stack.append(level)\n\
    \    paren_level_stack.append(level)\n    paren_level_stack.append(level)\n  \
    \  paren_level_stack.append(level)\n    paren_level_stack.append(level)\n    paren_level_stack.append(level)\n\
    \    paren_level_stack.append(level)\n    paren_level_stack.append(level)\n  \
    \  paren_level_stack.append(level)\n    paren_level_stack.append(level)\n    paren_level_stack.append(level)\n\
    \    paren_level_stack.append(level)\n    paren_level_stack.append(level)\n  \
    \  paren_level_stack.append(level)\n    paren_level_stack.append(level)\n    paren_level_stack.append(level)\n\
    \    paren_level_stack.append(level)\n    paren_level_stack.append(level)\n  \
    \  paren_level_stack.append(level)\n    paren_level_stack.append(level)\n    paren_level_stack.append(level)\n\
    \    paren_level_stack.append(level)\n    paren_level_stack.append(level)\n  \
    \  paren_level_stack.append(level)\n    paren_level_stack.append(level)\n    paren_level_stack.append(level)\n\
    \ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') ==\
    \ [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n\
    \    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphk4p1d6g.py\"\
    , line 83, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphk4p1d6g.py\"\
    , line 81, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphk4p1d6g.py\"\
    , line 76, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_stack\
    \ = []\n    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())')\
    \ == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3,\
    \ 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n   \
    \ check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmnlsnkac.py\"\
    , line 91, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmnlsnkac.py\"\
    , line 89, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmnlsnkac.py\"\
    , line 84, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmnlsnkac.py\"\
    , line 82, in parse_nested_parens\n    paren\nNameError: name 'paren' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_stack\
    \ = []\n    paren_level = 0\n    paren_levels = []\n    paren_levels_string =\
    \ \"\"\n    paren_levels_string_list = []\n    paren_levels_string_list.append(paren_string)\n\
    \    paren_levels_string_list.append(paren_levels_string)\n    paren_levels_string_list.append(paren_levels_string_list)\n\
    \    paren_levels_string_list.append(paren_levels_string_list)\n    paren_levels_string_list.append(paren_levels_string_list)\n\
    \    paren_levels_string_list.append(paren_levels_string_list)\n    paren_levels_string_list.append(paren_levels_string_list)\n\
    \    paren_levels_string_list.append(paren_levels_string_list)\n    paren_levels_string_list.append(paren_levels_string_list)\n\
    \    paren_levels_string_list.append(paren_levels_string_list)\n    paren_levels_string_list.append(paren_levels_string_list)\n\
    \    paren_levels_string_list.append(paren_levels_string_list)\n    paren_levels_string_list.append(paren_levels_string_list)\n\
    \    paren_levels_string_list.append(paren_levels_string_list)\n    paren_levels_string_list.append(paren_levels_string_list)\n\
    \    paren_levels_string_list.append(paren_levels_string_list)\n    paren_levels_string_list.append(paren_levels_string_list)\n\
    \    paren_levels_string_list.append(paren_levels_string_list)\n    paren_levels_string_list.append(paren_levels_string_list)\n\
    \    paren_levels_string_list.append(paren_levels_string_list)\n    paren_levels_string_list.append(paren_levels_string_list)\n\
    \    paren_levels_string_list.append(paren_levels_string_list)\n    paren_levels_string_list.append(paren_levels_string_list)\n\
    \    paren_levels_string_list.append(paren_levels_string_list)\n    paren_levels_string_list.append(paren_levels_string_list)\n\
    \    paren_levels_string_list.append(paren_levels_string_list)\n    paren_levels_string_list.append(paren_levels_string_list)\n\
    \    paren_levels_string_list.append(paren_levels_string_list)\n    paren_levels_string_list.append(paren_levels_string_list)\n\
    \    paren_levels_string_list.append(paren_levels_string_list)\n    paren_levels_string_list.append(paren_levels_string_list)\n\
    \    paren_levels_string_list.append(paren_levels_string_list)\n    paren_levels_string_list.append(paren_levels_string_list)\n\
    \    paren_levels_string_list.append(paren_levels_string_list)\n    paren_levels_string\n\
    def check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') ==\
    \ [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n\
    \    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkz_usjt1.py\"\
    , line 57, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkz_usjt1.py\"\
    , line 55, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkz_usjt1.py\"\
    , line 50, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_stack\
    \ = []\n    paren_level = 0\n    paren_levels = []\n    paren_levels_str = \"\"\
    \n    for char in paren_string:\n        if char == '(':\n            paren_stack.append(paren_level)\n\
    \            paren_level += 1\n            paren_levels_str += str(paren_level)\n\
    \        elif char == ')':\n            paren_level -= 1\n            paren_levels_str\
    \ += str(paren_level)\n            paren_stack.pop()\n        elif char == ' ':\n\
    \            if paren_stack:\n                paren_levels.append(paren_stack[-1])\n\
    \                paren_levels_str += str(paren_stack[-1])\n            else:\n\
    \                paren_levels.append(0)\n                paren_levels_str += str(0)\n\
    \    return paren_levels\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp92zfxjfs.py\"\
    , line 39, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp92zfxjfs.py\"\
    , line 37, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp92zfxjfs.py\"\
    , line 32, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_stack\
    \ = []\n    level = 0\n    paren_level = 0\n    paren_levels = []\n    paren_levels_string\
    \ = \"\"\n    for char in paren_string:\n        if char == \"(\":\n         \
    \   paren_stack.append(char)\n            paren_level += 1\n            paren_levels.append(paren_level)\n\
    \            paren_levels_string += char\n        elif char == \")\":\n      \
    \      paren_level -= 1\n            paren_levels.append(paren_level)\n      \
    \      paren_levels_string += char\n        elif char == \" \":\n            if\
    \ paren_level == 0:\n                paren_levels.append(paren_level)\n      \
    \          paren_levels_string += char\n            else:\n                paren_stack.pop()\n\
    \                paren_level -= 1\n                paren_levels.append(paren_level)\n\
    \                paren_levels_string += char\n        else:\n            paren_levels_string\
    \ += char\n    return paren_levels\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpefyob2j2.py\"\
    , line 45, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpefyob2j2.py\"\
    , line 43, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpefyob2j2.py\"\
    , line 38, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_stack\
    \ = []\n    level = 0\n    paren_level = 0\n    paren_level_stack = []\n    paren_level_stack.append(0)\n\
    \    paren_level_stack.append(0)\n    for index, char in enumerate(paren_string):\n\
    \        if char == '(':\n            paren_stack.append(index)\n            paren_level_stack.append(level)\n\
    \            level += 1\n        elif char == ')':\n            paren_level_stack.pop()\n\
    \            level = paren_level_stack[-1]\n            paren_stack.pop()\n  \
    \      elif char == ' ':\n            level += 1\n        elif char == ',':\n\
    \            level += 1\n            paren_level_stack.append(level)\n       \
    \     paren_stack.append(index)\n    \n    paren_level_stack.pop()\n    \n   \
    \ return paren_stack\n\ndef check(candidate):\n    assert candidate('(()()) ((()))\
    \ () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpslrgk9uz.py\"\
    , line 43, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpslrgk9uz.py\"\
    , line 41, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpslrgk9uz.py\"\
    , line 36, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_stack\
    \ = []\n    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())')\
    \ == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3,\
    \ 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n   \
    \ check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxwphcp5t.py\"\
    , line 91, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxwphcp5t.py\"\
    , line 89, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxwphcp5t.py\"\
    , line 84, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxwphcp5t.py\"\
    , line 82, in parse_nested_parens\n    paren\nNameError: name 'paren' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    stack =\
    \ []\n    level = 0\n    paren_level = 0\n    paren_levels = []\n    paren_levels_str\
    \ = \"\"\n    paren_levels_str_len = len(paren_levels_str)\n    for c in paren_string:\n\
    \        if c == '(':\n            paren_level += 1\n            paren_levels.append(paren_level)\n\
    \            paren_levels_str += c\n        elif c == ')':\n            paren_level\
    \ -= 1\n            paren_levels.append(paren_level)\n            paren_levels_str\
    \ += c\n        elif c == '[':\n            paren_level -= 1\n            paren_levels.append(paren_level)\n\
    \            paren_levels_str += c\n        elif c == ']':\n            paren_level\
    \ += 1\n            paren_levels.append(paren_level)\n            paren_levels_str\
    \ += c\n        elif c == ',':\n            paren_levels_str += c\n        elif\
    \ c == '.':\n            paren_levels_str += c\n        elif c == '\\n':\n   \
    \         paren_levels_str += c\n        elif c == ' ':\n            paren_levels_str\
    \ += c\n        elif c == '\\t':\n            paren_levels_str += c\n        elif\
    \ c == '\\r':\n            paren_levels_str += c\n        elif c == '\\v':\n \
    \           paren_levels_str += c\n        elif c == '\\f':\n            paren_levels_str\
    \ += c\n        elif c == '\\a':\n            paren_levels_str += c\n        elif\
    \ c == '\\e':\n            paren_levels_str += c\n        elif c == '\\v':\n \
    \           paren_levels_str += c\n        elif c == '\\e':\n            paren_levels_str\
    \ += c\n        elif c == '\\a':\n            paren_levels_str += c\n        elif\
    \ c == '\\e':\n            paren_levels_str += c\n        elif c == '\\v':\n \
    \           paren_levels_str += c\n        elif c == '\\e':\n            paren_levels_str\
    \ += c\n        elif c == '\\a':\n            paren_levels_str += c\n        elif\
    \ c == '\\e':\n            paren_levels_str += c\n        elif c == '\\v':\n \
    \           paren_levels_str += c\n        elif c == '\\e':\n            paren_levels_str\
    \ += c\n        elif c == '\\a':\n            paren_levels_str += c\n        elif\
    \ c == '\\e':\n            paren_levels_str += c\n        elif c == '\\v':\n \
    \           paren_levels_str += c\n        elif c == '\\e':\n            paren_levels_str\
    \ += c\n        elif \ndef check(candidate):\n    assert candidate('(()()) ((()))\
    \ () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppi7_13c2.py\"\
    , line 80\n    elif \n         ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_level\
    \ = 0\n    paren_levels = []\n    paren_levels_string = \"\"\n    paren_levels_strings\
    \ = []\n    paren_levels_strings.append(paren_levels_string)\n    paren_levels_strings.append(paren_levels_string)\n\
    \    paren_levels_strings.append(paren_levels_string)\n    paren_levels_strings.append(paren_levels_string)\n\
    \    paren_levels_strings.append(paren_levels_string)\n    paren_levels_strings.append(paren_levels_string)\n\
    \    paren_levels_strings.append(paren_levels_string)\n    paren_levels_strings.append(paren_levels_string)\n\
    \    paren_levels_strings.append(paren_levels_string)\n    paren_levels_strings.append(paren_levels_string)\n\
    \    paren_levels_strings.append(paren_levels_string)\n    paren_levels_strings.append(paren_levels_string)\n\
    \    paren_levels_strings.append(paren_levels_string)\n    paren_levels_strings.append(paren_levels_string)\n\
    \    paren_levels_strings.append(paren_levels_string)\n    paren_levels_strings.append(paren_levels_string)\n\
    \    paren_levels_strings.append(paren_levels_string)\n    paren_levels_strings.append(paren_levels_string)\n\
    \    paren_levels_strings.append(paren_levels_string)\n    paren_levels_strings.append(paren_levels_string)\n\
    \    paren_levels_strings.append(paren_levels_string)\n    paren_levels_strings.append(paren_levels_string)\n\
    \    paren_levels_strings.append(paren_levels_string)\n    paren_levels_strings.append(paren_levels_string)\n\
    \    paren_levels_strings.append(paren_levels_string)\n    paren_levels_strings.append(paren_levels_string)\n\
    \    paren_levels_strings.append(paren_levels_string)\n    paren_levels_strings.append(paren_levels_string)\n\
    \    paren_levels_strings.append(paren_levels_string)\n    paren_levels_strings.append(paren_levels_string)\n\
    \    paren_levels_strings.append(paren_levels_string)\n    paren_levels_strings.append(paren_levels_string)\n\
    \    paren_levels_strings.append(paren_levels_string)\n    paren_levels_strings.append(paren_levels_string)\n\
    \    paren_levels_strings.append(paren_levels_string)\n    paren_levels_strings.append(paren_levels_string)\n\
    \    paren_levels_strings.append(paren_levels_string)\n    paren_\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp84gpuc83.py\"\
    , line 59, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp84gpuc83.py\"\
    , line 57, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp84gpuc83.py\"\
    , line 52, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp84gpuc83.py\"\
    , line 50, in parse_nested_parens\n    paren_\nNameError: name 'paren_' is not\
    \ defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_stack\
    \ = []\n    paren_stack.append(0)\n    paren_level = 0\n    paren_levels = []\n\
    \    paren_levels.append(0)\n    paren_levels.append(0)\n    paren_levels.append(0)\n\
    \    paren_levels.append(0)\n    paren_levels.append(0)\n    paren_levels.append(0)\n\
    \    paren_levels.append(0)\n    paren_levels.append(0)\n    paren_levels.append(0)\n\
    \    paren_levels.append(0)\n    paren_levels.append(0)\n    paren_levels.append(0)\n\
    \    paren_levels.append(0)\n    paren_levels.append(0)\n    paren_levels.append(0)\n\
    \    paren_levels.append(0)\n    paren_levels.append(0)\n    paren_levels.append(0)\n\
    \    paren_levels.append(0)\n    paren_levels.append(0)\n    paren_levels.append(0)\n\
    \    paren_levels.append(0)\n    paren_levels.append(0)\n    paren_levels.append(0)\n\
    \    paren_levels.append(0)\n    paren_levels.append(0)\n    paren_levels.append(0)\n\
    \    paren_levels.append(0)\n    paren_levels.append(0)\n    paren_levels.append(0)\n\
    \    paren_levels.append(0)\n    paren_levels.append(0)\n    paren_levels.append(0)\n\
    \    paren_levels.append(0)\n    paren_levels.append(0)\n    paren_levels.append(0)\n\
    \    paren_levels.append(0)\n    paren_levels.append(0)\n    paren_levels.append(0)\n\
    \    paren_levels.append(0)\n    paren_levels.append(0)\n    paren_levels.append(0)\n\
    \    paren_levels.append(0)\n    paren_levels.append(0)\n    paren_levels.append(0)\n\
    \    paren_levels.append(0)\n    paren_levels.append(0)\n    paren_levels.append(0)\n\
    \    paren_levels.append(0)\n    paren_levels.append(0)\n    paren_levels.append(0)\n\
    \    paren_levels.append(0)\n    paren_levels.append(0)\n    paren_levels.append(0)\n\
    \    paren_levels.append(0)\n    paren_levels.append(0)\n    paren_levels.append(0)\n\
    \    paren_levels.append(0)\n    paren_levels.append(0)\n    paren_levels.append(0)\n\
    \    paren_levels.append(0)\n    paren_levels.append(0)\n    paren_levels.append(0)\n\
    \    paren_levels.append(0)\n    paren_levels.append(0)\n    paren_levels.append(0)\n\
    \    paren_levels.append(0)\n    paren_levels.append(0)\n    paren_levels.append(0)\n\
    \    paren_level\ndef check(candidate):\n    assert candidate('(()()) ((())) ()\
    \ ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0zs8yfu9.py\"\
    , line 91, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0zs8yfu9.py\"\
    , line 89, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0zs8yfu9.py\"\
    , line 84, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_stack\
    \ = []\n    paren_level = 0\n    paren_levels = []\n    paren_levels.append(0)\n\
    \    paren_levels.append(0)\n    for paren in paren_string.split():\n        if\
    \ paren == '(':\n            paren_stack.append(paren)\n            paren_level\
    \ += 1\n            paren_levels.append(paren_level)\n        elif paren == ')':\n\
    \            paren_level -= 1\n            paren_levels.append(paren_level)\n\
    \        elif paren == '[':\n            paren_stack.append(paren)\n         \
    \   paren_level += 1\n            paren_levels.append(paren_level)\n        elif\
    \ paren == ']':\n            paren_level -= 1\n            paren_levels.append(paren_level)\n\
    \        elif paren == ',':\n            paren_stack.pop()\n            paren_levels.pop()\n\
    \            paren_levels.append(paren_level)\n        elif paren == ' ':\n  \
    \          paren_stack.pop()\n            paren_levels.pop()\n            paren_levels.append(paren_level)\n\
    \        else:\n            paren_stack.pop()\n            paren_levels.pop()\n\
    \            paren_levels.append(paren_level)\n    return paren_levels\n\ndef\
    \ check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n\
    \    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzgy2p3in.py\"\
    , line 51, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzgy2p3in.py\"\
    , line 49, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzgy2p3in.py\"\
    , line 44, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzgy2p3in.py\"\
    , line 38, in parse_nested_parens\n    paren_stack.pop()\nIndexError: pop from\
    \ empty list\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_level\
    \ = 0\n    paren_levels = []\n    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzev3h5ah.py\"\
    , line 66\n    paren_levels.append(\n                       ^\nSyntaxError: '('\
    \ was never closed\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_level\
    \ = 0\n    paren_levels = []\n    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkt6bnpxc.py\"\
    , line 66\n    paren_levels.append(\n                       ^\nSyntaxError: '('\
    \ was never closed\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_stack\
    \ = []\n    level = 0\n    for c in paren_string:\n        if c == '(':\n    \
    \        paren_stack.append(level)\n        elif c == ')':\n            level\
    \ = paren_stack.pop()\n        else:\n            level += 1\n    return paren_stack\n\
    \ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') ==\
    \ [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n\
    \    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm88r_9yu.py\"\
    , line 28, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm88r_9yu.py\"\
    , line 26, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm88r_9yu.py\"\
    , line 21, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_stack\
    \ = []\n    paren_level = 0\n    paren_level_stack = []\n    paren_level_stack.append(paren_level)\n\
    \    paren_level_stack.append(paren_level)\n    paren_level_stack.append(paren_level)\n\
    \    paren_level_stack.append(paren_level)\n    paren_level_stack.append(paren_level)\n\
    \    paren_level_stack.append(paren_level)\n    paren_level_stack.append(paren_level)\n\
    \    paren_level_stack.append(paren_level)\n    paren_level_stack.append(paren_level)\n\
    \    paren_level_stack.append(paren_level)\n    paren_level_stack.append(paren_level)\n\
    \    paren_level_stack.append(paren_level)\n    paren_level_stack.append(paren_level)\n\
    \    paren_level_stack.append(paren_level)\n    paren_level_stack.append(paren_level)\n\
    \    paren_level_stack.append(paren_level)\n    paren_level_stack.append(paren_level)\n\
    \    paren_level_stack.append(paren_level)\n    paren_level_stack.append(paren_level)\n\
    \    paren_level_stack.append(paren_level)\n    paren_level_stack.append(paren_level)\n\
    \    paren_level_stack.append(paren_level)\n    paren_level_stack.append(paren_level)\n\
    \    paren_level_stack.append(paren_level)\n    paren_level_stack.append(paren_level)\n\
    \    paren_level_stack.append(paren_level)\n    paren_level_stack.append(paren_level)\n\
    \    paren_level_stack.append(paren_level)\n    paren_level_stack.append(paren_level)\n\
    \    paren_level_stack.append(paren_level)\n    paren_level_stack.append(paren_level)\n\
    \    paren_level_stack.append(paren_level)\n    paren_level_stack.append(paren_level)\n\
    \    paren_level_stack.append(paren_level)\n    paren_level_stack.append(paren_level)\n\
    \    paren_level_stack.append(paren_level)\n    paren_level_stack.append(paren_level)\n\
    \    paren_level_stack.append(paren_level)\n    paren_level_stack.append(paren_level)\n\
    \    paren_level_stack.append(paren_level)\n    paren_level_stack.append(paren_level)\n\
    \    paren_level_stack.append(paren_level)\n    paren_level_stack.append(paren_level)\n\
    \    paren_level_stack.append(paren_level)\n    paren_level_stack.append(paren_level)\n\
    \    paren_level_stack.append(paren_level)\n    paren_level_stack.append(paren_level)\n\
    \    paren_level_stack.append(paren_level)\n    paren_level_stack.append(paren_level)\n\
    \    paren_\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())')\
    \ == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3,\
    \ 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n   \
    \ check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8hqi75xy.py\"\
    , line 70, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8hqi75xy.py\"\
    , line 68, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8hqi75xy.py\"\
    , line 63, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8hqi75xy.py\"\
    , line 61, in parse_nested_parens\n    paren_\nNameError: name 'paren_' is not\
    \ defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_stack\
    \ = []\n    level = 0\n    paren_level = 0\n    paren_level_stack = []\n    for\
    \ char in paren_string:\n        if char == '(':\n            paren_stack.append(char)\n\
    \            paren_level_stack.append(level)\n            level += 1\n       \
    \ elif char == ')':\n            paren_level_stack.pop()\n            level =\
    \ paren_level_stack[-1]\n            paren_stack.pop()\n        else:\n      \
    \      level -= 1\n    \n    return paren_stack\n\ndef check(candidate):\n   \
    \ assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabpz1e9x.py\"\
    , line 35, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabpz1e9x.py\"\
    , line 33, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabpz1e9x.py\"\
    , line 28, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabpz1e9x.py\"\
    , line 20, in parse_nested_parens\n    level = paren_level_stack[-1]\nIndexError:\
    \ list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_level\
    \ = 0\n    paren_levels = []\n    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n\n    for index, char in enumerate(paren_string):\n\
    \        if char == '(':\n            paren_level += 1\n            paren_levels.append(paren_level)\n\
    \        elif char == ')':\n            paren_level -= 1\n            paren_levels.append(paren_level)\n\
    \        else:\n            paren_levels.append(paren_level)\n\n    return paren_levels\n\
    \ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') ==\
    \ [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n\
    \    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpntgxl3un.py\"\
    , line 35, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpntgxl3un.py\"\
    , line 33, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpntgxl3un.py\"\
    , line 28, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_level\
    \ = 0\n    paren_stack = []\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())')\
    \ == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3,\
    \ 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n   \
    \ check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2e0wn5_s.py\"\
    , line 91, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2e0wn5_s.py\"\
    , line 89, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2e0wn5_s.py\"\
    , line 84, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2e0wn5_s.py\"\
    , line 82, in parse_nested_parens\n    paren_\nNameError: name 'paren_' is not\
    \ defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_stack\
    \ = []\n    paren_level = 0\n    paren_levels = []\n    for char in paren_string:\n\
    \        if char == '(':\n            paren_stack.append(paren_level)\n      \
    \      paren_level += 1\n        elif char == ')':\n            paren_level -=\
    \ 1\n            paren_levels.append(paren_level)\n        elif char == ' ':\n\
    \            paren_levels.append(paren_level)\n    return paren_levels\n\ndef\
    \ check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n\
    \    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0oew2ogv.py\"\
    , line 31, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0oew2ogv.py\"\
    , line 29, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0oew2ogv.py\"\
    , line 24, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    stack =\
    \ []\n    level = 0\n    paren_level = 0\n    paren_nesting = 0\n    for c in\
    \ paren_string:\n        if c == '(':\n            paren_nesting += 1\n      \
    \      stack.append(c)\n        elif c == ')':\n            paren_nesting -= 1\n\
    \            stack.pop()\n            if paren_nesting == 0:\n               \
    \ level += 1\n                paren_level = len(stack)\n        elif c == '[':\n\
    \            paren_nesting += 1\n            stack.append(c)\n        elif c ==\
    \ ']':\n            paren_nesting -= 1\n            stack.pop()\n            if\
    \ paren_nesting == 0:\n                level += 1\n                paren_level\
    \ = len(stack)\n        elif c == ',':\n            level += 1\n            paren_level\
    \ = len(stack)\n        elif c == '.':\n            level += 1\n            paren_level\
    \ = len(stack)\n        elif c == '\\n':\n            level += 1\n           \
    \ paren_level = len(stack)\n        elif c == '\\t':\n            level += 1\n\
    \            paren_level = len(stack)\n        elif c == '\\r':\n            level\
    \ += 1\n            paren_level = len(stack)\n        elif c == '\\v':\n     \
    \       level += 1\n            paren_level = len(stack)\n        elif c == '\\\
    a':\n            level += 1\n            paren_level = len(stack)\n        elif\
    \ c == '\\e':\n            level += 1\n            paren_level = len(stack)\n\
    \        elif c == '\\v':\n            level += 1\n            paren_level = len(stack)\n\
    \        elif c == '\\a':\n            level += 1\n            paren_level = len(stack)\n\
    \        elif c == '\\e':\n            level += 1\n            paren_level = len(stack)\n\
    \        elif c == '\\v':\n            level += 1\n            paren_level = len(stack)\n\
    \        elif c == '\\a':\n            level += 1\n            paren_level = len(stack)\n\
    \        elif c == '\\e':\n            level += 1\n            paren_level = len(stack)\n\
    \        elif c == '\\v':\n            level += 1\n            paren_level = len(stack)\n\
    \        elif c == '\\a':\n            level += 1\n            paren_level = len(stack)\n\
    \        elif c == '\\e':\n            level += 1\n            paren_level = len(stack)\n\
    \        elif c == '\\v':\n            level += 1\n            paren_level = len(stack)\n\
    \        elif c == '\\a':\n            level += 1\n            paren_level = len(stack)\n\
    \        elif c == '\\e':\n            level += 1\n            paren_level = len(stack)\n\
    \        elif c == '\\v':\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcwxutxus.py\"\
    , line 93\n    def check(candidate):\nIndentationError: expected an indented block\
    \ after 'elif' statement on line 92\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_stack\
    \ = []\n    paren_level = 0\n    paren_levels = []\n    paren_levels.append(0)\n\
    \    paren_levels.append(0)\n    paren_levels.append(0)\n    for index, char in\
    \ enumerate(paren_string):\n        if char == '(':\n            paren_stack.append(index)\n\
    \            paren_level += 1\n            paren_levels.append(paren_level)\n\
    \        elif char == ')':\n            paren_level -= 1\n            paren_levels.append(paren_level)\n\
    \        elif char == ' ':\n            if paren_level == 0:\n               \
    \ paren_levels.append(0)\n            else:\n                paren_levels[paren_stack.pop()]\
    \ += 1\n    return paren_levels\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuw_87cgx.py\"\
    , line 38, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuw_87cgx.py\"\
    , line 36, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuw_87cgx.py\"\
    , line 31, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_stack\
    \ = []\n    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())')\
    \ == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3,\
    \ 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n   \
    \ check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv36hckbo.py\"\
    , line 91, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv36hckbo.py\"\
    , line 89, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv36hckbo.py\"\
    , line 84, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv36hckbo.py\"\
    , line 82, in parse_nested_parens\n    paren\nNameError: name 'paren' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    stack =\
    \ []\n    level = 0\n    paren_level = 0\n    for c in paren_string:\n       \
    \ if c == '(':\n            paren_level += 1\n            stack.append(c)\n  \
    \      elif c == ')':\n            paren_level -= 1\n            stack.pop()\n\
    \        elif c == ' ':\n            if paren_level == 0:\n                stack.append(c)\n\
    \            else:\n                level += 1\n                stack.append(c)\n\
    \        else:\n            stack.append(c)\n    return stack\n\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpagcm2l1k.py\"\
    , line 37, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpagcm2l1k.py\"\
    , line 35, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpagcm2l1k.py\"\
    , line 30, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_stack\
    \ = []\n    level = 0\n    paren_level = 0\n    paren_level_stack = []\n    paren_level_stack.append(level)\n\
    \    paren_level_stack.append(level)\n    for char in paren_string:\n        if\
    \ char == '(':\n            paren_stack.append(level)\n            paren_level_stack.append(level)\n\
    \            level += 1\n        elif char == ')':\n            paren_level_stack.pop()\n\
    \            level = paren_level_stack[-1]\n            paren_stack.pop()\n  \
    \      elif char == ' ':\n            level += 1\n        else:\n            level\
    \ -= 1\n    return paren_stack\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvq49q10z.py\"\
    , line 38, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvq49q10z.py\"\
    , line 36, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvq49q10z.py\"\
    , line 31, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_stack\
    \ = []\n    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())')\
    \ == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3,\
    \ 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n   \
    \ check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5tvyuwd6.py\"\
    , line 91, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5tvyuwd6.py\"\
    , line 89, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5tvyuwd6.py\"\
    , line 84, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5tvyuwd6.py\"\
    , line 82, in parse_nested_parens\n    paren\nNameError: name 'paren' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_level\
    \ = 0\n    paren_stack = []\n    paren_stack.append(paren_level)\n    paren_stack.append(paren_level)\n\
    \    paren_stack.append(paren_level)\n    paren_stack.append(paren_level)\n  \
    \  paren_stack.append(paren_level)\n    paren_stack.append(paren_level)\n    paren_stack.append(paren_level)\n\
    \    paren_stack.append(paren_level)\n    paren_stack.append(paren_level)\n  \
    \  paren_stack.append(paren_level)\n    paren_stack.append(paren_level)\n    paren_stack.append(paren_level)\n\
    \    paren_stack.append(paren_level)\n    paren_stack.append(paren_level)\n  \
    \  paren_stack.append(paren_level)\n    paren_stack.append(paren_level)\n    paren_stack.append(paren_level)\n\
    \    paren_stack.append(paren_level)\n    paren_stack.append(paren_level)\n  \
    \  paren_stack.append(paren_level)\n    paren_stack.append(paren_level)\n    paren_stack.append(paren_level)\n\
    \    paren_stack.append(paren_level)\n    paren_stack.append(paren_level)\n  \
    \  paren_stack.append(paren_level)\n    paren_stack.append(paren_level)\n    paren_stack.append(paren_level)\n\
    \    paren_stack.append(paren_level)\n    paren_stack.append(paren_level)\n  \
    \  paren_stack.append(paren_level)\n    paren_stack.append(paren_level)\n    paren_stack.append(paren_level)\n\
    \    paren_stack.append(paren_level)\n    paren_stack.append(paren_level)\n  \
    \  paren_stack.append(paren_level)\n    paren_stack.append(paren_level)\n    paren_stack.append(paren_level)\n\
    \    paren_stack.append(paren_level)\n    paren_stack.append(paren_level)\n  \
    \  paren_stack.append(paren_level)\n    paren_stack.append(paren_level)\n    paren_stack.append(paren_level)\n\
    \    paren_stack.append(paren_level)\n    paren_stack.append(paren_level)\n  \
    \  paren_stack.append(paren_level)\n    paren_stack.append(paren_level)\n    paren_stack.append(paren_level)\n\
    \    paren_stack.append(paren_level)\n    paren_stack.append(paren_level)\n  \
    \  paren_stack.append(paren_level)\n    paren_stack.append(paren_level)\n    paren_stack.append(paren_level)\n\
    \    paren_stack.append(paren_level)\n    paren_stack.append(paren_level)\n  \
    \  paren_stack.append(paren_level)\n    paren_stack.append(\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_o8hw4jv.py\"\
    , line 66\n    paren_stack.append(\n                      ^\nSyntaxError: '('\
    \ was never closed\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_stack\
    \ = []\n    level = 0\n    paren_level = 0\n    paren_char = ''\n    paren_chars\
    \ = []\n    for char in paren_string:\n        if char == '(':\n            paren_stack.append(paren_char)\n\
    \            paren_chars.append(char)\n            paren_level += 1\n        elif\
    \ char == ')':\n            paren_char = paren_stack.pop()\n            paren_chars.append(char)\n\
    \            paren_level -= 1\n        elif char == ' ':\n            if paren_level\
    \ == 0:\n                paren_chars.append(char)\n            else:\n       \
    \         paren_chars.append(char)\n                paren_char = ''\n        else:\n\
    \            paren_chars.append(char)\n    return paren_chars\n\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8y88duzd.py\"\
    , line 41, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8y88duzd.py\"\
    , line 39, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8y88duzd.py\"\
    , line 34, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_level\
    \ = 0\n    paren_stack = []\n    paren_stack.append(paren_string)\n    paren_level_string\
    \ = paren_string\n    paren_level_string = paren_level_string.strip()\n    paren_level_string\
    \ = paren_level_string.lstrip('(')\n    paren_level_string = paren_level_string.rstrip(')')\n\
    \    paren_level_string = paren_level_string.strip()\n    paren_level_string =\
    \ paren_level_string.lstrip('(')\n    paren_level_string = paren_level_string.rstrip(')')\n\
    \    paren_level_string = paren_level_string.strip()\n    paren_level_string =\
    \ paren_level_string.lstrip('(')\n    paren_level_string = paren_level_string.rstrip(')')\n\
    \    paren_level_string = paren_level_string.strip()\n    paren_level_string =\
    \ paren_level_string.lstrip('(')\n    paren_level_string = paren_level_string.rstrip(')')\n\
    \    paren_level_string = paren_level_string.strip()\n    paren_level_string =\
    \ paren_level_string.lstrip('(')\n    paren_level_string = paren_level_string.rstrip(')')\n\
    \    paren_level_string = paren_level_string.strip()\n    paren_level_string =\
    \ paren_level_string.lstrip('(')\n    paren_level_string = paren_level_string.rstrip(')')\n\
    \    paren_level_string = paren_level_string.strip()\n    paren_level_string =\
    \ paren_level_string.lstrip('(')\n    paren_level_string = paren_level_string.rstrip(')')\n\
    \    paren_level_string = paren_level_string.strip()\n    paren_level_string =\
    \ paren_level_string.lstrip('(')\n    paren_level_string = paren_level_string.rstrip(')')\n\
    \    paren_level_string = paren_level_string.strip()\n    paren_level_string =\
    \ paren_level_string.lstrip('(')\n    paren_level_string = paren_level_string.rstrip(')')\n\
    \    paren_level_string = paren_level_string.strip()\n    paren_level_string =\
    \ paren_level_string.lstrip('(')\n    paren_level_string = paren_level_string.rstrip(')')\n\
    \    paren_level_string = paren_level_string.strip()\n    paren_level_string =\
    \ paren_level_string.lstrip('(')\n    paren_level_string = paren_level_string.rstrip('\n\
    def check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') ==\
    \ [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n\
    \    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpen2wigr8.py\"\
    , line 45\n    paren_level_string = paren_level_string.rstrip('\n            \
    \                                       ^\nSyntaxError: unterminated string literal\
    \ (detected at line 45)\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_stack\
    \ = []\n    paren_level = 0\n    paren_levels = []\n    paren_levels_count = 0\n\
    \    paren_levels_count_list = []\n    paren_levels_count_list.append(0)\n   \
    \ paren_levels_count_list.append(0)\n    paren_levels_count_list.append(0)\n \
    \   paren_levels_count_list.append(0)\n    paren_levels_count_list.append(0)\n\
    \    paren_levels_count_list.append(0)\n    paren_levels_count_list.append(0)\n\
    \    paren_levels_count_list.append(0)\n    paren_levels_count_list.append(0)\n\
    \    paren_levels_count_list.append(0)\n    paren_levels_count_list.append(0)\n\
    \    paren_levels_count_list.append(0)\n    paren_levels_count_list.append(0)\n\
    \    paren_levels_count_list.append(0)\n    paren_levels_count_list.append(0)\n\
    \    paren_levels_count_list.append(0)\n    paren_levels_count_list.append(0)\n\
    \    paren_levels_count_list.append(0)\n    paren_levels_count_list.append(0)\n\
    \    paren_levels_count_list.append(0)\n    paren_levels_count_list.append(0)\n\
    \    paren_levels_count_list.append(0)\n    paren_levels_count_list.append(0)\n\
    \    paren_levels_count_list.append(0)\n    paren_levels_count_list.append(0)\n\
    \    paren_levels_count_list.append(0)\n    paren_levels_count_list.append(0)\n\
    \    paren_levels_count_list.append(0)\n    paren_levels_count_list.append(0)\n\
    \    paren_levels_count_list.append(0)\n    paren_levels_count_list.append(0)\n\
    \    paren_levels_count_list.append(0)\n    paren_levels_count_list.append(0)\n\
    \    paren_levels_count_list.append(0)\n    paren_levels_count_list.append(0)\n\
    \    paren_levels_count_list.append(0)\n    paren_levels_count_list.append(0)\n\
    \    paren_levels_count_list.append(0)\n    paren_levels_count_list.append(0)\n\
    \    paren_levels_count_list.append(0)\n    paren_levels_count_list.append(0)\n\
    \    paren_levels_count_list.append(0)\n    paren_levels_count_list.append(0)\n\
    \    paren_levels_count_list.append(0)\n    paren_levels_count_list.append(0)\n\
    \    paren_levels_count_list.append(0)\n    paren_levels_count_list.append(0)\n\
    \    paren_levels_count_list.append(0)\n    paren_levels_count_list.append(0)\n\
    \    paren_levels_count_list.append(0)\n    paren_levels_count_list.append(0)\n\
    \    paren_levels_count_list.append(0)\n    paren_levels_count_list.append(0)\n\
    \    paren\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())')\
    \ == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3,\
    \ 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n   \
    \ check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpj3aw53ql.py\"\
    , line 76, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpj3aw53ql.py\"\
    , line 74, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpj3aw53ql.py\"\
    , line 69, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpj3aw53ql.py\"\
    , line 67, in parse_nested_parens\n    paren\nNameError: name 'paren' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_level\
    \ = 0\n    paren_stack = []\n    paren_stack.append(paren_level)\n    paren_stack.append(paren_level)\n\
    \    paren_stack.append(paren_level)\n    paren_stack.append(paren_level)\n  \
    \  paren_stack.append(paren_level)\n    paren_stack.append(paren_level)\n    paren_stack.append(paren_level)\n\
    \    paren_stack.append(paren_level)\n    paren_stack.append(paren_level)\n  \
    \  paren_stack.append(paren_level)\n    paren_stack.append(paren_level)\n    paren_stack.append(paren_level)\n\
    \    paren_stack.append(paren_level)\n    paren_stack.append(paren_level)\n  \
    \  paren_stack.append(paren_level)\n    paren_stack.append(paren_level)\n    paren_stack.append(paren_level)\n\
    \    paren_stack.append(paren_level)\n    paren_stack.append(paren_level)\n  \
    \  paren_stack.append(paren_level)\n    paren_stack.append(paren_level)\n    paren_stack.append(paren_level)\n\
    \    paren_stack.append(paren_level)\n    paren_stack.append(paren_level)\n  \
    \  paren_stack.append(paren_level)\n    paren_stack.append(paren_level)\n    paren_stack.append(paren_level)\n\
    \    paren_stack.append(paren_level)\n    paren_stack.append(paren_level)\n  \
    \  paren_stack.append(paren_level)\n    paren_stack.append(paren_level)\n    paren_stack.append(paren_level)\n\
    \    paren_stack.append(paren_level)\n    paren_stack.append(paren_level)\n  \
    \  paren_stack.append(paren_level)\n    paren_stack.append(paren_level)\n    paren_stack.append(paren_level)\n\
    \    paren_stack.append(paren_level)\n    paren_stack.append(paren_level)\n  \
    \  paren_stack.append(paren_level)\n    paren_stack.append(paren_level)\n    paren_stack.append(paren_level)\n\
    \    paren_stack.append(paren_level)\n    paren_stack.append(paren_level)\n  \
    \  paren_stack.append(paren_level)\n    paren_stack.append(paren_level)\n    paren_stack.append(paren_level)\n\
    \    paren_stack.append(paren_level)\n    paren_stack.append(paren_level)\n  \
    \  paren_stack.append(paren_level)\n    paren_stack.append(paren_level)\n    paren_stack.append(paren_level)\n\
    \    paren_stack.append(paren_level)\n    paren_stack.append(paren_level)\n  \
    \  paren_stack.append(paren_level)\n    paren_stack.append(\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjxx1obo3.py\"\
    , line 66\n    paren_stack.append(\n                      ^\nSyntaxError: '('\
    \ was never closed\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_stack\
    \ = []\n    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())')\
    \ == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3,\
    \ 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n   \
    \ check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphiv7e4pj.py\"\
    , line 91, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphiv7e4pj.py\"\
    , line 89, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphiv7e4pj.py\"\
    , line 84, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphiv7e4pj.py\"\
    , line 82, in parse_nested_parens\n    paren\nNameError: name 'paren' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_level\
    \ = 0\n    paren_levels = []\n    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprev81x43.py\"\
    , line 66\n    paren_levels.append(\n                       ^\nSyntaxError: '('\
    \ was never closed\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_level\
    \ = 0\n    paren_levels = []\n    paren_levels_stack = []\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren\n\
    def check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') ==\
    \ [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n\
    \    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp84dp7g1d.py\"\
    , line 56\n    paren_levels_stack.append(paren\n                             ^\n\
    SyntaxError: '(' was never closed\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_stack\
    \ = []\n    paren_stack.append(0)\n    paren_level = 0\n    paren_level_count\
    \ = 0\n    paren_level_max_count = 0\n    paren_level_max_count_index = 0\n  \
    \  paren_level_max_count_index = 0\n    paren_level_max_count_index = 0\n    paren_level_max_count_index\
    \ = 0\n    paren_level_max_count_index = 0\n    paren_level_max_count_index =\
    \ 0\n    paren_level_max_count_index = 0\n    paren_level_max_count_index = 0\n\
    \    paren_level_max_count_index = 0\n    paren_level_max_count_index = 0\n  \
    \  paren_level_max_count_index = 0\n    paren_level_max_count_index = 0\n    paren_level_max_count_index\
    \ = 0\n    paren_level_max_count_index = 0\n    paren_level_max_count_index =\
    \ 0\n    paren_level_max_count_index = 0\n    paren_level_max_count_index = 0\n\
    \    paren_level_max_count_index = 0\n    paren_level_max_count_index = 0\n  \
    \  paren_level_max_count_index = 0\n    paren_level_max_count_index = 0\n    paren_level_max_count_index\
    \ = 0\n    paren_level_max_count_index = 0\n    paren_level_max_count_index =\
    \ 0\n    paren_level_max_count_index = 0\n    paren_level_max_count_index = 0\n\
    \    paren_level_max_count_index = 0\n    paren_level_max_count_index = 0\n  \
    \  paren_level_max_count_index = 0\n    paren_level_max_count_index = 0\n    paren_level_max_count_index\
    \ = 0\n    paren_level_max_count_index = 0\n    paren_level_max_count_index =\
    \ 0\n    paren_level_max_count_index = 0\n    paren_level_max_count_index = 0\n\
    \    paren_level_max_count_index = 0\n    paren_level_max_count_index = 0\n  \
    \  paren_level_max_count_index = 0\n    paren_level_max_count_index = 0\n    paren_level_max_count_index\
    \ = 0\n    paren_level_max_count_index = 0\n    paren_level_max_count_index =\
    \ 0\n    paren_level_max_count_index = 0\n    paren_level_max_count_index = 0\n\
    \    paren_level_max_count_index = 0\n    paren_level_max_count_index = 0\n  \
    \  paren_level_max_count_index = 0\n    paren_level_max_count_index = 0\n    paren_level_max_count_index\
    \ = 0\n    paren_level_max_count_index = 0\n    paren_level_max_count_index =\
    \ 0\n    paren_level_max_count_index = 0\n    paren_level_max_count_index = 0\n\
    \    paren\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())')\
    \ == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3,\
    \ 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n   \
    \ check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe35918lj.py\"\
    , line 76, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe35918lj.py\"\
    , line 74, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe35918lj.py\"\
    , line 69, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe35918lj.py\"\
    , line 67, in parse_nested_parens\n    paren\nNameError: name 'paren' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_stack\
    \ = []\n    level = 0\n    paren_level = 0\n    paren_level_stack = []\n    paren_level_stack.append(0)\n\
    \    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n\
    \    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n\
    \    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n\
    \    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n\
    \    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n\
    \    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n\
    \    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n\
    \    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n\
    \    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n\
    \    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n\
    \    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n\
    \    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n\
    \    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n\
    \    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n\
    \    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n\
    \    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n\
    \    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n\
    \    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n\
    \    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n\
    \    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n\
    \    \ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())')\
    \ == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3,\
    \ 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n   \
    \ check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpi9oqs5my.py\"\
    , line 83, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpi9oqs5my.py\"\
    , line 81, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpi9oqs5my.py\"\
    , line 76, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_stack\
    \ = []\n    paren_level = 0\n    paren_levels = []\n    paren_levels.append(paren_level)\n\
    \    paren_stack.append(paren_level)\n    paren_levels.append(paren_level)\n \
    \   for paren in paren_string:\n        if paren == '(':\n            paren_level\
    \ += 1\n            paren_levels.append(paren_level)\n            paren_stack.append(paren_level)\n\
    \        elif paren == ')':\n            paren_level -= 1\n            paren_levels.append(paren_level)\n\
    \            paren_stack.append(paren_level)\n        elif paren == ',':\n   \
    \         paren_levels[paren_stack.pop()] = paren_level\n    return paren_levels\n\
    \ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') ==\
    \ [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n\
    \    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps1z00ya_.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps1z00ya_.py\"\
    , line 34, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps1z00ya_.py\"\
    , line 29, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_level\
    \ = 0\n    paren_levels = []\n    paren_levels_string = \"\"\n    paren_levels_strings\
    \ = []\n    paren_levels_strings_reversed = []\n    paren_levels_strings_reversed_string\
    \ = \"\"\n    paren_levels_strings_reversed_strings = []\n    paren_levels_strings_reversed_strings_reversed\
    \ = []\n    paren_levels_strings_reversed_strings_reversed_string = \"\"\n   \
    \ paren_levels_strings_reversed_strings_reversed_strings = []\n    paren_levels_strings_reversed_strings_reversed_strings_reversed\
    \ = []\n    paren_levels_strings_reversed_strings_reversed_strings_reversed_string\
    \ = \"\"\n    paren_levels_strings_reversed_strings_reversed_strings_reversed_strings\
    \ = []\n    paren_levels_strings_reversed_strings_reversed_strings_reversed_strings_reversed\
    \ = []\n    paren_levels_strings_reversed_strings_reversed_strings_reversed_strings_reversed_string\
    \ = \"\"\n    paren_levels_strings_reversed_strings_reversed_strings_reversed_strings_reversed_strings\
    \ = []\n    paren_levels_strings_reversed_strings_reversed_strings_reversed_strings_reversed_strings_reversed\
    \ = []\n    paren_levels_strings_reversed_strings_reversed_strings_reversed_strings_reversed_strings_reversed_string\
    \ = \"\"\n    paren_levels_strings_reversed_strings_reversed_strings_reversed_strings_reversed_strings_reversed_strings\
    \ = []\n    paren_levels_strings_reversed_strings_reversed_strings_reversed_strings_reversed_strings_reversed_strings_reversed\
    \ = []\n    paren_levels_strings_reversed_strings_reversed_strings_reversed_strings_reversed_strings_reversed_strings_reversed_string\
    \ = \"\"\n    paren_levels_strings_reversed_strings_reversed_strings_reversed_strings_reversed_strings_reversed_strings_reversed_strings\
    \ = []\n    paren_levels_strings_reversed_strings_reversed_strings_reversed_strings_reversed_strings_reversed_strings_reversed_strings_reversed\
    \ = []\n    paren_levels_strings_reversed_strings_reversed_strings_reversed_strings_reversed_strings_reversed_strings_reversed_strings_reversed_string\
    \ = \"\"\n    paren_levels_strings_reversed_strings_reversed_strings_reversed_strings_reversed_strings_reversed_strings_reversed_string\n\
    def check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') ==\
    \ [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n\
    \    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpklngqzqu.py\"\
    , line 42, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpklngqzqu.py\"\
    , line 40, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpklngqzqu.py\"\
    , line 35, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    level =\
    \ 0\n    paren_stack = []\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5w79fn5k.py\"\
    , line 82\n    paren_stack.append(\n                      ^\nSyntaxError: '('\
    \ was never closed\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    stack =\
    \ []\n    level = 0\n    paren_level = 0\n    paren_levels = []\n    for char\
    \ in paren_string:\n        if char == '(':\n            paren_level += 1\n  \
    \          paren_levels.append(paren_level)\n            stack.append(char)\n\
    \        elif char == ')':\n            paren_level -= 1\n            paren_levels.append(paren_level)\n\
    \            stack.pop()\n        elif char == ' ':\n            level += 1\n\
    \            paren_levels.append(level)\n        elif char == '\\n':\n       \
    \     level -= 1\n            paren_levels.append(level)\n        elif char ==\
    \ '\\t':\n            level -= 1\n            paren_levels.append(level)\n   \
    \     elif char == '\\r':\n            level -= 1\n            paren_levels.append(level)\n\
    \        elif char == '\\v':\n            level -= 1\n            paren_levels.append(level)\n\
    \        elif char == '\\f':\n            level -= 1\n            paren_levels.append(level)\n\
    \        elif char == '\\a':\n            level -= 1\n            paren_levels.append(level)\n\
    \        elif char == '\\e':\n            level -= 1\n            paren_levels.append(level)\n\
    \        elif char == '\\v':\n            level -= 1\n            paren_levels.append(level)\n\
    \        elif char == '\\0':\n            level -= 1\n            paren_levels.append(level)\n\
    \        elif char == '\\0':\n            level -= 1\n            paren_levels.append(level)\n\
    \        elif char == '\\0':\n            level -= 1\n            paren_levels.append(level)\n\
    \        elif char == '\\0':\n            level -= 1\n            paren_levels.append(level)\n\
    \        elif char == '\\0':\n            level -= 1\n            paren_levels.append(level)\n\
    \        elif char == '\\0':\n            level -= 1\n            paren_levels.append(level)\n\
    \        elif char == '\\0':\n            level -= 1\n            paren_levels.append(level)\n\
    \        elif char == '\\0':\n            level -= 1\n            paren_levels.append(level)\n\
    \        elif char == '\\0':\n            level -= 1\n            paren_levels.append(level)\n\
    \        elif char == '\\0':\n            level -= 1\n            paren_levels.append(level)\n\
    \        elif char == '\\0':\n            level -= 1\n            paren_levels.append(level)\n\
    \        elif char == '\\0':\n            level -= 1\n            paren_levels.append(level)\n\
    \        elif char == '\\0':\n            level -= 1\n            paren_levels.append(level)\n\
    \        elif char == '\\0':\n            level -= 1\n            paren_levels.append(level)\n\
    \        elif char == '\\0':\n            level -= 1\n            paren_levels.append(level)\n\
    \        elif char == '\\0':\n            level -= 1\n            paren_levels.append(level)\n\
    \        elif char == '\\0':\n            \ndef check(candidate):\n    assert\
    \ candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('()\
    \ (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplw0b9a0l.py\"\
    , line 99\n    def check(candidate):\nIndentationError: expected an indented block\
    \ after 'elif' statement on line 97\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_level\
    \ = 0\n    paren_levels = []\n    paren_levels_string = \"\"\n    paren_levels_strings\
    \ = []\n    paren_levels_strings.append(paren_levels_string)\n    paren_levels_strings.append(paren_levels_string)\n\
    \    paren_levels_strings.append(paren_levels_string)\n    paren_levels_strings.append(paren_levels_string)\n\
    \    paren_levels_strings.append(paren_levels_string)\n    paren_levels_strings.append(paren_levels_string)\n\
    \    paren_levels_strings.append(paren_levels_string)\n    paren_levels_strings.append(paren_levels_string)\n\
    \    paren_levels_strings.append(paren_levels_string)\n    paren_levels_strings.append(paren_levels_string)\n\
    \    paren_levels_strings.append(paren_levels_string)\n    paren_levels_strings.append(paren_levels_string)\n\
    \    paren_levels_strings.append(paren_levels_string)\n    paren_levels_strings.append(paren_levels_string)\n\
    \    paren_levels_strings.append(paren_levels_string)\n    paren_levels_strings.append(paren_levels_string)\n\
    \    paren_levels_strings.append(paren_levels_string)\n    paren_levels_strings.append(paren_levels_string)\n\
    \    paren_levels_strings.append(paren_levels_string)\n    paren_levels_strings.append(paren_levels_string)\n\
    \    paren_levels_strings.append(paren_levels_string)\n    paren_levels_strings.append(paren_levels_string)\n\
    \    paren_levels_strings.append(paren_levels_string)\n    paren_levels_strings.append(paren_levels_string)\n\
    \    paren_levels_strings.append(paren_levels_string)\n    paren_levels_strings.append(paren_levels_string)\n\
    \    paren_levels_strings.append(paren_levels_string)\n    paren_levels_strings.append(paren_levels_string)\n\
    \    paren_levels_strings.append(paren_levels_string)\n    paren_levels_strings.append(paren_levels_string)\n\
    \    paren_levels_strings.append(paren_levels_string)\n    paren_levels_strings.append(paren_levels_string)\n\
    \    paren_levels_strings.append(paren_levels_string)\n    paren_levels_strings.append(paren_levels_string)\n\
    \    paren_levels_strings.append(paren_levels_string)\n    paren_levels_strings.append(paren_levels_string)\n\
    \    paren_levels_strings.append(paren_levels_string)\n    paren_\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphtef467d.py\"\
    , line 59, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphtef467d.py\"\
    , line 57, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphtef467d.py\"\
    , line 52, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphtef467d.py\"\
    , line 50, in parse_nested_parens\n    paren_\nNameError: name 'paren_' is not\
    \ defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_level\
    \ = 0\n    paren_levels = []\n    paren_levels_stack = []\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren\n\
    def check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') ==\
    \ [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n\
    \    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqn5x61cl.py\"\
    , line 56\n    paren_levels_stack.append(paren\n                             ^\n\
    SyntaxError: '(' was never closed\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    stack =\
    \ []\n    level = 0\n    for c in paren_string:\n        if c == '(':\n      \
    \      stack.append(level)\n            level += 1\n        elif c == ')':\n \
    \           level -= 1\n            stack.pop()\n    return stack\n\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgs4d1sn3.py\"\
    , line 28, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgs4d1sn3.py\"\
    , line 26, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgs4d1sn3.py\"\
    , line 21, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_stack\
    \ = []\n    level = 0\n    paren_level = 0\n    paren_levels = []\n    paren_levels.append(level)\n\
    \    paren_stack.append(paren_level)\n    paren_levels.append(level)\n    paren_stack.append(paren_level)\n\
    \    paren_levels.append(level)\n    paren_stack.append(paren_level)\n    paren_levels.append(level)\n\
    \    paren_stack.append(paren_level)\n    paren_levels.append(level)\n    paren_stack.append(paren_level)\n\
    \    paren_levels.append(level)\n    paren_stack.append(paren_level)\n    paren_levels.append(level)\n\
    \    paren_stack.append(paren_level)\n    paren_levels.append(level)\n    paren_stack.append(paren_level)\n\
    \    paren_levels.append(level)\n    paren_stack.append(paren_level)\n    paren_levels.append(level)\n\
    \    paren_stack.append(paren_level)\n    paren_levels.append(level)\n    paren_stack.append(paren_level)\n\
    \    paren_levels.append(level)\n    paren_stack.append(paren_level)\n    paren_levels.append(level)\n\
    \    paren_stack.append(paren_level)\n    paren_levels.append(level)\n    paren_stack.append(paren_level)\n\
    \    paren_levels.append(level)\n    paren_stack.append(paren_level)\n    paren_levels.append(level)\n\
    \    paren_stack.append(paren_level)\n    paren_levels.append(level)\n    paren_stack.append(paren_level)\n\
    \    paren_levels.append(level)\n    paren_stack.append(paren_level)\n    paren_levels.append(level)\n\
    \    paren_stack.append(paren_level)\n    paren_levels.append(level)\n    paren_stack.append(paren_level)\n\
    \    paren_levels.append(level)\n    paren_stack.append(paren_level)\n    paren_levels.append(level)\n\
    \    paren_stack.append(paren_level)\n    paren_levels.append(level)\n    paren_stack.append(paren_level)\n\
    \    paren_levels.append(level)\n    paren_stack.append(paren_level)\n    paren_levels.append(level)\n\
    \    paren_stack.append(paren_level)\n    paren_levels.append(level)\n    paren_stack.append(paren_level)\n\
    \    paren_levels.append(level)\n    paren_stack.append(paren_level)\n    paren_levels.append(level)\n\
    \    paren_stack.append(paren_level)\n    paren_levels.append(level)\n    paren_stack.append(paren_level)\n\
    \    paren_levels.append(level)\n    paren_stack.append(paren_level)\n    paren_levels.append(level)\n\
    \    paren_\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())')\
    \ == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3,\
    \ 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n   \
    \ check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7j3day5i.py\"\
    , line 83, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7j3day5i.py\"\
    , line 81, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7j3day5i.py\"\
    , line 76, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7j3day5i.py\"\
    , line 74, in parse_nested_parens\n    paren_\nNameError: name 'paren_' is not\
    \ defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_stack\
    \ = []\n    paren_level = 0\n    paren_nesting = 0\n    paren_levels = []\n  \
    \  paren_nestings = []\n    for c in paren_string:\n        if c == '(':\n   \
    \         paren_stack.append(c)\n            paren_nesting += 1\n        elif\
    \ c == ')':\n            paren_nesting -= 1\n            paren_stack.pop()\n \
    \           if paren_nesting == 0:\n                paren_levels.append(paren_level)\n\
    \                paren_nestings.append(paren_nesting)\n        elif c == ' ':\n\
    \            paren_level += 1\n        else:\n            paren_level = 0\n  \
    \          paren_nesting = 0\n    return paren_levels\n\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpobidq2oj.py\"\
    , line 39, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpobidq2oj.py\"\
    , line 37, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpobidq2oj.py\"\
    , line 32, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_stack\
    \ = []\n    paren_level = 0\n    paren_levels = []\n    for char in paren_string:\n\
    \        if char == '(':\n            paren_stack.append(paren_level)\n      \
    \      paren_level += 1\n        elif char == ')':\n            paren_level -=\
    \ 1\n            paren_levels.append(paren_level)\n        elif char == ' ':\n\
    \            if paren_stack:\n                paren_levels.append(paren_stack[-1])\n\
    \    return paren_levels\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7n_z3f0e.py\"\
    , line 33, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7n_z3f0e.py\"\
    , line 31, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7n_z3f0e.py\"\
    , line 26, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_level\
    \ = 0\n    paren_stack = []\n    paren_levels = []\n    paren_levels_str = \"\"\
    \n    for char in paren_string:\n        if char == \"(\":\n            paren_stack.append(paren_level)\n\
    \            paren_level += 1\n        elif char == \")\":\n            paren_level\
    \ -= 1\n            paren_levels.append(paren_level)\n            paren_levels_str\
    \ += str(paren_level)\n        elif char == \" \":\n            paren_levels_str\
    \ += \" \"\n    \n    paren_levels_str = paren_levels_str.strip()\n    \n    return\
    \ paren_levels\n\ndef check(candidate):\n    assert candidate('(()()) ((())) ()\
    \ ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3zm360ol.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3zm360ol.py\"\
    , line 34, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3zm360ol.py\"\
    , line 29, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_stack\
    \ = []\n    level = 0\n    paren_level = 0\n    paren_nesting = 0\n    paren_nesting_level\
    \ = 0\n    paren_nesting_nesting = 0\n    paren_nesting_nesting_level = 0\n  \
    \  paren_nesting_nesting_nesting = 0\n    paren_nesting_nesting_nesting_level\
    \ = 0\n    paren_nesting_nesting_nesting_nesting = 0\n    paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n    paren_nesting_nesting_nesting_nesting_nesting = 0\n    paren_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0\n    paren_nesting_nesting_nesting_nesting_nesting_level = 0\n    paren_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0\n    paren_nesting_nesting_nesting_nesting_nesting_level = 0\n    paren_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0\n    paren_nesting_nesting_nesting_nesting_nesting_level = 0\n    paren_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0\n    paren_nesting_nesting_nesting_nesting_nesting_level = 0\n    paren_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0\n    paren_nesting_nesting_nesting_nesting_nesting_level = 0\n    paren_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0\n    paren_nesting_nesting_nesting_nesting_level = 0\n    paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n    paren_nesting_nesting_nesting_nesting_level = 0\n    paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n    paren_nesting_nesting_nesting_nesting_level = 0\n    paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n    paren_nesting_nesting_nesting_nesting_level = 0\n    paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n    paren_nesting_nesting_nesting_nesting_level = 0\n    paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n    paren_nesting_nesting_nesting_nesting_level = 0\n    paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n    paren_nesting_nesting_nesting_nesting_level = 0\n    paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n    paren_nesting_nesting_nesting_nesting_level = 0\n    paren_nesting_nesting_nesting_nesting_\n\
    def check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') ==\
    \ [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n\
    \    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjk1avh4h.py\"\
    , line 56, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjk1avh4h.py\"\
    , line 54, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjk1avh4h.py\"\
    , line 49, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjk1avh4h.py\"\
    , line 47, in parse_nested_parens\n    paren_nesting_nesting_nesting_nesting_\n\
    NameError: name 'paren_nesting_nesting_nesting_nesting_' is not defined. Did you\
    \ mean: 'paren_nesting_nesting_nesting_nesting'?\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_stack\
    \ = []\n    paren_level = 0\n    paren_nesting = 0\n    paren_levels = []\n  \
    \  paren_nestings = []\n    for char in paren_string:\n        if char == '(':\n\
    \            paren_stack.append(paren_level)\n            paren_level += 1\n \
    \           paren_nesting += 1\n        elif char == ')':\n            paren_nesting\
    \ -= 1\n            paren_level -= 1\n            if paren_nesting == 0:\n   \
    \             paren_levels.append(paren_level)\n                paren_nestings.append(paren_nesting)\n\
    \        elif char == ' ':\n            if paren_nesting == 0:\n             \
    \   paren_levels.append(paren_level)\n                paren_nestings.append(paren_nesting)\n\
    \        elif char == '\\n':\n            if paren_nesting == 0:\n           \
    \     paren_levels.append(paren_level)\n                paren_nestings.append(paren_nesting)\n\
    \        else:\n            paren_nesting += 1\n            paren_level += 1\n\
    \    return paren_levels\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9lnq4v99.py\"\
    , line 46, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9lnq4v99.py\"\
    , line 44, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9lnq4v99.py\"\
    , line 39, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_stack\
    \ = []\n    paren_level = 0\n    paren_nesting_level = 0\n    paren_nesting_level_stack\
    \ = []\n    paren_nesting_level_stack.append(paren_nesting_level)\n    for char\
    \ in paren_string:\n        if char == '(':\n            paren_stack.append(char)\n\
    \            paren_level += 1\n            paren_nesting_level_stack.append(paren_nesting_level)\n\
    \        elif char == ')':\n            paren_nesting_level = paren_nesting_level_stack.pop()\n\
    \            paren_stack.pop()\n            paren_level += 1\n        elif char\
    \ == ' ':\n            paren_nesting_level += 1\n        elif char == ',':\n \
    \           paren_nesting_level += 1\n            paren_nesting_level_stack.append(paren_nesting_level)\n\
    \        elif char == '[':\n            paren_nesting_level += 1\n           \
    \ paren_nesting_level_stack.append(paren_nesting_level)\n        elif char ==\
    \ ']':\n            paren_nesting_level = paren_nesting_level_stack.pop()\n  \
    \          paren_stack.pop()\n            paren_level += 1\n        elif char\
    \ == '{':\n            paren_nesting_level += 1\n            paren_nesting_level_stack.append(paren_nesting_level)\n\
    \        elif char == '}':\n            paren_nesting_level = paren_nesting_level_stack.pop()\n\
    \            paren_stack.pop()\n            paren_level += 1\n    return paren_stack\n\
    \ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') ==\
    \ [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n\
    \    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt68d7g80.py\"\
    , line 52, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt68d7g80.py\"\
    , line 50, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt68d7g80.py\"\
    , line 45, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_stack\
    \ = []\n    paren_level = 0\n    paren_level_stack = []\n    paren_level_stack.append(0)\n\
    \    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n\
    \    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n\
    \    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n\
    \    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n\
    \    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n\
    \    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n\
    \    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n\
    \    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n\
    \    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n\
    \    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n\
    \    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n\
    \    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n\
    \    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n\
    \    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n\
    \    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n\
    \    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n\
    \    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n\
    \    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n\
    \    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n\
    \    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n\
    \    paren_level_stack\ndef check(candidate):\n    assert candidate('(()()) ((()))\
    \ () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnie2itzy.py\"\
    , line 82, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnie2itzy.py\"\
    , line 80, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnie2itzy.py\"\
    , line 75, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    stack =\
    \ []\n    level = 0\n    paren_level = 0\n    paren_level_stack = []\n    for\
    \ c in paren_string:\n        if c == '(':\n            paren_level_stack.append(level)\n\
    \            level += 1\n        elif c == ')':\n            level = paren_level_stack.pop()\n\
    \        elif c == '[':\n            level += 1\n        elif c == ']':\n    \
    \        level -= 1\n        paren_level += level\n        paren_level_stack.append(level)\n\
    \    return paren_level_stack\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4zgyj8i8.py\"\
    , line 35, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4zgyj8i8.py\"\
    , line 33, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4zgyj8i8.py\"\
    , line 28, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_level\
    \ = 0\n    paren_levels = []\n    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpalsjkzo0.py\"\
    , line 66\n    paren_levels.append(\n                       ^\nSyntaxError: '('\
    \ was never closed\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_level\
    \ = 0\n    paren_levels = []\n    paren_levels_stack = []\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren\n\
    def check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') ==\
    \ [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n\
    \    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdhc8w4wa.py\"\
    , line 56\n    paren_levels_stack.append(paren\n                             ^\n\
    SyntaxError: '(' was never closed\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_level\
    \ = 0\n    paren_stack = []\n    paren_stack.append(paren_string)\n    paren_level_string\
    \ = paren_string\n    paren_level_string = paren_level_string.replace('(','')\n\
    \    paren_level_string = paren_level_string.replace(')','')\n    paren_level_string\
    \ = paren_level_string.replace(' ','')\n    paren_level_string = paren_level_string.replace(',','')\n\
    \    paren_level_string = paren_level_string.replace(')','')\n    paren_level_string\
    \ = paren_level_string.replace('(','')\n    paren_level_string = paren_level_string.replace('\
    \ ','')\n    paren_level_string = paren_level_string.replace(',','')\n    paren_level_string\
    \ = paren_level_string.replace(')','')\n    paren_level_string = paren_level_string.replace('(','')\n\
    \    paren_level_string = paren_level_string.replace(' ','')\n    paren_level_string\
    \ = paren_level_string.replace(',','')\n    paren_level_string = paren_level_string.replace(')','')\n\
    \    paren_level_string = paren_level_string.replace('(','')\n    paren_level_string\
    \ = paren_level_string.replace(' ','')\n    paren_level_string = paren_level_string.replace(',','')\n\
    \    paren_level_string = paren_level_string.replace(')','')\n    paren_level_string\
    \ = paren_level_string.replace('(','')\n    paren_level_string = paren_level_string.replace('\
    \ ','')\n    paren_level_string = paren_level_string.replace(',','')\n    paren_level_string\
    \ = paren_level_string.replace(')','')\n    paren_level_string = paren_level_string.replace('(','')\n\
    \    paren_level_string = paren_level_string.replace(' ','')\n    paren_level_string\
    \ = paren_level_string.replace(',','')\n    paren_level_string = paren_level_string.replace(')','')\n\
    \    paren_level_string = paren_level_string.replace('(','')\n    paren_level_string\
    \ = paren_level_string.replace(' ','')\n    paren_level_string = paren_level_string.replace(',','')\n\
    \    paren_level_string = paren_level_string.replace(')','')\n    paren_level_string\
    \ = paren_level_string.replace('(','')\n    paren_level_string = paren_level_string.replace('\
    \ ','')\n    paren_level_string = paren_level_string.replace(',','')\n    paren\n\
    def check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') ==\
    \ [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n\
    \    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxow5l8w4.py\"\
    , line 54, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxow5l8w4.py\"\
    , line 52, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxow5l8w4.py\"\
    , line 47, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxow5l8w4.py\"\
    , line 45, in parse_nested_parens\n    paren\nNameError: name 'paren' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    stack =\
    \ []\n    level = 0\n    paren_level = 0\n    paren_levels = []\n    paren_levels_count\
    \ = 0\n    paren_levels_sum = 0\n    paren_levels_sums = []\n    paren_levels_sums_count\
    \ = 0\n    paren_levels_sums_sum = 0\n    paren_levels_sums_sums = []\n    paren_levels_sums_sums_count\
    \ = 0\n    paren_levels_sums_sums_sum = 0\n    paren_levels_sums_sums_sums = []\n\
    \    paren_levels_sums_sums_sums_count = 0\n    paren_levels_sums_sums_sums_sum\
    \ = 0\n    paren_levels_sums_sums_sums_sums = []\n    paren_levels_sums_sums_sums_sums_count\
    \ = 0\n    paren_levels_sums_sums_sums_sums_sum = 0\n    paren_levels_sums_sums_sums_sums_sums\
    \ = []\n    paren_levels_sums_sums_sums_sums_sums_count = 0\n    paren_levels_sums_sums_sums_sums_sums_sum\
    \ = 0\n    paren_levels_sums_sums_sums_sums_sums_sums = []\n    paren_levels_sums_sums_sums_sums_sums_sums_count\
    \ = 0\n    paren_levels_sums_sums_sums_sums_sums_sums_sum = 0\n    paren_levels_sums_sums_sums_sums_sums_sums_sums\
    \ = []\n    paren_levels_sums_sums_sums_sums_sums_sums_sums_count = 0\n    paren_levels_sums_sums_sums_sums_sums_sums_sums_sum\
    \ = 0\n    paren_levels_sums_sums_sums_sums_sums_sums_sums_sums = []\n    paren_levels_sums_sums_sums_sums_sums_sums_sums_sums_count\
    \ = 0\n    paren_levels_sums_sums_sums_sums_sums_sums_sums_sums_sum = 0\n    paren_levels_sums_sums_sums_sums_sums_sums_sums_sums_sums\
    \ = []\n    paren_levels_sums_sums_sums_sums_sums_sums_sums_sums_sums_count =\
    \ 0\n    paren_levels_sums_sums_sums_sums_sums_sums_sums_sums_sums_sum = 0\n \
    \   paren_levels_sums_sums_sums_sums_sums_sums_sum\ndef check(candidate):\n  \
    \  assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpei_evfyp.py\"\
    , line 51, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpei_evfyp.py\"\
    , line 49, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpei_evfyp.py\"\
    , line 44, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_stack\
    \ = []\n    paren_level = 0\n    paren_levels = []\n    paren_levels_index = []\n\
    \    paren_levels_index.append(0)\n    paren_levels_index.append(0)\n    paren_levels_index.append(0)\n\
    \    paren_levels_index.append(0)\n    paren_levels_index.append(0)\n    paren_levels_index.append(0)\n\
    \    paren_levels_index.append(0)\n    paren_levels_index.append(0)\n    paren_levels_index.append(0)\n\
    \    paren_levels_index.append(0)\n    paren_levels_index.append(0)\n    paren_levels_index.append(0)\n\
    \    paren_levels_index.append(0)\n    paren_levels_index.append(0)\n    paren_levels_index.append(0)\n\
    \    paren_levels_index.append(0)\n    paren_levels_index.append(0)\n    paren_levels_index.append(0)\n\
    \    paren_levels_index.append(0)\n    paren_levels_index.append(0)\n    paren_levels_index.append(0)\n\
    \    paren_levels_index.append(0)\n    paren_levels_index.append(0)\n    paren_levels_index.append(0)\n\
    \    paren_levels_index.append(0)\n    paren_levels_index.append(0)\n    paren_levels_index.append(0)\n\
    \    paren_levels_index.append(0)\n    paren_levels_index.append(0)\n    paren_levels_index.append(0)\n\
    \    paren_levels_index.append(0)\n    paren_levels_index.append(0)\n    paren_levels_index.append(0)\n\
    \    paren_levels_index.append(0)\n    paren_levels_index.append(0)\n    paren_levels_index.append(0)\n\
    \    paren_levels_index.append(0)\n    paren_levels_index.append(0)\n    paren_levels_index.append(0)\n\
    \    paren_levels_index.append(0)\n    paren_levels_index.append(0)\n    paren_levels_index.append(0)\n\
    \    paren_levels_index.append(0)\n    paren_levels_index.append(0)\n    paren_levels_index.append(0)\n\
    \    paren_levels_index.append(0)\n    paren_levels_index.append(0)\n    paren_levels_index.append(0)\n\
    \    paren_levels_index.append(0)\n    paren_levels_index.append(0)\n    paren_levels_index.append(0)\n\
    \    paren_levels_index.append(0)\n    paren_levels_index.append(0)\n    paren_levels_index.append(0)\n\
    \ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') ==\
    \ [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n\
    \    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp44yzx4v_.py\"\
    , line 76, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp44yzx4v_.py\"\
    , line 74, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp44yzx4v_.py\"\
    , line 69, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_stack\
    \ = []\n    level = 0\n    paren_level = 0\n    paren_level_stack = []\n    paren_level_stack.append(level)\n\
    \    paren_stack.append(paren_level)\n    paren_level_stack.append(level)\n  \
    \  for char in paren_string:\n        if char == '(':\n            paren_level\
    \ += 1\n            paren_level_stack.append(level)\n            paren_stack.append(paren_level)\n\
    \        elif char == ')':\n            paren_level -= 1\n            paren_level_stack.pop()\n\
    \            paren_stack.pop()\n        elif char == ' ':\n            level +=\
    \ 1\n            paren_level_stack.append(level)\n            paren_stack.append(paren_level)\n\
    \        elif char == '\\n':\n            level -= 1\n            paren_level_stack.pop()\n\
    \            paren_stack.pop()\n    return paren_stack\n\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp61xo9bnu.py\"\
    , line 43, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp61xo9bnu.py\"\
    , line 41, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp61xo9bnu.py\"\
    , line 36, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_stack\
    \ = []\n    level = 0\n    paren_level = 0\n    paren_nesting = 0\n    paren_nesting_level\
    \ = 0\n    paren_nesting_nesting = 0\n    paren_nesting_nesting_level = 0\n  \
    \  paren_nesting_nesting_nesting = 0\n    paren_nesting_nesting_nesting_level\
    \ = 0\n    paren_nesting_nesting_nesting_nesting = 0\n    paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n    paren_nesting_nesting_nesting_nesting_nesting = 0\n    paren_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0\n    paren_nesting_nesting_nesting_nesting_nesting_level = 0\n    paren_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0\n    paren_nesting_nesting_nesting_nesting_nesting_level = 0\n    paren_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0\n    paren_nesting_nesting_nesting_nesting_nesting_level = 0\n    paren_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0\n    paren_nesting_nesting_nesting_nesting_nesting_level = 0\n    paren_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0\n    paren_nesting_nesting_nesting_nesting_nesting_level = 0\n    paren_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0\n    paren_nesting_nesting_nesting_nesting_level = 0\n    paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n    paren_nesting_nesting_nesting_nesting_level = 0\n    paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n    paren_nesting_nesting_nesting_nesting_level = 0\n    paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n    paren_nesting_nesting_nesting_nesting_level = 0\n    paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n    paren_nesting_nesting_nesting_nesting_level = 0\n    paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n    paren_nesting_nesting_nesting_nesting_level = 0\n    paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n    paren_nesting_nesting_nesting_nesting_level = 0\n    paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n    paren_nesting_nesting_nesting_nesting_level = 0\n    paren_nesting_nesting_nesting_nesting_\n\
    def check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') ==\
    \ [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n\
    \    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp90w_a79.py\"\
    , line 56, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp90w_a79.py\"\
    , line 54, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp90w_a79.py\"\
    , line 49, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp90w_a79.py\"\
    , line 47, in parse_nested_parens\n    paren_nesting_nesting_nesting_nesting_\n\
    NameError: name 'paren_nesting_nesting_nesting_nesting_' is not defined. Did you\
    \ mean: 'paren_nesting_nesting_nesting_nesting'?\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_stack\
    \ = []\n    paren_level = 0\n    paren_levels = []\n    paren_levels.append(paren_level)\n\
    \    paren_stack.append(paren_level)\n    paren_levels.append(paren_level)\n \
    \   for c in paren_string:\n        if c == '(':\n            paren_level += 1\n\
    \            paren_levels.append(paren_level)\n            paren_stack.append(paren_level)\n\
    \        elif c == ')':\n            paren_level -= 1\n            paren_levels.append(paren_level)\n\
    \            paren_stack.append(paren_level)\n        elif c == ' ':\n       \
    \     if paren_level == 0:\n                paren_levels.append(paren_level)\n\
    \            else:\n                paren_levels[paren_stack.pop()] = paren_level\n\
    \    return paren_levels\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp87246i54.py\"\
    , line 39, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp87246i54.py\"\
    , line 37, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp87246i54.py\"\
    , line 32, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_stack\
    \ = []\n    paren_level = 0\n    paren_nesting = 0\n    paren_levels = []\n  \
    \  paren_nestings = []\n    paren_levels.append(paren_level)\n    paren_nestings.append(paren_nesting)\n\
    \    for char in paren_string:\n        if char == '(':\n            paren_level\
    \ += 1\n            paren_stack.append(char)\n            paren_levels.append(paren_level)\n\
    \            paren_nestings.append(paren_nesting)\n        elif char == ')':\n\
    \            paren_level -= 1\n            paren_nesting -= 1\n            paren_stack.pop()\n\
    \            paren_levels.pop()\n            paren_nestings.pop()\n        else:\n\
    \            paren_nesting += 1\n    \n    return paren_levels\n\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsfk1kng9.py\"\
    , line 41, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsfk1kng9.py\"\
    , line 39, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsfk1kng9.py\"\
    , line 34, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    stack =\
    \ []\n    level = 0\n    paren_level = 0\n    paren_levels = []\n    paren_levels_string\
    \ = \"\"\n    for char in paren_string:\n        if char == \"(\":\n         \
    \   paren_level += 1\n            paren_levels.append(paren_level)\n         \
    \   paren_levels_string += char\n        elif char == \")\":\n            paren_level\
    \ -= 1\n            paren_levels.append(paren_level)\n            paren_levels_string\
    \ += char\n        elif char == \" \":\n            paren_levels_string += char\n\
    \        else:\n            paren_levels_string += char\n    paren_levels.append(paren_level)\n\
    \    return paren_levels\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmmyugau1.py\"\
    , line 38, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmmyugau1.py\"\
    , line 36, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmmyugau1.py\"\
    , line 31, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    level =\
    \ 0\n    paren_level = 0\n    paren_stack = []\n    paren_stack.append(paren_level)\n\
    \    for c in paren_string:\n        if c == '(':\n            paren_level +=\
    \ 1\n            paren_stack.append(paren_level)\n        elif c == ')':\n   \
    \         paren_stack.pop()\n            paren_level = paren_stack[-1]\n     \
    \   else:\n            pass\n    return paren_stack\n\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1dthmc7s.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1dthmc7s.py\"\
    , line 30, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1dthmc7s.py\"\
    , line 25, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    stack =\
    \ []\n    level = 0\n    paren_level = 0\n    paren_level_stack = []\n    paren_level_stack.append(level)\n\
    \    paren_level_stack.append(level)\n    for c in paren_string:\n        if c\
    \ == '(':\n            paren_level_stack.append(level)\n            level += 1\n\
    \        elif c == ')':\n            paren_level_stack.pop()\n            level\
    \ -= 1\n        elif c == '[':\n            paren_level_stack.append(level)\n\
    \            level += 1\n        elif c == ']':\n            paren_level_stack.pop()\n\
    \            level -= 1\n        elif c == '{':\n            paren_level_stack.append(level)\n\
    \            level += 1\n        elif c == '}':\n            paren_level_stack.pop()\n\
    \            level -= 1\n        elif c == '.':\n            level += 1\n    \
    \    elif c == ',':\n            level -= 1\n        elif c == ';':\n        \
    \    level -= 1\n        elif c == '+':\n            level += 1\n        elif\
    \ c == '-':\n            level -= 1\n        elif c == '*':\n            level\
    \ += 1\n        elif c == '/':\n            level -= 1\n        elif c == '%':\n\
    \            level += 1\n        elif c == '^':\n            level -= 1\n    \
    \    elif c == '=':\n            level += 1\n        elif c == '!':\n        \
    \    level -= 1\n        elif c == '<':\n            level += 1\n        elif\
    \ c == '>':\n            level -= 1\n        elif c == '&':\n            level\
    \ += 1\n        elif c == '|':\n            level -= 1\n        elif c == '~':\n\
    \            level += 1\n        elif c == '?':\n            level -= 1\n    \
    \    elif c == '!':\n            level += 1\n        elif c == '=':\n        \
    \    level -= 1\n        elif c == '!':\n            level += 1\n        elif\
    \ c == '=':\n            level -= 1\n        elif c == '!':\n            level\
    \ += 1\n        elif c == '=':\n            level -= 1\n        elif c == '!':\n\
    \            level += 1\n        elif c == '=':\n            level -= 1\n    \
    \    elif c == '!':\n            level += 1\n        elif c == '=':\n        \
    \    level -= 1\n        elif c == '!':\n            level += 1\n        elif\
    \ c == '=':\n            level -= 1\n        elif c == '!':\n            level\
    \ += 1\n        elif c == '=':\n            level -= 1\n        elif c == '!':\n\
    \            level += 1\n        elif c == '=':\n            level -= 1\n    \
    \    elif c == '!':\n            level += 1\n        elif c == '=':\n        \
    \    level -= 1\n        elif c == '!':\n            level += 1\n        elif\
    \ c == '=':\n            level\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvq550ab6.py\"\
    , line 116, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvq550ab6.py\"\
    , line 114, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvq550ab6.py\"\
    , line 109, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    stack =\
    \ []\n    level = 0\n    paren_level = 0\n    paren_levels = []\n    paren_levels_str\
    \ = \"\"\n    for char in paren_string:\n        if char == \"(\":\n         \
    \   paren_level += 1\n            paren_levels.append(paren_level)\n         \
    \   paren_levels_str += \"(\" + str(paren_level) + \")\"\n        elif char ==\
    \ \")\":\n            paren_level -= 1\n            paren_levels.append(paren_level)\n\
    \            paren_levels_str += \"(\" + str(paren_level) + \")\"\n        elif\
    \ char == \" \":\n            paren_levels_str += \" \"\n        elif char ==\
    \ \",\":\n            paren_levels_str += \",\"\n        elif char == \"\\n\"\
    :\n            paren_levels_str += \"\\n\"\n        else:\n            paren_levels_str\
    \ += char\n    \n    paren_levels_str = paren_levels_str.replace(\",\", \"\")\n\
    \    paren_levels_str = paren_levels_str.replace(\"\\n\", \"\")\n    paren_levels_str\
    \ = paren_levels_str.replace(\"(\", \"\")\n    paren_levels_str = paren_levels_str.replace(\"\
    )\", \"\")\n    \n    paren_levels_str = paren_levels_str.strip()\n    \n    paren_levels_str\
    \ = paren_levels_str.split(\",\")\n    \n    paren_levels_str = [int(i) for i\
    \ in paren_levels_str]\n    \n    paren_levels_str = [i for i in paren_levels_str\
    \ if i != \"\"]\n    \n    paren_levels_str = [i for i in paren_levels_str if\
    \ int(i) >= 0]\n    \n    paren_levels_str = [i for i in paren_levels_str if int(i)\
    \ <= len(paren_levels)]\n    \n    paren_levels_str = paren_levels_str[0]\n  \
    \  \n    return paren_levels_str\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphzamdu23.py\"\
    , line 61, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphzamdu23.py\"\
    , line 59, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphzamdu23.py\"\
    , line 54, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphzamdu23.py\"\
    , line 41, in parse_nested_parens\n    paren_levels_str = [int(i) for i in paren_levels_str]\n\
    \  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphzamdu23.py\", line\
    \ 41, in <listcomp>\n    paren_levels_str = [int(i) for i in paren_levels_str]\n\
    ValueError: invalid literal for int() with base 10: '121210 123210 10 1232121210'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_stack\
    \ = []\n    level = 0\n    paren_level = 0\n    paren_level_stack = []\n    paren_level_stack.append(0)\n\
    \    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n\
    \    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n\
    \    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n\
    \    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n\
    \    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n\
    \    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n\
    \    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n\
    \    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n\
    \    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n\
    \    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n\
    \    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n\
    \    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n\
    \    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n\
    \    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n\
    \    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n\
    \    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n\
    \    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n\
    \    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n\
    \    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n\
    \    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n\
    \    \ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())')\
    \ == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3,\
    \ 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n   \
    \ check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv66w5dcm.py\"\
    , line 83, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv66w5dcm.py\"\
    , line 81, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv66w5dcm.py\"\
    , line 76, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_stack\
    \ = []\n    paren_level = 0\n    paren_nesting = 0\n    paren_levels = []\n  \
    \  paren_nestings = []\n    for char in paren_string:\n        if char == '(':\n\
    \            paren_stack.append(paren_level)\n            paren_level += 1\n \
    \           paren_nesting += 1\n        elif char == ')':\n            paren_level\
    \ -= paren_stack.pop()\n            paren_nesting -= 1\n        elif char == '\
    \ ':\n            if paren_level == 0:\n                paren_levels.append(paren_nesting)\n\
    \                paren_nestings.append(paren_level)\n            paren_level =\
    \ 0\n            paren_nesting = 0\n        else:\n            paren_level = 0\n\
    \            paren_nesting = 0\n    return paren_levels\n\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp588w6moe.py\"\
    , line 41, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp588w6moe.py\"\
    , line 39, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp588w6moe.py\"\
    , line 34, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_level\
    \ = 0\n    paren_levels = []\n    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp72a_f38_.py\"\
    , line 66\n    paren_levels.append(\n                       ^\nSyntaxError: '('\
    \ was never closed\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_stack\
    \ = []\n    paren_level = 0\n    paren_nesting_level = 0\n    paren_nesting_level_stack\
    \ = []\n    paren_nesting_level_stack.append(paren_nesting_level)\n    paren_stack.append(paren_level)\n\
    \    paren_nesting_level += 1\n    paren_nesting_level_stack.append(paren_nesting_level)\n\
    \    paren_level += 1\n    paren_nesting_level_stack.append(paren_nesting_level)\n\
    \    paren_level += 1\n    paren_nesting_level_stack.append(paren_nesting_level)\n\
    \    paren_level += 1\n    paren_nesting_level_stack.append(paren_nesting_level)\n\
    \    paren_level += 1\n    paren_nesting_level_stack.append(paren_nesting_level)\n\
    \    paren_level += 1\n    paren_nesting_level_stack.append(paren_nesting_level)\n\
    \    paren_level += 1\n    paren_nesting_level_stack.append(paren_nesting_level)\n\
    \    paren_level += 1\n    paren_nesting_level_stack.append(paren_nesting_level)\n\
    \    paren_level += 1\n    paren_nesting_level_stack.append(paren_nesting_level)\n\
    \    paren_level += 1\n    paren_nesting_level_stack.append(paren_nesting_level)\n\
    \    paren_level += 1\n    paren_nesting_level_stack.append(paren_nesting_level)\n\
    \    paren_level += 1\n    paren_nesting_level_stack.append(paren_nesting_level)\n\
    \    paren_level += 1\n    paren_nesting_level_stack.append(paren_nesting_level)\n\
    \    paren_level += 1\n    paren_nesting_level_stack.append(paren_nesting_level)\n\
    \    paren_level += 1\n    paren_nesting_level_stack.append(paren_nesting_level)\n\
    \    paren_level += 1\n    paren_nesting_level_stack.append(paren_nesting_level)\n\
    \    paren_level += 1\n    paren_nesting_level_stack.append(paren_nesting_level)\n\
    \    paren_level += 1\n    paren_nesting_level_stack.append(paren_nesting_level)\n\
    \    paren_level += 1\n    paren_nesting_level_stack.append(paren_nesting_level)\n\
    \    paren_level += 1\n    paren_nesting_level_stack.append(paren_nesting_level)\n\
    \    paren_level += 1\n    paren_nesting_level_stack.append(paren_nesting_level)\n\
    \    paren_level += 1\n    paren_nesting_level_stack.append(paren_nesting_level)\n\
    \    paren_level += 1\n    paren_nesting_level_stack.append(paren_nesting_\ndef\
    \ check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n\
    \    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdfbwdf2r.py\"\
    , line 60\n    paren_nesting_level_stack.append(paren_nesting_\n             \
    \                       ^\nSyntaxError: '(' was never closed\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_stack\
    \ = []\n    paren_level = 0\n    paren_char = ''\n    paren_nesting_level = 0\n\
    \    paren_nesting_char = ''\n    paren_nesting_nesting_level = 0\n    paren_nesting_nesting_char\
    \ = ''\n    paren_nesting_nesting_nesting_level = 0\n    paren_nesting_nesting_nesting_char\
    \ = ''\n    paren_nesting_nesting_nesting_nesting_level = 0\n    paren_nesting_nesting_nesting_nesting_char\
    \ = ''\n    paren_nesting_nesting_nesting_nesting_level = 0\n    paren_nesting_nesting_nesting_nesting_char\
    \ = ''\n    paren_nesting_nesting_nesting_nesting_level = 0\n    paren_nesting_nesting_nesting_nesting_char\
    \ = ''\n    paren_nesting_nesting_nesting_nesting_level = 0\n    paren_nesting_nesting_nesting_nesting_char\
    \ = ''\n    paren_nesting_nesting_nesting_nesting_level = 0\n    paren_nesting_nesting_nesting_nesting_char\
    \ = ''\n    paren_nesting_nesting_nesting_nesting_level = 0\n    paren_nesting_nesting_nesting_nesting_char\
    \ = ''\n    paren_nesting_nesting_nesting_level = 0\n    paren_nesting_nesting_nesting_char\
    \ = ''\n    paren_nesting_nesting_level = 0\n    paren_nesting_nesting_char =\
    \ ''\n    paren_nesting_level = 0\n    paren_nesting_char = ''\n    paren_level\
    \ = 0\n    paren_char = ''\n    paren_nesting_level = 0\n    paren_nesting_char\
    \ = ''\n    paren_nesting_nesting_level = 0\n    paren_nesting_nesting_char =\
    \ ''\n    paren_nesting_nesting_nesting_level = 0\n    paren_nesting_nesting_nesting_char\
    \ = ''\n    paren_nesting_nesting_nesting_level = 0\n    paren_nesting_nesting_nesting_char\
    \ = ''\n    paren_nesting_nesting_nesting_level = 0\n    paren_nesting_nesting_nesting_char\
    \ = ''\n    paren_nesting_nesting_nesting_level = 0\n    paren_nesting_nesting_nesting_char\
    \ = ''\n    paren_nesting_nesting_level = 0\n    paren_nesting_nesting_char =\
    \ ''\n    paren_nesting_level = 0\n    paren_nesting_char = ''\n    paren_level\
    \ = 0\n    paren_char = ''\n    paren_nesting_level = 0\n    paren_nesting_char\n\
    def check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') ==\
    \ [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n\
    \    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnd2qc5ho.py\"\
    , line 66, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnd2qc5ho.py\"\
    , line 64, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnd2qc5ho.py\"\
    , line 59, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_level\
    \ = 0\n    paren_stack = []\n    paren_stack.append(paren_string)\n    paren_level_string\
    \ = paren_string\n    paren_level_string = paren_level_string.replace(' ', '')\n\
    \    paren_level_string = paren_level_string.replace('(', '')\n    paren_level_string\
    \ = paren_level_string.replace(')', '')\n    paren_level_string = paren_level_string.replace(')',\
    \ '')\n    paren_level_string = paren_level_string.replace('(', '')\n    paren_level_string\
    \ = paren_level_string.replace('(', '')\n    paren_level_string = paren_level_string.replace('(',\
    \ '')\n    paren_level_string = paren_level_string.replace('(', '')\n    paren_level_string\
    \ = paren_level_string.replace('(', '')\n    paren_level_string = paren_level_string.replace('(',\
    \ '')\n    paren_level_string = paren_level_string.replace('(', '')\n    paren_level_string\
    \ = paren_level_string.replace('(', '')\n    paren_level_string = paren_level_string.replace('(',\
    \ '')\n    paren_level_string = paren_level_string.replace('(', '')\n    paren_level_string\
    \ = paren_level_string.replace('(', '')\n    paren_level_string = paren_level_string.replace('(',\
    \ '')\n    paren_level_string = paren_level_string.replace('(', '')\n    paren_level_string\
    \ = paren_level_string.replace('(', '')\n    paren_level_string = paren_level_string.replace('(',\
    \ '')\n    paren_level_string = paren_level_string.replace('(', '')\n    paren_level_string\
    \ = paren_level_string.replace('(', '')\n    paren_level_string = paren_level_string.replace('(',\
    \ '')\n    paren_level_string = paren_level_string.replace('(', '')\n    paren_level_string\
    \ = paren_level_string.replace('(', '')\n    paren_level_string = paren_level_string.replace('(',\
    \ '')\n    paren_level_string = paren_level_string.replace('(', '')\n    paren_level_string\
    \ = paren_level_string.replace('(', '')\n    paren_level_string = paren_level_string.replace('(',\
    \ '')\n    paren_level_string = paren_level_string.replace('(', '')\n    paren_level_string\
    \ = paren_level_string.replace('(', '')\n    paren_level_string = paren_level_string.replace('(',\
    \ '')\n    paren_level_string = paren_level_string.replace('(', '')\n    paren_level_string\
    \ = paren_level_string.replace('(', '')\n    paren_level_string = paren_level_string.replace('(',\
    \ '')\n    paren_level_string = \ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpizeu268m.py\"\
    , line 47\n    paren_level_string = \n                         ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_stack\
    \ = []\n    paren_level = 0\n    paren_nesting = 0\n    paren_levels = []\n  \
    \  paren_nestings = []\n    for char in paren_string:\n        if char == '(':\n\
    \            paren_stack.append(paren_level)\n            paren_level += 1\n \
    \           paren_nesting += 1\n            paren_levels.append(paren_level)\n\
    \            paren_nestings.append(paren_nesting)\n        elif char == ')':\n\
    \            paren_level -= 1\n            paren_nesting -= 1\n            paren_levels.append(paren_level)\n\
    \            paren_nestings.append(paren_nesting)\n        elif char == ' ':\n\
    \            if paren_level == 0 and paren_nesting == 0:\n                paren_levels.append(0)\n\
    \                paren_nestings.append(0)\n            else:\n               \
    \ paren_levels.append(paren_level)\n                paren_nestings.append(paren_nesting)\n\
    \        else:\n            paren_levels.append(paren_level)\n            paren_nestings.append(paren_nesting)\n\
    \    return paren_levels\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5buf_gqw.py\"\
    , line 46, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5buf_gqw.py\"\
    , line 44, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5buf_gqw.py\"\
    , line 39, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_stack\
    \ = []\n    paren_level = 0\n    paren_levels = []\n    paren_levels_string =\
    \ \"\"\n    for char in paren_string:\n        if char == \"(\":\n           \
    \ paren_stack.append(paren_level)\n            paren_level += 1\n            paren_levels.append(paren_level)\n\
    \            paren_levels_string += char\n        elif char == \")\":\n      \
    \      paren_level -= 1\n            paren_levels.append(paren_level)\n      \
    \      paren_levels_string += char\n        elif char == \" \":\n            paren_levels_string\
    \ += char\n        else:\n            paren_levels_string += char\n    paren_levels.append(paren_level)\n\
    \    return paren_levels\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpake263u5.py\"\
    , line 38, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpake263u5.py\"\
    , line 36, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpake263u5.py\"\
    , line 31, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_stack\
    \ = []\n    paren_level = 0\n    paren_nesting = 0\n    paren_levels = []\n  \
    \  paren_nestings = []\n    paren_levels.append(paren_level)\n    paren_nestings.append(paren_nesting)\n\
    \    paren_level = 1\n    paren_nesting = 1\n    for char in paren_string:\n \
    \       if char == '(':\n            paren_stack.append(char)\n            paren_level\
    \ += 1\n            paren_nesting += 1\n        elif char == ')':\n          \
    \  paren_nesting -= 1\n            if paren_nesting == 0:\n                paren_level\
    \ -= 1\n                paren_nestings.append(paren_nesting)\n               \
    \ paren_levels.append(paren_level)\n                paren_nesting = 1\n      \
    \          paren_level = 1\n                paren_stack.pop()\n            else:\n\
    \                paren_nesting += 1\n        elif char == ' ':\n            paren_level\
    \ += 1\n            paren_nesting += 1\n        elif char == '\\n':\n        \
    \    paren_level = 1\n            paren_nesting = 1\n    return paren_levels\n\
    \ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') ==\
    \ [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n\
    \    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpozmpag0f.py\"\
    , line 50, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpozmpag0f.py\"\
    , line 48, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpozmpag0f.py\"\
    , line 43, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    stack =\
    \ []\n    level = 0\n    for c in paren_string:\n        if c == '(':\n      \
    \      stack.append(level)\n        elif c == ')':\n            level = stack.pop()\n\
    \        else:\n            level += 1 \n    return stack\n\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpatxmkcqy.py\"\
    , line 28, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpatxmkcqy.py\"\
    , line 26, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpatxmkcqy.py\"\
    , line 21, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_level\
    \ = 0\n    paren_levels = []\n    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9wfixy_7.py\"\
    , line 66\n    paren_levels.append(\n                       ^\nSyntaxError: '('\
    \ was never closed\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_stack\
    \ = []\n    paren_stack.append(0)\n    paren_level = 0\n    paren_levels = []\n\
    \    paren_levels.append(0)\n    paren_levels.append(0)\n    paren_levels.append(0)\n\
    \    paren_levels.append(0)\n    paren_levels.append(0)\n    paren_levels.append(0)\n\
    \    paren_levels.append(0)\n    paren_levels.append(0)\n    paren_levels.append(0)\n\
    \    paren_levels.append(0)\n    paren_levels.append(0)\n    paren_levels.append(0)\n\
    \    paren_levels.append(0)\n    paren_levels.append(0)\n    paren_levels.append(0)\n\
    \    paren_levels.append(0)\n    paren_levels.append(0)\n    paren_levels.append(0)\n\
    \    paren_levels.append(0)\n    paren_levels.append(0)\n    paren_levels.append(0)\n\
    \    paren_levels.append(0)\n    paren_levels.append(0)\n    paren_levels.append(0)\n\
    \    paren_levels.append(0)\n    paren_levels.append(0)\n    paren_levels.append(0)\n\
    \    paren_levels.append(0)\n    paren_levels.append(0)\n    paren_levels.append(0)\n\
    \    paren_levels.append(0)\n    paren_levels.append(0)\n    paren_levels.append(0)\n\
    \    paren_levels.append(0)\n    paren_levels.append(0)\n    paren_levels.append(0)\n\
    \    paren_levels.append(0)\n    paren_levels.append(0)\n    paren_levels.append(0)\n\
    \    paren_levels.append(0)\n    paren_levels.append(0)\n    paren_levels.append(0)\n\
    \    paren_levels.append(0)\n    paren_levels.append(0)\n    paren_levels.append(0)\n\
    \    paren_levels.append(0)\n    paren_levels.append(0)\n    paren_levels.append(0)\n\
    \    paren_levels.append(0)\n    paren_levels.append(0)\n    paren_levels.append(0)\n\
    \    paren_levels.append(0)\n    paren_levels.append(0)\n    paren_levels.append(0)\n\
    \    paren_levels.append(0)\n    paren_levels.append(0)\n    paren_levels.append(0)\n\
    \    paren_levels.append(0)\n    paren_levels.append(0)\n    paren_levels.append(0)\n\
    \    paren_levels.append(0)\n    paren_levels.append(0)\n    paren_levels.append(0)\n\
    \    paren_levels.append(0)\n    paren_levels.append(0)\n    paren_levels.append(0)\n\
    \    paren_levels.append(0)\n    paren_levels.append(0)\n    paren_levels.append(0)\n\
    \    paren_level\ndef check(candidate):\n    assert candidate('(()()) ((())) ()\
    \ ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5e6ulrl1.py\"\
    , line 91, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5e6ulrl1.py\"\
    , line 89, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5e6ulrl1.py\"\
    , line 84, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_stack\
    \ = []\n    paren_stack.append(0)\n    paren_level = 0\n    paren_levels = []\n\
    \    paren_levels.append(0)\n    paren_levels.append(0)\n    paren_levels.append(0)\n\
    \    paren_levels.append(0)\n    paren_levels.append(0)\n    paren_levels.append(0)\n\
    \    paren_levels.append(0)\n    paren_levels.append(0)\n    paren_levels.append(0)\n\
    \    paren_levels.append(0)\n    paren_levels.append(0)\n    paren_levels.append(0)\n\
    \    paren_levels.append(0)\n    paren_levels.append(0)\n    paren_levels.append(0)\n\
    \    paren_levels.append(0)\n    paren_levels.append(0)\n    paren_levels.append(0)\n\
    \    paren_levels.append(0)\n    paren_levels.append(0)\n    paren_levels.append(0)\n\
    \    paren_levels.append(0)\n    paren_levels.append(0)\n    paren_levels.append(0)\n\
    \    paren_levels.append(0)\n    paren_levels.append(0)\n    paren_levels.append(0)\n\
    \    paren_levels.append(0)\n    paren_levels.append(0)\n    paren_levels.append(0)\n\
    \    paren_levels.append(0)\n    paren_levels.append(0)\n    paren_levels.append(0)\n\
    \    paren_levels.append(0)\n    paren_levels.append(0)\n    paren_levels.append(0)\n\
    \    paren_levels.append(0)\n    paren_levels.append(0)\n    paren_levels.append(0)\n\
    \    paren_levels.append(0)\n    paren_levels.append(0)\n    paren_levels.append(0)\n\
    \    paren_levels.append(0)\n    paren_levels.append(0)\n    paren_levels.append(0)\n\
    \    paren_levels.append(0)\n    paren_levels.append(0)\n    paren_levels.append(0)\n\
    \    paren_levels.append(0)\n    paren_levels.append(0)\n    paren_levels.append(0)\n\
    \    paren_levels.append(0)\n    paren_levels.append(0)\n    paren_levels.append(0)\n\
    \    paren_levels.append(0)\n    paren_levels.append(0)\n    paren_levels.append(0)\n\
    \    paren_levels.append(0)\n    paren_levels.append(0)\n    paren_levels.append(0)\n\
    \    paren_levels.append(0)\n    paren_levels.append(0)\n    paren_levels.append(0)\n\
    \    paren_levels.append(0)\n    paren_levels.append(0)\n    paren_levels.append(0)\n\
    \    paren_levels.append(0)\n    paren_levels.append(0)\n    paren_levels.append(0)\n\
    \    paren_level\ndef check(candidate):\n    assert candidate('(()()) ((())) ()\
    \ ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4v96dlcn.py\"\
    , line 91, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4v96dlcn.py\"\
    , line 89, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4v96dlcn.py\"\
    , line 84, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_stack\
    \ = []\n    level = 0\n    paren_level = 0\n    paren_level_stack = []\n    paren_level_stack.append(0)\n\
    \    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n\
    \    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n\
    \    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n\
    \    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n\
    \    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n\
    \    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n\
    \    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n\
    \    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n\
    \    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n\
    \    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n\
    \    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n\
    \    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n\
    \    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n\
    \    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n\
    \    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n\
    \    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n\
    \    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n\
    \    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n\
    \    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n\
    \    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n\
    \    \ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())')\
    \ == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3,\
    \ 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n   \
    \ check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz8ge69u2.py\"\
    , line 83, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz8ge69u2.py\"\
    , line 81, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz8ge69u2.py\"\
    , line 76, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_stack\
    \ = []\n    paren_level = 0\n    paren_level_stack = []\n    paren_level_stack.append(paren_level)\n\
    \    paren_level_stack.append(paren_level)\n    for char in paren_string:\n  \
    \      if char == '(':\n            paren_stack.append(char)\n            paren_level\
    \ += 1\n            paren_level_stack.append(paren_level)\n        elif char ==\
    \ ')':\n            paren_level -= 1\n            paren_level_stack.pop()\n  \
    \          paren_level_stack.append(paren_level)\n        elif char == ' ':\n\
    \            paren_level_stack.pop()\n            paren_level_stack.append(paren_level)\n\
    \        else:\n            paren_level_stack.pop()\n            paren_level_stack.append(paren_level)\n\
    \    return paren_stack\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjd1nytse.py\"\
    , line 39, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjd1nytse.py\"\
    , line 37, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjd1nytse.py\"\
    , line 32, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_stack\
    \ = []\n    paren_level = 0\n    paren_levels = []\n    paren_levels_string =\
    \ \"\"\n    paren_levels_strings = []\n    paren_levels_strings_reversed = []\n\
    \    paren_levels_strings_reversed_string = \"\"\n    paren_levels_strings_reversed_strings\
    \ = []\n    paren_levels_strings_reversed_strings_reversed = []\n    paren_levels_strings_reversed_strings_reversed_string\
    \ = \"\"\n    paren_levels_strings_reversed_strings_reversed_strings = []\n  \
    \  paren_levels_strings_reversed_strings_reversed_strings_reversed = []\n    paren_levels_strings_reversed_strings_reversed_strings_reversed_string\
    \ = \"\"\n    paren_levels_strings_reversed_strings_reversed_strings_reversed_strings\
    \ = []\n    paren_levels_strings_reversed_strings_reversed_strings_reversed_strings_reversed\
    \ = []\n    paren_levels_strings_reversed_strings_reversed_strings_reversed_strings_reversed_string\
    \ = \"\"\n    paren_levels_strings_reversed_strings_reversed_strings_reversed_strings_reversed_strings\
    \ = []\n    paren_levels_strings_reversed_strings_reversed_strings_reversed_strings_reversed_strings_reversed\
    \ = []\n    paren_levels_strings_reversed_strings_reversed_strings_reversed_strings_reversed_strings_reversed_string\
    \ = \"\"\n    paren_levels_strings_reversed_strings_reversed_strings_reversed_strings_reversed_strings_reversed_strings\
    \ = []\n    paren_levels_strings_reversed_strings_reversed_strings_reversed_strings_reversed_strings_reversed_strings_reversed\
    \ = []\n    paren_levels_strings_reversed_strings_reversed_strings_reversed_strings_reversed_strings_reversed_strings_reversed_string\
    \ = \"\"\n    paren_levels_strings_reversed_strings_reversed_strings_reversed_strings_reversed_strings_reversed_strings_reversed_strings\
    \ = []\n    paren_levels_strings_reversed_strings_reversed_strings_reversed_strings_reversed_strings_reversed_strings_reversed_strings_reversed\
    \ = []\n    paren_levels_strings_reversed_strings_reversed_strings_reversed_strings_reversed_strings_reversed_strings_reversed_strings_reversed_string\
    \ = \"\"\n    paren_levels_strings_reversed_strings_reversed_strings_reversed_strings_reversed_strings_reverse\n\
    def check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') ==\
    \ [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n\
    \    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5qu27xbm.py\"\
    , line 43, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5qu27xbm.py\"\
    , line 41, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5qu27xbm.py\"\
    , line 36, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5qu27xbm.py\"\
    , line 34, in parse_nested_parens\n    paren_levels_strings_reversed_strings_reversed_strings_reversed_strings_reversed_strings_reverse\n\
    NameError: name 'paren_levels_strings_reversed_strings_reversed_strings_reversed_strings_reversed_strings_reverse'\
    \ is not defined. Did you mean: 'paren_levels_strings_reversed_strings_reversed_strings_reversed_strings_reversed_strings_reversed'?\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_stack\
    \ = []\n    paren_level = 0\n    paren_levels = []\n    for char in paren_string:\n\
    \        if char == '(':\n            paren_stack.append(paren_level)\n      \
    \      paren_level += 1\n        elif char == ')':\n            paren_level -=\
    \ 1\n            paren_levels.append(paren_level)\n        elif char == ' ':\n\
    \            paren_levels.append(paren_level)\n    return paren_levels\n\ndef\
    \ check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n\
    \    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyi8dizaj.py\"\
    , line 31, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyi8dizaj.py\"\
    , line 29, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyi8dizaj.py\"\
    , line 24, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_stack\
    \ = []\n    level = 0\n    paren_level = 0\n    paren_char = ''\n    paren_char_count\
    \ = 0\n    paren_chars = []\n    for char in paren_string:\n        if char ==\
    \ '(':\n            paren_stack.append(char)\n            paren_level += 1\n \
    \           paren_char_count += 1\n        elif char == ')':\n            paren_stack.pop()\n\
    \            paren_level -= 1\n            paren_char_count -= 1\n        elif\
    \ char == ' ':\n            if paren_char_count == 0:\n                paren_chars.append(char)\n\
    \            else:\n                paren_chars.append(char)\n               \
    \ paren_chars.append(char)\n                paren_chars.append(char)\n       \
    \         paren_chars.append(char)\n                paren_chars.append(char)\n\
    \                paren_chars.append(char)\n                paren_chars.append(char)\n\
    \                paren_chars.append(char)\n                paren_chars.append(char)\n\
    \                paren_chars.append(char)\n                paren_chars.append(char)\n\
    \                paren_chars.append(char)\n                paren_chars.append(char)\n\
    \                paren_chars.append(char)\n                paren_chars.append(char)\n\
    \                paren_chars.append(char)\n                paren_chars.append(char)\n\
    \                paren_chars.append(char)\n                paren_chars.append(char)\n\
    \                paren_chars.append(char)\n                paren_chars.append(char)\n\
    \                paren_chars.append(char)\n                paren_chars.append(char)\n\
    \                paren_chars.append(char)\n                paren_chars.append(char)\n\
    \                paren_chars.append(char)\n                paren_chars.append(char)\n\
    \                paren_chars.append(char)\n                paren_chars.append(char)\n\
    \                paren_chars.append(char)\n                paren_chars.append(char)\n\
    \                paren_chars.append(char)\n                paren_chars.append(char)\n\
    \                paren_chars.append(char)\n                paren_chars.append(char)\n\
    \                paren_chars.append(char)\n                paren_chars.append(char)\n\
    \                paren_chars.append(char)\n                paren_chars.append(char)\n\
    \                paren_chars.append(char)\n                paren_chars.append(char)\n\
    \                paren_chars.append(char)\n                paren_chars.append(char)\n\
    \                paren_chars.append(char)\n                paren_chars.append(char)\n\
    \                paren_chars.append(char)\n                paren_chars.append(char)\n\
    \                paren_chars.append(char)\n                paren_chars.append(char)\n\
    \                paren_chars.append(char)\n                paren_chars.append(char)\n\
    \                paren_chars.append(char)\n                paren_chars.append(char)\n\
    \                paren_chars.append(char)\n                paren_chars.append(char)\n\
    \                paren_chars.append(char)\n                paren_chars.append(char)\n\
    \                \ndef check(candidate):\n    assert candidate('(()()) ((()))\
    \ () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxzb7o072.py\"\
    , line 94, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxzb7o072.py\"\
    , line 92, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxzb7o072.py\"\
    , line 87, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_stack\
    \ = []\n    paren_level = 0\n    paren_levels = []\n    paren_levels_string =\
    \ \"\"\n    for c in paren_string:\n        if c == \"(\":\n            paren_stack.append(paren_level)\n\
    \            paren_level += 1\n            paren_levels.append(paren_level)\n\
    \            paren_levels_string += c\n        elif c == \")\":\n            paren_level\
    \ -= 1\n            paren_levels.append(paren_level)\n            paren_levels_string\
    \ += c\n        elif c == \" \":\n            if paren_level == 0:\n         \
    \       paren_levels_string += c\n            else:\n                paren_levels_string\
    \ += c\n        else:\n            paren_levels_string += c\n    return paren_levels\n\
    \ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') ==\
    \ [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n\
    \    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3gex8y9j.py\"\
    , line 40, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3gex8y9j.py\"\
    , line 38, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3gex8y9j.py\"\
    , line 33, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_stack\
    \ = []\n    paren_level = 0\n    paren_levels = []\n    paren_levels_len = 0\n\
    \    paren_levels_lens = []\n    paren_levels_lens_len = 0\n    paren_levels_lens_lens\
    \ = []\n    paren_levels_lens_len = 0\n    paren_levels_lens_lens = []\n    paren_levels_lens_len\
    \ = 0\n    paren_levels_lens_lens = []\n    paren_levels_lens_len = 0\n    paren_levels_lens_lens\
    \ = []\n    paren_levels_lens_len = 0\n    paren_levels_lens_lens = []\n    paren_levels_lens_len\
    \ = 0\n    paren_levels_lens_lens = []\n    paren_levels_lens_len = 0\n    paren_levels_lens_lens\
    \ = []\n    paren_levels_lens_len = 0\n    paren_levels_lens_lens = []\n    paren_levels_lens_len\
    \ = 0\n    paren_levels_lens_lens = []\n    paren_levels_lens_len = 0\n    paren_levels_lens_lens\
    \ = []\n    paren_levels_lens_len = 0\n    paren_levels_lens_lens = []\n    paren_levels_lens_len\
    \ = 0\n    paren_levels_lens_lens = []\n    paren_levels_lens_len = 0\n    paren_levels_lens_lens\
    \ = []\n    paren_levels_lens_len = 0\n    paren_levels_lens_lens = []\n    paren_levels_lens_len\
    \ = 0\n    paren_levels_lens_lens = []\n    paren_levels_lens_len = 0\n    paren_levels_lens_lens\
    \ = []\n    paren_levels_lens_len = 0\n    paren_levels_lens_lens = []\n    paren_levels_lens_len\
    \ = 0\n    paren_levels_lens_lens = []\n    paren_levels_lens_len = 0\n    paren_levels_lens_lens\
    \ = []\n    paren_levels_lens_len = 0\n    paren_levels_lens_lens = []\n    paren_levels_lens_len\
    \ = 0\n    paren_levels_lens_lens = []\n    paren_levels_lens_len = 0\n    paren_levels_lens_lens\
    \ = []\n    paren_levels_lens_len = 0\n    paren_levels_lens_lens = []\n    paren_levels_lens_len\
    \ = 0\n    paren_levels_lens_len\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp958lvbfh.py\"\
    , line 70, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp958lvbfh.py\"\
    , line 68, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp958lvbfh.py\"\
    , line 63, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_stack\
    \ = []\n    level = 0\n    paren_level = 0\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    for c in paren_string:\n        if c == '(':\n            paren_stack[paren_level]\
    \ += 1\n        elif c == ')':\n            paren_stack[paren_level] -= 1\n  \
    \          if paren_stack[paren_level] == 0:\n                paren_level -= 1\n\
    \        elif c == '[':\n            paren_level += 1\n        elif c == ']':\n\
    \            paren_level -= 1\n            if paren_level == 0:\n            \
    \    paren_stack.append(0)\n    \n    return paren_stack\n\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3lulo571.py\"\
    , line 38, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3lulo571.py\"\
    , line 36, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3lulo571.py\"\
    , line 31, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3lulo571.py\"\
    , line 16, in parse_nested_parens\n    paren_stack[paren_level] += 1\nIndexError:\
    \ list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_stack\
    \ = []\n    paren_level = 0\n    paren_levels = []\n    paren_levels_string =\
    \ \"\"\n    paren_levels_strings = []\n    paren_levels_strings.append(paren_levels_string)\n\
    \    paren_levels_strings.append(paren_levels_string)\n    paren_levels_strings.append(paren_levels_string)\n\
    \    paren_levels_strings.append(paren_levels_string)\n    paren_levels_strings.append(paren_levels_string)\n\
    \    paren_levels_strings.append(paren_levels_string)\n    paren_levels_strings.append(paren_levels_string)\n\
    \    paren_levels_strings.append(paren_levels_string)\n    paren_levels_strings.append(paren_levels_string)\n\
    \    paren_levels_strings.append(paren_levels_string)\n    paren_levels_strings.append(paren_levels_string)\n\
    \    paren_levels_strings.append(paren_levels_string)\n    paren_levels_strings.append(paren_levels_string)\n\
    \    paren_levels_strings.append(paren_levels_string)\n    paren_levels_strings.append(paren_levels_string)\n\
    \    paren_levels_strings.append(paren_levels_string)\n    paren_levels_strings.append(paren_levels_string)\n\
    \    paren_levels_strings.append(paren_levels_string)\n    paren_levels_strings.append(paren_levels_string)\n\
    \    paren_levels_strings.append(paren_levels_string)\n    paren_levels_strings.append(paren_levels_string)\n\
    \    paren_levels_strings.append(paren_levels_string)\n    paren_levels_strings.append(paren_levels_string)\n\
    \    paren_levels_strings.append(paren_levels_string)\n    paren_levels_strings.append(paren_levels_string)\n\
    \    paren_levels_strings.append(paren_levels_string)\n    paren_levels_strings.append(paren_levels_string)\n\
    \    paren_levels_strings.append(paren_levels_string)\n    paren_levels_strings.append(paren_levels_string)\n\
    \    paren_levels_strings.append(paren_levels_string)\n    paren_levels_strings.append(paren_levels_string)\n\
    \    paren_levels_strings.append(paren_levels_string)\n    paren_levels_strings.append(paren_levels_string)\n\
    \    paren_levels_strings.append(paren_levels_string)\n    paren_levels_strings.append(paren_levels_string)\n\
    \    paren_levels_strings.append(paren_levels_string)\n    paren_levels_strings.append(paren_level\n\
    def check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') ==\
    \ [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n\
    \    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpswiyq2af.py\"\
    , line 50\n    paren_levels_strings.append(paren_level\n                     \
    \          ^\nSyntaxError: '(' was never closed\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    stack =\
    \ []\n    level = 0\n    paren_level = 0\n    paren_level_stack = []\n    paren_level_stack.append(0)\n\
    \    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n\
    \    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n\
    \    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n\
    \    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n\
    \    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n\
    \    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n\
    \    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n\
    \    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n\
    \    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n\
    \    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n\
    \    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n\
    \    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n\
    \    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n\
    \    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n\
    \    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n\
    \    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n\
    \    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n\
    \    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n\
    \    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n\
    \    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n\
    \    paren_\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())')\
    \ == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3,\
    \ 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n   \
    \ check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgh9pajdv.py\"\
    , line 83, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgh9pajdv.py\"\
    , line 81, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgh9pajdv.py\"\
    , line 76, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgh9pajdv.py\"\
    , line 74, in parse_nested_parens\n    paren_\nNameError: name 'paren_' is not\
    \ defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_level\
    \ = 0\n    paren_levels = []\n    paren_levels_stack = []\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren\n\
    def check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') ==\
    \ [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n\
    \    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3gtlctor.py\"\
    , line 56\n    paren_levels_stack.append(paren\n                             ^\n\
    SyntaxError: '(' was never closed\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_stack\
    \ = []\n    paren_level = 0\n    paren_levels = []\n    paren_levels_len = 0\n\
    \    paren_levels_lens = []\n    paren_levels_lens_sum = 0\n    paren_levels_lens_sums\
    \ = []\n    paren_levels_lens_sums_sum = 0\n    paren_levels_lens_sums_sums =\
    \ []\n    paren_levels_lens_sums_sums_sum = 0\n    paren_levels_lens_sums_sums_sums\
    \ = []\n    paren_levels_lens_sums_sums_sums_sum = 0\n    paren_levels_lens_sums_sums_sums_sums\
    \ = []\n    paren_levels_lens_sums_sums_sums_sums_sum = 0\n    paren_levels_lens_sums_sums_sums_sums_sums\
    \ = []\n    paren_levels_lens_sums_sums_sums_sums_sums_sum = 0\n    paren_levels_lens_sums_sums_sums_sums_sums_sums\
    \ = []\n    paren_levels_lens_sums_sums_sums_sums_sums_sums_sum = 0\n    paren_levels_lens_sums_sums_sums_sums_sums_sums_sums\
    \ = []\n    paren_levels_lens_sums_sums_sums_sums_sums_sums_sums_sum = 0\n   \
    \ paren_levels_lens_sums_sums_sums_sums_sums_sums_sums_sums = []\n    paren_levels_lens_sums_sums_sums_sums_sums_sums_sums_sums_sum\
    \ = 0\n    paren_levels_lens_sums_sums_sums_sums_sums_sums_sums_sums_sums = []\n\
    \    paren_levels_lens_sums_sums_sums_sums_sums_sums_sums_sums_sums_sum = 0\n\
    \    paren_levels_lens_sums_sums_sums_sums_sums_sums_sums_sums_sums_sums = []\n\
    \    paren_levels_lens_sums_sums_sums_sums_sums_sums_sums_sums_sums_sums_sum =\
    \ 0\n    paren_levels_lens_sums_sums_sums_sums_sums_sums_sums_sums_sums_sums_sums\
    \ = []\n    paren_levels_lens_sums_sums_sums_sums_sums_sums_sums_sums_sums_sums_sums_sums_sum\
    \ = 0\n    paren_level\ndef check(candidate):\n    assert candidate('(()()) ((()))\
    \ () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpew458k7a.py\"\
    , line 46, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpew458k7a.py\"\
    , line 44, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpew458k7a.py\"\
    , line 39, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_stack\
    \ = []\n    paren_level = 0\n    paren_levels = []\n    paren_levels.append(paren_level)\n\
    \    paren_stack.append(paren_level)\n    for c in paren_string:\n        if c\
    \ == '(':\n            paren_level += 1\n            paren_levels.append(paren_level)\n\
    \            paren_stack.append(paren_level)\n        elif c == ')':\n       \
    \     paren_level -= 1\n            paren_levels.append(paren_level)\n       \
    \     paren_stack.append(paren_level)\n        elif c == '[':\n            paren_level\
    \ += 1\n            paren_levels.append(paren_level)\n            paren_stack.append(paren_level)\n\
    \        elif c == ']':\n            paren_level -= 1\n            paren_levels.append(paren_level)\n\
    \            paren_stack.append(paren_level)\n        elif c == ',':\n       \
    \     paren_level = 0\n            paren_levels.append(paren_level)\n        \
    \    paren_stack.append(paren_level)\n        elif c == '{':\n            paren_level\
    \ += 1\n            paren_levels.append(paren_level)\n            paren_stack.append(paren_level)\n\
    \        elif c == '}':\n            paren_level -= 1\n            paren_levels.append(paren_level)\n\
    \            paren_stack.append(paren_level)\n        elif c == '.':\n       \
    \     paren_level = 0\n            paren_levels.append(paren_level)\n        \
    \    paren_stack.append(paren_level)\n        elif c == '!':\n            paren_level\
    \ = 0\n            paren_levels.append(paren_level)\n            paren_stack.append(paren_level)\n\
    \        elif c == '?':\n            paren_level = 0\n            paren_levels.append(paren_level)\n\
    \            paren_stack.append(paren_level)\n        elif c == '\\n':\n     \
    \       paren_level = 0\n            paren_levels.append(paren_level)\n      \
    \      paren_stack.append(paren_level)\n        elif c == '\\t':\n           \
    \ paren_level = 0\n            paren_levels.append(paren_level)\n            paren_stack.append(paren_level)\n\
    \        elif c == '\\r':\n            paren_level = 0\n            paren_levels.append(paren_level)\n\
    \            paren_stack.append(paren_level)\n        elif c == '\\\\':\n    \
    \        paren_level = 0\n            paren_levels.append(paren_level)\n     \
    \       paren_stack.append(paren_level)\n        elif c == '\\'':\n          \
    \  paren_level = 0\n            paren_levels.append(paren_level)\n           \
    \ paren_stack.append(paren_level)\n        elif c == '\\\"':\n            paren_level\
    \ = 0\n            paren_levels.append(paren_level)\n            paren_\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabf97cfu.py\"\
    , line 87, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabf97cfu.py\"\
    , line 85, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabf97cfu.py\"\
    , line 80, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_stack\
    \ = []\n    paren_level = 0\n    paren_nesting_level = 0\n    paren_nesting_level_max\
    \ = 0\n    paren_nesting_level_max_index = 0\n    paren_nesting_level_max_index2\
    \ = 0\n    paren_nesting_level_max_index3 = 0\n    paren_nesting_level_max_index4\
    \ = 0\n    paren_nesting_level_max_index5 = 0\n    paren_nesting_level_max_index6\
    \ = 0\n    paren_nesting_level_max_index7 = 0\n    paren_nesting_level_max_index8\
    \ = 0\n    paren_nesting_level_max_index9 = 0\n    paren_nesting_level_max_index10\
    \ = 0\n    paren_nesting_level_max_index11 = 0\n    paren_nesting_level_max_index12\
    \ = 0\n    paren_nesting_level_max_index13 = 0\n    paren_nesting_level_max_index14\
    \ = 0\n    paren_nesting_level_max_index15 = 0\n    paren_nesting_level_max_index16\
    \ = 0\n    paren_nesting_level_max_index17 = 0\n    paren_nesting_level_max_index18\
    \ = 0\n    paren_nesting_level_max_index19 = 0\n    paren_nesting_level_max_index20\
    \ = 0\n    paren_nesting_level_max_index21 = 0\n    paren_nesting_level_max_index22\
    \ = 0\n    paren_nesting_level_max_index23 = 0\n    paren_nesting_level_max_index24\
    \ = 0\n    paren_nesting_level_max_index25 = 0\n    paren_nesting_level_max_index26\
    \ = 0\n    paren_nesting_level_max_index27 = 0\n    paren_nesting_level_max_index28\
    \ = 0\n    paren_nesting_level_max_index29 = 0\n    paren_nesting_level_max_index30\
    \ = 0\n    paren_nesting_level_max_index31 = 0\n    paren_nesting_level_max_index32\
    \ = 0\n    paren_nesting_level_max_index33 = 0\n    paren_nesting_level_max_index34\
    \ = 0\n    paren_nesting_level_max_index35 = 0\n    paren_nesting_level_max_index36\
    \ = 0\n    paren_nesting_level_max_index37 = 0\n    paren_nesting_level_max_index38\
    \ = 0\n    paren_nesting_level_max_index39 = 0\n    paren_nesting_level_max_index40\
    \ = 0\n    paren_nesting_level_max_index41 = 0\n    paren_nesting_level_max_index42\
    \ = 0\n    paren_nesting_level_max_index43 = 0\n    paren_nesting_level_max_index44\
    \ = 0\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())')\
    \ == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3,\
    \ 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n   \
    \ check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt__ebkm_.py\"\
    , line 66, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt__ebkm_.py\"\
    , line 64, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt__ebkm_.py\"\
    , line 59, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_stack\
    \ = []\n    paren_level = 0\n    paren_levels = []\n    paren_levels_count = 0\n\
    \    paren_levels_sum = 0\n\n    for char in paren_string:\n        if char ==\
    \ '(':\n            paren_stack.append(paren_level)\n            paren_level +=\
    \ 1\n            paren_levels.append(paren_level)\n            paren_levels_count\
    \ += 1\n            paren_levels_sum += paren_level\n        elif char == ')':\n\
    \            paren_levels_count -= 1\n            paren_levels_sum += paren_levels[paren_stack.pop()]\n\
    \            paren_level = paren_levels_sum\n        elif char == ' ':\n     \
    \       paren_levels_sum += paren_levels[paren_stack.pop()]\n            paren_level\
    \ = paren_levels_sum\n        else:\n            paren_levels_sum += paren_levels[paren_stack.pop()]\n\
    \            paren_levels_sum += paren_level\n            paren_level = paren_levels_sum\n\
    \n    return paren_levels\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpobkoy787.py\"\
    , line 44, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpobkoy787.py\"\
    , line 42, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpobkoy787.py\"\
    , line 37, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpobkoy787.py\"\
    , line 24, in parse_nested_parens\n    paren_levels_sum += paren_levels[paren_stack.pop()]\n\
    IndexError: list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_level\
    \ = 0\n    paren_stack = []\n    paren_stack.append(paren_level)\n    paren_stack.append(paren_level)\n\
    \    paren_stack.append(paren_level)\n    paren_stack.append(paren_level)\n  \
    \  paren_stack.append(paren_level)\n    paren_stack.append(paren_level)\n    paren_stack.append(paren_level)\n\
    \    paren_stack.append(paren_level)\n    paren_stack.append(paren_level)\n  \
    \  paren_stack.append(paren_level)\n    paren_stack.append(paren_level)\n    paren_stack.append(paren_level)\n\
    \    paren_stack.append(paren_level)\n    paren_stack.append(paren_level)\n  \
    \  paren_stack.append(paren_level)\n    paren_stack.append(paren_level)\n    paren_stack.append(paren_level)\n\
    \    paren_stack.append(paren_level)\n    paren_stack.append(paren_level)\n  \
    \  paren_stack.append(paren_level)\n    paren_stack.append(paren_level)\n    paren_stack.append(paren_level)\n\
    \    paren_stack.append(paren_level)\n    paren_stack.append(paren_level)\n  \
    \  paren_stack.append(paren_level)\n    paren_stack.append(paren_level)\n    paren_stack.append(paren_level)\n\
    \    paren_stack.append(paren_level)\n    paren_stack.append(paren_level)\n  \
    \  paren_stack.append(paren_level)\n    paren_stack.append(paren_level)\n    paren_stack.append(paren_level)\n\
    \    paren_stack.append(paren_level)\n    paren_stack.append(paren_level)\n  \
    \  paren_stack.append(paren_level)\n    paren_stack.append(paren_level)\n    paren_stack.append(paren_level)\n\
    \    paren_stack.append(paren_level)\n    paren_stack.append(paren_level)\n  \
    \  paren_stack.append(paren_level)\n    paren_stack.append(paren_level)\n    paren_stack.append(paren_level)\n\
    \    paren_stack.append(paren_level)\n    paren_stack.append(paren_level)\n  \
    \  paren_stack.append(paren_level)\n    paren_stack.append(paren_level)\n    paren_stack.append(paren_level)\n\
    \    paren_stack.append(paren_level)\n    paren_stack.append(paren_level)\n  \
    \  paren_stack.append(paren_level)\n    paren_stack.append(paren_level)\n    paren_stack.append(paren_level)\n\
    \    paren_stack.append(paren_level)\n    paren_stack.append(paren_level)\n  \
    \  paren_stack.append(paren_level)\n    paren_stack.append(\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprwhwoz4_.py\"\
    , line 66\n    paren_stack.append(\n                      ^\nSyntaxError: '('\
    \ was never closed\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_stack\
    \ = []\n    paren_level = 0\n    paren_nesting = 0\n    for char in paren_string:\n\
    \        if char == '(':\n            paren_stack.append(paren_nesting)\n    \
    \        paren_nesting += 1\n        elif char == ')':\n            paren_nesting\
    \ -= 1\n            paren_stack.pop()\n        elif char == ' ':\n           \
    \ if paren_nesting == 0:\n                paren_level -= 1\n    return paren_stack\n\
    \ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') ==\
    \ [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n\
    \    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcdlfga05.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcdlfga05.py\"\
    , line 30, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcdlfga05.py\"\
    , line 25, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    level =\
    \ 0\n    paren_stack = []\n    for c in paren_string:\n        if c == '(':\n\
    \            paren_stack.append(level)\n            level += 1\n        elif c\
    \ == ')':\n            level -= 1\n            if level == 0:\n              \
    \  paren_stack.pop()\n            else:\n                paren_stack.append(level)\n\
    \    return paren_stack\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppo1r8f7e.py\"\
    , line 31, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppo1r8f7e.py\"\
    , line 29, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppo1r8f7e.py\"\
    , line 24, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_level\
    \ = 0\n    paren_stack = []\n    paren_stack.append(paren_string)\n    paren_level_string\
    \ = paren_string\n    while paren_level != 0:\n        paren_level_string = paren_stack.pop()\n\
    \        paren_level = paren_level_string.count('(') - paren_level_string.count(')')\n\
    \    \n    return paren_level\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsd09r4qp.py\"\
    , line 28, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsd09r4qp.py\"\
    , line 26, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsd09r4qp.py\"\
    , line 21, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    stack =\
    \ []\n    level = 0\n    paren_level = 0\n    for char in paren_string:\n    \
    \    if char == '(':\n            paren_level += 1\n            stack.append(level)\n\
    \        elif char == ')':\n            paren_level -= 1\n            level -=\
    \ stack.pop()\n        else:\n            level += 1\n    return level\n\ndef\
    \ check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n\
    \    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2tm89n4m.py\"\
    , line 31, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2tm89n4m.py\"\
    , line 29, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2tm89n4m.py\"\
    , line 24, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_level\
    \ = 0\n    paren_levels = []\n    paren_levels_stack = []\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren\n\
    def check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') ==\
    \ [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n\
    \    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8q8n8hxo.py\"\
    , line 56\n    paren_levels_stack.append(paren\n                             ^\n\
    SyntaxError: '(' was never closed\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_stack\
    \ = []\n    paren_level = 0\n    paren_levels = []\n    paren_levels_len = 0\n\
    \    paren_levels_lens = []\n    for c in paren_string:\n        if c == '(':\n\
    \            paren_stack.append(paren_level)\n            paren_level += 1\n \
    \       elif c == ')':\n            paren_level -= 1\n            paren_levels.append(paren_level)\n\
    \            paren_levels_lens.append(len(paren_levels))\n            paren_levels_lens.append(len(paren_levels_lens))\n\
    \            paren_levels_len = max(paren_levels_len)\n        elif c == ' ':\n\
    \            if paren_level == 0:\n                paren_levels.append(0)\n  \
    \              paren_levels_lens.append(0)\n            else:\n              \
    \  paren_levels.append(paren_level)\n                paren_levels_lens.append(len(paren_levels))\n\
    \                paren_levels_lens.append(len(paren_levels_lens))\n          \
    \      paren_levels_len = max(paren_levels_len)\n        else:\n            paren_levels.append(paren_level)\n\
    \            paren_levels_lens.append(len(paren_levels))\n            paren_levels_lens.append(len(paren_levels_lens))\n\
    \            paren_levels_len = max(paren_levels_len)\n    \n    paren_levels_lens.append(len(paren_levels))\n\
    \    paren_levels_lens.append(len(paren_levels_lens))\n    \n    paren_levels_len\
    \ = max(paren_levels_lens)\n    \n    paren_levels_lens.append(len(paren_levels))\n\
    \    paren_levels_lens.append(len(paren_levels_lens))\n    \n    paren_levels_len\
    \ = max(paren_levels_lens)\n    \n    paren_levels_lens.append(len(paren_levels))\n\
    \    paren_levels_lens.append(len(paren_levels_lens))\n    \n    paren_levels_len\
    \ = max(paren_levels_lens)\n    \n    paren_levels_lens.append(len(paren_levels))\n\
    \    paren_levels_lens.append(len(paren_levels_lens))\n    \n    paren_levels_len\
    \ = max(paren_levels_lens)\n    \n    paren_levels_lens.append(len(paren_levels))\n\
    \    paren_levels_lens.append(len(paren_levels_lens))\n    \n    paren_levels_len\
    \ = max(paren_levels_lens)\n    \n    paren_levels_lens.append(len(paren_levels))\n\
    \    paren_levels_lens.append(len(paren_levels_lens))\n\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6d8rwd2s.py\"\
    , line 75, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6d8rwd2s.py\"\
    , line 73, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6d8rwd2s.py\"\
    , line 68, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6d8rwd2s.py\"\
    , line 23, in parse_nested_parens\n    paren_levels_len = max(paren_levels_len)\n\
    TypeError: 'int' object is not iterable\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_level\
    \ = 0\n    paren_levels = []\n    paren_levels.append(paren_level)\n    paren_level\
    \ = 1\n    paren_levels.append(paren_level)\n    paren_level = 1\n    paren_levels.append(paren_level)\n\
    \    paren_level = 1\n    paren_levels.append(paren_level)\n    paren_level =\
    \ 1\n    paren_levels.append(paren_level)\n    paren_level = 1\n    paren_levels.append(paren_level)\n\
    \    paren_level = 1\n    paren_levels.append(paren_level)\n    paren_level =\
    \ 1\n    paren_levels.append(paren_level)\n    paren_level = 1\n    paren_levels.append(paren_level)\n\
    \    paren_level = 1\n    paren_levels.append(paren_level)\n    paren_level =\
    \ 1\n    paren_levels.append(paren_level)\n    paren_level = 1\n    paren_levels.append(paren_level)\n\
    \    paren_level = 1\n    paren_levels.append(paren_level)\n    paren_level =\
    \ 1\n    paren_levels.append(paren_level)\n    paren_level = 1\n    paren_levels.append(paren_level)\n\
    \    paren_level = 1\n    paren_levels.append(paren_level)\n    paren_level =\
    \ 1\n    paren_levels.append(paren_level)\n    paren_level = 1\n    paren_levels.append(paren_level)\n\
    \    paren_level = 1\n    paren_levels.append(paren_level)\n    paren_level =\
    \ 1\n    paren_levels.append(paren_level)\n    paren_level = 1\n    paren_levels.append(paren_level)\n\
    \    paren_level = 1\n    paren_levels.append(paren_level)\n    paren_level =\
    \ 1\n    paren_levels.append(paren_level)\n    paren_level = 1\n    paren_levels.append(paren_level)\n\
    \    paren_level = 1\n    paren_levels.append(paren_level)\n    paren_level =\
    \ 1\n    paren_levels.append(paren_level)\n    paren_level = 1\n    paren_levels.append(paren_level)\n\
    \    paren_level = 1\n    paren_levels.append(paren_level)\n    paren_level =\
    \ 1\n    paren_levels.append(paren_level)\n    paren_level = 1\n    paren_levels.append(paren_level)\n\
    \    paren_level = 1\n    paren_levels.append(paren_level)\n    paren_level =\
    \ 1\n    paren_levels.append(paren_level)\n    paren_level = 1\n    paren_levels.append(paren_level)\n\
    \    paren_level = 1\n    paren_levels.append(\ndef check(candidate):\n    assert\
    \ candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('()\
    \ (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkqpu67cf.py\"\
    , line 77\n    paren_levels.append(\n                       ^\nSyntaxError: '('\
    \ was never closed\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_level\
    \ = 0\n    paren_stack = []\n    paren_stack.append(paren_string)\n    paren_level_string\
    \ = paren_string\n    paren_level_length = len(paren_string)\n    paren_level_string\
    \ = paren_string\n    paren_level_length = len(paren_string)\n    paren_level_string\
    \ = paren_string\n    paren_level_length = len(paren_string)\n    paren_level_string\
    \ = paren_string\n    paren_level_length = len(paren_string)\n    paren_level_string\
    \ = paren_string\n    paren_level_length = len(paren_string)\n    paren_level_string\
    \ = paren_string\n    paren_level_length = len(paren_string)\n    paren_level_string\
    \ = paren_string\n    paren_level_length = len(paren_string)\n    paren_level_string\
    \ = paren_string\n    paren_level_length = len(paren_string)\n    paren_level_string\
    \ = paren_string\n    paren_level_length = len(paren_string)\n    paren_level_string\
    \ = paren_string\n    paren_level_length = len(paren_string)\n    paren_level_string\
    \ = paren_string\n    paren_level_length = len(paren_string)\n    paren_level_string\
    \ = paren_string\n    paren_level_length = len(paren_string)\n    paren_level_string\
    \ = paren_string\n    paren_level_length = len(paren_string)\n    paren_level_string\
    \ = paren_string\n    paren_level_length = len(paren_string)\n    paren_level_string\
    \ = paren_string\n    paren_level_length = len(paren_string)\n    paren_level_string\
    \ = paren_string\n    paren_level_length = len(paren_string)\n    paren_level_string\
    \ = paren_string\n    paren_level_length = len(paren_string)\n    paren_level_string\
    \ = paren_string\n    paren_level_length = len(paren_string)\n    paren_level_string\
    \ = paren_string\n    paren_level_length = len(paren_string)\n    paren_level_string\
    \ = paren_string\n    paren_level_length = len(paren_string)\n    paren_level_string\
    \ = paren_string\n    paren_level_length = len(paren_string)\n    paren_level_string\
    \ = paren_string\n    paren_level_length = len(paren_string)\n    paren_level_string\
    \ = paren_string\n    paren_level_length = len(paren_string)\n    paren_level_string\
    \ = paren_string\n    paren_level_length = len(paren_string)\n    paren_level_string\
    \ = paren_string\n    paren_level_length = len(paren_string)\n    paren_level_string\
    \ = paren_string\n    paren_level_length = len(paren_string)\n    paren_level_string\
    \ = paren_string\n    paren_level_length = len(paren_string)\n    paren_level_string\n\
    def check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') ==\
    \ [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n\
    \    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpr84_q4_u.py\"\
    , line 75, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpr84_q4_u.py\"\
    , line 73, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpr84_q4_u.py\"\
    , line 68, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_stack\
    \ = []\n    paren_level = 0\n    paren_levels = []\n    paren_levels_str = \"\"\
    \n    for char in paren_string:\n        if char == \"(\":\n            paren_stack.append(paren_level)\n\
    \            paren_level += 1\n            paren_levels_str += \"(\" + str(paren_level)\
    \ + \")\"\n        elif char == \")\":\n            paren_level -= 1\n       \
    \     paren_levels_str += \"(\" + str(paren_level) + \")\"\n        elif char\
    \ == \" \":\n            paren_levels_str += \" \"\n        elif char == \",\"\
    :\n            paren_levels_str += \",\"\n        elif char == \"{\":\n      \
    \      paren_levels.append(paren_level)\n            paren_level += 1\n      \
    \      paren_levels_str += \"(\" + str(paren_level) + \")\"\n        elif char\
    \ == \"}\":\n            paren_levels.pop()\n            paren_levels_str += \"\
    (\" + str(paren_level) + \")\"\n        elif char == \"[\":\n            paren_levels.append(paren_level)\n\
    \            paren_level += 1\n            paren_levels_str += \"(\" + str(paren_level)\
    \ + \")\"\n        elif char == \"]\":\n            paren_levels.pop()\n     \
    \       paren_levels_str += \"(\" + str(paren_level) + \")\"\n        elif char\
    \ == \"<\":\n            paren_levels.append(paren_level)\n            paren_level\
    \ += 1\n            paren_levels_str += \"(\" + str(paren_level) + \")\"\n   \
    \     elif char == \">\":\n            paren_levels.pop()\n            paren_levels_str\
    \ += \"(\" + str(paren_level) + \")\"\n        elif char == \"(\":\n         \
    \   paren_levels.append(paren_level)\n            paren_level += 1\n         \
    \   paren_levels_str += \"(\" + str(paren_level) + \")\"\n        elif char ==\
    \ \")\":\n            paren_levels.pop()\n            paren_levels_str += \"(\"\
    \ + str(paren_level) + \")\"\n        elif char == \"[\":\n            paren_levels.append(paren_level)\n\
    \            paren_level += 1\n            paren_levels_str += \"(\" + str(paren_level)\
    \ + \")\"\n        elif char == \"]\":\n            paren_levels.pop()\n     \
    \       paren_levels_str += \"(\" + str(paren_level) + \")\"\n        elif char\
    \ == \"{\":\n            paren_levels.append(paren_level)\n            paren_level\
    \ += 1\n            paren_levels_str += \"(\" + str(paren_level) + \")\"\n   \
    \     elif char == \"}\":\n            paren_levels.pop()\n            paren_levels_str\
    \ += \"(\" + str(\ndef check(candidate):\n    assert candidate('(()()) ((()))\
    \ () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2wmkgb7l.py\"\
    , line 66\n    paren_levels_str += \"(\" + str(\n                            \
    \     ^\nSyntaxError: '(' was never closed\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_level\
    \ = 0\n    paren_levels = []\n    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2xel1oa1.py\"\
    , line 66\n    paren_levels.append(\n                       ^\nSyntaxError: '('\
    \ was never closed\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    stack =\
    \ []\n    level = 0\n    paren_level = 0\n    paren_level_stack = []\n    paren_level_stack.append(0)\n\
    \    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n\
    \    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n\
    \    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n\
    \    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n\
    \    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n\
    \    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n\
    \    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n\
    \    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n\
    \    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n\
    \    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n\
    \    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n\
    \    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n\
    \    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n\
    \    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n\
    \    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n\
    \    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n\
    \    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n\
    \    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n\
    \    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n\
    \    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n    paren_level_stack.append(0)\n\
    \    paren_\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())')\
    \ == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3,\
    \ 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n   \
    \ check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpoz3uhrfl.py\"\
    , line 83, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpoz3uhrfl.py\"\
    , line 81, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpoz3uhrfl.py\"\
    , line 76, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpoz3uhrfl.py\"\
    , line 74, in parse_nested_parens\n    paren_\nNameError: name 'paren_' is not\
    \ defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    stack =\
    \ []\n    level = 0\n    paren_level = 0\n    paren_levels = []\n    for char\
    \ in paren_string:\n        if char == '(':\n            paren_level += 1\n  \
    \          paren_levels.append(paren_level)\n        elif char == ')':\n     \
    \       paren_level -= 1\n            paren_levels.append(paren_level)\n     \
    \   elif char == ' ':\n            level += 1\n            paren_levels.append(level)\n\
    \        elif char == '\\n':\n            level -= 1\n            paren_levels.append(level)\n\
    \        elif char == '\\t':\n            level -= 1\n            paren_levels.append(level)\n\
    \        elif char == '\\r':\n            level -= 1\n            paren_levels.append(level)\n\
    \        elif char == '\\v':\n            level -= 1\n            paren_levels.append(level)\n\
    \        elif char == '\\f':\n            level -= 1\n            paren_levels.append(level)\n\
    \        elif char == '\\a':\n            level -= 1\n            paren_levels.append(level)\n\
    \        elif char == '\\e':\n            level -= 1\n            paren_levels.append(level)\n\
    \        elif char == '\\v':\n            level -= 1\n            paren_levels.append(level)\n\
    \        elif char == '\\b':\n            level -= 1\n            paren_levels.append(level)\n\
    \        elif char == '\\e':\n            level -= 1\n            paren_levels.append(level)\n\
    \        elif char == '\\v':\n            level -= 1\n            paren_levels.append(level)\n\
    \        elif char == '\\b':\n            level -= 1\n            paren_levels.append(level)\n\
    \        elif char == '\\e':\n            level -= 1\n            paren_levels.append(level)\n\
    \        elif char == '\\v':\n            level -= 1\n            paren_levels.append(level)\n\
    \        elif char == '\\b':\n            level -= 1\n            paren_levels.append(level)\n\
    \        elif char == '\\e':\n            level -= 1\n            paren_levels.append(level)\n\
    \        elif char == '\\v':\n            level -= 1\n            paren_levels.append(level)\n\
    \        elif char == '\\b':\n            level -= 1\n            paren_levels.append(level)\n\
    \        elif char == '\\e':\n            level -= 1\n            paren_levels.append(level)\n\
    \        elif char == '\\v':\n            level -= 1\n            paren_levels.append(level)\n\
    \        elif char == '\\b':\n            level -= 1\n            paren_levels.append(level)\n\
    \        elif char == '\\e':\n            level -= 1\n            paren_levels.append(level)\n\
    \        elif char == '\\v':\n            level -= 1\n            paren_levels.append(level)\n\
    \        elif char == '\\b':\n            level -= 1\n            paren_levels.append(level)\n\
    \        elif char == '\\e':\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjw2srxzz.py\"\
    , line 96\n    def check(candidate):\nIndentationError: expected an indented block\
    \ after 'elif' statement on line 95\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_level\
    \ = 0\n    paren_levels = []\n    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuyw2bllv.py\"\
    , line 66\n    paren_levels.append(\n                       ^\nSyntaxError: '('\
    \ was never closed\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_level\
    \ = 0\n    paren_levels = []\n    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    paren_levels.append(\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgxccfsqu.py\"\
    , line 66\n    paren_levels.append(\n                       ^\nSyntaxError: '('\
    \ was never closed\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_stack\
    \ = []\n    level = 0\n    paren_level = 0\n    paren_level_stack = []\n    paren_level_stack.append(0)\n\
    \    for c in paren_string:\n        if c == '(':\n            paren_stack.append(c)\n\
    \            paren_level += 1\n            paren_level_stack.append(paren_level)\n\
    \        elif c == ')':\n            paren_level -= 1\n            paren_level_stack.pop()\n\
    \            if paren_level == 0:\n                paren_level_stack.append(paren_level)\n\
    \                level = len(paren_level_stack)\n                paren_stack.pop()\n\
    \            else:\n                paren_stack.append(c)\n        elif c == '\
    \ ':\n            if paren_level == 0:\n                paren_stack.append(c)\n\
    \            else:\n                paren_stack.pop()\n                paren_stack.append(c)\n\
    \        else:\n            paren_stack.append(c)\n    return level\n\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphihdmuly.py\"\
    , line 46, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphihdmuly.py\"\
    , line 44, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphihdmuly.py\"\
    , line 39, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    level =\
    \ 0\n    paren_stack = []\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    for index, char in enumerate(paren_string):\n        if char == '(':\n  \
    \          paren_stack.append(0)\n            level += 1\n        elif char ==\
    \ ')':\n            paren_stack.pop()\n            level -= 1\n        elif char\
    \ == ' ':\n            if paren_stack[-1] == 0:\n                paren_stack.pop()\n\
    \            else:\n                paren_stack[-1] += 1\n    return paren_stack\n\
    \ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') ==\
    \ [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n\
    \    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5uc5i9cq.py\"\
    , line 35, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5uc5i9cq.py\"\
    , line 33, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5uc5i9cq.py\"\
    , line 28, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5uc5i9cq.py\"\
    , line 21, in parse_nested_parens\n    if paren_stack[-1] == 0:\nIndexError: list\
    \ index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_stack\
    \ = []\n    paren_level = 0\n    paren_levels = []\n    paren_levels.append(paren_level)\n\
    \    paren_levels.append(paren_level)\n    for paren in paren_string.split():\n\
    \        if paren == '(':\n            paren_stack.append(paren_level)\n     \
    \       paren_level += 1\n        elif paren == ')':\n            paren_level\
    \ -= 1\n            paren_levels.append(paren_level)\n        elif paren == '[':\n\
    \            paren_stack.append(paren_level)\n            paren_level += 1\n \
    \       elif paren == ']':\n            paren_level -= 1\n            paren_levels.append(paren_level)\n\
    \        elif paren == '{':\n            paren_stack.append(paren_level)\n   \
    \         paren_level += 1\n        elif paren == '}':\n            paren_level\
    \ -= 1\n            paren_levels.append(paren_level)\n        elif paren == ',':\n\
    \            paren_levels.append(paren_level)\n    return paren_levels\n\ndef\
    \ check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n\
    \    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptya_w_n1.py\"\
    , line 45, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptya_w_n1.py\"\
    , line 43, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptya_w_n1.py\"\
    , line 38, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_level\
    \ = 0\n    paren_levels = []\n    paren_levels_stack = []\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren\n\
    def check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') ==\
    \ [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n\
    \    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt7644s_8.py\"\
    , line 56\n    paren_levels_stack.append(paren\n                             ^\n\
    SyntaxError: '(' was never closed\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_stack\
    \ = []\n    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())')\
    \ == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3,\
    \ 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n   \
    \ check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6f_j0c9m.py\"\
    , line 91, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6f_j0c9m.py\"\
    , line 89, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6f_j0c9m.py\"\
    , line 84, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6f_j0c9m.py\"\
    , line 82, in parse_nested_parens\n    paren\nNameError: name 'paren' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_stack\
    \ = []\n    paren_level = 0\n    paren_nesting = 0\n    for c in paren_string:\n\
    \        if c == '(':\n            paren_stack.append(paren_nesting)\n       \
    \     paren_nesting += 1\n        elif c == ')':\n            paren_nesting -=\
    \ 1\n            if paren_nesting == 0:\n                paren_stack.pop()\n \
    \       elif c == '[':\n            paren_stack.append(paren_nesting)\n      \
    \      paren_nesting += 1\n        elif c == ']':\n            paren_nesting -=\
    \ 1\n            if paren_nesting == 0:\n                paren_stack.pop()\n \
    \   return paren_stack\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpitwcpnd6.py\"\
    , line 37, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpitwcpnd6.py\"\
    , line 35, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpitwcpnd6.py\"\
    , line 30, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_stack\
    \ = []\n    level = 0\n    paren_level = 0\n    paren_levels = []\n    paren_levels_string\
    \ = \"\"\n    for char in paren_string:\n        if char == \"(\":\n         \
    \   paren_stack.append(char)\n            paren_level += 1\n            paren_levels.append(paren_level)\n\
    \            paren_levels_string += char\n        elif char == \")\":\n      \
    \      paren_level -= 1\n            paren_levels.append(paren_level)\n      \
    \      paren_levels_string += char\n        elif char == \" \":\n            if\
    \ paren_stack:\n                paren_level -= 1\n                paren_levels.append(paren_level)\n\
    \                paren_levels_string += char\n            else:\n            \
    \    paren_levels_string += char\n        else:\n            paren_levels_string\
    \ += char\n    return paren_levels\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpty2e2ge1.py\"\
    , line 43, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpty2e2ge1.py\"\
    , line 41, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpty2e2ge1.py\"\
    , line 36, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_stack\
    \ = []\n    paren_level = 0\n    paren_levels = []\n    paren_levels.append(paren_level)\n\
    \    paren_stack.append(paren_level)\n    paren_level = 1\n    paren_levels.append(paren_level)\n\
    \    paren_stack.append(paren_level)\n    paren_level = 1\n    paren_levels.append(paren_level)\n\
    \    paren_stack.append(paren_level)\n    paren_level = 1\n    paren_levels.append(paren_level)\n\
    \    paren_stack.append(paren_level)\n    paren_level = 1\n    paren_levels.append(paren_level)\n\
    \    paren_stack.append(paren_level)\n    paren_level = 1\n    paren_levels.append(paren_level)\n\
    \    paren_stack.append(paren_level)\n    paren_level = 1\n    paren_levels.append(paren_level)\n\
    \    paren_stack.append(paren_level)\n    paren_level = 1\n    paren_levels.append(paren_level)\n\
    \    paren_stack.append(paren_level)\n    paren_level = 1\n    paren_levels.append(paren_level)\n\
    \    paren_stack.append(paren_level)\n    paren_level = 1\n    paren_levels.append(paren_level)\n\
    \    paren_stack.append(paren_level)\n    paren_level = 1\n    paren_levels.append(paren_level)\n\
    \    paren_stack.append(paren_level)\n    paren_level = 1\n    paren_levels.append(paren_level)\n\
    \    paren_stack.append(paren_level)\n    paren_level = 1\n    paren_levels.append(paren_level)\n\
    \    paren_stack.append(paren_level)\n    paren_level = 1\n    paren_levels.append(paren_level)\n\
    \    paren_stack.append(paren_level)\n    paren_level = 1\n    paren_levels.append(paren_level)\n\
    \    paren_stack.append(paren_level)\n    paren_level = 1\n    paren_levels.append(paren_level)\n\
    \    paren_stack.append(paren_level)\n    paren_level = 1\n    paren_levels.append(paren_level)\n\
    \    paren_stack.append(paren_level)\n    paren_level = 1\n    paren_levels.append(paren_level)\n\
    \    paren_stack.append(paren_level)\n    paren_level = 1\n    paren_levels.append(paren_level)\n\
    \    paren_stack.append(paren_level)\n    paren_level = 1\n    paren_levels.append(paren_level)\n\
    \    paren_stack.append(paren_level)\n    paren_level = 1\n    paren_levels.append(paren_level)\n\
    \    paren_stack.append(\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc8zimlx9.py\"\
    , line 73\n    paren_stack.append(\n                      ^\nSyntaxError: '('\
    \ was never closed\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_stack\
    \ = []\n    paren_level = 0\n    paren_nesting = 0\n    paren_levels = []\n  \
    \  for c in paren_string:\n        if c == '(':\n            paren_stack.append(paren_nesting)\n\
    \            paren_nesting += 1\n        elif c == ')':\n            paren_nesting\
    \ -= 1\n            paren_stack.pop()\n        elif c == '[':\n            paren_stack.append(paren_nesting)\n\
    \            paren_nesting += 1\n        elif c == ']':\n            paren_nesting\
    \ -= 1\n            paren_stack.pop()\n        elif c == '{':\n            paren_stack.append(paren_nesting)\n\
    \            paren_nesting += 1\n        elif c == '}':\n            paren_nesting\
    \ -= 1\n            paren_stack.pop()\n        elif c == '[' or c == '{':\n  \
    \          paren_levels.append(paren_nesting)\n            paren_nesting += 1\n\
    \        elif c == ']' or c == '}':\n            paren_nesting -= 1\n        \
    \    paren_levels.pop()\n    return paren_levels\n\ndef check(candidate):\n  \
    \  assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp63i8sk2j.py\"\
    , line 48, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp63i8sk2j.py\"\
    , line 46, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp63i8sk2j.py\"\
    , line 41, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_stack\
    \ = []\n    level = 0\n    paren_level = 0\n    for char in paren_string:\n  \
    \      if char == '(':\n            paren_stack.append(level)\n            paren_level\
    \ += 1\n        elif char == ')':\n            paren_stack.pop()\n           \
    \ paren_level -= 1\n        elif char == ' ':\n            if paren_stack:\n \
    \               level = paren_stack[-1]\n            else:\n                level\
    \ = 0\n        else:\n            level = 0\n    return paren_stack\n\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd5rsqtc7.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd5rsqtc7.py\"\
    , line 34, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd5rsqtc7.py\"\
    , line 29, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_stack\
    \ = []\n    level = 0\n    paren_level = 0\n    paren_level_stack = []\n    paren_level_stack.append(0)\n\
    \    paren_level_stack.append(0)\n    for char in paren_string:\n        if char\
    \ == '(':\n            paren_stack.append(level)\n            paren_level_stack.append(paren_level)\n\
    \            level += 1\n        elif char == ')':\n            paren_level =\
    \ paren_stack.pop()\n            paren_level_stack.pop()\n            level -=\
    \ 1\n        elif char == ' ':\n            paren_level = max(paren_level_stack[-2],\
    \ paren_level)\n            paren_level_stack[-2] = paren_level\n    return paren_stack\n\
    \n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())')\
    \ == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3,\
    \ 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n   \
    \ check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqkaejhwi.py\"\
    , line 38, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqkaejhwi.py\"\
    , line 36, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqkaejhwi.py\"\
    , line 31, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_level\
    \ = 0\n    paren_stack = []\n    paren_levels = []\n    paren_levels_stack = []\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())')\
    \ == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3,\
    \ 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n   \
    \ check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9t_h1v5g.py\"\
    , line 66, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9t_h1v5g.py\"\
    , line 64, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9t_h1v5g.py\"\
    , line 59, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9t_h1v5g.py\"\
    , line 57, in parse_nested_parens\n    paren\nNameError: name 'paren' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_stack\
    \ = []\n    level = 0\n    paren_level = 0\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    def check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') ==\
    \ [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n\
    \    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2di_0txt.py\"\
    , line 91, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2di_0txt.py\"\
    , line 89, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2di_0txt.py\"\
    , line 84, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_stack\
    \ = []\n    paren_level = 0\n    paren_levels = []\n    paren_levels.append(paren_level)\n\
    \    paren_stack.append(paren_level)\n    paren_levels.append(paren_level)\n \
    \   for char in paren_string:\n        if char == '(':\n            paren_level\
    \ += 1\n            paren_stack.append(paren_level)\n        elif char == ')':\n\
    \            paren_level -= 1\n            paren_stack.pop()\n        elif char\
    \ == ' ':\n            while paren_stack[-1] > 0 and paren_stack[-1] < len(paren_levels)\
    \ - 1:\n                paren_levels.pop()\n            paren_levels.append(paren_level)\n\
    \    return paren_levels\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu4cbwb19.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu4cbwb19.py\"\
    , line 34, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu4cbwb19.py\"\
    , line 29, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_stack\
    \ = []\n    paren_stack.append(0)\n    paren_level = 0\n    paren_level_list =\
    \ []\n    for paren in paren_string:\n        if paren == '(':\n            paren_stack.append(paren_level\
    \ + 1)\n        elif paren == ')':\n            paren_stack.pop()\n          \
    \  paren_level -= 1\n            paren_level_list.append(paren_level)\n      \
    \  else:\n            paren_level_list.append(paren_level)\n    return paren_level_list\n\
    \ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') ==\
    \ [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n\
    \    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphgmcvist.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphgmcvist.py\"\
    , line 30, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphgmcvist.py\"\
    , line 25, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_stack\
    \ = []\n    paren_level = 0\n    paren_levels = []\n    paren_levels_str = \"\"\
    \n    paren_levels_str_len = len(paren_levels_str)\n\n    for char in paren_string:\n\
    \        if char == \"(\":\n            paren_stack.append(paren_level)\n    \
    \        paren_level += 1\n            paren_levels_str += \"(\" + str(paren_level)\
    \ + \")\"\n            paren_levels_str_len += 2\n        elif char == \")\":\n\
    \            paren_level -= paren_stack.pop()\n            paren_levels_str +=\
    \ \")\"\n            paren_levels_str_len += 1\n        elif char == \" \":\n\
    \            paren_levels_str += \" \"\n            paren_levels_str_len += 1\n\
    \        else:\n            paren_levels_str += char\n            paren_levels_str_len\
    \ += 1\n\n    paren_levels.append(paren_level)\n    paren_levels_str = paren_levels_str[:paren_levels_str_len]\n\
    \    return paren_levels\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpb140254u.py\"\
    , line 44, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpb140254u.py\"\
    , line 42, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpb140254u.py\"\
    , line 37, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_stack\
    \ = []\n    paren_level = 0\n    paren_levels = []\n    paren_levels.append(0)\n\
    \    for c in paren_string:\n        if c == '(':\n            paren_stack.append(paren_level)\n\
    \            paren_level += 1\n        elif c == ')':\n            paren_level\
    \ = paren_stack.pop()\n            paren_levels.append(paren_level)\n        else:\n\
    \            paren_level = 0\n            paren_levels.append(0)\n    return paren_levels\n\
    \ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') ==\
    \ [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n\
    \    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6bmzdu_m.py\"\
    , line 33, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6bmzdu_m.py\"\
    , line 31, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6bmzdu_m.py\"\
    , line 26, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_stack\
    \ = []\n    level = 0\n    paren_level = 0\n    paren_nesting_level = 0\n    paren_nesting_level_max\
    \ = 0\n    paren_nesting_level_max_index = 0\n    paren_nesting_level_max_index2\
    \ = 0\n    paren_nesting_level_max_index3 = 0\n    paren_nesting_level_max_index4\
    \ = 0\n    paren_nesting_level_max_index5 = 0\n    paren_nesting_level_max_index6\
    \ = 0\n    paren_nesting_level_max_index7 = 0\n    paren_nesting_level_max_index8\
    \ = 0\n    paren_nesting_level_max_index9 = 0\n    paren_nesting_level_max_index10\
    \ = 0\n    paren_nesting_level_max_index11 = 0\n    paren_nesting_level_max_index12\
    \ = 0\n    paren_nesting_level_max_index13 = 0\n    paren_nesting_level_max_index14\
    \ = 0\n    paren_nesting_level_max_index15 = 0\n    paren_nesting_level_max_index16\
    \ = 0\n    paren_nesting_level_max_index17 = 0\n    paren_nesting_level_max_index18\
    \ = 0\n    paren_nesting_level_max_index19 = 0\n    paren_nesting_level_max_index20\
    \ = 0\n    paren_nesting_level_max_index21 = 0\n    paren_nesting_level_max_index22\
    \ = 0\n    paren_nesting_level_max_index23 = 0\n    paren_nesting_level_max_index24\
    \ = 0\n    paren_nesting_level_max_index25 = 0\n    paren_nesting_level_max_index26\
    \ = 0\n    paren_nesting_level_max_index27 = 0\n    paren_nesting_level_max_index28\
    \ = 0\n    paren_nesting_level_max_index29 = 0\n    paren_nesting_level_max_index30\
    \ = 0\n    paren_nesting_level_max_index31 = 0\n    paren_nesting_level_max_index32\
    \ = 0\n    paren_nesting_level_max_index33 = 0\n    paren_nesting_level_max_index34\
    \ = 0\n    paren_nesting_level_max_index35 = 0\n    paren_nesting_level_max_index36\
    \ = 0\n    paren_nesting_level_max_index37 = 0\n    paren_nesting_level_max_index38\
    \ = 0\n    paren_nesting_level_max_index39 = 0\n    paren_nesting_level_max_index40\
    \ = 0\n    paren_nesting_level_max_index41 = 0\n    paren_nesting_level_max_index42\
    \ = 0\n    paren_nesting_level_max_index43 = 0\n    paren_nesting_level_max_\n\
    def check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') ==\
    \ [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n\
    \    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphiguezzq.py\"\
    , line 66, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphiguezzq.py\"\
    , line 64, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphiguezzq.py\"\
    , line 59, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphiguezzq.py\"\
    , line 57, in parse_nested_parens\n    paren_nesting_level_max_\nNameError: name\
    \ 'paren_nesting_level_max_' is not defined. Did you mean: 'paren_nesting_level_max'?\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_stack\
    \ = []\n    level = 0\n    paren_level = 0\n    paren_nesting = 0\n    for char\
    \ in paren_string:\n        if char == '(':\n            paren_stack.append(char)\n\
    \            paren_level += 1\n            paren_nesting += 1\n        elif char\
    \ == ')':\n            paren_nesting -= 1\n            if paren_nesting == 0:\n\
    \                paren_stack.pop()\n                paren_level -= 1\n       \
    \ elif char == ' ':\n            if paren_stack:\n                paren_stack.pop()\n\
    \                paren_level -= 1\n        else:\n            paren_stack.append(char)\n\
    \            paren_level += 1\n            paren_nesting += 1\n    return paren_level\n\
    \ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') ==\
    \ [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n\
    \    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphoun3u12.py\"\
    , line 41, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphoun3u12.py\"\
    , line 39, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphoun3u12.py\"\
    , line 34, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    stack =\
    \ []\n    level = 0\n    paren_level = 0\n    paren_levels = []\n    for char\
    \ in paren_string:\n        if char == '(':\n            paren_level += 1\n  \
    \          paren_levels.append(paren_level)\n            stack.append(char)\n\
    \        elif char == ')':\n            paren_level -= 1\n            paren_levels.append(paren_level)\n\
    \            stack.pop()\n        elif char == ' ':\n            level += 1\n\
    \            paren_levels.append(level)\n            stack.append(char)\n    \
    \    elif char == '\\n':\n            level -= 1\n            paren_levels.append(level)\n\
    \            stack.pop()\n        elif char == '\\t':\n            level -= 1\n\
    \            paren_levels.append(level)\n            stack.pop()\n        elif\
    \ char == '\\r':\n            level -= 1\n            paren_levels.append(level)\n\
    \            stack.pop()\n        elif char == '\\\\':\n            level -= 1\n\
    \            paren_levels.append(level)\n            stack.pop()\n        elif\
    \ char == '\"':\n            level -= 1\n            paren_levels.append(level)\n\
    \            stack.pop()\n        elif char == '\\'':\n            level -= 1\n\
    \            paren_levels.append(level)\n            stack.pop()\n        elif\
    \ char == '\\\\':\n            level -= 1\n            paren_levels.append(level)\n\
    \            stack.pop()\n        elif char == '[':\n            level -= 1\n\
    \            paren_levels.append(level)\n            stack.pop()\n        elif\
    \ char == ']':\n            level -= 1\n            paren_levels.append(level)\n\
    \            stack.pop()\n        elif char == '{':\n            level -= 1\n\
    \            paren_levels.append(level)\n            stack.pop()\n        elif\
    \ char == '}':\n            level -= 1\n            paren_levels.append(level)\n\
    \            stack.pop()\n        elif char == '<':\n            level -= 1\n\
    \            paren_levels.append(level)\n            stack.pop()\n        elif\
    \ char == '>':\n            level -= 1\n            paren_levels.append(level)\n\
    \            stack.pop()\n        elif char == '!':\n            level -= 1\n\
    \            paren_levels.append(level)\n            stack.pop()\n        elif\
    \ char == '=':\n            level -= 1\n            paren_levels.append(level)\n\
    \            stack.pop()\n        elif char == '+':\n            level -= 1\n\
    \            paren_levels.append(level)\n            stack.pop()\n        elif\
    \ char == '-':\n            level -= 1\n            paren_levels.append(level)\n\
    \            stack.pop()\n        elif char == '*':\n            level -= 1\n\
    \            paren_levels.append(level)\n            stack.pop()\n        elif\
    \ char == '/':\n            level -= 1\n            paren_levels.append(level)\n\
    \            stack.pop()\n        elif char == '%':\n            level -= 1\n\
    \            paren_levels.append(\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp9sj13g_.py\"\
    , line 104\n    paren_levels.append(\n                       ^\nSyntaxError: '('\
    \ was never closed\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_level\
    \ = 0\n    paren_levels = []\n    paren_levels_stack = []\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren\n\
    def check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') ==\
    \ [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n\
    \    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpugulg99u.py\"\
    , line 56\n    paren_levels_stack.append(paren\n                             ^\n\
    SyntaxError: '(' was never closed\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_level\
    \ = 0\n    paren_nesting = 0\n    paren_levels = []\n    paren_nestings = []\n\
    \    for index, char in enumerate(paren_string):\n        if char == '(':\n  \
    \          paren_level += 1\n            paren_levels.append(paren_level)\n  \
    \          paren_nesting = 0\n            paren_nestings.append(paren_nesting)\n\
    \        elif char == ')':\n            paren_level -= 1\n            paren_levels.append(paren_level)\n\
    \            paren_nesting += 1\n            paren_nestings.append(paren_nesting)\n\
    \        elif char == ' ':\n            paren_levels.append(paren_level)\n   \
    \         paren_nestings.append(paren_nesting)\n    return paren_levels\n\ndef\
    \ check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n\
    \    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt8ljorqa.py\"\
    , line 37, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt8ljorqa.py\"\
    , line 35, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt8ljorqa.py\"\
    , line 30, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
