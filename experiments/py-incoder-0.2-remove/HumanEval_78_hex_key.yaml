name: HumanEval_78_hex_key
language: py
prompt: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write a\
  \ function that receives \n    a hexadecimal number as a string and counts the number\
  \ of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural\
  \ number \n    greater than 1 that is not a product of two smaller natural numbers).\n\
  \    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n  \
  \  Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a\
  \ number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal\
  \ 13).\n    Note: you may assume the input is always correct or empty string, \n\
  \    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n            \
  \            \"\"\"\n"
tests: "def check(candidate):\n    assert candidate('AB') == 1\n    assert candidate('1077E')\
  \ == 2\n    assert candidate('ABED1A33') == 4\n    assert candidate('2020') == 2\n\
  \    assert candidate('123456789ABCDEF0') == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00')\
  \ == 12\n\ndef test_check():\n    check(hex_key)\n\ntest_check()\n"
completions: ["    hex_key = 'A'\n    hex_key = 'B'\n    hex_key = 'C'\n    hex_key\
    \ = 'D'\n    hex_key = 'E'\n    hex_key = 'F'\n    hex_key = 'A'\n    hex_key\
    \ = 'B'\n    hex_key = 'C'\n    hex_key = 'D'\n    hex_key = 'E'\n    hex_key\
    \ = 'F'\n    hex_key = 'A'\n    hex_key = 'B'\n    hex_key = 'C'\n    hex_key\
    \ = 'D'\n    hex_key = 'E'\n    hex_key = 'F'\n    hex_key = 'A'\n    hex_key\
    \ = 'B'\n    hex_key = 'C'\n    hex_key = 'D'\n    hex_key = 'E'\n    hex_key\
    \ = 'F'\n    hex_key = 'A'\n    hex_key = 'B'\n    hex_key = 'C'\n    hex_key\
    \ = 'D'\n    hex_key = 'E'\n    hex_key = 'F'\n    hex_key = 'A'\n    hex_key\
    \ = 'B'\n    hex_key = 'C'\n    hex_key = 'D'\n    hex_key = 'E'\n    hex_key\
    \ = 'F'\n    hex_key = 'A'\n    hex_key = 'B'\n    hex_key = 'C'\n    hex_key\
    \ = 'D'\n    hex_key = 'E'\n    hex_key = 'F'\n    hex_key = 'A'\n    hex_key\
    \ = 'B'\n    hex_key = 'C'\n    hex_key = 'D'\n    hex_key = 'E'\n    hex_key\
    \ = 'F'\n    hex_key = 'A'\n    hex_key = 'B'\n    hex_key = 'C'\n    hex_key\
    \ = 'D'\n    hex_key = 'E'\n    hex_key = 'F'\n    hex_key = 'A'\n    hex_key\
    \ = 'B'\n    hex_key = 'C'\n    hex_key = 'D'\n    hex_key = 'E'\n    hex_key\
    \ = 'F'\n    hex_key = 'A'\n    hex_key = 'B'\n    hex_key = 'C'\n    hex_key\
    \ = 'D'\n    hex_key = 'E'\n    hex_key = 'F'\n    hex_key = 'A'\n    hex_key\
    \ = 'B'\n    hex_key = 'C'\n    hex_key = 'D'\n    hex_key = 'E'\n    hex_key\
    \ = 'F'\n    hex_key = 'A'\n    ", "    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    hex_key = \"A\"\n    hex_key = \"B\"\n    hex_key = \"C\"\
    \n    hex_key = \"D\"\n    hex_key = \"E\"\n    hex_key = \"F\"\n    hex_key =\
    \ \"0\"\n    hex_key = \"1\"\n    hex_key = \"2\"\n    hex_key = \"3\"\n    hex_key\
    \ = \"4\"\n    hex_key = \"5\"\n    hex_key = \"6\"\n    hex_key = \"7\"\n   \
    \ hex_key = \"8\"\n    hex_key = \"9\"\n    hex_key = \"A\"\n    hex_key = \"\
    B\"\n    hex_key = \"C\"\n    hex_key = \"D\"\n    hex_key = \"E\"\n    hex_key\
    \ = \"F\"\n    hex_key = \"0\"\n    hex_key = \"1\"\n    hex_key = \"2\"\n   \
    \ hex_key = \"3\"\n    hex_key = \"4\"\n    hex_key = \"5\"\n    hex_key = \"\
    6\"\n    hex_key = \"7\"\n    hex_key = \"8\"\n    hex_key = \"9\"\n    hex_key\
    \ = \"A\"\n    hex_key = \"B\"\n    hex_key = \"C\"\n    hex_key = \"D\"\n   \
    \ hex_key = \"E\"\n    hex_key = \"F\"\n    hex_key = \"0\"\n    hex_key = \"\
    1\"\n    hex_key = \"2\"\n    hex_key = \"3\"\n    hex_key = \"4\"\n    hex_key\
    \ = \"5\"\n    hex_key = \"6\"\n    hex_key = \"7\"\n    hex_key = \"8\"\n   \
    \ hex_key = \"9\"\n    hex_key = \"A\"\n    hex_key = \"B\"\n    hex_key = \"\
    C\"\n    hex_key = \"D\"\n    hex_key = \"E\"\n    hex_key = \"F\"\n    hex_key\
    \ = \"0\"\n    hex_key = \"1\"\n    hex_key = \"2\"\n    hex_key = \"3\"\n   \
    \ hex_key = \"4\"\n    hex_key = \"5\"\n    hex_key = \"6\"\n    hex_key = \"\
    7\"\n    hex_key = \"8\"\n    hex_key = \"9\"\n    hex_key = \"A\"\n    hex_key\
    \ = \"B\"\n    hex_key = \"C\"\n    hex_key = \"D\"\n    hex_key = \"E\"\n   \
    \ hex_key = \"F\"\n    hex_key = \"0\"\n    hex_key = \"1\"\n    hex_key = \"\
    2\"\n    hex_key = \"3\"\n    hex_key = \"4\"\n    hex_key = \"5\"\n    hex_key\
    \ = \"6", "    hex_key = \"A\"\n    count = 0\n    hex_key = \"A\"\n    count\
    \ = 0\n    hex_key = \"A\"\n    count = 0\n    hex_key = \"A\"\n    count = 0\n\
    \    hex_key = \"A\"\n    count = 0\n    hex_key = \"A\"\n    count = 0\n    hex_key\
    \ = \"A\"\n    count = 0\n    hex_key = \"A\"\n    count = 0\n    hex_key = \"\
    A\"\n    count = 0\n    hex_key = \"A\"\n    count = 0\n    hex_key = \"A\"\n\
    \    count = 0\n    hex_key = \"A\"\n    count = 0\n    hex_key = \"A\"\n    count\
    \ = 0\n    hex_key = \"A\"\n    count = 0\n    hex_key = \"A\"\n    count = 0\n\
    \    hex_key = \"A\"\n    count = 0\n    hex_key = \"A\"\n    count = 0\n    hex_key\
    \ = \"A\"\n    count = 0\n    hex_key = \"A\"\n    count = 0\n    hex_key = \"\
    A\"\n    count = 0\n    hex_key = \"A\"\n    count = 0\n    hex_key = \"A\"\n\
    \    count = 0\n    hex_key = \"A\"\n    count = 0\n    hex_key = \"A\"\n    count\
    \ = 0\n    hex_key = \"A\"\n    count = 0\n    hex_key = \"A\"\n    count = 0\n\
    \    hex_key = \"A\"\n    count = 0\n    hex_key = \"A\"\n    count = 0\n    hex_key\
    \ = \"A\"\n    count = 0\n    hex_key = \"A\"\n    count = 0\n    hex_key = \"\
    A\"\n    count = 0\n    hex_key = \"A\"\n    count = 0\n    hex_key = \"A\"\n\
    \    count = 0\n    hex_key = \"A\"\n    count = 0\n    hex_key = \"A\"\n    count\
    \ = 0\n    hex_key = \"A\"\n    count = 0\n    hex_key = \"A\"\n    count = 0\n\
    \    hex_key = \"A\"\n    count = 0\n    hex_key = \"A\"\n    count = 0\n    hex_key\
    \ = \"A\"\n    count = 0\n    hex_key = \"A\"\n    count = 0\n    hex_key = \"\
    A\"\n    count = 0\n    hex_key = \"A\"\n    count = 0\n    hex_key = \"A\"\n\
    \    count = 0\n    hex_key = \"A\"\n    count = 0\n    hex_key = \"A\"\n    count\
    \ = 0\n    hex_key = \"A\"\n    count = 0\n    hex_key = \"A\"\n    count = 0\n\
    \    hex_key = \"A\"\n    count = 0\n    hex_key = \"A\"\n    count = 0\n    hex_key\
    \ = \"A\"\n    count = 0\n    hex", "    hex_key = \"A\"\n    hex_key_length =\
    \ len(hex_key)\n    prime_number = 0\n    prime_number_length = len(prime_number)\n\
    \    prime_number_length = 0\n    prime_number_length = 0\n    prime_number_length\
    \ = 0\n    prime_number_length = 0\n    prime_number_length = 0\n    prime_number_length\
    \ = 0\n    prime_number_length = 0\n    prime_number_length = 0\n    prime_number_length\
    \ = 0\n    prime_number_length = 0\n    prime_number_length = 0\n    prime_number_length\
    \ = 0\n    prime_number_length = 0\n    prime_number_length = 0\n    prime_number_length\
    \ = 0\n    prime_number_length = 0\n    prime_number_length = 0\n    prime_number_length\
    \ = 0\n    prime_number_length = 0\n    prime_number_length = 0\n    prime_number_length\
    \ = 0\n    prime_number_length = 0\n    prime_number_length = 0\n    prime_number_length\
    \ = 0\n    prime_number_length = 0\n    prime_number_length = 0\n    prime_number_length\
    \ = 0\n    prime_number_length = 0\n    prime_number_length = 0\n    prime_number_length\
    \ = 0\n    prime_number_length = 0\n    prime_number_length = 0\n    prime_number_length\
    \ = 0\n    prime_number_length = 0\n    prime_number_length = 0\n    prime_number_length\
    \ = 0\n    prime_number_length = 0\n    prime_number_length = 0\n    prime_number_length\
    \ = 0\n    prime_number_length = 0\n    prime_number_length = 0\n    prime_number_length\
    \ = 0\n    prime_number_length = 0\n    prime_number_length = 0\n    prime_number_length\
    \ = 0\n    prime_number_length = 0\n    prime_number_length = 0\n    prime_number_length\
    \ = 0\n    prime_number_length = 0\n    prime_number_length = 0\n    prime_number_length\
    \ = 0\n    prime_number_length = 0\n    prime_number_length = 0\n    prime_number_length\
    \ = 0\n    prime_number_length = 0\n    prime_number_length = 0\n    prime_number_length\
    \ = 0\n    prime_number_length = 0\n    prime_number_length = 0\n    prime_number_length\
    \ = 0\n    prime_number_length = 0\n    prime_number_length = 0\n    prime_number_length\
    \ = 0\n    prime_number_length = 0\n    prime_number_length = 0\n    prime_number_length\
    \ = 0\n    prime_number_length = 0\n    prime_number_length = 0\n    prime_number_length\
    \ = 0\n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    hex_key = 'A'\n\
    \    count = 0\n    hex_key = 'A'\n    while hex_key != \"\":\n        hex_key\
    \ += str(hex(ord('A'))[2:])\n        count += 1\n        if hex_key == \"A\":\n\
    \            hex_key = \"B\"\n        elif hex_key == \"B\":\n            hex_key\
    \ = \"C\"\n        elif hex_key == \"C\":\n            hex_key = \"D\"\n     \
    \   elif hex_key == \"D\":\n            hex_key = \"E\"\n        elif hex_key\
    \ == \"E\":\n            hex_key = \"F\"\n        elif hex_key == \"F\":\n   \
    \         hex_key = \"A\"\n    return count\n\n", "    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    hex_key = \"A\"\n    hex_key_len = len(hex_key)\n\
    \    prime_key_len = 3\n    prime_key_digits = [2, 3, 5, 7, 11, 13, 17, 19]\n\
    \    prime_key_digits_len = len(prime_key_digits)\n    prime_key_digits_set =\
    \ set(prime_key_digits)\n    prime_key_digits_set = sorted(prime_key_digits_set)\n\
    \    prime_key_digits_set = prime_key_digits_set[::-1]\n    prime_key_digits_set\
    \ = prime_key_digits_set[:prime_key_len]\n    prime_key_digits_set = prime_key_digits_set[:prime_key_digits_len]\n\
    \    prime_key_digits_set = prime_key_digits_set[:prime_key_digits_len]\n    prime_key_digits_set\
    \ = prime_key_digits_set[:prime_key_digits_len]\n    prime_key_digits_set = prime_key_digits_set[:prime_key_digits_len]\n\
    \    prime_key_digits_set = prime_key_digits_set[:prime_key_digits_len]\n    prime_key_digits_set\
    \ = prime_key_digits_set[:prime_key_digits_len]\n    prime_key_digits_set = prime_key_digits_set[:prime_key_digits_len]\n\
    \    prime_key_digits_set = prime_key_digits_set[:prime_key_digits_len]\n    prime_key_digits_set\
    \ = prime_key_digits_set[:prime_key_digits_len]\n    prime_key_digits_set = prime_key_digits_set[:prime_key_digits_len]\n\
    \    prime_key_digits_set = prime_key_digits_set[:prime_key_digits_len]\n    prime_key_digits_set\
    \ = prime_key_digits_set[:prime_key_digits_len]\n    prime_key_digits_set = prime_key_digits_set[:prime_key_digits_len]\n\
    \    prime_key_digits_set = prime_key_digits_set[:prime_key_digits_len]\n    prime_key_digits_set\
    \ = prime_key_digits_set[:prime_key_digits_len]\n    prime_key_digits_set = prime_key_digits_set[:prime_key_digits_len]\n\
    \    prime_key_digits_set = prime_key_digits_set[:prime_key_digits_len]\n    prime_key_digits_set\
    \ = prime_key_digits_set[:prime_key_digits_len]\n    prime_", "    \n    hexadecimal_number\
    \ = int(num, 16)\n    \n    prime_number = 0\n    \n    for digit in hexadecimal_number:\n\
    \        \n        if digit in [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\
    \ 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,\
    \ 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,\
    \ 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,\
    \ 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91,\
    \ 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108,\
    \ 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124,\
    \ 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140,\
    \ 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156,\
    \ 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172,\
    \ 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188,\
    \ 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204,\
    \ 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220,\
    \ 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236,\
    \ 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252,\
    \ 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268,\
    \ 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 28", "    \n\
    \    hex_key = int(num)\n    \n    prime_digits = [2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    \n\
    \    prime_digits_set = set(prime_digits)\n    \n    prime_digits_set = prime_digits_set.union(set(range(10,\
    \ 16)))\n    \n    prime_digits_set = prime_digits_set.union(set(range(16, 256)))\n\
    \    \n    prime_digits_set = prime_digits_set.union(set(range(256, 65536)))\n\
    \    \n    prime_digits_set = prime_digits_set.union(set(range(65536, 131071)))\n\
    \    \n    prime_digits_set = prime_digits_set.union(set(range(131071, 262144)))\n\
    \    \n    prime_digits_set = prime_digits_set.union(set(range(262144, 524288)))\n\
    \    \n    prime_digits_set = prime_digits_set.union(set(range(524288, 1048576)))\n\
    \    \n    prime_digits_set = prime_digits_set.union(set(range(1048576, 2097152)))\n\
    \    \n    prime_digits_set = prime_digits_set.union(set(range(2097152, 4194304)))\n\
    \    \n    prime_digits_set = prime_digits_set.union(set(range(4194304, 8388608)))\n\
    \    \n    prime_digits_set = prime_digits_set.union(set(range(8388608, 16777216)))\n\
    \    \n    prime_digits_set = prime_digits_set.union(set(range(16777216, 33554432)))\n\
    \    \n    prime_digits_set = prime_digits_set.union(set(range(33554432, 67108864)))\n\
    \    \n    prime_digits_set = prime_digits_set.union(set(range(67108864, 134217728)))\n\
    \    \n    prime_digits_set = prime_digits_set.union(set(range(134217728, 268435456)))\n\
    \    \n    prime_digits_set = prime_digits_set.union(set(range(268435456, 536870912)))\n\
    \    \n    prime_digits_set = prime_digits_set.union(set(range(536870912, 1073741824)))\n\
    \    \n    prime_digits_set = prime_digits_set.union(set(range(1073741824, 2147483648)))\n\
    \    \n    prime_digits_set = prime_digits_", "    \n    hex_key = \"0A\"\n  \
    \  \n    hex_key = \"0A\"\n    \n    hex_key = \"0A\"\n    \n    hex_key = \"\
    0A\"\n    \n    hex_key = \"0A\"\n    \n    hex_key = \"0A\"\n    \n    hex_key\
    \ = \"0A\"\n    \n    hex_key = \"0A\"\n    \n    hex_key = \"0A\"\n    \n   \
    \ hex_key = \"0A\"\n    \n    hex_key = \"0A\"\n    \n    hex_key = \"0A\"\n \
    \   \n    hex_key = \"0A\"\n    \n    hex_key = \"0A\"\n    \n    hex_key = \"\
    0A\"\n    \n    hex_key = \"0A\"\n    \n    hex_key = \"0A\"\n    \n    hex_key\
    \ = \"0A\"\n    \n    hex_key = \"0A\"\n    \n    hex_key = \"0A\"\n    \n   \
    \ hex_key = \"0A\"\n    \n    hex_key = \"0A\"\n    \n    hex_key = \"0A\"\n \
    \   \n    hex_key = \"0A\"\n    \n    hex_key = \"0A\"\n    \n    hex_key = \"\
    0A\"\n    \n    hex_key = \"0A\"\n    \n    hex_key = \"0A\"\n    \n    hex_key\
    \ = \"0A\"\n    \n    hex_key = \"0A\"\n    \n    hex_key = \"0A\"\n    \n   \
    \ hex_key = \"0A\"\n    \n    hex_key = \"0A\"\n    \n    hex_key = \"0A\"\n \
    \   \n    hex_key = \"0A\"\n    \n    hex_key = \"0A\"\n    \n    hex_key = \"\
    0A\"\n    \n    hex_key = \"0A\"\n    \n    hex_key = \"0A\"\n    \n    hex_key\
    \ = \"0A\"\n    \n    hex_key = \"0A\"\n    \n    hex_key = \"0A\"\n    \n   \
    \ hex_key = \"0A\"\n    \n    hex_key = \"0A\"\n    \n    hex_key = \"0A\"\n \
    \   \n    hex_key = \"0A\"\n    \n    hex_key = \"0A\"\n    \n    hex_key = \"\
    0A\"\n    \n    hex_key = \"0A\"\n    \n    hex_key = \"0A\"\n    \n    hex_key\
    \ = \"0A\"\n    \n", "    \n    hex_key = \"A\"\n    \n    hex_key = \"B\"\n \
    \   \n    hex_key = \"C\"\n    \n    hex_key = \"D\"\n    \n    hex_key = \"E\"\
    \n    \n    hex_key = \"F\"\n    \n    hex_key = \"0\"\n    \n    hex_key = \"\
    1\"\n    \n    hex_key = \"2\"\n    \n    hex_key = \"3\"\n    \n    hex_key =\
    \ \"4\"\n    \n    hex_key = \"5\"\n    \n    hex_key = \"6\"\n    \n    hex_key\
    \ = \"7\"\n    \n    hex_key = \"8\"\n    \n    hex_key = \"9\"\n    \n    hex_key\
    \ = \"A\"\n    \n    hex_key = \"B\"\n    \n    hex_key = \"C\"\n    \n    hex_key\
    \ = \"D\"\n    \n    hex_key = \"E\"\n    \n    hex_key = \"F\"\n    \n    hex_key\
    \ = \"0\"\n    \n    hex_key = \"1\"\n    \n    hex_key = \"2\"\n    \n    hex_key\
    \ = \"3\"\n    \n    hex_key = \"4\"\n    \n    hex_key = \"5\"\n    \n    hex_key\
    \ = \"6\"\n    \n    hex_key = \"7\"\n    \n    hex_key = \"8\"\n    \n    hex_key\
    \ = \"9\"\n    \n    hex_key = \"A\"\n    \n    hex_key = \"B\"\n    \n    hex_key\
    \ = \"C\"\n    \n    hex_key = \"D\"\n    \n    hex_key = \"E\"\n    \n    hex_key\
    \ = \"F\"\n    \n    hex_key = \"0\"\n    \n    hex_key = \"1\"\n    \n    hex_key\
    \ = \"2\"\n    \n    hex_key = \"3\"\n    \n    hex_key = \"4\"\n    \n    hex_key\
    \ = \"5\"\n    \n    hex_key = \"6\"\n    \n    hex_key = \"7\"\n    \n    hex_key\
    \ = \"8\"\n    \n    hex_key = \"9\"\n    \n    hex_key = \"A\"\n    \n    hex_key\
    \ = \"B\"\n    \n    hex_key = \"C\"\n    \n    hex_key = \"D\"\n    \n    hex_key\
    \ = \"E\"\n    \n    hex_key = \"F\"\n    \n    hex_key = \"0\"\n    \n    hex_key\
    \ = \"1\"\n    \n    hex_key = \"2\"\n    \n    hex_key = \"3\"\n    \n    hex_key\
    \ = \"4\"\n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    hex_key = \"0A\"\n    \n  \
    \  hex_key = \"0A\"\n    \n    hex_key = \"0A\"\n    \n    hex_key = \"0A\"\n\
    \    \n    hex_key = \"0A\"\n    \n    hex_key = \"0A\"\n    \n    hex_key = \"\
    0A\"\n    \n    hex_key = \"0A\"\n    \n    hex_key = \"0A\"\n    \n    hex_key\
    \ = \"0A\"\n    \n    hex_key = \"0A\"\n    \n    hex_key = \"0A\"\n    \n   \
    \ hex_key = \"0A\"\n    \n    hex_key = \"0A\"\n    \n    hex_key = \"0A\"\n \
    \   \n    hex_key = \"0A\"\n    \n    hex_key = \"0A\"\n    \n    hex_key = \"\
    0A\"\n    \n    hex_key = \"0A\"\n    \n    hex_key = \"0A\"\n    \n    hex_key\
    \ = \"0A\"\n    \n    hex_key = \"0A\"\n    \n    hex_key = \"0A\"\n    \n   \
    \ hex_key = \"0A\"\n    \n    hex_key = \"0A\"\n    \n    hex_key = \"0A\"\n \
    \   \n    hex_key = \"0A\"\n    \n    hex_key = \"0A\"\n    \n    hex_key = \"\
    0A\"\n    \n    hex_key = \"0A\"\n    \n    hex_key = \"0A\"\n    \n    hex_key\
    \ = \"0A\"\n    \n    hex_key = \"0A\"\n    \n    hex_key = \"0A\"\n    \n   \
    \ hex_key = \"0A\"\n    \n    hex_key = \"0A\"\n    \n    hex_key = \"0A\"\n \
    \   \n    hex_key = \"0A\"\n    \n    hex_key = \"0A\"\n    \n    hex_key = \"\
    0A\"\n    \n    hex_key = \"0A\"\n    \n    hex_key = \"0A\"\n    \n    hex_key\
    \ = \"0A\"\n    \n    hex_key = \"0A\"\n    \n    hex_key = \"0A\"\n    \n   \
    \ hex_key = \"0A\"\n    \n    hex_key = \"0A\"\n    \n    hex_key = \"0A\"\n \
    \   \n    hex_key = \"0A\"\n    \n    hex_key = \"0A\"\n    \n    hex_key = \"\
    0A\"\n    \n", "    \n    hex_digits = list(\"0123456789ABCDEF\")\n    hex_digits_set\
    \ = set(hex_digits)\n    \n    hex_digits_prime = hex_digits_set - {hex_digits_set[0]}\n\
    \    \n    hex_digits_prime_len = len(hex_digits_prime)\n    \n    hex_digits_prime_prime\
    \ = hex_digits_prime - {hex_digits_prime[0]}\n    \n    hex_digits_prime_prime_len\
    \ = len(hex_digits_prime_prime)\n    \n    hex_digits_prime_prime_prime = hex_digits_prime_prime\
    \ - {hex_digits_prime_prime[0]}\n    \n    hex_digits_prime_prime_prime_len =\
    \ len(hex_digits_prime_prime_prime)\n    \n    hex_digits_prime_prime_prime_prime_len\
    \ = len(hex_digits_prime_prime_prime_prime)\n    \n    hex_digits_prime_prime_prime_prime_prime_len\
    \ = len(hex_digits_prime_prime_prime_prime_prime)\n    \n    hex_digits_prime_prime_prime_prime_prime_prime_len\
    \ = len(hex_digits_prime_prime_prime_prime_prime_prime)\n    \n    hex_digits_prime_prime_prime_prime_prime_prime_prime_len\
    \ = len(hex_digits_prime_prime_prime_prime_prime_prime_prime_prime)\n    \n  \
    \  hex_digits_prime_prime_prime_prime_prime_prime_prime_prime_len = len(hex_digits_prime_prime_prime_prime_prime_prime_prime_prime_prime)\n\
    \    \n    hex_digits_prime_prime_prime_prime_prime_prime_prime_prime_prime_len\
    \ = len(hex_digits_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime)\n\
    \    \n    hex_digits_prime_prime_prime_prime_prime_prime_prime_prime_prime_len\
    \ = len(hex_digits_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime)\n\
    \    \n    hex_digits_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_len\
    \ = len(hex_digits_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime)\n\
    \    \n    hex_digits_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime",
  "    \n    hex_digits = [int(i) for i in hex_string]\n    prime_digits = [2, 3,\
    \ 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79,\
    \ 83, 89, 97]\n    \n    count = 0\n    \n    for digit in hex_digits:\n     \
    \   if digit in prime_digits:\n            count += 1\n            \n    return\
    \ count\n\n", "    hex_key = 'F'\n    hex_digits = hex_key.upper()\n    hex_digits_count\
    \ = len(hex_digits)\n    hex_digits_prime_count = 0\n    hex_digits_prime_count_list\
    \ = []\n    for digit in hex_digits:\n        if digit == 'A' or digit == 'B'\
    \ or digit == 'C' or digit == 'D' or digit == 'E' or digit == 'F':\n         \
    \   continue\n        else:\n            hex_digits_prime_count += 1\n       \
    \     hex_digits_prime_count_list.append(hex_digits_prime_count)\n    hex_digits_prime_count_list.sort()\n\
    \    hex_digits_prime_count_list.reverse()\n    hex_digits_prime_count_list_len\
    \ = len(hex_digits_prime_count_list)\n    hex_digits_prime_count_list_index =\
    \ 0\n    hex_digits_prime_count_list_index_list = []\n    while hex_digits_prime_count_list_index\
    \ < hex_digits_prime_count_list_len:\n        if hex_digits_prime_count_list[hex_digits_prime_count_list_index]\
    \ == hex_digits_prime_count:\n            hex_digits_prime_count_list_index_list.append(hex_digits_prime_count_list_index)\n\
    \        hex_digits_prime_count_list_index += 1\n    hex_digits_prime_count_list_index_list.sort()\n\
    \    hex_digits_prime_count_list_index_list.reverse()\n    hex_digits_prime_count_list_index_list_len\
    \ = len(hex_digits_prime_count_list_index_list)\n    hex_digits_prime_count_list_index_list_index\
    \ = 0\n    hex_digits_prime_count_list_index_list_index_list = []\n    while hex_digits_prime_count_list_index_list_index\
    \ < hex_digits_prime_count_list_index_list_len:\n        if hex_digits_prime_count_list_index_list[hex_digits_prime_count_list_index_list_index]\
    \ == hex_digits_prime_count_list_index:\n            hex_digits_prime_count_list_index_list_index_list.append(hex_digits_prime_count_list_index_list_index)\n\
    \        hex_digits_prime_count_list_index_list_index += 1\n    hex_digits_prime_count_list_index_list_index_list.sort()\n\
    \    hex_digits_prime_count_list_index_list_index_list.reverse()\n    hex_digits_prime_count_list_index_list_index_list_len\
    \ = len(hex_digits_prime_count_list_index_list_index_list)\n    hex_digits_prime_count_list_index_list_index_list_index\
    \ = 0\n    hex_digits_prime_count_list_index_list_index_list_index_list = []\n\
    \    while hex_digits_prime_count_list_index_list_index_list_index < hex_digits_prime_count_list_index_list_index_list_len:\n\
    \        if hex_digits_prime_count_list_", "    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    \n    hex_key = int(num)\n    \n    prime_digits\
    \ = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97]\n    \n    hex_key = str(hex_key)\n    \n    count = 0\n\
    \    \n    for digit in hex_key:\n        if digit in prime_digits:\n        \
    \    count += 1\n    \n    return count\n</cell>\n<cell>\nhex_key('F')\n</cell>\n\
    <cell>\nhex_key('F')\n</cell>\n<cell>\nhex_key('F')\n</cell>\n<cell>\nhex_key('F')\n\
    </cell>\n<cell>\nhex_key('F')\n</cell>\n<cell>\nhex_key('F')\n</cell>\n<cell>\n\
    hex_key('F')\n</cell>\n<cell>\nhex_key('F')\n</cell>\n<cell>\nhex_key('F')\n</cell>\n\
    <cell>\nhex_key('F')\n</cell>\n<cell>\nhex_key('F')\n</cell>\n<cell>\nhex_key('F')\n\
    </cell>\n<cell>\nhex_key('F')\n</cell>\n<cell>\nhex_key('F')\n</cell>\n<cell>\n\
    hex_key('F')\n</cell>\n<cell>\nhex_key('F')\n</cell>\n<cell>\nhex_key('F')\n</cell>\n\
    <cell>\nhex_key('F')\n</cell>\n<cell>\nhex_key('F')\n</cell>\n<cell>\nhex_key('F')\n\
    </cell>\n<cell>\nhex_key('F')\n</cell>\n<cell>\nhex_key('F')\n</cell>\n<cell>\n\
    hex_key('F')\n</cell>\n<cell>\nhex_key('F')\n</cell>\n<cell>\nhex_key('F')\n</cell>\n\
    <cell>\nhex_key('F')\n</cell>\n<cell>\nhex_key('F')\n</cell>\n<cell>\nhex_key('F')\n\
    </cell>\n<cell>\nhex_key('F')\n</cell>\n<cell>\nhex_key('F')\n</cell>\n<", " \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    hex_key =\
    \ 'A'\n    \n    hex_key = 'B'\n    \n    hex_key = 'C'\n    \n    hex_key = 'D'\n\
    \    \n    hex_key = 'E'\n    \n    hex_key = 'F'\n    \n    hex_key = 'A'\n \
    \   \n    hex_key = 'B'\n    \n    hex_key = 'C'\n    \n    hex_key = 'D'\n  \
    \  \n    hex_key = 'E'\n    \n    hex_key = 'F'\n    \n    hex_key = 'A'\n   \
    \ \n    hex_key = 'B'\n    \n    hex_key = 'C'\n    \n    hex_key = 'D'\n    \n\
    \    hex_key = 'E'\n    \n    hex_key = 'F'\n    \n    hex_key = 'A'\n    \n \
    \   hex_key = 'B'\n    \n    hex_key = 'C'\n    \n    hex_key = 'D'\n    \n  \
    \  hex_key = 'E'\n    \n    hex_key = 'F'\n    \n    hex_key = 'A'\n    \n   \
    \ hex_key = 'B'\n    \n    hex_key = 'C'\n    \n    hex_key = 'D'\n    \n    hex_key\
    \ = 'E'\n    \n    hex_key = 'F'\n    \n    hex_key = 'A'\n    \n    hex_key =\
    \ 'B'\n    \n    hex_key = 'C'\n    \n    hex_key = 'D'\n    \n    hex_key = 'E'\n\
    \    \n    hex_key = 'F'\n    \n    hex_key = 'A'\n    \n    hex_key = 'B'\n \
    \   \n    hex_key = 'C'\n    \n    hex_key = 'D'\n    \n    hex_key = 'E'\n  \
    \  \n    hex_key = 'F'\n    \n    hex_key = 'A'\n    \n    hex_key = 'B'\n   \
    \ \n    hex_key = 'C'\n    \n    hex_key = 'D'\n    \n    hex_key = 'E'\n    \n\
    \    hex_key = 'F'\n    \n    hex_key = 'A'\n    \n    hex_key = 'B'\n    \n \
    \   hex_key = 'C'\n    \n    hex_key = 'D'\n    \n    hex_key = 'E'\n    \n  \
    \  hex_key = 'F'\n    \n    hex_key = 'A'\n    \n    hex_key = 'B'\n    \n   \
    \ hex_key = 'C'", "    hex_key = 'A'\n    hex_key += hex_key\n    hex_key += hex_key\n\
    \    hex_key += hex_key\n    hex_key += hex_key\n    hex_key += hex_key\n    hex_key\
    \ += hex_key\n    hex_key += hex_key\n    hex_key += hex_key\n    hex_key += hex_key\n\
    \    hex_key += hex_key\n    hex_key += hex_key\n    hex_key += hex_key\n    hex_key\
    \ += hex_key\n    hex_key += hex_key\n    hex_key += hex_key\n    hex_key += hex_key\n\
    \    hex_key += hex_key\n    hex_key += hex_key\n    hex_key += hex_key\n    hex_key\
    \ += hex_key\n    hex_key += hex_key\n    hex_key += hex_key\n    hex_key += hex_key\n\
    \    hex_key += hex_key\n    hex_key += hex_key\n    hex_key += hex_key\n    hex_key\
    \ += hex_key\n    hex_key += hex_key\n    hex_key += hex_key\n    hex_key += hex_key\n\
    \    hex_key += hex_key\n    hex_key += hex_key\n    hex_key += hex_key\n    hex_key\
    \ += hex_key\n    hex_key += hex_key\n    hex_key += hex_key\n    hex_key += hex_key\n\
    \    hex_key += hex_key\n    hex_key += hex_key\n    hex_key += hex_key\n    hex_key\
    \ += hex_key\n    hex_key += hex_key\n    hex_key += hex_key\n    hex_key += hex_key\n\
    \    hex_key += hex_key\n    hex_key += hex_key\n    hex_key += hex_key\n    hex_key\
    \ += hex_key\n    hex_key += hex_key\n    hex_key += hex_key\n    hex_key += hex_key\n\
    \    hex_key += hex_key\n    hex_key += hex_key\n    hex_key += hex_key\n    hex_key\
    \ += hex_key\n    hex_key += hex_key\n    hex_key += hex_key\n    hex_key += hex_key\n\
    \    hex_key += hex_key\n    hex_key += hex_key\n    hex_key += hex_key\n    hex_key\
    \ += hex_key\n    hex_key += hex_key\n    hex_key += hex_key\n    hex_key += hex_key\n\
    \    hex_key += hex_key\n    hex_key += hex_key\n    hex_key += hex_key\n    hex_key\
    \ += hex_key\n    hex_key += hex_key\n    hex_key += hex_key\n    hex_key += hex_key\n\
    \    ", "    \n    hex_key = int(num, 16)\n    \n    count = 0\n    \n    while\
    \ hex_key > 0:\n        hex_key //= 16\n        count += 1\n    \n    return count\n\
    </cell>\n<cell>\nhex_key('0101')\n</cell>\n<cell>\nhex_key('0101')\n</cell>\n\
    <cell>\nhex_key('0101')\n</cell>\n<cell>\nhex_key('0101')\n</cell>\n<cell>\nhex_key('0101')\n\
    </cell>\n<cell>\nhex_key('0101')\n</cell>\n<cell>\nhex_key('0101')\n</cell>\n\
    <cell>\nhex_key('0101')\n</cell>\n<cell>\nhex_key('0101')\n</cell>\n<cell>\nhex_key('0101')\n\
    </cell>\n<cell>\nhex_key('0101')\n</cell>\n<cell>\nhex_key('0101')\n</cell>\n\
    <cell>\nhex_key('0101')\n</cell>\n<cell>\nhex_key('0101')\n</cell>\n<cell>\nhex_key('0101')\n\
    </cell>\n<cell>\nhex_key('0101')\n</cell>\n<cell>\nhex_key('0101')\n</cell>\n\
    <cell>\nhex_key('0101')\n</cell>\n<cell>\nhex_key('0101')\n</cell>\n<cell>\nhex_key('0101')\n\
    </cell>\n<cell>\nhex_key('0101')\n</cell>\n<cell>\nhex_key('0101')\n</cell>\n\
    <cell>\nhex_key('0101')\n</cell>\n<cell>\nhex_key('0101')\n</cell>\n<cell>\nhex_key('0101')\n\
    </cell>\n<cell>\nhex_key('0101')\n</cell>\n<cell>\nhex_key('0101')\n</cell>\n\
    <cell>\nhex_key('0101')\n</cell>\n<cell>\nhex_key('0101')\n</cell>\n<cell>\nhex_key('0101')\n\
    </cell>\n<cell>\nhex_key('0101')\n</cell>\n<cell>\nhex_key('", "    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    hex_key\
    \ = \"A\"\n    count = 0\n    for char in hex_key:\n        if char == \"A\" or\
    \ char == \"B\" or char == \"C\" or char == \"D\" or char == \"E\" or char ==\
    \ \"F\":\n            count += 1\n    return count\n\n", "    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    hex_key = int(num, 16)\n    \n    count = 0\n\
    \    \n    for digit in range(0, 16):\n        \n        if hex_key%16 == 0:\n\
    \            count += 1\n            hex_key /= 16\n            \n        if hex_key%4\
    \ == 0:\n            count += 1\n            hex_key /= 4\n            \n    \
    \    if hex_key%2 == 0:\n            count += 1\n            hex_key /= 2\n  \
    \          \n    return count\n</cell>\n<cell>\nhex_key(\"A\")\n</cell>\n<cell>\n\
    hex_key(\"B\")\n</cell>\n<cell>\nhex_key(\"C\")\n</cell>\n<cell>\nhex_key(\"D\"\
    )\n</cell>\n<cell>\nhex_key(\"E\")\n</cell>\n<cell>\nhex_key(\"F\")\n</cell>\n\
    <cell>\nhex_key(\"A\")\n</cell>\n<cell>\nhex_key(\"B\")\n</cell>\n<cell>\nhex_key(\"\
    C\")\n</cell>\n<cell>\nhex_key(\"D\")\n</cell>\n<cell>\nhex_key(\"E\")\n</cell>\n\
    <cell>\nhex_key(\"F\")\n</cell>\n<cell>\nhex_key(\"A\")\n</cell>\n<cell>\nhex_key(\"\
    B\")\n</cell>\n<cell>\nhex_key(\"C\")\n</cell>\n<cell>\nhex_key(\"D\")\n</cell>\n\
    <cell>\nhex_key(\"E\")\n</cell>\n<cell>\nhex_key(\"F\")\n</cell>\n<cell>\nhex_key(\"\
    A\")\n</cell>\n<cell>\nhex_key(\"B\")\n</cell>\n<cell>\nhex_key(\"C\")\n</cell>\n\
    <cell>\nhex_key(\"D\")\n</cell>\n<cell>\nhex_key(\"E\")\n</cell>\n<cell>\nhex_key(\"\
    F\")\n</cell>\n<cell>\nhex_key(\"A\")\n</cell>\n<cell>\nhex_key(\"B\")\n</cell>\n\
    <cell>\nhex_key(\"C\")\n</cell>\n<cell>\nhex_key(\"D\")\n</cell>\n<cell>\nhex_key(\"\
    E\")\n</cell>\n<cell>\nhex_key(\"F\")\n</cell>\n<cell>\nhex_key", "    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    hex_key = \"A\"\n    hex_key\
    \ = \"B\"\n    hex_key = \"C\"\n    hex_key = \"D\"\n    hex_key = \"E\"\n   \
    \ hex_key = \"F\"\n    hex_key = \"0\"\n    hex_key = \"1\"\n    hex_key = \"\
    2\"\n    hex_key = \"3\"\n    hex_key = \"4\"\n    hex_key = \"5\"\n    hex_key\
    \ = \"6\"\n    hex_key = \"7\"\n    hex_key = \"8\"\n    hex_key = \"9\"\n   \
    \ hex_key = \"A\"\n    hex_key = \"B\"\n    hex_key = \"C\"\n    hex_key = \"\
    D\"\n    hex_key = \"E\"\n    hex_key = \"F\"\n    hex_key = \"0\"\n    hex_key\
    \ = \"1\"\n    hex_key = \"2\"\n    hex_key = \"3\"\n    hex_key = \"4\"\n   \
    \ hex_key = \"5\"\n    hex_key = \"6\"\n    hex_key = \"7\"\n    hex_key = \"\
    8\"\n    hex_key = \"9\"\n    hex_key = \"A\"\n    hex_key = \"B\"\n    hex_key\
    \ = \"C\"\n    hex_key = \"D\"\n    hex_key = \"E\"\n    hex_key = \"F\"\n   \
    \ hex_key = \"0\"\n    hex_key = \"1\"\n    hex_key = \"2\"\n    hex_key = \"\
    3\"\n    hex_key = \"4\"\n    hex_key = \"5\"\n    hex_key = \"6\"\n    hex_key\
    \ = \"7\"\n    hex_key = \"8\"\n    hex_key = \"9\"\n    hex_key = \"A\"\n   \
    \ hex_key = \"B\"\n    hex_key = \"C\"\n    hex_key = \"D\"\n    hex_key = \"\
    E\"\n    hex_key = \"F\"\n    hex_key = \"0\"\n    hex_key = \"1\"\n    hex_key\
    \ = \"2\"\n    hex_key = \"3\"\n    hex_key = \"4\"\n    hex_key = \"5\"\n   \
    \ hex_key = \"6\"\n    hex_key = \"7\"\n    hex_key = \"8\"\n    hex_key = \"\
    9\"\n    hex_key = \"A\"\n    hex_key = \"B\"\n    hex_key = \"C\"\n    hex_key\
    \ = \"D\"\n    hex_key = \"E\"\n    hex_key = \"F\"\n    hex_key = \"0\"\n   \
    \ hex_key = \"1\"\n    hex_key = \"2\"\n    hex_key = \"3\"\n    hex_key = \"\
    4\"\n    hex_key = \"5\"\n    hex_key = \"6", "    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    hex_key = \"0A\"\n    hex_key = \"0B\"\n    hex_key = \"0C\"\n\
    \    hex_key = \"0D\"\n    hex_key = \"0E\"\n    hex_key = \"0F\"\n    hex_key\
    \ = \"10\"\n    hex_key = \"11\"\n    hex_key = \"12\"\n    hex_key = \"13\"\n\
    \    hex_key = \"14\"\n    hex_key = \"15\"\n    hex_key = \"16\"\n    hex_key\
    \ = \"17\"\n    hex_key = \"18\"\n    hex_key = \"19\"\n    hex_key = \"1A\"\n\
    \    hex_key = \"1B\"\n    hex_key = \"1C\"\n    hex_key = \"1D\"\n    hex_key\
    \ = \"1E\"\n    hex_key = \"1F\"\n    hex_key = \"20\"\n    hex_key = \"21\"\n\
    \    hex_key = \"22\"\n    hex_key = \"23\"\n    hex_key = \"24\"\n    hex_key\
    \ = \"25\"\n    hex_key = \"26\"\n    hex_key = \"27\"\n    hex_key = \"28\"\n\
    \    hex_key = \"29\"\n    hex_key = \"2A\"\n    hex_key = \"2B\"\n    hex_key\
    \ = \"2C\"\n    hex_key = \"2D\"\n    hex_key = \"2E\"\n    hex_key = \"2F\"\n\
    \    hex_key = \"30\"\n    hex_key = \"31\"\n    hex_key = \"32\"\n    hex_key\
    \ = \"33\"\n    hex_key = \"34\"\n    hex_key = \"35\"\n    hex_key = \"36\"\n\
    \    hex_key = \"37\"\n    hex_key = \"38\"\n    hex_key = \"39\"\n    hex_key\
    \ = \"3A\"\n    hex_key = \"3B\"\n    hex_key = \"3C\"\n    hex_key = \"3D\"\n\
    \    hex_key = \"3E\"\n    hex_key = \"3F\"\n    hex_key = \"40\"\n    hex_key\
    \ = \"41\"\n    hex_key = \"42\"\n    hex_key = \"43\"\n    hex_key = \"44\"\n\
    \    hex_key = \"45\"\n    hex_key = \"46\"\n    hex_key = \"47\"\n    hex_key\
    \ = \"48\"\n    hex_key = \"49\"\n    hex_key = \"4A\"\n    hex_key = \"4B\"\n\
    \    hex_key = \"4C\"\n    hex_key = \"4D\"\n    hex_key = \"4E\"\n    hex_key\
    \ = \"4F\"\n    hex_key = \"50\"\n    hex_key = \"", "    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    \n    hex_digits = list(\"0123456789ABCDEF\"\
    )\n    hex_digits_set = set(hex_digits)\n    \n    prime_digits_set = set(range(2,\
    \ 10))\n    \n    prime_digits_set.add(2)\n    \n    prime_digits_set.add(3)\n\
    \    \n    prime_digits_set.add(5)\n    \n    prime_digits_set.add(7)\n    \n\
    \    prime_digits_set.add(11)\n    \n    prime_digits_set.add(13)\n    \n    prime_digits_set.add(17)\n\
    \    \n    prime_digits_set.add(19)\n    \n    prime_digits_set.add(23)\n    \n\
    \    prime_digits_set.add(29)\n    \n    prime_digits_set.add(31)\n    \n    prime_digits_set.add(37)\n\
    \    \n    prime_digits_set.add(43)\n    \n    prime_digits_set.add(59)\n    \n\
    \    prime_digits_set.add(61)\n    \n    prime_digits_set.add(67)\n    \n    prime_digits_set.add(73)\n\
    \    \n    prime_digits_set.add(79)\n    \n    prime_digits_set.add(83)\n    \n\
    \    prime_digits_set.add(89)\n    \n    prime_digits_set.add(97)\n    \n    prime_digits_set.add(103)\n\
    \    \n    prime_digits_set.add(107)\n    \n    prime_digits_set.add(109)\n  \
    \  \n    prime_digits_set.add(113)\n    \n    prime_digits_set.add(127)\n    \n\
    \    prime_digits_set.add(131)\n    \n    prime_digits_set.add(137)\n    \n  \
    \  prime_digits_set.add(139)\n    \n    prime_digits_set.add(149)\n    \n    prime_digits_set.add(151)\n\
    \    \n    prime_digits_set.add(157)\n    \n    prime_digits_set.add(163)\n  \
    \  \n    prime_digits_set.add(167)\n    \n    prime_digits_set.add(173)\n    \n\
    \    prime_digits_set.add(179)\n    \n    prime_digits_set.add(181)\n    \n  \
    \  prime_digits_set.add(191)\n    \n    prime_digits_set.add(193)\n    \n    prime_digits_set.add(197)\n\
    \    \n    prime", "    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n    hex_key = int(num)\n    hex_digits = [int(i) for i in str(hex_key)]\n\
    \    prime_digits = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53,\
    \ 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    \n    prime_digits_count = 0\n    \n\
    \    for digit in hex_digits:\n        if digit in prime_digits:\n           \
    \ prime_digits_count += 1\n    \n    return prime_digits_count\n</cell>\n<cell>\n\
    hex_key(\"A\")\n</cell>\n<cell>\nhex_key(\"B\")\n</cell>\n<cell>\nhex_key(\"C\"\
    )\n</cell>\n<cell>\nhex_key(\"D\")\n</cell>\n<cell>\nhex_key(\"E\")\n</cell>\n\
    <cell>\nhex_key(\"F\")\n</cell>\n<cell>\nhex_key(\"A\")\n</cell>\n<cell>\nhex_key(\"\
    B\")\n</cell>\n<cell>\nhex_key(\"C\")\n</cell>\n<cell>\nhex_key(\"D\")\n</cell>\n\
    <cell>\nhex_key(\"E\")\n</cell>\n<cell>\nhex_key(\"F\")\n</cell>\n<cell>\nhex_key(\"\
    A\")\n</cell>\n<cell>\nhex_key(\"B\")\n</cell>\n<cell>\nhex_key(\"C\")\n</cell>\n\
    <cell>\nhex_key(\"D\")\n</cell>\n<cell>\nhex_key(\"E\")\n</cell>\n<cell>\nhex_key(\"\
    F\")\n</cell>\n<cell>\nhex_key(\"A\")\n</cell>\n<cell>\nhex_key(\"B\")\n</cell>\n\
    <cell>\nhex_key(\"C\")\n</cell>\n<cell>\nhex_key(\"D\")\n</cell>\n<cell>\nhex_key(\"\
    E\")\n</cell>\n<cell>\nhex_key(\"F\")\n</cell>\n<cell>\nhex_key(\"A\")\n</cell>\n\
    <cell>\nhex_key(\"B\")\n</cell>\n<cell>\nhex_key(\"C\")\n</cell>\n<cell>\nhex_key(\"\
    D\")\n</cell>\n<cell>\nhex_key(\"E\")\n</cell>\n<cell>", "    hexadecimal = num\n\
    \    hexadecimal = hexadecimal.upper()\n    hexadecimal = hexadecimal.replace('\
    \ ', '')\n    hexadecimal = hexadecimal.replace('-', '')\n    hexadecimal = hexadecimal.replace('.',\
    \ '')\n    hexadecimal = hexadecimal.replace(',', '')\n    hexadecimal = hexadecimal.replace('\
    \ ', '')\n    hexadecimal = hexadecimal.replace('-', '')\n    hexadecimal = hexadecimal.replace('.',\
    \ '')\n    hexadecimal = hexadecimal.replace(',', '')\n    hexadecimal = hexadecimal.replace('\
    \ ', '')\n    hexadecimal = hexadecimal.replace('-', '')\n    hexadecimal = hexadecimal.replace('.',\
    \ '')\n    hexadecimal = hexadecimal.replace(',', '')\n    hexadecimal = hexadecimal.replace('\
    \ ', '')\n    hexadecimal = hexadecimal.replace('-', '')\n    hexadecimal = hexadecimal.replace('.',\
    \ '')\n    hexadecimal = hexadecimal.replace(',', '')\n    hexadecimal = hexadecimal.replace('\
    \ ', '')\n    hexadecimal = hexadecimal.replace('-', '')\n    hexadecimal = hexadecimal.replace('.',\
    \ '')\n    hexadecimal = hexadecimal.replace(',', '')\n    hexadecimal = hexadecimal.replace('\
    \ ', '')\n    hexadecimal = hexadecimal.replace('-', '')\n    hexadecimal = hexadecimal.replace('.',\
    \ '')\n    hexadecimal = hexadecimal.replace(',', '')\n    hexadecimal = hexadecimal.replace('\
    \ ', '')\n    hexadecimal = hexadecimal.replace('-', '')\n    hexadecimal = hexadecimal.replace('.',\
    \ '')\n    hexadecimal = hexadecimal.replace(',', '')\n    hexadecimal = hexadecimal.replace('\
    \ ', '')\n    hexadecimal = hexadecimal.replace('-', '')\n    hexadecimal = hexadecimal.replace('.',\
    \ '')\n    hexadecimal = hexadecimal.replace(',', '')\n    hexadecimal = hexadecimal.replace('\
    \ ', '')\n    hexadecimal = hexadecimal.replace('-', '')\n    hexadecimal = hexadecimal.replace('.',\
    \ '')\n    hexadecimal = hexadecimal.replace(',', '')\n    hexadecimal = hexadecimal.replace('\
    \ ', '')\n    hexadecimal = hexadecimal.replace('-', '')\n    hexadecimal = hexadecimal.replace('.',\
    \ '')\n    hexadecimal = hexadecimal.replace(',', '')\n    hexadecimal = hexadecimal.replace('\
    \ ', '')\n    hex", "    \n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    hex_key = \"A\"\n    hex_key = \"B\"\n    hex_key = \"C\"\n    hex_key = \"\
    D\"\n    hex_key = \"E\"\n    hex_key = \"F\"\n    hex_key = \"0\"\n    hex_key\
    \ = \"1\"\n    hex_key = \"2\"\n    hex_key = \"3\"\n    hex_key = \"4\"\n   \
    \ hex_key = \"5\"\n    hex_key = \"6\"\n    hex_key = \"7\"\n    hex_key = \"\
    8\"\n    hex_key = \"9\"\n    hex_key = \"A\"\n    hex_key = \"B\"\n    hex_key\
    \ = \"C\"\n    hex_key = \"D\"\n    hex_key = \"E\"\n    hex_key = \"F\"\n   \
    \ hex_key = \"0\"\n    hex_key = \"1\"\n    hex_key = \"2\"\n    hex_key = \"\
    3\"\n    hex_key = \"4\"\n    hex_key = \"5\"\n    hex_key = \"6\"\n    hex_key\
    \ = \"7\"\n    hex_key = \"8\"\n    hex_key = \"9\"\n    hex_key = \"A\"\n   \
    \ hex_key = \"B\"\n    hex_key = \"C\"\n    hex_key = \"D\"\n    hex_key = \"\
    E\"\n    hex_key = \"F\"\n    hex_key = \"0\"\n    hex_key = \"1\"\n    hex_key\
    \ = \"2\"\n    hex_key = \"3\"\n    hex_key = \"4\"\n    hex_key = \"5\"\n   \
    \ hex_key = \"6\"\n    hex_key = \"7\"\n    hex_key = \"8\"\n    hex_key = \"\
    9\"\n    hex_key = \"A\"\n    hex_key = \"B\"\n    hex_key = \"C\"\n    hex_key\
    \ = \"D\"\n    hex_key = \"E\"\n    hex_key = \"F\"\n    hex_key = \"0\"\n   \
    \ hex_key = \"1\"\n    hex_key = \"2\"\n    hex_key = \"3\"\n    hex_key = \"\
    4\"\n    hex_key = \"5\"\n    hex_key = \"6\"\n    hex_key = \"7\"\n    hex_key\
    \ = \"8\"\n    hex_key = \"9\"\n    hex_key = \"A\"\n    hex_key = \"B\"\n   \
    \ hex_key = \"C\"\n    hex_key = \"D\"\n    hex_key = \"E\"\n    hex_key = \"\
    F\"\n    hex_key = \"0\"\n    hex_key = \"1\"\n    hex_key = \"2\"\n    hex_key\
    \ = \"3\"\n    hex_key = \"4\"\n    hex_key = \"5\"\n    hex_key = \"6", "   \
    \ \n    hex_key = ''.join(num.upper())\n    hex_key_length = len(hex_key)\n  \
    \  hex_key_list = list(hex_key)\n    \n    prime_key_list = []\n    \n    for\
    \ index in range(hex_key_length//2):\n        \n        prime_key_list.append(hex_key[index])\n\
    \        \n    prime_key_list_length = len(prime_key_list)\n    \n    for index\
    \ in range(prime_key_list_length//2):\n        \n        prime_key_list[index]\
    \ = int(prime_key_list[index])\n        \n    prime_key_list_length = len(prime_key_list)\n\
    \    \n    for index in range(prime_key_list_length//2):\n        \n        prime_key_list[index]\
    \ = hex_key[prime_key_list_length-(index+1)]\n        \n    prime_key_list_length\
    \ = len(prime_key_list)\n    \n    for index in range(prime_key_list_length//2):\n\
    \        \n        prime_key_list[index] = int(prime_key_list[index])\n      \
    \  \n    prime_key_list_length = len(prime_key_list)\n    \n    for index in range(prime_key_list_length//2):\n\
    \        \n        prime_key_list[index] = hex_key[prime_key_list_length-(index+1)]\n\
    \        \n    prime_key_list_length = len(prime_key_list)\n    \n    for index\
    \ in range(prime_key_list_length//2):\n        \n        prime_key_list[index]\
    \ = int(prime_key_list[index])\n        \n    prime_key_list_length = len(prime_key_list)\n\
    \    \n    for index in range(prime_key_list_length//2):\n        \n        prime_key_list[index]\
    \ = hex_key[prime_key_list_length-(index+1)]\n        \n    prime_key_list_length\
    \ = len(prime_key_list)\n    \n    for index in range(prime_key_list_length//2):\n\
    \        \n        prime_key_list[index] = int(prime_key_list[index])\n      \
    \  \n    prime_key_list_length = len(prime_key_list)\n    \n    for index in range(prime_key_list_length//2):\n\
    \        \n        prime_key_list[index] = hex_key[prime_key_list_length-(index+1)]\n\
    \        \n    prime_key_list_length = len(prime_key_list)\n    \n    for index\
    \ in range(prime_key_list_length//2):\n        \n        prime_key_list[index]\
    \ = int(prime_key_list[index])\n        \n    prime_key_list_length = len(prime_key_list)\n\
    \    \n    for index in range(prime_key_list_length//2):\n        \n        prime_key_list[index]\
    \ = hex_key[prime_key_list_length-(index+1)]", "    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    hex_key = \"A\"\n    hex_key_len = len(hex_key)\n    hex_key_prime_digits\
    \ = 0\n    hex_key_prime_digits_count = 0\n    hex_key_prime_digits_sum = 0\n\
    \    hex_key_prime_digits_sum_count = 0\n    hex_key_prime_digits_sum_sum = 0\n\
    \    hex_key_prime_digits_sum_sum_count = 0\n    hex_key_prime_digits_sum_sum_sum\
    \ = 0\n    hex_key_prime_digits_sum_sum_sum_count = 0\n    hex_key_prime_digits_sum_sum_sum_sum\
    \ = 0\n    hex_key_prime_digits_sum_sum_sum_sum = 0\n    hex_key_prime_digits_sum_sum_sum_sum_count\
    \ = 0\n    hex_key_prime_digits_sum_sum_sum_sum_sum = 0\n    hex_key_prime_digits_sum_sum_sum_sum_sum_count\
    \ = 0\n    hex_key_prime_digits_sum_sum_sum_sum_sum_sum = 0\n    hex_key_prime_digits_sum_sum_sum_sum_sum_sum_count\
    \ = 0\n    hex_key_prime_digits_sum_sum_sum_sum_sum_sum_sum = 0\n    hex_key_prime_digits_sum_sum_sum_sum_sum_sum_sum_count\
    \ = 0\n    hex_key_prime_digits_sum_sum_sum_sum_sum_sum_sum_sum = 0\n    hex_key_prime_digits_sum_sum_sum_sum_sum_sum_sum_sum_count\
    \ = 0\n    hex_key_prime_digits_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0\n    hex_key_prime_digits_sum_sum_sum_sum_sum_sum_sum_sum_sum_count\
    \ = 0\n    hex_key_prime_digits_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0\n\
    \    hex_key_prime_digits_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_count = 0\n\
    \    hex_key_prime_digits_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0\n  \
    \  hex_key_prime_digits_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_count = 0\n  \
    \  hex_key_prime_digits_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0\n    hex_key_prime_digits_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_count\
    \ = 0\n    hex_key_prime_digits_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum\
    \ = 0\n    hex_key_prime_digits_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_count\
    \ = 0\n    hex_key_prime_digits_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum\
    \ = 0\n    hex_key_prime_digits_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_count\
    \ = 0\n    hex_key_prime_digits_sum_sum_sum_sum_sum_sum_sum_", "    \n    hex_key\
    \ = \"A\"\n    \n    hex_key = \"B\"\n    \n    hex_key = \"C\"\n    \n    hex_key\
    \ = \"D\"\n    \n    hex_key = \"E\"\n    \n    hex_key = \"F\"\n    \n    hex_key\
    \ = \"0\"\n    \n    hex_key = \"1\"\n    \n    hex_key = \"2\"\n    \n    hex_key\
    \ = \"3\"\n    \n    hex_key = \"4\"\n    \n    hex_key = \"5\"\n    \n    hex_key\
    \ = \"6\"\n    \n    hex_key = \"7\"\n    \n    hex_key = \"8\"\n    \n    hex_key\
    \ = \"9\"\n    \n    hex_key = \"A\"\n    \n    hex_key = \"B\"\n    \n    hex_key\
    \ = \"C\"\n    \n    hex_key = \"D\"\n    \n    hex_key = \"E\"\n    \n    hex_key\
    \ = \"F\"\n    \n    hex_key = \"0\"\n    \n    hex_key = \"1\"\n    \n    hex_key\
    \ = \"2\"\n    \n    hex_key = \"3\"\n    \n    hex_key = \"4\"\n    \n    hex_key\
    \ = \"5\"\n    \n    hex_key = \"6\"\n    \n    hex_key = \"7\"\n    \n    hex_key\
    \ = \"8\"\n    \n    hex_key = \"9\"\n    \n    hex_key = \"A\"\n    \n    hex_key\
    \ = \"B\"\n    \n    hex_key = \"C\"\n    \n    hex_key = \"D\"\n    \n    hex_key\
    \ = \"E\"\n    \n    hex_key = \"F\"\n    \n    hex_key = \"0\"\n    \n    hex_key\
    \ = \"1\"\n    \n    hex_key = \"2\"\n    \n    hex_key = \"3\"\n    \n    hex_key\
    \ = \"4\"\n    \n    hex_key = \"5\"\n    \n    hex_key = \"6\"\n    \n    hex_key\
    \ = \"7\"\n    \n    hex_key = \"8\"\n    \n    hex_key = \"9\"\n    \n    hex_key\
    \ = \"A\"\n    \n    hex_key = \"B\"\n    \n    hex_key = \"C\"\n    \n    hex_key\
    \ = \"D\"\n    \n    hex_key = \"E\"\n    \n    hex_key = \"F\"\n    \n    hex_key\
    \ = \"0\"\n    \n    hex_key = \"1\"\n    \n    hex_key = \"2\"\n    \n    hex_key\
    \ = \"3\"\n    \n    hex_key = \"4\"\n", "    \n    hexadecimal_digits = list(\"\
    0123456789ABCDEF\")\n    \n    hexadecimal_digits_set = set(hexadecimal_digits)\n\
    \    \n    hexadecimal_digits_set.add(\"A\")\n    hexadecimal_digits_set.add(\"\
    B\")\n    hexadecimal_digits_set.add(\"C\")\n    hexadecimal_digits_set.add(\"\
    D\")\n    hexadecimal_digits_set.add(\"E\")\n    hexadecimal_digits_set.add(\"\
    F\")\n    \n    hexadecimal_digits_set = hexadecimal_digits_set - {\"\"}\n   \
    \ \n    hexadecimal_digits_set = hexadecimal_digits_set - {\"0\"}\n    \n    hexadecimal_digits_set\
    \ = hexadecimal_digits_set - {\"1\"}\n    \n    hexadecimal_digits_set = hexadecimal_digits_set\
    \ - {\"2\"}\n    \n    hexadecimal_digits_set = hexadecimal_digits_set - {\"3\"\
    }\n    \n    hexadecimal_digits_set = hexadecimal_digits_set - {\"4\"}\n    \n\
    \    hexadecimal_digits_set = hexadecimal_digits_set - {\"5\"}\n    \n    hexadecimal_digits_set\
    \ = hexadecimal_digits_set - {\"6\"}\n    \n    hexadecimal_digits_set = hexadecimal_digits_set\
    \ - {\"7\"}\n    \n    hexadecimal_digits_set = hexadecimal_digits_set - {\"8\"\
    }\n    \n    hexadecimal_digits_set = hexadecimal_digits_set - {\"9\"}\n    \n\
    \    hexadecimal_digits_set = hexadecimal_digits_set - {\"A\"}\n    \n    hexadecimal_digits_set\
    \ = hexadecimal_digits_set - {\"B\"}\n    \n    hexadecimal_digits_set = hexadecimal_digits_set\
    \ - {\"C\"}\n    \n    hexadecimal_digits_set = hexadecimal_digits_set - {\"D\"\
    }\n    \n    hexadecimal_digits_set = hexadecimal_digits_set - {\"E\"}\n    \n\
    \    hexadecimal_digits_set = hexadecimal_digits_set - {\"F\"}\n    \n    hexadecimal_digits_set\
    \ = hexadecimal_digits_set - {\"a\"}\n    \n    hexadecimal_digits_set = hexadecimal_digits_set\
    \ - {\"b\"}\n    \n    hexadecimal_digits_set = hexadecimal_digits_set - {\"c\"\
    }\n    \n    hexadecimal_digit", "    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    hex_key = 'A'\n    hex_digits = [int(i) for i in hex_key]\n\
    \    hex_digits_set = set(hex_digits)\n    hex_digits_set.remove(11)\n    hex_digits_set.remove(13)\n\
    \    hex_digits_set.remove(17)\n    hex_digits_set.remove(19)\n    hex_digits_set.remove(23)\n\
    \    hex_digits_set.remove(29)\n    hex_digits_set.remove(31)\n    hex_digits_set.remove(37)\n\
    \    hex_digits_set.remove(41)\n    hex_digits_set.remove(47)\n    hex_digits_set.remove(53)\n\
    \    hex_digits_set.remove(59)\n    hex_digits_set.remove(61)\n    hex_digits_set.remove(67)\n\
    \    hex_digits_set.remove(71)\n    hex_digits_set.remove(79)\n    hex_digits_set.remove(83)\n\
    \    hex_digits_set.remove(89)\n    hex_digits_set.remove(97)\n    hex_digits_set.remove(101)\n\
    \    hex_digits_set.remove(103)\n    hex_digits_set.remove(107)\n    hex_digits_set.remove(109)\n\
    \    hex_digits_set.remove(111)\n    hex_digits_set.remove(113)\n    hex_digits_set.remove(117)\n\
    \    hex_digits_set.remove(121)\n    hex_digits_set.remove(123)\n    hex_digits_set.remove(127)\n\
    \    hex_digits_set.remove(131)\n    hex_digits_set.remove(133)\n    hex_digits_set.remove(137)\n\
    \    hex_digits_set.remove(139)\n    hex_digits_set.remove(147)\n    hex_digits_set.remove(151)\n\
    \    hex_digits_set.remove(153)\n    hex_digits_set.remove(157)\n    hex_digits_set.remove(159)\n\
    \    hex_digits_set.remove(163)\n    hex_digits_set.remove(167)\n    hex_digits_set.remove(173)\n\
    \    hex_digits_set.remove(179)\n    hex_digits_set.remove(181)\n    hex_digits_set.remove(191)\n\
    \    hex_digits_set.remove(193)\n    hex_digits_set.remove(197)\n    hex_digits_set.remove(199)\n\
    \    hex_digits_set.remove(211)\n    hex_digits_set.remove(213)\n    hex_digits_set.remove(217)\n\
    \    hex_digits_set.remove(219)\n    hex_digits_set.remove(223)\n    hex_digits_set.remove(227)\n\
    \    hex_digits_set.remove(229)\n    hex_digit", "    \n    hex_key = int(num)\
    \ \n    \n    prime_digits = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n\
    \    \n    prime_digits_set = set(prime_digits)\n    \n    prime_digits_set =\
    \ prime_digits_set.union(set(range(0,10)))\n    \n    prime_digits_set = prime_digits_set.union(set(range(10,100)))\n\
    \    \n    prime_digits_set = prime_digits_set.union(set(range(100,1000)))\n \
    \   \n    prime_digits_set = prime_digits_set.union(set(range(1000,10000)))\n\
    \    \n    prime_digits_set = prime_digits_set.union(set(range(10000,100000)))\n\
    \    \n    prime_digits_set = prime_digits_set.union(set(range(100000,1000000)))\n\
    \    \n    prime_digits_set = prime_digits_set.union(set(range(1000000,10000000)))\n\
    \    \n    prime_digits_set = prime_digits_set.union(set(range(10000000,100000000)))\n\
    \    \n    prime_digits_set = prime_digits_set.union(set(range(100000000,1000000000)))\n\
    \    \n    prime_digits_set = prime_digits_set.union(set(range(1000000000,10000000000)))\n\
    \    \n    prime_digits_set = prime_digits_set.union(set(range(10000000000,100000000000)))\n\
    \    \n    prime_digits_set = prime_digits_set.union(set(range(100000000000,1000000000000)))\n\
    \    \n    prime_digits_set = prime_digits_set.union(set(range(1000000000000,10000000000000)))\n\
    \    \n    prime_digits_set = prime_digits_set.union(set(range(10000000000000,100000000000000)))\n\
    \    \n    prime_digits_set = prime_digits_set.union(set(range(100000000000000,1000000000000000)))\n\
    \    \n    prime_digits_set = prime_digits_set.union(set(range(1000000000000000,10000000000000000)))\n\
    \    \n    prime_digits_set = prime_digits_set.union(set(range(10000000000000000,100000000000000000)))\n\
    \    \n    prime_digits_set = prime_digits_set.union(set(range(100000000000000000,1000000000000000000)))\n\
    \    \n    prime_digits_set = prime_digits_set.union(set(range(1000000000000000000,10000000000000000000)))\n\
    \    \n    prime_digits_set = prime_digits_", "    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    \n    hexadecimal = num.upper()\n    \n    hexadecimal_digits =\
    \ [hexadecimal[i:i+2] for i in range(0, len(hexadecimal), 2)]\n    \n    prime_digits\
    \ = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97]\n    \n    prime_digits_set = set(prime_digits)\n    \n\
    \    prime_digits_set = prime_digits_set.union(set(hexadecimal_digits))\n    \n\
    \    prime_digits_set = prime_digits_set.difference(set(prime_digits_set))\n \
    \   \n    prime_digits_set = prime_digits_set.difference(set(prime_digits_set))\n\
    \    \n    prime_digits_set = prime_digits_set.difference(set(prime_digits_set))\n\
    \    \n    prime_digits_set = prime_digits_set.difference(set(prime_digits_set))\n\
    \    \n    prime_digits_set = prime_digits_set.difference(set(prime_digits_set))\n\
    \    \n    prime_digits_set = prime_digits_set.difference(set(prime_digits_set))\n\
    \    \n    prime_digits_set = prime_digits_set.difference(set(prime_digits_set))\n\
    \    \n    prime_digits_set = prime_digits_set.difference(set(prime_digits_set))\n\
    \    \n    prime_digits_set = prime_digits_set.difference(set(prime_digits_set))\n\
    \    \n    prime_digits_set = prime_digits_set.difference(set(prime_digits_set))\n\
    \    \n    prime_digits_set = prime_digits_set.difference(set(prime_digits_set))\n\
    \    \n    prime_digits_set = prime_digits_set.difference(set(prime_digits_set))\n\
    \    \n    prime_digits_set = prime_digits_set.difference(set(prime_digits_set))\n\
    \    \n    prime_digits_set = prime_digits_set.difference(set(prime_digits_set))\n\
    \    \n    prime_digits_set = prime_digits_set.difference(set(prime_digits_set))\n\
    \    \n    prime_digits_set = prime_digits_set.difference(set(prime_digits_set))\n\
    \    \n    prime_digits_set = prime_digits_set.difference(set(prime_digits_set))\n\
    \    \n    prime_digits_set = prime_digits_set.difference(set(prime_digits_set))\n\
    \    \n    prime_digits_set = ", "    \n    hex_digits = list(\"0123456789ABCDEF\"\
    )\n    hex_digits_set = set(hex_digits)\n    \n    hex_string = num.upper()\n\
    \    \n    prime_digits = []\n    \n    for digit in hex_string:\n        if digit\
    \ in hex_digits_set:\n            prime_digits.append(digit)\n    \n    prime_digits_set\
    \ = set(prime_digits)\n    \n    prime_digits_len = len(prime_digits)\n    \n\
    \    prime_digits_set = set(prime_digits)\n    \n    prime_digits_len = len(prime_digits)\n\
    \    \n    prime_digits_set = set(prime_digits)\n    \n    prime_digits_len =\
    \ len(prime_digits)\n    \n    prime_digits_set = set(prime_digits)\n    \n  \
    \  prime_digits_len = len(prime_digits)\n    \n    prime_digits_set = set(prime_digits)\n\
    \    \n    prime_digits_len = len(prime_digits)\n    \n    prime_digits_set =\
    \ set(prime_digits)\n    \n    prime_digits_len = len(prime_digits)\n    \n  \
    \  prime_digits_set = set(prime_digits)\n    \n    prime_digits_len = len(prime_digits)\n\
    \    \n    prime_digits_set = set(prime_digits)\n    \n    prime_digits_len =\
    \ len(prime_digits)\n    \n    prime_digits_set = set(prime_digits)\n    \n  \
    \  prime_digits_len = len(prime_digits)\n    \n    prime_digits_set = set(prime_digits)\n\
    \    \n    prime_digits_len = len(prime_digits)\n    \n    prime_digits_set =\
    \ set(prime_digits)\n    \n    prime_digits_len = len(prime_digits)\n    \n  \
    \  prime_digits_set = set(prime_digits)\n    \n    prime_digits_len = len(prime_digits)\n\
    \    \n    prime_digits_set = set(prime_digits)\n    \n    prime_digits_len =\
    \ len(prime_digits)\n    \n    prime_digits_set = set(prime_digits)\n    \n  \
    \  prime_digits_len = len(prime_digits)\n    \n    prime_digits_set = set(prime_digits)\n\
    \    \n    prime_digits_len = len(prime_digits)\n    \n    prime_digits_set =\
    \ set(prime_digits)\n    \n    prime_digits_len = len(prime_digits)\n    \n  \
    \  prime_digits_set = set(prime_digits)\n", "    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    \n    hex_key = \"0A\"\n    hex_key = \"0B\"\n\
    \    hex_key = \"0C\"\n    hex_key = \"0D\"\n    hex_key = \"0E\"\n    hex_key\
    \ = \"0F\"\n    hex_key = \"10\"\n    hex_key = \"11\"\n    hex_key = \"12\"\n\
    \    hex_key = \"13\"\n    hex_key = \"14\"\n    hex_key = \"15\"\n    hex_key\
    \ = \"16\"\n    hex_key = \"17\"\n    hex_key = \"18\"\n    hex_key = \"19\"\n\
    \    hex_key = \"1A\"\n    hex_key = \"1B\"\n    hex_key = \"1C\"\n    hex_key\
    \ = \"1D\"\n    hex_key = \"1E\"\n    hex_key = \"1F\"\n    hex_key = \"20\"\n\
    \    hex_key = \"21\"\n    hex_key = \"22\"\n    hex_key = \"23\"\n    hex_key\
    \ = \"24\"\n    hex_key = \"25\"\n    hex_key = \"26\"\n    hex_key = \"27\"\n\
    \    hex_key = \"28\"\n    hex_key = \"29\"\n    hex_key = \"2A\"\n    hex_key\
    \ = \"2B\"\n    hex_key = \"2C\"\n    hex_key = \"2D\"\n    hex_key = \"2E\"\n\
    \    hex_key = \"2F\"\n    hex_key = \"30\"\n    hex_key = \"31\"\n    hex_key\
    \ = \"32\"\n    hex_key = \"33\"\n    hex_key = \"34\"\n    hex_key = \"35\"\n\
    \    hex_key = \"36\"\n    hex_key = \"37\"\n    hex_key = \"38\"\n    hex_key\
    \ = \"39\"\n    hex_key = \"3A\"\n    hex_key = \"3B\"\n    hex_key = \"3C\"\n\
    \    hex_key = \"3D\"\n    hex_key = \"3E\"\n    hex_key = \"3F\"\n    hex_key\
    \ = \"40\"\n    hex_key = \"41\"\n    hex_key = \"42\"\n    hex_key = \"43\"\n\
    \    hex_key = \"44\"\n    hex_key = \"45\"\n    hex_key = \"46\"\n    hex_key\
    \ = \"47\"\n    hex_key = \"48\"\n    hex_key = \"49\"\n    hex_key = \"4A\"\n\
    \    hex_key = \"4B\"\n    hex_key = \"4C\"\n    hex_key = \"4D\"\n    hex_key\
    \ = \"4E\"\n    hex_key = \"4F\"\n    hex_key = \"50\"\n    hex", "    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    hex_key = \"A\"\n    hex_key_len = len(hex_key)\n    hex_key_prime_digits\
    \ = 0\n    hex_key_prime_digits_count = 0\n    hex_key_prime_digits_sum = 0\n\
    \    hex_key_prime_digits_sum_count = 0\n    hex_key_prime_digits_sum_sum = 0\n\
    \    hex_key_prime_digits_sum_sum_count = 0\n    hex_key_prime_digits_sum_sum_sum\
    \ = 0\n    hex_key_prime_digits_sum_sum_sum_count = 0\n    hex_key_prime_digits_sum_sum_sum_sum\
    \ = 0\n    hex_key_prime_digits_sum_sum_sum_sum = 0\n    hex_key_prime_digits_sum_sum_sum_sum_count\
    \ = 0\n    hex_key_prime_digits_sum_sum_sum_sum_sum = 0\n    hex_key_prime_digits_sum_sum_sum_sum_sum_count\
    \ = 0\n    hex_key_prime_digits_sum_sum_sum_sum_sum_sum = 0\n    hex_key_prime_digits_sum_sum_sum_sum_sum_sum_count\
    \ = 0\n    hex_key_prime_digits_sum_sum_sum_sum_sum_sum_sum = 0\n    hex_key_prime_digits_sum_sum_sum_sum_sum_sum_sum_count\
    \ = 0\n    hex_key_prime_digits_sum_sum_sum_sum_sum_sum_sum_sum = 0\n    hex_key_prime_digits_sum_sum_sum_sum_sum_sum_sum_sum_count\
    \ = 0\n    hex_key_prime_digits_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0\n    hex_key_prime_digits_sum_sum_sum_sum_sum_sum_sum_sum_sum_count\
    \ = 0\n    hex_key_prime_digits_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0\n\
    \    hex_key_prime_digits_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_count = 0\n\
    \    hex_key_prime_digits_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0\n  \
    \  hex_key_prime_digits_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_count = 0\n  \
    \  hex_key_prime_digits_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0\n    hex_key_prime_digits_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_count\
    \ = 0\n    hex_key_prime_digits_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum\
    \ = 0\n    hex_key_prime_digits_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_count\
    \ = 0\n    hex_key_prime_digits_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum\
    \ = 0\n    hex_key_prime_digits_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_count\
    \ = 0\n    hex_key_prime_digits_sum_sum_sum_sum_sum_sum_sum_", "    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    hex_key = \"A\"\n    hex_key = \"B\"\n    hex_key\
    \ = \"C\"\n    hex_key = \"D\"\n    hex_key = \"E\"\n    hex_key = \"F\"\n   \
    \ hex_key = \"0\"\n    hex_key = \"1\"\n    hex_key = \"2\"\n    hex_key = \"\
    3\"\n    hex_key = \"4\"\n    hex_key = \"5\"\n    hex_key = \"6\"\n    hex_key\
    \ = \"7\"\n    hex_key = \"8\"\n    hex_key = \"9\"\n    hex_key = \"A\"\n   \
    \ hex_key = \"B\"\n    hex_key = \"C\"\n    hex_key = \"D\"\n    hex_key = \"\
    E\"\n    hex_key = \"F\"\n    hex_key = \"0\"\n    hex_key = \"1\"\n    hex_key\
    \ = \"2\"\n    hex_key = \"3\"\n    hex_key = \"4\"\n    hex_key = \"5\"\n   \
    \ hex_key = \"6\"\n    hex_key = \"7\"\n    hex_key = \"8\"\n    hex_key = \"\
    9\"\n    hex_key = \"A\"\n    hex_key = \"B\"\n    hex_key = \"C\"\n    hex_key\
    \ = \"D\"\n    hex_key = \"E\"\n    hex_key = \"F\"\n    hex_key = \"0\"\n   \
    \ hex_key = \"1\"\n    hex_key = \"2\"\n    hex_key = \"3\"\n    hex_key = \"\
    4\"\n    hex_key = \"5\"\n    hex_key = \"6\"\n    hex_key = \"7\"\n    hex_key\
    \ = \"8\"\n    hex_key = \"9\"\n    hex_key = \"A\"\n    hex_key = \"B\"\n   \
    \ hex_key = \"C\"\n    hex_key = \"D\"\n    hex_key = \"E\"\n    hex_key = \"\
    F\"\n    hex_key = \"0\"\n    hex_key = \"1\"\n    hex_key = \"2\"\n    hex_key\
    \ = \"3\"\n    hex_key = \"4\"\n    hex_key = \"5\"\n    hex_key = \"6\"\n   \
    \ hex_key = \"7\"\n    hex_key = \"8\"\n    hex_key = \"9\"\n    hex_key = \"\
    A\"\n    hex_key = \"B\"\n    hex_key = \"C\"\n    hex_key = \"D\"\n    hex_key\
    \ = \"E\"\n    hex_key = \"F\"\n    hex_key = \"0\"\n    hex_key = \"1\"\n   \
    \ hex_key = \"2\"\n    hex_key = \"3\"\n    hex_key = \"4\"\n    hex_key = \"\
    5\"\n    hex_key = \"6", "    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    \n    hex_key = '0F'\n    hex_key = 'A'\n    hex_key = 'F'\n  \
    \  hex_key = 'F'\n    hex_key = 'F'\n    hex_key = 'F'\n    hex_key = 'F'\n  \
    \  hex_key = 'F'\n    hex_key = 'F'\n    hex_key = 'F'\n    hex_key = 'F'\n  \
    \  hex_key = 'F'\n    hex_key = 'F'\n    hex_key = 'F'\n    hex_key = 'F'\n  \
    \  hex_key = 'F'\n    hex_key = 'F'\n    hex_key = 'F'\n    hex_key = 'F'\n  \
    \  hex_key = 'F'\n    hex_key = 'F'\n    hex_key = 'F'\n    hex_key = 'F'\n  \
    \  hex_key = 'F'\n    hex_key = 'F'\n    hex_key = 'F'\n    hex_key = 'F'\n  \
    \  hex_key = 'F'\n    hex_key = 'F'\n    hex_key = 'F'\n    hex_key = 'F'\n  \
    \  hex_key = 'F'\n    hex_key = 'F'\n    hex_key = 'F'\n    hex_key = 'F'\n  \
    \  hex_key = 'F'\n    hex_key = 'F'\n    hex_key = 'F'\n    hex_key = 'F'\n  \
    \  hex_key = 'F'\n    hex_key = 'F'\n    hex_key = 'F'\n    hex_key = 'F'\n  \
    \  hex_key = 'F'\n    hex_key = 'F'\n    hex_key = 'F'\n    hex_key = 'F'\n  \
    \  hex_key = 'F'\n    hex_key = 'F'\n    hex_key = 'F'\n    hex_key = 'F'\n  \
    \  hex_key = 'F'\n    hex_key = 'F'\n    hex_key = 'F'\n    hex_key = 'F'\n  \
    \  hex_key = 'F'\n    hex_key = 'F'\n    hex_key = 'F'\n    hex_key = 'F'\n  \
    \  hex_key = 'F'\n    hex_key = 'F'\n    hex_key = 'F'\n    hex_key = 'F'\n  \
    \  hex_key = 'F'\n    hex_key = 'F'\n    hex_key = 'F'\n    hex_key = 'F'\n  \
    \  hex_key = 'F'\n    hex_key = 'F'\n    hex_key = 'F'\n    hex_key = 'F'\n  \
    \  hex_key = 'F'\n    hex_key = 'F", "    \n    hex_key = 'A'\n    hex_key = 'B'\n\
    \    hex_key = 'C'\n    hex_key = 'D'\n    hex_key = 'E'\n    hex_key = 'F'\n\
    \    hex_key = 'A'\n    hex_key = 'B'\n    hex_key = 'C'\n    hex_key = 'D'\n\
    \    hex_key = 'E'\n    hex_key = 'F'\n    hex_key = 'A'\n    hex_key = 'B'\n\
    \    hex_key = 'C'\n    hex_key = 'D'\n    hex_key = 'E'\n    hex_key = 'F'\n\
    \    hex_key = 'A'\n    hex_key = 'B'\n    hex_key = 'C'\n    hex_key = 'D'\n\
    \    hex_key = 'E'\n    hex_key = 'F'\n    hex_key = 'A'\n    hex_key = 'B'\n\
    \    hex_key = 'C'\n    hex_key = 'D'\n    hex_key = 'E'\n    hex_key = 'F'\n\
    \    hex_key = 'A'\n    hex_key = 'B'\n    hex_key = 'C'\n    hex_key = 'D'\n\
    \    hex_key = 'E'\n    hex_key = 'F'\n    hex_key = 'A'\n    hex_key = 'B'\n\
    \    hex_key = 'C'\n    hex_key = 'D'\n    hex_key = 'E'\n    hex_key = 'F'\n\
    \    hex_key = 'A'\n    hex_key = 'B'\n    hex_key = 'C'\n    hex_key = 'D'\n\
    \    hex_key = 'E'\n    hex_key = 'F'\n    hex_key = 'A'\n    hex_key = 'B'\n\
    \    hex_key = 'C'\n    hex_key = 'D'\n    hex_key = 'E'\n    hex_key = 'F'\n\
    \    hex_key = 'A'\n    hex_key = 'B'\n    hex_key = 'C'\n    hex_key = 'D'\n\
    \    hex_key = 'E'\n    hex_key = 'F'\n    hex_key = 'A'\n    hex_key = 'B'\n\
    \    hex_key = 'C'\n    hex_key = 'D'\n    hex_key = 'E'\n    hex_key = 'F'\n\
    \    hex_key = 'A'\n    hex_key = 'B'\n    hex_key = 'C'\n    hex_key = 'D'\n\
    \    hex_key = 'E'\n    hex_key = 'F'\n    hex_key = 'A'", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    hexadecimal = num.upper()\n\
    \    \n    hexadecimal_length = len(hexadecimal)\n    \n    prime_numbers = []\n\
    \    \n    for index in range(hexadecimal_length):\n        \n        hexadecimal_digit\
    \ = hexadecimal[index]\n        \n        if hexadecimal_digit in prime_numbers:\n\
    \            \n            continue\n        \n        else:\n            \n \
    \           prime_numbers.append(hexadecimal_digit)\n            \n    prime_numbers_length\
    \ = len(prime_numbers)\n    \n    if prime_numbers_length != hexadecimal_length:\n\
    \        \n        print(\"The number you entered is invalid.\")\n        \n \
    \   else:\n        \n        prime_numbers_counter = 0\n        \n        for\
    \ index in range(hexadecimal_length):\n            \n            hexadecimal_digit\
    \ = hexadecimal[index]\n            \n            if hexadecimal_digit in prime_numbers:\n\
    \                \n                prime_numbers_counter += 1\n              \
    \  \n            else:\n                \n                break\n        \n  \
    \      if prime_numbers_counter == hexadecimal_length:\n            \n       \
    \     print(\"The number you entered is valid.\")\n            \n        else:\n\
    \            \n            print(\"The number you entered is invalid.\")\n   \
    \         ", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    hex_key = \"A\"\n    hex_key = \"\
    B\"\n    hex_key = \"C\"\n    hex_key = \"D\"\n    hex_key = \"E\"\n    hex_key\
    \ = \"F\"\n    hex_key = \"0\"\n    hex_key = \"1\"\n    hex_key = \"2\"\n   \
    \ hex_key = \"3\"\n    hex_key = \"4\"\n    hex_key = \"5\"\n    hex_key = \"\
    6\"\n    hex_key = \"7\"\n    hex_key = \"8\"\n    hex_key = \"9\"\n    hex_key\
    \ = \"A\"\n    hex_key = \"B\"\n    hex_key = \"C\"\n    hex_key = \"D\"\n   \
    \ hex_key = \"E\"\n    hex_key = \"F\"\n    hex_key = \"0\"\n    hex_key = \"\
    1\"\n    hex_key = \"2\"\n    hex_key = \"3\"\n    hex_key = \"4\"\n    hex_key\
    \ = \"5\"\n    hex_key = \"6\"\n    hex_key = \"7\"\n    hex_key = \"8\"\n   \
    \ hex_key = \"9\"\n    hex_key = \"A\"\n    hex_key = \"B\"\n    hex_key = \"\
    C\"\n    hex_key = \"D\"\n    hex_key = \"E\"\n    hex_key = \"F\"\n    hex_key\
    \ = \"0\"\n    hex_key = \"1\"\n    hex_key = \"2\"\n    hex_key = \"3\"\n   \
    \ hex_key = \"4\"\n    hex_key = \"5\"\n    hex_key = \"6\"\n    hex_key = \"\
    7\"\n    hex_key = \"8\"\n    hex_key = \"9\"\n    hex_key = \"A\"\n    hex_key\
    \ = \"B\"\n    hex_key = \"C\"\n    hex_key = \"D\"\n    hex_key = \"E\"\n   \
    \ hex_key = \"F\"\n    hex_key = \"0\"\n    hex_key = \"1\"\n    hex_key = \"\
    2\"\n    hex_key = \"3\"\n    hex_key = \"4\"\n    hex_key = \"5\"\n    hex_key\
    \ = \"6\"\n    hex_key = \"7\"\n    hex_key = \"8\"\n    hex_key = \"9\"\n   \
    \ hex_key = \"A\"\n    hex_key = \"B\"\n    hex_key = \"C\"\n    hex_key = \"\
    D\"\n    hex_key = \"E\"\n    hex_key = \"F\"\n    hex_key = \"0\"\n    hex_key\
    \ = \"1\"\n    hex_key = \"2\"\n    hex_key = \"3\"\n    hex_key = \"4\"\n   \
    \ hex_key = \"5\"\n    hex_key = \"6", "    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    hex_key = \"A\"\n    count = 0\n    \n    for char\
    \ in hex_key:\n        if char == \"A\" or char == \"B\" or char == \"C\" or char\
    \ == \"D\" or char == \"E\" or char == \"F\":\n            count += 1\n      \
    \  else:\n            count = 0\n    return count\n", "    \n    hexadecimal =\
    \ num\n    hexadecimal = hexadecimal.upper()\n    \n    hexadecimal_length = len(hexadecimal)\n\
    \    \n    prime_numbers = []\n    \n    for digit in range(hexadecimal_length):\n\
    \        \n        digit_value = int(hexadecimal[digit])\n        \n        if\
    \ digit_value not in prime_numbers:\n            \n            prime_numbers.append(digit_value)\n\
    \            \n        else:\n            \n            prime_numbers.remove(digit_value)\n\
    \            \n    return len(prime_numbers)\n</cell>\n<cell>\nhex_key(\"A\")\n\
    </cell>\n<cell>\nhex_key(\"B\")\n</cell>\n<cell>\nhex_key(\"C\")\n</cell>\n<cell>\n\
    hex_key(\"D\")\n</cell>\n<cell>\nhex_key(\"E\")\n</cell>\n<cell>\nhex_key(\"F\"\
    )\n</cell>\n<cell>\nhex_key(\"G\")\n</cell>\n<cell>\nhex_key(\"H\")\n</cell>\n\
    <cell>\nhex_key(\"I\")\n</cell>\n<cell>\nhex_key(\"J\")\n</cell>\n<cell>\nhex_key(\"\
    K\")\n</cell>\n<cell>\nhex_key(\"L\")\n</cell>\n<cell>\nhex_key(\"M\")\n</cell>\n\
    <cell>\nhex_key(\"N\")\n</cell>\n<cell>\nhex_key(\"O\")\n</cell>\n<cell>\nhex_key(\"\
    P\")\n</cell>\n<cell>\nhex_key(\"Q\")\n</cell>\n<cell>\nhex_key(\"R\")\n</cell>\n\
    <cell>\nhex_key(\"S\")\n</cell>\n<cell>\nhex_key(\"T\")\n</cell>\n<cell>\nhex_key(\"\
    U\")\n</cell>\n<cell>\nhex_key(\"V\")\n</cell>\n<cell>\nhex_key(\"W\")\n</cell>\n\
    <cell>\nhex_key(\"X\")\n</cell>\n<cell>\nhex_key(\"Y\")\n</cell>\n<cell>\nhex_key(\"\
    Z\")\n</cell>\n<cell>\nhex_key(\"0\")\n</cell>\n<cell>\nhex_key(\"1\")\n</cell>\n\
    <cell>\nhex_key(\"2\")\n</cell", "    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    hex_key = \"A\"\n    hex_key_len = len(hex_key)\n    hex_key_prime_digits\
    \ = 0\n    hex_key_prime_digits += hex_key.count(\"A\")\n    hex_key_prime_digits\
    \ += hex_key.count(\"B\")\n    hex_key_prime_digits += hex_key.count(\"C\")\n\
    \    hex_key_prime_digits += hex_key.count(\"D\")\n    hex_key_prime_digits +=\
    \ hex_key.count(\"E\")\n    hex_key_prime_digits += hex_key.count(\"F\")\n   \
    \ hex_key_prime_digits += hex_key.count(\"0\")\n    hex_key_prime_digits += hex_key.count(\"\
    1\")\n    hex_key_prime_digits += hex_key.count(\"2\")\n    hex_key_prime_digits\
    \ += hex_key.count(\"3\")\n    hex_key_prime_digits += hex_key.count(\"4\")\n\
    \    hex_key_prime_digits += hex_key.count(\"5\")\n    hex_key_prime_digits +=\
    \ hex_key.count(\"6\")\n    hex_key_prime_digits += hex_key.count(\"7\")\n   \
    \ hex_key_prime_digits += hex_key.count(\"8\")\n    hex_key_prime_digits += hex_key.count(\"\
    9\")\n    hex_key_prime_digits += hex_key.count(\"A\")\n    hex_key_prime_digits\
    \ += hex_key.count(\"B\")\n    hex_key_prime_digits += hex_key.count(\"C\")\n\
    \    hex_key_prime_digits += hex_key.count(\"D\")\n    hex_key_prime_digits +=\
    \ hex_key.count(\"E\")\n    hex_key_prime_digits += hex_key.count(\"F\")\n   \
    \ hex_key_prime_digits += hex_key.count(\"0\")\n    hex_key_prime_digits += hex_key.count(\"\
    1\")\n    hex_key_prime_digits += hex_key.count(\"2\")\n    hex_key_prime_digits\
    \ += hex_key.count(\"3\")\n    hex_key_prime_digits += hex_key.count(\"4\")\n\
    \    hex_key_prime_digits += hex_key.count(\"5\")\n    hex_key_prime_digits +=\
    \ hex_key.count(\"6\")\n    hex_key_prime_digits += hex_key.count(\"7\")\n   \
    \ hex_key_prime_digits += hex_key.count(\"8\")\n    hex_key_prime_digits += hex_key.count(\"\
    9\")\n    hex_key_prime_digits += hex_key.count(\"A\")\n    hex_key_prime_digits\
    \ += ", "    hex_key = \"A\"\n    hex_key_len = len(hex_key)\n    prime_key_len\
    \ = 2\n    prime_key_len += 2\n    prime_key_len += 2\n    prime_key_len += 2\n\
    \    prime_key_len += 2\n    prime_key_len += 2\n    prime_key_len += 2\n    prime_key_len\
    \ += 2\n    prime_key_len += 2\n    prime_key_len += 2\n    prime_key_len += 2\n\
    \    prime_key_len += 2\n    prime_key_len += 2\n    prime_key_len += 2\n    prime_key_len\
    \ += 2\n    prime_key_len += 2\n    prime_key_len += 2\n    prime_key_len += 2\n\
    \    prime_key_len += 2\n    prime_key_len += 2\n    prime_key_len += 2\n    prime_key_len\
    \ += 2\n    prime_key_len += 2\n    prime_key_len += 2\n    prime_key_len += 2\n\
    \    prime_key_len += 2\n    prime_key_len += 2\n    prime_key_len += 2\n    prime_key_len\
    \ += 2\n    prime_key_len += 2\n    prime_key_len += 2\n    prime_key_len += 2\n\
    \    prime_key_len += 2\n    prime_key_len += 2\n    prime_key_len += 2\n    prime_key_len\
    \ += 2\n    prime_key_len += 2\n    prime_key_len += 2\n    prime_key_len += 2\n\
    \    prime_key_len += 2\n    prime_key_len += 2\n    prime_key_len += 2\n    prime_key_len\
    \ += 2\n    prime_key_len += 2\n    prime_key_len += 2\n    prime_key_len += 2\n\
    \    prime_key_len += 2\n    prime_key_len += 2\n    prime_key_len += 2\n    prime_key_len\
    \ += 2\n    prime_key_len += 2\n    prime_key_len += 2\n    prime_key_len += 2\n\
    \    prime_key_len += 2\n    prime_key_len += 2\n    prime_key_len += 2\n    prime_key_len\
    \ += 2\n    prime_key_len += 2\n    prime_key_len += 2\n    prime_key_len += 2\n\
    \    prime_key_len += 2\n    prime_key_len += 2\n    prime_", "    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    \n    hex_digits = [int(i) for i in num.upper().replace('\
    \ ','')]\n    hex_digits_set = set(hex_digits)\n    \n    prime_digits = [2,3,5,7,11,13,17,19]\n\
    \    prime_digits_set = set(prime_digits)\n    \n    prime_digits_set = prime_digits_set.union(hex_digits_set)\n\
    \    \n    prime_digits_set = prime_digits_set.difference(prime_digits_set)\n\
    \    \n    prime_digits_set = prime_digits_set.difference(prime_digits_set)\n\
    \    \n    prime_digits_set = prime_digits_set.difference(prime_digits_set)\n\
    \    \n    prime_digits_set = prime_digits_set.difference(prime_digits_set)\n\
    \    \n    prime_digits_set = prime_digits_set.difference(prime_digits_set)\n\
    \    \n    prime_digits_set = prime_digits_set.difference(prime_digits_set)\n\
    \    \n    prime_digits_set = prime_digits_set.difference(prime_digits_set)\n\
    \    \n    prime_digits_set = prime_digits_set.difference(prime_digits_set)\n\
    \    \n    prime_digits_set = prime_digits_set.difference(prime_digits_set)\n\
    \    \n    prime_digits_set = prime_digits_set.difference(prime_digits_set)\n\
    \    \n    prime_digits_set = prime_digits_set.difference(prime_digits_set)\n\
    \    \n    prime_digits_set = prime_digits_set.difference(prime_digits_set)\n\
    \    \n    prime_digits_set = prime_digits_set.difference(prime_digits_set)\n\
    \    \n    prime_digits_set = prime_digits_set.difference(prime_digits_set)\n\
    \    \n    prime_digits_set = prime_digits_set.difference(prime_digits_set)\n\
    \    \n    prime_digits_set = prime_digits_set.difference(prime_digits_set)\n\
    \    \n    prime_digits_set = prime_digits_set.difference(prime_digits_set)\n\
    \    \n    prime_digits_set = prime_digits_set.difference(prime_digits_set)\n\
    \    \n    prime_digits_set = prime_digits_set.difference(prime_digits_set)\n\
    \    \n    prime_digits_set = prime_digits_set.difference(prime_digits_set)\n\
    \    \n    prime_digits_set = prime_digits_set.difference(prime_digits_set)\n\
    \    \n    prime_digits_set = prime_digits_set.difference(prime_", "    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   hex_key = \"A\"\n    hex_key_len = len(hex_key)\n    hex_key_prime_digits\
    \ = 0\n    hex_key_prime_digits_count = 0\n    hex_key_prime_digits_sum = 0\n\
    \    hex_key_prime_digits_sum_count = 0\n    hex_key_prime_digits_sum_sum = 0\n\
    \    hex_key_prime_digits_sum_sum_count = 0\n    hex_key_prime_digits_sum_sum_sum\
    \ = 0\n    hex_key_prime_digits_sum_sum_sum_count = 0\n    hex_key_prime_digits_sum_sum_sum_sum\
    \ = 0\n    hex_key_prime_digits_sum_sum_sum_sum_count = 0\n    hex_key_prime_digits_sum_sum_sum_sum_sum\
    \ = 0\n    hex_key_prime_digits_sum_sum_sum_sum_sum_count = 0\n    hex_key_prime_digits_sum_sum_sum_sum_sum_sum\
    \ = 0\n    hex_key_prime_digits_sum_sum_sum_sum_sum_sum_count = 0\n    hex_key_prime_digits_sum_sum_sum_sum_sum_sum_sum\
    \ = 0\n    hex_key_prime_digits_sum_sum_sum_sum_sum_sum_sum_count = 0\n    hex_key_prime_digits_sum_sum_sum_sum_sum_sum_sum_sum\
    \ = 0\n    hex_key_prime_digits_sum_sum_sum_sum_sum_sum_sum_sum_count = 0\n  \
    \  hex_key_prime_digits_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0\n    hex_key_prime_digits_sum_sum_sum_sum_sum_sum_sum_sum_sum_count\
    \ = 0\n    hex_key_prime_digits_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0\n\
    \    hex_key_prime_digits_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_count = 0\n\
    \    hex_key_prime_digits_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0\n  \
    \  hex_key_prime_digits_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_count = 0\n  \
    \  hex_key_prime_digits_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0\n    hex_key_prime_digits_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_count\
    \ = 0\n    hex_key_prime_digits_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum\
    \ = 0\n    hex_key_prime_digits_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_count\
    \ = 0\n    hex_key_prime_digits_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum\
    \ = 0\n    hex_key_prime_digits_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_count\
    \ = 0\n    hex_key_prime_digits_sum_sum_sum_sum_sum_sum_sum_sum_", "    hex_key\
    \ = \"A\"\n    hex_key = \"B\"\n    hex_key = \"C\"\n    hex_key = \"D\"\n   \
    \ hex_key = \"E\"\n    hex_key = \"F\"\n    hex_key = \"0\"\n    hex_key = \"\
    1\"\n    hex_key = \"2\"\n    hex_key = \"3\"\n    hex_key = \"4\"\n    hex_key\
    \ = \"5\"\n    hex_key = \"6\"\n    hex_key = \"7\"\n    hex_key = \"8\"\n   \
    \ hex_key = \"9\"\n    hex_key = \"A\"\n    hex_key = \"B\"\n    hex_key = \"\
    C\"\n    hex_key = \"D\"\n    hex_key = \"E\"\n    hex_key = \"F\"\n    hex_key\
    \ = \"0\"\n    hex_key = \"1\"\n    hex_key = \"2\"\n    hex_key = \"3\"\n   \
    \ hex_key = \"4\"\n    hex_key = \"5\"\n    hex_key = \"6\"\n    hex_key = \"\
    7\"\n    hex_key = \"8\"\n    hex_key = \"9\"\n    hex_key = \"A\"\n    hex_key\
    \ = \"B\"\n    hex_key = \"C\"\n    hex_key = \"D\"\n    hex_key = \"E\"\n   \
    \ hex_key = \"F\"\n    hex_key = \"0\"\n    hex_key = \"1\"\n    hex_key = \"\
    2\"\n    hex_key = \"3\"\n    hex_key = \"4\"\n    hex_key = \"5\"\n    hex_key\
    \ = \"6\"\n    hex_key = \"7\"\n    hex_key = \"8\"\n    hex_key = \"9\"\n   \
    \ hex_key = \"A\"\n    hex_key = \"B\"\n    hex_key = \"C\"\n    hex_key = \"\
    D\"\n    hex_key = \"E\"\n    hex_key = \"F\"\n    hex_key = \"0\"\n    hex_key\
    \ = \"1\"\n    hex_key = \"2\"\n    hex_key = \"3\"\n    hex_key = \"4\"\n   \
    \ hex_key = \"5\"\n    hex_key = \"6\"\n    hex_key = \"7\"\n    hex_key = \"\
    8\"\n    hex_key = \"9\"\n    hex_key = \"A\"\n    hex_key = \"B\"\n    hex_key\
    \ = \"C\"\n    hex_key = \"D\"\n    hex_key = \"E\"\n    hex_key = \"F\"\n   \
    \ hex_key = \"0\"\n    hex_key = \"1\"\n    hex_key = \"2\"\n    hex_key = \"\
    3\"\n    hex_key = \"4\"\n    hex_key = \"5\"\n    hex_key = \"6", "    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    hex_string = num\n\
    \    hex_digits = hex_string.upper()\n    hex_digits_length = len(hex_digits)\n\
    \    \n    prime_digits = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n\
    \    \n    prime_digits_length = len(prime_digits)\n    \n    prime_digits_sum\
    \ = 0\n    \n    prime_digits_sum = 0\n    \n    prime_digits_sum = 0\n    \n\
    \    prime_digits_sum = 0\n    \n    prime_digits_sum = 0\n    \n    prime_digits_sum\
    \ = 0\n    \n    prime_digits_sum = 0\n    \n    prime_digits_sum = 0\n    \n\
    \    prime_digits_sum = 0\n    \n    prime_digits_sum = 0\n    \n    prime_digits_sum\
    \ = 0\n    \n    prime_digits_sum = 0\n    \n    prime_digits_sum = 0\n    \n\
    \    prime_digits_sum = 0\n    \n    prime_digits_sum = 0\n    \n    prime_digits_sum\
    \ = 0\n    \n    prime_digits_sum = 0\n    \n    prime_digits_sum = 0\n    \n\
    \    prime_digits_sum = 0\n    \n    prime_digits_sum = 0\n    \n    prime_digits_sum\
    \ = 0\n    \n    prime_digits_sum = 0\n    \n    prime_digits_sum = 0\n    \n\
    \    prime_digits_sum = 0\n    \n    prime_digits_sum = 0\n    \n    prime_digits_sum\
    \ = 0\n    \n    prime_digits_sum = 0\n    \n    prime_digits_sum = 0\n    \n\
    \    prime_digits_sum = 0\n    \n    prime_digits_sum = 0\n    \n    prime_digits_sum\
    \ = 0\n    \n    prime_digits_sum = 0\n    \n    prime_digits_sum = 0\n    \n\
    \    prime_digits_sum = 0\n    \n    prime_digits_sum = 0\n    \n    prime_digits_sum\
    \ = 0\n    \n    prime_digits_sum = 0\n    \n    prime_digits_sum = 0\n    \n\
    \    prime_digits_sum = 0\n    \n    prime_digits_sum = 0\n    \n    prime_digits_sum\
    \ = 0\n    \n    prime_digits_sum = 0\n    \n    prime_digits_", "    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    \n    hex_key = \"A\"\n    \n    count = 0\n    \n    hex_key =\
    \ str(hex_key)\n    \n    hex_key = list(hex_key)\n    \n    hex_key = [hex_key[i]\
    \ for i in range(len(hex_key)) if hex_key[i] in \"0123456789ABCDEF\"]\n    \n\
    \    hex_key = [hex_key[i] for i in range(len(hex_key)) if hex_key[i] in \"0123456789ABCDEF\"\
    ]\n    \n    hex_key = [hex_key[i] for i in range(len(hex_key)) if hex_key[i]\
    \ in \"0123456789ABCDEF\"]\n    \n    hex_key = [hex_key[i] for i in range(len(hex_key))\
    \ if hex_key[i] in \"0123456789ABCDEF\"]\n    \n    hex_key = [hex_key[i] for\
    \ i in range(len(hex_key)) if hex_key[i] in \"0123456789ABCDEF\"]\n    \n    hex_key\
    \ = [hex_key[i] for i in range(len(hex_key)) if hex_key[i] in \"0123456789ABCDEF\"\
    ]\n    \n    hex_key = [hex_key[i] for i in range(len(hex_key)) if hex_key[i]\
    \ in \"0123456789ABCDEF\"]\n    \n    hex_key = [hex_key[i] for i in range(len(hex_key))\
    \ if hex_key[i] in \"0123456789ABCDEF\"]\n    \n    hex_key = [hex_key[i] for\
    \ i in range(len(hex_key)) if hex_key[i] in \"0123456789ABCDEF\"]\n    \n    hex_key\
    \ = [hex_key[i] for i in range(len(hex_key)) if hex_key[i] in \"0123456789ABCDEF\"\
    ]\n    \n    hex_key = [hex_key[i] for i in range(len(hex_key)) if hex_key[i]\
    \ in \"0123456789ABCDEF\"]\n    \n    hex_key = [hex_key[i] for i in range(len(hex_key))\
    \ if hex_key[i] in \"0123456789ABCDEF\"]\n    \n    hex_key = [hex_key[i] for\
    \ i in range(len(hex_key)) if hex_key[i] in \"0123456789ABCDEF\"]\n    \n    hex_key\
    \ = [hex_key[i] for i in range(len(hex_key)) if hex_key[i] in \"0123456789ABCDEF\"\
    ]\n    \n    hex_key = [hex_key[i] for i in range(len(hex_key)) if hex_key[i]\
    \ in \"0123456789ABCDEF\"]\n    \n    hex_key = [hex_key[i] for i in range(len(hex_key))\
    \ if hex_key[i] in \"0123456789ABCDEF\"]\n    \n    hex_key = [hex_key[i] for\
    \ i in range(len(hex_key)) if hex_key[i] in \"0123456789ABCDEF\"]\n    \n    hex_key\
    \ = [hex_key[i] for i in range(len(hex_key)) if hex_key[i] in \"0123456789ABCDEF\"\
    ]\n    \n    hex_key = [hex_key[i] for i in range(len(hex_key)) if hex_key[i]\
    \ in \"0123456789ABCDEF\"]\n    \n    hex_key = [hex_key[i] for i in range(len(hex_key))\
    \ if hex_key[i] in \"0123456789ABCDEF\"]\n", "    \n    hex_key = int(num.upper())\n\
    \    \n    count = 0\n    \n    while hex_key > 0:\n        hex_key //= 16\n \
    \       count += 1\n    \n    return count\n</cell>\n<cell>", "    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    hex_key = \"A\"\n    hex_key = \"B\"\n    hex_key\
    \ = \"C\"\n    hex_key = \"D\"\n    hex_key = \"E\"\n    hex_key = \"F\"\n   \
    \ hex_key = \"0\"\n    hex_key = \"1\"\n    hex_key = \"2\"\n    hex_key = \"\
    3\"\n    hex_key = \"4\"\n    hex_key = \"5\"\n    hex_key = \"6\"\n    hex_key\
    \ = \"7\"\n    hex_key = \"8\"\n    hex_key = \"9\"\n    hex_key = \"A\"\n   \
    \ hex_key = \"B\"\n    hex_key = \"C\"\n    hex_key = \"D\"\n    hex_key = \"\
    E\"\n    hex_key = \"F\"\n    hex_key = \"0\"\n    hex_key = \"1\"\n    hex_key\
    \ = \"2\"\n    hex_key = \"3\"\n    hex_key = \"4\"\n    hex_key = \"5\"\n   \
    \ hex_key = \"6\"\n    hex_key = \"7\"\n    hex_key = \"8\"\n    hex_key = \"\
    9\"\n    hex_key = \"A\"\n    hex_key = \"B\"\n    hex_key = \"C\"\n    hex_key\
    \ = \"D\"\n    hex_key = \"E\"\n    hex_key = \"F\"\n    hex_key = \"0\"\n   \
    \ hex_key = \"1\"\n    hex_key = \"2\"\n    hex_key = \"3\"\n    hex_key = \"\
    4\"\n    hex_key = \"5\"\n    hex_key = \"6\"\n    hex_key = \"7\"\n    hex_key\
    \ = \"8\"\n    hex_key = \"9\"\n    hex_key = \"A\"\n    hex_key = \"B\"\n   \
    \ hex_key = \"C\"\n    hex_key = \"D\"\n    hex_key = \"E\"\n    hex_key = \"\
    F\"\n    hex_key = \"0\"\n    hex_key = \"1\"\n    hex_key = \"2\"\n    hex_key\
    \ = \"3\"\n    hex_key = \"4\"\n    hex_key = \"5\"\n    hex_key = \"6\"\n   \
    \ hex_key = \"7\"\n    hex_key = \"8\"\n    hex_key = \"9\"\n    hex_key = \"\
    A\"\n    hex_key = \"B\"\n    hex_key = \"C\"\n    hex_key = \"D\"\n    hex_key\
    \ = \"E\"\n    hex_key = \"F\"\n    hex_key = \"0\"\n    hex_key = \"1\"\n   \
    \ hex_key = \"2\"\n    hex_key = \"3\"\n    hex_key = \"4\"\n    hex_key = \"\
    5\"\n    hex_key = \"6", "    hex_key = \"A\"\n    hex_key = \"B\"\n    hex_key\
    \ = \"C\"\n    hex_key = \"D\"\n    hex_key = \"E\"\n    hex_key = \"F\"\n   \
    \ hex_key = \"0\"\n    hex_key = \"1\"\n    hex_key = \"2\"\n    hex_key = \"\
    3\"\n    hex_key = \"4\"\n    hex_key = \"5\"\n    hex_key = \"6\"\n    hex_key\
    \ = \"7\"\n    hex_key = \"8\"\n    hex_key = \"9\"\n    hex_key = \"A\"\n   \
    \ hex_key = \"B\"\n    hex_key = \"C\"\n    hex_key = \"D\"\n    hex_key = \"\
    E\"\n    hex_key = \"F\"\n    hex_key = \"0\"\n    hex_key = \"1\"\n    hex_key\
    \ = \"2\"\n    hex_key = \"3\"\n    hex_key = \"4\"\n    hex_key = \"5\"\n   \
    \ hex_key = \"6\"\n    hex_key = \"7\"\n    hex_key = \"8\"\n    hex_key = \"\
    9\"\n    hex_key = \"A\"\n    hex_key = \"B\"\n    hex_key = \"C\"\n    hex_key\
    \ = \"D\"\n    hex_key = \"E\"\n    hex_key = \"F\"\n    hex_key = \"0\"\n   \
    \ hex_key = \"1\"\n    hex_key = \"2\"\n    hex_key = \"3\"\n    hex_key = \"\
    4\"\n    hex_key = \"5\"\n    hex_key = \"6\"\n    hex_key = \"7\"\n    hex_key\
    \ = \"8\"\n    hex_key = \"9\"\n    hex_key = \"A\"\n    hex_key = \"B\"\n   \
    \ hex_key = \"C\"\n    hex_key = \"D\"\n    hex_key = \"E\"\n    hex_key = \"\
    F\"\n    hex_key = \"0\"\n    hex_key = \"1\"\n    hex_key = \"2\"\n    hex_key\
    \ = \"3\"\n    hex_key = \"4\"\n    hex_key = \"5\"\n    hex_key = \"6\"\n   \
    \ hex_key = \"7\"\n    hex_key = \"8\"\n    hex_key = \"9\"\n    hex_key = \"\
    A\"\n    hex_key = \"B\"\n    hex_key = \"C\"\n    hex_key = \"D\"\n    hex_key\
    \ = \"E\"\n    hex_key = \"F\"\n    hex_key = \"0\"\n    hex_key = \"1\"\n   \
    \ hex_key = \"2\"\n    hex_key = \"3\"\n    hex_key = \"4\"\n    hex_key = \"\
    5\"\n    hex_key = \"6", "    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n\
    \    hex_key = int(num.upper())\n    \n    prime_numbers = []\n    \n    for x\
    \ in range(10):\n        \n        if hex_key%x == 0:\n            prime_numbers.append(x)\n\
    \            \n    prime_numbers.sort()\n    \n    prime_numbers_count = 0\n \
    \   \n    for x in prime_numbers:\n        \n        if x%2 == 0:\n          \
    \  prime_numbers_count += 1\n            \n        if x%3 == 0:\n            prime_numbers_count\
    \ += 1\n            \n        if x%5 == 0:\n            prime_numbers_count +=\
    \ 1\n            \n        if x%7 == 0:\n            prime_numbers_count += 1\n\
    \            \n        if x%11 == 0:\n            prime_numbers_count += 1\n \
    \           \n        if x%13 == 0:\n            prime_numbers_count += 1\n  \
    \          \n        if x%17 == 0:\n            prime_numbers_count += 1\n   \
    \         \n        if x%19 == 0:\n            prime_numbers_count += 1\n    \
    \        \n        if x%23 == 0:\n            prime_numbers_count += 1\n     \
    \       \n        if x%29 == 0:\n            prime_numbers_count += 1\n      \
    \      \n        if x%31 == 0:\n            prime_numbers_count += 1\n       \
    \     \n        if x%37 == 0:\n            prime_numbers_count += 1\n        \
    \    \n        if x%41 == 0:\n            prime_numbers_count += 1\n         \
    \   \n        if x%43 == 0:\n            prime_numbers_count += 1\n          \
    \  \n        if x%47 == 0:\n            prime_numbers_count += 1\n           \
    \ \n        if x%53 == 0:\n            prime_numbers_count += 1\n            \n\
    \        if x%59 == 0:\n            prime_numbers_count += 1\n            \n \
    \       if x%61 == 0:\n            prime_numbers_count += 1\n            \n  \
    \      if x%67 == 0:\n            prime_numbers_count += 1\n            \n   \
    \     if x%71 == 0:\n            prime_numbers_count += 1\n            \n    \
    \    if x%73 == 0:\n            prime_numbers_count += 1\n            \n     \
    \   if x%79 == 0:\n            prime_numbers_count += 1\n            \n      \
    \  if x%83 == 0:\n            prime_numbers_count += 1\n            \n       \
    \ if x%89 == 0:\n            prime_numbers_count += 1\n            \n        if\
    \ x%97 == 0:\n            prime_numbers_count += 1\n            \n        if x%103\
    \ == 0:\n            prime_numbers_count += 1\n            \n        if x%109\
    \ == 0:\n            prime_numbers_count += 1\n            \n        if x%113\
    \ == 0:\n            prime_numbers_count += 1\n            \n        if x%127\
    \ == 0:\n            prime_numbers_count += 1\n            \n        if x%131\
    \ == 0:\n            ", "    hex_key = \"A\"\n    hex_key_len = len(hex_key)\n\
    \    prime_key_len = 3\n    prime_key_digits = [2, 3, 5, 7]\n    prime_key_digits_len\
    \ = len(prime_key_digits)\n    prime_key_digits_sum = 0\n    prime_key_digits_sum_len\
    \ = len(prime_key_digits_sum)\n    prime_key_digits_product = 1\n    prime_key_digits_product_len\
    \ = len(prime_key_digits_product)\n    prime_key_digits_product = 1\n    prime_key_digits_product_len\
    \ = len(prime_key_digits_product)\n    prime_key_digits_product_product = 1\n\
    \    prime_key_digits_product_product_len = len(prime_key_digits_product_product)\n\
    \    prime_key_digits_product_product_product = 1\n    prime_key_digits_product_product_product_len\
    \ = len(prime_key_digits_product_product_product)\n    prime_key_digits_product_product_product_product\
    \ = 1\n    prime_key_digits_product_product_product_product_len = len(prime_key_digits_product_product_product_product)\n\
    \    prime_key_digits_product_product_product_product_product = 1\n    prime_key_digits_product_product_product_product_product_len\
    \ = len(prime_key_digits_product_product_product_product_product)\n    prime_key_digits_product_product_product_product_product_product\
    \ = 1\n    prime_key_digits_product_product_product_product_product_product_len\
    \ = len(prime_key_digits_product_product_product_product_product_product)\n  \
    \  prime_key_digits_product_product_product_product_product_product_product =\
    \ 1\n    prime_key_digits_product_product_product_product_product_product_product_len\
    \ = len(prime_key_digits_product_product_product_product_product_product_product)\n\
    \    prime_key_digits_product_product_product_product_product_product_product_product\
    \ = 1\n    prime_key_digits_product_product_product_product_product_product_product_product_len\
    \ = len(prime_key_digits_product_product_product_product_product_product_product_product)\n\
    \    prime_key_digits_product_product_product_product_product_product_product_product_product\
    \ = 1\n    prime_key_digits_product_product_product_product_product_product_product_product_product_len\
    \ = len(prime_key_digits_product_product_product_product_product_product_product_product_product_product)\n\
    \    prime_key_digits_product_product_product_product_product_product_product_product_product_product\
    \ = 1\n    prime_key_digits_product_product_product_product_product_product_product_product_product_product_len\
    \ = len(prime_key_digits_product_product_product_product_product_product_product_product_product_product_product)\n\
    \    prime_key_digits_product_product_product_product_product_product_product_product_product_product_product\
    \ = 1\n    prime_key_digits_product_product_product_product_product_product_",
  "    \n    hex_digits = list(\"0123456789ABCDEF\")\n    \n    hex_string = num.upper()\n\
    \    \n    count = 0\n    \n    for digit in hex_string:\n        if digit in\
    \ hex_digits:\n            count += 1\n    \n    return count\n</cell>\n<cell>\n\
    hex_key(\"A\")\n</cell>\n<cell>\nhex_key(\"B\")\n</cell>\n<cell>\nhex_key(\"C\"\
    )\n</cell>\n<cell>\nhex_key(\"D\")\n</cell>\n<cell>\nhex_key(\"E\")\n</cell>\n\
    <cell>\nhex_key(\"F\")\n</cell>\n<cell>\nhex_key(\"A\")\n</cell>\n<cell>\nhex_key(\"\
    B\")\n</cell>\n<cell>\nhex_key(\"C\")\n</cell>\n<cell>\nhex_key(\"D\")\n</cell>\n\
    <cell>\nhex_key(\"E\")\n</cell>\n<cell>\nhex_key(\"F\")\n</cell>\n<cell>\nhex_key(\"\
    A\")\n</cell>\n<cell>\nhex_key(\"B\")\n</cell>\n<cell>\nhex_key(\"C\")\n</cell>\n\
    <cell>\nhex_key(\"D\")\n</cell>\n<cell>\nhex_key(\"E\")\n</cell>\n<cell>\nhex_key(\"\
    F\")\n</cell>\n<cell>\nhex_key(\"A\")\n</cell>\n<cell>\nhex_key(\"B\")\n</cell>\n\
    <cell>\nhex_key(\"C\")\n</cell>\n<cell>\nhex_key(\"D\")\n</cell>\n<cell>\nhex_key(\"\
    E\")\n</cell>\n<cell>\nhex_key(\"F\")\n</cell>\n<cell>\nhex_key(\"A\")\n</cell>\n\
    <cell>\nhex_key(\"B\")\n</cell>\n<cell>\nhex_key(\"C\")\n</cell>\n<cell>\nhex_key(\"\
    D\")\n</cell>\n<cell>\nhex_key(\"E\")\n</cell>\n<cell>\nhex_key(\"F\")\n</cell>\n\
    <cell>\nhex_key(\"A\")\n</cell>\n<cell>\nhex_key(\"B\")\n</cell>\n<cell>\nhex_key(\"\
    C", "    \n    hex_string = num\n    hex_digits = hex_string.upper()\n    hex_digits_length\
    \ = len(hex_digits)\n    \n    prime_numbers = []\n    \n    for digit in range(hex_digits_length):\n\
    \        \n        if hex_digits[digit] == \"A\":\n            prime_numbers.append(2)\n\
    \        elif hex_digits[digit] == \"B\":\n            prime_numbers.append(3)\n\
    \        elif hex_digits[digit] == \"C\":\n            prime_numbers.append(5)\n\
    \        elif hex_digits[digit] == \"D\":\n            prime_numbers.append(7)\n\
    \        elif hex_digits[digit] == \"E\":\n            prime_numbers.append(11)\n\
    \        elif hex_digits[digit] == \"F\":\n            prime_numbers.append(13)\n\
    \        else:\n            prime_numbers.append(int(hex_digits[digit]))\n   \
    \ \n    prime_numbers_length = len(prime_numbers)\n    \n    if prime_numbers_length\
    \ == 0:\n        return 0\n    elif prime_numbers_length == 1:\n        return\
    \ prime_numbers[0]\n    else:\n        prime_numbers_sum = sum(prime_numbers)\n\
    \        \n        if prime_numbers_sum % prime_numbers_length == 0:\n       \
    \     return prime_numbers_sum\n        else:\n            return prime_numbers_sum\
    \ / prime_numbers_length\n    ", "    hex_key = \"A\"\n    hex_key_len = len(hex_key)\n\
    \    prime_key_len = 2\n    prime_key_len += hex_key_len\n    prime_key_len +=\
    \ hex_key_len\n    prime_key_len += hex_key_len\n    prime_key_len += hex_key_len\n\
    \    prime_key_len += hex_key_len\n    prime_key_len += hex_key_len\n    prime_key_len\
    \ += hex_key_len\n    prime_key_len += hex_key_len\n    prime_key_len += hex_key_len\n\
    \    prime_key_len += hex_key_len\n    prime_key_len += hex_key_len\n    prime_key_len\
    \ += hex_key_len\n    prime_key_len += hex_key_len\n    prime_key_len += hex_key_len\n\
    \    prime_key_len += hex_key_len\n    prime_key_len += hex_key_len\n    prime_key_len\
    \ += hex_key_len\n    prime_key_len += hex_key_len\n    prime_key_len += hex_key_len\n\
    \    prime_key_len += hex_key_len\n    prime_key_len += hex_key_len\n    prime_key_len\
    \ += hex_key_len\n    prime_key_len += hex_key_len\n    prime_key_len += hex_key_len\n\
    \    prime_key_len += hex_key_len\n    prime_key_len += hex_key_len\n    prime_key_len\
    \ += hex_key_len\n    prime_key_len += hex_key_len\n    prime_key_len += hex_key_len\n\
    \    prime_key_len += hex_key_len\n    prime_key_len += hex_key_len\n    prime_key_len\
    \ += hex_key_len\n    prime_key_len += hex_key_len\n    prime_key_len += hex_key_len\n\
    \    prime_key_len += hex_key_len\n    prime_key_len += hex_key_len\n    prime_key_len\
    \ += hex_key_len\n    prime_key_len += hex_key_len\n    prime_key_len += hex_key_len\n\
    \    prime_key_len += hex_key_len\n    prime_key_len += hex_key_len\n    prime_key_len\
    \ += hex_key_len\n    prime_key_len += hex_key_len\n    prime_key_len += hex_key_len\n\
    \    prime_key_len += hex_key_len\n    prime_key_len += hex_key_len\n    prime_key_len\
    \ += hex_key_len\n    prime_key_len += hex_key_len\n    prime_key_len += hex_key_len\n\
    \    ", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n\
    \    hex_digits = list(\"0123456789ABCDEF\")\n    hex_digits_set = set(hex_digits)\n\
    \    \n    hex_digits_prime = set(hex_digits)\n    hex_digits_prime -= hex_digits_set\n\
    \    hex_digits_prime -= {chr(ord('A') + i) for i in range(26)}\n    hex_digits_prime\
    \ -= {chr(ord('a') + i) for i in range(26)}\n    hex_digits_prime -= {chr(ord('0')\
    \ + i) for i in range(10)}\n    hex_digits_prime -= {chr(ord('9') + i) for i in\
    \ range(10)}\n    hex_digits_prime -= {chr(ord('Z') + i) for i in range(10)}\n\
    \    hex_digits_prime -= {chr(ord('z') + i) for i in range(10)}\n    hex_digits_prime\
    \ -= {chr(ord('F') + i) for i in range(10)}\n    hex_digits_prime -= {chr(ord('f')\
    \ + i) for i in range(10)}\n    hex_digits_prime -= {chr(ord('E') + i) for i in\
    \ range(10)}\n    hex_digits_prime -= {chr(ord('e') + i) for i in range(10)}\n\
    \    hex_digits_prime -= {chr(ord('D') + i) for i in range(10)}\n    hex_digits_prime\
    \ -= {chr(ord('d') + i) for i in range(10)}\n    hex_digits_prime -= {chr(ord('C')\
    \ + i) for i in range(10)}\n    hex_digits_prime -= {chr(ord('c') + i) for i in\
    \ range(10)}\n    hex_digits_prime -= {chr(ord('B') + i) for i in range(10)}\n\
    \    hex_digits_prime -= {chr(ord('b') + i) for i in range(10)}\n    hex_digits_prime\
    \ -= {chr(ord('9') + i) for i in range(10)}\n    hex_digits_prime -= {chr(ord('8')\
    \ + i) for i in range(10)}\n    hex_digits_prime -= {chr(ord('7') + i) for i in\
    \ range(10)}\n    hex_digits_prime -= {chr(ord('6') + i) for i in range(10)}\n\
    \    hex_digits_prime -= {chr(ord('5') + i) for i in range(10)}\n    hex_digits_prime\
    \ -= {chr(ord('4') + i) for i in range(10)}\n    hex_digits_prime -= {chr(ord('3')\
    \ + i) for i in range(10)}\n    hex_digits_prime -= {chr(ord('2') + i) for i in\
    \ range(10)}\n    hex_digits_prime -= {chr(ord('1') + i) for i in range(10)}\n\
    \    hex_digits_prime -= {chr(ord('0') + i) for i in range(10)}\n    hex_digits_prime\
    \ -= {chr(ord('9') + i) for i in range(10)}\n    hex_digits_prime -= {chr(ord('8')\
    \ + i) for i in range(10)}\n    hex_digits_prime -= {chr(ord('7') + i) for i in\
    \ range(10)}\n    ", "    hex_key = \"A\"\n    count = 0\n    \n    if hex_key\
    \ == \"A\":\n        count = count + 1\n    elif hex_key == \"B\":\n        count\
    \ = count + 1\n    elif hex_key == \"C\":\n        count = count + 1\n    elif\
    \ hex_key == \"D\":\n        count = count + 1\n    elif hex_key == \"E\":\n \
    \       count = count + 1\n    elif hex_key == \"F\":\n        count = count +\
    \ 1\n    else:\n        print(\"Invalid input\")\n    \n    return count\n</cell>\n\
    <cell>\nhex_key(\"A\")\n</cell>\n<cell>\nhex_key(\"B\")\n</cell>\n<cell>\nhex_key(\"\
    C\")\n</cell>\n<cell>\nhex_key(\"D\")\n</cell>\n<cell>\nhex_key(\"E\")\n</cell>\n\
    <cell>\nhex_key(\"F\")\n</cell>\n<text>\nExercise 2\nWrite a function that receives\
    \ a positive integer and returns the sum of the squares of the digits of that\
    \ integer.\nExamples:\n                        \"\"\"", "    \n    hexadecimal\
    \ = num\n    hexadecimal = hexadecimal.upper()\n    hexadecimal = hexadecimal.replace('A','0')\n\
    \    hexadecimal = hexadecimal.replace('B','1')\n    hexadecimal = hexadecimal.replace('C','2')\n\
    \    hexadecimal = hexadecimal.replace('D','3')\n    hexadecimal = hexadecimal.replace('E','4')\n\
    \    hexadecimal = hexadecimal.replace('F','5')\n    hexadecimal = hexadecimal.replace('0','0')\n\
    \    hexadecimal = hexadecimal.replace('1','1')\n    hexadecimal = hexadecimal.replace('2','2')\n\
    \    hexadecimal = hexadecimal.replace('3','3')\n    hexadecimal = hexadecimal.replace('4','4')\n\
    \    hexadecimal = hexadecimal.replace('5','5')\n    hexadecimal = hexadecimal.replace('6','6')\n\
    \    hexadecimal = hexadecimal.replace('7','7')\n    hexadecimal = hexadecimal.replace('8','8')\n\
    \    hexadecimal = hexadecimal.replace('9','9')\n    hexadecimal = hexadecimal.replace('\
    \ ','')\n    hexadecimal = hexadecimal.replace('-','')\n    hexadecimal = hexadecimal.replace('.','')\n\
    \    hexadecimal = hexadecimal.replace(',','')\n    hexadecimal = hexadecimal.replace('+','')\n\
    \    hexadecimal = hexadecimal.replace('*','')\n    hexadecimal = hexadecimal.replace('(','')\n\
    \    hexadecimal = hexadecimal.replace(')','')\n    hexadecimal = hexadecimal.replace('\
    \ ','')\n    hexadecimal = hexadecimal.replace('-','')\n    hexadecimal = hexadecimal.replace('.','')\n\
    \    hexadecimal = hexadecimal.replace(',','')\n    hexadecimal = hexadecimal.replace('+','')\n\
    \    hexadecimal = hexadecimal.replace('*','')\n    hexadecimal = hexadecimal.replace('(','')\n\
    \    hexadecimal = hexadecimal.replace(')','')\n    hexadecimal = hexadecimal.replace('\
    \ ','')\n    hexadecimal = hexadecimal.replace('-','')\n    hexadecimal = hexadecimal.replace('.','')\n\
    \    hexadecimal = hexadecimal.replace(',','')\n    hexadecimal = hexadecimal.replace('+','')\n\
    \    hexadecimal = hex", "    \n    hex_key = 'A'\n    \n    count = 0\n    \n\
    \    hex_key = str(hex_key)\n    \n    hex_key = list(hex_key)\n    \n    hex_key.remove('0')\n\
    \    \n    hex_key.remove('1')\n    \n    hex_key.remove('2')\n    \n    hex_key.remove('3')\n\
    \    \n    hex_key.remove('4')\n    \n    hex_key.remove('5')\n    \n    hex_key.remove('6')\n\
    \    \n    hex_key.remove('7')\n    \n    hex_key.remove('8')\n    \n    hex_key.remove('9')\n\
    \    \n    hex_key.remove('A')\n    \n    hex_key.remove('B')\n    \n    hex_key.remove('C')\n\
    \    \n    hex_key.remove('D')\n    \n    hex_key.remove('E')\n    \n    hex_key.remove('F')\n\
    \    \n    hex_key = list(hex_key)\n    \n    hex_key.remove('0')\n    \n    hex_key.remove('1')\n\
    \    \n    hex_key.remove('2')\n    \n    hex_key.remove('3')\n    \n    hex_key.remove('4')\n\
    \    \n    hex_key.remove('5')\n    \n    hex_key.remove('6')\n    \n    hex_key.remove('7')\n\
    \    \n    hex_key.remove('8')\n    \n    hex_key.remove('9')\n    \n    hex_key.remove('A')\n\
    \    \n    hex_key.remove('B')\n    \n    hex_key.remove('C')\n    \n    hex_key.remove('D')\n\
    \    \n    hex_key.remove('E')\n    \n    hex_key.remove('F')\n    \n    hex_key\
    \ = list(hex_key)\n    \n    hex_key.remove('0')\n    \n    hex_key.remove('1')\n\
    \    \n    hex_key.remove('2')\n    \n    hex_key.remove('3')\n    \n    hex_key.remove('4')\n\
    \    \n    hex_key.remove('5')\n    \n    hex_key.remove('6')\n    \n    hex_key.remove('7')\n\
    \    \n    hex_key.remove('8')\n    \n    hex_key.remove('9')\n    \n    hex_key.remove('A')\n\
    \    \n    hex_key.remove('B')\n    \n    hex_key.remove('C')\n    \n    hex_key.remove('D')\n\
    \    \n    hex_key.remove('E')\n    \n    hex_key.remove('F')\n    \n    ", " \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    hex_key = int(num, 16)\n  \
    \  \n    prime_digits = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    \n    prime_digits_set = set(prime_digits)\n\
    \    \n    prime_digits_set = prime_digits_set.union(set(range(10, 16)))\n   \
    \ \n    prime_digits_set = prime_digits_set.union(set(range(16, 256)))\n    \n\
    \    prime_digits_set = prime_digits_set.union(set(range(256, 65536)))\n    \n\
    \    prime_digits_set = prime_digits_set.union(set(range(65536, 2**32)))\n   \
    \ \n    prime_digits_set = prime_digits_set.union(set(range(2**32, 2**64)))\n\
    \    \n    prime_digits_set = prime_digits_set.union(set(range(2**64, 2**128)))\n\
    \    \n    prime_digits_set = prime_digits_set.union(set(range(2**128, 2**256)))\n\
    \    \n    prime_digits_set = prime_digits_set.union(set(range(2**256, 2**512)))\n\
    \    \n    prime_digits_set = prime_digits_set.union(set(range(2**512, 2**1024)))\n\
    \    \n    prime_digits_set = prime_digits_set.union(set(range(2**1024, 2**2048)))\n\
    \    \n    prime_digits_set = prime_digits_set.union(set(range(2**2048, 2**4096)))\n\
    \    \n    prime_digits_set = prime_digits_set.union(set(range(2**4096, 2**8192)))\n\
    \    \n    prime_digits_set = prime_digits_set.union(set(range(2**8192, 2**16384)))\n\
    \    \n    prime_digits_set = prime_digits_set.union(set(range(2**16384, 2**32768)))\n\
    \    \n    prime_digits_set = prime_digits_set.union(set(range(2**32768, 2**65536)))\n\
    \    \n    prime_digits_set = prime_digits_set.union(set(range(2**65536, 2**131072)))\n\
    \    \n    prime_digits_set = prime_digits_set.union(set(range(2**131072, 2**262144)))\n\
    \    \n    prime_digits_set = prime_digits_set.union(set(range(2**262144, 2**524288)))\n\
    \    \n    prime_digits_set = prime_digits_set.union(set(range(2**524288, 2**1048576)))\n\
    \    \n    prime_digits_set = prime", "    hex_key = \"A\"\n    hex_digits = \"\
    0123456789ABCDEF\"\n    hex_digits_len = len(hex_digits)\n    hex_digits_len =\
    \ len(hex_key)\n    hex_digits_len = len(hex_digits)\n    hex_digits_len = len(hex_key)\n\
    \    hex_digits_len = len(hex_key)\n    hex_digits_len = len(hex_key)\n    hex_digits_len\
    \ = len(hex_key)\n    hex_digits_len = len(hex_key)\n    hex_digits_len = len(hex_key)\n\
    \    hex_digits_len = len(hex_key)\n    hex_digits_len = len(hex_key)\n    hex_digits_len\
    \ = len(hex_key)\n    hex_digits_len = len(hex_key)\n    hex_digits_len = len(hex_key)\n\
    \    hex_digits_len = len(hex_key)\n    hex_digits_len = len(hex_key)\n    hex_digits_len\
    \ = len(hex_key)\n    hex_digits_len = len(hex_key)\n    hex_digits_len = len(hex_key)\n\
    \    hex_digits_len = len(hex_key)\n    hex_digits_len = len(hex_key)\n    hex_digits_len\
    \ = len(hex_key)\n    hex_digits_len = len(hex_key)\n    hex_digits_len = len(hex_key)\n\
    \    hex_digits_len = len(hex_key)\n    hex_digits_len = len(hex_key)\n    hex_digits_len\
    \ = len(hex_key)\n    hex_digits_len = len(hex_key)\n    hex_digits_len = len(hex_key)\n\
    \    hex_digits_len = len(hex_key)\n    hex_digits_len = len(hex_key)\n    hex_digits_len\
    \ = len(hex_key)\n    hex_digits_len = len(hex_key)\n    hex_digits_len = len(hex_key)\n\
    \    hex_digits_len = len(hex_key)\n    hex_digits_len = len(hex_key)\n    hex_digits_len\
    \ = len(hex_key)\n    hex_digits_len = len(hex_key)\n    hex_digits_len = len(hex_key)\n\
    \    hex_digits_len = len(hex_key)\n    hex_digits_len = len(hex_key)\n    hex_digits_len\
    \ = len(hex_key)\n    hex_digits_len = len(hex_key)\n    hex_digits_len = len(hex_key)\n\
    \    hex_digits_len = len(hex_key)\n    hex_digits_len = len(hex_key)\n    hex_digits_len\
    \ = len(hex_key)\n    hex_digits_len = len(hex_key)\n    hex_digits_len = len(hex_key)\n\
    \    hex_digits_len = len(hex_key)\n    hex_digits_len = len(hex_key)\n    hex_digits_len\
    \ = len(hex_key)\n    hex_digits_len = len(hex_key)\n    hex_digits_len = len(hex_key)\n\
    \    hex_digits_len = len(hex_key)\n    hex_digits_len = len(hex_key)\n    hex_digits_len\
    \ = len(hex_key)\n    hex_digits_len = len(hex_key)\n    hex_digits_len = len(hex_key)\n\
    \    hex_digits_len = len(hex_key)\n    hex_digits_len = len(hex_key)\n    hex_digits_len\
    \ = len(hex", "    \n    hexadecimal = num.upper()\n    hexadecimal = hexadecimal.replace('A','0')\n\
    \    hexadecimal = hexadecimal.replace('B','1')\n    hexadecimal = hexadecimal.replace('C','2')\n\
    \    hexadecimal = hexadecimal.replace('D','3')\n    hexadecimal = hexadecimal.replace('E','4')\n\
    \    hexadecimal = hexadecimal.replace('F','5')\n    hexadecimal = hexadecimal.replace('0','0')\n\
    \    hexadecimal = hexadecimal.replace('1','1')\n    hexadecimal = hexadecimal.replace('2','2')\n\
    \    hexadecimal = hexadecimal.replace('3','3')\n    hexadecimal = hexadecimal.replace('4','4')\n\
    \    hexadecimal = hexadecimal.replace('5','5')\n    hexadecimal = hexadecimal.replace('6','6')\n\
    \    hexadecimal = hexadecimal.replace('7','7')\n    hexadecimal = hexadecimal.replace('8','8')\n\
    \    hexadecimal = hexadecimal.replace('9','9')\n    hexadecimal = hexadecimal.replace('\
    \ ','')\n    hexadecimal = hexadecimal.replace('-','')\n    hexadecimal = hexadecimal.replace('.','')\n\
    \    hexadecimal = hexadecimal.replace(',','')\n    hexadecimal = hexadecimal.replace('+','')\n\
    \    hexadecimal = hexadecimal.replace('*','')\n    hexadecimal = hexadecimal.replace('(','')\n\
    \    hexadecimal = hexadecimal.replace(')','')\n    hexadecimal = hexadecimal.replace('[','')\n\
    \    hexadecimal = hexadecimal.replace(']','')\n    hexadecimal = hexadecimal.replace('{','')\n\
    \    hexadecimal = hexadecimal.replace('}','')\n    hexadecimal = hexadecimal.replace('<','')\n\
    \    hexadecimal = hexadecimal.replace('>','')\n    hexadecimal = hexadecimal.replace('!','')\n\
    \    hexadecimal = hexadecimal.replace('?','')\n    hexadecimal = hexadecimal.replace(':','')\n\
    \    hexadecimal = hexadecimal.replace(';','')\n    hexadecimal = hexadecimal.replace(':','')\n\
    \    hexadecimal = hexadecimal.replace(';','')\n    hexadecimal = hexadecimal.replace(':','')\n\
    \    hexadecimal = hexadecimal.replace(';','')\n    hex", "    hex_key = 'A'\n\
    \    hex_key_len = len(hex_key)\n    hex_key_prime_digits = 0\n    hex_key_prime_digits\
    \ += hex_key.count('A')\n    hex_key_prime_digits += hex_key.count('B')\n    hex_key_prime_digits\
    \ += hex_key.count('C')\n    hex_key_prime_digits += hex_key.count('D')\n    hex_key_prime_digits\
    \ += hex_key.count('E')\n    hex_key_prime_digits += hex_key.count('F')\n    hex_key_prime_digits\
    \ += hex_key.count('0')\n    hex_key_prime_digits += hex_key.count('1')\n    hex_key_prime_digits\
    \ += hex_key.count('2')\n    hex_key_prime_digits += hex_key.count('3')\n    hex_key_prime_digits\
    \ += hex_key.count('4')\n    hex_key_prime_digits += hex_key.count('5')\n    hex_key_prime_digits\
    \ += hex_key.count('6')\n    hex_key_prime_digits += hex_key.count('7')\n    hex_key_prime_digits\
    \ += hex_key.count('8')\n    hex_key_prime_digits += hex_key.count('9')\n    hex_key_prime_digits\
    \ += hex_key.count('a')\n    hex_key_prime_digits += hex_key.count('b')\n    hex_key_prime_digits\
    \ += hex_key.count('c')\n    hex_key_prime_digits += hex_key.count('d')\n    hex_key_prime_digits\
    \ += hex_key.count('e')\n    hex_key_prime_digits += hex_key.count('f')\n    hex_key_prime_digits\
    \ += hex_key.count('0')\n    hex_key_prime_digits += hex_key.count('1')\n    hex_key_prime_digits\
    \ += hex_key.count('2')\n    hex_key_prime_digits += hex_key.count('3')\n    hex_key_prime_digits\
    \ += hex_key.count('4')\n    hex_key_prime_digits += hex_key.count('5')\n    hex_key_prime_digits\
    \ += hex_key.count('6')\n    hex_key_prime_digits += hex_key.count('7')\n    hex_key_prime_digits\
    \ += hex_key.count('8')\n    hex_key_prime_digits += hex_key.count('9')\n    hex_key_prime_digits\
    \ += hex_key.count('0')\n    hex_key_prime_digits += hex_key.count('1')", "  \
    \  hex_key = \"A\"\n    hex_digits = \"0123456789ABCDEF\"\n    hex_digits_len\
    \ = len(hex_digits)\n    hex_digit_count = len(hex_key)\n    hex_digit_count_prime\
    \ = 0\n    hex_digit_count_not_prime = 0\n    hex_digit_count_prime_not_prime\
    \ = 0\n    hex_digit_count_not_prime_prime = 0\n    hex_digit_count_prime_prime\
    \ = 0\n    hex_digit_count_not_prime_not_prime = 0\n    hex_digit_count_prime_not_prime_prime\
    \ = 0\n    hex_digit_count_not_prime_prime_not_prime = 0\n    hex_digit_count_prime_prime_not_prime\
    \ = 0\n    hex_digit_count_not_prime_prime_not_prime = 0\n    hex_digit_count_prime_prime_not_prime_not_prime\
    \ = 0\n    hex_digit_count_not_prime_prime_not_prime_not_prime = 0\n    hex_digit_count_prime_prime_not_prime_not_prime_not_prime\
    \ = 0\n    hex_digit_count_not_prime_prime_not_prime_not_prime_not_prime = 0\n\
    \    hex_digit_count_prime_prime_not_prime_not_prime_not_prime_not_prime = 0\n\
    \    hex_digit_count_not_prime_prime_not_prime_not_prime_not_prime_not_prime =\
    \ 0\n    hex_digit_count_prime_prime_not_prime_not_prime_not_prime_not_prime_not_prime\
    \ = 0\n    hex_digit_count_not_prime_prime_not_prime_not_prime_not_prime_not_prime_not_prime\
    \ = 0\n    hex_digit_count_prime_prime_not_prime_not_prime_not_prime_not_prime_not_prime_not_prime\
    \ = 0\n    hex_digit_count_not_prime_prime_not_prime_not_prime_not_prime_not_prime_not_prime_not_prime\
    \ = 0\n    hex_digit_count_prime_prime_not_prime_not_prime_not_prime_not_prime_not_prime_not_prime_not_prime\
    \ = 0\n    hex_digit_count_not_prime_prime_not_prime_not_prime_not_prime_not_prime_not_prime_not_prime_not_prime\
    \ = 0\n    hex_digit_count_prime_prime_not_prime_not_prime_not_prime_not_prime_not_prime_not_prime_not_prime_not_prime\
    \ = 0\n    hex_digit_count_not_prime_prime_not_prime_not_prime_not_prime_not_prime_not_prime_not_prime_not_prime_not_prime\
    \ = 0\n    hex_digit_count_prime_prime_not_prime_not_prime_not_prime_not_prime_not_prime_not_prime_not_prime_not_prime",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    hex_digits\
    \ = [int(i) for i in hex_key.split(\"\")]\n    prime_digits = [2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89,\
    \ 97]\n    \n    count = 0\n    \n    for digit in hex_digits:\n        if digit\
    \ in prime_digits:\n            count += 1\n            \n    return count\n</cell>\n\
    <cell>\nhex_key(\"A\")\n</cell>\n<cell>\nhex_key(\"B\")\n</cell>\n<cell>\nhex_key(\"\
    C\")\n</cell>\n<cell>\nhex_key(\"D\")\n</cell>\n<cell>\nhex_key(\"E\")\n</cell>\n\
    <cell>\nhex_key(\"F\")\n</cell>\n<cell>\nhex_key(\"A\")\n</cell>\n<cell>\nhex_key(\"\
    B\")\n</cell>\n<cell>\nhex_key(\"C\")\n</cell>\n<cell>\nhex_key(\"D\")\n</cell>\n\
    <cell>\nhex_key(\"E\")\n</cell>\n<cell>\nhex_key(\"F\")\n</cell>\n<cell>\nhex_key(\"\
    A\")\n</cell>\n<cell>\nhex_key(\"B\")\n</cell>\n<cell>\nhex_key(\"C\")\n</cell>\n\
    <cell>\nhex_key(\"D\")\n</cell>\n<cell>\nhex_key(\"E\")\n</cell>\n<cell>\nhex_key(\"\
    F\")\n</cell>\n<cell>\nhex_key(\"A\")\n</cell>\n<cell>\nhex_key(\"B\")\n</cell>\n\
    <cell>\nhex_key(\"C\")\n</cell>\n<cell>\nhex_key(\"D\")\n</cell>\n<cell>\nhex_key(\"\
    E\")\n</cell>\n<cell>\nhex_key(\"F\")\n</cell>\n<cell>\nhex_key(\"A\")\n</cell>\n\
    <cell>\nhex_key(\"B\")\n</cell>\n<cell>\nhex_key(\"C\")\n</cell>\n<cell>\nhex_key(\"\
    D\")\n</cell>\n<cell>\nhex_key(\"E\")\n</cell>\n<cell>\nhex_key(\"F\")\n</cell>\n\
    <cell>\n", "    \n    hex_key = int(input(\"Enter a hexadecimal number: \"))\n\
    \    \n    hex_key = str(hex_key)\n    \n    hex_key = list(hex_key)\n    \n \
    \   hex_key.sort()\n    \n    hex_key = list(hex_key)\n    \n    hex_key.sort()\n\
    \    \n    hex_key = list(hex_key)\n    \n    hex_key.sort()\n    \n    hex_key\
    \ = list(hex_key)\n    \n    hex_key.sort()\n    \n    hex_key = list(hex_key)\n\
    \    \n    hex_key.sort()\n    \n    hex_key = list(hex_key)\n    \n    hex_key.sort()\n\
    \    \n    hex_key = list(hex_key)\n    \n    hex_key.sort()\n    \n    hex_key\
    \ = list(hex_key)\n    \n    hex_key.sort()\n    \n    hex_key = list(hex_key)\n\
    \    \n    hex_key.sort()\n    \n    hex_key = list(hex_key)\n    \n    hex_key.sort()\n\
    \    \n    hex_key = list(hex_key)\n    \n    hex_key.sort()\n    \n    hex_key\
    \ = list(hex_key)\n    \n    hex_key.sort()\n    \n    hex_key = list(hex_key)\n\
    \    \n    hex_key.sort()\n    \n    hex_key = list(hex_key)\n    \n    hex_key.sort()\n\
    \    \n    hex_key = list(hex_key)\n    \n    hex_key.sort()\n    \n    hex_key\
    \ = list(hex_key)\n    \n    hex_key.sort()\n    \n    hex_key = list(hex_key)\n\
    \    \n    hex_key.sort()\n    \n    hex_key = list(hex_key)\n    \n    hex_key.sort()\n\
    \    \n    hex_key = list(hex_key)\n    \n    hex_key.sort()\n    \n    hex_key\
    \ = list(hex_key)\n    \n    hex_key.sort()\n    \n    hex_key = list(hex_key)\n\
    \    \n    hex_key.sort()\n    \n    hex_key = list(hex_key)\n    \n    hex_key.sort()\n\
    \    \n    hex_key = list(hex_key)\n    \n    hex_key.sort()\n    \n    hex_key\
    \ = list(hex_key)\n    \n    hex_key.sort()\n    \n    hex_key = list(hex_key)\n\
    \    \n    hex_key.sort()\n    \n    hex_key = list(hex_key)\n    \n    hex_key.sort()\n\
    \    \n    hex_key = list(hex_key)\n    \n    hex_key.sort()\n    \n    hex_key\
    \ = list(hex_key)\n    \n    hex_key.sort()\n    \n    hex_key = list(hex_key)\n\
    \    \n", "    \n    hex_key = int(num, 16)\n    \n    prime_digits = [2, 3, 5,\
    \ 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97]\n    \n    prime_digits_set = set(prime_digits)\n    \n    prime_digits_set.remove(hex_key)\n\
    \    \n    prime_digits_set = list(prime_digits_set)\n    \n    prime_digits_set.sort()\n\
    \    \n    prime_digits_set.reverse()\n    \n    prime_digits_set = prime_digits_set[:3]\n\
    \    \n    prime_digits_set = prime_digits_set + [hex_key]\n    \n    prime_digits_set\
    \ = set(prime_digits_set)\n    \n    prime_digits_set = prime_digits_set - {hex_key}\n\
    \    \n    prime_digits_set = prime_digits_set - {hex_key}\n    \n    prime_digits_set\
    \ = prime_digits_set - {hex_key}\n    \n    prime_digits_set = prime_digits_set\
    \ - {hex_key}\n    \n    prime_digits_set = prime_digits_set - {hex_key}\n   \
    \ \n    prime_digits_set = prime_digits_set - {hex_key}\n    \n    prime_digits_set\
    \ = prime_digits_set - {hex_key}\n    \n    prime_digits_set = prime_digits_set\
    \ - {hex_key}\n    \n    prime_digits_set = prime_digits_set - {hex_key}\n   \
    \ \n    prime_digits_set = prime_digits_set - {hex_key}\n    \n    prime_digits_set\
    \ = prime_digits_set - {hex_key}\n    \n    prime_digits_set = prime_digits_set\
    \ - {hex_key}\n    \n    prime_digits_set = prime_digits_set - {hex_key}\n   \
    \ \n    prime_digits_set = prime_digits_set - {hex_key}\n    \n    prime_digits_set\
    \ = prime_digits_set - {hex_key}\n    \n    prime_digits_set = prime_digits_set\
    \ - {hex_key}\n    \n    prime_digits_set = prime_digits_set - {hex_key}\n   \
    \ \n    prime_digits_set = prime_digits_set - {hex_key}\n    \n    prime_digits_set\
    \ = prime", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   \n    hexadecimal = num.upper()\n    hexadecimal = hexadecimal.replace('A','0')\n\
    \    hexadecimal = hexadecimal.replace('B','1')\n    hexadecimal = hexadecimal.replace('C','2')\n\
    \    hexadecimal = hexadecimal.replace('D','3')\n    hexadecimal = hexadecimal.replace('E','4')\n\
    \    hexadecimal = hexadecimal.replace('F','5')\n    hexadecimal = hexadecimal.replace('0','0')\n\
    \    hexadecimal = hexadecimal.replace('1','1')\n    hexadecimal = hexadecimal.replace('2','2')\n\
    \    hexadecimal = hexadecimal.replace('3','3')\n    hexadecimal = hexadecimal.replace('4','4')\n\
    \    hexadecimal = hexadecimal.replace('5','5')\n    hexadecimal = hexadecimal.replace('6','6')\n\
    \    hexadecimal = hexadecimal.replace('7','7')\n    hexadecimal = hexadecimal.replace('8','8')\n\
    \    hexadecimal = hexadecimal.replace('9','9')\n    hexadecimal = hexadecimal.replace('\
    \ ','')\n    hexadecimal = hexadecimal.replace('-','')\n    hexadecimal = hexadecimal.replace('.','')\n\
    \    hexadecimal = hexadecimal.replace(',','')\n    hexadecimal = hexadecimal.replace('\
    \ ','')\n    hexadecimal = hexadecimal.replace('-','')\n    hexadecimal = hexadecimal.replace('.','')\n\
    \    hexadecimal = hexadecimal.replace(',','')\n    hexadecimal = hexadecimal.replace('\
    \ ','')\n    hexadecimal = hexadecimal.replace('-','')\n    hexadecimal = hexadecimal.replace('.','')\n\
    \    hexadecimal = hexadecimal.replace(',','')\n    hexadecimal = hexadecimal.replace('\
    \ ','')\n    hexadecimal = hexadecimal.replace('-','')\n    hexadecimal = hexadecimal.replace('.','')\n\
    \    hexadecimal = hexadecimal.replace(',','')\n    hexadecimal = hexadecimal.replace('\
    \ ','')\n    hexadecimal = hexadecimal.replace('-','')\n    hexadecimal = hexadecimal.replace('.','')\n\
    \    hexadecimal = hexadecimal.replace(',','')\n    hexadecimal = hexadecimal.replace('\
    \ ','')\n    hexadecimal = hexadecimal.replace('-','')\n    hex", "    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    hex_key = \"A\"\n    hex_digits = \"0123456789ABCDEF\"\n    hex_digits_count\
    \ = len(hex_digits)\n    hex_count = 0\n    hex_key = list(hex_key)\n    hex_key\
    \ = [hex_key.upper()]\n    hex_key = [hex_key.upper()]\n    hex_key = [hex_key.upper()]\n\
    \    hex_key = [hex_key.upper()]\n    hex_key = [hex_key.upper()]\n    hex_key\
    \ = [hex_key.upper()]\n    hex_key = [hex_key.upper()]\n    hex_key = [hex_key.upper()]\n\
    \    hex_key = [hex_key.upper()]\n    hex_key = [hex_key.upper()]\n    hex_key\
    \ = [hex_key.upper()]\n    hex_key = [hex_key.upper()]\n    hex_key = [hex_key.upper()]\n\
    \    hex_key = [hex_key.upper()]\n    hex_key = [hex_key.upper()]\n    hex_key\
    \ = [hex_key.upper()]\n    hex_key = [hex_key.upper()]\n    hex_key = [hex_key.upper()]\n\
    \    hex_key = [hex_key.upper()]\n    hex_key = [hex_key.upper()]\n    hex_key\
    \ = [hex_key.upper()]\n    hex_key = [hex_key.upper()]\n    hex_key = [hex_key.upper()]\n\
    \    hex_key = [hex_key.upper()]\n    hex_key = [hex_key.upper()]\n    hex_key\
    \ = [hex_key.upper()]\n    hex_key = [hex_key.upper()]\n    hex_key = [hex_key.upper()]\n\
    \    hex_key = [hex_key.upper()]\n    hex_key = [hex_key.upper()]\n    hex_key\
    \ = [hex_key.upper()]\n    hex_key = [hex_key.upper()]\n    hex_key = [hex_key.upper()]\n\
    \    hex_key = [hex_key.upper()]\n    hex_key = [hex_key.upper()]\n    hex_key\
    \ = [hex_key.upper()]\n    hex_key = [hex_key.upper()]\n    hex_key = [hex_key.upper()]\n\
    \    hex_key = [hex_key.upper()]\n    hex_key = [hex_key.upper()]\n    hex_key\
    \ = [hex_key.upper()]\n    hex_key = [hex_key.upper()]\n    hex_key = [hex_key.upper()]\n\
    \    hex_key = [hex_key.upper()]\n    hex_key = [hex_key.upper()]\n    hex_key\
    \ = [hex_key.upper()]\n    hex_key = [hex_key.upper()]\n    hex_key = [hex", " \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    hex_key = \"A\"\
    \n    hex_key_len = len(hex_key)\n    prime_key_len = 3\n    prime_key_num = 0\n\
    \    prime_key_num2 = 2\n    prime_key_num3 = 3\n    prime_key_num4 = 5\n    prime_key_num5\
    \ = 7\n    prime_key_num6 = 11\n    prime_key_num7 = 13\n    prime_key_num8 =\
    \ 17\n    prime_key_num9 = 31\n    prime_key_num10 = 37\n    prime_key_num11 =\
    \ 43\n    prime_key_num12 = 47\n    prime_key_num13 = 53\n    prime_key_num14\
    \ = 59\n    prime_key_num15 = 67\n    prime_key_num16 = 73\n    prime_key_num17\
    \ = 79\n    prime_key_num18 = 83\n    prime_key_num19 = 89\n    prime_key_num20\
    \ = 97\n    prime_key_num21 = 101\n    prime_key_num22 = 107\n    prime_key_num23\
    \ = 113\n    prime_key_num24 = 119\n    prime_key_num25 = 127\n    prime_key_num26\
    \ = 131\n    prime_key_num27 = 137\n    prime_key_num28 = 143\n    prime_key_num29\
    \ = 149\n    prime_key_num30 = 151\n    prime_key_num31 = 157\n    prime_key_num32\
    \ = 163\n    prime_key_num33 = 167\n    prime_key_num34 = 173\n    prime_key_num35\
    \ = 179\n    prime_key_num36 = 181\n    prime_key_num37 = 191\n    prime_key_num38\
    \ = 193\n    prime_key_num39 = 197\n    prime_key_num40 = 199\n    prime_key_num41\
    \ = 203\n    prime_key_num42 = 207\n    prime_key_num43 = 211\n    prime_key_num44\
    \ = 217\n    prime_key_num45 = 223\n    prime_key_num46 = 229\n    prime_key_num47\
    \ = 233\n    prime_key_num48 = 237\n    prime_key_num49 = 239\n    prime_key_num50\
    \ = 241\n    prime_key_num51 = 247\n    prime_key_num52 = 251\n    prime_key_num53\
    \ = 257\n    prime_key_num54 = 263\n    prime_key_", "    \n    hex_key = 'A'\n\
    \    \n    hex_key = 'B'\n    \n    hex_key = 'C'\n    \n    hex_key = 'D'\n \
    \   \n    hex_key = 'E'\n    \n    hex_key = 'F'\n    \n    hex_key = 'A'\n  \
    \  \n    hex_key = 'B'\n    \n    hex_key = 'C'\n    \n    hex_key = 'D'\n   \
    \ \n    hex_key = 'E'\n    \n    hex_key = 'F'\n    \n    hex_key = 'A'\n    \n\
    \    hex_key = 'B'\n    \n    hex_key = 'C'\n    \n    hex_key = 'D'\n    \n \
    \   hex_key = 'E'\n    \n    hex_key = 'F'\n    \n    hex_key = 'A'\n    \n  \
    \  hex_key = 'B'\n    \n    hex_key = 'C'\n    \n    hex_key = 'D'\n    \n   \
    \ hex_key = 'E'\n    \n    hex_key = 'F'\n    \n    hex_key = 'A'\n    \n    hex_key\
    \ = 'B'\n    \n    hex_key = 'C'\n    \n    hex_key = 'D'\n    \n    hex_key =\
    \ 'E'\n    \n    hex_key = 'F'\n    \n    hex_key = 'A'\n    \n    hex_key = 'B'\n\
    \    \n    hex_key = 'C'\n    \n    hex_key = 'D'\n    \n    hex_key = 'E'\n \
    \   \n    hex_key = 'F'\n    \n    hex_key = 'A'\n    \n    hex_key = 'B'\n  \
    \  \n    hex_key = 'C'\n    \n    hex_key = 'D'\n    \n    hex_key = 'E'\n   \
    \ \n    hex_key = 'F'\n    \n    hex_key = 'A'\n    \n    hex_key = 'B'\n    \n\
    \    hex_key = 'C'\n    \n    hex_key = 'D'\n    \n    hex_key = 'E'\n    \n \
    \   hex_key = 'F'\n    \n    hex_key = 'A'\n    \n    hex_key = 'B'\n    \n  \
    \  hex_key = 'C'\n    \n    hex_key = 'D'\n    \n    hex_key = 'E'\n    \n   \
    \ hex_key = 'F'\n    \n    hex_key = 'A'\n    \n    hex_key = 'B'\n    \n    hex_key\
    \ = 'C'", "    hex_key = 'A'\n    hex_key = 'B'\n    hex_key = 'C'\n    hex_key\
    \ = 'D'\n    hex_key = 'E'\n    hex_key = 'F'\n    hex_key = 'A'\n    hex_key\
    \ = 'B'\n    hex_key = 'C'\n    hex_key = 'D'\n    hex_key = 'E'\n    hex_key\
    \ = 'F'\n    hex_key = 'A'\n    hex_key = 'B'\n    hex_key = 'C'\n    hex_key\
    \ = 'D'\n    hex_key = 'E'\n    hex_key = 'F'\n    hex_key = 'A'\n    hex_key\
    \ = 'B'\n    hex_key = 'C'\n    hex_key = 'D'\n    hex_key = 'E'\n    hex_key\
    \ = 'F'\n    hex_key = 'A'\n    hex_key = 'B'\n    hex_key = 'C'\n    hex_key\
    \ = 'D'\n    hex_key = 'E'\n    hex_key = 'F'\n    hex_key = 'A'\n    hex_key\
    \ = 'B'\n    hex_key = 'C'\n    hex_key = 'D'\n    hex_key = 'E'\n    hex_key\
    \ = 'F'\n    hex_key = 'A'\n    hex_key = 'B'\n    hex_key = 'C'\n    hex_key\
    \ = 'D'\n    hex_key = 'E'\n    hex_key = 'F'\n    hex_key = 'A'\n    hex_key\
    \ = 'B'\n    hex_key = 'C'\n    hex_key = 'D'\n    hex_key = 'E'\n    hex_key\
    \ = 'F'\n    hex_key = 'A'\n    hex_key = 'B'\n    hex_key = 'C'\n    hex_key\
    \ = 'D'\n    hex_key = 'E'\n    hex_key = 'F'\n    hex_key = 'A'\n    hex_key\
    \ = 'B'\n    hex_key = 'C'\n    hex_key = 'D'\n    hex_key = 'E'\n    hex_key\
    \ = 'F'\n    hex_key = 'A'\n    hex_key = 'B'\n    hex_key = 'C'\n    hex_key\
    \ = 'D'\n    hex_key = 'E'\n    hex_key = 'F'\n    hex_key = 'A'\n    hex_key\
    \ = 'B'\n    hex_key = 'C'\n    hex_key = 'D'\n    hex_key = 'E'\n    hex_key\
    \ = 'F'\n    hex_key = 'A'\n    ", "    \n    hex_key = int(num, 16)\n    \n \
    \   prime_digits = [2, 3]\n    \n    prime_digits_count = 0\n    \n    prime_digits_count\
    \ += hex_key//10\n    \n    hex_key = hex_key%10\n    \n    prime_digits_count\
    \ += hex_key//10\n    \n    hex_key = hex_key%10\n    \n    prime_digits_count\
    \ += hex_key//10\n    \n    hex_key = hex_key%10\n    \n    prime_digits_count\
    \ += hex_key//10\n    \n    hex_key = hex_key%10\n    \n    prime_digits_count\
    \ += hex_key//10\n    \n    hex_key = hex_key%10\n    \n    prime_digits_count\
    \ += hex_key//10\n    \n    hex_key = hex_key%10\n    \n    prime_digits_count\
    \ += hex_key//10\n    \n    hex_key = hex_key%10\n    \n    prime_digits_count\
    \ += hex_key//10\n    \n    hex_key = hex_key%10\n    \n    prime_digits_count\
    \ += hex_key//10\n    \n    hex_key = hex_key%10\n    \n    prime_digits_count\
    \ += hex_key//10\n    \n    hex_key = hex_key%10\n    \n    prime_digits_count\
    \ += hex_key//10\n    \n    hex_key = hex_key%10\n    \n    prime_digits_count\
    \ += hex_key//10\n    \n    hex_key = hex_key%10\n    \n    prime_digits_count\
    \ += hex_key//10\n    \n    hex_key = hex_key%10\n    \n    prime_digits_count\
    \ += hex_key//10\n    \n    hex_key = hex_key%10\n    \n    prime_digits_count\
    \ += hex_key//10\n    \n    hex_key = hex_key%10\n    \n    prime_digits_count\
    \ += hex_key//10\n    \n    hex_key = hex_key%10\n    \n    prime_digits_count\
    \ += hex_key//10\n    \n    hex_key = hex_key%10\n    \n    prime_digits_count\
    \ += hex_key//10\n    \n    hex_key = hex_key%10\n    \n    prime_digits_count\
    \ += hex_key//10\n    \n    hex_key = hex_key%10\n    \n    prime_digits_count\
    \ += hex_key//10\n    \n    hex_key = hex_key%10\n    \n    prime", "    \n  \
    \  hex_digits = list('0123456789ABCDEF')\n    \n    hex_digits_len = len(hex_digits)\n\
    \    \n    hex_digits_primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,\
    \ 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    \n    hex_digits_primes_len\
    \ = len(hex_digits_primes)\n    \n    hex_digits_primes_primes = [2, 3, 5, 7,\
    \ 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97]\n    \n    hex_digits_primes_primes_len = len(hex_digits_primes_primes)\n\
    \    \n    hex_digits_primes_primes_primes = [2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    \n    hex_digits_primes_primes_primes_len\
    \ = len(hex_digits_primes_primes_primes)\n    \n    hex_digits_primes_primes_primes_primes\
    \ = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97]\n    \n    hex_digits_primes_primes_primes_primes_len =\
    \ len(hex_digits_primes_primes_primes_primes)\n    \n    hex_digits_primes_primes_primes_primes_primes\
    \ = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97]\n    \n    hex_digits_primes_primes_primes_primes_primes_len\
    \ = len(hex_digits_primes_primes_primes_primes_primes)\n    \n    hex_digits_primes_primes_primes_primes_primes_primes\
    \ = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97]\n    \n    hex_digits_primes_primes_primes_primes_primes_primes_len\
    \ = len(hex_digits_primes_primes_primes_primes_primes_primes)\n    \n    hex_digits_primes_primes_primes_primes_primes_primes_primes\
    \ = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97]\n    \n    hex_digits_primes_prime", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    hex_key = \"A\"\n    count = 0\n\
    \    digit = hex_key[0]\n    hex_key = list(hex_key)\n    hex_key.remove(hex_key[0])\n\
    \    hex_key.remove(hex_key[0])\n    hex_key.remove(hex_key[0])\n    hex_key.remove(hex_key[0])\n\
    \    hex_key.remove(hex_key[0])\n    hex_key.remove(hex_key[0])\n    hex_key.remove(hex_key[0])\n\
    \    hex_key.remove(hex_key[0])\n    hex_key.remove(hex_key[0])\n    hex_key.remove(hex_key[0])\n\
    \    hex_key.remove(hex_key[0])\n    hex_key.remove(hex_key[0])\n    hex_key.remove(hex_key[0])\n\
    \    hex_key.remove(hex_key[0])\n    hex_key.remove(hex_key[0])\n    hex_key.remove(hex_key[0])\n\
    \    hex_key.remove(hex_key[0])\n    hex_key.remove(hex_key[0])\n    hex_key.remove(hex_key[0])\n\
    \    hex_key.remove(hex_key[0])\n    hex_key.remove(hex_key[0])\n    hex_key.remove(hex_key[0])\n\
    \    hex_key.remove(hex_key[0])\n    hex_key.remove(hex_key[0])\n    hex_key.remove(hex_key[0])\n\
    \    hex_key.remove(hex_key[0])\n    hex_key.remove(hex_key[0])\n    hex_key.remove(hex_key[0])\n\
    \    hex_key.remove(hex_key[0])\n    hex_key.remove(hex_key[0])\n    hex_key.remove(hex_key[0])\n\
    \    hex_key.remove(hex_key[0])\n    hex_key.remove(hex_key[0])\n    hex_key.remove(hex_key[0])\n\
    \    hex_key.remove(hex_key[0])\n    hex_key.remove(hex_key[0])\n    hex_key.remove(hex_key[0])\n\
    \    hex_key.remove(hex_key[0])\n    hex_key.remove(hex_key[0])\n    hex_key.remove(hex_key[0])\n\
    \    hex_key.remove(hex_key[0])\n    hex_key.remove(hex_key[0])\n    hex_key.remove(hex_key[0])\n\
    \    hex_key.remove(hex_key[0])\n    hex_key.remove(hex_key[0])\n    hex_key.remove(hex_key[0])\n\
    \    hex_key.remove(hex_key[0])\n    hex_key.remove(hex_key[0])\n    hex_key.remove(hex_key[0])\n\
    \    hex_key.remove(hex_key[0])\n    hex_key.remove(hex_key[0])\n    hex_key.remove(hex_key[0])\n\
    \    hex_key.remove(hex_key[0])\n    hex_key.remove(hex_key[0])\n    hex_key.remove(hex_key[0])\n\
    \    hex_key.remove(hex_key[0])\n    hex_key.remove(hex_key[0])\n    hex_key.remove(hex_key[0])\n\
    \    hex_key.remove(hex_key[0])\n    hex_key.remove(hex_key[0])\n    hex_key.remove(hex_key[0])\n",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    hex_key = \"A\"\
    \n    hex_key_len = len(hex_key)\n    hex_key_prime_digits = 0\n    hex_key_prime_digits_count\
    \ = 0\n    hex_key_prime_digits_count_2 = 0\n    hex_key_prime_digits_count_3\
    \ = 0\n    hex_key_prime_digits_count_5 = 0\n    hex_key_prime_digits_count_7\
    \ = 0\n    hex_key_prime_digits_count_11 = 0\n    hex_key_prime_digits_count_13\
    \ = 0\n    hex_key_prime_digits_count_17 = 0\n    hex_key_prime_digits_count_19\
    \ = 0\n    hex_key_prime_digits_count_23 = 0\n    hex_key_prime_digits_count_29\
    \ = 0\n    hex_key_prime_digits_count_31 = 0\n    hex_key_prime_digits_count_37\
    \ = 0\n    hex_key_prime_digits_count_43 = 0\n    hex_key_prime_digits_count_59\
    \ = 0\n    hex_key_prime_digits_count_67 = 0\n    hex_key_prime_digits_count_73\
    \ = 0\n    hex_key_prime_digits_count_79 = 0\n    hex_key_prime_digits_count_83\
    \ = 0\n    hex_key_prime_digits_count_89 = 0\n    hex_key_prime_digits_count_97\
    \ = 0\n    hex_key_prime_digits_count_103 = 0\n    hex_key_prime_digits_count_107\
    \ = 0\n    hex_key_prime_digits_count_113 = 0\n    hex_key_prime_digits_count_127\
    \ = 0\n    hex_key_prime_digits_count_131 = 0\n    hex_key_prime_digits_count_137\
    \ = 0\n    hex_key_prime_digits_count_139 = 0\n    hex_key_prime_digits_count_149\
    \ = 0\n    hex_key_prime_digits_count_153 = 0\n    hex_key_prime_digits_count_157\
    \ = 0\n    hex_key_prime_digits_count_163 = 0\n    hex_key_prime_digits_count_167\
    \ = 0\n    hex_key_prime_digits_count_173 = 0\n    hex_key_prime_digits_count_177\
    \ = 0\n    hex_key_prime_digits_count_183 = 0\n    hex_key_prime_digits_count_189\
    \ = 0\n    hex_key_prime_digits_count_193 = 0\n    hex_key_prime_digits_count_197\
    \ = 0\n    hex_key_prime_digits_count_203 = 0\n    hex_key_prime_digits_count_207\
    \ = 0\n    hex_key_prime_digits_count_211 = 0\n    hex_key_prime_digits_count_217\
    \ = 0\n    hex_key_prime_digits_count_223 = 0\n", "    \n    hex_key = 'A'\n \
    \   \n    hex_digits = [hex_key]\n    \n    prime_digits = []\n    \n    prime_digits.append(hex_key)\n\
    \    \n    prime_digits.append(hex_key)\n    \n    prime_digits.append(hex_key)\n\
    \    \n    prime_digits.append(hex_key)\n    \n    prime_digits.append(hex_key)\n\
    \    \n    prime_digits.append(hex_key)\n    \n    prime_digits.append(hex_key)\n\
    \    \n    prime_digits.append(hex_key)\n    \n    prime_digits.append(hex_key)\n\
    \    \n    prime_digits.append(hex_key)\n    \n    prime_digits.append(hex_key)\n\
    \    \n    prime_digits.append(hex_key)\n    \n    prime_digits.append(hex_key)\n\
    \    \n    prime_digits.append(hex_key)\n    \n    prime_digits.append(hex_key)\n\
    \    \n    prime_digits.append(hex_key)\n    \n    prime_digits.append(hex_key)\n\
    \    \n    prime_digits.append(hex_key)\n    \n    prime_digits.append(hex_key)\n\
    \    \n    prime_digits.append(hex_key)\n    \n    prime_digits.append(hex_key)\n\
    \    \n    prime_digits.append(hex_key)\n    \n    prime_digits.append(hex_key)\n\
    \    \n    prime_digits.append(hex_key)\n    \n    prime_digits.append(hex_key)\n\
    \    \n    prime_digits.append(hex_key)\n    \n    prime_digits.append(hex_key)\n\
    \    \n    prime_digits.append(hex_key)\n    \n    prime_digits.append(hex_key)\n\
    \    \n    prime_digits.append(hex_key)\n    \n    prime_digits.append(hex_key)\n\
    \    \n    prime_digits.append(hex_key)\n    \n    prime_digits.append(hex_key)\n\
    \    \n    prime_digits.append(hex_key)\n    \n    prime_digits.append(hex_key)\n\
    \    \n    prime_digits.append(hex_key)\n    \n    prime_digits.append(hex_key)\n\
    \    \n    prime_digits.append(hex_key)\n    \n    prime_digits.append(hex_key)\n\
    \    \n    prime_digits.append(hex_key)\n    \n    prime_digits.append(hex_key)\n\
    \    \n    prime_digits.append(hex_key)\n    \n    prime_digits.append(hex_key)\n\
    \    \n    prime_digits.append(hex_key)\n    \n    prime_digits.append(hex_key)\n\
    \    \n    prime_digits.append(hex_key)\n    \n    prime_digits.append(hex_key)\n\
    \    \n    prime_digits.append(hex_key)\n    \n    prime_", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    hex_key = \"A\"\n    hex_key_len = len(hex_key)\n \
    \   prime_key_len = 3\n    prime_key_digits = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n\
    \    prime_key_digits_len = len(prime_key_digits)\n    prime_key_digits_set =\
    \ set(prime_key_digits)\n    prime_key_digits_set = sorted(prime_key_digits_set)\n\
    \    prime_key_digits_set = prime_key_digits_set[:prime_key_len]\n    prime_key_digits_set\
    \ = prime_key_digits_set + [hex_key.upper()]\n    prime_key_digits_set = prime_key_digits_set[:prime_key_len]\n\
    \    prime_key_digits_set = prime_key_digits_set + [hex_key.upper()]\n    prime_key_digits_set\
    \ = prime_key_digits_set[:prime_key_len]\n    prime_key_digits_set = prime_key_digits_set\
    \ + [hex_key.upper()]\n    prime_key_digits_set = prime_key_digits_set[:prime_key_len]\n\
    \    prime_key_digits_set = prime_key_digits_set + [hex_key.upper()]\n    prime_key_digits_set\
    \ = prime_key_digits_set[:prime_key_len]\n    prime_key_digits_set = prime_key_digits_set\
    \ + [hex_key.upper()]\n    prime_key_digits_set = prime_key_digits_set[:prime_key_len]\n\
    \    prime_key_digits_set = prime_key_digits_set + [hex_key.upper()]\n    prime_key_digits_set\
    \ = prime_key_digits_set[:prime_key_len]\n    prime_key_digits_set = prime_key_digits_set\
    \ + [hex_key.upper()]\n    prime_key_digits_set = prime_key_digits_set[:prime_key_len]\n\
    \    prime_key_digits_set = prime_key_digits_set + [hex_key.upper()]\n    prime_key_digits_set\
    \ = prime_key_digits_set[:prime_key_len]\n    prime_key_digits_set = prime_key_digits_set\
    \ + [hex_key.upper()]\n    prime_key_digits_set = prime_key_digits_set[:prime_key_len]\n\
    \    prime_key_digits_set = prime_key_digits_set + [", "    \n    hexadecimal\
    \ = num.upper()\n    \n    primes = []\n    \n    for digit in hexadecimal:\n\
    \        \n        if digit == 'A' or digit == 'B' or digit == 'C' or digit ==\
    \ 'D' or digit == 'E' or digit == 'F':\n            \n            primes.append(digit)\n\
    \            \n        elif digit == '2':\n            \n            primes.append(digit)\n\
    \            \n        elif digit == '3':\n            \n            primes.append(digit)\n\
    \            \n        elif digit == '5':\n            \n            primes.append(digit)\n\
    \            \n        elif digit == '7':\n            \n            primes.append(digit)\n\
    \            \n        elif digit == '11':\n            \n            primes.append(digit)\n\
    \            \n        elif digit == '13':\n            \n            primes.append(digit)\n\
    \            \n        elif digit == '17':\n            \n            primes.append(digit)\n\
    \            \n        elif digit == '19':\n            \n            primes.append(digit)\n\
    \            \n        elif digit == '23':\n            \n            primes.append(digit)\n\
    \            \n        elif digit == '29':\n            \n            primes.append(digit)\n\
    \            \n        elif digit == '31':\n            \n            primes.append(digit)\n\
    \            \n        elif digit == '37':\n            \n            primes.append(digit)\n\
    \            \n        elif digit == '41':\n            \n            primes.append(digit)\n\
    \            \n        elif digit == '43':\n            \n            primes.append(digit)\n\
    \            \n        elif digit == '47':\n            \n            primes.append(digit)\n\
    \            \n        elif digit == '53':\n            \n            primes.append(digit)\n\
    \            \n        elif digit == '59':\n            \n            primes.append(digit)\n\
    \            \n        elif digit == '61':\n            \n            primes.append(digit)\n\
    \            \n        elif digit == '67':\n            \n            primes.append(digit)\n\
    \            \n        elif digit == '71':\n            \n            primes.append(digit)\n\
    \            \n        elif digit == '73':\n            \n            primes.append(digit)\n\
    \            \n        elif digit == '79':\n            \n            primes.append(digit)\n\
    \            \n        elif digit == '83':\n            \n            primes.append(digit)\n\
    \            \n        elif digit == '89':\n            \n            primes.append(digit)\n\
    \            \n        elif digit == '91':\n            \n            primes.append(digit)\n\
    \            \n        elif digit == '97':\n            \n            primes.append(digit)\n\
    \            \n        elif digit == 'B':\n            \n            primes.append(digit)\n\
    \            \n        elif digit == 'D':\n            \n            primes.append(digit)\n\
    \            ", "    hex_key = \"A\"\n    count = 0\n    for digit in hex_key:\n\
    \        if digit == \"A\":\n            count += 1\n        elif digit == \"\
    B\":\n            count += 1\n        elif digit == \"C\":\n            count\
    \ += 1\n        elif digit == \"D\":\n            count += 1\n        elif digit\
    \ == \"E\":\n            count += 1\n        elif digit == \"F\":\n          \
    \  count += 1\n    return count\n\n", "    \n    hex_key = int(num, 16)\n    \n\
    \    prime_digits = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53,\
    \ 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    \n    count = 0\n    \n    for digit\
    \ in hex_key:\n        if digit in prime_digits:\n            count += 1\n   \
    \ \n    return count\n</cell>\n<cell>\nhex_key(\"A\")\n</cell>\n<cell>\nhex_key(\"\
    B\")\n</cell>\n<cell>\nhex_key(\"C\")\n</cell>\n<cell>\nhex_key(\"D\")\n</cell>\n\
    <cell>\nhex_key(\"E\")\n</cell>\n<cell>\nhex_key(\"F\")\n</cell>\n<cell>\nhex_key(\"\
    G\")\n</cell>\n<cell>\nhex_key(\"H\")\n</cell>\n<cell>\nhex_key(\"I\")\n</cell>\n\
    <cell>\nhex_key(\"J\")\n</cell>\n<cell>\nhex_key(\"K\")\n</cell>\n<cell>\nhex_key(\"\
    L\")\n</cell>\n<cell>\nhex_key(\"M\")\n</cell>\n<cell>\nhex_key(\"N\")\n</cell>\n\
    <cell>\nhex_key(\"O\")\n</cell>\n<cell>\nhex_key(\"P\")\n</cell>\n<cell>\nhex_key(\"\
    Q\")\n</cell>\n<cell>\nhex_key(\"R\")\n</cell>\n<cell>\nhex_key(\"S\")\n</cell>\n\
    <cell>\nhex_key(\"T\")\n</cell>\n<cell>\nhex_key(\"U\")\n</cell>\n<cell>\nhex_key(\"\
    V\")\n</cell>\n<cell>\nhex_key(\"W\")\n</cell>\n<cell>\nhex_key(\"X\")\n</cell>\n\
    <cell>\nhex_key(\"Y\")\n</cell>\n<cell>\nhex_key(\"Z\")\n</cell>\n<cell>\nhex_key(\"\
    0\")\n</cell>\n<cell>\nhex_key(\"1\")\n</cell>\n<cell>\nhex_key(\"2\")\n</cell>\n\
    <cell>\nhex_key(\"3\")\n</cell>\n<cell>\nhex_key(\"4\")\n</cell>\n", "    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    hex_key = 'A'\n    count\
    \ = 0\n    while hex_key != \"\":\n        hex_key += str(hex(ord('A'))[2:])\n\
    \        count += 1\n    return count\n\n", "    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    hex_key = \"F\"\
    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    ", "    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    hexadecimal\
    \ = num.upper()\n    \n    hex_digits = [hexadecimal[i:i+2] for i in range(0,\
    \ len(hexadecimal), 2)]\n    \n    prime_digits = [2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    \n\
    \    prime_digits_set = set(prime_digits)\n    \n    prime_digits_set = prime_digits_set.difference(hex_digits)\n\
    \    \n    prime_digits_set = prime_digits_set.difference(prime_digits_set)\n\
    \    \n    prime_digits_set = prime_digits_set.difference(prime_digits_set)\n\
    \    \n    prime_digits_set = prime_digits_set.difference(prime_digits_set)\n\
    \    \n    prime_digits_set = prime_digits_set.difference(prime_digits_set)\n\
    \    \n    prime_digits_set = prime_digits_set.difference(prime_digits_set)\n\
    \    \n    prime_digits_set = prime_digits_set.difference(prime_digits_set)\n\
    \    \n    prime_digits_set = prime_digits_set.difference(prime_digits_set)\n\
    \    \n    prime_digits_set = prime_digits_set.difference(prime_digits_set)\n\
    \    \n    prime_digits_set = prime_digits_set.difference(prime_digits_set)\n\
    \    \n    prime_digits_set = prime_digits_set.difference(prime_digits_set)\n\
    \    \n    prime_digits_set = prime_digits_set.difference(prime_digits_set)\n\
    \    \n    prime_digits_set = prime_digits_set.difference(prime_digits_set)\n\
    \    \n    prime_digits_set = prime_digits_set.difference(prime_digits_set)\n\
    \    \n    prime_digits_set = prime_digits_set.difference(prime_digits_set)\n\
    \    \n    prime_digits_set = prime_digits_set.difference(prime_digits_set)\n\
    \    \n    prime_digits_set = prime_digits_set.difference(prime_digits_set)\n\
    \    \n    prime_digits_set = prime_digits_set.difference(prime_digits_set)\n\
    \    \n    prime_digits_set = prime_digits_set.difference(prime_digits_set)\n\
    \    \n    prime_digits_set = prime_digits_set.difference(prime_digits_set)\n\
    \    \n    prime_digits_set = prime_digits_set.difference(prime_digits_set)\n\
    \    \n    prime_digits_set = prime", "    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    hexadecimal_digits = list('0123456789ABCDEF')\n\
    \    hexadecimal_digits_set = set(hexadecimal_digits)\n    \n    hexadecimal_digits_set\
    \ = set(hexadecimal_digits)\n    \n    hexadecimal_digits_set = set(hexadecimal_digits)\n\
    \    \n    hexadecimal_digits_set = set(hexadecimal_digits)\n    \n    hexadecimal_digits_set\
    \ = set(hexadecimal_digits)\n    \n    hexadecimal_digits_set = set(hexadecimal_digits)\n\
    \    \n    hexadecimal_digits_set = set(hexadecimal_digits)\n    \n    hexadecimal_digits_set\
    \ = set(hexadecimal_digits)\n    \n    hexadecimal_digits_set = set(hexadecimal_digits)\n\
    \    \n    hexadecimal_digits_set = set(hexadecimal_digits)\n    \n    hexadecimal_digits_set\
    \ = set(hexadecimal_digits)\n    \n    hexadecimal_digits_set = set(hexadecimal_digits)\n\
    \    \n    hexadecimal_digits_set = set(hexadecimal_digits)\n    \n    hexadecimal_digits_set\
    \ = set(hexadecimal_digits)\n    \n    hexadecimal_digits_set = set(hexadecimal_digits)\n\
    \    \n    hexadecimal_digits_set = set(hexadecimal_digits)\n    \n    hexadecimal_digits_set\
    \ = set(hexadecimal_digits)\n    \n    hexadecimal_digits_set = set(hexadecimal_digits)\n\
    \    \n    hexadecimal_digits_set = set(hexadecimal_digits)\n    \n    hexadecimal_digits_set\
    \ = set(hexadecimal_digits)\n    \n    hexadecimal_digits_set = set(hexadecimal_digits)\n\
    \    \n    hexadecimal_digits_set = set(hexadecimal_digits)\n    \n    hexadecimal_digits_set\
    \ = set(hexadecimal_digits)\n    \n    hexadecimal_digits_set = set(hexadecimal_digits)\n\
    \    \n    hexadecimal_digits_set = set(hexadecimal_digits)\n    \n    hexadecimal_digits_set\
    \ = set(hexadecimal_digits)\n    \n    hexadecimal_digits_set = set(hexadecimal_digits)\n\
    \    \n    hexadecimal_digits_set = set(hexadecimal_digits)\n    \n    hexadecimal_digits_set\
    \ = set(hexadecimal_digits)\n    \n    hexadecimal_digits_set = set(hexadecimal_digits)\n\
    \    \n    hexadecimal_digits_set = set(hexadecimal_digits)\n    \n    ", "  \
    \  \n    hex_key = \"A\"\n    \n    count = 0\n    \n    hex_key = str(hex_key)\n\
    \    \n    hex_key = list(hex_key)\n    \n    hex_key.sort()\n    \n    hex_key\
    \ = list(hex_key)\n    \n    hex_key.sort()\n    \n    hex_key = list(hex_key)\n\
    \    \n    hex_key.sort()\n    \n    hex_key = list(hex_key)\n    \n    hex_key.sort()\n\
    \    \n    hex_key = list(hex_key)\n    \n    hex_key.sort()\n    \n    hex_key\
    \ = list(hex_key)\n    \n    hex_key.sort()\n    \n    hex_key = list(hex_key)\n\
    \    \n    hex_key.sort()\n    \n    hex_key = list(hex_key)\n    \n    hex_key.sort()\n\
    \    \n    hex_key = list(hex_key)\n    \n    hex_key.sort()\n    \n    hex_key\
    \ = list(hex_key)\n    \n    hex_key.sort()\n    \n    hex_key = list(hex_key)\n\
    \    \n    hex_key.sort()\n    \n    hex_key = list(hex_key)\n    \n    hex_key.sort()\n\
    \    \n    hex_key = list(hex_key)\n    \n    hex_key.sort()\n    \n    hex_key\
    \ = list(hex_key)\n    \n    hex_key.sort()\n    \n    hex_key = list(hex_key)\n\
    \    \n    hex_key.sort()\n    \n    hex_key = list(hex_key)\n    \n    hex_key.sort()\n\
    \    \n    hex_key = list(hex_key)\n    \n    hex_key.sort()\n    \n    hex_key\
    \ = list(hex_key)\n    \n    hex_key.sort()\n    \n    hex_key = list(hex_key)\n\
    \    \n    hex_key.sort()\n    \n    hex_key = list(hex_key)\n    \n    hex_key.sort()\n\
    \    \n    hex_key = list(hex_key)\n    \n    hex_key.sort()\n    \n    hex_key\
    \ = list(hex_key)\n    \n    hex_key.sort()\n    \n    hex_key = list(hex_key)\n\
    \    \n    hex_key.sort()\n    \n    hex_key = list(hex_key)\n    \n    hex_key.sort()\n\
    \    \n    hex_key = list(hex_key)\n    \n    hex_key.sort()\n    \n    hex_key\
    \ = list(hex_key)\n    \n    hex_key.sort()\n    \n    hex_key = list(hex_key)\n\
    \    \n    hex_key.sort()\n    \n    hex_key = list(hex_key)\n    \n    hex_key.sort()\n\
    \    \n    hex_key = list(hex_key)\n    \n    hex", "    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    hex_key = \"A\"\n    hex_key = \"B\"\n\
    \    hex_key = \"C\"\n    hex_key = \"D\"\n    hex_key = \"E\"\n    hex_key =\
    \ \"F\"\n    hex_key = \"0\"\n    hex_key = \"1\"\n    hex_key = \"2\"\n    hex_key\
    \ = \"3\"\n    hex_key = \"4\"\n    hex_key = \"5\"\n    hex_key = \"6\"\n   \
    \ hex_key = \"7\"\n    hex_key = \"8\"\n    hex_key = \"9\"\n    hex_key = \"\
    A\"\n    hex_key = \"B\"\n    hex_key = \"C\"\n    hex_key = \"D\"\n    hex_key\
    \ = \"E\"\n    hex_key = \"F\"\n    hex_key = \"0\"\n    hex_key = \"1\"\n   \
    \ hex_key = \"2\"\n    hex_key = \"3\"\n    hex_key = \"4\"\n    hex_key = \"\
    5\"\n    hex_key = \"6\"\n    hex_key = \"7\"\n    hex_key = \"8\"\n    hex_key\
    \ = \"9\"\n    hex_key = \"A\"\n    hex_key = \"B\"\n    hex_key = \"C\"\n   \
    \ hex_key = \"D\"\n    hex_key = \"E\"\n    hex_key = \"F\"\n    hex_key = \"\
    0\"\n    hex_key = \"1\"\n    hex_key = \"2\"\n    hex_key = \"3\"\n    hex_key\
    \ = \"4\"\n    hex_key = \"5\"\n    hex_key = \"6\"\n    hex_key = \"7\"\n   \
    \ hex_key = \"8\"\n    hex_key = \"9\"\n    hex_key = \"A\"\n    hex_key = \"\
    B\"\n    hex_key = \"C\"\n    hex_key = \"D\"\n    hex_key = \"E\"\n    hex_key\
    \ = \"F\"\n    hex_key = \"0\"\n    hex_key = \"1\"\n    hex_key = \"2\"\n   \
    \ hex_key = \"3\"\n    hex_key = \"4\"\n    hex_key = \"5\"\n    hex_key = \"\
    6\"\n    hex_key = \"7\"\n    hex_key = \"8\"\n    hex_key = \"9\"\n    hex_key\
    \ = \"A\"\n    hex_key = \"B\"\n    hex_key = \"C\"\n    hex_key = \"D\"\n   \
    \ hex_key = \"E\"\n    hex_key = \"F\"\n    hex_key = \"0\"\n    hex_key = \"\
    1\"\n    hex_key = \"2\"\n    hex_key = \"3\"\n    hex_key = \"4\"\n    hex_key\
    \ = \"5\"\n    hex_key = \"6", "    \n    hex_key = int(num.upper(), 16)\n   \
    \ \n    prime_digits = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    \n    prime_digits_set = set(prime_digits)\n\
    \    \n    prime_digits_set = prime_digits_set.difference(hex_key)\n    \n   \
    \ prime_digits_set = prime_digits_set.difference(hex_key.bit_length())\n    \n\
    \    prime_digits_set = prime_digits_set.difference(hex_key.bit_length()//2)\n\
    \    \n    prime_digits_set = prime_digits_set.difference(hex_key.bit_length()//4)\n\
    \    \n    prime_digits_set = prime_digits_set.difference(hex_key.bit_length()//8)\n\
    \    \n    prime_digits_set = prime_digits_set.difference(hex_key.bit_length()//16)\n\
    \    \n    prime_digits_set = prime_digits_set.difference(hex_key.bit_length()//32)\n\
    \    \n    prime_digits_set = prime_digits_set.difference(hex_key.bit_length()//64)\n\
    \    \n    prime_digits_set = prime_digits_set.difference(hex_key.bit_length()//128)\n\
    \    \n    prime_digits_set = prime_digits_set.difference(hex_key.bit_length()//256)\n\
    \    \n    prime_digits_set = prime_digits_set.difference(hex_key.bit_length()//512)\n\
    \    \n    prime_digits_set = prime_digits_set.difference(hex_key.bit_length()//1024)\n\
    \    \n    prime_digits_set = prime_digits_set.difference(hex_key.bit_length()//2048)\n\
    \    \n    prime_digits_set = prime_digits_set.difference(hex_key.bit_length()//4096)\n\
    \    \n    prime_digits_set = prime_digits_set.difference(hex_key.bit_length()//8192)\n\
    \    \n    prime_digits_set = prime_digits_set.difference(hex_key.bit_length()//16384)\n\
    \    \n    prime_digits_set = prime_digits_set.difference(hex_key.bit_length()//32768)\n\
    \    \n    prime_digits_set = prime_digits_set.difference(hex_key.bit_length()//65536)\n\
    \    \n    prime_digits_set = prime_digits_set.difference(hex_key.bit_length()//131072)\n\
    \    \n    prime_", "    \n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    hexadecimal\
    \ = num.upper()\n    hexadecimal_length = len(hexadecimal)\n    \n    prime_numbers\
    \ = []\n    \n    for index in range(hexadecimal_length):\n        \n        digit\
    \ = hexadecimal[index]\n        \n        if digit == 'A' or digit == 'B' or digit\
    \ == 'C' or digit == 'D' or digit == 'E' or digit == 'F':\n            \n    \
    \        prime_numbers.append(digit)\n            \n        elif digit == '2'\
    \ or digit == '3' or digit == '5' or digit == '7' or digit == 'B' or digit ==\
    \ 'D':\n            \n            prime_numbers.append(digit)\n            \n\
    \        elif digit == '2' or digit == '3' or digit == '5' or digit == '7' or\
    \ digit == 'B' or digit == 'D':\n            \n            prime_numbers.append(digit)\n\
    \            \n        elif digit == '2' or digit == '3' or digit == '5' or digit\
    \ == '7' or digit == 'B' or digit == 'D':\n            \n            prime_numbers.append(digit)\n\
    \            \n        elif digit == '2' or digit == '3' or digit == '5' or digit\
    \ == '7' or digit == 'B' or digit == 'D':\n            \n            prime_numbers.append(digit)\n\
    \            \n        elif digit == '2' or digit == '3' or digit == '5' or digit\
    \ == '7' or digit == 'B' or digit == 'D':\n            \n            prime_numbers.append(digit)\n\
    \            \n        elif digit == '2' or digit == '3' or digit == '5' or digit\
    \ == '7' or digit == 'B' or digit == 'D':\n            \n            prime_numbers.append(digit)\n\
    \            \n        elif digit == '2' or digit == '3' or digit == '5' or digit\
    \ == '7' or digit == 'B' or digit == 'D':\n            \n            prime_numbers.append(digit)\n\
    \            \n        elif digit == '2' or digit == '3' or digit == '5' or digit\
    \ == '7' or digit == 'B' or digit == 'D':\n            \n            prime_numbers.append(digit)\n\
    \            \n        elif digit == '2' or digit == '3' or digit == '5' or digit\
    \ == '7' or digit == 'B' or digit == 'D':\n            \n            prime_numbers.append(digit)\n\
    \            \n        elif digit == '2' or digit == '3' or digit == '5' or digit\
    \ == '7' or digit == 'B' or digit == 'D':\n            \n            prime_numbers.append(digit)\n\
    \            \n        elif digit == '2' or digit == '3' or digit == '5' or digit\
    \ == '7' or digit == 'B' or digit == 'D':\n            \n            prime_numbers.append(digit)\n\
    \            \n        elif digit == '2' or ", "    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    hex_key = \"0A\"\n    hex_digits = \"0123456789ABCDEF\"\n    hex_digits_len\
    \ = len(hex_digits)\n    hex_digits_len = len(hex_key)\n    hex_digits_len = len(hex_digits)\n\
    \    hex_digits_len = len(hex_key)\n    hex_digits_len = len(hex_key)\n    hex_digits_len\
    \ = len(hex_key)\n    hex_digits_len = len(hex_key)\n    hex_digits_len = len(hex_key)\n\
    \    hex_digits_len = len(hex_key)\n    hex_digits_len = len(hex_key)\n    hex_digits_len\
    \ = len(hex_key)\n    hex_digits_len = len(hex_key)\n    hex_digits_len = len(hex_key)\n\
    \    hex_digits_len = len(hex_key)\n    hex_digits_len = len(hex_key)\n    hex_digits_len\
    \ = len(hex_key)\n    hex_digits_len = len(hex_key)\n    hex_digits_len = len(hex_key)\n\
    \    hex_digits_len = len(hex_key)\n    hex_digits_len = len(hex_key)\n    hex_digits_len\
    \ = len(hex_key)\n    hex_digits_len = len(hex_key)\n    hex_digits_len = len(hex_key)\n\
    \    hex_digits_len = len(hex_key)\n    hex_digits_len = len(hex_key)\n    hex_digits_len\
    \ = len(hex_key)\n    hex_digits_len = len(hex_key)\n    hex_digits_len = len(hex_key)\n\
    \    hex_digits_len = len(hex_key)\n    hex_digits_len = len(hex_key)\n    hex_digits_len\
    \ = len(hex_key)\n    hex_digits_len = len(hex_key)\n    hex_digits_len = len(hex_key)\n\
    \    hex_digits_len = len(hex_key)\n    hex_digits_len = len(hex_key)\n    hex_digits_len\
    \ = len(hex_key)\n    hex_digits_len = len(hex_key)\n    hex_digits_len = len(hex_key)\n\
    \    hex_digits_len = len(hex_key)\n    hex_digits_len = len(hex_key)\n    hex_digits_len\
    \ = len(hex_key)\n    hex_digits_len = len(hex_key)\n    hex_digits_len = len(hex_key)\n\
    \    hex_digits_len = len(hex_key)\n    hex_digits_len = len(hex_key)\n    hex_digits_len\
    \ = len(hex_key)\n    hex_digits_len = len(hex_key)\n    hex_digits_len = len(hex_key)\n\
    \    hex_digits_len = len(hex_key)\n    hex_digits_len = len(hex_key)\n    hex_digits_len\
    \ = len(hex_key)\n    hex_digits_len = len(hex_key)\n    hex_digits_len = len(hex_key)\n\
    \    hex_digits_len = len(hex_key)\n    hex_digits_len = len(hex_key)\n    hex_digits_len\
    \ = len(hex_key)\n    hex_digits_len = len(hex_key)\n    hex_digits_len = len(hex_key)\n\
    \    hex_digits_len = len(hex_key)\n    hex_digits_len = len(hex_key)\n    hex_digits_len\
    \ = len(hex_key)\n    hex_digits_len = len("]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
