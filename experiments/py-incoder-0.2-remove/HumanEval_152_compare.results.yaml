name: HumanEval_152_compare
language: py
results:
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [10, 20, 30, 40, 50]\n            guess = [10, 20, 30, 40, 50]\n    \
    \        compare(game, guess)\n            >> [0, 0, 10, 10, 10]\n           \
    \ \n            game = [10, 20, 30, 40, 50]\n            guess = [10, 20, 30,\
    \ 40, 50]\n            compare(game, guess)\n            >> [0, 0, 10, 10, 10]\n\
    \            \n            game = [10, 20, 30, 40, 50]\n            guess = [10,\
    \ 20, 30, 40, 50]\n            compare(game, guess)\n            >> [0, 0, 10,\
    \ 10, 10]\n            \n            game = [10, 20, 30, 40, 50]\n           \
    \ guess = [10, 20, 30, 40, 50]\n            compare(game, guess)\n           \
    \ >> [0, 0, 10, 10, 10]\n            \n            game = [10, 20, 30, 40, 50]\n\
    \            guess = [10, 20, 30, 40, 50]\n            compare(game, guess)\n\
    \            >> [0, 0, 10, 10, 10]\n            \n            game = [10, 20,\
    \ 30, 40, 50]\n            guess = [10, 20, 30, 40, 50]\n            compare(game,\
    \ guess)\n            >> [0, 0, 10, 10, 10]\n            \n            game =\
    \ [10, 20, 30, 40, 50]\n            guess = [10, 20, 30, 40, 50]\n           \
    \ compare(game, guess)\n            >> [0, 0, 10, 10, 10]\n            \n    \
    \        game = [10, 20, 30, 40, 50]\n            guess = [10, 20, 30, 40, 50]\n\
    \            compare(game, guess)\n            >> [0, 0, 10, 10, 10]\n       \
    \     \n            game = [10, 20, 30, 40, 50]\n            guess = [10, 20,\
    \ 30, 40, 50]\n            compare(game, guess)\n            >> [0, 0, 10, 10,\
    \ 10]\n            \n            game = [10, 20, 30, 40, 50]\n            guess\
    \ = [10, 20, 30, 40, 50]\n            compare(game, guess)\n            >> [0,\
    \ 0, 10, 10, 10]\n            \n            game = [10, 20, 30, 40, 50]\n    \
    \        guess = [10, 20, 30, 40, 50]\n            compare(game, guess)\n    \
    \        >> [0, 0, 10, 10, 10]\n            \n            game = [10, 20, 30,\
    \ 40, 50]\n            guess = [10, 20, 30, 40, 50]\n            compare(game,\
    \ guess)\n            >> [0, 0, 10, 10, 10]\n            \n            game =\
    \ [10, 20, 30, 40, 50]\n            guess = [10, 20, 30, 40, 50]\n           \
    \ compare(game, guess)\n            >> [0, 0, 10, 10, 10]\n            \n    \
    \        game = [10, 20, 30, 40, 50]\n            guess = [10, 20, 30, 40, 5\n\
    def check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2,\
    \ -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0,\
    \ 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2,\
    \ -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2,\
    \ 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpr1ykaltn.py\"\
    , line 16\n    game = [10, 20, 30, 40, 50]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [5, 3, 6, 1, 4, 2]\n            guess = [3, 6, 4, 1, 5, 2]\n        \
    \    \n            compare(game, guess)\n            \n            >>>[2, 0, 2,\
    \ 1, 1, 0]\n            \"\"\"\n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n \
    \   assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0,\
    \ 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5mez0c7c.py\"\
    , line 16\n    game = [5, 3, 6, 1, 4, 2]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [1, 3, 5]\n            guess = [1, 3, 5]\n            compare(game, guess)\n\
    \            \n            game = [1, 3, 5]\n            guess = [1, 3, 6]\n \
    \           compare(game, guess)\n            \n            game = [1, 3, 5]\n\
    \            guess = [1, 4, 5]\n            compare(game, guess)\n           \
    \ \n            game = [1, 3, 5]\n            guess = [1, 4, 6]\n            compare(game,\
    \ guess)\n            \n            game = [1, 3, 5]\n            guess = [1,\
    \ 5, 6]\n            compare(game, guess)\n            \n            game = [1,\
    \ 3, 5]\n            guess = [1, 6, 6]\n            compare(game, guess)\n   \
    \         \n            game = [1, 3, 5]\n            guess = [1, 7, 6]\n    \
    \        compare(game, guess)\n            \n            game = [1, 3, 5]\n  \
    \          guess = [1, 8, 6]\n            compare(game, guess)\n            \n\
    \            game = [1, 3, 5]\n            guess = [1, 9, 6]\n            compare(game,\
    \ guess)\n            \n            game = [1, 3, 5]\n            guess = [1,\
    \ 10, 6]\n            compare(game, guess)\n            \n            game = [1,\
    \ 3, 5]\n            guess = [1, 11, 6]\n            compare(game, guess)\n  \
    \          \n            game = [1, 3, 5]\n            guess = [1, 12, 6]\n  \
    \          compare(game, guess)\n            \n            game = [1, 3, 5]\n\
    \            guess = [1, 13, 6]\n            compare(game, guess)\n          \
    \  \n            game = [1, 3, 5]\n            guess = [1, 14, 6]\n          \
    \  compare(game, guess)\n            \n            game = [1, 3, 5]\n        \
    \    guess = [1, 15, 6]\n            compare(game, guess)\n            \n    \
    \        game = [1, 3, 5]\n            guess = [1, 16, 6]\n            compare(game,\
    \ guess)\n            \n            game = [1, 3, 5]\n            guess = [1,\
    \ 17, 6]\n            compare(game, guess)\n            \n            game = [1,\
    \ 3, 5]\n            guess = [1, 18, 6]\n            compare(game, guess)\n  \
    \          \n            game = [1, 3, 5]\n            guess = [1, 19, 6]\n  \
    \          compare(game, guess)\n            \n            game = [1, 3, 5]\n\
    \            guess = [1, 20, 6]\n            compare(game, guess)\n          \
    \  \n            game = [1, 3, 5]\n            guess = [1, 21, 6]\n          \
    \  compare(game, guess)\n            \n            game = [1, 3, 5]\n        \
    \    \ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 1], [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0],\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1,\
    \ -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) ==\
    \ [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmgfrpv8i.py\"\
    , line 16\n    game = [1, 3, 5]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [1,5,7,9,2,6,8,3,4]\n            guess = [2,4,5,6,7,8,9,1,3]\n      \
    \      compare(game, guess)\n            \n            game = [1,5,7,9,2,6,8,3,4]\n\
    \            guess = [2,4,5,6,7,8,9,1,3]\n            compare(game, guess)\n \
    \           \n            game = [1,5,7,9,2,6,8,3,4]\n            guess = [2,4,5,6,7,8,9,1,3]\n\
    \            compare(game, guess)\n            \n            game = [1,5,7,9,2,6,8,3,4]\n\
    \            guess = [2,4,5,6,7,8,9,1,3]\n            compare(game, guess)\n \
    \           \n            game = [1,5,7,9,2,6,8,3,4]\n            guess = [2,4,5,6,7,8,9,1,3]\n\
    \            compare(game, guess)\n            \n            game = [1,5,7,9,2,6,8,3,4]\n\
    \            guess = [2,4,5,6,7,8,9,1,3]\n            compare(game, guess)\n \
    \           \n            game = [1,5,7,9,2,6,8,3,4]\n            guess = [2,4,5,6,7,8,9,1,3]\n\
    \            compare(game, guess)\n            \n            game = [1,5,7,9,2,6,8,3,4]\n\
    \            guess = [2,4,5,6,7,8,9,1,3]\n            compare(game, guess)\n \
    \           \n            game = [1,5,7,9,2,6,8,3,4]\n            guess = [2,4,5,6,7,8,9,1,3]\n\
    \            compare(game, guess)\n            \n            game = [1,5,7,9,2,6,8,3,4]\n\
    \            guess = [2,4,5,6,7,8,9,1,3]\n            compare(game, guess)\n \
    \           \n            game = [1,5,7,9,2,6,8,3,4]\n            guess = [2,4,5,6,7,8,9,1,3]\n\
    \            compare(game, guess)\n            \n            game = [1,5,7,9,2,6,8,3,4]\n\
    \            guess = [2,4,5,6,7,8,9,1,3]\n            compare(game, guess)\n \
    \           \n            game = [1,5,7,9,2,6,8,3,4]\n            guess = [2,4,5,6,7,8,9,1,3]\n\
    \            compare(game, guess)\n            \n            game = [1,5,7,9,2,6,8,3,4]\n\
    \            guess = [2,4,5,6,7,8,9,1,3]\n            compare(game, guess)\n \
    \           \n            game = [1,5,7,9,2,\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n \
    \   assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0,\
    \ 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcbmhfaox.py\"\
    , line 16\n    game = [1,5,7,9,2,6,8,3,4]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [5, 7, 7, 7, 7, 7]\n            guess = [7, 7, 7, 7, 7, 7]\n        \
    \    compare(game, guess)\n            >> [0, 0, 0, 0, 0, 0]\n            \n \
    \           game = [5, 7, 7, 7, 7, 7]\n            guess = [7, 7, 7, 7, 7, 7]\n\
    \            compare(game, guess)\n            >> [0, 0, 0, 0, 0, 0]\n       \
    \     \n            game = [5, 7, 7, 7, 7, 7]\n            guess = [7, 7, 7, 7,\
    \ 7, 7]\n            compare(game, guess)\n            >> [0, 0, 0, 0, 0, 0]\n\
    \            \n            game = [5, 7, 7, 7, 7, 7]\n            guess = [7,\
    \ 7, 7, 7, 7, 7]\n            compare(game, guess)\n            >> [0, 0, 0, 0,\
    \ 0, 0]\n            \n            game = [5, 7, 7, 7, 7, 7]\n            guess\
    \ = [7, 7, 7, 7, 7, 7]\n            compare(game, guess)\n            >> [0, 0,\
    \ 0, 0, 0, 0]\n            \n            game = [5, 7, 7, 7, 7, 7]\n         \
    \   guess = [7, 7, 7, 7, 7, 7]\n            compare(game, guess)\n           \
    \ >> [0, 0, 0, 0, 0, 0]\n            \n            game = [5, 7, 7, 7, 7, 7]\n\
    \            guess = [7, 7, 7, 7, 7, 7]\n            compare(game, guess)\n  \
    \          >> [0, 0, 0, 0, 0, 0]\n            \n            game = [5, 7, 7, 7,\
    \ 7, 7]\n            guess = [7, 7, 7, 7, 7, 7]\n            compare(game, guess)\n\
    \            >> [0, 0, 0, 0, 0, 0]\n            \n            game = [5, 7, 7,\
    \ 7, 7, 7]\n            guess = [7, 7, 7, 7, 7, 7]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, 0, 0, 0]\n            \n            game =\
    \ [5, 7, 7, 7, 7, 7]\n            guess = [7, 7, 7, 7, 7, 7]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, 0, 0, 0]\n            \n            game =\
    \ [5, 7, 7, 7, 7, 7]\n            guess = [7, 7, 7, 7, 7, 7]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, 0, 0, 0]\n            \n            game =\
    \ [5, 7, 7, 7, 7, 7]\n            guess = [7, 7, 7, 7, 7, 7]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, 0, 0, 0]\n            \n            game =\
    \ [5, 7, 7, 7, 7, 7]\n            guess = [7, 7, 7, 7, 7, 7]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, 0, 0, 0]\n            \n            game =\
    \ [5, 7, 7, 7, 7, 7]\n            guess = [7, 7, 7, 7, 7, 7]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, 0, 0, 0]\n            \n            game =\
    \ [5, 7, 7, 7, 7, \ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5,\
    \ 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0, 0,\
    \ 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2me8e5dv.py\"\
    , line 16\n    game = [5, 7, 7, 7, 7, 7]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [1, 5, 3, 7, 9, 2, 6]\n            guess = [1, 5, 3, 7, 9, 2, 6]\n  \
    \          compare(game, guess)\n            \n            game = [1, 5, 3, 7,\
    \ 9, 2, 6]\n            guess = [1, 5, 3, 7, 9, 2, 7]\n            compare(game,\
    \ guess)\n            \n            game = [1, 5, 3, 7, 9, 2, 6]\n           \
    \ guess = [1, 5, 3, 7, 9, 2, 8]\n            compare(game, guess)\n          \
    \  \n            game = [1, 5, 3, 7, 9, 2, 6]\n            guess = [1, 5, 3, 7,\
    \ 9, 2, 9]\n            compare(game, guess)\n            \n            game =\
    \ [1, 5, 3, 7, 9, 2, 6]\n            guess = [1, 5, 3, 7, 9, 2, 10]\n        \
    \    compare(game, guess)\n            \n            game = [1, 5, 3, 7, 9, 2,\
    \ 6]\n            guess = [1, 5, 3, 7, 9, 2, 11]\n            compare(game, guess)\n\
    \            \n            game = [1, 5, 3, 7, 9, 2, 6]\n            guess = [1,\
    \ 5, 3, 7, 9, 2, 12]\n            compare(game, guess)\n            \n       \
    \     game = [1, 5, 3, 7, 9, 2, 6]\n            guess = [1, 5, 3, 7, 9, 2, 13]\n\
    \            compare(game, guess)\n            \n            game = [1, 5, 3,\
    \ 7, 9, 2, 6]\n            guess = [1, 5, 3, 7, 9, 2, 14]\n            compare(game,\
    \ guess)\n            \n            game = [1, 5, 3, 7, 9, 2, 6]\n           \
    \ guess = [1, 5, 3, 7, 9, 2, 15]\n            compare(game, guess)\n         \
    \   \n            game = [1, 5, 3, 7, 9, 2, 6]\n            guess = [1, 5, 3,\
    \ 7, 9, 2, 16]\n            compare(game, guess)\n            \n            game\
    \ = [1, 5, 3, 7, 9, 2, 6]\n            guess = [1, 5, 3, 7, 9, 2, 17]\n      \
    \      compare(game, guess)\n            \n            game = [1, 5, 3, 7, 9,\
    \ 2, 6]\n            guess = [1, 5, 3, 7, 9, 2, 18]\n            compare(game,\
    \ guess)\n            \n            game = [1, 5, 3, 7, 9, 2, 6]\n           \
    \ guess = [1, 5, 3, 7, 9, 2, 19]\n            compare(game, guess)\n         \
    \   \n            game = [1, 5, 3, 7, 9, 2, 6]\n            guess = [1, 5, 3,\
    \ 7, 9, 2, 20]\n            compare(game, guess)\n            \n            game\
    \ = [1, 5, 3, 7, 9, 2, 6]\n            guess = [1, 5, 3, 7, 9, 2, 21]\ndef check(candidate):\n\
    \    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0,\
    \ 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0,\
    \ 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n  \
    \  assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n\
    \    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa0vfb75g.py\"\
    , line 16\n    game = [1, 5, 3, 7, 9, 2, 6]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ scores = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n            guesses = [10, 20,\
    \ 30, 40, 50, 60, 70, 80, 90]\n            compare(scores, guesses) == [0, 0,\
    \ 0, 0, 0, 0, 0, 0]\n            compare(scores, guesses) == [0, 0, 0, 0, 0, 0,\
    \ 0, 0]\n            compare(scores, guesses) == [0, 0, 0, 0, 0, 0, 0, 0]\n  \
    \          compare(scores, guesses) == [0, 0, 0, 0, 0, 0, 0, 0]\n            compare(scores,\
    \ guesses) == [0, 0, 0, 0, 0, 0, 0, 0]\n            compare(scores, guesses) ==\
    \ [0, 0, 0, 0, 0, 0, 0, 0]\n            compare(scores, guesses) == [0, 0, 0,\
    \ 0, 0, 0, 0, 0]\n            compare(scores, guesses) == [0, 0, 0, 0, 0, 0, 0,\
    \ 0]\n            compare(scores, guesses) == [0, 0, 0, 0, 0, 0, 0, 0]\n     \
    \       compare(scores, guesses) == [0, 0, 0, 0, 0, 0, 0, 0]\n            compare(scores,\
    \ guesses) == [0, 0, 0, 0, 0, 0, 0, 0]\n            compare(scores, guesses) ==\
    \ [0, 0, 0, 0, 0, 0, 0, 0]\n            compare(scores, guesses) == [0, 0, 0,\
    \ 0, 0, 0, 0, 0]\n            compare(scores, guesses) == [0, 0, 0, 0, 0, 0, 0,\
    \ 0]\n            compare(scores, guesses) == [0, 0, 0, 0, 0, 0, 0, 0]\n     \
    \       compare(scores, guesses) == [0, 0, 0, 0, 0, 0, 0, 0]\n            compare(scores,\
    \ guesses) == [0, 0, 0, 0, 0, 0, 0, 0]\n            compare(scores, guesses) ==\
    \ [0, 0, 0, 0, 0, 0, 0, 0]\n            compare(scores, guesses) == [0, 0, 0,\
    \ 0, 0, 0, 0, 0]\n            compare(scores, guesses) == [0, 0, 0, 0, 0, 0, 0,\
    \ 0]\n            compare(scores, guesses) == [0, 0, 0, 0, 0, 0, 0, 0]\n     \
    \       compare(scores, guesses) == [0, 0, 0, 0, 0, 0, 0, 0]\n            compare(scores,\
    \ guesses) == [0, 0, 0, 0, 0, 0, 0, 0]\n            compare(scores, guesses) ==\
    \ [0, 0, 0, 0, 0, 0, 0, 0]\n            compare(scores, guesses) == [0, 0, 0,\
    \ 0, 0, 0, 0, 0]\n            compare(scores, guesses) == [0, 0, 0, 0, 0, 0, 0,\
    \ 0]\n            compare(scores, guesses) == [0, 0, 0, 0, 0, 0, 0, 0]\n     \
    \       compare(scores, guesses) == [0, 0, 0, 0, 0, 0, 0, 0]\n            compare(scores,\
    \ guesses) == [0, 0, 0, 0, 0, 0, 0, 0]\n            compare(scores, guesses) ==\
    \ [0, 0, 0, 0, 0, 0, 0, 0]\n            compare(scores, guesses) == [0, 0, 0,\
    \ 0, 0, 0, 0, 0]\n            compare(scores, guesses) == [0, 0, 0, 0, 0, 0, 0,\
    \ 0]\n            compare(scores, guesses) == [0, 0, 0, 0, 0, 0, 0, 0]\n     \
    \       compare(scores, guesses) == [0, 0, 0, 0, 0, 0, 0, 0]\n            compare(scores,\
    \ guesses) == [0, 0, 0, 0, 0, 0, 0, 0]\n            compare(scores, guesses) ==\
    \ [0, 0, 0, 0, 0, 0, 0, 0]\n            compare(scores, guesses) == [0, 0, 0,\
    \ 0, 0, 0, 0, 0]\n            compare(scores, guesses) == [0, 0, 0, 0, 0, 0, 0,\
    \ 0]\n            compare(scores, guesses) == [0, 0, 0, 0, 0, 0, 0, 0]\n     \
    \       compare(scores, guesses) == [0, 0, 0, 0, 0, 0, 0, 0]\n            compare(\n\
    def check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2,\
    \ -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0,\
    \ 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2,\
    \ -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2,\
    \ 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpioab5z8l.py\"\
    , line 16\n    scores = [10, 20, 30, 40, 50, 60, 70, 80, 90]\nIndentationError:\
    \ unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [1, 5, 3, 7, 9]\n            guess = [1, 5, 3, 7, 9]\n            compare(game,\
    \ guess)\n            \n            game = [1, 5, 3, 7, 9]\n            guess\
    \ = [1, 5, 3, 7, 10]\n            compare(game, guess)\n            \n       \
    \     game = [1, 5, 3, 7, 9]\n            guess = [1, 5, 3, 7, 8]\n          \
    \  compare(game, guess)\n            \n            game = [1, 5, 3, 7, 9]\n  \
    \          guess = [1, 5, 3, 7, 9]\n            compare(game, guess)\n       \
    \     \n            game = [1, 5, 3, 7, 9]\n            guess = [1, 5, 3, 7, 10]\n\
    \            compare(game, guess)\n            \n            game = [1, 5, 3,\
    \ 7, 9]\n            guess = [1, 5, 3, 7, 8]\n            compare(game, guess)\n\
    \            \n            game = [1, 5, 3, 7, 9]\n            guess = [1, 5,\
    \ 3, 7, 9]\n            compare(game, guess)\n            \n            game =\
    \ [1, 5, 3, 7, 9]\n            guess = [1, 5, 3, 7, 10]\n            compare(game,\
    \ guess)\n            \n            game = [1, 5, 3, 7, 9]\n            guess\
    \ = [1, 5, 3, 7, 8]\n            compare(game, guess)\n            \n        \
    \    game = [1, 5, 3, 7, 9]\n            guess = [1, 5, 3, 7, 9]\n           \
    \ compare(game, guess)\n            \n            game = [1, 5, 3, 7, 9]\n   \
    \         guess = [1, 5, 3, 7, 10]\n            compare(game, guess)\n       \
    \     \n            game = [1, 5, 3, 7, 9]\n            guess = [1, 5, 3, 7, 8]\n\
    \            compare(game, guess)\n            \n            game = [1, 5, 3,\
    \ 7, 9]\n            guess = [1, 5, 3, 7, 9]\n            compare(game, guess)\n\
    \            \n            game = [1, 5, 3, 7, 9]\n            guess = [1, 5,\
    \ 3, 7, 10]\n            compare(game, guess)\n            \n            game\
    \ = [1, 5, 3, 7, 9]\n            guess = [1, 5, 3, 7, 8]\n            compare(game,\
    \ guess)\n            \n            game = [1, 5, 3, 7, 9]\n            guess\
    \ = [1, 5, 3, 7, 9]\n            compare(game, guess)\n            \n        \
    \    game = [1, 5, 3, 7, 9]\n            guess = [1, 5, 3, 7, 10]\n          \
    \  compare(game, guess)\n            \n            game = [1, 5, 3, 7, 9]\n  \
    \          guess = [1, 5, 3, 7, 8]\n            compare(game, guess)\n       \
    \     \n            game = [1, 5, 3, 7, 9]\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n \
    \   assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0,\
    \ 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjhgngwfu.py\"\
    , line 16\n    game = [1, 5, 3, 7, 9]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [10, 20, 30, 40, 50]\n            guess = [10, 20, 30, 40, 50]\n    \
    \        compare(game, guess)\n            \n            game = [10, 20, 30, 40,\
    \ 50]\n            guess = [10, 20, 30, 40, 50]\n            compare(game, guess)\n\
    \            \n            game = [10, 20, 30, 40, 50]\n            guess = [10,\
    \ 20, 30, 40, 50]\n            compare(game, guess)\n            \n          \
    \  game = [10, 20, 30, 40, 50]\n            guess = [10, 20, 30, 40, 50]\n   \
    \         compare(game, guess)\n            \n            game = [10, 20, 30,\
    \ 40, 50]\n            guess = [10, 20, 30, 40, 50]\n            compare(game,\
    \ guess)\n            \n            game = [10, 20, 30, 40, 50]\n            guess\
    \ = [10, 20, 30, 40, 50]\n            compare(game, guess)\n            \n   \
    \         game = [10, 20, 30, 40, 50]\n            guess = [10, 20, 30, 40, 50]\n\
    \            compare(game, guess)\n            \n            game = [10, 20, 30,\
    \ 40, 50]\n            guess = [10, 20, 30, 40, 50]\n            compare(game,\
    \ guess)\n            \n            game = [10, 20, 30, 40, 50]\n            guess\
    \ = [10, 20, 30, 40, 50]\n            compare(game, guess)\n            \n   \
    \         game = [10, 20, 30, 40, 50]\n            guess = [10, 20, 30, 40, 50]\n\
    \            compare(game, guess)\n            \n            game = [10, 20, 30,\
    \ 40, 50]\n            guess = [10, 20, 30, 40, 50]\n            compare(game,\
    \ guess)\n            \n            game = [10, 20, 30, 40, 50]\n            guess\
    \ = [10, 20, 30, 40, 50]\n            compare(game, guess)\n            \n   \
    \         game = [10, 20, 30, 40, 50]\n            guess = [10, 20, 30, 40, 50]\n\
    \            compare(game, guess)\n            \n            game = [10, 20, 30,\
    \ 40, 50]\n            guess = [10, 20, 30, 40, 50]\n            compare(game,\
    \ guess)\n            \n            game = [10, 20, 30, 40, 50]\n            guess\
    \ = [10, 20, 30, 40, 50]\n            compare(game, guess)\n            \n   \
    \         game = [10, 20, 30, 40, 50]\n            guess = [10, 20, 30, 40, 50]\n\
    \            compare(game, guess)\n            \n            game = [10, 20, 30,\
    \ 40, 50]\n            guess = [10, 20, 30, 40, 50]\n            compare(game,\
    \ guess)\n            \n            game\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfi6qwfkn.py\"\
    , line 16\n    game = [10, 20, 30, 40, 50]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ scores = [1, 3, 5]\n            guesses = [1, 3, 5]\n            compare(scores,\
    \ guesses) --> [0, 0, 0]\n            scores = [1, 3, 5]\n            guesses\
    \ = [1, 3, 6]\n            compare(scores, guesses) --> [1, 1, 1]\n          \
    \  scores = [1, 3, 5]\n            guesses = [1, 3, 6]\n            compare(scores,\
    \ guesses) --> [1, 1, 1]\n            scores = [1, 3, 5]\n            guesses\
    \ = [1, 3, 6]\n            compare(scores, guesses) --> [1, 1, 1]\n          \
    \  scores = [1, 3, 5]\n            guesses = [1, 3, 6]\n            compare(scores,\
    \ guesses) --> [1, 1, 1]\n            scores = [1, 3, 5]\n            guesses\
    \ = [1, 3, 6]\n            compare(scores, guesses) --> [1, 1, 1]\n          \
    \  scores = [1, 3, 5]\n            guesses = [1, 3, 6]\n            compare(scores,\
    \ guesses) --> [1, 1, 1]\n            scores = [1, 3, 5]\n            guesses\
    \ = [1, 3, 6]\n            compare(scores, guesses) --> [1, 1, 1]\n          \
    \  scores = [1, 3, 5]\n            guesses = [1, 3, 6]\n            compare(scores,\
    \ guesses) --> [1, 1, 1]\n            scores = [1, 3, 5]\n            guesses\
    \ = [1, 3, 6]\n            compare(scores, guesses) --> [1, 1, 1]\n          \
    \  scores = [1, 3, 5]\n            guesses = [1, 3, 6]\n            compare(scores,\
    \ guesses) --> [1, 1, 1]\n            scores = [1, 3, 5]\n            guesses\
    \ = [1, 3, 6]\n            compare(scores, guesses) --> [1, 1, 1]\n          \
    \  scores = [1, 3, 5]\n            guesses = [1, 3, 6]\n            compare(scores,\
    \ guesses) --> [1, 1, 1]\n            scores = [1, 3, 5]\n            guesses\
    \ = [1, 3, 6]\n            compare(scores, guesses) --> [1, 1, 1]\n          \
    \  scores = [1, 3, 5]\n            guesses = [1, 3, 6]\n            compare(scores,\
    \ guesses) --> [1, 1, 1]\n            scores = [1, 3, 5]\n            guesses\
    \ = [1, 3, 6]\n            compare(scores, guesses) --> [1, 1, 1]\n          \
    \  scores = [1, 3, 5]\n            guesses = [1, 3, 6]\n            compare(scores,\
    \ guesses) --> [1, 1, 1]\n            scores = [1, 3, 5]\n            guesses\
    \ = [1, 3, 6]\n            compare(scores, guesses) --> [1, 1, 1]\n          \
    \  scores = [1, 3, 5]\n            guesses = [1, 3, 6]\n            compare(scores,\
    \ guesses) --> [1, 1, 1]\ndef check(candidate):\n    assert candidate([1, 2, 3,\
    \ 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpguxxdbvf.py\"\
    , line 16\n    scores = [1, 3, 5]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [1, 3, 6, 8, 10, 12, 15, 17, 20]\n            guess = [1, 3, 6, 8, 10,\
    \ 12, 15, 17, 20]\n            compare(game, guess)\n            >> [0, 0, 0,\
    \ 0, 0, 0, 0, 1, 0]\n            \n            game = [1, 3, 6, 8, 10, 12, 15,\
    \ 17, 20]\n            guess = [1, 3, 6, 8, 10, 12, 15, 17, 21]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, 0, 0, 0, 0, 1, 1]\n            \n         \
    \   game = [1, 3, 6, 8, 10, 12, 15, 17, 20]\n            guess = [1, 3, 6, 8,\
    \ 10, 12, 15, 17, 22]\n            compare(game, guess)\n            >> [0, 0,\
    \ 0, 0, 0, 0, 0, 1, 2]\n            \n            game = [1, 3, 6, 8, 10, 12,\
    \ 15, 17, 20]\n            guess = [1, 3, 6, 8, 10, 12, 15, 17, 23]\n        \
    \    compare(game, guess)\n            >> [0, 0, 0, 0, 0, 0, 0, 1, 3]\n      \
    \      \n            game = [1, 3, 6, 8, 10, 12, 15, 17, 20]\n            guess\
    \ = [1, 3, 6, 8, 10, 12, 15, 17, 24]\n            compare(game, guess)\n     \
    \       >> [0, 0, 0, 0, 0, 0, 0, 1, 4]\n            \n            game = [1, 3,\
    \ 6, 8, 10, 12, 15, 17, 20]\n            guess = [1, 3, 6, 8, 10, 12, 15, 17,\
    \ 25]\n            compare(game, guess)\n            >> [0, 0, 0, 0, 0, 0, 0,\
    \ 1, 5]\n            \n            game = [1, 3, 6, 8, 10, 12, 15, 17, 20]\n \
    \           guess = [1, 3, 6, 8, 10, 12, 15, 17, 26]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, 0, 0, 0, 0, 1, 6]\n            \n         \
    \   game = [1, 3, 6, 8, 10, 12, 15, 17, 20]\n            guess = [1, 3, 6, 8,\
    \ 10, 12, 15, 17, 27]\n            compare(game, guess)\n            >> [0, 0,\
    \ 0, 0, 0, 0, 0, 1, 7]\n            \n            game = [1, 3, 6, 8, 10, 12,\
    \ 15, 17, 20]\n            guess = [1, 3, 6, 8, 10, 12, 15, 17, 28]\n        \
    \    compare(game, guess)\n            >> [0, 0, 0, 0, 0, 0, 0, 1, 8]\n      \
    \      \n            game = [1, 3, 6, 8, 10, 12, 15, 17, 20]\n            guess\
    \ = [1, 3, 6, 8, 10, 12, 15, 17, 29]\n            compare(game, guess)\n     \
    \       >> [0, 0, 0, 0, 0, 0, 0, 1, 9]\n            \n            game = [1, 3,\
    \ 6, 8, 10, 12, 15, 17, 20]\n            guess = [1, 3, 6, 8, 10, 12, 15, 17,\
    \ 30]\n            compare(game, guess)\n            >> [0, 0, 0, 0, 0, 0, 0,\
    \ 1, 10]\n            \n            game = [1, 3, 6, \ndef check(candidate):\n\
    \    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0,\
    \ 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0,\
    \ 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n  \
    \  assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n\
    \    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpctg_b92a.py\"\
    , line 16\n    game = [1, 3, 6, 8, 10, 12, 15, 17, 20]\nIndentationError: unexpected\
    \ indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [5, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, \ndef check(candidate):\n\
    \    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0,\
    \ 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0,\
    \ 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n  \
    \  assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n\
    \    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx0xfhvk5.py\"\
    , line 16\n    , 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, \n               ^\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [10, 5, 8, 7, 2, 3]\n            guess = [8, 7, 5, 3, 10, 2]\n      \
    \      \n            compare(game, guess)\n            \n            >>>[0, 0,\
    \ 2, 1, 1, 1]\n            \n            \"\"\"\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n\ndef check(candidate):\n   \
    \ assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert\
    \ candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n\
    \    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg4ul6rca.py\"\
    , line 16\n    game = [10, 5, 8, 7, 2, 3]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [4, 3, 6, 5, 7, 8, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,\
    \ 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,\
    \ 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,\
    \ 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,\
    \ 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,\
    \ 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,\
    \ 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,\
    \ 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,\
    \ 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,\
    \ 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,\
    \ 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,\
    \ 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,\
    \ 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,\
    \ 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,\
    \ 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,\
    \ 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,\
    \ 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,\
    \ 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,\
    \ 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,\
    \ 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, \ndef check(candidate):\n\
    \    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0,\
    \ 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0,\
    \ 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n  \
    \  assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n\
    \    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyr2cqujr.py\"\
    , line 16\n    , 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,\
    \ 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,\
    \ 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,\
    \ 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,\
    \ 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,\
    \ 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,\
    \ 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,\
    \ 8, 8, 8, 8, 8, \n               ^\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [10, 20, 30, 40, 50]\n            guess = [10, 20, 30, 40, 50]\n    \
    \        compare(game, guess)\n            \n            game = [10, 20, 30, 40,\
    \ 50]\n            guess = [10, 20, 30, 40, 50]\n            compare(game, guess)\n\
    \            \n            game = [10, 20, 30, 40, 50]\n            guess = [10,\
    \ 20, 30, 40, 50]\n            compare(game, guess)\n            \n          \
    \  game = [10, 20, 30, 40, 50]\n            guess = [10, 20, 30, 40, 50]\n   \
    \         compare(game, guess)\n            \n            game = [10, 20, 30,\
    \ 40, 50]\n            guess = [10, 20, 30, 40, 50]\n            compare(game,\
    \ guess)\n            \n            game = [10, 20, 30, 40, 50]\n            guess\
    \ = [10, 20, 30, 40, 50]\n            compare(game, guess)\n            \n   \
    \         game = [10, 20, 30, 40, 50]\n            guess = [10, 20, 30, 40, 50]\n\
    \            compare(game, guess)\n            \n            game = [10, 20, 30,\
    \ 40, 50]\n            guess = [10, 20, 30, 40, 50]\n            compare(game,\
    \ guess)\n            \n            game = [10, 20, 30, 40, 50]\n            guess\
    \ = [10, 20, 30, 40, 50]\n            compare(game, guess)\n            \n   \
    \         game = [10, 20, 30, 40, 50]\n            guess = [10, 20, 30, 40, 50]\n\
    \            compare(game, guess)\n            \n            game = [10, 20, 30,\
    \ 40, 50]\n            guess = [10, 20, 30, 40, 50]\n            compare(game,\
    \ guess)\n            \n            game = [10, 20, 30, 40, 50]\n            guess\
    \ = [10, 20, 30, 40, 50]\n            compare(game, guess)\n            \n   \
    \         game = [10, 20, 30, 40, 50]\n            guess = [10, 20, 30, 40, 50]\n\
    \            compare(game, guess)\n            \n            game = [10, 20, 30,\
    \ 40, 50]\n            guess = [10, 20, 30, 40, 50]\n            compare(game,\
    \ guess)\n            \n            game = [10, 20, 30, 40, 50]\n            guess\
    \ = [10, 20, 30, 40, 50]\n            compare(game, guess)\n            \n   \
    \         game = [10, 20, 30, 40, 50]\n            guess = [10, 20, 30, 40, 50]\n\
    \            compare(game, guess)\n            \n            game = [10, 20, 30,\
    \ 40, 50]\n            guess = [10, 20, 30, 40, 50]\n            compare(game,\
    \ guess)\n            \n            game\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp52pic6mc.py\"\
    , line 16\n    game = [10, 20, 30, 40, 50]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,51,53,55,57,59,61,63,65,67,69,71,73,75,77,79,81,83,85,87,89,91,93,95,97,99,101,103,105,107,109,111,113,115,117,119,121,123,125,127,129,131,133,135,137,139,141,143,145,147,149,151,153,155,157,159,161,163,165,167,169,171,173,175,177,179,181,183,185,187,189,191,193,195,197,199,201,203,205,207,209,211,213,215,217,219,221,223,225,227,229,231,233,235,237,239,241,243,245,247,249,251,253,255,257,259,261,263,265,267,269,271,273,275,277,279,281,283,285,287,289,291,293,295,297,299,301,303,305,307,309,311,313,315,317,319,321,323,325,327,329,331,333,335,337,339,341,343,345,347,349,351,353,355,357,359,361,363,365,367,369,371,373,375,377,379,381,383,385,387,389,391,393,395,397,399,401,403,405,407,409,411,413,415,417,419,421,423,425,427,429,431,433,435,437,439,441,443,445,447,449,451,453,455,457,459,461,463,465,467,469,471,473,475,477,479,481,483,485,487,489,491,493,495,497,499,501,503,505,507,509,511,513,515,517,519,521,523,\n\
    def check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2,\
    \ -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0,\
    \ 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2,\
    \ -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2,\
    \ 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpil0y_cq9.py\"\
    , line 16\n    7,519,521,523,\n               ^\nIndentationError: unexpected\
    \ indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [10, 15, 20, 25]\n            guess = [10, 15, 20, 25]\n            compare(game,\
    \ guess)\n            >> [0, 0, 2, 2]\n            \n            game = [10, 15,\
    \ 20, 25]\n            guess = [10, 15, 20, 25]\n            compare(game, guess)\n\
    \            >> [0, 0, 2, 2]\n            \n            game = [10, 15, 20, 25]\n\
    \            guess = [10, 15, 20, 25]\n            compare(game, guess)\n    \
    \        >> [0, 0, 2, 2]\n            \n            game = [10, 15, 20, 25]\n\
    \            guess = [10, 15, 20, 25]\n            compare(game, guess)\n    \
    \        >> [0, 0, 2, 2]\n            \n            game = [10, 15, 20, 25]\n\
    \            guess = [10, 15, 20, 25]\n            compare(game, guess)\n    \
    \        >> [0, 0, 2, 2]\n            \n            game = [10, 15, 20, 25]\n\
    \            guess = [10, 15, 20, 25]\n            compare(game, guess)\n    \
    \        >> [0, 0, 2, 2]\n            \n            game = [10, 15, 20, 25]\n\
    \            guess = [10, 15, 20, 25]\n            compare(game, guess)\n    \
    \        >> [0, 0, 2, 2]\n            \n            game = [10, 15, 20, 25]\n\
    \            guess = [10, 15, 20, 25]\n            compare(game, guess)\n    \
    \        >> [0, 0, 2, 2]\n            \n            game = [10, 15, 20, 25]\n\
    \            guess = [10, 15, 20, 25]\n            compare(game, guess)\n    \
    \        >> [0, 0, 2, 2]\n            \n            game = [10, 15, 20, 25]\n\
    \            guess = [10, 15, 20, 25]\n            compare(game, guess)\n    \
    \        >> [0, 0, 2, 2]\n            \n            game = [10, 15, 20, 25]\n\
    \            guess = [10, 15, 20, 25]\n            compare(game, guess)\n    \
    \        >> [0, 0, 2, 2]\n            \n            game = [10, 15, 20, 25]\n\
    \            guess = [10, 15, 20, 25]\n            compare(game, guess)\n    \
    \        >> [0, 0, 2, 2]\n            \n            game = [10, 15, 20, 25]\n\
    \            guess = [10, 15, 20, 25]\n            compare(game, guess)\n    \
    \        >> [0, 0, 2, 2]\n            \n            game = [10, 15, 20, 25]\n\
    \            guess = [10, 15, 20, 25]\n            compare(game, guess)\n    \
    \        >> [0, 0, 2, 2]\n            \n            game = [10, 15, 20, 25]\n\
    \            guess = [10, 15, 20, 25]\n            compare(game\ndef check(candidate):\n\
    \    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0,\
    \ 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0,\
    \ 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n  \
    \  assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n\
    \    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppi9jmbyi.py\"\
    , line 16\n    game = [10, 15, 20, 25]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [1, 5, 3, 7, 9]\n            guess = [1, 5, 3, 7, 9]\n            compare(game,\
    \ guess)\n            # returns [0, -1, 0, -1, 0]\n            \"\"\"\n    \"\"\
    \"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\ndef check(candidate):\n    assert candidate([1, 2,\
    \ 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps6sm9bk6.py\"\
    , line 16\n    game = [1, 5, 3, 7, 9]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [1,3,5,7,9]\n            guess = [1,3,5,7,9]\n            compare(game,\
    \ guess)\n            \n            game = [1,3,5,7,9]\n            guess = [1,3,5,7,10]\n\
    \            compare(game, guess)\n            \n            game = [1,3,5,7,9]\n\
    \            guess = [1,3,5,7,8]\n            compare(game, guess)\n         \
    \   \n            game = [1,3,5,7,9]\n            guess = [1,3,5,7,9]\n      \
    \      compare(game, guess)\n            \n            game = [1,3,5,7,9]\n  \
    \          guess = [1,3,5,7,10]\n            compare(game, guess)\n          \
    \  \n            game = [1,3,5,7,9]\n            guess = [1,3,5,7,8]\n       \
    \     compare(game, guess)\n            \n            game = [1,3,5,7,9]\n   \
    \         guess = [1,3,5,7,9]\n            compare(game, guess)\n            \n\
    \            game = [1,3,5,7,9]\n            guess = [1,3,5,7,10]\n          \
    \  compare(game, guess)\n            \n            game = [1,3,5,7,9]\n      \
    \      guess = [1,3,5,7,8]\n            compare(game, guess)\n            \n \
    \           game = [1,3,5,7,9]\n            guess = [1,3,5,7,9]\n            compare(game,\
    \ guess)\n            \n            game = [1,3,5,7,9]\n            guess = [1,3,5,7,10]\n\
    \            compare(game, guess)\n            \n            game = [1,3,5,7,9]\n\
    \            guess = [1,3,5,7,8]\n            compare(game, guess)\n         \
    \   \n            game = [1,3,5,7,9]\n            guess = [1,3,5,7,9]\n      \
    \      compare(game, guess)\n            \n            game = [1,3,5,7,9]\n  \
    \          guess = [1,3,5,7,10]\n            compare(game, guess)\n          \
    \  \n            game = [1,3,5,7,9]\n            guess = [1,3,5,7,8]\n       \
    \     compare(game, guess)\n            \n            game = [1,3,5,7,9]\n   \
    \         guess = [1,3,5,7,9]\n            compare(game, guess)\n            \n\
    \            game = [1,3,5,7,9]\n            guess = [1,3,5,7,10]\n          \
    \  compare(game, guess)\n            \n            game = [1,3,5,7,9]\n      \
    \      guess = [1,3,5,7,8]\n            compare(game, guess)\n            \n \
    \           game = [1,3,5,7,9]\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcslwy0ag.py\"\
    , line 16\n    game = [1,3,5,7,9]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [5, 3, 6, 1, 4, 2]\n            guess = [6, 4, 2, 5, 1, 3]\n        \
    \    compare(game, guess)\n            >> [5, 3, 6, 1, 4, 2]\n            \n \
    \           game = [5, 3, 6, 1, 4, 2]\n            guess = [6, 4, 2, 5, 1, 3]\n\
    \            compare(game, guess)\n            >> [5, 3, 6, 1, 4, 2]\n       \
    \     \n            game = [5, 3, 6, 1, 4, 2]\n            guess = [6, 4, 2, 5,\
    \ 1, 3]\n            compare(game, guess)\n            >> [5, 3, 6, 1, 4, 2]\n\
    \            \n            game = [5, 3, 6, 1, 4, 2]\n            guess = [6,\
    \ 4, 2, 5, 1, 3]\n            compare(game, guess)\n            >> [5, 3, 6, 1,\
    \ 4, 2]\n            \n            game = [5, 3, 6, 1, 4, 2]\n            guess\
    \ = [6, 4, 2, 5, 1, 3]\n            compare(game, guess)\n            >> [5, 3,\
    \ 6, 1, 4, 2]\n            \n            game = [5, 3, 6, 1, 4, 2]\n         \
    \   guess = [6, 4, 2, 5, 1, 3]\n            compare(game, guess)\n           \
    \ >> [5, 3, 6, 1, 4, 2]\n            \n            game = [5, 3, 6, 1, 4, 2]\n\
    \            guess = [6, 4, 2, 5, 1, 3]\n            compare(game, guess)\n  \
    \          >> [5, 3, 6, 1, 4, 2]\n            \n            game = [5, 3, 6, 1,\
    \ 4, 2]\n            guess = [6, 4, 2, 5, 1, 3]\n            compare(game, guess)\n\
    \            >> [5, 3, 6, 1, 4, 2]\n            \n            game = [5, 3, 6,\
    \ 1, 4, 2]\n            guess = [6, 4, 2, 5, 1, 3]\n            compare(game,\
    \ guess)\n            >> [5, 3, 6, 1, 4, 2]\n            \n            game =\
    \ [5, 3, 6, 1, 4, 2]\n            guess = [6, 4, 2, 5, 1, 3]\n            compare(game,\
    \ guess)\n            >> [5, 3, 6, 1, 4, 2]\n            \n            game =\
    \ [5, 3, 6, 1, 4, 2]\n            guess = [6, 4, 2, 5, 1, 3]\n            compare(game,\
    \ guess)\n            >> [5, 3, 6, 1, 4, 2]\n            \n            game =\
    \ [5, 3, 6, 1, 4, 2]\n            guess = [6, 4, 2, 5, 1, 3]\n            compare(game,\
    \ guess)\n            >> [5, 3, 6, 1, 4, 2]\n            \n            game =\
    \ [5, 3, 6, 1, 4, 2]\n            guess = [6, 4, 2, 5, 1, 3]\n            compare(game,\
    \ guess)\n            >> [5, \ndef check(candidate):\n    assert candidate([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplbyzk1wo.py\"\
    , line 16\n    game = [5, 3, 6, 1, 4, 2]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [1, 5, 3, 7, 9, 2, 6]\n            guess = [1, 5, 3, 7, 9, 2, 6]\n  \
    \          compare(game, guess)\n            > [0, 0, 0, 0, 0, 0]\n          \
    \  \n            game = [1, 5, 3, 7, 9, 2, 6]\n            guess = [1, 5, 3, 7,\
    \ 9, 2, 7]\n            compare(game, guess)\n            > [0, 0, 0, 0, 0, 0]\n\
    \            \n            game = [1, 5, 3, 7, 9, 2, 6]\n            guess = [1,\
    \ 5, 3, 7, 9, 2, 5]\n            compare(game, guess)\n            > [0, 0, 0,\
    \ 0, 0, 0]\n            \n            game = [1, 5, 3, 7, 9, 2, 6]\n         \
    \   guess = [1, 5, 3, 7, 9, 2, 6]\n            compare(game, guess)\n        \
    \    > [0, 0, 0, 0, 0, 0]\n            \n            game = [1, 5, 3, 7, 9, 2,\
    \ 6]\n            guess = [1, 5, 3, 7, 9, 2, 7]\n            compare(game, guess)\n\
    \            > [0, 0, 0, 0, 0, 0]\n            \n            game = [1, 5, 3,\
    \ 7, 9, 2, 6]\n            guess = [1, 5, 3, 7, 9, 2, 5]\n            compare(game,\
    \ guess)\n            > [0, 0, 0, 0, 0, 0]\n            \n            game = [1,\
    \ 5, 3, 7, 9, 2, 6]\n            guess = [1, 5, 3, 7, 9, 2, 6]\n            compare(game,\
    \ guess)\n            > [0, 0, 0, 0, 0, 0]\n            \n            game = [1,\
    \ 5, 3, 7, 9, 2, 6]\n            guess = [1, 5, 3, 7, 9, 2, 7]\n            compare(game,\
    \ guess)\n            > [0, 0, 0, 0, 0, 0]\n            \n            game = [1,\
    \ 5, 3, 7, 9, 2, 6]\n            guess = [1, 5, 3, 7, 9, 2, 5]\n            compare(game,\
    \ guess)\n            > [0, 0, 0, 0, 0, 0]\n            \n            game = [1,\
    \ 5, 3, 7, 9, 2, 6]\n            guess = [1, 5, 3, 7, 9, 2, 6]\n            compare(game,\
    \ guess)\n            > [0, 0, 0, 0, 0, 0]\n            \n            game = [1,\
    \ 5, 3, 7, 9, 2, 6]\n            guess = [1, 5, 3, 7, 9, 2, 7]\n            compare(game,\
    \ guess)\n            > [0, 0, 0, 0, 0, 0]\n            \n            game = [1,\
    \ 5, 3, 7, 9, 2, 6]\n            guess = [1, 5, 3, 7, 9, 2, 5]\n            compare(game,\
    \ guess)\n            > [0, 0, 0, 0, 0, 0]\n            \n            game = [1,\
    \ 5, 3, 7, 9, 2, 6]\n            guess = [1, 5, 3, 7, 9, 2, 6]\n            compare(game,\
    \ guess)\n            > [0, 0, 0, 0, 0, 0]\n            \n            game = [1,\
    \ 5, 3, 7, 9, 2, 6]\n            guess = [1, 5, 3, 7, \ndef check(candidate):\n\
    \    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0,\
    \ 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0,\
    \ 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n  \
    \  assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n\
    \    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp90kzs05i.py\"\
    , line 16\n    game = [1, 5, 3, 7, 9, 2, 6]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [1, 5, 3, 7, 2]\n            guess = [1, 5, 3, 7, 2]\n            compare(game,\
    \ guess)\n            \n            game = [1, 5, 3, 7, 2]\n            guess\
    \ = [1, 5, 3, 7, 3]\n            compare(game, guess)\n            \n        \
    \    game = [1, 5, 3, 7, 2]\n            guess = [1, 5, 3, 7, 4]\n           \
    \ compare(game, guess)\n            \n            game = [1, 5, 3, 7, 2]\n   \
    \         guess = [1, 5, 3, 7, 5]\n            compare(game, guess)\n        \
    \    \n            game = [1, 5, 3, 7, 2]\n            guess = [1, 5, 3, 7, 6]\n\
    \            compare(game, guess)\n            \n            game = [1, 5, 3,\
    \ 7, 2]\n            guess = [1, 5, 3, 7, 7]\n            compare(game, guess)\n\
    \            \n            game = [1, 5, 3, 7, 2]\n            guess = [1, 5,\
    \ 3, 7, 8]\n            compare(game, guess)\n            \n            game =\
    \ [1, 5, 3, 7, 2]\n            guess = [1, 5, 3, 7, 9]\n            compare(game,\
    \ guess)\n            \n            game = [1, 5, 3, 7, 2]\n            guess\
    \ = [1, 5, 3, 7, 10]\n            compare(game, guess)\n            \n       \
    \     game = [1, 5, 3, 7, 2]\n            guess = [1, 5, 3, 7, 11]\n         \
    \   compare(game, guess)\n            \n            game = [1, 5, 3, 7, 2]\n \
    \           guess = [1, 5, 3, 7, 12]\n            compare(game, guess)\n     \
    \       \n            game = [1, 5, 3, 7, 2]\n            guess = [1, 5, 3, 7,\
    \ 13]\n            compare(game, guess)\n            \n            game = [1,\
    \ 5, 3, 7, 2]\n            guess = [1, 5, 3, 7, 14]\n            compare(game,\
    \ guess)\n            \n            game = [1, 5, 3, 7, 2]\n            guess\
    \ = [1, 5, 3, 7, 15]\n            compare(game, guess)\n            \n       \
    \     game = [1, 5, 3, 7, 2]\n            guess = [1, 5, 3, 7, 16]\n         \
    \   compare(game, guess)\n            \n            game = [1, 5, 3, 7, 2]\n \
    \           guess = [1, 5, 3, 7, 17]\n            compare(game, guess)\n     \
    \       \n            game = [1, 5, 3, 7, 2]\n            guess = [1, 5, 3, 7,\
    \ 18]\n            compare(game, guess)\n            \n            game = [1,\
    \ 5, 3, 7, 2]\n            guess = [1, 5, 3, 7, 19]\n            compare(game,\
    \ guess)\n            \ndef check(candidate):\n    assert candidate([1, 2, 3,\
    \ 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwd4i9m9l.py\"\
    , line 16\n    game = [1, 5, 3, 7, 2]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ scores = [10, 20, 30, 40, 50]\n            guesses = [10, 20, 30, 40, 50]\n\
    \            compare(scores, guesses) == [10, 0, 0, 10, 0]\n            compare(scores,\
    \ guesses) == [10, 0, 0, 10, 0]\n            compare(scores, guesses) == [10,\
    \ 0, 0, 10, 0]\n            compare(scores, guesses) == [10, 0, 0, 10, 0]\n  \
    \          compare(scores, guesses) == [10, 0, 0, 10, 0]\n            compare(scores,\
    \ guesses) == [10, 0, 0, 10, 0]\n            compare(scores, guesses) == [10,\
    \ 0, 0, 10, 0]\n            compare(scores, guesses) == [10, 0, 0, 10, 0]\n  \
    \          compare(scores, guesses) == [10, 0, 0, 10, 0]\n            compare(scores,\
    \ guesses) == [10, 0, 0, 10, 0]\n            compare(scores, guesses) == [10,\
    \ 0, 0, 10, 0]\n            compare(scores, guesses) == [10, 0, 0, 10, 0]\n  \
    \          compare(scores, guesses) == [10, 0, 0, 10, 0]\n            compare(scores,\
    \ guesses) == [10, 0, 0, 10, 0]\n            compare(scores, guesses) == [10,\
    \ 0, 0, 10, 0]\n            compare(scores, guesses) == [10, 0, 0, 10, 0]\n  \
    \          compare(scores, guesses) == [10, 0, 0, 10, 0]\n            compare(scores,\
    \ guesses) == [10, 0, 0, 10, 0]\n            compare(scores, guesses) == [10,\
    \ 0, 0, 10, 0]\n            compare(scores, guesses) == [10, 0, 0, 10, 0]\n  \
    \          compare(scores, guesses) == [10, 0, 0, 10, 0]\n            compare(scores,\
    \ guesses) == [10, 0, 0, 10, 0]\n            compare(scores, guesses) == [10,\
    \ 0, 0, 10, 0]\n            compare(scores, guesses) == [10, 0, 0, 10, 0]\n  \
    \          compare(scores, guesses) == [10, 0, 0, 10, 0]\n            compare(scores,\
    \ guesses) == [10, 0, 0, 10, 0]\n            compare(scores, guesses) == [10,\
    \ 0, 0, 10, 0]\n            compare(scores, guesses) == [10, 0, 0, 10, 0]\n  \
    \          compare(scores, guesses) == [10, 0, 0, 10, 0]\n            compare(scores,\
    \ guesses) == [10, 0, 0, 10, 0]\n            compare(scores, guesses) == [10,\
    \ 0, 0, 10, 0]\n            compare(scores, guesses) == [10, 0, 0, 10, 0]\n  \
    \          compare(scores, guesses) == [10, 0, 0, 10, 0]\n            compare(scores,\
    \ guesses) == [10, 0, 0, 10, 0]\n            compare(scores, guesses) == [10,\
    \ 0, 0, 10, 0]\n            compare(scores, guesses) == [10, 0, 0, 10, 0]\n  \
    \          compare(scores, guesses) == [10, 0, 0, 10, 0]\n            compare(scores,\
    \ guesses) == [10, 0, 0, \ndef check(candidate):\n    assert candidate([1, 2,\
    \ 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmgguo9j_.py\"\
    , line 16\n    scores = [10, 20, 30, 40, 50]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [1, 5, 3, 7, 9, 2]\n            guess = [1, 5, 3, 7, 9, 2]\n        \
    \    compare(game, guess)\n            >> [0, 0, 0, 0, 0]\n            \n    \
    \        game = [1, 5, 3, 7, 9, 2]\n            guess = [1, 5, 3, 7, 9, 3]\n \
    \           compare(game, guess)\n            >> [0, 0, 0, 0, 0]\n           \
    \ \n            game = [1, 5, 3, 7, 9, 2]\n            guess = [1, 5, 3, 7, 9,\
    \ 4]\n            compare(game, guess)\n            >> [0, 0, 0, 0, 0]\n     \
    \       \n            game = [1, 5, 3, 7, 9, 2]\n            guess = [1, 5, 3,\
    \ 7, 9, 5]\n            compare(game, guess)\n            >> [0, 0, 0, 0, 0]\n\
    \            \n            game = [1, 5, 3, 7, 9, 2]\n            guess = [1,\
    \ 5, 3, 7, 9, 6]\n            compare(game, guess)\n            >> [0, 0, 0, 0,\
    \ 0]\n            \n            game = [1, 5, 3, 7, 9, 2]\n            guess =\
    \ [1, 5, 3, 7, 9, 7]\n            compare(game, guess)\n            >> [0, 0,\
    \ 0, 0, 0]\n            \n            game = [1, 5, 3, 7, 9, 2]\n            guess\
    \ = [1, 5, 3, 7, 9, 8]\n            compare(game, guess)\n            >> [0, 0,\
    \ 0, 0, 0]\n            \n            game = [1, 5, 3, 7, 9, 2]\n            guess\
    \ = [1, 5, 3, 7, 9, 9]\n            compare(game, guess)\n            >> [0, 0,\
    \ 0, 0, 0]\n            \n            game = [1, 5, 3, 7, 9, 2]\n            guess\
    \ = [1, 5, 3, 7, 9, 10]\n            compare(game, guess)\n            >> [0,\
    \ 0, 0, 0, 0]\n            \n            game = [1, 5, 3, 7, 9, 2]\n         \
    \   guess = [1, 5, 3, 7, 9, 11]\n            compare(game, guess)\n          \
    \  >> [0, 0, 0, 0, 0]\n            \n            game = [1, 5, 3, 7, 9, 2]\n \
    \           guess = [1, 5, 3, 7, 9, 12]\n            compare(game, guess)\n  \
    \          >> [0, 0, 0, 0, 0]\n            \n            game = [1, 5, 3, 7, 9,\
    \ 2]\n            guess = [1, 5, 3, 7, 9, 13]\n            compare(game, guess)\n\
    \            >> [0, 0, 0, 0, 0]\n            \n            game = [1, 5, 3, 7,\
    \ 9, 2]\n            guess = [1, 5, 3, 7, 9, 14]\n            compare(game, guess)\n\
    \            >> [0, 0, 0, 0, 0]\n            \n            game = [1, 5, 3, 7,\
    \ 9, 2]\n            guess = [1, 5, 3, 7, 9, 15]\n            compare(game, guess)\n\
    \            >> [0, 0, 0, 0, 0]\n            \n            game = [\ndef check(candidate):\n\
    \    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0,\
    \ 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0,\
    \ 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n  \
    \  assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n\
    \    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfor455nd.py\"\
    , line 16\n    game = [1, 5, 3, 7, 9, 2]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, \ndef check(candidate):\n\
    \    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0,\
    \ 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0,\
    \ 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n  \
    \  assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n\
    \    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4__smas5.py\"\
    , line 16\n    , 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, \n  \
    \             ^\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n            guess = [10, 20, 30,\
    \ 40, 50, 60, 70, 80, 90]\n            compare(game, guess)\n            >> [0,\
    \ 0, 0, 0, 0, 0, 0, 0]\n            \n            game = [10, 20, 30, 40, 50,\
    \ 60, 70, 80, 90]\n            guess = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n\
    \            compare(game, guess)\n            >> [0, 0, 0, 0, 0, 0, 0, 0]\n \
    \           \n            game = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n      \
    \      guess = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, 0, 0, 0, 0, 0]\n            \n            game\
    \ = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n            guess = [10, 20, 30, 40,\
    \ 50, 60, 70, 80, 90]\n            compare(game, guess)\n            >> [0, 0,\
    \ 0, 0, 0, 0, 0, 0]\n            \n            game = [10, 20, 30, 40, 50, 60,\
    \ 70, 80, 90]\n            guess = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n    \
    \        compare(game, guess)\n            >> [0, 0, 0, 0, 0, 0, 0, 0]\n     \
    \       \n            game = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n          \
    \  guess = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n            compare(game, guess)\n\
    \            >> [0, 0, 0, 0, 0, 0, 0, 0]\n            \n            game = [10,\
    \ 20, 30, 40, 50, 60, 70, 80, 90]\n            guess = [10, 20, 30, 40, 50, 60,\
    \ 70, 80, 90]\n            compare(game, guess)\n            >> [0, 0, 0, 0, 0,\
    \ 0, 0, 0]\n            \n            game = [10, 20, 30, 40, 50, 60, 70, 80,\
    \ 90]\n            guess = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, 0, 0, 0, 0, 0]\n            \n            game\
    \ = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n            guess = [10, 20, 30, 40,\
    \ 50, 60, 70, 80, 90]\n            compare(game, guess)\n            >> [0, 0,\
    \ 0, 0, 0, 0, 0, 0]\n            \n            game = [10, 20, 30, 40, 50, 60,\
    \ 70, 80, 90]\n            guess = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n    \
    \        compare(game, guess)\n            >> [0, 0, 0, 0, 0, 0, 0, 0]\n     \
    \       \n            game = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n          \
    \  guess = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n            compare(game, guess)\n\
    \            >> [0, 0, 0, 0, 0, 0, 0, 0]\n            \n            game = [10,\
    \ 20, 30, 40, 50, 60, 70, 80, 90]\n            guess = [\ndef check(candidate):\n\
    \    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0,\
    \ 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0,\
    \ 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n  \
    \  assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n\
    \    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp0qcvsod.py\"\
    , line 16\n    game = [10, 20, 30, 40, 50, 60, 70, 80, 90]\nIndentationError:\
    \ unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [5, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, \ndef check(candidate):\n\
    \    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0,\
    \ 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0,\
    \ 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n  \
    \  assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n\
    \    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpr1l8_i17.py\"\
    , line 16\n    , 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, \n               ^\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [1,5,2,4,3]\n            guess = [2,4,3,5,1]\n            compare(game,\
    \ guess)\n            \n            game = [1,5,2,4,3]\n            guess = [2,4,3,5,1]\n\
    \            compare(game, guess)\n            \n            game = [1,5,2,4,3]\n\
    \            guess = [2,4,3,5,1]\n            compare(game, guess)\n         \
    \   \n            game = [1,5,2,4,3]\n            guess = [2,4,3,5,1]\n      \
    \      compare(game, guess)\n            \n            game = [1,5,2,4,3]\n  \
    \          guess = [2,4,3,5,1]\n            compare(game, guess)\n           \
    \ \n            game = [1,5,2,4,3]\n            guess = [2,4,3,5,1]\n        \
    \    compare(game, guess)\n            \n            game = [1,5,2,4,3]\n    \
    \        guess = [2,4,3,5,1]\n            compare(game, guess)\n            \n\
    \            game = [1,5,2,4,3]\n            guess = [2,4,3,5,1]\n           \
    \ compare(game, guess)\n            \n            game = [1,5,2,4,3]\n       \
    \     guess = [2,4,3,5,1]\n            compare(game, guess)\n            \n  \
    \          game = [1,5,2,4,3]\n            guess = [2,4,3,5,1]\n            compare(game,\
    \ guess)\n            \n            game = [1,5,2,4,3]\n            guess = [2,4,3,5,1]\n\
    \            compare(game, guess)\n            \n            game = [1,5,2,4,3]\n\
    \            guess = [2,4,3,5,1]\n            compare(game, guess)\n         \
    \   \n            game = [1,5,2,4,3]\n            guess = [2,4,3,5,1]\n      \
    \      compare(game, guess)\n            \n            game = [1,5,2,4,3]\n  \
    \          guess = [2,4,3,5,1]\n            compare(game, guess)\n           \
    \ \n            game = [1,5,2,4,3]\n            guess = [2,4,3,5,1]\n        \
    \    compare(game, guess)\n            \n            game = [1,5,2,4,3]\n    \
    \        guess = [2,4,3,5,1]\n            compare(game, guess)\n            \n\
    \            game = [1,5,2,4,3]\n            guess = [2,4,3,5,1]\n           \
    \ compare(game, guess)\n            \n            game = [1,5,2,4,3]\n       \
    \     guess = [2,4,3,5,1]\n            compare(game, guess)\n            \n  \
    \          game = [1,5,2,4,3]\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpr7if72qa.py\"\
    , line 16\n    game = [1,5,2,4,3]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [1, 3, 5]\n            guess = [1, 3, 5]\n            compare(game, guess)\n\
    \            >> [0, 0, 0]\n            \n            game = [1, 3, 5]\n      \
    \      guess = [1, 3, 6]\n            compare(game, guess)\n            >> [1,\
    \ 1, 1]\n            \n            game = [1, 3, 5]\n            guess = [1, 3,\
    \ 6]\n            compare(game, guess)\n            >> [1, 1, 1]\n           \
    \ \n            game = [1, 3, 5]\n            guess = [1, 3, 7]\n            compare(game,\
    \ guess)\n            >> [1, 1, 1]\n            \n            game = [1, 3, 5]\n\
    \            guess = [1, 3, 7]\n            compare(game, guess)\n           \
    \ >> [1, 1, 1]\n            \n            game = [1, 3, 5]\n            guess\
    \ = [1, 3, 8]\n            compare(game, guess)\n            >> [1, 1, 1]\n  \
    \          \n            game = [1, 3, 5]\n            guess = [1, 3, 8]\n   \
    \         compare(game, guess)\n            >> [1, 1, 1]\n            \n     \
    \       game = [1, 3, 5]\n            guess = [1, 3, 9]\n            compare(game,\
    \ guess)\n            >> [1, 1, 1]\n            \n            game = [1, 3, 5]\n\
    \            guess = [1, 3, 9]\n            compare(game, guess)\n           \
    \ >> [1, 1, 1]\n            \n            game = [1, 3, 5]\n            guess\
    \ = [1, 3, 10]\n            compare(game, guess)\n            >> [1, 1, 1]\n \
    \           \n            game = [1, 3, 5]\n            guess = [1, 3, 10]\n \
    \           compare(game, guess)\n            >> [1, 1, 1]\n            \n   \
    \         game = [1, 3, 5]\n            guess = [1, 3, 11]\n            compare(game,\
    \ guess)\n            >> [1, 1, 1]\n            \n            game = [1, 3, 5]\n\
    \            guess = [1, 3, 11]\n            compare(game, guess)\n          \
    \  >> [1, 1, 1]\n            \n            game = [1, 3, 5]\n            guess\
    \ = [1, 3, 12]\n            compare(game, guess)\n            >> [1, 1, 1]\n \
    \           \n            game = [1, 3, 5]\n            guess = [1, 3, 12]\n \
    \           compare(game, guess)\n            >> [1, 1, 1]\n            \n   \
    \         game = [1, 3, 5]\n            guess = [1, 3, 13]\n            compare(game,\
    \ guess)\n            >> [1, 1, 1]\n            \n            game = [1, 3, 5]\n\
    \            guess = [1, 3, 13]\n            compare(game, guess)\n          \
    \  >> [1, 1, \ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 1],\
    \ [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0, 0, 0, 0,\
    \ 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1, 2,\
    \ 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2, 3,\
    \ 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0h8ripz3.py\"\
    , line 16\n    game = [1, 3, 5]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [1, 4, 2, 3]\n            guess = [4, 2, 5, 3]\n            compare(game,\
    \ guess)\n            \n            game = [1, 4, 2, 3]\n            guess = [4,\
    \ 2, 5, 4]\n            compare(game, guess)\n            \n            game =\
    \ [1, 4, 2, 3]\n            guess = [4, 2, 5, 5]\n            compare(game, guess)\n\
    \            \n            game = [1, 4, 2, 3]\n            guess = [4, 2, 5,\
    \ 6]\n            compare(game, guess)\n            \n            game = [1, 4,\
    \ 2, 3]\n            guess = [4, 2, 5, 7]\n            compare(game, guess)\n\
    \            \n            game = [1, 4, 2, 3]\n            guess = [4, 2, 5,\
    \ 8]\n            compare(game, guess)\n            \n            game = [1, 4,\
    \ 2, 3]\n            guess = [4, 2, 5, 9]\n            compare(game, guess)\n\
    \            \n            game = [1, 4, 2, 3]\n            guess = [4, 2, 5,\
    \ 10]\n            compare(game, guess)\n            \n            game = [1,\
    \ 4, 2, 3]\n            guess = [4, 2, 5, 11]\n            compare(game, guess)\n\
    \            \n            game = [1, 4, 2, 3]\n            guess = [4, 2, 5,\
    \ 12]\n            compare(game, guess)\n            \n            game = [1,\
    \ 4, 2, 3]\n            guess = [4, 2, 5, 13]\n            compare(game, guess)\n\
    \            \n            game = [1, 4, 2, 3]\n            guess = [4, 2, 5,\
    \ 14]\n            compare(game, guess)\n            \n            game = [1,\
    \ 4, 2, 3]\n            guess = [4, 2, 5, 15]\n            compare(game, guess)\n\
    \            \n            game = [1, 4, 2, 3]\n            guess = [4, 2, 5,\
    \ 16]\n            compare(game, guess)\n            \n            game = [1,\
    \ 4, 2, 3]\n            guess = [4, 2, 5, 17]\n            compare(game, guess)\n\
    \            \n            game = [1, 4, 2, 3]\n            guess = [4, 2, 5,\
    \ 18]\n            compare(game, guess)\n            \n            game = [1,\
    \ 4, 2, 3]\n            guess = [4, 2, 5, 19]\n            compare(game, guess)\n\
    \            \n            game = [1, 4, 2, 3]\n            guess = [4, 2, 5,\
    \ 20]\n            compare(game, guess)\n            \n            game = [1,\
    \ 4, 2, 3]\n            guess = [4, 2, 5, 21]\n            compare(game, guess)\n\
    \            \n            game = [1, 4, 2, 3]\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n \
    \   assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0,\
    \ 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprnnvdibg.py\"\
    , line 16\n    game = [1, 4, 2, 3]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, \ndef check(candidate):\n\
    \    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0,\
    \ 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0,\
    \ 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n  \
    \  assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n\
    \    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplqlokgbt.py\"\
    , line 16\n    , 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, \n  \
    \             ^\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ scores = [10, 20, 30, 40, 50]\n            guesses = [10, 20, 30, 40, 50]\n\
    \            compare(scores, guesses) == [10, 0, 0, 10, 0]\n            \n   \
    \         scores = [10, 20, 30, 40, 50]\n            guesses = [10, 20, 30, 40,\
    \ 50]\n            compare(scores, guesses) == [10, 0, 0, 10, 0]\n           \
    \ \n            scores = [10, 20, 30, 40, 50]\n            guesses = [10, 20,\
    \ 30, 40, 50]\n            compare(scores, guesses) == [10, 0, 0, 10, 0]\n   \
    \         \n            scores = [10, 20, 30, 40, 50]\n            guesses = [10,\
    \ 20, 30, 40, 50]\n            compare(scores, guesses) == [10, 0, 0, 10, 0]\n\
    \            \n            scores = [10, 20, 30, 40, 50]\n            guesses\
    \ = [10, 20, 30, 40, 50]\n            compare(scores, guesses) == [10, 0, 0, 10,\
    \ 0]\n            \n            scores = [10, 20, 30, 40, 50]\n            guesses\
    \ = [10, 20, 30, 40, 50]\n            compare(scores, guesses) == [10, 0, 0, 10,\
    \ 0]\n            \n            scores = [10, 20, 30, 40, 50]\n            guesses\
    \ = [10, 20, 30, 40, 50]\n            compare(scores, guesses) == [10, 0, 0, 10,\
    \ 0]\n            \n            scores = [10, 20, 30, 40, 50]\n            guesses\
    \ = [10, 20, 30, 40, 50]\n            compare(scores, guesses) == [10, 0, 0, 10,\
    \ 0]\n            \n            scores = [10, 20, 30, 40, 50]\n            guesses\
    \ = [10, 20, 30, 40, 50]\n            compare(scores, guesses) == [10, 0, 0, 10,\
    \ 0]\n            \n            scores = [10, 20, 30, 40, 50]\n            guesses\
    \ = [10, 20, 30, 40, 50]\n            compare(scores, guesses) == [10, 0, 0, 10,\
    \ 0]\n            \n            scores = [10, 20, 30, 40, 50]\n            guesses\
    \ = [10, 20, 30, 40, 50]\n            compare(scores, guesses) == [10, 0, 0, 10,\
    \ 0]\n            \n            scores = [10, 20, 30, 40, 50]\n            guesses\
    \ = [10, 20, 30, 40, 50]\n            compare(scores, guesses) == [10, 0, 0, 10,\
    \ 0]\n            \n            scores = [10, 20, 30, 40, 50]\n            guesses\
    \ = [10, 20, 30, 40, 50]\n            compare(scores, guesses) == [10, 0, 0, 10,\
    \ 0]\n            \n            scores = [10, 20, 30, 40, 50]\n            guesses\
    \ = [10, 20, 30, 40, 50]\n            compare(scores, guesses) == [10, 0, 0, 10,\
    \ 0]\n            \n            scores = [10, 20, 30, 40, 5\ndef check(candidate):\n\
    \    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0,\
    \ 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0,\
    \ 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n  \
    \  assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n\
    \    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps6fwftpw.py\"\
    , line 16\n    scores = [10, 20, 30, 40, 50]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [1, 3, 2]\n            guess = [1, 3, 2]\n            compare(game, guess)\n\
    \            \n            game = [1, 3, 2]\n            guess = [1, 3, 3]\n \
    \           compare(game, guess)\n            \n            game = [1, 3, 2]\n\
    \            guess = [1, 3, 1]\n            compare(game, guess)\n           \
    \ \n            game = [1, 3, 2]\n            guess = [1, 3, 0]\n            compare(game,\
    \ guess)\n            \n            game = [1, 3, 2]\n            guess = [1,\
    \ 3, -1]\n            compare(game, guess)\n            \n            game = [1,\
    \ 3, 2]\n            guess = [1, 3, -2]\n            compare(game, guess)\n  \
    \          \n            game = [1, 3, 2]\n            guess = [1, 3, -3]\n  \
    \          compare(game, guess)\n            \n            game = [1, 3, 2]\n\
    \            guess = [1, 3, -4]\n            compare(game, guess)\n          \
    \  \n            game = [1, 3, 2]\n            guess = [1, 3, -5]\n          \
    \  compare(game, guess)\n            \n            game = [1, 3, 2]\n        \
    \    guess = [1, 3, -4]\n            compare(game, guess)\n            \n    \
    \        game = [1, 3, 2]\n            guess = [1, 3, -3]\n            compare(game,\
    \ guess)\n            \n            game = [1, 3, 2]\n            guess = [1,\
    \ 3, -2]\n            compare(game, guess)\n            \n            game = [1,\
    \ 3, 2]\n            guess = [1, 3, -1]\n            compare(game, guess)\n  \
    \          \n            game = [1, 3, 2]\n            guess = [1, 3, 0]\n   \
    \         compare(game, guess)\n            \n            game = [1, 3, 2]\n \
    \           guess = [1, 3, 1]\n            compare(game, guess)\n            \n\
    \            game = [1, 3, 2]\n            guess = [1, 3, 2]\n            compare(game,\
    \ guess)\n            \n            game = [1, 3, 2]\n            guess = [1,\
    \ 3, 3]\n            compare(game, guess)\n            \n            game = [1,\
    \ 3, 2]\n            guess = [1, 3, 4]\n            compare(game, guess)\n   \
    \         \n            game = [1, 3, 2]\n            guess = [1, 3, 5]\n    \
    \        compare(game, guess)\n            \n            game = [1, 3, 2]\n  \
    \          guess = [1, 3, 6]\n            compare(game, guess)\n            \n\
    \            game = [1, 3, 2]\n            guess = [1, 3, 7]\n            compare(game,\
    \ guess)\n            \n            game = [\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n \
    \   assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0,\
    \ 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5yt8hxh7.py\"\
    , line 16\n    game = [1, 3, 2]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [1, 3, 5]\n            guess = [1, 3, 5]\n            compare(game, guess)\n\
    \            # returns [0, 1, 0]\n            \n            game = [1, 3, 5]\n\
    \            guess = [1, 3, 6]\n            compare(game, guess)\n           \
    \ # returns [0, 1, 2]\n            \n            game = [1, 3, 5]\n          \
    \  guess = [1, 3, 6]\n            compare(game, guess)\n            # returns\
    \ [0, 1, 2]\n            \n            game = [1, 3, 5]\n            guess = [1,\
    \ 3, 7]\n            compare(game, guess)\n            # returns [0, 1, 2]\n \
    \           \n            game = [1, 3, 5]\n            guess = [1, 3, 7]\n  \
    \          compare(game, guess)\n            # returns [0, 1, 2]\n           \
    \ \n            game = [1, 3, 5]\n            guess = [1, 3, 7]\n            compare(game,\
    \ guess)\n            # returns [0, 1, 2]\n            \n            game = [1,\
    \ 3, 5]\n            guess = [1, 3, 7]\n            compare(game, guess)\n   \
    \         # returns [0, 1, 2]\n            \n            game = [1, 3, 5]\n  \
    \          guess = [1, 3, 7]\n            compare(game, guess)\n            #\
    \ returns [0, 1, 2]\n            \n            game = [1, 3, 5]\n            guess\
    \ = [1, 3, 7]\n            compare(game, guess)\n            # returns [0, 1,\
    \ 2]\n            \n            game = [1, 3, 5]\n            guess = [1, 3, 7]\n\
    \            compare(game, guess)\n            # returns [0, 1, 2]\n         \
    \   \n            game = [1, 3, 5]\n            guess = [1, 3, 7]\n          \
    \  compare(game, guess)\n            # returns [0, 1, 2]\n            \n     \
    \       game = [1, 3, 5]\n            guess = [1, 3, 7]\n            compare(game,\
    \ guess)\n            # returns [0, 1, 2]\n            \n            game = [1,\
    \ 3, 5]\n            guess = [1, 3, 7]\n            compare(game, guess)\n   \
    \         # returns [0, 1, 2]\n            \n            game = [1, 3, 5]\n  \
    \          guess = [1, 3, 7]\n            compare(game, guess)\n            #\
    \ returns [0, 1, 2]\n            \n            game = [1, 3, 5]\n            guess\
    \ = [1, 3, 7]\n            compare(game, guess)\n            # returns [0, 1,\
    \ 2]\n            \n            game = [1, 3, 5]\n            guess = [1, 3, 7]\n\
    \            compare(game, guess)\n            # returns [0, 1, 2]\n         \
    \   \n            game = [1, 3, 5]\n            guess = [1, 3, 7]\n          \
    \  compare(game, guess)\n            # returns [0, 1, 2]\n            \n     \
    \       game = [1, 3, 5]\n            guess = [1, 3, 7]\n            compare(game,\
    \ \ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3,\
    \ 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0,\
    \ 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1,\
    \ -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) ==\
    \ [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfi8j921x.py\"\
    , line 16\n    game = [1, 3, 5]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [10, 20, 30, 40, 50]\n            guess = [10, 20, 30, 40, 50]\n    \
    \        compare(game, guess)\n            \n            game = [10, 20, 30, 40,\
    \ 50]\n            guess = [20, 30, 40, 50, 60]\n            compare(game, guess)\n\
    \            \n            game = [10, 20, 30, 40, 50]\n            guess = [10,\
    \ 20, 30, 40, 50]\n            compare(game, guess)\n            \n          \
    \  game = [10, 20, 30, 40, 50]\n            guess = [10, 20, 30, 40, 50]\n   \
    \         compare(game, guess)\n            \n            game = [10, 20, 30,\
    \ 40, 50]\n            guess = [10, 20, 30, 40, 50]\n            compare(game,\
    \ guess)\n            \n            game = [10, 20, 30, 40, 50]\n            guess\
    \ = [10, 20, 30, 40, 50]\n            compare(game, guess)\n            \n   \
    \         game = [10, 20, 30, 40, 50]\n            guess = [10, 20, 30, 40, 50]\n\
    \            compare(game, guess)\n            \n            game = [10, 20, 30,\
    \ 40, 50]\n            guess = [10, 20, 30, 40, 50]\n            compare(game,\
    \ guess)\n            \n            game = [10, 20, 30, 40, 50]\n            guess\
    \ = [10, 20, 30, 40, 50]\n            compare(game, guess)\n            \n   \
    \         game = [10, 20, 30, 40, 50]\n            guess = [10, 20, 30, 40, 50]\n\
    \            compare(game, guess)\n            \n            game = [10, 20, 30,\
    \ 40, 50]\n            guess = [10, 20, 30, 40, 50]\n            compare(game,\
    \ guess)\n            \n            game = [10, 20, 30, 40, 50]\n            guess\
    \ = [10, 20, 30, 40, 50]\n            compare(game, guess)\n            \n   \
    \         game = [10, 20, 30, 40, 50]\n            guess = [10, 20, 30, 40, 50]\n\
    \            compare(game, guess)\n            \n            game = [10, 20, 30,\
    \ 40, 50]\n            guess = [10, 20, 30, 40, 50]\n            compare(game,\
    \ guess)\n            \n            game = [10, 20, 30, 40, 50]\n            guess\
    \ = [10, 20, 30, 40, 50]\n            compare(game, guess)\n            \n   \
    \         game = [10, 20, 30, 40, 50]\n            guess = [10, 20, 30, 40, 50]\n\
    \            compare(game, guess)\n            \n            game = [10, 20, 30,\
    \ 40, 50]\n            guess = [10, 20, 30, 40, 50]\n            compare(game,\
    \ guess)\n            \n            game\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9wooaw7n.py\"\
    , line 16\n    game = [10, 20, 30, 40, 50]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [1, 4, 2, 3]\n            guess = [1, 5, 3, 2]\n            \n      \
    \      compare(game, guess)\n            # returns [0, -1, 0, -1]\n          \
    \  \"\"\"\n            \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \ndef check(candidate):\n    assert\
    \ candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n \
    \   assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0,\
    \ 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6_2warq0.py\"\
    , line 16\n    game = [1, 4, 2, 3]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [1, 3, 7, 9, 11, 13, 15]\n            guess = [1, 3, 7, 9, 11, 13, 15]\n\
    \            compare(game, guess)\n            [0, -6, -6, -6, -6, -6, -6]\n \
    \           \n            game = [1, 3, 7, 9, 11, 13, 15]\n            guess =\
    \ [1, 3, 7, 9, 11, 13, 15]\n            compare(game, guess)\n            [0,\
    \ -6, -6, -6, -6, -6, -6]\n            \n            game = [1, 3, 7, 9, 11, 13,\
    \ 15]\n            guess = [1, 3, 7, 9, 11, 13, 15]\n            compare(game,\
    \ guess)\n            [0, -6, -6, -6, -6, -6, -6]\n            \n            game\
    \ = [1, 3, 7, 9, 11, 13, 15]\n            guess = [1, 3, 7, 9, 11, 13, 15]\n \
    \           compare(game, guess)\n            [0, -6, -6, -6, -6, -6, -6]\n  \
    \          \n            game = [1, 3, 7, 9, 11, 13, 15]\n            guess =\
    \ [1, 3, 7, 9, 11, 13, 15]\n            compare(game, guess)\n            [0,\
    \ -6, -6, -6, -6, -6, -6]\n            \n            game = [1, 3, 7, 9, 11, 13,\
    \ 15]\n            guess = [1, 3, 7, 9, 11, 13, 15]\n            compare(game,\
    \ guess)\n            [0, -6, -6, -6, -6, -6, -6]\n            \n            game\
    \ = [1, 3, 7, 9, 11, 13, 15]\n            guess = [1, 3, 7, 9, 11, 13, 15]\n \
    \           compare(game, guess)\n            [0, -6, -6, -6, -6, -6, -6]\n  \
    \          \n            game = [1, 3, 7, 9, 11, 13, 15]\n            guess =\
    \ [1, 3, 7, 9, 11, 13, 15]\n            compare(game, guess)\n            [0,\
    \ -6, -6, -6, -6, -6, -6]\n            \n            game = [1, 3, 7, 9, 11, 13,\
    \ 15]\n            guess = [1, 3, 7, 9, 11, 13, 15]\n            compare(game,\
    \ guess)\n            [0, -6, -6, -6, -6, -6, -6]\n            \n            game\
    \ = [1, 3, 7, 9, 11, 13, 15]\n            guess = [1, 3, 7, 9, 11, 13, 15]\n \
    \           compare(game, guess)\n            [0, -6, -6, -6, -6, -6, -6]\n  \
    \          \n            game = [1, 3, 7, 9, 11, 13, 15]\n            guess =\
    \ [1, 3, 7, 9, 11, 13, 15\ndef check(candidate):\n    assert candidate([1, 2,\
    \ 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy0yrku4x.py\"\
    , line 16\n    game = [1, 3, 7, 9, 11, 13, 15]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [1,3,5,7,9,11,13,15]\n            guess = [1,3,5,7,9,11,13,15]\n    \
    \        compare(game, guess)\n            \n            game = [1,3,5,7,9,11,13,15]\n\
    \            guess = [1,3,5,7,9,11,13,16]\n            compare(game, guess)\n\
    \            \n            game = [1,3,5,7,9,11,13,15]\n            guess = [1,3,5,7,9,11,13,15]\n\
    \            compare(game, guess)\n            \n            game = [1,3,5,7,9,11,13,15]\n\
    \            guess = [1,3,5,7,9,11,13,16]\n            compare(game, guess)\n\
    \            \n            game = [1,3,5,7,9,11,13,15]\n            guess = [1,3,5,7,9,11,13,15]\n\
    \            compare(game, guess)\n            \n            game = [1,3,5,7,9,11,13,15]\n\
    \            guess = [1,3,5,7,9,11,13,16]\n            compare(game, guess)\n\
    \            \n            game = [1,3,5,7,9,11,13,15]\n            guess = [1,3,5,7,9,11,13,15]\n\
    \            compare(game, guess)\n            \n            game = [1,3,5,7,9,11,13,15]\n\
    \            guess = [1,3,5,7,9,11,13,16]\n            compare(game, guess)\n\
    \            \n            game = [1,3,5,7,9,11,13,15]\n            guess = [1,3,5,7,9,11,13,15]\n\
    \            compare(game, guess)\n            \n            game = [1,3,5,7,9,11,13,15]\n\
    \            guess = [1,3,5,7,9,11,13,16]\n            compare(game, guess)\n\
    \            \n            game = [1,3,5,7,9,11,13,15]\n            guess = [1,3,5,7,9,11,13,15]\n\
    \            compare(game, guess)\n            \n            game = [1,3,5,7,9,11,13,15]\n\
    \            guess = [1,3,5,7,9,11,13,16]\n            compare(game, guess)\n\
    \            \n            game = [1,3,5,7,9,11,13,15]\n            guess = [1,3,5,7,9,11,13,15]\n\
    \            compare(game, guess)\n            \n            game = [1,3,5,7,9,11,13,15]\n\
    \            guess = [1,3,5,7,9,11,13,16]\n            compare(game, guess)\n\
    \            \n            game = [1,3,5,7,9,\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n \
    \   assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0,\
    \ 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpagcddi7z.py\"\
    , line 16\n    game = [1,3,5,7,9,11,13,15]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [5, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, \ndef check(candidate):\n\
    \    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0,\
    \ 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0,\
    \ 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n  \
    \  assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n\
    \    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps8f93jxd.py\"\
    , line 16\n    , 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, \n               ^\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [1, 3, 2]\n            guess = [1, 3, 2]\n            compare(game, guess)\n\
    \            # returns [0, 1, 0]\n            \n            game = [1, 3, 2]\n\
    \            guess = [1, 3, 3]\n            compare(game, guess)\n           \
    \ # returns [1, 0, 0]\n            \n            game = [1, 3, 2]\n          \
    \  guess = [1, 3, 1]\n            compare(game, guess)\n            # returns\
    \ [0, 1, 0]\n            \n            game = [1, 3, 2]\n            guess = [1,\
    \ 3, 2]\n            compare(game, guess)\n            # returns [0, 1, 0]\n \
    \           \n            game = [1, 3, 2]\n            guess = [1, 3, 3]\n  \
    \          compare(game, guess)\n            # returns [1, 0, 0]\n           \
    \ \n            game = [1, 3, 2]\n            guess = [1, 3, 1]\n            compare(game,\
    \ guess)\n            # returns [0, 1, 0]\n            \n            game = [1,\
    \ 3, 2]\n            guess = [1, 3, 2]\n            compare(game, guess)\n   \
    \         # returns [0, 1, 0]\n            \n            game = [1, 3, 2]\n  \
    \          guess = [1, 3, 3]\n            compare(game, guess)\n            #\
    \ returns [1, 0, 0]\n            \n            game = [1, 3, 2]\n            guess\
    \ = [1, 3, 1]\n            compare(game, guess)\n            # returns [0, 1,\
    \ 0]\n            \n            game = [1, 3, 2]\n            guess = [1, 3, 2]\n\
    \            compare(game, guess)\n            # returns [0, 1, 0]\n         \
    \   \n            game = [1, 3, 2]\n            guess = [1, 3, 3]\n          \
    \  compare(game, guess)\n            # returns [1, 0, 0]\n            \n     \
    \       game = [1, 3, 2]\n            guess = [1, 3, 1]\n            compare(game,\
    \ guess)\n            # returns [0, 1, 0]\n            \n            game = [1,\
    \ 3, 2]\n            guess = [1, 3, 2]\n            compare(game, guess)\n   \
    \         # returns [0, 1, 0]\n            \n            game = [1, 3, 2]\n  \
    \          guess = [1, 3, 3]\n            compare(game, guess)\n            #\
    \ returns [1, 0, 0]\n            \n            game = [1, 3, 2]\n            guess\
    \ = [1, 3, 1]\n            compare(game, guess)\n            # returns [0, 1,\
    \ 0]\n            \n            game = [1, 3, 2]\n            guess = [1, 3, 2]\n\
    \            compare(game, guess)\n            # returns [0, 1, 0]\n         \
    \   \n            game = [1, 3, 2]\n            guess = [1, 3, 3]\n          \
    \  compare(game, guess)\n            # returns [1, 0, 0]\n            \n     \
    \       game = [1, 3, 2]\n            guess = [1, 3, 1]\n            compare(game,\
    \ \ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3,\
    \ 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0,\
    \ 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1,\
    \ -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) ==\
    \ [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp26r6aqhn.py\"\
    , line 16\n    game = [1, 3, 2]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [1, 5, 3, 7, 8]\n            guess = [1, 5, 3, 7, 8]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, 0, 0]\n            \n            game = [1,\
    \ 5, 3, 7, 8]\n            guess = [1, 5, 3, 7, 9]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, 0, 1]\n            \n            game = [1,\
    \ 5, 3, 7, 8]\n            guess = [1, 5, 3, 7, 8]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, 0, 0]\n            \n            game = [1,\
    \ 5, 3, 7, 8]\n            guess = [1, 5, 3, 7, 9]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, 0, 1]\n            \n            game = [1,\
    \ 5, 3, 7, 8]\n            guess = [1, 5, 3, 7, 8]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, 0, 0]\n            \n            game = [1,\
    \ 5, 3, 7, 8]\n            guess = [1, 5, 3, 7, 9]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, 0, 1]\n            \n            game = [1,\
    \ 5, 3, 7, 8]\n            guess = [1, 5, 3, 7, 8]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, 0, 0]\n            \n            game = [1,\
    \ 5, 3, 7, 8]\n            guess = [1, 5, 3, 7, 9]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, 0, 1]\n            \n            game = [1,\
    \ 5, 3, 7, 8]\n            guess = [1, 5, 3, 7, 8]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, 0, 0]\n            \n            game = [1,\
    \ 5, 3, 7, 8]\n            guess = [1, 5, 3, 7, 9]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, 0, 1]\n            \n            game = [1,\
    \ 5, 3, 7, 8]\n            guess = [1, 5, 3, 7, 8]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, 0, 0]\n            \n            game = [1,\
    \ 5, 3, 7, 8]\n            guess = [1, 5, 3, 7, 9]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, 0, 1]\n            \n            game = [1,\
    \ 5, 3, 7, 8]\n            guess = [1, 5, 3, 7, 8]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, 0, 0]\n            \n            game = [1,\
    \ 5, 3, 7, 8]\n            guess = [1, 5, 3, 7, 9]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, 0, 1]\n            \n            game = [1,\
    \ 5, 3, 7, 8]\n            guess = [1, 5, 3, 7, 8]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, 0, 0]\n            \n            game\ndef\
    \ check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2,\
    \ -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0,\
    \ 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2,\
    \ -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2,\
    \ 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm7eo83p2.py\"\
    , line 16\n    game = [1, 5, 3, 7, 8]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [10, 7, 5, 3, 1]\n            guess = [10, 7, 5, 3, 2]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, 0, 0]\n            \n            game = [10,\
    \ 7, 5, 3, 1]\n            guess = [10, 7, 5, 3, 3]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, 0, 0]\n            \n            game = [10,\
    \ 7, 5, 3, 1]\n            guess = [10, 7, 5, 3, 1]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, 0, 0]\n            \n            game = [10,\
    \ 7, 5, 3, 1]\n            guess = [10, 7, 5, 3, 2]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, 0, 0]\n            \n            game = [10,\
    \ 7, 5, 3, 1]\n            guess = [10, 7, 5, 3, 3]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, 0, 0]\n            \n            game = [10,\
    \ 7, 5, 3, 1]\n            guess = [10, 7, 5, 3, 1]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, 0, 0]\n            \n            game = [10,\
    \ 7, 5, 3, 1]\n            guess = [10, 7, 5, 3, 2]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, 0, 0]\n            \n            game = [10,\
    \ 7, 5, 3, 1]\n            guess = [10, 7, 5, 3, 3]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, 0, 0]\n            \n            game = [10,\
    \ 7, 5, 3, 1]\n            guess = [10, 7, 5, 3, 1]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, 0, 0]\n            \n            game = [10,\
    \ 7, 5, 3, 1]\n            guess = [10, 7, 5, 3, 2]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, 0, 0]\n            \n            game = [10,\
    \ 7, 5, 3, 1]\n            guess = [10, 7, 5, 3, 3]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, 0, 0]\n            \n            game = [10,\
    \ 7, 5, 3, 1]\n            guess = [10, 7, 5, 3, 1]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, 0, 0]\n            \n            game = [10,\
    \ 7, 5, 3, 1]\n            guess = [10, 7, 5, 3, 2]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, 0, 0]\n            \n            game = [10,\
    \ 7, 5, 3, 1]\n            guess = [10, 7, 5, 3, 3]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, 0, 0]\n            \n            game = [10,\
    \ 7, 5, 3, 1]\n            guess = [10, 7, 5, 3, 1]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, 0, 0]\n            \n            game\ndef\
    \ check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2,\
    \ -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0,\
    \ 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2,\
    \ -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2,\
    \ 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp92djmhmh.py\"\
    , line 16\n    game = [10, 7, 5, 3, 1]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n            guess = [10, 20, 30,\
    \ 40, 50, 60, 70, 80, 90]\n            \n            compare(game, guess)\n  \
    \          \n            >> [0, 0, 0, 0, 0, 0, 0, 0]\n            \n         \
    \   guess = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n            \n            compare(game,\
    \ guess)\n            \n            >> [0, 0, 0, 0, 0, 0, 0, 0]\n            \n\
    \            guess = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n            \n    \
    \        compare(game, guess)\n            \n            >> [0, 0, 0, 0, 0, 0,\
    \ 0, 0]\n            \n            guess = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n\
    \            \n            compare(game, guess)\n            \n            >>\
    \ [0, 0, 0, 0, 0, 0, 0, 0]\n            \n            guess = [10, 20, 30, 40,\
    \ 50, 60, 70, 80, 90]\n            \n            compare(game, guess)\n      \
    \      \n            >> [0, 0, 0, 0, 0, 0, 0, 0]\n            \n            guess\
    \ = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n            \n            compare(game,\
    \ guess)\n            \n            >> [0, 0, 0, 0, 0, 0, 0, 0]\n            \n\
    \            guess = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n            \n    \
    \        compare(game, guess)\n            \n            >> [0, 0, 0, 0, 0, 0,\
    \ 0, 0]\n            \n            guess = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n\
    \            \n            compare(game, guess)\n            \n            >>\
    \ [0, 0, 0, 0, 0, 0, 0, 0]\n            \n            guess = [10, 20, 30, 40,\
    \ 50, 60, 70, 80, 90]\n            \n            compare(game, guess)\n      \
    \      \n            >> [0, 0, 0, 0, 0, 0, 0, 0]\n            \n            guess\
    \ = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n            \n            compare(game,\
    \ guess)\n            \n            >> [0, 0, 0, 0, 0, 0, 0, 0]\n            \n\
    \            guess = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n            \n    \
    \        compare(game, guess)\n            \n            >> [0, 0, 0, 0, 0, 0,\
    \ 0, 0]\n            \n            guess = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n\
    \            \n            compare(game, guess)\n            \n            >>\
    \ [0, 0, 0, 0, 0, 0, 0, 0]\n            \n            guess = [10, 20, 30, 40,\
    \ 50, 60, 70, 80, 90]\n            \n            compare(game, guess)\n      \
    \      \n            >> [0, 0, 0, 0, 0, 0, 0, 0]\n            \n            guess\
    \ = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n            \n            compare(game,\
    \ guess)\n            \n            >> [0, 0, 0, 0, 0, 0, 0, 0]\n            \n\
    \            guess = [10, 20, 30, 40, 50, \ndef check(candidate):\n    assert\
    \ candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n \
    \   assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0,\
    \ 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5s3z81ni.py\"\
    , line 16\n    game = [10, 20, 30, 40, 50, 60, 70, 80, 90]\nIndentationError:\
    \ unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [10, 20, 30, 40, 50]\n            guess = [40, 30, 20, 10, 50]\n    \
    \        compare(game, guess)\n            \n            game = [10, 20, 30, 40,\
    \ 50]\n            guess = [40, 30, 20, 10, 50]\n            compare(game, guess)\n\
    \            \n            game = [10, 20, 30, 40, 50]\n            guess = [40,\
    \ 30, 20, 10, 50]\n            compare(game, guess)\n            \n          \
    \  game = [10, 20, 30, 40, 50]\n            guess = [40, 30, 20, 10, 50]\n   \
    \         compare(game, guess)\n            \n            game = [10, 20, 30,\
    \ 40, 50]\n            guess = [40, 30, 20, 10, 50]\n            compare(game,\
    \ guess)\n            \n            game = [10, 20, 30, 40, 50]\n            guess\
    \ = [40, 30, 20, 10, 50]\n            compare(game, guess)\n            \n   \
    \         game = [10, 20, 30, 40, 50]\n            guess = [40, 30, 20, 10, 50]\n\
    \            compare(game, guess)\n            \n            game = [10, 20, 30,\
    \ 40, 50]\n            guess = [40, 30, 20, 10, 50]\n            compare(game,\
    \ guess)\n            \n            game = [10, 20, 30, 40, 50]\n            guess\
    \ = [40, 30, 20, 10, 50]\n            compare(game, guess)\n            \n   \
    \         game = [10, 20, 30, 40, 50]\n            guess = [40, 30, 20, 10, 50]\n\
    \            compare(game, guess)\n            \n            game = [10, 20, 30,\
    \ 40, 50]\n            guess = [40, 30, 20, 10, 50]\n            compare(game,\
    \ guess)\n            \n            game = [10, 20, 30, 40, 50]\n            guess\
    \ = [40, 30, 20, 10, 50]\n            compare(game, guess)\n            \n   \
    \         game = [10, 20, 30, 40, 50]\n            guess = [40, 30, 20, 10, 50]\n\
    \            compare(game, guess)\n            \n            game = [10, 20, 30,\
    \ 40, 50]\n            guess = [40, 30, 20, 10, 50]\n            compare(game,\
    \ guess)\n            \n            game = [10, 20, 30, 40, 50]\n            guess\
    \ = [40, 30, 20, 10, 50]\n            compare(game, guess)\n            \n   \
    \         game = [10, 20, 30, 40, 50]\n            guess = [40, 30, 20, 10, 50]\n\
    \            compare(game, guess)\n            \n            game = [10, 20, 30,\
    \ 40, 50]\n            guess = [40, 30, 20, 10, 50]\n            compare(game,\
    \ guess)\n            \n            game\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo2aduh59.py\"\
    , line 16\n    game = [10, 20, 30, 40, 50]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n            guess = [10, 20, 30,\
    \ 40, 50, 60, 70, 80, 90]\n            compare(game, guess)\n            \n  \
    \          game = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n            guess = [10,\
    \ 20, 30, 40, 50, 60, 70, 80, 90]\n            compare(game, guess)\n        \
    \    \n            game = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n            guess\
    \ = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n            compare(game, guess)\n \
    \           \n            game = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n      \
    \      guess = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n            compare(game,\
    \ guess)\n            \n            game = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n\
    \            guess = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n            compare(game,\
    \ guess)\n            \n            game = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n\
    \            guess = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n            compare(game,\
    \ guess)\n            \n            game = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n\
    \            guess = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n            compare(game,\
    \ guess)\n            \n            game = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n\
    \            guess = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n            compare(game,\
    \ guess)\n            \n            game = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n\
    \            guess = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n            compare(game,\
    \ guess)\n            \n            game = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n\
    \            guess = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n            compare(game,\
    \ guess)\n            \n            game = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n\
    \            guess = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n            compare(game,\
    \ guess)\n            \n            game = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n\
    \            guess = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n            compare(game,\
    \ guess)\n            \n            game = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n\
    \            guess = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n            compare(game,\
    \ guess)\n            \n            game = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n\
    \            guess = [10, \ndef check(candidate):\n    assert candidate([1, 2,\
    \ 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpayatyitg.py\"\
    , line 16\n    game = [10, 20, 30, 40, 50, 60, 70, 80, 90]\nIndentationError:\
    \ unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [10, 20, 30, 40, 50]\n            guess = [10, 20, 30, 40, 50]\n    \
    \        compare(game, guess)\n            >> [0, 0, 0, 0, 0]\n            \n\
    \            game = [10, 20, 30, 40, 50]\n            guess = [10, 20, 30, 40,\
    \ 50]\n            compare(game, guess)\n            >> [0, 0, 0, 0, 0]\n    \
    \        \n            game = [10, 20, 30, 40, 50]\n            guess = [10, 20,\
    \ 30, 40, 50]\n            compare(game, guess)\n            >> [0, 0, 0, 0, 0]\n\
    \            \n            game = [10, 20, 30, 40, 50]\n            guess = [10,\
    \ 20, 30, 40, 50]\n            compare(game, guess)\n            >> [0, 0, 0,\
    \ 0, 0]\n            \n            game = [10, 20, 30, 40, 50]\n            guess\
    \ = [10, 20, 30, 40, 50]\n            compare(game, guess)\n            >> [0,\
    \ 0, 0, 0, 0]\n            \n            game = [10, 20, 30, 40, 50]\n       \
    \     guess = [10, 20, 30, 40, 50]\n            compare(game, guess)\n       \
    \     >> [0, 0, 0, 0, 0]\n            \n            game = [10, 20, 30, 40, 50]\n\
    \            guess = [10, 20, 30, 40, 50]\n            compare(game, guess)\n\
    \            >> [0, 0, 0, 0, 0]\n            \n            game = [10, 20, 30,\
    \ 40, 50]\n            guess = [10, 20, 30, 40, 50]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, 0, 0]\n            \n            game = [10,\
    \ 20, 30, 40, 50]\n            guess = [10, 20, 30, 40, 50]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, 0, 0]\n            \n            game = [10,\
    \ 20, 30, 40, 50]\n            guess = [10, 20, 30, 40, 50]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, 0, 0]\n            \n            game = [10,\
    \ 20, 30, 40, 50]\n            guess = [10, 20, 30, 40, 50]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, 0, 0]\n            \n            game = [10,\
    \ 20, 30, 40, 50]\n            guess = [10, 20, 30, 40, 50]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, 0, 0]\n            \n            game = [10,\
    \ 20, 30, 40, 50]\n            guess = [10, 20, 30, 40, 50]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, 0, 0]\n            \n            game = [10,\
    \ 20, 30, 40, 50]\n            guess = [10, 20, 30, 40, 50]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, 0, 0]\n            \n            game = [10,\
    \ 20, 30, 40, 5\ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 1],\
    \ [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0, 0, 0, 0,\
    \ 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1, 2,\
    \ 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2, 3,\
    \ 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjn7kk01u.py\"\
    , line 16\n    game = [10, 20, 30, 40, 50]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ scores = [1, 3, 5]\n            guesses = [1, 3, 5]\n            compare(scores,\
    \ guesses) == [0, 0, 0]\n            compare(scores, guesses) == [3, 3, 3]\n \
    \           compare(scores, guesses) == [3, 3, 3]\n            compare(scores,\
    \ guesses) == [3, 3, 3]\n            compare(scores, guesses) == [3, 3, 3]\n \
    \           compare(scores, guesses) == [3, 3, 3]\n            compare(scores,\
    \ guesses) == [3, 3, 3]\n            compare(scores, guesses) == [3, 3, 3]\n \
    \           compare(scores, guesses) == [3, 3, 3]\n            compare(scores,\
    \ guesses) == [3, 3, 3]\n            compare(scores, guesses) == [3, 3, 3]\n \
    \           compare(scores, guesses) == [3, 3, 3]\n            compare(scores,\
    \ guesses) == [3, 3, 3]\n            compare(scores, guesses) == [3, 3, 3]\n \
    \           compare(scores, guesses) == [3, 3, 3]\n            compare(scores,\
    \ guesses) == [3, 3, 3]\n            compare(scores, guesses) == [3, 3, 3]\n \
    \           compare(scores, guesses) == [3, 3, 3]\n            compare(scores,\
    \ guesses) == [3, 3, 3]\n            compare(scores, guesses) == [3, 3, 3]\n \
    \           compare(scores, guesses) == [3, 3, 3]\n            compare(scores,\
    \ guesses) == [3, 3, 3]\n            compare(scores, guesses) == [3, 3, 3]\n \
    \           compare(scores, guesses) == [3, 3, 3]\n            compare(scores,\
    \ guesses) == [3, 3, 3]\n            compare(scores, guesses) == [3, 3, 3]\n \
    \           compare(scores, guesses) == [3, 3, 3]\n            compare(scores,\
    \ guesses) == [3, 3, 3]\n            compare(scores, guesses) == [3, 3, 3]\n \
    \           compare(scores, guesses) == [3, 3, 3]\n            compare(scores,\
    \ guesses) == [3, 3, 3]\n            compare(scores, guesses) == [3, 3, 3]\n \
    \           compare(scores, guesses) == [3, 3, 3]\n            compare(scores,\
    \ guesses) == [3, 3, 3]\n            compare(scores, guesses) == [3, 3, 3]\n \
    \           compare(scores, guesses) == [3, 3, 3]\n            compare(scores,\
    \ guesses) == [3, 3, 3]\n            compare(scores, guesses) == [3, 3, 3]\n \
    \           compare(scores, guesses) == [3, 3, 3]\n            compare(scores,\
    \ guesses) == [3, 3, 3]\n            compare(scores, guesses) == [3, 3, 3]\n \
    \           compare(scores, guesses) == [3, 3, 3]\n            compare(scores,\
    \ guesses) == [3, 3, 3]\n            compare(scores, guesses) == [3, 3, 3]\n \
    \           compare(scores, guesses) == [3, 3, 3]\n            compare\ndef check(candidate):\n\
    \    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0,\
    \ 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0,\
    \ 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n  \
    \  assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n\
    \    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpycwl0owo.py\"\
    , line 16\n    scores = [1, 3, 5]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [5, 10, 15, 20, 25]\n            guess = [10, 20, 30, 40, 50]\n     \
    \       \n            compare(game, guess)\n            \n            >> [5, 0,\
    \ 0, 5, 0]\n            \n            \n            \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n\ndef check(candidate):\n   \
    \ assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert\
    \ candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n\
    \    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkeict6y3.py\"\
    , line 16\n    game = [5, 10, 15, 20, 25]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [1, 5, 3, 7, 9, 2, 6]\n            guess = [1, 5, 3, 7, 9, 2, 6]\n  \
    \          compare(game, guess)\n            \n            game = [1, 5, 3, 7,\
    \ 9, 2, 6]\n            guess = [1, 5, 3, 7, 9, 2, 7]\n            compare(game,\
    \ guess)\n            \n            game = [1, 5, 3, 7, 9, 2, 6]\n           \
    \ guess = [1, 5, 3, 7, 9, 2, 5]\n            compare(game, guess)\n          \
    \  \n            game = [1, 5, 3, 7, 9, 2, 6]\n            guess = [1, 5, 3, 7,\
    \ 9, 2, 6]\n            compare(game, guess)\n            \n            game =\
    \ [1, 5, 3, 7, 9, 2, 6]\n            guess = [1, 5, 3, 7, 9, 2, 7]\n         \
    \   compare(game, guess)\n            \n            game = [1, 5, 3, 7, 9, 2,\
    \ 6]\n            guess = [1, 5, 3, 7, 9, 2, 5]\n            compare(game, guess)\n\
    \            \n            game = [1, 5, 3, 7, 9, 2, 6]\n            guess = [1,\
    \ 5, 3, 7, 9, 2, 6]\n            compare(game, guess)\n            \n        \
    \    game = [1, 5, 3, 7, 9, 2, 6]\n            guess = [1, 5, 3, 7, 9, 2, 7]\n\
    \            compare(game, guess)\n            \n            game = [1, 5, 3,\
    \ 7, 9, 2, 6]\n            guess = [1, 5, 3, 7, 9, 2, 5]\n            compare(game,\
    \ guess)\n            \n            game = [1, 5, 3, 7, 9, 2, 6]\n           \
    \ guess = [1, 5, 3, 7, 9, 2, 6]\n            compare(game, guess)\n          \
    \  \n            game = [1, 5, 3, 7, 9, 2, 6]\n            guess = [1, 5, 3, 7,\
    \ 9, 2, 7]\n            compare(game, guess)\n            \n            game =\
    \ [1, 5, 3, 7, 9, 2, 6]\n            guess = [1, 5, 3, 7, 9, 2, 5]\n         \
    \   compare(game, guess)\n            \n            game = [1, 5, 3, 7, 9, 2,\
    \ 6]\n            guess = [1, 5, 3, 7, 9, 2, 6]\n            compare(game, guess)\n\
    \            \n            game = [1, 5, 3, 7, 9, 2, 6]\n            guess = [1,\
    \ 5, 3, 7, 9, 2, 7]\n            compare(game, guess)\n            \n        \
    \    game = [1, 5, 3, 7, 9, 2, 6]\n            guess = [1, 5, 3, 7, 9, 2, 5]\n\
    \            compare(game, guess)\n            \n            game = [1, 5, 3,\
    \ 7, 9, 2, 6]\n            guess = [1, 5, 3, 7, 9, 2, 6]\n            compare(game,\
    \ guess)\n            \n\ndef check(candidate):\n    assert candidate([1, 2, 3,\
    \ 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbwogfx57.py\"\
    , line 16\n    game = [1, 5, 3, 7, 9, 2, 6]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [1, 3, 2]\n            guess = [1, 3, 2]\n            compare(game, guess)\n\
    \            # returns [0, 1, 0]\n            \n            game = [1, 3, 2]\n\
    \            guess = [1, 3, 3]\n            compare(game, guess)\n           \
    \ # returns [0, 0, 1]\n            \n            game = [1, 3, 2]\n          \
    \  guess = [1, 3, 2]\n            compare(game, guess)\n            # returns\
    \ [0, 1, 0]\n            \n            game = [1, 3, 2]\n            guess = [1,\
    \ 3, 3]\n            compare(game, guess)\n            # returns [0, 0, 1]\n \
    \           \n            game = [1, 3, 2]\n            guess = [1, 3, 2]\n  \
    \          compare(game, guess)\n            # returns [0, 1, 0]\n           \
    \ \n            game = [1, 3, 2]\n            guess = [1, 3, 3]\n            compare(game,\
    \ guess)\n            # returns [0, 0, 1]\n            \n            game = [1,\
    \ 3, 2]\n            guess = [1, 3, 2]\n            compare(game, guess)\n   \
    \         # returns [0, 1, 0]\n            \n            game = [1, 3, 2]\n  \
    \          guess = [1, 3, 3]\n            compare(game, guess)\n            #\
    \ returns [0, 0, 1]\n            \n            game = [1, 3, 2]\n            guess\
    \ = [1, 3, 2]\n            compare(game, guess)\n            # returns [0, 1,\
    \ 0]\n            \n            game = [1, 3, 2]\n            guess = [1, 3, 3]\n\
    \            compare(game, guess)\n            # returns [0, 0, 1]\n         \
    \   \n            game = [1, 3, 2]\n            guess = [1, 3, 2]\n          \
    \  compare(game, guess)\n            # returns [0, 1, 0]\n            \n     \
    \       game = [1, 3, 2]\n            guess = [1, 3, 3]\n            compare(game,\
    \ guess)\n            # returns [0, 0, 1]\n            \n            game = [1,\
    \ 3, 2]\n            guess = [1, 3, 2]\n            compare(game, guess)\n   \
    \         # returns [0, 1, 0]\n            \n            game = [1, 3, 2]\n  \
    \          guess = [1, 3, 3]\n            compare(game, guess)\n            #\
    \ returns [0, 0, 1]\n            \n            game = [1, 3, 2]\n            guess\
    \ = [1, 3, 2]\n            compare(game, guess)\n            # returns [0, 1,\
    \ 0]\n            \n            game = [1, 3, 2]\n            guess = [1, 3, 3]\n\
    \            compare(game, guess)\n            # returns [0, 0, 1]\n         \
    \   \n            game = [1, 3, 2]\n            guess = [1, 3, 2]\n          \
    \  compare(game, guess)\n            # returns [0, 1, 0]\n            \n     \
    \       game = [1, 3, 2]\n            guess = [1, \ndef check(candidate):\n  \
    \  assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert\
    \ candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n\
    \    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnnws2_wl.py\"\
    , line 16\n    game = [1, 3, 2]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,\n\
    def check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2,\
    \ -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0,\
    \ 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2,\
    \ -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2,\
    \ 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsrr8utyc.py\"\
    , line 16\n    ,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,\n\
    \               ^\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [10, 7, 5, 3, 1]\n            guess = [7, 5, 3, 1]\n            compare(game,\
    \ guess)\n            >> [4, 1, 0, 0]\n            \n            game = [10, 7,\
    \ 5, 3, 1]\n            guess = [7, 5, 3, 1]\n            compare(game, guess)\n\
    \            >> [4, 1, 0, 0]\n            \n            game = [10, 7, 5, 3, 1]\n\
    \            guess = [7, 5, 3, 1]\n            compare(game, guess)\n        \
    \    >> [4, 1, 0, 0]\n            \n            game = [10, 7, 5, 3, 1]\n    \
    \        guess = [7, 5, 3, 1]\n            compare(game, guess)\n            >>\
    \ [4, 1, 0, 0]\n            \n            game = [10, 7, 5, 3, 1]\n          \
    \  guess = [7, 5, 3, 1]\n            compare(game, guess)\n            >> [4,\
    \ 1, 0, 0]\n            \n            game = [10, 7, 5, 3, 1]\n            guess\
    \ = [7, 5, 3, 1]\n            compare(game, guess)\n            >> [4, 1, 0, 0]\n\
    \            \n            game = [10, 7, 5, 3, 1]\n            guess = [7, 5,\
    \ 3, 1]\n            compare(game, guess)\n            >> [4, 1, 0, 0]\n     \
    \       \n            game = [10, 7, 5, 3, 1]\n            guess = [7, 5, 3, 1]\n\
    \            compare(game, guess)\n            >> [4, 1, 0, 0]\n            \n\
    \            game = [10, 7, 5, 3, 1]\n            guess = [7, 5, 3, 1]\n     \
    \       compare(game, guess)\n            >> [4, 1, 0, 0]\n            \n    \
    \        game = [10, 7, 5, 3, 1]\n            guess = [7, 5, 3, 1]\n         \
    \   compare(game, guess)\n            >> [4, 1, 0, 0]\n            \n        \
    \    game = [10, 7, 5, 3, 1]\n            guess = [7, 5, 3, 1]\n            compare(game,\
    \ guess)\n            >> [4, 1, 0, 0]\n            \n            game = [10, 7,\
    \ 5, 3, 1]\n            guess = [7, 5, 3, 1]\n            compare(game, guess)\n\
    \            >> [4, 1, 0, 0]\n            \n            game = [10, 7, 5, 3, 1]\n\
    \            guess = [7, 5, 3, 1]\n            compare(game, guess)\n        \
    \    >> [4, 1, 0, 0]\n            \n            game = [10, 7, 5, 3, 1]\n    \
    \        guess = [7, 5, 3, 1]\n            compare(game, guess)\n            >>\
    \ [4, 1, 0, 0]\n            \n            game = [10, 7, 5, 3, 1]\n          \
    \  guess = [7, 5, 3, 1]\n            compare(game, guess)\n            >> [4,\
    \ 1, 0, 0]\n            \n            game\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n \
    \   assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0,\
    \ 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4qh2r8d1.py\"\
    , line 16\n    game = [10, 7, 5, 3, 1]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ scores = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n            guesses = [10, 20,\
    \ 30, 40, 50, 60, 70, 80, 90]\n            compare(scores, guesses)\n        \
    \    # returns [0, -10, -20, -30, -40, -50, -60, -70, -80, -90]\n            \"\
    \"\"\n    \n    \n    \"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \ndef check(candidate):\n    assert candidate([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6kzue7mf.py\"\
    , line 16\n    scores = [10, 20, 30, 40, 50, 60, 70, 80, 90]\nIndentationError:\
    \ unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [1, 5, 7, 9, 11, 13, 15]\n            guess = [1, 5, 7, 9, 11, 13, 15]\n\
    \            compare(game, guess)\n            [0, -5, -7, -9, -11, -13, -15]\n\
    \            \n            game = [1, 5, 7, 9, 11, 13, 15]\n            guess\
    \ = [1, 5, 7, 9, 11, 13, 15]\n            compare(game, guess)\n            [0,\
    \ -5, -7, -9, -11, -13, -15]\n            \n            game = [1, 5, 7, 9, 11,\
    \ 13, 15]\n            guess = [1, 5, 7, 9, 11, 13, 15]\n            compare(game,\
    \ guess)\n            [0, -5, -7, -9, -11, -13, -15]\n            \n         \
    \   game = [1, 5, 7, 9, 11, 13, 15]\n            guess = [1, 5, 7, 9, 11, 13,\
    \ 15]\n            compare(game, guess)\n            [0, -5, -7, -9, -11, -13,\
    \ -15]\n            \n            game = [1, 5, 7, 9, 11, 13, 15]\n          \
    \  guess = [1, 5, 7, 9, 11, 13, 15]\n            compare(game, guess)\n      \
    \      [0, -5, -7, -9, -11, -13, -15]\n            \n            game = [1, 5,\
    \ 7, 9, 11, 13, 15]\n            guess = [1, 5, 7, 9, 11, 13, 15]\n          \
    \  compare(game, guess)\n            [0, -5, -7, -9, -11, -13, -15]\n        \
    \    \n            game = [1, 5, 7, 9, 11, 13, 15]\n            guess = [1, 5,\
    \ 7, 9, 11, 13, 15]\n            compare(game, guess)\n            [0, -5, -7,\
    \ -9, -11, -13, -15]\n            \n            game = [1, 5, 7, 9, 11, 13, 15]\n\
    \            guess = [1, 5, 7, 9, 11, 13, 15]\n            compare(game, guess)\n\
    \            [0, -5, -7, -9, -11, -13, -15]\n            \n            game =\
    \ [1, 5, 7, 9, 11, 13, 15]\n            guess = [1, 5, 7, 9, 11, 13, 15]\n   \
    \         compare(game, guess)\n            [0, -5, -7, -9, -11, -13, -15]\n \
    \           \n            game = [1, 5, 7, 9, 11, 13, 15]\n            guess =\
    \ [1, 5, 7, 9, 11, 13, 15]\n            compare(game, guess)\n            [0,\
    \ -5, -7, -9, -11, -13, -15]\n            \n            game = [1, 5, 7, 9, 11,\
    \ 13, 15]\n            guess = [1, 5, 7, 9, 11, 13, 15\ndef check(candidate):\n\
    \    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0,\
    \ 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0,\
    \ 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n  \
    \  assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n\
    \    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9qj2956v.py\"\
    , line 16\n    game = [1, 5, 7, 9, 11, 13, 15]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n            guess = [10, 20, 30,\
    \ 40, 50, 60, 70, 80, 90]\n            compare(game, guess)\n            \n  \
    \          game = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n            guess = [10,\
    \ 20, 30, 40, 50, 60, 70, 80, 90]\n            compare(game, guess)\n        \
    \    \n            game = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n            guess\
    \ = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n            compare(game, guess)\n \
    \           \n            game = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n      \
    \      guess = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n            compare(game,\
    \ guess)\n            \n            game = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n\
    \            guess = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n            compare(game,\
    \ guess)\n            \n            game = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n\
    \            guess = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n            compare(game,\
    \ guess)\n            \n            game = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n\
    \            guess = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n            compare(game,\
    \ guess)\n            \n            game = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n\
    \            guess = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n            compare(game,\
    \ guess)\n            \n            game = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n\
    \            guess = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n            compare(game,\
    \ guess)\n            \n            game = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n\
    \            guess = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n            compare(game,\
    \ guess)\n            \n            game = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n\
    \            guess = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n            compare(game,\
    \ guess)\n            \n            game = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n\
    \            guess = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n            compare(game,\
    \ guess)\n            \n            game = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n\
    \            guess = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n            compare(game,\
    \ guess)\n            \n            game = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n\
    \            guess = [10, \ndef check(candidate):\n    assert candidate([1, 2,\
    \ 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpoil48ajx.py\"\
    , line 16\n    game = [10, 20, 30, 40, 50, 60, 70, 80, 90]\nIndentationError:\
    \ unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [1, 3, 2]\n            guess = [1, 3, 2]\n            compare(game, guess)\n\
    \            >> [1, 0, 2]\n            \n            game = [1, 3, 2]\n      \
    \      guess = [1, 3, 3]\n            compare(game, guess)\n            >> [1,\
    \ -1, 2]\n            \n            game = [1, 3, 2]\n            guess = [1,\
    \ 3, 1]\n            compare(game, guess)\n            >> [1, 0, 2]\n        \
    \    \n            game = [1, 3, 2]\n            guess = [1, 3, 0]\n         \
    \   compare(game, guess)\n            >> [1, 0, 2]\n            \n           \
    \ game = [1, 3, 2]\n            guess = [1, 3, 3]\n            compare(game, guess)\n\
    \            >> [1, -1, 2]\n            \n            game = [1, 3, 2]\n     \
    \       guess = [1, 3, 1]\n            compare(game, guess)\n            >> [1,\
    \ 0, 2]\n            \n            game = [1, 3, 2]\n            guess = [1, 3,\
    \ 0]\n            compare(game, guess)\n            >> [1, 0, 2]\n           \
    \ \n            game = [1, 3, 2]\n            guess = [1, 3, 3]\n            compare(game,\
    \ guess)\n            >> [1, -1, 2]\n            \n            game = [1, 3, 2]\n\
    \            guess = [1, 3, 1]\n            compare(game, guess)\n           \
    \ >> [1, 0, 2]\n            \n            game = [1, 3, 2]\n            guess\
    \ = [1, 3, 0]\n            compare(game, guess)\n            >> [1, 0, 2]\n  \
    \          \n            game = [1, 3, 2]\n            guess = [1, 3, 3]\n   \
    \         compare(game, guess)\n            >> [1, -1, 2]\n            \n    \
    \        game = [1, 3, 2]\n            guess = [1, 3, 1]\n            compare(game,\
    \ guess)\n            >> [1, 0, 2]\n            \n            game = [1, 3, 2]\n\
    \            guess = [1, 3, 0]\n            compare(game, guess)\n           \
    \ >> [1, 0, 2]\n            \n            game = [1, 3, 2]\n            guess\
    \ = [1, 3, 3]\n            compare(game, guess)\n            >> [1, -1, 2]\n \
    \           \n            game = [1, 3, 2]\n            guess = [1, 3, 1]\n  \
    \          compare(game, guess)\n            >> [1, 0, 2]\n            \n    \
    \        game = [1, 3, 2]\n            guess = [1, 3, 0]\n            compare(game,\
    \ guess)\n            >> [1, 0, 2]\n            \n            game = [1, 3, 2]\n\
    \            guess = [1, 3, 3]\n            compare(game, guess)\n           \
    \ >> [1, -1, 2]\n            \n            game\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n \
    \   assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0,\
    \ 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwtd6oadi.py\"\
    , line 16\n    game = [1, 3, 2]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [1, 3, 2]\n            guess = [1, 3, 2]\n            compare(game, guess)\n\
    \            >> [0, 0, 0]\n            \n            game = [1, 3, 2]\n      \
    \      guess = [1, 3, 3]\n            compare(game, guess)\n            >> [1,\
    \ 1, 1]\n            \n            game = [1, 3, 2]\n            guess = [1, 3,\
    \ 1]\n            compare(game, guess)\n            >> [1, 1, 0]\n           \
    \ \n            game = [1, 3, 2]\n            guess = [1, 3, 2]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0]\n            \n            game = [1, 3, 2]\n\
    \            guess = [1, 3, 3]\n            compare(game, guess)\n           \
    \ >> [1, 1, 1]\n            \n            game = [1, 3, 2]\n            guess\
    \ = [1, 3, 1]\n            compare(game, guess)\n            >> [1, 1, 0]\n  \
    \          \n            game = [1, 3, 2]\n            guess = [1, 3, 2]\n   \
    \         compare(game, guess)\n            >> [0, 0, 0]\n            \n     \
    \       game = [1, 3, 2]\n            guess = [1, 3, 3]\n            compare(game,\
    \ guess)\n            >> [1, 1, 1]\n            \n            game = [1, 3, 2]\n\
    \            guess = [1, 3, 1]\n            compare(game, guess)\n           \
    \ >> [1, 1, 0]\n            \n            game = [1, 3, 2]\n            guess\
    \ = [1, 3, 2]\n            compare(game, guess)\n            >> [0, 0, 0]\n  \
    \          \n            game = [1, 3, 2]\n            guess = [1, 3, 3]\n   \
    \         compare(game, guess)\n            >> [1, 1, 1]\n            \n     \
    \       game = [1, 3, 2]\n            guess = [1, 3, 1]\n            compare(game,\
    \ guess)\n            >> [1, 1, 0]\n            \n            game = [1, 3, 2]\n\
    \            guess = [1, 3, 2]\n            compare(game, guess)\n           \
    \ >> [0, 0, 0]\n            \n            game = [1, 3, 2]\n            guess\
    \ = [1, 3, 3]\n            compare(game, guess)\n            >> [1, 1, 1]\n  \
    \          \n            game = [1, 3, 2]\n            guess = [1, 3, 1]\n   \
    \         compare(game, guess)\n            >> [1, 1, 0]\n            \n     \
    \       game = [1, 3, 2]\n            guess = [1, 3, 2]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0]\n            \n            game = [1, 3, 2]\n\
    \            guess = [1, 3, 3]\n            compare(game, guess)\n           \
    \ >> [1, 1, 1]\n            \n            game\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n \
    \   assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0,\
    \ 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvathjan0.py\"\
    , line 16\n    game = [1, 3, 2]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [1, 2, 3, 4, 5]\n            guess = [1, 3, 5]\n            compare(game,\
    \ guess)\n            \n            game = [1, 2, 3, 4, 5]\n            guess\
    \ = [1, 3, 5]\n            compare(game, guess)\n            \n            game\
    \ = [1, 2, 3, 4, 5]\n            guess = [1, 3, 5]\n            compare(game,\
    \ guess)\n            \n            game = [1, 2, 3, 4, 5]\n            guess\
    \ = [1, 3, 5]\n            compare(game, guess)\n            \n            game\
    \ = [1, 2, 3, 4, 5]\n            guess = [1, 3, 5]\n            compare(game,\
    \ guess)\n            \n            game = [1, 2, 3, 4, 5]\n            guess\
    \ = [1, 3, 5]\n            compare(game, guess)\n            \n            game\
    \ = [1, 2, 3, 4, 5]\n            guess = [1, 3, 5]\n            compare(game,\
    \ guess)\n            \n            game = [1, 2, 3, 4, 5]\n            guess\
    \ = [1, 3, 5]\n            compare(game, guess)\n            \n            game\
    \ = [1, 2, 3, 4, 5]\n            guess = [1, 3, 5]\n            compare(game,\
    \ guess)\n            \n            game = [1, 2, 3, 4, 5]\n            guess\
    \ = [1, 3, 5]\n            compare(game, guess)\n            \n            game\
    \ = [1, 2, 3, 4, 5]\n            guess = [1, 3, 5]\n            compare(game,\
    \ guess)\n            \n            game = [1, 2, 3, 4, 5]\n            guess\
    \ = [1, 3, 5]\n            compare(game, guess)\n            \n            game\
    \ = [1, 2, 3, 4, 5]\n            guess = [1, 3, 5]\n            compare(game,\
    \ guess)\n            \n            game = [1, 2, 3, 4, 5]\n            guess\
    \ = [1, 3, 5]\n            compare(game, guess)\n            \n            game\
    \ = [1, 2, 3, 4, 5]\n            guess = [1, 3, 5]\n            compare(game,\
    \ guess)\n            \n            game = [1, 2, 3, 4, 5]\n            guess\
    \ = [1, 3, 5]\n            compare(game, guess)\n            \n            game\
    \ = [1, 2, 3, 4, 5]\n            guess = [1, 3, 5]\n            compare(game,\
    \ guess)\n            \n            game = [1, 2, 3, 4, 5]\n            guess\
    \ = [1, 3, 5]\n            compare(game, guess)\n            \n            game\
    \ = [1, 2, 3, 4, 5]\n            guess = [1, 3, 5]\n            compare(game,\
    \ guess)\n            \n            game = [1, 2, 3, 4, 5]\n            guess\
    \ = [1, 3, 5]\n            compare(game, guess)\n            \n            game\
    \ = [1, 2, 3, 4, 5]\n            guess = [1, 3, 5]\n            compare(game,\
    \ guess)\n            \n            game = [1, 2, 3, 4, 5]\n            \ndef\
    \ check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2,\
    \ -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0,\
    \ 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2,\
    \ -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2,\
    \ 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjdlfqey3.py\"\
    , line 16\n    game = [1, 2, 3, 4, 5]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [1, 3, 6, 8, 10]\n            guess = [1, 3, 6, 8, 10]\n            compare(game,\
    \ guess)\n            > [0, 0, 0, 0, 0]\n            \n            game = [1,\
    \ 3, 6, 8, 10]\n            guess = [1, 3, 6, 8, 9]\n            compare(game,\
    \ guess)\n            > [0, 0, 0, 0, 0]\n            \n            game = [1,\
    \ 3, 6, 8, 10]\n            guess = [1, 3, 6, 8, 11]\n            compare(game,\
    \ guess)\n            > [0, 0, 0, 0, 0]\n            \n            game = [1,\
    \ 3, 6, 8, 10]\n            guess = [1, 3, 6, 9, 10]\n            compare(game,\
    \ guess)\n            > [0, 0, 0, 0, 0]\n            \n            game = [1,\
    \ 3, 6, 8, 10]\n            guess = [1, 3, 6, 10, 10]\n            compare(game,\
    \ guess)\n            > [0, 0, 0, 0, 0]\n            \n            game = [1,\
    \ 3, 6, 8, 10]\n            guess = [1, 3, 6, 11, 10]\n            compare(game,\
    \ guess)\n            > [0, 0, 0, 0, 0]\n            \n            game = [1,\
    \ 3, 6, 8, 10]\n            guess = [1, 3, 6, 12, 10]\n            compare(game,\
    \ guess)\n            > [0, 0, 0, 0, 0]\n            \n            game = [1,\
    \ 3, 6, 8, 10]\n            guess = [1, 3, 6, 13, 10]\n            compare(game,\
    \ guess)\n            > [0, 0, 0, 0, 0]\n            \n            game = [1,\
    \ 3, 6, 8, 10]\n            guess = [1, 3, 6, 14, 10]\n            compare(game,\
    \ guess)\n            > [0, 0, 0, 0, 0]\n            \n            game = [1,\
    \ 3, 6, 8, 10]\n            guess = [1, 3, 6, 15, 10]\n            compare(game,\
    \ guess)\n            > [0, 0, 0, 0, 0]\n            \n            game = [1,\
    \ 3, 6, 8, 10]\n            guess = [1, 3, 6, 16, 10]\n            compare(game,\
    \ guess)\n            > [0, 0, 0, 0, 0]\n            \n            game = [1,\
    \ 3, 6, 8, 10]\n            guess = [1, 3, 6, 17, 10]\n            compare(game,\
    \ guess)\n            > [0, 0, 0, 0, 0]\n            \n            game = [1,\
    \ 3, 6, 8, 10]\n            guess = [1, 3, 6, 18, 10]\n            compare(game,\
    \ guess)\n            > [0, 0, 0, 0, 0]\n            \n            game = [1,\
    \ 3, 6, 8, 10]\n            guess = [1, 3, 6, 19, 10]\n            compare(game,\
    \ guess)\n            > [0, 0, 0, 0, 0]\n            \n            game = [1,\
    \ 3, 6, 8, 10]\n            guess = [1, 3, 6, 20, 10]\n            compare(game,\
    \ guess)\n            > [0, 0, 0, 0, 0]\n            \n            \ndef check(candidate):\n\
    \    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0,\
    \ 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0,\
    \ 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n  \
    \  assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n\
    \    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpamkujhjf.py\"\
    , line 16\n    game = [1, 3, 6, 8, 10]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [1, 5, 3, 6, 2]\n            guess = [4, 6, 3, 6, 2]\n            compare(game,\
    \ guess)\n            # returns [0, 0, -1, 1, -1]\n            \"\"\"\n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\ndef check(candidate):\n    assert candidate([1, 2, 3, 4,\
    \ 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjukijjat.py\"\
    , line 16\n    game = [1, 5, 3, 6, 2]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [10, 15, 20, 30, 40, 50]\n            guess = [10, 20, 30, 40, 50, 60]\n\
    \            compare(game, guess)\n            >> [0, 0, 2, -4, -6, -5]\n    \
    \        \"\"\"\n    \"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\ndef check(candidate):\n    assert candidate([1, 2,\
    \ 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1znxnfwk.py\"\
    , line 16\n    game = [10, 15, 20, 30, 40, 50]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [1, 4, 6, 8, 10]\n            guess = [1, 3, 6, 8, 10]\n            compare(game,\
    \ guess)\n            [0, 1, 1, 0, 0]\n            \n            game = [1, 4,\
    \ 6, 8, 10]\n            guess = [1, 3, 6, 8, 9]\n            compare(game, guess)\n\
    \            [1, 1, 0, 0, 1]\n            \n            game = [1, 4, 6, 8, 10]\n\
    \            guess = [1, 3, 6, 8, 10]\n            compare(game, guess)\n    \
    \        [1, 1, 0, 0, 1]\n            \n            game = [1, 4, 6, 8, 10]\n\
    \            guess = [1, 3, 6, 8, 11]\n            compare(game, guess)\n    \
    \        [1, 1, 0, 0, 1]\n            \n            game = [1, 4, 6, 8, 10]\n\
    \            guess = [1, 3, 6, 8, 12]\n            compare(game, guess)\n    \
    \        [1, 1, 0, 0, 1]\n            \n            game = [1, 4, 6, 8, 10]\n\
    \            guess = [1, 3, 6, 8, 13]\n            compare(game, guess)\n    \
    \        [1, 1, 0, 0, 1]\n            \n            game = [1, 4, 6, 8, 10]\n\
    \            guess = [1, 3, 6, 8, 14]\n            compare(game, guess)\n    \
    \        [1, 1, 0, 0, 1]\n            \n            game = [1, 4, 6, 8, 10]\n\
    \            guess = [1, 3, 6, 8, 15]\n            compare(game, guess)\n    \
    \        [1, 1, 0, 0, 1]\n            \n            game = [1, 4, 6, 8, 10]\n\
    \            guess = [1, 3, 6, 8, 16]\n            compare(game, guess)\n    \
    \        [1, 1, 0, 0, 1]\n            \n            game = [1, 4, 6, 8, 10]\n\
    \            guess = [1, 3, 6, 8, 17]\n            compare(game, guess)\n    \
    \        [1, 1, 0, 0, 1]\n            \n            game = [1, 4, 6, 8, 10]\n\
    \            guess = [1, 3, 6, 8, 18]\n            compare(game, guess)\n    \
    \        [1, 1, 0, 0, 1]\n            \n            game = [1, 4, 6, 8, 10]\n\
    \            guess = [1, 3, 6, 8, 19]\n            compare(game, guess)\n    \
    \        [1, 1, 0, 0, 1]\n            \n            game = [1, 4, 6, 8, 10]\n\
    \            guess = [1, 3, 6, 8, 20]\n            compare(game, guess)\n    \
    \        [1, 1, 0, 0, 1]\n            \n            game = [1, 4, 6, 8, 10]\n\
    \            guess = [1, 3, 6, 8, 21]\n            compare(game, guess)\n    \
    \        [1, 1, 0, 0, 1]\n            \n            game = [1, 4, 6, 8, 10]\n\
    \            guess = [1, 3, 6, 8, 22]\n            compare(game, guess)\n    \
    \        [1, 1, 0, 0, 1]\n            \n            game = [1, 4, \ndef check(candidate):\n\
    \    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0,\
    \ 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0,\
    \ 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n  \
    \  assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n\
    \    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpphg914cq.py\"\
    , line 16\n    game = [1, 4, 6, 8, 10]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, \ndef check(candidate):\n\
    \    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0,\
    \ 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0,\
    \ 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n  \
    \  assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n\
    \    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpebb6d8bh.py\"\
    , line 16\n    , 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, \n  \
    \             ^\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ scores = [1, 5, 3, 7, 9]\n            guesses = [1, 5, 3, 7, 9]\n          \
    \  compare(scores, guesses) == [0, 0, 2, 2]\n            \n            scores\
    \ = [1, 5, 3, 7, 9]\n            guesses = [1, 5, 3, 7, 8]\n            compare(scores,\
    \ guesses) == [0, 0, 2, 2]\n            \n            scores = [1, 5, 3, 7, 9]\n\
    \            guesses = [1, 5, 3, 7, 10]\n            compare(scores, guesses)\
    \ == [0, 0, 2, 2]\n            \n            scores = [1, 5, 3, 7, 9]\n      \
    \      guesses = [1, 5, 3, 7, 11]\n            compare(scores, guesses) == [0,\
    \ 0, 2, 2]\n            \n            scores = [1, 5, 3, 7, 9]\n            guesses\
    \ = [1, 5, 3, 7, 12]\n            compare(scores, guesses) == [0, 0, 2, 2]\n \
    \           \n            scores = [1, 5, 3, 7, 9]\n            guesses = [1,\
    \ 5, 3, 7, 13]\n            compare(scores, guesses) == [0, 0, 2, 2]\n       \
    \     \n            scores = [1, 5, 3, 7, 9]\n            guesses = [1, 5, 3,\
    \ 7, 14]\n            compare(scores, guesses) == [0, 0, 2, 2]\n            \n\
    \            scores = [1, 5, 3, 7, 9]\n            guesses = [1, 5, 3, 7, 15]\n\
    \            compare(scores, guesses) == [0, 0, 2, 2]\n            \n        \
    \    scores = [1, 5, 3, 7, 9]\n            guesses = [1, 5, 3, 7, 16]\n      \
    \      compare(scores, guesses) == [0, 0, 2, 2]\n            \n            scores\
    \ = [1, 5, 3, 7, 9]\n            guesses = [1, 5, 3, 7, 17]\n            compare(scores,\
    \ guesses) == [0, 0, 2, 2]\n            \n            scores = [1, 5, 3, 7, 9]\n\
    \            guesses = [1, 5, 3, 7, 18]\n            compare(scores, guesses)\
    \ == [0, 0, 2, 2]\n            \n            scores = [1, 5, 3, 7, 9]\n      \
    \      guesses = [1, 5, 3, 7, 19]\n            compare(scores, guesses) == [0,\
    \ 0, 2, 2]\n            \n            scores = [1, 5, 3, 7, 9]\n            guesses\
    \ = [1, 5, 3, 7, 20]\n            compare(scores, guesses) == [0, 0, 2, 2]\n \
    \           \n            scores = [1, 5, 3, 7, 9]\n            guesses = [1,\
    \ 5, 3, 7, 21]\n            compare(scores, guesses) == [0, 0, 2, 2]\n       \
    \     \n            scores = [1, 5, 3, 7, 9]\n            guesses = [1, 5, 3,\
    \ 7, 22]\n            compare(scores, guesses) == [0, 0, 2, 2]\n            \n\
    \            scores = [1, 5, \ndef check(candidate):\n    assert candidate([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp66zjq5ot.py\"\
    , line 16\n    scores = [1, 5, 3, 7, 9]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, \ndef check(candidate):\n\
    \    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0,\
    \ 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0,\
    \ 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n  \
    \  assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n\
    \    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp3zzukek.py\"\
    , line 16\n    , 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, \n  \
    \             ^\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n            guess = [10, 20, 30,\
    \ 40, 50, 60, 70, 80, 90]\n            compare(game, guess)\n            >> [0,\
    \ 0, 0, 0, 0, 0, 0, 0]\n            \n            game = [10, 20, 30, 40, 50,\
    \ 60, 70, 80, 90]\n            guess = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n\
    \            compare(game, guess)\n            >> [0, 0, 0, 0, 0, 0, 0, 0]\n \
    \           \n            game = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n      \
    \      guess = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, 0, 0, 0, 0, 0]\n            \n            game\
    \ = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n            guess = [10, 20, 30, 40,\
    \ 50, 60, 70, 80, 90]\n            compare(game, guess)\n            >> [0, 0,\
    \ 0, 0, 0, 0, 0, 0]\n            \n            game = [10, 20, 30, 40, 50, 60,\
    \ 70, 80, 90]\n            guess = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n    \
    \        compare(game, guess)\n            >> [0, 0, 0, 0, 0, 0, 0, 0]\n     \
    \       \n            game = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n          \
    \  guess = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n            compare(game, guess)\n\
    \            >> [0, 0, 0, 0, 0, 0, 0, 0]\n            \n            game = [10,\
    \ 20, 30, 40, 50, 60, 70, 80, 90]\n            guess = [10, 20, 30, 40, 50, 60,\
    \ 70, 80, 90]\n            compare(game, guess)\n            >> [0, 0, 0, 0, 0,\
    \ 0, 0, 0]\n            \n            game = [10, 20, 30, 40, 50, 60, 70, 80,\
    \ 90]\n            guess = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, 0, 0, 0, 0, 0]\n            \n            game\
    \ = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n            guess = [10, 20, 30, 40,\
    \ 50, 60, 70, 80, 90]\n            compare(game, guess)\n            >> [0, 0,\
    \ 0, 0, 0, 0, 0, 0]\n            \n            game = [10, 20, 30, 40, 50, 60,\
    \ 70, 80, 90]\n            guess = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n    \
    \        compare(game, guess)\n            >> [0, 0, 0, 0, 0, 0, 0, 0]\n     \
    \       \n            game = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n          \
    \  guess = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n            compare(game, guess)\n\
    \            >> [0, 0, 0, 0, 0, 0, 0, 0]\n            \n            game = [10,\
    \ 20, 30, 40, 50, 60, 70, 80, 90]\n            guess = [\ndef check(candidate):\n\
    \    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0,\
    \ 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0,\
    \ 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n  \
    \  assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n\
    \    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_i4l9nql.py\"\
    , line 16\n    game = [10, 20, 30, 40, 50, 60, 70, 80, 90]\nIndentationError:\
    \ unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [1, 3, 2]\n            guess = [1, 3, 2]\n            compare(game, guess)\n\
    \            >> [1, 0, -1]\n            \"\"\"\n    \n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \n    \"\"\"\n    \n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0,\
    \ 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0,\
    \ 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n  \
    \  assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n\
    \    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbld8q09o.py\"\
    , line 16\n    game = [1, 3, 2]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ scores = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n            guesses = [10, 20,\
    \ 30, 40, 50, 60, 70, 80, 90]\n            compare(scores, guesses) --> [10, 0,\
    \ 10, 0, 10, 0, 10, 0, 10]\n            \n            scores = [10, 20, 30, 40,\
    \ 50, 60, 70, 80, 90]\n            guesses = [10, 20, 30, 40, 50, 60, 70, 80,\
    \ 90]\n            compare(scores, guesses) --> [10, 0, 10, 0, 10, 0, 10, 0, 10]\n\
    \            \n            scores = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n   \
    \         guesses = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n            compare(scores,\
    \ guesses) --> [10, 0, 10, 0, 10, 0, 10, 0, 10]\n            \n            scores\
    \ = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n            guesses = [10, 20, 30, 40,\
    \ 50, 60, 70, 80, 90]\n            compare(scores, guesses) --> [10, 0, 10, 0,\
    \ 10, 0, 10, 0, 10]\n            \n            scores = [10, 20, 30, 40, 50, 60,\
    \ 70, 80, 90]\n            guesses = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n  \
    \          compare(scores, guesses) --> [10, 0, 10, 0, 10, 0, 10, 0, 10]\n   \
    \         \n            scores = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n      \
    \      guesses = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n            compare(scores,\
    \ guesses) --> [10, 0, 10, 0, 10, 0, 10, 0, 10]\n            \n            scores\
    \ = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n            guesses = [10, 20, 30, 40,\
    \ 50, 60, 70, 80, 90]\n            compare(scores, guesses) --> [10, 0, 10, 0,\
    \ 10, 0, 10, 0, 10]\n            \n            scores = [10, 20, 30, 40, 50, 60,\
    \ 70, 80, 90]\n            guesses = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n  \
    \          compare(scores, guesses) --> [10, 0, 10, 0, 10, 0, 10, 0, 10]\n   \
    \         \n            scores = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n      \
    \      guesses = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n            compare(scores,\
    \ guesses) --> [10, 0, 10, 0, 10, 0, 10, 0, 10]\n            \n            scores\
    \ = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n            guesses = [10, 20, 30, 40,\
    \ 50, 60, 70, 80, 90]\n            compare(scores, guesses) --> [10, 0, 10, 0,\
    \ 10, 0, 10, 0, 10]\n            \n            scores = [10, 20, 30, 40, 50, 60,\
    \ 70, 80, 9\ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 1], [1,\
    \ 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0, 0, 0, 0, 0,\
    \ 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1, 2, 3],\
    \ [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2, 3, 4])\
    \ == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpi1wut0fb.py\"\
    , line 16\n    scores = [10, 20, 30, 40, 50, 60, 70, 80, 90]\nIndentationError:\
    \ unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [1, 2, 3, 4, 5]\n            guess = [1, 3, 5]\n            \n      \
    \      compare(game, guess)\n            \n            # should return [0, -1,\
    \ -1]\n            \"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \ndef check(candidate):\n\
    \    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0,\
    \ 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0,\
    \ 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n  \
    \  assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n\
    \    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3zex86kz.py\"\
    , line 16\n    game = [1, 2, 3, 4, 5]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ scores = [10, 20, 30, 40, 50]\n            guesses = [10, 20, 30, 40, 50]\n\
    \            compare(scores, guesses) == [0, 0, 0, 0, 0]\n            compare(scores,\
    \ guesses[0:2]) == [0, 0, -1, 0, 0]\n            compare(scores, guesses[0:3])\
    \ == [0, 0, -2, 0, 0]\n            compare(scores, guesses[0:4]) == [0, 0, -3,\
    \ 0, 0]\n            compare(scores, guesses[0:5]) == [0, 0, -4, 0, 0]\n     \
    \       compare(scores, guesses[0:6]) == [0, 0, -5, 0, 0]\n            compare(scores,\
    \ guesses[0:7]) == [0, 0, -6, 0, 0]\n            compare(scores, guesses[0:8])\
    \ == [0, 0, -7, 0, 0]\n            compare(scores, guesses[0:9]) == [0, 0, -8,\
    \ 0, 0]\n            compare(scores, guesses[0:10]) == [0, 0, -9, 0, 0]\n    \
    \        compare(scores, guesses[0:11]) == [0, 0, -10, 0, 0]\n            compare(scores,\
    \ guesses[0:12]) == [0, 0, -11, 0, 0]\n            compare(scores, guesses[0:13])\
    \ == [0, 0, -12, 0, 0]\n            compare(scores, guesses[0:14]) == [0, 0, -13,\
    \ 0, 0]\n            compare(scores, guesses[0:15]) == [0, 0, -14, 0, 0]\n   \
    \         compare(scores, guesses[0:16]) == [0, 0, -15, 0, 0]\n            compare(scores,\
    \ guesses[0:17]) == [0, 0, -16, 0, 0]\n            compare(scores, guesses[0:18])\
    \ == [0, 0, -17, 0, 0]\n            compare(scores, guesses[0:19]) == [0, 0, -18,\
    \ 0, 0]\n            compare(scores, guesses[0:20]) == [0, 0, -19, 0, 0]\n   \
    \         compare(scores, guesses[0:21]) == [0, 0, -20, 0, 0]\n            compare(scores,\
    \ guesses[0:22]) == [0, 0, -21, 0, 0]\n            compare(scores, guesses[0:23])\
    \ == [0, 0, -22, 0, 0]\n            compare(scores, guesses[0:24]) == [0, 0, -23,\
    \ 0, 0]\n            compare(scores, guesses[0:25]) == [0, 0, -24, 0, 0]\n   \
    \         compare(scores, guesses[0:26]) == [0, 0, -25, 0, 0]\n            compare(scores,\
    \ guesses[0:27]) == [0, 0, -26, 0, 0]\n            compare(scores, guesses[0:28])\
    \ == [0, 0, -27, 0, 0]\n            compare(scores, guesses[0:29]) == [0, 0, -28,\
    \ 0, 0]\n            compare(scores, guesses[0:30]) == [0, 0, -29, 0, 0]\n   \
    \         compare(scores, guesses[0:31]) == [0, 0, -30, 0, 0]\n            compare(scores,\
    \ \ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3,\
    \ 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0,\
    \ 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1,\
    \ -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) ==\
    \ [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl_8_1e3g.py\"\
    , line 16\n    scores = [10, 20, 30, 40, 50]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [1, 5, 3, 7, 9, 2, 6, 4, 8, 0]\n            guess = [1, 5, 3, 7, 9, 2,\
    \ 6, 4, 8, 0]\n            compare(game, guess)\n            \n            game\
    \ = [1, 5, 3, 7, 9, 2, 6, 4, 8, 0]\n            guess = [1, 5, 3, 7, 9, 2, 6,\
    \ 4, 8, 1]\n            compare(game, guess)\n            \n            game =\
    \ [1, 5, 3, 7, 9, 2, 6, 4, 8, 0]\n            guess = [1, 5, 3, 7, 9, 2, 6, 4,\
    \ 8, 2]\n            compare(game, guess)\n            \n            game = [1,\
    \ 5, 3, 7, 9, 2, 6, 4, 8, 0]\n            guess = [1, 5, 3, 7, 9, 2, 6, 4, 8,\
    \ 3]\n            compare(game, guess)\n            \n            game = [1, 5,\
    \ 3, 7, 9, 2, 6, 4, 8, 0]\n            guess = [1, 5, 3, 7, 9, 2, 6, 4, 8, 4]\n\
    \            compare(game, guess)\n            \n            game = [1, 5, 3,\
    \ 7, 9, 2, 6, 4, 8, 0]\n            guess = [1, 5, 3, 7, 9, 2, 6, 4, 8, 5]\n \
    \           compare(game, guess)\n            \n            game = [1, 5, 3, 7,\
    \ 9, 2, 6, 4, 8, 0]\n            guess = [1, 5, 3, 7, 9, 2, 6, 4, 8, 6]\n    \
    \        compare(game, guess)\n            \n            game = [1, 5, 3, 7, 9,\
    \ 2, 6, 4, 8, 0]\n            guess = [1, 5, 3, 7, 9, 2, 6, 4, 8, 7]\n       \
    \     compare(game, guess)\n            \n            game = [1, 5, 3, 7, 9, 2,\
    \ 6, 4, 8, 0]\n            guess = [1, 5, 3, 7, 9, 2, 6, 4, 8, 8]\n          \
    \  compare(game, guess)\n            \n            game = [1, 5, 3, 7, 9, 2, 6,\
    \ 4, 8, 0]\n            guess = [1, 5, 3, 7, 9, 2, 6, 4, 8, 9]\n            compare(game,\
    \ guess)\n            \n            game = [1, 5, 3, 7, 9, 2, 6, 4, 8, 0]\n  \
    \          guess = [1, 5, 3, 7, 9, 2, 6, 4, 8, 10]\n            compare(game,\
    \ guess)\n            \n            game = [1, 5, 3, 7, 9, 2, 6, 4, 8, 0]\n  \
    \          guess = [1, 5, 3, 7, 9, 2, 6, 4, 8, 11]\n            compare(game,\
    \ guess)\n            \n            game = [1, 5, 3, 7, 9, 2, 6, 4, 8, 0]\n  \
    \          guess = [1, 5, 3, 7, 9, 2, 6, 4, 8, 12]\n            compare(game,\
    \ guess)\n            \n            game = [1, 5, 3, 7, 9, 2, 6, 4, 8, 0]\n  \
    \          gues\ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 1],\
    \ [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0, 0, 0, 0,\
    \ 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1, 2,\
    \ 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2, 3,\
    \ 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps2_cz1cv.py\"\
    , line 16\n    game = [1, 5, 3, 7, 9, 2, 6, 4, 8, 0]\nIndentationError: unexpected\
    \ indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [10, 20, 30, 40, 50]\n            guess = [20, 30, 40, 50, 60]\n    \
    \        compare(game, guess)\n            >> [0, 0, -10, -20, -30]\n        \
    \    \"\"\"\n    \"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \ndef check(candidate):\n    assert candidate([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyds877wr.py\"\
    , line 16\n    game = [10, 20, 30, 40, 50]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [10, 20, 30, 40, 50]\n            guess = [40, 50, 60, 70, 80]\n    \
    \        \n            compare(game, guess)\n            \n            >> [0,\
    \ 0, 2, -5, 0]\n            \n            \"\"\"\n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \ndef check(candidate):\n\
    \    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0,\
    \ 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0,\
    \ 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n  \
    \  assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n\
    \    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph2x9pv0w.py\"\
    , line 16\n    game = [10, 20, 30, 40, 50]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [1, 3, 2]\n            guess = [1, 3, 2]\n            compare(game, guess)\n\
    \            >> [1, 1, 1]\n            \n            game = [1, 3, 2]\n      \
    \      guess = [1, 3, 3]\n            compare(game, guess)\n            >> [1,\
    \ 1, -1]\n            \n            game = [1, 3, 2]\n            guess = [1,\
    \ 3, 1]\n            compare(game, guess)\n            >> [1, 1, 1]\n        \
    \    \n            game = [1, 3, 2]\n            guess = [1, 3, 2]\n         \
    \   compare(game, guess)\n            >> [1, 1, 1]\n            \n           \
    \ game = [1, 3, 2]\n            guess = [1, 3, 3]\n            compare(game, guess)\n\
    \            >> [1, 1, -1]\n            \n            game = [1, 3, 2]\n     \
    \       guess = [1, 3, 1]\n            compare(game, guess)\n            >> [1,\
    \ 1, 1]\n            \n            game = [1, 3, 2]\n            guess = [1, 3,\
    \ 2]\n            compare(game, guess)\n            >> [1, 1, 1]\n           \
    \ \n            game = [1, 3, 2]\n            guess = [1, 3, 3]\n            compare(game,\
    \ guess)\n            >> [1, 1, -1]\n            \n            game = [1, 3, 2]\n\
    \            guess = [1, 3, 1]\n            compare(game, guess)\n           \
    \ >> [1, 1, 1]\n            \n            game = [1, 3, 2]\n            guess\
    \ = [1, 3, 2]\n            compare(game, guess)\n            >> [1, 1, 1]\n  \
    \          \n            game = [1, 3, 2]\n            guess = [1, 3, 3]\n   \
    \         compare(game, guess)\n            >> [1, 1, -1]\n            \n    \
    \        game = [1, 3, 2]\n            guess = [1, 3, 1]\n            compare(game,\
    \ guess)\n            >> [1, 1, 1]\n            \n            game = [1, 3, 2]\n\
    \            guess = [1, 3, 2]\n            compare(game, guess)\n           \
    \ >> [1, 1, 1]\n            \n            game = [1, 3, 2]\n            guess\
    \ = [1, 3, 3]\n            compare(game, guess)\n            >> [1, 1, -1]\n \
    \           \n            game = [1, 3, 2]\n            guess = [1, 3, 1]\n  \
    \          compare(game, guess)\n            >> [1, 1, 1]\n            \n    \
    \        game = [1, 3, 2]\n            guess = [1, 3, 2]\n            compare(game,\
    \ guess)\n            >> [1, 1, 1]\n            \n            game = [1, 3, 2]\n\
    \            guess = [1, 3, 3]\n            compare(game, guess)\n           \
    \ >> [1, 1, -1]\n            \n            game\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n \
    \   assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0,\
    \ 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe2nw32al.py\"\
    , line 16\n    game = [1, 3, 2]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, \ndef check(candidate):\n\
    \    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0,\
    \ 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0,\
    \ 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n  \
    \  assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n\
    \    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7_i9h8u6.py\"\
    , line 16\n    , 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, \n  \
    \             ^\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [5, 10, 15, 20, 25]\n            guess = [10, 20, 30, 40, 50]\n     \
    \       compare(game, guess)\n            >> [0, 0, 2, -5, 0]\n            \"\"\
    \"\n    \"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \ndef check(candidate):\n    assert candidate([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0p99qv9l.py\"\
    , line 16\n    game = [5, 10, 15, 20, 25]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [1,3,5,7,9]\n            guess = [2,4,6,8,10]\n            compare(game,\
    \ guess)\n            \n            game = [1,3,5,7,9]\n            guess = [2,4,6,8,10]\n\
    \            compare(game, guess)\n            \n            game = [1,3,5,7,9]\n\
    \            guess = [2,4,6,8,10]\n            compare(game, guess)\n        \
    \    \n            game = [1,3,5,7,9]\n            guess = [2,4,6,8,10]\n    \
    \        compare(game, guess)\n            \n            game = [1,3,5,7,9]\n\
    \            guess = [2,4,6,8,10]\n            compare(game, guess)\n        \
    \    \n            game = [1,3,5,7,9]\n            guess = [2,4,6,8,10]\n    \
    \        compare(game, guess)\n            \n            game = [1,3,5,7,9]\n\
    \            guess = [2,4,6,8,10]\n            compare(game, guess)\n        \
    \    \n            game = [1,3,5,7,9]\n            guess = [2,4,6,8,10]\n    \
    \        compare(game, guess)\n            \n            game = [1,3,5,7,9]\n\
    \            guess = [2,4,6,8,10]\n            compare(game, guess)\n        \
    \    \n            game = [1,3,5,7,9]\n            guess = [2,4,6,8,10]\n    \
    \        compare(game, guess)\n            \n            game = [1,3,5,7,9]\n\
    \            guess = [2,4,6,8,10]\n            compare(game, guess)\n        \
    \    \n            game = [1,3,5,7,9]\n            guess = [2,4,6,8,10]\n    \
    \        compare(game, guess)\n            \n            game = [1,3,5,7,9]\n\
    \            guess = [2,4,6,8,10]\n            compare(game, guess)\n        \
    \    \n            game = [1,3,5,7,9]\n            guess = [2,4,6,8,10]\n    \
    \        compare(game, guess)\n            \n            game = [1,3,5,7,9]\n\
    \            guess = [2,4,6,8,10]\n            compare(game, guess)\n        \
    \    \n            game = [1,3,5,7,9]\n            guess = [2,4,6,8,10]\n    \
    \        compare(game, guess)\n            \n            game = [1,3,5,7,9]\n\
    \            guess = [2,4,6,8,10]\n            compare(game, guess)\n        \
    \    \n            game = [1,3,5,7,9]\n            guess = [2,4,6,8,10]\n    \
    \        compare(game, guess)\n            \n            game = [1,3,5,7,9]\n\
    def check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2,\
    \ -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0,\
    \ 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2,\
    \ -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2,\
    \ 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzror6ljt.py\"\
    , line 16\n    game = [1,3,5,7,9]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [1, 3, 2]\n            guess = [1, 3, 2]\n            compare(game, guess)\n\
    \            [0, -1, -1]\n            \n            game = [1, 3, 2]\n       \
    \     guess = [1, 3, 3]\n            compare(game, guess)\n            [0, -1,\
    \ -1]\n            \n            game = [1, 3, 2]\n            guess = [1, 3,\
    \ 1]\n            compare(game, guess)\n            [0, -1, -1]\n            \n\
    \            game = [1, 3, 2]\n            guess = [1, 3, 2]\n            compare(game,\
    \ guess)\n            [0, -1, -1]\n            \n            game = [1, 3, 2]\n\
    \            guess = [1, 3, 3]\n            compare(game, guess)\n           \
    \ [0, -1, -1]\n            \n            game = [1, 3, 2]\n            guess =\
    \ [1, 3, 1]\n            compare(game, guess)\n            [0, -1, -1]\n     \
    \       \n            game = [1, 3, 2]\n            guess = [1, 3, 2]\n      \
    \      compare(game, guess)\n            [0, -1, -1]\n            \n         \
    \   game = [1, 3, 2]\n            guess = [1, 3, 3]\n            compare(game,\
    \ guess)\n            [0, -1, -1]\n            \n            game = [1, 3, 2]\n\
    \            guess = [1, 3, 1]\n            compare(game, guess)\n           \
    \ [0, -1, -1]\n            \n            game = [1, 3, 2]\n            guess =\
    \ [1, 3, 2]\n            compare(game, guess)\n            [0, -1, -1]\n     \
    \       \n            game = [1, 3, 2]\n            guess = [1, 3, 3]\n      \
    \      compare(game, guess)\n            [0, -1, -1]\n            \n         \
    \   game = [1, 3, 2]\n            guess = [1, 3, 1]\n            compare(game,\
    \ guess)\n            [0, -1, -1]\n            \n            game = [1, 3, 2]\n\
    \            guess = [1, 3, 2]\n            compare(game, guess)\n           \
    \ [0, -1, -1]\n            \n            game = [1, 3, 2]\n            guess =\
    \ [1, 3, 3]\n            compare(game, guess)\n            [0, -1, -1]\n     \
    \       \n            game = [1, 3, 2]\n            guess = [1, 3, 1]\n      \
    \      compare(game, guess)\n            [0, -1, -1]\n            \n         \
    \   game = [1, 3, 2]\n            guess = [1, 3, 2]\n            compare(game,\
    \ guess)\n            [0, -1, -1]\n            \n            game = [1, 3, 2]\n\
    \            guess = [1, 3, 3]\n            compare(game, guess)\n           \
    \ [0, -1, -1]\n            \n            game = [1, 3, 2]\n            guess =\
    \ [1, 3, 1]\n            compare(game, \ndef check(candidate):\n    assert candidate([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu4sbgoaw.py\"\
    , line 16\n    game = [1, 3, 2]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [10, 15, 20, 25]\n            guess = [10, 15, 20, 25]\n            compare(game,\
    \ guess)\n            >> [0, 0, 2, 2]\n            \n            game = [10, 15,\
    \ 20, 25]\n            guess = [10, 15, 20, 25]\n            compare(game, guess)\n\
    \            >> [0, 0, 2, 2]\n            \n            game = [10, 15, 20, 25]\n\
    \            guess = [10, 15, 20, 25]\n            compare(game, guess)\n    \
    \        >> [0, 0, 2, 2]\n            \n            game = [10, 15, 20, 25]\n\
    \            guess = [10, 15, 20, 25]\n            compare(game, guess)\n    \
    \        >> [0, 0, 2, 2]\n            \n            game = [10, 15, 20, 25]\n\
    \            guess = [10, 15, 20, 25]\n            compare(game, guess)\n    \
    \        >> [0, 0, 2, 2]\n            \n            game = [10, 15, 20, 25]\n\
    \            guess = [10, 15, 20, 25]\n            compare(game, guess)\n    \
    \        >> [0, 0, 2, 2]\n            \n            game = [10, 15, 20, 25]\n\
    \            guess = [10, 15, 20, 25]\n            compare(game, guess)\n    \
    \        >> [0, 0, 2, 2]\n            \n            game = [10, 15, 20, 25]\n\
    \            guess = [10, 15, 20, 25]\n            compare(game, guess)\n    \
    \        >> [0, 0, 2, 2]\n            \n            game = [10, 15, 20, 25]\n\
    \            guess = [10, 15, 20, 25]\n            compare(game, guess)\n    \
    \        >> [0, 0, 2, 2]\n            \n            game = [10, 15, 20, 25]\n\
    \            guess = [10, 15, 20, 25]\n            compare(game, guess)\n    \
    \        >> [0, 0, 2, 2]\n            \n            game = [10, 15, 20, 25]\n\
    \            guess = [10, 15, 20, 25]\n            compare(game, guess)\n    \
    \        >> [0, 0, 2, 2]\n            \n            game = [10, 15, 20, 25]\n\
    \            guess = [10, 15, 20, 25]\n            compare(game, guess)\n    \
    \        >> [0, 0, 2, 2]\n            \n            game = [10, 15, 20, 25]\n\
    \            guess = [10, 15, 20, 25]\n            compare(game, guess)\n    \
    \        >> [0, 0, 2, 2]\n            \n            game = [10, 15, 20, 25]\n\
    \            guess = [10, 15, 20, 25]\n            compare(game, guess)\n    \
    \        >> [0, 0, 2, 2]\n            \n            game = [10, 15, 20, 25]\n\
    \            guess = [10, 15, 20, 25]\n            compare(game\ndef check(candidate):\n\
    \    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0,\
    \ 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0,\
    \ 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n  \
    \  assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n\
    \    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfee4n8em.py\"\
    , line 16\n    game = [10, 15, 20, 25]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [10, 7, 4, 9, 1]\n            guess = [9, 10, 7, 4, 1]\n            compare(game,\
    \ guess)\n            >> [5, -5, -5, -5, -5]\n            \"\"\"\n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    def check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2,\
    \ -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0,\
    \ 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2,\
    \ -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2,\
    \ 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkczqi6yy.py\"\
    , line 16\n    game = [10, 7, 4, 9, 1]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ scores = [10, 20, 30, 40, 50]\n            guesses = [10, 20, 30, 40, 50]\n\
    \            compare(scores, guesses) --> [10, -20, 30, -40, 50]\n           \
    \ \n            scores = [10, 20, 30, 40, 50]\n            guesses = [10, 20,\
    \ 30, 40, 50]\n            compare(scores, guesses) --> [10, -20, 30, -40, 50]\n\
    \            \n            scores = [10, 20, 30, 40, 50]\n            guesses\
    \ = [10, 20, 30, 40, 50]\n            compare(scores, guesses) --> [10, -20, 30,\
    \ -40, 50]\n            \n            scores = [10, 20, 30, 40, 50]\n        \
    \    guesses = [10, 20, 30, 40, 50]\n            compare(scores, guesses) -->\
    \ [10, -20, 30, -40, 50]\n            \n            scores = [10, 20, 30, 40,\
    \ 50]\n            guesses = [10, 20, 30, 40, 50]\n            compare(scores,\
    \ guesses) --> [10, -20, 30, -40, 50]\n            \n            scores = [10,\
    \ 20, 30, 40, 50]\n            guesses = [10, 20, 30, 40, 50]\n            compare(scores,\
    \ guesses) --> [10, -20, 30, -40, 50]\n            \n            scores = [10,\
    \ 20, 30, 40, 50]\n            guesses = [10, 20, 30, 40, 50]\n            compare(scores,\
    \ guesses) --> [10, -20, 30, -40, 50]\n            \n            scores = [10,\
    \ 20, 30, 40, 50]\n            guesses = [10, 20, 30, 40, 50]\n            compare(scores,\
    \ guesses) --> [10, -20, 30, -40, 50]\n            \n            scores = [10,\
    \ 20, 30, 40, 50]\n            guesses = [10, 20, 30, 40, 50]\n            compare(scores,\
    \ guesses) --> [10, -20, 30, -40, 50]\n            \n            scores = [10,\
    \ 20, 30, 40, 50]\n            guesses = [10, 20, 30, 40, 50]\n            compare(scores,\
    \ guesses) --> [10, -20, 30, -40, 50]\n            \n            scores = [10,\
    \ 20, 30, 40, 50]\n            guesses = [10, 20, 30, 40, 50]\n            compare(scores,\
    \ guesses) --> [10, -20, 30, -40, 50]\n            \n            scores = [10,\
    \ 20, 30, 40, 50]\n            guesses = [10, 20, 30, 40, 50]\n            compare(scores,\
    \ guesses) --> [10, -20, 30, -40, 50]\n            \n            scores = [10,\
    \ 20, 30, 40, 50]\n            guesses = [10, 20, 30, 40, 50]\ndef check(candidate):\n\
    \    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0,\
    \ 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0,\
    \ 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n  \
    \  assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n\
    \    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkdgbrgza.py\"\
    , line 16\n    scores = [10, 20, 30, 40, 50]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [1, 5, 3, 7, 9, 2]\n            guess = [1, 5, 3, 7, 9, 2]\n        \
    \    compare(game, guess)\n            >> [0, 0, 0, 0, 0]\n            \n    \
    \        game = [1, 5, 3, 7, 9, 2]\n            guess = [1, 5, 3, 7, 9, 3]\n \
    \           compare(game, guess)\n            >> [3, 3, 3, 3, 3]\n           \
    \ \n            game = [1, 5, 3, 7, 9, 2]\n            guess = [1, 5, 3, 7, 9,\
    \ 4]\n            compare(game, guess)\n            >> [4, 4, 4, 4, 4]\n     \
    \       \n            game = [1, 5, 3, 7, 9, 2]\n            guess = [1, 5, 3,\
    \ 7, 9, 5]\n            compare(game, guess)\n            >> [5, 5, 5, 5, 5]\n\
    \            \n            game = [1, 5, 3, 7, 9, 2]\n            guess = [1,\
    \ 5, 3, 7, 9, 6]\n            compare(game, guess)\n            >> [6, 6, 6, 6,\
    \ 6]\n            \n            game = [1, 5, 3, 7, 9, 2]\n            guess =\
    \ [1, 5, 3, 7, 9, 7]\n            compare(game, guess)\n            >> [7, 7,\
    \ 7, 7, 7]\n            \n            game = [1, 5, 3, 7, 9, 2]\n            guess\
    \ = [1, 5, 3, 7, 9, 8]\n            compare(game, guess)\n            >> [8, 8,\
    \ 8, 8, 8]\n            \n            game = [1, 5, 3, 7, 9, 2]\n            guess\
    \ = [1, 5, 3, 7, 9, 9]\n            compare(game, guess)\n            >> [9, 9,\
    \ 9, 9, 9]\n            \n            game = [1, 5, 3, 7, 9, 2]\n            guess\
    \ = [1, 5, 3, 7, 9, 10]\n            compare(game, guess)\n            >> [10,\
    \ 10, 10, 10, 10]\n            \n            game = [1, 5, 3, 7, 9, 2]\n     \
    \       guess = [1, 5, 3, 7, 9, 11]\n            compare(game, guess)\n      \
    \      >> [11, 11, 11, 11, 11]\n            \n            game = [1, 5, 3, 7,\
    \ 9, 2]\n            guess = [1, 5, 3, 7, 9, 12]\n            compare(game, guess)\n\
    \            >> [12, 12, 12, 12, 12]\n            \n            game = [1, 5,\
    \ 3, 7, 9, 2]\n            guess = [1, 5, 3, 7, 9, 13]\n            compare(game,\
    \ guess)\n            >> [13, 13, 13, 13, 13]\n            \n            game\
    \ = [1, 5, 3, 7, 9, 2]\n            guess = [1, 5, 3, 7, 9, 14]\n            compare(game,\
    \ guess)\n            >> [14, 14, 14, 14, 14]\n            \n            game\
    \ = [1, 5, 3, \ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 1],\
    \ [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0, 0, 0, 0,\
    \ 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1, 2,\
    \ 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2, 3,\
    \ 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbbj8ay1r.py\"\
    , line 16\n    game = [1, 5, 3, 7, 9, 2]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [5, 3, 6, 1, 4, 2]\n            guess = [3, 6, 1, 4, 2, 5]\n        \
    \    \n            compare(game, guess)\n            \n            returns [0,\
    \ 0, 0, 1, 0, 0]\n            \n            \"\"\"\n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \ndef check(candidate):\n\
    \    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0,\
    \ 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0,\
    \ 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n  \
    \  assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n\
    \    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpr491i8n6.py\"\
    , line 16\n    game = [5, 3, 6, 1, 4, 2]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [2,1,4,3,5,1,2]\n            guess = [2,1,4,3,5,1,2]\n            compare(game,\
    \ guess)\n            \n            game = [2,1,4,3,5,1,2]\n            guess\
    \ = [2,1,4,3,5,1,3]\n            compare(game, guess)\n            \n        \
    \    game = [2,1,4,3,5,1,2]\n            guess = [2,1,4,3,5,1,4]\n           \
    \ compare(game, guess)\n            \n            game = [2,1,4,3,5,1,2]\n   \
    \         guess = [2,1,4,3,5,1,5]\n            compare(game, guess)\n        \
    \    \n            game = [2,1,4,3,5,1,2]\n            guess = [2,1,4,3,5,1,6]\n\
    \            compare(game, guess)\n            \n            game = [2,1,4,3,5,1,2]\n\
    \            guess = [2,1,4,3,5,1,7]\n            compare(game, guess)\n     \
    \       \n            game = [2,1,4,3,5,1,2]\n            guess = [2,1,4,3,5,1,8]\n\
    \            compare(game, guess)\n            \n            game = [2,1,4,3,5,1,2]\n\
    \            guess = [2,1,4,3,5,1,9]\n            compare(game, guess)\n     \
    \       \n            game = [2,1,4,3,5,1,2]\n            guess = [2,1,4,3,5,1,10]\n\
    \            compare(game, guess)\n            \n            game = [2,1,4,3,5,1,2]\n\
    \            guess = [2,1,4,3,5,1,11]\n            compare(game, guess)\n    \
    \        \n            game = [2,1,4,3,5,1,2]\n            guess = [2,1,4,3,5,1,12]\n\
    \            compare(game, guess)\n            \n            game = [2,1,4,3,5,1,2]\n\
    \            guess = [2,1,4,3,5,1,13]\n            compare(game, guess)\n    \
    \        \n            game = [2,1,4,3,5,1,2]\n            guess = [2,1,4,3,5,1,14]\n\
    \            compare(game, guess)\n            \n            game = [2,1,4,3,5,1,2]\n\
    \            guess = [2,1,4,3,5,1,15]\n            compare(game, guess)\n    \
    \        \n            game = [2,1,4,3,5,1,2]\n            guess = [2,1,4,3,5,1,16]\n\
    \            compare(game, guess)\n            \n            game = [2,1,4,3,5,1,2]\n\
    \            guess = [2,1,4,3,5,1,17]\n            compare(\ndef check(candidate):\n\
    \    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0,\
    \ 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0,\
    \ 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n  \
    \  assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n\
    \    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwl2lwz4c.py\"\
    , line 16\n    game = [2,1,4,3,5,1,2]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [10, 20, 30, 40, 50]\n            guess = [10, 20, 30, 40, 50]\n    \
    \        compare(game, guess)\n            >> [10, -10, -10, -10, -10]\n     \
    \       \n            game = [10, 20, 30, 40, 50]\n            guess = [10, 20,\
    \ 30, 40, 50]\n            compare(game, guess)\n            >> [10, -10, -10,\
    \ -10, -10]\n            \n            game = [10, 20, 30, 40, 50]\n         \
    \   guess = [10, 20, 30, 40, 50]\n            compare(game, guess)\n         \
    \   >> [10, -10, -10, -10, -10]\n            \n            game = [10, 20, 30,\
    \ 40, 50]\n            guess = [10, 20, 30, 40, 50]\n            compare(game,\
    \ guess)\n            >> [10, -10, -10, -10, -10]\n            \n            game\
    \ = [10, 20, 30, 40, 50]\n            guess = [10, 20, 30, 40, 50]\n         \
    \   compare(game, guess)\n            >> [10, -10, -10, -10, -10]\n          \
    \  \n            game = [10, 20, 30, 40, 50]\n            guess = [10, 20, 30,\
    \ 40, 50]\n            compare(game, guess)\n            >> [10, -10, -10, -10,\
    \ -10]\n            \n            game = [10, 20, 30, 40, 50]\n            guess\
    \ = [10, 20, 30, 40, 50]\n            compare(game, guess)\n            >> [10,\
    \ -10, -10, -10, -10]\n            \n            game = [10, 20, 30, 40, 50]\n\
    \            guess = [10, 20, 30, 40, 50]\n            compare(game, guess)\n\
    \            >> [10, -10, -10, -10, -10]\n            \n            game = [10,\
    \ 20, 30, 40, 50]\n            guess = [10, 20, 30, 40, 50]\n            compare(game,\
    \ guess)\n            >> [10, -10, -10, -10, -10]\n            \n            game\
    \ = [10, 20, 30, 40, 50]\n            guess = [10, 20, 30, 40, 50]\n         \
    \   compare(game, guess)\n            >> [10, -10, -10, -10, -10]\n          \
    \  \n            game = [10, 20, 30, 40, 50]\n            guess = [10, 20, 30,\
    \ 40, 50]\n            compare(game, guess)\n            >> [10, -10, -10, -10,\
    \ -10]\n            \n            game = [10, 20, 30, 40, 50]\n            guess\
    \ = [10, 20, 30, 40, 50]\n            compare(game, guess)\n            >> [10,\
    \ -10, -10, -10, -10\ndef check(candidate):\n    assert candidate([1, 2, 3, 4,\
    \ 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjhw79z08.py\"\
    , line 16\n    game = [10, 20, 30, 40, 50]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [1, 5, 3, 6, 2, 4]\n            guess = [1, 5, 3, 6, 2, 4]\n        \
    \    compare(game, guess)\n            \n            game = [1, 5, 3, 6, 2, 4]\n\
    \            guess = [1, 5, 3, 6, 2, 5]\n            compare(game, guess)\n  \
    \          \n            game = [1, 5, 3, 6, 2, 4]\n            guess = [1, 5,\
    \ 3, 6, 2, 4]\n            compare(game, guess)\n            \n            game\
    \ = [1, 5, 3, 6, 2, 4]\n            guess = [1, 5, 3, 6, 2, 4]\n            compare(game,\
    \ guess)\n            \n            game = [1, 5, 3, 6, 2, 4]\n            guess\
    \ = [1, 5, 3, 6, 2, 4]\n            compare(game, guess)\n            \n     \
    \       game = [1, 5, 3, 6, 2, 4]\n            guess = [1, 5, 3, 6, 2, 4]\n  \
    \          compare(game, guess)\n            \n            game = [1, 5, 3, 6,\
    \ 2, 4]\n            guess = [1, 5, 3, 6, 2, 4]\n            compare(game, guess)\n\
    \            \n            game = [1, 5, 3, 6, 2, 4]\n            guess = [1,\
    \ 5, 3, 6, 2, 4]\n            compare(game, guess)\n            \n           \
    \ game = [1, 5, 3, 6, 2, 4]\n            guess = [1, 5, 3, 6, 2, 4]\n        \
    \    compare(game, guess)\n            \n            game = [1, 5, 3, 6, 2, 4]\n\
    \            guess = [1, 5, 3, 6, 2, 4]\n            compare(game, guess)\n  \
    \          \n            game = [1, 5, 3, 6, 2, 4]\n            guess = [1, 5,\
    \ 3, 6, 2, 4]\n            compare(game, guess)\n            \n            game\
    \ = [1, 5, 3, 6, 2, 4]\n            guess = [1, 5, 3, 6, 2, 4]\n            compare(game,\
    \ guess)\n            \n            game = [1, 5, 3, 6, 2, 4]\n            guess\
    \ = [1, 5, 3, 6, 2, 4]\n            compare(game, guess)\n            \n     \
    \       game = [1, 5, 3, 6, 2, 4]\n            guess = [1, 5, 3, 6, 2, 4]\n  \
    \          compare(game, guess)\n            \n            game = [1, 5, 3, 6,\
    \ 2, 4]\n            guess = [1, 5, 3, 6, 2, 4]\n            compare(game, guess)\n\
    \            \n            game = [1, 5, 3, 6, 2, 4]\n            guess = [1,\
    \ 5, 3, 6, 2, 4]\n            compare(game, guess)\n            \n           \
    \ game = [1, 5, 3, 6, 2, 4]\n            guess = [1, 5, 3, 6, 2, 4]\n        \
    \    compare(game, guess)\n            \n            game\ndef check(candidate):\n\
    \    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0,\
    \ 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0,\
    \ 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n  \
    \  assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n\
    \    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxx198o0t.py\"\
    , line 16\n    game = [1, 5, 3, 6, 2, 4]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [10, 7, 5, 3, 1]\n            guess = [7, 5, 3, 1]\n            \n  \
    \          compare(game, guess)\n            \n            returns [0, 0, 2, -1]\n\
    \            \n            \"\"\"\n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n\ndef check(candidate):\n   \
    \ assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert\
    \ candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n\
    \    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbu52w5rn.py\"\
    , line 16\n    game = [10, 7, 5, 3, 1]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, \ndef check(candidate):\n\
    \    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0,\
    \ 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0,\
    \ 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n  \
    \  assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n\
    \    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbhsx3nsz.py\"\
    , line 16\n    , 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, \n  \
    \             ^\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [2,1,4,3,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,\n\
    def check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2,\
    \ -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0,\
    \ 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2,\
    \ -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2,\
    \ 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpaiobr6ut.py\"\
    , line 16\n    ,273,274,275,276,277,278,279,280,\n               ^\nIndentationError:\
    \ unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [10, 20, 30, 40, 50]\n            guess = [10, 20, 30, 40, 50]\n    \
    \        compare(game, guess)\n            \n            game = [10, 20, 30, 40,\
    \ 50]\n            guess = [10, 20, 30, 40, 50]\n            compare(game, guess)\n\
    \            \n            game = [10, 20, 30, 40, 50]\n            guess = [10,\
    \ 20, 30, 40, 50]\n            compare(game, guess)\n            \n          \
    \  game = [10, 20, 30, 40, 50]\n            guess = [10, 20, 30, 40, 50]\n   \
    \         compare(game, guess)\n            \n            game = [10, 20, 30,\
    \ 40, 50]\n            guess = [10, 20, 30, 40, 50]\n            compare(game,\
    \ guess)\n            \n            game = [10, 20, 30, 40, 50]\n            guess\
    \ = [10, 20, 30, 40, 50]\n            compare(game, guess)\n            \n   \
    \         game = [10, 20, 30, 40, 50]\n            guess = [10, 20, 30, 40, 50]\n\
    \            compare(game, guess)\n            \n            game = [10, 20, 30,\
    \ 40, 50]\n            guess = [10, 20, 30, 40, 50]\n            compare(game,\
    \ guess)\n            \n            game = [10, 20, 30, 40, 50]\n            guess\
    \ = [10, 20, 30, 40, 50]\n            compare(game, guess)\n            \n   \
    \         game = [10, 20, 30, 40, 50]\n            guess = [10, 20, 30, 40, 50]\n\
    \            compare(game, guess)\n            \n            game = [10, 20, 30,\
    \ 40, 50]\n            guess = [10, 20, 30, 40, 50]\n            compare(game,\
    \ guess)\n            \n            game = [10, 20, 30, 40, 50]\n            guess\
    \ = [10, 20, 30, 40, 50]\n            compare(game, guess)\n            \n   \
    \         game = [10, 20, 30, 40, 50]\n            guess = [10, 20, 30, 40, 50]\n\
    \            compare(game, guess)\n            \n            game = [10, 20, 30,\
    \ 40, 50]\n            guess = [10, 20, 30, 40, 50]\n            compare(game,\
    \ guess)\n            \n            game = [10, 20, 30, 40, 50]\n            guess\
    \ = [10, 20, 30, 40, 50]\n            compare(game, guess)\n            \n   \
    \         game = [10, 20, 30, 40, 50]\n            guess = [10, 20, 30, 40, 50]\n\
    \            compare(game, guess)\n            \n            game = [10, 20, 30,\
    \ 40, 50]\n            guess = [10, 20, 30, 40, 50]\n            compare(game,\
    \ guess)\n            \n            game\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprb4nijlb.py\"\
    , line 16\n    game = [10, 20, 30, 40, 50]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [1, 5, 3, 7, 9, 2]\n            guess = [1, 5, 3, 7, 9, 2]\n        \
    \    compare(game, guess)\n            >> [0, 0, 0, 0, 0]\n            \n    \
    \        game = [1, 5, 3, 7, 9, 2]\n            guess = [1, 5, 3, 7, 9, 3]\n \
    \           compare(game, guess)\n            >> [0, 0, 0, 0, 0]\n           \
    \ \n            game = [1, 5, 3, 7, 9, 2]\n            guess = [1, 5, 3, 7, 9,\
    \ 4]\n            compare(game, guess)\n            >> [0, 0, 0, 0, 0]\n     \
    \       \n            game = [1, 5, 3, 7, 9, 2]\n            guess = [1, 5, 3,\
    \ 7, 9, 5]\n            compare(game, guess)\n            >> [0, 0, 0, 0, 0]\n\
    \            \n            game = [1, 5, 3, 7, 9, 2]\n            guess = [1,\
    \ 5, 3, 7, 9, 6]\n            compare(game, guess)\n            >> [0, 0, 0, 0,\
    \ 0]\n            \n            game = [1, 5, 3, 7, 9, 2]\n            guess =\
    \ [1, 5, 3, 7, 9, 7]\n            compare(game, guess)\n            >> [0, 0,\
    \ 0, 0, 0]\n            \n            game = [1, 5, 3, 7, 9, 2]\n            guess\
    \ = [1, 5, 3, 7, 9, 8]\n            compare(game, guess)\n            >> [0, 0,\
    \ 0, 0, 0]\n            \n            game = [1, 5, 3, 7, 9, 2]\n            guess\
    \ = [1, 5, 3, 7, 9, 9]\n            compare(game, guess)\n            >> [0, 0,\
    \ 0, 0, 0]\n            \n            game = [1, 5, 3, 7, 9, 2]\n            guess\
    \ = [1, 5, 3, 7, 9, 10]\n            compare(game, guess)\n            >> [0,\
    \ 0, 0, 0, 0]\n            \n            game = [1, 5, 3, 7, 9, 2]\n         \
    \   guess = [1, 5, 3, 7, 9, 11]\n            compare(game, guess)\n          \
    \  >> [0, 0, 0, 0, 0]\n            \n            game = [1, 5, 3, 7, 9, 2]\n \
    \           guess = [1, 5, 3, 7, 9, 12]\n            compare(game, guess)\n  \
    \          >> [0, 0, 0, 0, 0]\n            \n            game = [1, 5, 3, 7, 9,\
    \ 2]\n            guess = [1, 5, 3, 7, 9, 13]\n            compare(game, guess)\n\
    \            >> [0, 0, 0, 0, 0]\n            \n            game = [1, 5, 3, 7,\
    \ 9, 2]\n            guess = [1, 5, 3, 7, 9, 14]\n            compare(game, guess)\n\
    \            >> [0, 0, 0, 0, 0]\n            \n            game = [1, 5, 3, 7,\
    \ 9, 2]\n            guess = [1, 5, 3, 7, 9, 15]\n            compare(game, guess)\n\
    \            >> [0, 0, 0, 0, 0]\n            \n            game = [\ndef check(candidate):\n\
    \    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0,\
    \ 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0,\
    \ 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n  \
    \  assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n\
    \    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1dtlbv4c.py\"\
    , line 16\n    game = [1, 5, 3, 7, 9, 2]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [1, 5, 3, 7, 9]\n            guess = [1, 5, 3, 7, 9]\n            compare(game,\
    \ guess)\n            >> [0, 0, -1, 0, 0]\n            \n            game = [1,\
    \ 5, 3, 7, 9]\n            guess = [1, 5, 3, 7, 10]\n            compare(game,\
    \ guess)\n            >> [0, 0, -1, 0, 0]\n            \n            game = [1,\
    \ 5, 3, 7, 9]\n            guess = [1, 5, 3, 7, 8]\n            compare(game,\
    \ guess)\n            >> [0, 0, -1, 0, 0]\n            \n            game = [1,\
    \ 5, 3, 7, 9]\n            guess = [1, 5, 3, 7, 9]\n            compare(game,\
    \ guess)\n            >> [0, 0, -1, 0, 0]\n            \n            game = [1,\
    \ 5, 3, 7, 9]\n            guess = [1, 5, 3, 7, 10]\n            compare(game,\
    \ guess)\n            >> [0, 0, -1, 0, 0]\n            \n            game = [1,\
    \ 5, 3, 7, 9]\n            guess = [1, 5, 3, 7, 8]\n            compare(game,\
    \ guess)\n            >> [0, 0, -1, 0, 0]\n            \n            game = [1,\
    \ 5, 3, 7, 9]\n            guess = [1, 5, 3, 7, 9]\n            compare(game,\
    \ guess)\n            >> [0, 0, -1, 0, 0]\n            \n            game = [1,\
    \ 5, 3, 7, 9]\n            guess = [1, 5, 3, 7, 10]\n            compare(game,\
    \ guess)\n            >> [0, 0, -1, 0, 0]\n            \n            game = [1,\
    \ 5, 3, 7, 9]\n            guess = [1, 5, 3, 7, 8]\n            compare(game,\
    \ guess)\n            >> [0, 0, -1, 0, 0]\n            \n            game = [1,\
    \ 5, 3, 7, 9]\n            guess = [1, 5, 3, 7, 9]\n            compare(game,\
    \ guess)\n            >> [0, 0, -1, 0, 0]\n            \n            game = [1,\
    \ 5, 3, 7, 9]\n            guess = [1, 5, 3, 7, 10]\n            compare(game,\
    \ guess)\n            >> [0, 0, -1, 0, 0]\n            \n            game = [1,\
    \ 5, 3, 7, 9]\n            guess = [1, 5, 3, 7, 8]\n            compare(game,\
    \ guess)\n            >> [0, 0, -1, 0, 0]\n            \n            game = [1,\
    \ 5, 3, 7, 9]\n            guess = [1, 5, 3, 7, 9]\n            compare(game,\
    \ guess)\n            >> [0, 0, -1, 0, 0]\n            \n            game = [1,\
    \ 5, 3, 7, 9]\n            guess = [1, 5, 3, 7, 10]\n            compare(game,\
    \ guess)\n            >> [0, 0, -1, 0, 0]\n            \n            game = [1,\
    \ 5, 3, 7, 9]\n            guess = [1, 5, 3, 7, 8]\n            compare(game\n\
    def check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2,\
    \ -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0,\
    \ 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2,\
    \ -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2,\
    \ 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsnlt13w7.py\"\
    , line 16\n    game = [1, 5, 3, 7, 9]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [5, 7, 9, 10, 11, 12, 13, 14]\n            guess = [5, 7, 9, 10, 11,\
    \ 12, 13, 14]\n            compare(game, guess)\n            >> [0, 0, 0, 0, 0,\
    \ 0, 0]\n            \n            game = [5, 7, 9, 10, 11, 12, 13, 14]\n    \
    \        guess = [5, 7, 9, 10, 11, 12, 13, 14]\n            compare(game, guess)\n\
    \            >> [0, 0, 0, 0, 0, 0, 0]\n            \n            game = [5, 7,\
    \ 9, 10, 11, 12, 13, 14]\n            guess = [5, 7, 9, 10, 11, 12, 13, 14]\n\
    \            compare(game, guess)\n            >> [0, 0, 0, 0, 0, 0, 0]\n    \
    \        \n            game = [5, 7, 9, 10, 11, 12, 13, 14]\n            guess\
    \ = [5, 7, 9, 10, 11, 12, 13, 14]\n            compare(game, guess)\n        \
    \    >> [0, 0, 0, 0, 0, 0, 0]\n            \n            game = [5, 7, 9, 10,\
    \ 11, 12, 13, 14]\n            guess = [5, 7, 9, 10, 11, 12, 13, 14]\n       \
    \     compare(game, guess)\n            >> [0, 0, 0, 0, 0, 0, 0]\n           \
    \ \n            game = [5, 7, 9, 10, 11, 12, 13, 14]\n            guess = [5,\
    \ 7, 9, 10, 11, 12, 13, 14]\n            compare(game, guess)\n            >>\
    \ [0, 0, 0, 0, 0, 0, 0]\n            \n            game = [5, 7, 9, 10, 11, 12,\
    \ 13, 14]\n            guess = [5, 7, 9, 10, 11, 12, 13, 14]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, 0, 0, 0, 0]\n            \n            game\
    \ = [5, 7, 9, 10, 11, 12, 13, 14]\n            guess = [5, 7, 9, 10, 11, 12, 13,\
    \ 14]\n            compare(game, guess)\n            >> [0, 0, 0, 0, 0, 0, 0]\n\
    \            \n            game = [5, 7, 9, 10, 11, 12, 13, 14]\n            guess\
    \ = [5, 7, 9, 10, 11, 12, 13, 14]\n            compare(game, guess)\n        \
    \    >> [0, 0, 0, 0, 0, 0, 0]\n            \n            game = [5, 7, 9, 10,\
    \ 11, 12, 13, 14]\n            guess = [5, 7, 9, 10, 11, 12, 13, 14]\n       \
    \     compare(game, guess)\n            >> [0, 0, 0, 0, 0, 0, 0]\n           \
    \ \n            game = [5, 7, 9, 10, 11, 12, 13, 14]\n            guess = [5,\
    \ 7, 9, 10, 11, 12, 13, 14]\n            compare(game, guess)\n            >>\
    \ [0, 0, 0, 0, 0, 0, 0]\n            \n            game = [5, 7, 9, 10, 11, 12,\
    \ 13, 14]\n            guess = [5, 7, 9, 10, 11, 12, 13, 14]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, 0, 0, 0, \ndef check(candidate):\n    assert\
    \ candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n \
    \   assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0,\
    \ 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdp8dtgad.py\"\
    , line 16\n    game = [5, 7, 9, 10, 11, 12, 13, 14]\nIndentationError: unexpected\
    \ indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [1, 5, 3, 2]\n            guess = [4, 2, 5, 1]\n            compare(game,\
    \ guess)\n            > [0, 0, 2, 2]\n            \"\"\"\n    \n    \n    \n \
    \   \n    \"\"\"\n    \n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \n    \"\"\"\ndef check(candidate):\n\
    \    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0,\
    \ 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0,\
    \ 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n  \
    \  assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n\
    \    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpikhswt_c.py\"\
    , line 16\n    game = [1, 5, 3, 2]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n            guess = [10, 20, 30,\
    \ 40, 50, 60, 70, 80, 90]\n            compare(game, guess)\n            >> [0,\
    \ 0, 0, 0, 0, 0, 0, 0]\n            \n            game = [10, 20, 30, 40, 50,\
    \ 60, 70, 80, 90]\n            guess = [10, 20, 30, 40, 50, 60, 70, 80, 91]\n\
    \            compare(game, guess)\n            >> [0, 0, 0, 0, 0, 0, 0, 0]\n \
    \           \n            game = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n      \
    \      guess = [10, 20, 30, 40, 50, 60, 70, 81, 90]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, 0, 0, 0, 0, 0]\n            \n            game\
    \ = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n            guess = [10, 20, 30, 40,\
    \ 50, 60, 70, 81, 91]\n            compare(game, guess)\n            >> [0, 0,\
    \ 0, 0, 0, 0, 0, 0]\n            \n            game = [10, 20, 30, 40, 50, 60,\
    \ 70, 80, 90]\n            guess = [10, 20, 30, 40, 50, 60, 70, 81, 92]\n    \
    \        compare(game, guess)\n            >> [0, 0, 0, 0, 0, 0, 0, 0]\n     \
    \       \n            game = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n          \
    \  guess = [10, 20, 30, 40, 50, 60, 70, 81, 93]\n            compare(game, guess)\n\
    \            >> [0, 0, 0, 0, 0, 0, 0, 0]\n            \n            game = [10,\
    \ 20, 30, 40, 50, 60, 70, 80, 90]\n            guess = [10, 20, 30, 40, 50, 60,\
    \ 70, 81, 94]\n            compare(game, guess)\n            >> [0, 0, 0, 0, 0,\
    \ 0, 0, 0]\n            \n            game = [10, 20, 30, 40, 50, 60, 70, 80,\
    \ 90]\n            guess = [10, 20, 30, 40, 50, 60, 70, 81, 95]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, 0, 0, 0, 0, 0]\n            \n            game\
    \ = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n            guess = [10, 20, 30, 40,\
    \ 50, 60, 70, 81, 96]\n            compare(game, guess)\n            >> [0, 0,\
    \ 0, 0, 0, 0, 0, 0]\n            \n            game = [10, 20, 30, 40, 50, 60,\
    \ 70, 80, 90]\n            guess = [10, 20, 30, 40, 50, 60, 70, 81, 97]\n    \
    \        compare(game, guess)\n            >> [0, 0, 0, 0, 0, 0, 0, 0]\n     \
    \       \n            game = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n          \
    \  guess = [10, 20, 30, 40, 50, 60, 70, 81, 98]\n            compare(game, guess)\n\
    \            >> [0, 0, 0, 0, 0, 0, 0, 0]\n            \n            game = [10,\
    \ 20, 30, 40, 50, \ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5,\
    \ 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0, 0,\
    \ 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp10_kw0wp.py\"\
    , line 16\n    game = [10, 20, 30, 40, 50, 60, 70, 80, 90]\nIndentationError:\
    \ unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [10, 7, 5, 3, 1]\n            guess = [3, 7, 5, 3, 1]\n            compare(game,\
    \ guess)\n            >> [3, 1, 0, 3, 0]\n            \n            game = [10,\
    \ 7, 5, 3, 1]\n            guess = [3, 7, 5, 3, 1]\n            compare(game,\
    \ guess)\n            >> [3, 1, 0, 3, 0]\n            \n            game = [10,\
    \ 7, 5, 3, 1]\n            guess = [3, 7, 5, 3, 1]\n            compare(game,\
    \ guess)\n            >> [3, 1, 0, 3, 0]\n            \n            game = [10,\
    \ 7, 5, 3, 1]\n            guess = [3, 7, 5, 3, 1]\n            compare(game,\
    \ guess)\n            >> [3, 1, 0, 3, 0]\n            \n            game = [10,\
    \ 7, 5, 3, 1]\n            guess = [3, 7, 5, 3, 1]\n            compare(game,\
    \ guess)\n            >> [3, 1, 0, 3, 0]\n            \n            game = [10,\
    \ 7, 5, 3, 1]\n            guess = [3, 7, 5, 3, 1]\n            compare(game,\
    \ guess)\n            >> [3, 1, 0, 3, 0]\n            \n            game = [10,\
    \ 7, 5, 3, 1]\n            guess = [3, 7, 5, 3, 1]\n            compare(game,\
    \ guess)\n            >> [3, 1, 0, 3, 0]\n            \n            game = [10,\
    \ 7, 5, 3, 1]\n            guess = [3, 7, 5, 3, 1]\n            compare(game,\
    \ guess)\n            >> [3, 1, 0, 3, 0]\n            \n            game = [10,\
    \ 7, 5, 3, 1]\n            guess = [3, 7, 5, 3, 1]\n            compare(game,\
    \ guess)\n            >> [3, 1, 0, 3, 0]\n            \n            game = [10,\
    \ 7, 5, 3, 1]\n            guess = [3, 7, 5, 3, 1]\n            compare(game,\
    \ guess)\n            >> [3, 1, 0, 3, 0]\n            \n            game = [10,\
    \ 7, 5, 3, 1]\n            guess = [3, 7, 5, 3, 1]\n            compare(game,\
    \ guess)\n            >> [3, 1, 0, 3, 0]\n            \n            game = [10,\
    \ 7, 5, 3, 1]\n            guess = [3, 7, 5, 3, 1]\n            compare(game,\
    \ guess)\n            >> [3, 1, 0, 3, 0]\n            \n            game = [10,\
    \ 7, 5, 3, 1]\n            guess = [3, 7, 5, 3, 1]\n            compare(game,\
    \ guess)\n            >> [3, 1, 0, 3, 0]\n            \n            game = [10,\
    \ 7, 5, 3, 1]\n            guess = [3, 7, 5, 3, 1]\n            compare(game,\
    \ guess)\n            >> [3, 1, 0, 3, 0]\n            \n            game = [10,\
    \ 7, 5, 3, 1]\ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 1],\
    \ [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0, 0, 0, 0,\
    \ 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1, 2,\
    \ 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2, 3,\
    \ 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx843oo7n.py\"\
    , line 16\n    game = [10, 7, 5, 3, 1]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, \ndef check(candidate):\n\
    \    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0,\
    \ 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0,\
    \ 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n  \
    \  assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n\
    \    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4iw6rzpw.py\"\
    , line 16\n    , 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, \n  \
    \             ^\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [1, 3, 5]\n            guess = [1, 3, 5]\n            compare(game, guess)\n\
    \            \n            game = [1, 3, 5]\n            guess = [1, 3, 6]\n \
    \           compare(game, guess)\n            \n            game = [1, 3, 5]\n\
    \            guess = [1, 4, 5]\n            compare(game, guess)\n           \
    \ \n            game = [1, 3, 5]\n            guess = [1, 5, 5]\n            compare(game,\
    \ guess)\n            \n            game = [1, 3, 5]\n            guess = [1,\
    \ 5, 6]\n            compare(game, guess)\n            \n            game = [1,\
    \ 3, 5]\n            guess = [1, 6, 5]\n            compare(game, guess)\n   \
    \         \n            game = [1, 3, 5]\n            guess = [1, 6, 6]\n    \
    \        compare(game, guess)\n            \n            game = [1, 3, 5]\n  \
    \          guess = [1, 7, 5]\n            compare(game, guess)\n            \n\
    \            game = [1, 3, 5]\n            guess = [1, 7, 6]\n            compare(game,\
    \ guess)\n            \n            game = [1, 3, 5]\n            guess = [1,\
    \ 8, 5]\n            compare(game, guess)\n            \n            game = [1,\
    \ 3, 5]\n            guess = [1, 8, 6]\n            compare(game, guess)\n   \
    \         \n            game = [1, 3, 5]\n            guess = [1, 9, 5]\n    \
    \        compare(game, guess)\n            \n            game = [1, 3, 5]\n  \
    \          guess = [1, 9, 6]\n            compare(game, guess)\n            \n\
    \            game = [1, 3, 5]\n            guess = [1, 10, 5]\n            compare(game,\
    \ guess)\n            \n            game = [1, 3, 5]\n            guess = [1,\
    \ 10, 6]\n            compare(game, guess)\n            \n            game = [1,\
    \ 3, 5]\n            guess = [1, 11, 5]\n            compare(game, guess)\n  \
    \          \n            game = [1, 3, 5]\n            guess = [1, 11, 6]\n  \
    \          compare(game, guess)\n            \n            game = [1, 3, 5]\n\
    \            guess = [1, 12, 5]\n            compare(game, guess)\n          \
    \  \n            game = [1, 3, 5]\n            guess = [1, 12, 6]\n          \
    \  compare(game, guess)\n            \n            game = [1, 3, 5]\n        \
    \    guess = [1, 13, 5]\n            compare(game, guess)\n            \n    \
    \        game = [1, 3, 5]\n            guess = [1, 13, 6]\n            compare(game,\
    \ guess)\n            \n            game = [1, 3, 5]\n            \ndef check(candidate):\n\
    \    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0,\
    \ 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0,\
    \ 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n  \
    \  assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n\
    \    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxvd5m_gi.py\"\
    , line 16\n    game = [1, 3, 5]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [1,3,5,7,9]\n            guess = [2,4,6,8,10]\n            compare(game,\
    \ guess)\n            \n            game = [1,3,5,7,9]\n            guess = [2,4,6,8,10]\n\
    \            compare(game, guess)\n            \n            game = [1,3,5,7,9]\n\
    \            guess = [2,4,6,8,10]\n            compare(game, guess)\n        \
    \    \n            game = [1,3,5,7,9]\n            guess = [2,4,6,8,10]\n    \
    \        compare(game, guess)\n            \n            game = [1,3,5,7,9]\n\
    \            guess = [2,4,6,8,10]\n            compare(game, guess)\n        \
    \    \n            game = [1,3,5,7,9]\n            guess = [2,4,6,8,10]\n    \
    \        compare(game, guess)\n            \n            game = [1,3,5,7,9]\n\
    \            guess = [2,4,6,8,10]\n            compare(game, guess)\n        \
    \    \n            game = [1,3,5,7,9]\n            guess = [2,4,6,8,10]\n    \
    \        compare(game, guess)\n            \n            game = [1,3,5,7,9]\n\
    \            guess = [2,4,6,8,10]\n            compare(game, guess)\n        \
    \    \n            game = [1,3,5,7,9]\n            guess = [2,4,6,8,10]\n    \
    \        compare(game, guess)\n            \n            game = [1,3,5,7,9]\n\
    \            guess = [2,4,6,8,10]\n            compare(game, guess)\n        \
    \    \n            game = [1,3,5,7,9]\n            guess = [2,4,6,8,10]\n    \
    \        compare(game, guess)\n            \n            game = [1,3,5,7,9]\n\
    \            guess = [2,4,6,8,10]\n            compare(game, guess)\n        \
    \    \n            game = [1,3,5,7,9]\n            guess = [2,4,6,8,10]\n    \
    \        compare(game, guess)\n            \n            game = [1,3,5,7,9]\n\
    \            guess = [2,4,6,8,10]\n            compare(game, guess)\n        \
    \    \n            game = [1,3,5,7,9]\n            guess = [2,4,6,8,10]\n    \
    \        compare(game, guess)\n            \n            game = [1,3,5,7,9]\n\
    \            guess = [2,4,6,8,10]\n            compare(game, guess)\n        \
    \    \n            game = [1,3,5,7,9]\n            guess = [2,4,6,8,10]\n    \
    \        compare(game, guess)\n            \n            game = [1,3,5,7,9]\n\
    def check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2,\
    \ -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0,\
    \ 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2,\
    \ -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2,\
    \ 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpr2k9x_v0.py\"\
    , line 16\n    game = [1,3,5,7,9]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [10, 20, 30, 40, 50]\n            guess = [20, 30, 40, 50, 60]\n    \
    \        compare(game, guess)\n            >> [10, 0, 0, 10, 0]\n            \n\
    \            game = [10, 20, 30, 40, 50]\n            guess = [20, 30, 40, 50,\
    \ 60]\n            compare(game, guess)\n            >> [10, 0, 0, 10, 0]\n  \
    \          \n            game = [10, 20, 30, 40, 50]\n            guess = [20,\
    \ 30, 40, 50, 60]\n            compare(game, guess)\n            >> [10, 0, 0,\
    \ 10, 0]\n            \n            game = [10, 20, 30, 40, 50]\n            guess\
    \ = [20, 30, 40, 50, 60]\n            compare(game, guess)\n            >> [10,\
    \ 0, 0, 10, 0]\n            \n            game = [10, 20, 30, 40, 50]\n      \
    \      guess = [20, 30, 40, 50, 60]\n            compare(game, guess)\n      \
    \      >> [10, 0, 0, 10, 0]\n            \n            game = [10, 20, 30, 40,\
    \ 50]\n            guess = [20, 30, 40, 50, 60]\n            compare(game, guess)\n\
    \            >> [10, 0, 0, 10, 0]\n            \n            game = [10, 20, 30,\
    \ 40, 50]\n            guess = [20, 30, 40, 50, 60]\n            compare(game,\
    \ guess)\n            >> [10, 0, 0, 10, 0]\n            \n            game = [10,\
    \ 20, 30, 40, 50]\n            guess = [20, 30, 40, 50, 60]\n            compare(game,\
    \ guess)\n            >> [10, 0, 0, 10, 0]\n            \n            game = [10,\
    \ 20, 30, 40, 50]\n            guess = [20, 30, 40, 50, 60]\n            compare(game,\
    \ guess)\n            >> [10, 0, 0, 10, 0]\n            \n            game = [10,\
    \ 20, 30, 40, 50]\n            guess = [20, 30, 40, 50, 60]\n            compare(game,\
    \ guess)\n            >> [10, 0, 0, 10, 0]\n            \n            game = [10,\
    \ 20, 30, 40, 50]\n            guess = [20, 30, 40, 50, 60]\n            compare(game,\
    \ guess)\n            >> [10, 0, 0, 10, 0]\n            \n            game = [10,\
    \ 20, 30, 40, 50]\n            guess = [20, 30, 40, 50, 60]\n            compare(game,\
    \ guess)\n            >> [10, 0, 0, 10, 0]\n            \n            game = [10,\
    \ 20, 30, 40, 50]\n            guess = [20, 30, 40, 50, 60]\n            compare(game,\
    \ guess)\n            >> [10, 0, 0, 10, 0]\n            \n            game = [10,\
    \ 20, 30, 40, 50]\n            guess = [20, 30, 40, 50, 6\ndef check(candidate):\n\
    \    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0,\
    \ 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0,\
    \ 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n  \
    \  assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n\
    \    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpozdly4ba.py\"\
    , line 16\n    game = [10, 20, 30, 40, 50]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\
    \ 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\
    \ 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\
    \ 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\
    \ 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\
    \ 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\
    \ 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\
    \ 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\
    \ 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\
    \ 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\
    \ 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\
    \ 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\
    \ 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\
    \ 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\
    \ 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\
    \ 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\
    \ 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\
    \ 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\
    \ 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\
    \ 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\
    \ 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\
    \ 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\
    \ 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\
    \ 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\
    \ 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\
    \ 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\
    \ 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\
    \ 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\
    \ 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\
    \ 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\
    \ 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\
    \ 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, \n\
    def check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2,\
    \ -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0,\
    \ 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2,\
    \ -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2,\
    \ 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm7h0mp4h.py\"\
    , line 16\n    , 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\
    \ 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\
    \ 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\
    \ 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\
    \ 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\
    \ 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\
    \ 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\
    \ 100, 100, 100, 100, \n               ^\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [1,3,5,7,9]\n            guess = [2,4,6,8,10]\n            compare(game,\
    \ guess)\n            >>>[0,0,2,0,1]\n            \n            game = [1,3,5,7,9]\n\
    \            guess = [2,4,6,8,10]\n            compare(game, guess)\n        \
    \    >>>[0,0,2,0,1]\n            \n            game = [1,3,5,7,9]\n          \
    \  guess = [2,4,6,8,10]\n            compare(game, guess)\n            >>>[0,0,2,0,1]\n\
    \            \n            game = [1,3,5,7,9]\n            guess = [2,4,6,8,10]\n\
    \            compare(game, guess)\n            >>>[0,0,2,0,1]\n            \n\
    \            game = [1,3,5,7,9]\n            guess = [2,4,6,8,10]\n          \
    \  compare(game, guess)\n            >>>[0,0,2,0,1]\n            \n          \
    \  game = [1,3,5,7,9]\n            guess = [2,4,6,8,10]\n            compare(game,\
    \ guess)\n            >>>[0,0,2,0,1]\n            \n            game = [1,3,5,7,9]\n\
    \            guess = [2,4,6,8,10]\n            compare(game, guess)\n        \
    \    >>>[0,0,2,0,1]\n            \n            game = [1,3,5,7,9]\n          \
    \  guess = [2,4,6,8,10]\n            compare(game, guess)\n            >>>[0,0,2,0,1]\n\
    \            \n            game = [1,3,5,7,9]\n            guess = [2,4,6,8,10]\n\
    \            compare(game, guess)\n            >>>[0,0,2,0,1]\n            \n\
    \            game = [1,3,5,7,9]\n            guess = [2,4,6,8,10]\n          \
    \  compare(game, guess)\n            >>>[0,0,2,0,1]\n            \n          \
    \  game = [1,3,5,7,9]\n            guess = [2,4,6,8,10]\n            compare(game,\
    \ guess)\n            >>>[0,0,2,0,1]\n            \n            game = [1,3,5,7,9]\n\
    \            guess = [2,4,6,8,10]\n            compare(game, guess)\n        \
    \    >>>[0,0,2,0,1]\n            \n            game = [1,3,5,7,9]\n          \
    \  guess = [2,4,6,8,10]\n            compare(game, guess)\n            >>>[0,0,2,0,1]\n\
    \            \n            game = [1,3,5,7,9]\n            guess = [2,4,6,8,10]\n\
    \            compare(game, guess)\n            >>>[0,0,2,0,1]\n            \n\
    \            game = [1,3,5,7,9]\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9clw2d7i.py\"\
    , line 16\n    game = [1,3,5,7,9]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [1, 5, 6, 2, 3]\n            guess = [1, 5, 6, 2, 3]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, 2, 3]\n            \n            game = [1,\
    \ 5, 6, 2, 3]\n            guess = [1, 5, 6, 2, 4]\n            compare(game,\
    \ guess)\n            >> [0, 0, 1, 2, 2]\n            \n            game = [1,\
    \ 5, 6, 2, 3]\n            guess = [1, 5, 6, 2, 3]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, 2, 3]\n            \n            game = [1,\
    \ 5, 6, 2, 3]\n            guess = [1, 5, 6, 2, 3]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, 2, 3]\n            \n            game = [1,\
    \ 5, 6, 2, 3]\n            guess = [1, 5, 6, 2, 4]\n            compare(game,\
    \ guess)\n            >> [0, 0, 1, 2, 2]\n            \n            game = [1,\
    \ 5, 6, 2, 3]\n            guess = [1, 5, 6, 2, 3]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, 2, 3]\n            \n            game = [1,\
    \ 5, 6, 2, 3]\n            guess = [1, 5, 6, 2, 3]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, 2, 3]\n            \n            game = [1,\
    \ 5, 6, 2, 3]\n            guess = [1, 5, 6, 2, 4]\n            compare(game,\
    \ guess)\n            >> [0, 0, 1, 2, 2]\n            \n            game = [1,\
    \ 5, 6, 2, 3]\n            guess = [1, 5, 6, 2, 3]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, 2, 3]\n            \n            game = [1,\
    \ 5, 6, 2, 3]\n            guess = [1, 5, 6, 2, 3]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, 2, 3]\n            \n            game = [1,\
    \ 5, 6, 2, 3]\n            guess = [1, 5, 6, 2, 3]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, 2, 3]\n            \n            game = [1,\
    \ 5, 6, 2, 3]\n            guess = [1, 5, 6, 2, 4]\n            compare(game,\
    \ guess)\n            >> [0, 0, 1, 2, 2]\n            \n            game = [1,\
    \ 5, 6, 2, 3]\n            guess = [1, 5, 6, 2, 3]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, 2, 3]\n            \n            game = [1,\
    \ 5, 6, 2, 3]\n            guess = [1, 5, 6, 2, 3]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, 2, 3]\n            \n            game = [1,\
    \ 5, 6, 2, 3]\n            guess = [1, 5, 6, 2, 3]\n            compare(game\n\
    def check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2,\
    \ -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0,\
    \ 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2,\
    \ -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2,\
    \ 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcqvy2nph.py\"\
    , line 16\n    game = [1, 5, 6, 2, 3]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ scores = [10, 20, 30, 40, 50]\n            guesses = [10, 20, 30, 40, 50]\n\
    \            compare(scores, guesses) == [0, 0, 2, -1, -1]\n            \n   \
    \         scores = [10, 20, 30, 40, 50]\n            guesses = [10, 20, 30, 40,\
    \ 50]\n            compare(scores, guesses) == [0, 0, 2, -1, -1]\n           \
    \ \n            scores = [10, 20, 30, 40, 50]\n            guesses = [10, 20,\
    \ 30, 40, 50]\n            compare(scores, guesses) == [0, 0, 2, -1, -1]\n   \
    \         \n            scores = [10, 20, 30, 40, 50]\n            guesses = [10,\
    \ 20, 30, 40, 50]\n            compare(scores, guesses) == [0, 0, 2, -1, -1]\n\
    \            \n            scores = [10, 20, 30, 40, 50]\n            guesses\
    \ = [10, 20, 30, 40, 50]\n            compare(scores, guesses) == [0, 0, 2, -1,\
    \ -1]\n            \n            scores = [10, 20, 30, 40, 50]\n            guesses\
    \ = [10, 20, 30, 40, 50]\n            compare(scores, guesses) == [0, 0, 2, -1,\
    \ -1]\n            \n            scores = [10, 20, 30, 40, 50]\n            guesses\
    \ = [10, 20, 30, 40, 50]\n            compare(scores, guesses) == [0, 0, 2, -1,\
    \ -1]\n            \n            scores = [10, 20, 30, 40, 50]\n            guesses\
    \ = [10, 20, 30, 40, 50]\n            compare(scores, guesses) == [0, 0, 2, -1,\
    \ -1]\n            \n            scores = [10, 20, 30, 40, 50]\n            guesses\
    \ = [10, 20, 30, 40, 50]\n            compare(scores, guesses) == [0, 0, 2, -1,\
    \ -1]\n            \n            scores = [10, 20, 30, 40, 50]\n            guesses\
    \ = [10, 20, 30, 40, 50]\n            compare(scores, guesses) == [0, 0, 2, -1,\
    \ -1]\n            \n            scores = [10, 20, 30, 40, 50]\n            guesses\
    \ = [10, 20, 30, 40, 50]\n            compare(scores, guesses) == [0, 0, 2, -1,\
    \ -1]\n            \n            scores = [10, 20, 30, 40, 50]\n            guesses\
    \ = [10, 20, 30, 40, 50]\n            compare(scores, guesses) == [0, 0, 2, -1,\
    \ -1]\n            \n            scores = [10, 20, 30, 40, 50]\n            guesses\
    \ = [10, 20, 30, 40, 50]\n            compare(scores, guesses) == [0, 0, 2, -1,\
    \ -1]\n            \n            scores = [10, 20, 30, 40, 50]\n            guesses\
    \ = [10, 20, 30, 40, 50]\n            compare(scores, guesses) == [0, 0, 2, -1,\
    \ -1]\n            \n            scores = [10, 20, 30, 40, 5\ndef check(candidate):\n\
    \    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0,\
    \ 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0,\
    \ 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n  \
    \  assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n\
    \    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplnbko8v2.py\"\
    , line 16\n    scores = [10, 20, 30, 40, 50]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [1, 3, 5]\n            guess = [1, 5, 3]\n            compare(game, guess)\n\
    \            > [1, 0, -1]\n            \n            \"\"\"\n    \"\"\"\n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\ndef check(candidate):\n    assert candidate([1, 2,\
    \ 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpinz4_odj.py\"\
    , line 16\n    game = [1, 3, 5]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [5, 3, 6, 1, 4, 2]\n            guess = [4, 6, 3, 6, 1, 2]\n        \
    \    compare(game, guess)\n            \n            game = [5, 3, 6, 1, 4, 2]\n\
    \            guess = [4, 6, 3, 6, 1, 3]\n            compare(game, guess)\n  \
    \          \n            game = [5, 3, 6, 1, 4, 2]\n            guess = [4, 6,\
    \ 3, 6, 1, 4]\n            compare(game, guess)\n            \n            game\
    \ = [5, 3, 6, 1, 4, 2]\n            guess = [4, 6, 3, 6, 1, 5]\n            compare(game,\
    \ guess)\n            \n            game = [5, 3, 6, 1, 4, 2]\n            guess\
    \ = [4, 6, 3, 6, 1, 6]\n            compare(game, guess)\n            \n     \
    \       game = [5, 3, 6, 1, 4, 2]\n            guess = [4, 6, 3, 6, 1, 7]\n  \
    \          compare(game, guess)\n            \n            game = [5, 3, 6, 1,\
    \ 4, 2]\n            guess = [4, 6, 3, 6, 1, 8]\n            compare(game, guess)\n\
    \            \n            game = [5, 3, 6, 1, 4, 2]\n            guess = [4,\
    \ 6, 3, 6, 1, 9]\n            compare(game, guess)\n            \n           \
    \ game = [5, 3, 6, 1, 4, 2]\n            guess = [4, 6, 3, 6, 1, 10]\n       \
    \     compare(game, guess)\n            \n            game = [5, 3, 6, 1, 4, 2]\n\
    \            guess = [4, 6, 3, 6, 1, 11]\n            compare(game, guess)\n \
    \           \n            game = [5, 3, 6, 1, 4, 2]\n            guess = [4, 6,\
    \ 3, 6, 1, 12]\n            compare(game, guess)\n            \n            game\
    \ = [5, 3, 6, 1, 4, 2]\n            guess = [4, 6, 3, 6, 1, 13]\n            compare(game,\
    \ guess)\n            \n            game = [5, 3, 6, 1, 4, 2]\n            guess\
    \ = [4, 6, 3, 6, 1, 14]\n            compare(game, guess)\n            \n    \
    \        game = [5, 3, 6, 1, 4, 2]\n            guess = [4, 6, 3, 6, 1, 15]\n\
    \            compare(game, guess)\n            \n            game = [5, 3, 6,\
    \ 1, 4, 2]\n            guess = [4, 6, 3, 6, 1, 16]\n            compare(game,\
    \ guess)\n            \n            game = [5, 3, 6, 1, 4, 2]\n            guess\
    \ = [4, 6, 3, 6, 1, 17]\n            compare(game, guess)\n            \n    \
    \        game = [5, 3, 6, 1, 4, 2]\n            guess = [4, 6, 3, 6, 1, 18]\n\
    \            compare(game\ndef check(candidate):\n    assert candidate([1, 2,\
    \ 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3q28xdos.py\"\
    , line 16\n    game = [5, 3, 6, 1, 4, 2]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [1, 5, 3, 7, 9, 2, 6]\n            guess = [1, 5, 3, 7, 9, 2, 6]\n  \
    \          compare(game, guess)\n            [0, 2, -4, -6, -6, -6, -6]\n    \
    \        \n            game = [1, 5, 3, 7, 9, 2, 6]\n            guess = [1, 5,\
    \ 3, 7, 9, 2, 7]\n            compare(game, guess)\n            [0, 2, -4, -6,\
    \ -6, -6, -6]\n            \n            game = [1, 5, 3, 7, 9, 2, 6]\n      \
    \      guess = [1, 5, 3, 7, 9, 2, 8]\n            compare(game, guess)\n     \
    \       [0, 2, -4, -6, -6, -6, -6]\n            \n            game = [1, 5, 3,\
    \ 7, 9, 2, 6]\n            guess = [1, 5, 3, 7, 9, 2, 9]\n            compare(game,\
    \ guess)\n            [0, 2, -4, -6, -6, -6, -6]\n            \n            game\
    \ = [1, 5, 3, 7, 9, 2, 6]\n            guess = [1, 5, 3, 7, 9, 2, 10]\n      \
    \      compare(game, guess)\n            [0, 2, -4, -6, -6, -6, -6]\n        \
    \    \n            game = [1, 5, 3, 7, 9, 2, 6]\n            guess = [1, 5, 3,\
    \ 7, 9, 2, 11]\n            compare(game, guess)\n            [0, 2, -4, -6, -6,\
    \ -6, -6]\n            \n            game = [1, 5, 3, 7, 9, 2, 6]\n          \
    \  guess = [1, 5, 3, 7, 9, 2, 12]\n            compare(game, guess)\n        \
    \    [0, 2, -4, -6, -6, -6, -6]\n            \n            game = [1, 5, 3, 7,\
    \ 9, 2, 6]\n            guess = [1, 5, 3, 7, 9, 2, 13]\n            compare(game,\
    \ guess)\n            [0, 2, -4, -6, -6, -6, -6]\n            \n            game\
    \ = [1, 5, 3, 7, 9, 2, 6]\n            guess = [1, 5, 3, 7, 9, 2, 14]\n      \
    \      compare(game, guess)\n            [0, 2, -4, -6, -6, -6, -6]\n        \
    \    \n            game = [1, 5, 3, 7, 9, 2, 6]\n            guess = [1, 5, 3,\
    \ 7, 9, 2, 15]\n            compare(game, guess)\n            [0, 2, -4, -6, -6,\
    \ -6, -6]\n            \n            game = [1, 5, 3, 7, 9, 2, 6]\n          \
    \  guess = [1, 5, 3, 7, 9, 2, 16]\n            compare(game, guess)\n        \
    \    [0, 2, -4, -6, -6, -6, -6]\n            \n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n \
    \   assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0,\
    \ 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3shdkywi.py\"\
    , line 16\n    game = [1, 5, 3, 7, 9, 2, 6]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\
    \ 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\
    \ 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\
    \ 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\
    \ 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\
    \ 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\
    \ 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\
    \ 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\
    \ 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\
    \ 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\
    \ 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\
    \ 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\
    \ 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\
    \ 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\
    \ 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\
    \ 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\
    \ 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\
    \ 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\
    \ 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\
    \ 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\
    \ 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\
    \ 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\
    \ 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\
    \ 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\
    \ 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\
    \ 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\
    \ 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\
    \ 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\
    \ 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\
    \ 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\
    \ 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\
    \ 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, \n\
    def check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2,\
    \ -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0,\
    \ 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2,\
    \ -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2,\
    \ 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9qatp0x5.py\"\
    , line 16\n    , 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\
    \ 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\
    \ 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\
    \ 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\
    \ 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\
    \ 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\
    \ 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\
    \ 100, 100, 100, 100, \n               ^\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [10, 20, 30, 40, 50]\n            guess = [10, 20, 30, 40, 50]\n    \
    \        compare(game, guess)\n            >> [0, 0, 0, 0, 0]\n            \n\
    \            game = [10, 20, 30, 40, 50]\n            guess = [10, 20, 30, 40,\
    \ 50]\n            compare(game, guess)\n            >> [0, 0, 0, 0, 0]\n    \
    \        \n            game = [10, 20, 30, 40, 50]\n            guess = [10, 20,\
    \ 30, 40, 50]\n            compare(game, guess)\n            >> [0, 0, 0, 0, 0]\n\
    \            \n            game = [10, 20, 30, 40, 50]\n            guess = [10,\
    \ 20, 30, 40, 50]\n            compare(game, guess)\n            >> [0, 0, 0,\
    \ 0, 0]\n            \n            game = [10, 20, 30, 40, 50]\n            guess\
    \ = [10, 20, 30, 40, 50]\n            compare(game, guess)\n            >> [0,\
    \ 0, 0, 0, 0]\n            \n            game = [10, 20, 30, 40, 50]\n       \
    \     guess = [10, 20, 30, 40, 50]\n            compare(game, guess)\n       \
    \     >> [0, 0, 0, 0, 0]\n            \n            game = [10, 20, 30, 40, 50]\n\
    \            guess = [10, 20, 30, 40, 50]\n            compare(game, guess)\n\
    \            >> [0, 0, 0, 0, 0]\n            \n            game = [10, 20, 30,\
    \ 40, 50]\n            guess = [10, 20, 30, 40, 50]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, 0, 0]\n            \n            game = [10,\
    \ 20, 30, 40, 50]\n            guess = [10, 20, 30, 40, 50]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, 0, 0]\n            \n            game = [10,\
    \ 20, 30, 40, 50]\n            guess = [10, 20, 30, 40, 50]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, 0, 0]\n            \n            game = [10,\
    \ 20, 30, 40, 50]\n            guess = [10, 20, 30, 40, 50]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, 0, 0]\n            \n            game = [10,\
    \ 20, 30, 40, 50]\n            guess = [10, 20, 30, 40, 50]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, 0, 0]\n            \n            game = [10,\
    \ 20, 30, 40, 50]\n            guess = [10, 20, 30, 40, 50]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, 0, 0]\n            \n            game = [10,\
    \ 20, 30, 40, 50]\n            guess = [10, 20, 30, 40, 50]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, 0, 0]\n            \n            game = [10,\
    \ 20, 30, 40, 5\ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 1],\
    \ [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0, 0, 0, 0,\
    \ 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1, 2,\
    \ 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2, 3,\
    \ 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkq7dxksx.py\"\
    , line 16\n    game = [10, 20, 30, 40, 50]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [1, 5, 3, 6, 4, 2]\n            guess = [1, 5, 3, 6, 4, 2]\n        \
    \    compare(game, guess)\n            \n            game = [1, 5, 3, 6, 4, 2]\n\
    \            guess = [1, 5, 3, 6, 4, 3]\n            compare(game, guess)\n  \
    \          \n            game = [1, 5, 3, 6, 4, 2]\n            guess = [1, 5,\
    \ 3, 6, 4, 4]\n            compare(game, guess)\n            \n            game\
    \ = [1, 5, 3, 6, 4, 2]\n            guess = [1, 5, 3, 6, 4, 5]\n            compare(game,\
    \ guess)\n            \n            game = [1, 5, 3, 6, 4, 2]\n            guess\
    \ = [1, 5, 3, 6, 4, 6]\n            compare(game, guess)\n            \n     \
    \       game = [1, 5, 3, 6, 4, 2]\n            guess = [1, 5, 3, 6, 4, 7]\n  \
    \          compare(game, guess)\n            \n            game = [1, 5, 3, 6,\
    \ 4, 2]\n            guess = [1, 5, 3, 6, 4, 8]\n            compare(game, guess)\n\
    \            \n            game = [1, 5, 3, 6, 4, 2]\n            guess = [1,\
    \ 5, 3, 6, 4, 9]\n            compare(game, guess)\n            \n           \
    \ game = [1, 5, 3, 6, 4, 2]\n            guess = [1, 5, 3, 6, 4, 10]\n       \
    \     compare(game, guess)\n            \n            game = [1, 5, 3, 6, 4, 2]\n\
    \            guess = [1, 5, 3, 6, 4, 11]\n            compare(game, guess)\n \
    \           \n            game = [1, 5, 3, 6, 4, 2]\n            guess = [1, 5,\
    \ 3, 6, 4, 12]\n            compare(game, guess)\n            \n            game\
    \ = [1, 5, 3, 6, 4, 2]\n            guess = [1, 5, 3, 6, 4, 13]\n            compare(game,\
    \ guess)\n            \n            game = [1, 5, 3, 6, 4, 2]\n            guess\
    \ = [1, 5, 3, 6, 4, 14]\n            compare(game, guess)\n            \n    \
    \        game = [1, 5, 3, 6, 4, 2]\n            guess = [1, 5, 3, 6, 4, 15]\n\
    \            compare(game, guess)\n            \n            game = [1, 5, 3,\
    \ 6, 4, 2]\n            guess = [1, 5, 3, 6, 4, 16]\n            compare(game,\
    \ guess)\n            \n            game = [1, 5, 3, 6, 4, 2]\n            guess\
    \ = [1, 5, 3, 6, 4, 17]\n            compare(game, guess)\n            \n    \
    \        game = [1, 5, 3, 6, 4, 2]\n            guess = [1, 5, 3, 6, 4, 18]\n\
    \            compare(game\ndef check(candidate):\n    assert candidate([1, 2,\
    \ 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph1dffxwf.py\"\
    , line 16\n    game = [1, 5, 3, 6, 4, 2]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [10, 20, 30, 40, 50]\n            guess = [10, 20, 30, 40, 50]\n    \
    \        compare(game, guess)\n            \n            game = [10, 20, 30, 40,\
    \ 50]\n            guess = [10, 20, 30, 40, 50]\n            compare(game, guess)\n\
    \            \n            game = [10, 20, 30, 40, 50]\n            guess = [10,\
    \ 20, 30, 40, 50]\n            compare(game, guess)\n            \n          \
    \  game = [10, 20, 30, 40, 50]\n            guess = [10, 20, 30, 40, 50]\n   \
    \         compare(game, guess)\n            \n            game = [10, 20, 30,\
    \ 40, 50]\n            guess = [10, 20, 30, 40, 50]\n            compare(game,\
    \ guess)\n            \n            game = [10, 20, 30, 40, 50]\n            guess\
    \ = [10, 20, 30, 40, 50]\n            compare(game, guess)\n            \n   \
    \         game = [10, 20, 30, 40, 50]\n            guess = [10, 20, 30, 40, 50]\n\
    \            compare(game, guess)\n            \n            game = [10, 20, 30,\
    \ 40, 50]\n            guess = [10, 20, 30, 40, 50]\n            compare(game,\
    \ guess)\n            \n            game = [10, 20, 30, 40, 50]\n            guess\
    \ = [10, 20, 30, 40, 50]\n            compare(game, guess)\n            \n   \
    \         game = [10, 20, 30, 40, 50]\n            guess = [10, 20, 30, 40, 50]\n\
    \            compare(game, guess)\n            \n            game = [10, 20, 30,\
    \ 40, 50]\n            guess = [10, 20, 30, 40, 50]\n            compare(game,\
    \ guess)\n            \n            game = [10, 20, 30, 40, 50]\n            guess\
    \ = [10, 20, 30, 40, 50]\n            compare(game, guess)\n            \n   \
    \         game = [10, 20, 30, 40, 50]\n            guess = [10, 20, 30, 40, 50]\n\
    \            compare(game, guess)\n            \n            game = [10, 20, 30,\
    \ 40, 50]\n            guess = [10, 20, 30, 40, 50]\n            compare(game,\
    \ guess)\n            \n            game = [10, 20, 30, 40, 50]\n            guess\
    \ = [10, 20, 30, 40, 50]\n            compare(game, guess)\n            \n   \
    \         game = [10, 20, 30, 40, 50]\n            guess = [10, 20, 30, 40, 50]\n\
    \            compare(game, guess)\n            \n            game = [10, 20, 30,\
    \ 40, 50]\n            guess = [10, 20, 30, 40, 50]\n            compare(game,\
    \ guess)\n            \n            game\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_vyroypg.py\"\
    , line 16\n    game = [10, 20, 30, 40, 50]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [2,1,3,5,4,6,7]\n            guess = [2,1,4,5,6,7,8]\n            compare(game,\
    \ guess)\n            \n            game = [2,1,3,5,4,6,7]\n            guess\
    \ = [2,1,4,5,6,7,8]\n            compare(game, guess)\n            \n        \
    \    game = [2,1,3,5,4,6,7]\n            guess = [2,1,4,5,6,7,8]\n           \
    \ compare(game, guess)\n            \n            game = [2,1,3,5,4,6,7]\n   \
    \         guess = [2,1,4,5,6,7,8]\n            compare(game, guess)\n        \
    \    \n            game = [2,1,3,5,4,6,7]\n            guess = [2,1,4,5,6,7,8]\n\
    \            compare(game, guess)\n            \n            game = [2,1,3,5,4,6,7]\n\
    \            guess = [2,1,4,5,6,7,8]\n            compare(game, guess)\n     \
    \       \n            game = [2,1,3,5,4,6,7]\n            guess = [2,1,4,5,6,7,8]\n\
    \            compare(game, guess)\n            \n            game = [2,1,3,5,4,6,7]\n\
    \            guess = [2,1,4,5,6,7,8]\n            compare(game, guess)\n     \
    \       \n            game = [2,1,3,5,4,6,7]\n            guess = [2,1,4,5,6,7,8]\n\
    \            compare(game, guess)\n            \n            game = [2,1,3,5,4,6,7]\n\
    \            guess = [2,1,4,5,6,7,8]\n            compare(game, guess)\n     \
    \       \n            game = [2,1,3,5,4,6,7]\n            guess = [2,1,4,5,6,7,8]\n\
    \            compare(game, guess)\n            \n            game = [2,1,3,5,4,6,7]\n\
    \            guess = [2,1,4,5,6,7,8]\n            compare(game, guess)\n     \
    \       \n            game = [2,1,3,5,4,6,7]\n            guess = [2,1,4,5,6,7,8]\n\
    \            compare(game, guess)\n            \n            game = [2,1,3,5,4,6,7]\n\
    \            guess = [2,1,4,5,6,7,8]\n            compare(game, guess)\n     \
    \       \n            game = [2,1,3,5,4,6,7]\n            guess = [2,1,4,5,6,7,8]\n\
    \            compare(game, guess)\n            \n            game = [2,1,3,5,4,6,7]\n\
    \            guess = [2,1,4,5,6,7,8]\n            compare(game, guess)\n     \
    \       \n\ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 1], [1,\
    \ 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0, 0, 0, 0, 0,\
    \ 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1, 2, 3],\
    \ [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2, 3, 4])\
    \ == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpj0s7lv50.py\"\
    , line 16\n    game = [2,1,3,5,4,6,7]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [1, 3, 2]\n            guess = [1, 3, 2]\n            compare(game, guess)\n\
    \            # returns [0, 1, 0]\n            \n            game = [1, 3, 2]\n\
    \            guess = [1, 3, 3]\n            compare(game, guess)\n           \
    \ # returns [0, 0, 1]\n            \n            game = [1, 3, 2]\n          \
    \  guess = [1, 3, 1]\n            compare(game, guess)\n            # returns\
    \ [0, 1, 0]\n            \n            game = [1, 3, 2]\n            guess = [1,\
    \ 3, 2]\n            compare(game, guess)\n            # returns [0, 1, 0]\n \
    \           \n            game = [1, 3, 2]\n            guess = [1, 3, 3]\n  \
    \          compare(game, guess)\n            # returns [0, 0, 1]\n           \
    \ \n            game = [1, 3, 2]\n            guess = [1, 3, 1]\n            compare(game,\
    \ guess)\n            # returns [0, 1, 0]\n            \n            game = [1,\
    \ 3, 2]\n            guess = [1, 3, 2]\n            compare(game, guess)\n   \
    \         # returns [0, 1, 0]\n            \n            game = [1, 3, 2]\n  \
    \          guess = [1, 3, 3]\n            compare(game, guess)\n            #\
    \ returns [0, 0, 1]\n            \n            game = [1, 3, 2]\n            guess\
    \ = [1, 3, 1]\n            compare(game, guess)\n            # returns [0, 1,\
    \ 0]\n            \n            game = [1, 3, 2]\n            guess = [1, 3, 2]\n\
    \            compare(game, guess)\n            # returns [0, 1, 0]\n         \
    \   \n            game = [1, 3, 2]\n            guess = [1, 3, 3]\n          \
    \  compare(game, guess)\n            # returns [0, 0, 1]\n            \n     \
    \       game = [1, 3, 2]\n            guess = [1, 3, 1]\n            compare(game,\
    \ guess)\n            # returns [0, 1, 0]\n            \n            game = [1,\
    \ 3, 2]\n            guess = [1, 3, 2]\n            compare(game, guess)\n   \
    \         # returns [0, 1, 0]\n            \n            game = [1, 3, 2]\n  \
    \          guess = [1, 3, 3]\n            compare(game, guess)\n            #\
    \ returns [0, 0, 1]\n            \n            game = [1, 3, 2]\n            guess\
    \ = [1, 3, 1]\n            compare(game, guess)\n            # returns [0, 1,\
    \ 0]\n            \n            game = [1, 3, 2]\n            guess = [1, 3, 2]\n\
    \            compare(game, guess)\n            # returns [0, 1, 0]\n         \
    \   \n            game = [1, 3, 2]\n            guess = [1, 3, 3]\n          \
    \  compare(game, guess)\n            # returns [0, 0, 1]\n            \n     \
    \       game = [1, 3, 2]\n            guess = [1, 3, 1]\ndef check(candidate):\n\
    \    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0,\
    \ 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0,\
    \ 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n  \
    \  assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n\
    \    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy1e5n50x.py\"\
    , line 16\n    game = [1, 3, 2]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [1, 3, 5]\n            guess = [1, 3, 5]\n            compare(game, guess)\n\
    \            >> [0, 0, 0]\n            \n            game = [1, 3, 5]\n      \
    \      guess = [1, 4, 5]\n            compare(game, guess)\n            >> [1,\
    \ 1, 1]\n            \n            game = [1, 3, 5]\n            guess = [1, 5,\
    \ 5]\n            compare(game, guess)\n            >> [1, 1, 1]\n           \
    \ \n            game = [1, 3, 5]\n            guess = [1, 5, 6]\n            compare(game,\
    \ guess)\n            >> [1, 1, 1]\n            \n            game = [1, 3, 5]\n\
    \            guess = [1, 5, 7]\n            compare(game, guess)\n           \
    \ >> [1, 1, 1]\n            \n            game = [1, 3, 5]\n            guess\
    \ = [1, 5, 8]\n            compare(game, guess)\n            >> [1, 1, 1]\n  \
    \          \n            game = [1, 3, 5]\n            guess = [1, 5, 9]\n   \
    \         compare(game, guess)\n            >> [1, 1, 1]\n            \n     \
    \       game = [1, 3, 5]\n            guess = [1, 5, 10]\n            compare(game,\
    \ guess)\n            >> [1, 1, 1]\n            \n            game = [1, 3, 5]\n\
    \            guess = [1, 5, 11]\n            compare(game, guess)\n          \
    \  >> [1, 1, 1]\n            \n            game = [1, 3, 5]\n            guess\
    \ = [1, 5, 12]\n            compare(game, guess)\n            >> [1, 1, 1]\n \
    \           \n            game = [1, 3, 5]\n            guess = [1, 5, 13]\n \
    \           compare(game, guess)\n            >> [1, 1, 1]\n            \n   \
    \         game = [1, 3, 5]\n            guess = [1, 5, 14]\n            compare(game,\
    \ guess)\n            >> [1, 1, 1]\n            \n            game = [1, 3, 5]\n\
    \            guess = [1, 5, 15]\n            compare(game, guess)\n          \
    \  >> [1, 1, 1]\n            \n            game = [1, 3, 5]\n            guess\
    \ = [1, 5, 16]\n            compare(game, guess)\n            >> [1, 1, 1]\n \
    \           \n            game = [1, 3, 5]\n            guess = [1, 5, 17]\n \
    \           compare(game, guess)\n            >> [1, 1, 1]\n            \n   \
    \         game = [1, 3, 5]\n            guess = [1, 5, 18]\n            compare(game,\
    \ guess)\n            >> [1, 1, 1]\n            \n            game = [1, 3, 5]\n\
    \            guess = [1, 5, 19]\n            compare(game, guess)\n          \
    \  \ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3,\
    \ 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0,\
    \ 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1,\
    \ -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) ==\
    \ [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp54q229wu.py\"\
    , line 16\n    game = [1, 3, 5]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ scores = [10, 20, 30, 40, 50]\n            guesses = [10, 20, 30, 40, 50]\n\
    \            compare(scores, guesses) == [10, 0, 0, 10, 0]\n            compare(scores,\
    \ guesses) == [10, 0, 0, 10, 0]\n            compare(scores, guesses) == [10,\
    \ 0, 0, 10, 0]\n            compare(scores, guesses) == [10, 0, 0, 10, 0]\n  \
    \          compare(scores, guesses) == [10, 0, 0, 10, 0]\n            compare(scores,\
    \ guesses) == [10, 0, 0, 10, 0]\n            compare(scores, guesses) == [10,\
    \ 0, 0, 10, 0]\n            compare(scores, guesses) == [10, 0, 0, 10, 0]\n  \
    \          compare(scores, guesses) == [10, 0, 0, 10, 0]\n            compare(scores,\
    \ guesses) == [10, 0, 0, 10, 0]\n            compare(scores, guesses) == [10,\
    \ 0, 0, 10, 0]\n            compare(scores, guesses) == [10, 0, 0, 10, 0]\n  \
    \          compare(scores, guesses) == [10, 0, 0, 10, 0]\n            compare(scores,\
    \ guesses) == [10, 0, 0, 10, 0]\n            compare(scores, guesses) == [10,\
    \ 0, 0, 10, 0]\n            compare(scores, guesses) == [10, 0, 0, 10, 0]\n  \
    \          compare(scores, guesses) == [10, 0, 0, 10, 0]\n            compare(scores,\
    \ guesses) == [10, 0, 0, 10, 0]\n            compare(scores, guesses) == [10,\
    \ 0, 0, 10, 0]\n            compare(scores, guesses) == [10, 0, 0, 10, 0]\n  \
    \          compare(scores, guesses) == [10, 0, 0, 10, 0]\n            compare(scores,\
    \ guesses) == [10, 0, 0, 10, 0]\n            compare(scores, guesses) == [10,\
    \ 0, 0, 10, 0]\n            compare(scores, guesses) == [10, 0, 0, 10, 0]\n  \
    \          compare(scores, guesses) == [10, 0, 0, 10, 0]\n            compare(scores,\
    \ guesses) == [10, 0, 0, 10, 0]\n            compare(scores, guesses) == [10,\
    \ 0, 0, 10, 0]\n            compare(scores, guesses) == [10, 0, 0, 10, 0]\n  \
    \          compare(scores, guesses) == [10, 0, 0, 10, 0]\n            compare(scores,\
    \ guesses) == [10, 0, 0, 10, 0]\n            compare(scores, guesses) == [10,\
    \ 0, 0, 10, 0]\n            compare(scores, guesses) == [10, 0, 0, 10, 0]\n  \
    \          compare(scores, guesses) == [10, 0, 0, 10, 0]\n            compare(scores,\
    \ guesses) == [10, 0, 0, 10, 0]\n            compare(scores, guesses) == [10,\
    \ 0, 0, 10, 0]\n            compare(scores, guesses) == [10, 0, 0, 10, 0]\n  \
    \          compare(scores, guesses) == [10, 0, 0, 10, 0]\n            compare(scores,\
    \ guesses) == [10, 0, 0, \ndef check(candidate):\n    assert candidate([1, 2,\
    \ 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo_wrao0b.py\"\
    , line 16\n    scores = [10, 20, 30, 40, 50]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [10, 20, 30, 40, 50]\n            guess = [10, 20, 30, 40, 50]\n    \
    \        compare(game, guess)\n            \n            game = [10, 20, 30, 40,\
    \ 50]\n            guess = [10, 20, 30, 40, 50]\n            compare(game, guess)\n\
    \            \n            game = [10, 20, 30, 40, 50]\n            guess = [10,\
    \ 20, 30, 40, 50]\n            compare(game, guess)\n            \n          \
    \  game = [10, 20, 30, 40, 50]\n            guess = [10, 20, 30, 40, 50]\n   \
    \         compare(game, guess)\n            \n            game = [10, 20, 30,\
    \ 40, 50]\n            guess = [10, 20, 30, 40, 50]\n            compare(game,\
    \ guess)\n            \n            game = [10, 20, 30, 40, 50]\n            guess\
    \ = [10, 20, 30, 40, 50]\n            compare(game, guess)\n            \n   \
    \         game = [10, 20, 30, 40, 50]\n            guess = [10, 20, 30, 40, 50]\n\
    \            compare(game, guess)\n            \n            game = [10, 20, 30,\
    \ 40, 50]\n            guess = [10, 20, 30, 40, 50]\n            compare(game,\
    \ guess)\n            \n            game = [10, 20, 30, 40, 50]\n            guess\
    \ = [10, 20, 30, 40, 50]\n            compare(game, guess)\n            \n   \
    \         game = [10, 20, 30, 40, 50]\n            guess = [10, 20, 30, 40, 50]\n\
    \            compare(game, guess)\n            \n            game = [10, 20, 30,\
    \ 40, 50]\n            guess = [10, 20, 30, 40, 50]\n            compare(game,\
    \ guess)\n            \n            game = [10, 20, 30, 40, 50]\n            guess\
    \ = [10, 20, 30, 40, 50]\n            compare(game, guess)\n            \n   \
    \         game = [10, 20, 30, 40, 50]\n            guess = [10, 20, 30, 40, 50]\n\
    \            compare(game, guess)\n            \n            game = [10, 20, 30,\
    \ 40, 50]\n            guess = [10, 20, 30, 40, 50]\n            compare(game,\
    \ guess)\n            \n            game = [10, 20, 30, 40, 50]\n            guess\
    \ = [10, 20, 30, 40, 50]\n            compare(game, guess)\n            \n   \
    \         game = [10, 20, 30, 40, 50]\n            guess = [10, 20, 30, 40, 50]\n\
    \            compare(game, guess)\n            \n            game = [10, 20, 30,\
    \ 40, 50]\n            guess = [10, 20, 30, 40, 50]\n            compare(game,\
    \ guess)\n            \n            game\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvyqh2xl4.py\"\
    , line 16\n    game = [10, 20, 30, 40, 50]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [1, 5, 3, 7, 9]\n            guess = [1, 5, 3, 7, 9]\n            compare(game,\
    \ guess)\n            \n            game = [1, 5, 3, 7, 9]\n            guess\
    \ = [1, 5, 3, 7, 8]\n            compare(game, guess)\n            \n        \
    \    game = [1, 5, 3, 7, 9]\n            guess = [1, 5, 3, 7, 10]\n          \
    \  compare(game, guess)\n            \n            game = [1, 5, 3, 7, 9]\n  \
    \          guess = [1, 5, 3, 7, 11]\n            compare(game, guess)\n      \
    \      \n            game = [1, 5, 3, 7, 9]\n            guess = [1, 5, 3, 7,\
    \ 12]\n            compare(game, guess)\n            \n            game = [1,\
    \ 5, 3, 7, 9]\n            guess = [1, 5, 3, 7, 13]\n            compare(game,\
    \ guess)\n            \n            game = [1, 5, 3, 7, 9]\n            guess\
    \ = [1, 5, 3, 7, 14]\n            compare(game, guess)\n            \n       \
    \     game = [1, 5, 3, 7, 9]\n            guess = [1, 5, 3, 7, 15]\n         \
    \   compare(game, guess)\n            \n            game = [1, 5, 3, 7, 9]\n \
    \           guess = [1, 5, 3, 7, 16]\n            compare(game, guess)\n     \
    \       \n            game = [1, 5, 3, 7, 9]\n            guess = [1, 5, 3, 7,\
    \ 17]\n            compare(game, guess)\n            \n            game = [1,\
    \ 5, 3, 7, 9]\n            guess = [1, 5, 3, 7, 18]\n            compare(game,\
    \ guess)\n            \n            game = [1, 5, 3, 7, 9]\n            guess\
    \ = [1, 5, 3, 7, 19]\n            compare(game, guess)\n            \n       \
    \     game = [1, 5, 3, 7, 9]\n            guess = [1, 5, 3, 7, 20]\n         \
    \   compare(game, guess)\n            \n            game = [1, 5, 3, 7, 9]\n \
    \           guess = [1, 5, 3, 7, 21]\n            compare(game, guess)\n     \
    \       \n            game = [1, 5, 3, 7, 9]\n            guess = [1, 5, 3, 7,\
    \ 22]\n            compare(game, guess)\n            \n            game = [1,\
    \ 5, 3, 7, 9]\n            guess = [1, 5, 3, 7, 23]\n            compare(game,\
    \ guess)\n            \n            game = [1, 5, 3, 7, 9]\n            guess\
    \ = [1, 5, 3, 7, 24]\n            compare(game, guess)\n            \n       \
    \     game = [1, 5, 3, 7, 9]\n            guess = [1, 5, 3, 7, 25]\n         \
    \   compare(\ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 1],\
    \ [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0, 0, 0, 0,\
    \ 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1, 2,\
    \ 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2, 3,\
    \ 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpas5jthso.py\"\
    , line 16\n    game = [1, 5, 3, 7, 9]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ scores = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n            guesses = [10, 20,\
    \ 30, 40, 50, 60, 70, 80, 90]\n            compare(scores, guesses) == [0, 0,\
    \ 0, 0, 0, 0, 0, 0]\n            compare(scores, guesses) == [0, 0, 0, 0, 0, 0,\
    \ 0, 0]\n            compare(scores, guesses) == [0, 0, 0, 0, 0, 0, 0, 0]\n  \
    \          compare(scores, guesses) == [0, 0, 0, 0, 0, 0, 0, 0]\n            compare(scores,\
    \ guesses) == [0, 0, 0, 0, 0, 0, 0, 0]\n            compare(scores, guesses) ==\
    \ [0, 0, 0, 0, 0, 0, 0, 0]\n            compare(scores, guesses) == [0, 0, 0,\
    \ 0, 0, 0, 0, 0]\n            compare(scores, guesses) == [0, 0, 0, 0, 0, 0, 0,\
    \ 0]\n            compare(scores, guesses) == [0, 0, 0, 0, 0, 0, 0, 0]\n     \
    \       compare(scores, guesses) == [0, 0, 0, 0, 0, 0, 0, 0]\n            compare(scores,\
    \ guesses) == [0, 0, 0, 0, 0, 0, 0, 0]\n            compare(scores, guesses) ==\
    \ [0, 0, 0, 0, 0, 0, 0, 0]\n            compare(scores, guesses) == [0, 0, 0,\
    \ 0, 0, 0, 0, 0]\n            compare(scores, guesses) == [0, 0, 0, 0, 0, 0, 0,\
    \ 0]\n            compare(scores, guesses) == [0, 0, 0, 0, 0, 0, 0, 0]\n     \
    \       compare(scores, guesses) == [0, 0, 0, 0, 0, 0, 0, 0]\n            compare(scores,\
    \ guesses) == [0, 0, 0, 0, 0, 0, 0, 0]\n            compare(scores, guesses) ==\
    \ [0, 0, 0, 0, 0, 0, 0, 0]\n            compare(scores, guesses) == [0, 0, 0,\
    \ 0, 0, 0, 0, 0]\n            compare(scores, guesses) == [0, 0, 0, 0, 0, 0, 0,\
    \ 0]\n            compare(scores, guesses) == [0, 0, 0, 0, 0, 0, 0, 0]\n     \
    \       compare(scores, guesses) == [0, 0, 0, 0, 0, 0, 0, 0]\n            compare(scores,\
    \ guesses) == [0, 0, 0, 0, 0, 0, 0, 0]\n            compare(scores, guesses) ==\
    \ [0, 0, 0, 0, 0, 0, 0, 0]\n            compare(scores, guesses) == [0, 0, 0,\
    \ 0, 0, 0, 0, 0]\n            compare(scores, guesses) == [0, 0, 0, 0, 0, 0, 0,\
    \ 0]\n            compare(scores, guesses) == [0, 0, 0, 0, 0, 0, 0, 0]\n     \
    \       compare(scores, guesses) == [0, 0, 0, 0, 0, 0, 0, 0]\n            compare(scores,\
    \ guesses) == [0, 0, 0, 0, 0, 0, 0, 0]\n            compare(scores, guesses) ==\
    \ [0, 0, 0, 0, 0, 0, 0, 0]\n            compare(scores, guesses) == [0, 0, 0,\
    \ 0, 0, 0, 0, 0]\n            compare(scores, guesses) == [0, 0, 0, 0, 0, 0, 0,\
    \ 0]\n            compare(scores, guesses) == [0, 0, 0, 0, 0, 0, 0, 0]\n     \
    \       compare(scores, guesses) == [0, 0, 0, 0, 0, 0, 0, 0]\n            compare(scores,\
    \ guesses) == [0, 0, 0, 0, 0, 0, 0, 0]\n            compare(scores, guesses) ==\
    \ [0, 0, 0, 0, 0, 0, 0, 0]\n            compare(scores, guesses) == [0, 0, 0,\
    \ 0, 0, 0, 0, 0]\n            compare(scores, guesses) == [0, 0, 0, 0, 0, 0, 0,\
    \ 0]\n            compare(scores, guesses) == [0, 0, 0, 0, 0, 0, 0, 0]\n     \
    \       compare(scores, guesses) == [0, 0, 0, 0, 0, 0, 0, 0]\n            compare(\n\
    def check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2,\
    \ -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0,\
    \ 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2,\
    \ -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2,\
    \ 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcddap1o7.py\"\
    , line 16\n    scores = [10, 20, 30, 40, 50, 60, 70, 80, 90]\nIndentationError:\
    \ unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [5, 7, 9, 10, 11]\n            guess = [4, 7, 9, 10, 11]\n          \
    \  compare(game, guess)\n            >> [0, 0, 2, -1, 0]\n            \"\"\"\n\
    \    \"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\ndef check(candidate):\n    assert candidate([1, 2,\
    \ 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpawg6lq26.py\"\
    , line 16\n    game = [5, 7, 9, 10, 11]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [1, 3, 2]\n            guess = [1, 3, 2]\n            compare(game, guess)\n\
    \            # returns [1, 0, -1]\n            \n            game = [1, 3, 2]\n\
    \            guess = [1, 3, 3]\n            compare(game, guess)\n           \
    \ # returns [1, 0, -1]\n            \n            game = [1, 3, 2]\n         \
    \   guess = [1, 3, 1]\n            compare(game, guess)\n            # returns\
    \ [1, 0, -1]\n            \n            game = [1, 3, 2]\n            guess =\
    \ [1, 3, 2]\n            compare(game, guess)\n            # returns [1, 0, -1]\n\
    \            \n            game = [1, 3, 2]\n            guess = [1, 3, 3]\n \
    \           compare(game, guess)\n            # returns [1, 0, -1]\n         \
    \   \n            game = [1, 3, 2]\n            guess = [1, 3, 1]\n          \
    \  compare(game, guess)\n            # returns [1, 0, -1]\n            \n    \
    \        game = [1, 3, 2]\n            guess = [1, 3, 2]\n            compare(game,\
    \ guess)\n            # returns [1, 0, -1]\n            \n            game = [1,\
    \ 3, 2]\n            guess = [1, 3, 3]\n            compare(game, guess)\n   \
    \         # returns [1, 0, -1]\n            \n            game = [1, 3, 2]\n \
    \           guess = [1, 3, 1]\n            compare(game, guess)\n            #\
    \ returns [1, 0, -1]\n            \n            game = [1, 3, 2]\n           \
    \ guess = [1, 3, 2]\n            compare(game, guess)\n            # returns [1,\
    \ 0, -1]\n            \n            game = [1, 3, 2]\n            guess = [1,\
    \ 3, 3]\n            compare(game, guess)\n            # returns [1, 0, -1]\n\
    \            \n            game = [1, 3, 2]\n            guess = [1, 3, 1]\n \
    \           compare(game, guess)\n            # returns [1, 0, -1]\n         \
    \   \n            game = [1, 3, 2]\n            guess = [1, 3, 2]\n          \
    \  compare(game, guess)\n            # returns [1, 0, -1]\n            \n    \
    \        game = [1, 3, 2]\n            guess = [1, 3, 3]\n            compare(game,\
    \ guess)\n            # returns [1, 0, -1]\n            \n            game = [1,\
    \ 3, 2]\n            guess = [1, 3, 1]\n            compare(game, guess)\n   \
    \         # returns [1, 0, -1]\n            \n            game = [1, 3, 2]\n \
    \           guess = [1, 3, 2]\n            compare(game, guess)\n            #\
    \ returns [1, 0, -1]\n            \n            game = [1, 3, 2]\n           \
    \ guess = [1, 3, 3]\n            compare(game, guess)\n            # returns [1,\
    \ 0, -1]\n            \n            game\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkx4y9sci.py\"\
    , line 16\n    game = [1, 3, 2]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [2,1,3,5,4,6,7]\n            guess = [2,1,4,5,6,7,8]\n            compare(game,\
    \ guess)\n            \n            game = [2,1,3,5,4,6,7]\n            guess\
    \ = [2,1,4,5,6,7,8]\n            compare(game, guess)\n            \n        \
    \    game = [2,1,3,5,4,6,7]\n            guess = [2,1,4,5,6,7,8]\n           \
    \ compare(game, guess)\n            \n            game = [2,1,3,5,4,6,7]\n   \
    \         guess = [2,1,4,5,6,7,8]\n            compare(game, guess)\n        \
    \    \n            game = [2,1,3,5,4,6,7]\n            guess = [2,1,4,5,6,7,8]\n\
    \            compare(game, guess)\n            \n            game = [2,1,3,5,4,6,7]\n\
    \            guess = [2,1,4,5,6,7,8]\n            compare(game, guess)\n     \
    \       \n            game = [2,1,3,5,4,6,7]\n            guess = [2,1,4,5,6,7,8]\n\
    \            compare(game, guess)\n            \n            game = [2,1,3,5,4,6,7]\n\
    \            guess = [2,1,4,5,6,7,8]\n            compare(game, guess)\n     \
    \       \n            game = [2,1,3,5,4,6,7]\n            guess = [2,1,4,5,6,7,8]\n\
    \            compare(game, guess)\n            \n            game = [2,1,3,5,4,6,7]\n\
    \            guess = [2,1,4,5,6,7,8]\n            compare(game, guess)\n     \
    \       \n            game = [2,1,3,5,4,6,7]\n            guess = [2,1,4,5,6,7,8]\n\
    \            compare(game, guess)\n            \n            game = [2,1,3,5,4,6,7]\n\
    \            guess = [2,1,4,5,6,7,8]\n            compare(game, guess)\n     \
    \       \n            game = [2,1,3,5,4,6,7]\n            guess = [2,1,4,5,6,7,8]\n\
    \            compare(game, guess)\n            \n            game = [2,1,3,5,4,6,7]\n\
    \            guess = [2,1,4,5,6,7,8]\n            compare(game, guess)\n     \
    \       \n            game = [2,1,3,5,4,6,7]\n            guess = [2,1,4,5,6,7,8]\n\
    \            compare(game, guess)\n            \n            game = [2,1,3,5,4,6,7]\n\
    \            guess = [2,1,4,5,6,7,8]\n            compare(game, guess)\n     \
    \       \n\ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 1], [1,\
    \ 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0, 0, 0, 0, 0,\
    \ 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1, 2, 3],\
    \ [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2, 3, 4])\
    \ == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgd16584x.py\"\
    , line 16\n    game = [2,1,3,5,4,6,7]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [1, 3, 2]\n            guess = [1, 3, 2]\n            compare(game, guess)\n\
    \            > [0, 0, 0]\n            \n            game = [1, 3, 2]\n       \
    \     guess = [1, 3, 3]\n            compare(game, guess)\n            > [0, 0,\
    \ 1]\n            \n            game = [1, 3, 2]\n            guess = [1, 3, 1]\n\
    \            compare(game, guess)\n            > [0, 1, 0]\n            \n   \
    \         game = [1, 3, 2]\n            guess = [1, 3, 3]\n            compare(game,\
    \ guess)\n            > [0, 1, 1]\n            \n            game = [1, 3, 2]\n\
    \            guess = [1, 3, 1]\n            compare(game, guess)\n           \
    \ > [0, 1, 1]\n            \n            game = [1, 3, 2]\n            guess =\
    \ [1, 3, 3]\n            compare(game, guess)\n            > [0, 1, 1]\n     \
    \       \n            game = [1, 3, 2]\n            guess = [1, 3, 1]\n      \
    \      compare(game, guess)\n            > [0, 1, 1]\n            \n         \
    \   game = [1, 3, 2]\n            guess = [1, 3, 3]\n            compare(game,\
    \ guess)\n            > [0, 1, 1]\n            \n            game = [1, 3, 2]\n\
    \            guess = [1, 3, 1]\n            compare(game, guess)\n           \
    \ > [0, 1, 1]\n            \n            game = [1, 3, 2]\n            guess =\
    \ [1, 3, 3]\n            compare(game, guess)\n            > [0, 1, 1]\n     \
    \       \n            game = [1, 3, 2]\n            guess = [1, 3, 1]\n      \
    \      compare(game, guess)\n            > [0, 1, 1]\n            \n         \
    \   game = [1, 3, 2]\n            guess = [1, 3, 3]\n            compare(game,\
    \ guess)\n            > [0, 1, 1]\n            \n            game = [1, 3, 2]\n\
    \            guess = [1, 3, 1]\n            compare(game, guess)\n           \
    \ > [0, 1, 1]\n            \n            game = [1, 3, 2]\n            guess =\
    \ [1, 3, 3]\n            compare(game, guess)\n            > [0, 1, 1]\n     \
    \       \n            game = [1, 3, 2]\n            guess = [1, 3, 1]\n      \
    \      compare(game, guess)\n            > [0, 1, 1]\n            \n         \
    \   game = [1, 3, 2]\n            guess = [1, 3, 3]\n            compare(game,\
    \ guess)\n            > [0, 1, 1]\n            \n            game = [1, 3, 2]\n\
    \            guess = [1, 3, 1]\n            compare(game, guess)\n           \
    \ > [0, 1, 1]\n            \n            game = [1, 3, 2]\n            guess =\
    \ [1, 3, 3]\n            compare(\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnojxfbe3.py\"\
    , line 16\n    game = [1, 3, 2]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [1,3,5,7,9]\n            guess = [1,3,5,7,9]\n            compare(game,\
    \ guess)\n            \n            game = [1,3,5,7,9]\n            guess = [1,3,5,7,8]\n\
    \            compare(game, guess)\n            \n            game = [1,3,5,7,9]\n\
    \            guess = [1,3,5,7,10]\n            compare(game, guess)\n        \
    \    \n            game = [1,3,5,7,9]\n            guess = [1,3,5,7,9]\n     \
    \       compare(game, guess)\n            \n            game = [1,3,5,7,9]\n \
    \           guess = [1,3,5,7,8]\n            compare(game, guess)\n          \
    \  \n            game = [1,3,5,7,9]\n            guess = [1,3,5,7,10]\n      \
    \      compare(game, guess)\n            \n            game = [1,3,5,7,9]\n  \
    \          guess = [1,3,5,7,9]\n            compare(game, guess)\n           \
    \ \n            game = [1,3,5,7,9]\n            guess = [1,3,5,7,8]\n        \
    \    compare(game, guess)\n            \n            game = [1,3,5,7,9]\n    \
    \        guess = [1,3,5,7,10]\n            compare(game, guess)\n            \n\
    \            game = [1,3,5,7,9]\n            guess = [1,3,5,7,9]\n           \
    \ compare(game, guess)\n            \n            game = [1,3,5,7,9]\n       \
    \     guess = [1,3,5,7,8]\n            compare(game, guess)\n            \n  \
    \          game = [1,3,5,7,9]\n            guess = [1,3,5,7,10]\n            compare(game,\
    \ guess)\n            \n            game = [1,3,5,7,9]\n            guess = [1,3,5,7,9]\n\
    \            compare(game, guess)\n            \n            game = [1,3,5,7,9]\n\
    \            guess = [1,3,5,7,8]\n            compare(game, guess)\n         \
    \   \n            game = [1,3,5,7,9]\n            guess = [1,3,5,7,10]\n     \
    \       compare(game, guess)\n            \n            game = [1,3,5,7,9]\n \
    \           guess = [1,3,5,7,9]\n            compare(game, guess)\n          \
    \  \n            game = [1,3,5,7,9]\n            guess = [1,3,5,7,8]\n       \
    \     compare(game, guess)\n            \n            game = [1,3,5,7,9]\n   \
    \         guess = [1,3,5,7,10]\n            compare(game, guess)\n           \
    \ \n            game = [1,3,5,7,9]\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8z3ws4c4.py\"\
    , line 16\n    game = [1,3,5,7,9]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [10, 20, 30, 40, 50]\n            guess = [10, 20, 30, 40, 50]\n    \
    \        compare(game, guess)\n            >> [0, 0, 0, 0, 0]\n            \n\
    \            game = [10, 20, 30, 40, 50]\n            guess = [10, 20, 30, 40,\
    \ 50]\n            compare(game, guess)\n            >> [0, 0, 0, 0, 0]\n    \
    \        \n            game = [10, 20, 30, 40, 50]\n            guess = [10, 20,\
    \ 30, 40, 50]\n            compare(game, guess)\n            >> [0, 0, 0, 0, 0]\n\
    \            \n            game = [10, 20, 30, 40, 50]\n            guess = [10,\
    \ 20, 30, 40, 50]\n            compare(game, guess)\n            >> [0, 0, 0,\
    \ 0, 0]\n            \n            game = [10, 20, 30, 40, 50]\n            guess\
    \ = [10, 20, 30, 40, 50]\n            compare(game, guess)\n            >> [0,\
    \ 0, 0, 0, 0]\n            \n            game = [10, 20, 30, 40, 50]\n       \
    \     guess = [10, 20, 30, 40, 50]\n            compare(game, guess)\n       \
    \     >> [0, 0, 0, 0, 0]\n            \n            game = [10, 20, 30, 40, 50]\n\
    \            guess = [10, 20, 30, 40, 50]\n            compare(game, guess)\n\
    \            >> [0, 0, 0, 0, 0]\n            \n            game = [10, 20, 30,\
    \ 40, 50]\n            guess = [10, 20, 30, 40, 50]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, 0, 0]\n            \n            game = [10,\
    \ 20, 30, 40, 50]\n            guess = [10, 20, 30, 40, 50]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, 0, 0]\n            \n            game = [10,\
    \ 20, 30, 40, 50]\n            guess = [10, 20, 30, 40, 50]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, 0, 0]\n            \n            game = [10,\
    \ 20, 30, 40, 50]\n            guess = [10, 20, 30, 40, 50]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, 0, 0]\n            \n            game = [10,\
    \ 20, 30, 40, 50]\n            guess = [10, 20, 30, 40, 50]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, 0, 0]\n            \n            game = [10,\
    \ 20, 30, 40, 50]\n            guess = [10, 20, 30, 40, 50]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, 0, 0]\n            \n            game = [10,\
    \ 20, 30, 40, 50]\n            guess = [10, 20, 30, 40, 50]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, 0, 0]\n            \n            game = [10,\
    \ 20, 30, 40, 5\ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 1],\
    \ [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0, 0, 0, 0,\
    \ 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1, 2,\
    \ 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2, 3,\
    \ 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw05qyys0.py\"\
    , line 16\n    game = [10, 20, 30, 40, 50]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [1, 4, 7, 10, 13, 16, 19, 22, 25, 28, 31]\n            guess = [1, 4,\
    \ 7, 10, 13, 16, 19, 22, 25, 28, 31]\n            compare(game, guess)\n     \
    \       >> [0, 0, 0, 0, 0, 0, 0, 1, 0, -1]\n            \"\"\"\n    \"\"\"\n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \ndef check(candidate):\n\
    \    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0,\
    \ 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0,\
    \ 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n  \
    \  assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n\
    \    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph6k4n053.py\"\
    , line 16\n    game = [1, 4, 7, 10, 13, 16, 19, 22, 25, 28, 31]\nIndentationError:\
    \ unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [10, 20, 30, 40, 50]\n            guess = [20, 30, 40, 50, 60]\n    \
    \        compare(game, guess)\n            >> [0, 0, 0, 0, 0]\n            \n\
    \            game = [10, 20, 30, 40, 50]\n            guess = [20, 30, 40, 50,\
    \ 60]\n            compare(game, guess)\n            >> [0, 0, 0, 0, 0]\n    \
    \        \n            game = [10, 20, 30, 40, 50]\n            guess = [20, 30,\
    \ 40, 50, 60]\n            compare(game, guess)\n            >> [0, 0, 0, 0, 0]\n\
    \            \n            game = [10, 20, 30, 40, 50]\n            guess = [20,\
    \ 30, 40, 50, 60]\n            compare(game, guess)\n            >> [0, 0, 0,\
    \ 0, 0]\n            \n            game = [10, 20, 30, 40, 50]\n            guess\
    \ = [20, 30, 40, 50, 60]\n            compare(game, guess)\n            >> [0,\
    \ 0, 0, 0, 0]\n            \n            game = [10, 20, 30, 40, 50]\n       \
    \     guess = [20, 30, 40, 50, 60]\n            compare(game, guess)\n       \
    \     >> [0, 0, 0, 0, 0]\n            \n            game = [10, 20, 30, 40, 50]\n\
    \            guess = [20, 30, 40, 50, 60]\n            compare(game, guess)\n\
    \            >> [0, 0, 0, 0, 0]\n            \n            game = [10, 20, 30,\
    \ 40, 50]\n            guess = [20, 30, 40, 50, 60]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, 0, 0]\n            \n            game = [10,\
    \ 20, 30, 40, 50]\n            guess = [20, 30, 40, 50, 60]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, 0, 0]\n            \n            game = [10,\
    \ 20, 30, 40, 50]\n            guess = [20, 30, 40, 50, 60]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, 0, 0]\n            \n            game = [10,\
    \ 20, 30, 40, 50]\n            guess = [20, 30, 40, 50, 60]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, 0, 0]\n            \n            game = [10,\
    \ 20, 30, 40, 50]\n            guess = [20, 30, 40, 50, 60]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, 0, 0]\n            \n            game = [10,\
    \ 20, 30, 40, 50]\n            guess = [20, 30, 40, 50, 60]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, 0, 0]\n            \n            game = [10,\
    \ 20, 30, 40, 50]\n            guess = [20, 30, 40, 50, 60]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, 0, 0]\n            \n            game = [10,\
    \ 20, 30, 40, 5\ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 1],\
    \ [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0, 0, 0, 0,\
    \ 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1, 2,\
    \ 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2, 3,\
    \ 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsjr_66r6.py\"\
    , line 16\n    game = [10, 20, 30, 40, 50]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [5, 3, 6, 1, 4]\n            guess = [3, 6, 1, 4, 5]\n            \n\
    \            compare(game, guess)\n            # returns [0, 1, 1, -1, -1]\n \
    \           \"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \ndef check(candidate):\n    assert\
    \ candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n \
    \   assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0,\
    \ 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnsu1drex.py\"\
    , line 16\n    game = [5, 3, 6, 1, 4]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [1, 3, 2]\n            guess = [1, 3, 2]\n            compare(game, guess)\n\
    \            # returns [0, 1, 0]\n            \n            game = [1, 3, 2]\n\
    \            guess = [1, 3, 3]\n            compare(game, guess)\n           \
    \ # returns [0, 1, 1]\n            \n            game = [1, 3, 2]\n          \
    \  guess = [1, 3, 1]\n            compare(game, guess)\n            # returns\
    \ [0, 1, 0]\n            \n            game = [1, 3, 2]\n            guess = [1,\
    \ 3, 0]\n            compare(game, guess)\n            # returns [0, 1, 0]\n \
    \           \n            game = [1, 3, 2]\n            guess = [1, 3, 3]\n  \
    \          compare(game, guess)\n            # returns [0, 1, 1]\n           \
    \ \n            game = [1, 3, 2]\n            guess = [1, 3, 1]\n            compare(game,\
    \ guess)\n            # returns [0, 1, 0]\n            \n            game = [1,\
    \ 3, 2]\n            guess = [1, 3, 0]\n            compare(game, guess)\n   \
    \         # returns [0, 1, 0]\n            \n            game = [1, 3, 2]\n  \
    \          guess = [1, 3, 3]\n            compare(game, guess)\n            #\
    \ returns [0, 1, 1]\n            \n            game = [1, 3, 2]\n            guess\
    \ = [1, 3, 1]\n            compare(game, guess)\n            # returns [0, 1,\
    \ 0]\n            \n            game = [1, 3, 2]\n            guess = [1, 3, 0]\n\
    \            compare(game, guess)\n            # returns [0, 1, 0]\n         \
    \   \n            game = [1, 3, 2]\n            guess = [1, 3, 3]\n          \
    \  compare(game, guess)\n            # returns [0, 1, 1]\n            \n     \
    \       game = [1, 3, 2]\n            guess = [1, 3, 1]\n            compare(game,\
    \ guess)\n            # returns [0, 1, 0]\n            \n            game = [1,\
    \ 3, 2]\n            guess = [1, 3, 0]\n            compare(game, guess)\n   \
    \         # returns [0, 1, 0]\n            \n            game = [1, 3, 2]\n  \
    \          guess = [1, 3, 3]\n            compare(game, guess)\n            #\
    \ returns [0, 1, 1]\n            \n            game = [1, 3, 2]\n            guess\
    \ = [1, 3, 1]\n            compare(game, guess)\n            # returns [0, 1,\
    \ 0]\n            \n            game = [1, 3, 2]\n            guess = [1, 3, 0]\n\
    \            compare(game, guess)\n            # returns [0, 1, 0]\n         \
    \   \n            game = [1, 3, 2]\n            guess = [1, 3, 3]\n          \
    \  compare(game, guess)\n            # returns [0, 1, 1]\n            \n     \
    \       game = [1, 3, 2]\n            guess = [1, 3, 1]\n            compare(game,\
    \ \ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3,\
    \ 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0,\
    \ 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1,\
    \ -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) ==\
    \ [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpittv66fd.py\"\
    , line 16\n    game = [1, 3, 2]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ scores = [10, 20, 30, 40, 50]\n            guesses = [10, 20, 30, 40, 50]\n\
    \            compare(scores, guesses) == [0, 0, 0, 0, 0]\n            compare(scores,\
    \ guesses) == [0, 0, 0, 0, 0]\n            compare(scores, guesses) == [0, 0,\
    \ 0, 0, 0]\n            compare(scores, guesses) == [0, 0, 0, 0, 0]\n        \
    \    compare(scores, guesses) == [0, 0, 0, 0, 0]\n            compare(scores,\
    \ guesses) == [0, 0, 0, 0, 0]\n            compare(scores, guesses) == [0, 0,\
    \ 0, 0, 0]\n            compare(scores, guesses) == [0, 0, 0, 0, 0]\n        \
    \    compare(scores, guesses) == [0, 0, 0, 0, 0]\n            compare(scores,\
    \ guesses) == [0, 0, 0, 0, 0]\n            compare(scores, guesses) == [0, 0,\
    \ 0, 0, 0]\n            compare(scores, guesses) == [0, 0, 0, 0, 0]\n        \
    \    compare(scores, guesses) == [0, 0, 0, 0, 0]\n            compare(scores,\
    \ guesses) == [0, 0, 0, 0, 0]\n            compare(scores, guesses) == [0, 0,\
    \ 0, 0, 0]\n            compare(scores, guesses) == [0, 0, 0, 0, 0]\n        \
    \    compare(scores, guesses) == [0, 0, 0, 0, 0]\n            compare(scores,\
    \ guesses) == [0, 0, 0, 0, 0]\n            compare(scores, guesses) == [0, 0,\
    \ 0, 0, 0]\n            compare(scores, guesses) == [0, 0, 0, 0, 0]\n        \
    \    compare(scores, guesses) == [0, 0, 0, 0, 0]\n            compare(scores,\
    \ guesses) == [0, 0, 0, 0, 0]\n            compare(scores, guesses) == [0, 0,\
    \ 0, 0, 0]\n            compare(scores, guesses) == [0, 0, 0, 0, 0]\n        \
    \    compare(scores, guesses) == [0, 0, 0, 0, 0]\n            compare(scores,\
    \ guesses) == [0, 0, 0, 0, 0]\n            compare(scores, guesses) == [0, 0,\
    \ 0, 0, 0]\n            compare(scores, guesses) == [0, 0, 0, 0, 0]\n        \
    \    compare(scores, guesses) == [0, 0, 0, 0, 0]\n            compare(scores,\
    \ guesses) == [0, 0, 0, 0, 0]\n            compare(scores, guesses) == [0, 0,\
    \ 0, 0, 0]\n            compare(scores, guesses) == [0, 0, 0, 0, 0]\n        \
    \    compare(scores, guesses) == [0, 0, 0, 0, 0]\n            compare(scores,\
    \ guesses) == [0, 0, 0, 0, 0]\n            compare(scores, guesses) == [0, 0,\
    \ 0, 0, 0]\n            compare(scores, guesses) == [0, 0, 0, 0, 0]\n        \
    \    compare(scores, guesses) == [0, 0, 0, 0, 0]\n            compare(scores,\
    \ guesses) == [0, 0, 0, 0, 0]\n            compare(scores, guesses) == [0, 0,\
    \ 0, 0, 0]\n            compare(scores, guesses) == [0, 0, 0, 0, 0]\n        \
    \    compare(scores, guesses) == [0, 0, 0, 0, 0]\n            compare(scores,\
    \ guesses) == [0, 0, 0, 0, 0]\n            compare(scores, guesses) == [0, 0,\
    \ 0, 0, 0]\n            compare(scores, guesses) == [0, 0, 0, 0, 0]\n        \
    \    compare(scores, guesses) == \ndef check(candidate):\n    assert candidate([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyzmuq50q.py\"\
    , line 16\n    scores = [10, 20, 30, 40, 50]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [1, 3, 2]\n            guess = [1, 3, 2]\n            compare(game, guess)\n\
    \            >> [0, 0, 0]\n            \n            game = [1, 3, 2]\n      \
    \      guess = [1, 3, 3]\n            compare(game, guess)\n            >> [1,\
    \ 1, 1]\n            \n            game = [1, 3, 2]\n            guess = [1, 3,\
    \ 1]\n            compare(game, guess)\n            >> [1, 1, 0]\n           \
    \ \n            game = [1, 3, 2]\n            guess = [1, 3, 2]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0]\n            \n            game = [1, 3, 2]\n\
    \            guess = [1, 3, 3]\n            compare(game, guess)\n           \
    \ >> [1, 1, 1]\n            \n            game = [1, 3, 2]\n            guess\
    \ = [1, 3, 1]\n            compare(game, guess)\n            >> [1, 1, 0]\n  \
    \          \n            game = [1, 3, 2]\n            guess = [1, 3, 2]\n   \
    \         compare(game, guess)\n            >> [0, 0, 0]\n            \n     \
    \       game = [1, 3, 2]\n            guess = [1, 3, 3]\n            compare(game,\
    \ guess)\n            >> [1, 1, 1]\n            \n            game = [1, 3, 2]\n\
    \            guess = [1, 3, 1]\n            compare(game, guess)\n           \
    \ >> [1, 1, 0]\n            \n            game = [1, 3, 2]\n            guess\
    \ = [1, 3, 2]\n            compare(game, guess)\n            >> [0, 0, 0]\n  \
    \          \n            game = [1, 3, 2]\n            guess = [1, 3, 3]\n   \
    \         compare(game, guess)\n            >> [1, 1, 1]\n            \n     \
    \       game = [1, 3, 2]\n            guess = [1, 3, 1]\n            compare(game,\
    \ guess)\n            >> [1, 1, 0]\n            \n            game = [1, 3, 2]\n\
    \            guess = [1, 3, 2]\n            compare(game, guess)\n           \
    \ >> [0, 0, 0]\n            \n            game = [1, 3, 2]\n            guess\
    \ = [1, 3, 3]\n            compare(game, guess)\n            >> [1, 1, 1]\n  \
    \          \n            game = [1, 3, 2]\n            guess = [1, 3, 1]\n   \
    \         compare(game, guess)\n            >> [1, 1, 0]\n            \n     \
    \       game = [1, 3, 2]\n            guess = [1, 3, 2]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0]\n            \n            game = [1, 3, 2]\n\
    \            guess = [1, 3, 3]\n            compare(game, guess)\n           \
    \ >> [1, 1, 1]\n            \n            game\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n \
    \   assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0,\
    \ 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps3tdcxgt.py\"\
    , line 16\n    game = [1, 3, 2]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [1, 3, 5]\n            guess = [1, 3, 5]\n            compare(game, guess)\n\
    \            \n            game = [1, 3, 5]\n            guess = [1, 4, 5]\n \
    \           compare(game, guess)\n            \n            game = [1, 3, 5]\n\
    \            guess = [1, 3, 6]\n            compare(game, guess)\n           \
    \ \n            game = [1, 3, 5]\n            guess = [1, 4, 6]\n            compare(game,\
    \ guess)\n            \n            game = [1, 3, 5]\n            guess = [1,\
    \ 5, 6]\n            compare(game, guess)\n            \n            game = [1,\
    \ 3, 5]\n            guess = [1, 6, 6]\n            compare(game, guess)\n   \
    \         \n            game = [1, 3, 5]\n            guess = [1, 5, 7]\n    \
    \        compare(game, guess)\n            \n            game = [1, 3, 5]\n  \
    \          guess = [1, 6, 7]\n            compare(game, guess)\n            \n\
    \            game = [1, 3, 5]\n            guess = [1, 7, 7]\n            compare(game,\
    \ guess)\n            \n            game = [1, 3, 5]\n            guess = [1,\
    \ 7, 8]\n            compare(game, guess)\n            \n            game = [1,\
    \ 3, 5]\n            guess = [1, 8, 8]\n            compare(game, guess)\n   \
    \         \n            game = [1, 3, 5]\n            guess = [1, 8, 9]\n    \
    \        compare(game, guess)\n            \n            game = [1, 3, 5]\n  \
    \          guess = [1, 9, 9]\n            compare(game, guess)\n            \n\
    \            game = [1, 3, 5]\n            guess = [1, 9, 10]\n            compare(game,\
    \ guess)\n            \n            game = [1, 3, 5]\n            guess = [1,\
    \ 10, 10]\n            compare(game, guess)\n            \n            game =\
    \ [1, 3, 5]\n            guess = [1, 10, 11]\n            compare(game, guess)\n\
    \            \n            game = [1, 3, 5]\n            guess = [1, 11, 11]\n\
    \            compare(game, guess)\n            \n            game = [1, 3, 5]\n\
    \            guess = [1, 11, 12]\n            compare(game, guess)\n         \
    \   \n            game = [1, 3, 5]\n            guess = [1, 12, 12]\n        \
    \    compare(game, guess)\n            \n            game = [1, 3, 5]\n      \
    \      guess = [1, 12, 13]\n            compare(game, guess)\n            \n \
    \           game = [1, 3, 5]\n            guess = [1, 13, 13]\n            compare(game,\
    \ guess)\n            \n            game\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8q8xcnc_.py\"\
    , line 16\n    game = [1, 3, 5]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [1, 5, 3, 7, 8]\n            guess = [1, 5, 3, 7, 8]\n            compare(game,\
    \ guess)\n            > [0, 0, 0, 0, 0]\n            \n            game = [1,\
    \ 5, 3, 7, 8]\n            guess = [1, 5, 3, 7, 9]\n            compare(game,\
    \ guess)\n            > [0, 0, 0, 0, 0]\n            \n            game = [1,\
    \ 5, 3, 7, 8]\n            guess = [1, 5, 3, 7, 8]\n            compare(game,\
    \ guess)\n            > [0, 0, 0, 0, 0]\n            \n            game = [1,\
    \ 5, 3, 7, 8]\n            guess = [1, 5, 3, 7, 9]\n            compare(game,\
    \ guess)\n            > [0, 0, 0, 0, 0]\n            \n            game = [1,\
    \ 5, 3, 7, 8]\n            guess = [1, 5, 3, 7, 8]\n            compare(game,\
    \ guess)\n            > [0, 0, 0, 0, 0]\n            \n            game = [1,\
    \ 5, 3, 7, 8]\n            guess = [1, 5, 3, 7, 9]\n            compare(game,\
    \ guess)\n            > [0, 0, 0, 0, 0]\n            \n            game = [1,\
    \ 5, 3, 7, 8]\n            guess = [1, 5, 3, 7, 8]\n            compare(game,\
    \ guess)\n            > [0, 0, 0, 0, 0]\n            \n            game = [1,\
    \ 5, 3, 7, 8]\n            guess = [1, 5, 3, 7, 9]\n            compare(game,\
    \ guess)\n            > [0, 0, 0, 0, 0]\n            \n            game = [1,\
    \ 5, 3, 7, 8]\n            guess = [1, 5, 3, 7, 8]\n            compare(game,\
    \ guess)\n            > [0, 0, 0, 0, 0]\n            \n            game = [1,\
    \ 5, 3, 7, 8]\n            guess = [1, 5, 3, 7, 9]\n            compare(game,\
    \ guess)\n            > [0, 0, 0, 0, 0]\n            \n            game = [1,\
    \ 5, 3, 7, 8]\n            guess = [1, 5, 3, 7, 8]\n            compare(game,\
    \ guess)\n            > [0, 0, 0, 0, 0]\n            \n            game = [1,\
    \ 5, 3, 7, 8]\n            guess = [1, 5, 3, 7, 9]\n            compare(game,\
    \ guess)\n            > [0, 0, 0, 0, 0]\n            \n            game = [1,\
    \ 5, 3, 7, 8]\n            guess = [1, 5, 3, 7, 8]\n            compare(game,\
    \ guess)\n            > [0, 0, 0, 0, 0]\n            \n            game = [1,\
    \ 5, 3, 7, 8]\n            guess = [1, 5, 3, 7, 9]\n            compare(game,\
    \ guess)\n            > [0, 0, 0, 0, 0]\n            \n            game = [1,\
    \ 5, 3, 7, 8]\n            guess = [1, 5, 3, 7, 8]\n            compare(game,\
    \ guess)\n            > [0, 0, 0, 0, 0]\n            \n            game\ndef check(candidate):\n\
    \    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0,\
    \ 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0,\
    \ 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n  \
    \  assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n\
    \    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpph27aqhr.py\"\
    , line 16\n    game = [1, 5, 3, 7, 8]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [4, 2, 5, 1, 3]\n            guess = [4, 2, 5, 1, 3]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, 0, 0]\n            \n            game = [4,\
    \ 2, 5, 1, 3]\n            guess = [4, 2, 5, 1, 4]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, 0, 0]\n            \n            game = [4,\
    \ 2, 5, 1, 3]\n            guess = [4, 2, 5, 1, 2]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, 0, 0]\n            \n            game = [4,\
    \ 2, 5, 1, 3]\n            guess = [4, 2, 5, 1, 1]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, 0, 0]\n            \n            game = [4,\
    \ 2, 5, 1, 3]\n            guess = [4, 2, 5, 1, 0]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, 0, 0]\n            \n            game = [4,\
    \ 2, 5, 1, 3]\n            guess = [4, 2, 5, 1, -1]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, 0, 0]\n            \n            game = [4,\
    \ 2, 5, 1, 3]\n            guess = [4, 2, 5, 1, -2]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, 0, 0]\n            \n            game = [4,\
    \ 2, 5, 1, 3]\n            guess = [4, 2, 5, 1, -3]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, 0, 0]\n            \n            game = [4,\
    \ 2, 5, 1, 3]\n            guess = [4, 2, 5, 1, -4]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, 0, 0]\n            \n            game = [4,\
    \ 2, 5, 1, 3]\n            guess = [4, 2, 5, 1, -5]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, 0, 0]\n            \n            game = [4,\
    \ 2, 5, 1, 3]\n            guess = [4, 2, 5, 1, -6]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, 0, 0]\n            \n            game = [4,\
    \ 2, 5, 1, 3]\n            guess = [4, 2, 5, 1, -7]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, 0, 0]\n            \n            game = [4,\
    \ 2, 5, 1, 3]\n            guess = [4, 2, 5, 1, -8]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, 0, 0]\n            \n            game = [4,\
    \ 2, 5, 1, 3]\n            guess = [4, 2, 5, 1, -9]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, 0, 0]\n            \n            game = [4,\
    \ 2, 5, 1, 3]\n            guess = [4, 2, 5, 1, -10]\n            compare(game,\
    \ guess)\n            >> \ndef check(candidate):\n    assert candidate([1, 2,\
    \ 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2w5r16qo.py\"\
    , line 16\n    game = [4, 2, 5, 1, 3]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [1, 3, 2]\n            guess = [1, 3, 2]\n            compare(game, guess)\n\
    \            # returns [1, 0, -1]\n            \n            game = [1, 3, 2]\n\
    \            guess = [1, 3, 3]\n            compare(game, guess)\n           \
    \ # returns [1, 0, -1]\n            \n            game = [1, 3, 2]\n         \
    \   guess = [1, 3, 1]\n            compare(game, guess)\n            # returns\
    \ [1, 0, -1]\n            \n            game = [1, 3, 2]\n            guess =\
    \ [1, 3, 2]\n            compare(game, guess)\n            # returns [1, 0, -1]\n\
    \            \n            game = [1, 3, 2]\n            guess = [1, 3, 3]\n \
    \           compare(game, guess)\n            # returns [1, 0, -1]\n         \
    \   \n            game = [1, 3, 2]\n            guess = [1, 3, 1]\n          \
    \  compare(game, guess)\n            # returns [1, 0, -1]\n            \n    \
    \        game = [1, 3, 2]\n            guess = [1, 3, 2]\n            compare(game,\
    \ guess)\n            # returns [1, 0, -1]\n            \n            game = [1,\
    \ 3, 2]\n            guess = [1, 3, 3]\n            compare(game, guess)\n   \
    \         # returns [1, 0, -1]\n            \n            game = [1, 3, 2]\n \
    \           guess = [1, 3, 1]\n            compare(game, guess)\n            #\
    \ returns [1, 0, -1]\n            \n            game = [1, 3, 2]\n           \
    \ guess = [1, 3, 2]\n            compare(game, guess)\n            # returns [1,\
    \ 0, -1]\n            \n            game = [1, 3, 2]\n            guess = [1,\
    \ 3, 3]\n            compare(game, guess)\n            # returns [1, 0, -1]\n\
    \            \n            game = [1, 3, 2]\n            guess = [1, 3, 1]\n \
    \           compare(game, guess)\n            # returns [1, 0, -1]\n         \
    \   \n            game = [1, 3, 2]\n            guess = [1, 3, 2]\n          \
    \  compare(game, guess)\n            # returns [1, 0, -1]\n            \n    \
    \        game = [1, 3, 2]\n            guess = [1, 3, 3]\n            compare(game,\
    \ guess)\n            # returns [1, 0, -1]\n            \n            game = [1,\
    \ 3, 2]\n            guess = [1, 3, 1]\n            compare(game, guess)\n   \
    \         # returns [1, 0, -1]\n            \n            game = [1, 3, 2]\n \
    \           guess = [1, 3, 2]\n            compare(game, guess)\n            #\
    \ returns [1, 0, -1]\n            \n            game = [1, 3, 2]\n           \
    \ guess = [1, 3, 3]\n            compare(game, guess)\n            # returns [1,\
    \ 0, -1]\n            \n            game\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvrlsykzk.py\"\
    , line 16\n    game = [1, 3, 2]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, \ndef check(candidate):\n\
    \    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0,\
    \ 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0,\
    \ 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n  \
    \  assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n\
    \    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpaf_9rhby.py\"\
    , line 16\n    , 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, \n  \
    \             ^\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [5, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n            guess\
    \ = [7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1]\n           \
    \ \"\"\"\n    \n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0,\
    \ 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0,\
    \ 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n  \
    \  assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n\
    \    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp17vqv24i.py\"\
    , line 16\n    game = [5, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n\
    IndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ scores = [10, 20, 30, 40, 50]\n            guesses = [10, 20, 30, 40, 50]\n\
    \            compare(scores, guesses) --> [10, 0, 0, 10, 0]\n            \n  \
    \          scores = [10, 20, 30, 40, 50]\n            guesses = [20, 30, 40, 50,\
    \ 60]\n            compare(scores, guesses) --> [20, 0, 0, 20, 0]\n          \
    \  \n            scores = [10, 20, 30, 40, 50]\n            guesses = [10, 20,\
    \ 30, 40, 50]\n            compare(scores, guesses) --> [10, 0, 0, 10, 0]\n  \
    \          \n            scores = [10, 20, 30, 40, 50]\n            guesses =\
    \ [20, 30, 40, 50, 60]\n            compare(scores, guesses) --> [20, 0, 0, 20,\
    \ 0]\n            \n            scores = [10, 20, 30, 40, 50]\n            guesses\
    \ = [10, 20, 30, 40, 50]\n            compare(scores, guesses) --> [10, 0, 0,\
    \ 10, 0]\n            \n            scores = [10, 20, 30, 40, 50]\n          \
    \  guesses = [20, 30, 40, 50, 60]\n            compare(scores, guesses) --> [20,\
    \ 0, 0, 20, 0]\n            \n            scores = [10, 20, 30, 40, 50]\n    \
    \        guesses = [10, 20, 30, 40, 50]\n            compare(scores, guesses)\
    \ --> [10, 0, 0, 10, 0]\n            \n            scores = [10, 20, 30, 40, 50]\n\
    \            guesses = [20, 30, 40, 50, 60]\n            compare(scores, guesses)\
    \ --> [20, 0, 0, 20, 0]\n            \n            scores = [10, 20, 30, 40, 50]\n\
    \            guesses = [10, 20, 30, 40, 50]\n            compare(scores, guesses)\
    \ --> [10, 0, 0, 10, 0]\n            \n            scores = [10, 20, 30, 40, 50]\n\
    \            guesses = [20, 30, 40, 50, 60]\n            compare(scores, guesses)\
    \ --> [20, 0, 0, 20, 0]\n            \n            scores = [10, 20, 30, 40, 50]\n\
    \            guesses = [10, 20, 30, 40, 50]\n            compare(scores, guesses)\
    \ --> [10, 0, 0, 10, 0]\n            \n            scores = [10, 20, 30, 40, 50]\n\
    \            guesses = [20, 30, 40, 50, 60]\n            compare(scores, guesses)\
    \ --> [20, 0, 0, 20, 0]\n            \n            scores = [10, 20, 30, 40, 50]\n\
    \            guesses = [10, 20, 30, 40, 50]\n            compare(scores, guesses)\
    \ --> [10, 0, 0, 10, 0]\n            \n            scores = [10, 20, 30, 40, 50]\n\
    \            guesses = [20, 30, 40, 50, 60]\n            compare(scores, guesses)\
    \ --> [20, \ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 1], [1,\
    \ 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0, 0, 0, 0, 0,\
    \ 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1, 2, 3],\
    \ [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2, 3, 4])\
    \ == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwd22ujh3.py\"\
    , line 16\n    scores = [10, 20, 30, 40, 50]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [1, 3, 2]\n            guess = [1, 3, 2]\n            compare(game, guess)\n\
    \            >> [1, 1, 0]\n            \n            game = [1, 3, 2]\n      \
    \      guess = [1, 3, 3]\n            compare(game, guess)\n            >> [1,\
    \ 1, 1]\n            \n            game = [1, 3, 2]\n            guess = [1, 3,\
    \ 1]\n            compare(game, guess)\n            >> [1, 1, 0]\n           \
    \ \n            game = [1, 3, 2]\n            guess = [1, 3, 2]\n            compare(game,\
    \ guess)\n            >> [1, 1, 0]\n            \n            game = [1, 3, 2]\n\
    \            guess = [1, 3, 3]\n            compare(game, guess)\n           \
    \ >> [1, 1, 1]\n            \n            game = [1, 3, 2]\n            guess\
    \ = [1, 3, 1]\n            compare(game, guess)\n            >> [1, 1, 0]\n  \
    \          \n            game = [1, 3, 2]\n            guess = [1, 3, 2]\n   \
    \         compare(game, guess)\n            >> [1, 1, 0]\n            \n     \
    \       game = [1, 3, 2]\n            guess = [1, 3, 3]\n            compare(game,\
    \ guess)\n            >> [1, 1, 1]\n            \n            game = [1, 3, 2]\n\
    \            guess = [1, 3, 1]\n            compare(game, guess)\n           \
    \ >> [1, 1, 0]\n            \n            game = [1, 3, 2]\n            guess\
    \ = [1, 3, 2]\n            compare(game, guess)\n            >> [1, 1, 0]\n  \
    \          \n            game = [1, 3, 2]\n            guess = [1, 3, 3]\n   \
    \         compare(game, guess)\n            >> [1, 1, 1]\n            \n     \
    \       game = [1, 3, 2]\n            guess = [1, 3, 1]\n            compare(game,\
    \ guess)\n            >> [1, 1, 0]\n            \n            game = [1, 3, 2]\n\
    \            guess = [1, 3, 2]\n            compare(game, guess)\n           \
    \ >> [1, 1, 0]\n            \n            game = [1, 3, 2]\n            guess\
    \ = [1, 3, 3]\n            compare(game, guess)\n            >> [1, 1, 1]\n  \
    \          \n            game = [1, 3, 2]\n            guess = [1, 3, 1]\n   \
    \         compare(game, guess)\n            >> [1, 1, 0]\n            \n     \
    \       game = [1, 3, 2]\n            guess = [1, 3, 2]\n            compare(game,\
    \ guess)\n            >> [1, 1, 0]\n            \n            game = [1, 3, 2]\n\
    \            guess = [1, 3, 3]\n            compare(game, guess)\n           \
    \ >> [1, 1, 1]\n            \n            game\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n \
    \   assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0,\
    \ 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnrkteaq_.py\"\
    , line 16\n    game = [1, 3, 2]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [1,3,5,7,9]\n            guess = [1,3,5,7,9]\n            compare(game,\
    \ guess)\n            \n            game = [1,3,5,7,9]\n            guess = [2,4,6,8,10]\n\
    \            compare(game, guess)\n            \n            game = [1,3,5,7,9]\n\
    \            guess = [1,3,5,7,8]\n            compare(game, guess)\n         \
    \   \n            game = [1,3,5,7,9]\n            guess = [1,3,5,7,9]\n      \
    \      compare(game, guess)\n            \n            game = [1,3,5,7,9]\n  \
    \          guess = [1,3,5,7,9]\n            compare(game, guess)\n           \
    \ \n            game = [1,3,5,7,9]\n            guess = [1,3,5,7,9]\n        \
    \    compare(game, guess)\n            \n            game = [1,3,5,7,9]\n    \
    \        guess = [1,3,5,7,9]\n            compare(game, guess)\n            \n\
    \            game = [1,3,5,7,9]\n            guess = [1,3,5,7,9]\n           \
    \ compare(game, guess)\n            \n            game = [1,3,5,7,9]\n       \
    \     guess = [1,3,5,7,9]\n            compare(game, guess)\n            \n  \
    \          game = [1,3,5,7,9]\n            guess = [1,3,5,7,9]\n            compare(game,\
    \ guess)\n            \n            game = [1,3,5,7,9]\n            guess = [1,3,5,7,9]\n\
    \            compare(game, guess)\n            \n            game = [1,3,5,7,9]\n\
    \            guess = [1,3,5,7,9]\n            compare(game, guess)\n         \
    \   \n            game = [1,3,5,7,9]\n            guess = [1,3,5,7,9]\n      \
    \      compare(game, guess)\n            \n            game = [1,3,5,7,9]\n  \
    \          guess = [1,3,5,7,9]\n            compare(game, guess)\n           \
    \ \n            game = [1,3,5,7,9]\n            guess = [1,3,5,7,9]\n        \
    \    compare(game, guess)\n            \n            game = [1,3,5,7,9]\n    \
    \        guess = [1,3,5,7,9]\n            compare(game, guess)\n            \n\
    \            game = [1,3,5,7,9]\n            guess = [1,3,5,7,9]\n           \
    \ compare(game, guess)\n            \n            game = [1,3,5,7,9]\n       \
    \     guess = [1,3,5,7,9]\n            compare(game, guess)\n            \n  \
    \          game = [1,3,5,7,9]\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1jlfdqtu.py\"\
    , line 16\n    game = [1,3,5,7,9]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [2,1,4,3,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\n            guess\
    \ = [2,1,4,3,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\n            compare(game,\
    \ guess)\n            \n            game = [2,1,4,3,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\n\
    \            guess = [2,1,4,3,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,21]\n  \
    \          compare(game, guess)\n            \n            game = [2,1,4,3,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\n\
    \            guess = [2,1,4,3,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,21]\n  \
    \          compare(game, guess)\n            \n            game = [2,1,4,3,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\n\
    \            guess = [2,1,4,3,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,21]\n  \
    \          compare(game, guess)\n            \n            game = [2,1,4,3,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\n\
    \            guess = [2,1,4,3,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,21]\n  \
    \          compare(game, guess)\n            \n            game = [2,1,4,3,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\n\
    \            guess = [2,1,4,3,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,21]\n  \
    \          compare(game, guess)\n            \n            game = [2,1,4,3,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\n\
    \            guess = [2,1,4,3,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,21]\n  \
    \          compare(game, guess)\n            \n            game = [2,1,4,3,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\n\
    \            guess = [2,1,4,3,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,21]\n  \
    \          compare(game, guess)\n            \n            game = [2,1,4,3,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\n\
    \            guess = [2,1,4,3,\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnzft1ego.py\"\
    , line 16\n    game = [2,1,4,3,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\nIndentationError:\
    \ unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, \ndef check(candidate):\n\
    \    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0,\
    \ 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0,\
    \ 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n  \
    \  assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n\
    \    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzofpg27r.py\"\
    , line 16\n    , 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, \n  \
    \             ^\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [1, 3, 5]\n            guess = [1, 5, 3]\n            \n            compare(game,\
    \ guess)\n            \n            >>>[0, 0, 0]\n            \n            \n\
    \            game = [1, 3, 5]\n            guess = [1, 5, 4]\n            \n \
    \           compare(game, guess)\n            \n            >>>[0, 1, 0]\n   \
    \         \n            \n            game = [1, 3, 5]\n            guess = [1,\
    \ 5, 5]\n            \n            compare(game, guess)\n            \n      \
    \      >>>[0, 1, 1]\n            \n            \n            game = [1, 3, 5]\n\
    \            guess = [1, 5, 6]\n            \n            compare(game, guess)\n\
    \            \n            >>>[0, 1, 2]\n            \n            \n        \
    \    game = [1, 3, 5]\n            guess = [1, 5, 7]\n            \n         \
    \   compare(game, guess)\n            \n            >>>[0, 1, 3]\n           \
    \ \n            \n            game = [1, 3, 5]\n            guess = [1, 5, 8]\n\
    \            \n            compare(game, guess)\n            \n            >>>[0,\
    \ 1, 4]\n            \n            \n            game = [1, 3, 5]\n          \
    \  guess = [1, 5, 9]\n            \n            compare(game, guess)\n       \
    \     \n            >>>[0, 1, 5]\n            \n            \n            game\
    \ = [1, 3, 5]\n            guess = [1, 5, 10]\n            \n            compare(game,\
    \ guess)\n            \n            >>>[0, 1, 6]\n            \n            \n\
    \            game = [1, 3, 5]\n            guess = [1, 5, 11]\n            \n\
    \            compare(game, guess)\n            \n            >>>[0, 1, 7]\n  \
    \          \n            \n            game = [1, 3, 5]\n            guess = [1,\
    \ 5, 12]\n            \n            compare(game, guess)\n            \n     \
    \       >>>[0, 1, 8]\n            \n            \n            game = [1, 3, 5]\n\
    \            guess = [1, 5, 13]\n            \n            compare(game, guess)\n\
    \            \n            >>>[0, 1, 9]\n            \n            \n        \
    \    game = [1, 3, 5]\n            guess = [1, 5, 14]\n            \n        \
    \    compare(game, guess)\n            \n            >>>[0, 1, 10]\n         \
    \   \n            \n            game = [1, 3, 5]\n            guess = [1, 5, 15]\n\
    \            \n            compare(game, guess)\n            \n            >>>[0,\
    \ 1, 11]\n            \n            \n            game = [1, 3, 5]\n         \
    \   guess = [1, 5, 16]\n            \n            compare(game, guess)\n     \
    \       \n            >>>[0, 1, 12]\n            \n            \n            game\
    \ = [1, 3, 5]\n            guess = [1, 5, 17\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n \
    \   assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0,\
    \ 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv7alq830.py\"\
    , line 16\n    game = [1, 3, 5]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ scores = [1,5,6,7,8,9,10]\n            guesses = [5,6,7,8,9,10,11]\n       \
    \     compare(scores, guesses)\n            \n            >>>[0,0,0,0,0,-1]\n\
    \            \n            \"\"\"\n    \n    \"\"\"\n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \ndef check(candidate):\n    assert candidate([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprvit8rwm.py\"\
    , line 16\n    scores = [1,5,6,7,8,9,10]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n            guess = [60, 70, 80,\
    \ 90]\n            compare(game, guess)\n            >> [0, -1, -1, 1, -1, -1,\
    \ 1, -1, -1]\n            \n            \"\"\"\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \ndef check(candidate):\n    assert candidate([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2hl7o9kz.py\"\
    , line 16\n    game = [10, 20, 30, 40, 50, 60, 70, 80, 90]\nIndentationError:\
    \ unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [1,3,5,7,9,11,13,15,17,19]\n            guess = [1,3,5,7,9,11,13,15,17,19]\n\
    \            compare(game, guess)\n            \n            game = [1,3,5,7,9,11,13,15,17,19]\n\
    \            guess = [1,3,5,7,9,11,13,15,17,19]\n            compare(game, guess)\n\
    \            \n            game = [1,3,5,7,9,11,13,15,17,19]\n            guess\
    \ = [1,3,5,7,9,11,13,15,17,19]\n            compare(game, guess)\n           \
    \ \n            game = [1,3,5,7,9,11,13,15,17,19]\n            guess = [1,3,5,7,9,11,13,15,17,19]\n\
    \            compare(game, guess)\n            \n            game = [1,3,5,7,9,11,13,15,17,19]\n\
    \            guess = [1,3,5,7,9,11,13,15,17,19]\n            compare(game, guess)\n\
    \            \n            game = [1,3,5,7,9,11,13,15,17,19]\n            guess\
    \ = [1,3,5,7,9,11,13,15,17,19]\n            compare(game, guess)\n           \
    \ \n            game = [1,3,5,7,9,11,13,15,17,19]\n            guess = [1,3,5,7,9,11,13,15,17,19]\n\
    \            compare(game, guess)\n            \n            game = [1,3,5,7,9,11,13,15,17,19]\n\
    \            guess = [1,3,5,7,9,11,13,15,17,19]\n            compare(game, guess)\n\
    \            \n            game = [1,3,5,7,9,11,13,15,17,19]\n            guess\
    \ = [1,3,5,7,9,11,13,15,17,19]\n            compare(game, guess)\n           \
    \ \n            game = [1,3,5,7,9,11,13,15,17,19]\n            guess = [1,3,5,7,9,11,13,15,17,19]\n\
    \            compare(game, guess)\n            \n            game = [1,3,5,7,9,11,13,15,17,19]\n\
    \            guess = [1,3,5,7,9,11,13,15,17,19]\n            compare(game, guess)\n\
    \            \n            game = [1,3,5,7,9,11,13,15,17,19]\n            guess\
    \ = [1,3,5,7,9,11,13,15,17,19]\n            compare(game, guess)\n           \
    \ \n            game = [1,3,5,7,9,11,13,15,17,19]\n            guess = [1,3,5,7,9,11,13,15,17,19]\n\
    \            compare\ndef check(candidate):\n    assert candidate([1, 2, 3, 4,\
    \ 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpozowlz02.py\"\
    , line 16\n    game = [1,3,5,7,9,11,13,15,17,19]\nIndentationError: unexpected\
    \ indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [1, 5, 3, 6, 4, 2]\n            guess = [1, 5, 3, 6, 4, 2]\n        \
    \    compare(game, guess)\n            \n            game = [1, 5, 3, 6, 4, 2]\n\
    \            guess = [1, 5, 3, 6, 4, 3]\n            compare(game, guess)\n  \
    \          \n            game = [1, 5, 3, 6, 4, 2]\n            guess = [1, 5,\
    \ 3, 6, 4, 4]\n            compare(game, guess)\n            \n            game\
    \ = [1, 5, 3, 6, 4, 2]\n            guess = [1, 5, 3, 6, 4, 5]\n            compare(game,\
    \ guess)\n            \n            game = [1, 5, 3, 6, 4, 2]\n            guess\
    \ = [1, 5, 3, 6, 4, 6]\n            compare(game, guess)\n            \n     \
    \       game = [1, 5, 3, 6, 4, 2]\n            guess = [1, 5, 3, 6, 4, 7]\n  \
    \          compare(game, guess)\n            \n            game = [1, 5, 3, 6,\
    \ 4, 2]\n            guess = [1, 5, 3, 6, 4, 8]\n            compare(game, guess)\n\
    \            \n            game = [1, 5, 3, 6, 4, 2]\n            guess = [1,\
    \ 5, 3, 6, 4, 9]\n            compare(game, guess)\n            \n           \
    \ game = [1, 5, 3, 6, 4, 2]\n            guess = [1, 5, 3, 6, 4, 10]\n       \
    \     compare(game, guess)\n            \n            game = [1, 5, 3, 6, 4, 2]\n\
    \            guess = [1, 5, 3, 6, 4, 11]\n            compare(game, guess)\n \
    \           \n            game = [1, 5, 3, 6, 4, 2]\n            guess = [1, 5,\
    \ 3, 6, 4, 12]\n            compare(game, guess)\n            \n            game\
    \ = [1, 5, 3, 6, 4, 2]\n            guess = [1, 5, 3, 6, 4, 13]\n            compare(game,\
    \ guess)\n            \n            game = [1, 5, 3, 6, 4, 2]\n            guess\
    \ = [1, 5, 3, 6, 4, 14]\n            compare(game, guess)\n            \n    \
    \        game = [1, 5, 3, 6, 4, 2]\n            guess = [1, 5, 3, 6, 4, 15]\n\
    \            compare(game, guess)\n            \n            game = [1, 5, 3,\
    \ 6, 4, 2]\n            guess = [1, 5, 3, 6, 4, 16]\n            compare(game,\
    \ guess)\n            \n            game = [1, 5, 3, 6, 4, 2]\n            guess\
    \ = [1, 5, 3, 6, 4, 17]\n            compare(game, guess)\n            \n    \
    \        game = [1, 5, 3, 6, 4, 2]\n            guess = [1, 5, 3, 6, 4, 18]\n\
    \            compare(game\ndef check(candidate):\n    assert candidate([1, 2,\
    \ 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8047jv_3.py\"\
    , line 16\n    game = [1, 5, 3, 6, 4, 2]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [1, 5, 3, 7, 9, 2, 6]\n            guess = [1, 5, 3, 7, 9, 2, 6]\n  \
    \          compare(game, guess)\n            > [0, 0, 0, 0, 0, 0]\n          \
    \  \n            game = [1, 5, 3, 7, 9, 2, 6]\n            guess = [1, 5, 3, 7,\
    \ 9, 2, 6]\n            compare(game, guess)\n            > [0, 0, 0, 0, 0, 0]\n\
    \            \n            game = [1, 5, 3, 7, 9, 2, 6]\n            guess = [1,\
    \ 5, 3, 7, 9, 2, 6]\n            compare(game, guess)\n            > [0, 0, 0,\
    \ 0, 0, 0]\n            \n            game = [1, 5, 3, 7, 9, 2, 6]\n         \
    \   guess = [1, 5, 3, 7, 9, 2, 6]\n            compare(game, guess)\n        \
    \    > [0, 0, 0, 0, 0, 0]\n            \n            game = [1, 5, 3, 7, 9, 2,\
    \ 6]\n            guess = [1, 5, 3, 7, 9, 2, 6]\n            compare(game, guess)\n\
    \            > [0, 0, 0, 0, 0, 0]\n            \n            game = [1, 5, 3,\
    \ 7, 9, 2, 6]\n            guess = [1, 5, 3, 7, 9, 2, 6]\n            compare(game,\
    \ guess)\n            > [0, 0, 0, 0, 0, 0]\n            \n            game = [1,\
    \ 5, 3, 7, 9, 2, 6]\n            guess = [1, 5, 3, 7, 9, 2, 6]\n            compare(game,\
    \ guess)\n            > [0, 0, 0, 0, 0, 0]\n            \n            game = [1,\
    \ 5, 3, 7, 9, 2, 6]\n            guess = [1, 5, 3, 7, 9, 2, 6]\n            compare(game,\
    \ guess)\n            > [0, 0, 0, 0, 0, 0]\n            \n            game = [1,\
    \ 5, 3, 7, 9, 2, 6]\n            guess = [1, 5, 3, 7, 9, 2, 6]\n            compare(game,\
    \ guess)\n            > [0, 0, 0, 0, 0, 0]\n            \n            game = [1,\
    \ 5, 3, 7, 9, 2, 6]\n            guess = [1, 5, 3, 7, 9, 2, 6]\n            compare(game,\
    \ guess)\n            > [0, 0, 0, 0, 0, 0]\n            \n            game = [1,\
    \ 5, 3, 7, 9, 2, 6]\n            guess = [1, 5, 3, 7, 9, 2, 6]\n            compare(game,\
    \ guess)\n            > [0, 0, 0, 0, 0, 0]\n            \n            game = [1,\
    \ 5, 3, 7, 9, 2, 6]\n            guess = [1, 5, 3, 7, 9, 2, 6]\n            compare(game,\
    \ guess)\n            > [0, 0, 0, 0, 0, 0]\n            \n            game = [1,\
    \ 5, 3, 7, 9, 2, 6]\n            guess = [1, 5, 3, 7, 9, 2, 6]\n            compare(game,\
    \ guess)\n            > [0, 0, 0, 0, 0, 0]\n            \n            game = [1,\
    \ 5, 3, 7, 9, 2, 6]\n            guess = [1, 5, 3, 7, \ndef check(candidate):\n\
    \    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0,\
    \ 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0,\
    \ 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n  \
    \  assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n\
    \    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqphxg5h9.py\"\
    , line 16\n    game = [1, 5, 3, 7, 9, 2, 6]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n            guess = [1, 5, 9, 10]\n\
    \            compare(game, guess)\n            >> [0, 0, 0, 0, 0, 0, 0, -1, 0,\
    \ 0]\n            \"\"\"\n    \"\"\"\n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \ndef check(candidate):\n\
    \    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0,\
    \ 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0,\
    \ 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n  \
    \  assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n\
    \    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpco2dmoyy.py\"\
    , line 16\n    game = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nIndentationError: unexpected\
    \ indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [1, 3, 6, 4, 1, 5, 9, 2, 6]\n            guess = [1, 3, 6, 4, 1, 5, 9,\
    \ 2, 6]\n            compare(game, guess)\n            [0, 2, -4, -6, -4, -6,\
    \ -4, -6, -6]\n            \"\"\"\n    \"\"\"\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 1],\
    \ [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0, 0, 0, 0,\
    \ 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1, 2,\
    \ 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2, 3,\
    \ 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmposi7fh9v.py\"\
    , line 16\n    game = [1, 3, 6, 4, 1, 5, 9, 2, 6]\nIndentationError: unexpected\
    \ indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [1, 5, 6, 4, 2]\n            guess = [1, 5, 6, 4, 2]\n            \n\
    \            compare(game, guess)\n            \n            >>>[0, 0, 0, 1, 0]\n\
    \            \n            \n            \n            \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \ndef check(candidate):\n\
    \    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0,\
    \ 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0,\
    \ 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n  \
    \  assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n\
    \    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw4858m1p.py\"\
    , line 16\n    game = [1, 5, 6, 4, 2]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [1, 3, 2]\n            guess = [1, 3, 2]\n            compare(game, guess)\n\
    \            \n            game = [1, 3, 2]\n            guess = [1, 3, 3]\n \
    \           compare(game, guess)\n            \n            game = [1, 3, 2]\n\
    \            guess = [1, 3, 1]\n            compare(game, guess)\n           \
    \ \n            game = [1, 3, 2]\n            guess = [1, 3, 0]\n            compare(game,\
    \ guess)\n            \n            game = [1, 3, 2]\n            guess = [1,\
    \ 3, -1]\n            compare(game, guess)\n            \n            game = [1,\
    \ 3, 2]\n            guess = [1, 3, -2]\n            compare(game, guess)\n  \
    \          \n            game = [1, 3, 2]\n            guess = [1, 3, -3]\n  \
    \          compare(game, guess)\n            \n            game = [1, 3, 2]\n\
    \            guess = [1, 3, -4]\n            compare(game, guess)\n          \
    \  \n            game = [1, 3, 2]\n            guess = [1, 3, -5]\n          \
    \  compare(game, guess)\n            \n            game = [1, 3, 2]\n        \
    \    guess = [1, 3, -4]\n            compare(game, guess)\n            \n    \
    \        game = [1, 3, 2]\n            guess = [1, 3, -3]\n            compare(game,\
    \ guess)\n            \n            game = [1, 3, 2]\n            guess = [1,\
    \ 3, -2]\n            compare(game, guess)\n            \n            game = [1,\
    \ 3, 2]\n            guess = [1, 3, -1]\n            compare(game, guess)\n  \
    \          \n            game = [1, 3, 2]\n            guess = [1, 3, 0]\n   \
    \         compare(game, guess)\n            \n            game = [1, 3, 2]\n \
    \           guess = [1, 3, 1]\n            compare(game, guess)\n            \n\
    \            game = [1, 3, 2]\n            guess = [1, 3, 2]\n            compare(game,\
    \ guess)\n            \n            game = [1, 3, 2]\n            guess = [1,\
    \ 3, 3]\n            compare(game, guess)\n            \n            game = [1,\
    \ 3, 2]\n            guess = [1, 3, 4]\n            compare(game, guess)\n   \
    \         \n            game = [1, 3, 2]\n            guess = [1, 3, 5]\n    \
    \        compare(game, guess)\n            \n            game = [1, 3, 2]\n  \
    \          guess = [1, 3, 6]\n            compare(game, guess)\n            \n\
    \            game = [1, 3, 2]\n            guess = [1, 3, 7]\n            compare(game,\
    \ guess)\n            \n            game = [\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n \
    \   assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0,\
    \ 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplql2p82o.py\"\
    , line 16\n    game = [1, 3, 2]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [1, 5, 2, 6, 3, 7]\n            guess = [1, 5, 2, 6, 3, 7]\n        \
    \    compare(game, guess)\n            \n            game = [1, 5, 2, 6, 3, 7]\n\
    \            guess = [1, 5, 2, 6, 3, 8]\n            compare(game, guess)\n  \
    \          \n            game = [1, 5, 2, 6, 3, 7]\n            guess = [1, 5,\
    \ 2, 6, 3, 6]\n            compare(game, guess)\n            \n            game\
    \ = [1, 5, 2, 6, 3, 7]\n            guess = [1, 5, 2, 6, 3, 5]\n            compare(game,\
    \ guess)\n            \n            game = [1, 5, 2, 6, 3, 7]\n            guess\
    \ = [1, 5, 2, 6, 3, 6]\n            compare(game, guess)\n            \n     \
    \       game = [1, 5, 2, 6, 3, 7]\n            guess = [1, 5, 2, 6, 3, 5]\n  \
    \          compare(game, guess)\n            \n            game = [1, 5, 2, 6,\
    \ 3, 7]\n            guess = [1, 5, 2, 6, 3, 6]\n            compare(game, guess)\n\
    \            \n            game = [1, 5, 2, 6, 3, 7]\n            guess = [1,\
    \ 5, 2, 6, 3, 5]\n            compare(game, guess)\n            \n           \
    \ game = [1, 5, 2, 6, 3, 7]\n            guess = [1, 5, 2, 6, 3, 6]\n        \
    \    compare(game, guess)\n            \n            game = [1, 5, 2, 6, 3, 7]\n\
    \            guess = [1, 5, 2, 6, 3, 5]\n            compare(game, guess)\n  \
    \          \n            game = [1, 5, 2, 6, 3, 7]\n            guess = [1, 5,\
    \ 2, 6, 3, 6]\n            compare(game, guess)\n            \n            game\
    \ = [1, 5, 2, 6, 3, 7]\n            guess = [1, 5, 2, 6, 3, 5]\n            compare(game,\
    \ guess)\n            \n            game = [1, 5, 2, 6, 3, 7]\n            guess\
    \ = [1, 5, 2, 6, 3, 6]\n            compare(game, guess)\n            \n     \
    \       game = [1, 5, 2, 6, 3, 7]\n            guess = [1, 5, 2, 6, 3, 5]\n  \
    \          compare(game, guess)\n            \n            game = [1, 5, 2, 6,\
    \ 3, 7]\n            guess = [1, 5, 2, 6, 3, 6]\n            compare(game, guess)\n\
    \            \n            game = [1, 5, 2, 6, 3, 7]\n            guess = [1,\
    \ 5, 2, 6, 3, 5]\n            compare(game, guess)\n            \n           \
    \ game = [1, 5, 2, 6, 3, 7]\n            guess = [1, 5, 2, 6, 3, 6]\n        \
    \    compare(game, guess)\n            \n            game\ndef check(candidate):\n\
    \    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0,\
    \ 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0,\
    \ 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n  \
    \  assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n\
    \    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzhjjquyr.py\"\
    , line 16\n    game = [1, 5, 2, 6, 3, 7]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [1, 3, 2]\n            guess = [1, 3, 2]\n            compare(game, guess)\n\
    \            >> [0, 1, 0]\n            \n            game = [1, 3, 2]\n      \
    \      guess = [1, 3, 3]\n            compare(game, guess)\n            >> [1,\
    \ 0, 0]\n            \n            game = [1, 3, 2]\n            guess = [1, 3,\
    \ 1]\n            compare(game, guess)\n            >> [0, 1, 0]\n           \
    \ \n            game = [1, 3, 2]\n            guess = [1, 3, 0]\n            compare(game,\
    \ guess)\n            >> [0, 1, 0]\n            \n            game = [1, 3, 2]\n\
    \            guess = [1, 3, 3]\n            compare(game, guess)\n           \
    \ >> [1, 0, 0]\n            \n            game = [1, 3, 2]\n            guess\
    \ = [1, 3, 1]\n            compare(game, guess)\n            >> [0, 1, 0]\n  \
    \          \n            game = [1, 3, 2]\n            guess = [1, 3, 0]\n   \
    \         compare(game, guess)\n            >> [0, 1, 0]\n            \n     \
    \       game = [1, 3, 2]\n            guess = [1, 3, 3]\n            compare(game,\
    \ guess)\n            >> [1, 0, 0]\n            \n            game = [1, 3, 2]\n\
    \            guess = [1, 3, 1]\n            compare(game, guess)\n           \
    \ >> [0, 1, 0]\n            \n            game = [1, 3, 2]\n            guess\
    \ = [1, 3, 0]\n            compare(game, guess)\n            >> [0, 1, 0]\n  \
    \          \n            game = [1, 3, 2]\n            guess = [1, 3, 3]\n   \
    \         compare(game, guess)\n            >> [1, 0, 0]\n            \n     \
    \       game = [1, 3, 2]\n            guess = [1, 3, 1]\n            compare(game,\
    \ guess)\n            >> [0, 1, 0]\n            \n            game = [1, 3, 2]\n\
    \            guess = [1, 3, 0]\n            compare(game, guess)\n           \
    \ >> [0, 1, 0]\n            \n            game = [1, 3, 2]\n            guess\
    \ = [1, 3, 3]\n            compare(game, guess)\n            >> [1, 0, 0]\n  \
    \          \n            game = [1, 3, 2]\n            guess = [1, 3, 1]\n   \
    \         compare(game, guess)\n            >> [0, 1, 0]\n            \n     \
    \       game = [1, 3, 2]\n            guess = [1, 3, 0]\n            compare(game,\
    \ guess)\n            >> [0, 1, 0]\n            \n            game = [1, 3, 2]\n\
    \            guess = [1, 3, 3]\n            compare(game, guess)\n           \
    \ >> [1, 0, 0]\n            \n            game = [1, 3, 2]\n            guess\
    \ = [1, 3, 1]\n            compare(game, \ndef check(candidate):\n    assert candidate([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyk4pe09t.py\"\
    , line 16\n    game = [1, 3, 2]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [5, 3, 7, 1, 6]\n            guess = [5, 3, 7, 1, 6]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, 0, 0]\n            \n            game = [5,\
    \ 3, 7, 1, 6]\n            guess = [5, 3, 7, 1, 7]\n            compare(game,\
    \ guess)\n            >> [3, 3, 3, 3, 3]\n            \n            game = [5,\
    \ 3, 7, 1, 6]\n            guess = [5, 3, 7, 1, 5]\n            compare(game,\
    \ guess)\n            >> [3, 3, 3, 3, 3]\n            \n            game = [5,\
    \ 3, 7, 1, 6]\n            guess = [5, 3, 7, 1, 4]\n            compare(game,\
    \ guess)\n            >> [3, 3, 3, 3, 3]\n            \n            game = [5,\
    \ 3, 7, 1, 6]\n            guess = [5, 3, 7, 1, 3]\n            compare(game,\
    \ guess)\n            >> [3, 3, 3, 3, 3]\n            \n            game = [5,\
    \ 3, 7, 1, 6]\n            guess = [5, 3, 7, 1, 2]\n            compare(game,\
    \ guess)\n            >> [3, 3, 3, 3, 3]\n            \n            game = [5,\
    \ 3, 7, 1, 6]\n            guess = [5, 3, 7, 1, 1]\n            compare(game,\
    \ guess)\n            >> [3, 3, 3, 3, 3]\n            \n            game = [5,\
    \ 3, 7, 1, 6]\n            guess = [5, 3, 7, 1, 0]\n            compare(game,\
    \ guess)\n            >> [3, 3, 3, 3, 3]\n            \n            game = [5,\
    \ 3, 7, 1, 6]\n            guess = [5, 3, 7, 1, -1]\n            compare(game,\
    \ guess)\n            >> [3, 3, 3, 3, 3]\n            \n            game = [5,\
    \ 3, 7, 1, 6]\n            guess = [5, 3, 7, 1, -2]\n            compare(game,\
    \ guess)\n            >> [3, 3, 3, 3, 3]\n            \n            game = [5,\
    \ 3, 7, 1, 6]\n            guess = [5, 3, 7, 1, -3]\n            compare(game,\
    \ guess)\n            >> [3, 3, 3, 3, 3]\n            \n            game = [5,\
    \ 3, 7, 1, 6]\n            guess = [5, 3, 7, 1, -4]\n            compare(game,\
    \ guess)\n            >> [3, 3, 3, 3, 3]\n            \n            game = [5,\
    \ 3, 7, 1, 6]\n            guess = [5, 3, 7, 1, -5]\n            compare(game,\
    \ guess)\n            >> [3, 3, 3, 3, 3]\n            \n            game = [5,\
    \ 3, 7, 1, 6]\n            guess = [5, 3, 7, 1, -6]\n            compare(game,\
    \ guess)\n            >> [3, 3, 3, 3, 3]\n            \n            game = [5,\
    \ 3, 7, 1, 6]\n            guess = [5, 3, 7, 1, -7]\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0,\
    \ 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0,\
    \ 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n  \
    \  assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n\
    \    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg37oqs5t.py\"\
    , line 16\n    game = [5, 3, 7, 1, 6]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [1, 5, 3, 7, 9, 2]\n            guess = [1, 5, 3, 7, 9, 2]\n        \
    \    \n            compare(game, guess)\n            \n            returns [0,\
    \ 2, -4, -6, -6, 0]\n            \n            \"\"\"\n            \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0,\
    \ 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0,\
    \ 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n  \
    \  assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n\
    \    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_qwkq8gw.py\"\
    , line 16\n    game = [1, 5, 3, 7, 9, 2]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [1, 5, 3, 7, 8, 2]\n            guess = [1, 5, 3, 7, 8, 2]\n        \
    \    \n            compare(game, guess)\n            # returns [1, -1, 1, -1,\
    \ 1, -1]\n            \n            \"\"\"\n    \n    \"\"\"\n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \ndef check(candidate):\n\
    \    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0,\
    \ 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0,\
    \ 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n  \
    \  assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n\
    \    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8o0rzzmn.py\"\
    , line 16\n    game = [1, 5, 3, 7, 8, 2]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [1, 3, 2]\n            guess = [1, 3, 2]\n            compare(game, guess)\n\
    \            \n            game = [1, 3, 2]\n            guess = [1, 3, 3]\n \
    \           compare(game, guess)\n            \n            game = [1, 3, 2]\n\
    \            guess = [1, 3, 1]\n            compare(game, guess)\n           \
    \ \n            game = [1, 3, 2]\n            guess = [1, 3, 0]\n            compare(game,\
    \ guess)\n            \n            game = [1, 3, 2]\n            guess = [1,\
    \ 3, -1]\n            compare(game, guess)\n            \n            game = [1,\
    \ 3, 2]\n            guess = [1, 3, -2]\n            compare(game, guess)\n  \
    \          \n            game = [1, 3, 2]\n            guess = [1, 3, -3]\n  \
    \          compare(game, guess)\n            \n            game = [1, 3, 2]\n\
    \            guess = [1, 3, -4]\n            compare(game, guess)\n          \
    \  \n            game = [1, 3, 2]\n            guess = [1, 3, -5]\n          \
    \  compare(game, guess)\n            \n            game = [1, 3, 2]\n        \
    \    guess = [1, 3, -4]\n            compare(game, guess)\n            \n    \
    \        game = [1, 3, 2]\n            guess = [1, 3, -3]\n            compare(game,\
    \ guess)\n            \n            game = [1, 3, 2]\n            guess = [1,\
    \ 3, -2]\n            compare(game, guess)\n            \n            game = [1,\
    \ 3, 2]\n            guess = [1, 3, -1]\n            compare(game, guess)\n  \
    \          \n            game = [1, 3, 2]\n            guess = [1, 3, 0]\n   \
    \         compare(game, guess)\n            \n            game = [1, 3, 2]\n \
    \           guess = [1, 3, 1]\n            compare(game, guess)\n            \n\
    \            game = [1, 3, 2]\n            guess = [1, 3, 2]\n            compare(game,\
    \ guess)\n            \n            game = [1, 3, 2]\n            guess = [1,\
    \ 3, 3]\n            compare(game, guess)\n            \n            game = [1,\
    \ 3, 2]\n            guess = [1, 3, 4]\n            compare(game, guess)\n   \
    \         \n            game = [1, 3, 2]\n            guess = [1, 3, 5]\n    \
    \        compare(game, guess)\n            \n            game = [1, 3, 2]\n  \
    \          guess = [1, 3, 6]\n            compare(game, guess)\n            \n\
    \            game = [1, 3, 2]\n            guess = [1, 3, 7]\n            compare(game,\
    \ guess)\n            \n            game = [\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n \
    \   assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0,\
    \ 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpeab_c_qt.py\"\
    , line 16\n    game = [1, 3, 2]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [1, 5, 2, 6, 3, 7]\n            guess = [1, 5, 2, 6, 3, 7]\n        \
    \    compare(game, guess)\n            >> [0, 0, 0, 0, 0, 0]\n            \n \
    \           game = [1, 5, 2, 6, 3, 7]\n            guess = [1, 5, 2, 6, 3, 8]\n\
    \            compare(game, guess)\n            >> [0, 0, 0, 0, 0, 0]\n       \
    \     \n            game = [1, 5, 2, 6, 3, 7]\n            guess = [1, 5, 2, 6,\
    \ 3, 6]\n            compare(game, guess)\n            >> [0, 0, 0, 0, 0, 0]\n\
    \            \n            game = [1, 5, 2, 6, 3, 7]\n            guess = [1,\
    \ 5, 2, 6, 3, 5]\n            compare(game, guess)\n            >> [0, 0, 0, 0,\
    \ 0, 0]\n            \n            game = [1, 5, 2, 6, 3, 7]\n            guess\
    \ = [1, 5, 2, 6, 3, 3]\n            compare(game, guess)\n            >> [0, 0,\
    \ 0, 0, 0, 0]\n            \n            game = [1, 5, 2, 6, 3, 7]\n         \
    \   guess = [1, 5, 2, 6, 3, 2]\n            compare(game, guess)\n           \
    \ >> [0, 0, 0, 0, 0, 0]\n            \n            game = [1, 5, 2, 6, 3, 7]\n\
    \            guess = [1, 5, 2, 6, 3, 1]\n            compare(game, guess)\n  \
    \          >> [0, 0, 0, 0, 0, 0]\n            \n            game = [1, 5, 2, 6,\
    \ 3, 7]\n            guess = [1, 5, 2, 6, 3, 0]\n            compare(game, guess)\n\
    \            >> [0, 0, 0, 0, 0, 0]\n            \n            game = [1, 5, 2,\
    \ 6, 3, 7]\n            guess = [1, 5, 2, 6, 3, -1]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, 0, 0, 0]\n            \n            game =\
    \ [1, 5, 2, 6, 3, 7]\n            guess = [1, 5, 2, 6, 3, -2]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, 0, 0, 0]\n            \n            game =\
    \ [1, 5, 2, 6, 3, 7]\n            guess = [1, 5, 2, 6, 3, -3]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, 0, 0, 0]\n            \n            game =\
    \ [1, 5, 2, 6, 3, 7]\n            guess = [1, 5, 2, 6, 3, -4]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, 0, 0, 0]\n            \n            game =\
    \ [1, 5, 2, 6, 3, 7]\n            guess = [1, 5, 2, 6, 3, -5]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, 0, 0, 0]\n            \n            game =\
    \ [1, 5, 2, 6, 3, 7]\n            guess = [1, 5, 2, 6, 3, -6]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, 0, 0, 0]\n            \n            game =\
    \ [1, \ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 1], [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0],\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1,\
    \ -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) ==\
    \ [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdhxvf_e5.py\"\
    , line 16\n    game = [1, 5, 2, 6, 3, 7]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [5, 7, 9, 10, 11, 13, 15, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28,\
    \ 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\
    \ 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66,\
    \ 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85,\
    \ 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103,\
    \ 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119,\
    \ 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135,\
    \ 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151,\
    \ 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167,\
    \ 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183,\
    \ 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199,\
    \ 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215,\
    \ 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231,\
    \ 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247,\
    \ 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263,\
    \ 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279,\
    \ 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295,\
    \ 296, 297, 298, 299, 300, 30\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1ou2ng_y.py\"\
    , line 16\n    25, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237,\
    \ 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253,\
    \ 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269,\
    \ 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285,\
    \ 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 30\n\
    \               ^\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [5, 7, 9, 11, 13, 15]\n            guess = [7, 9, 11, 13, 15, 17]\n \
    \           \n            compare(game, guess)\n            \n            returns\
    \ [0, 0, 0, 2, -1, -1]\n            \"\"\"\n            \n    \n    \"\"\"\n \
    \   \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n\ndef check(candidate):\n    assert candidate([1, 2, 3, 4,\
    \ 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt5dt6m0_.py\"\
    , line 16\n    game = [5, 7, 9, 11, 13, 15]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [1, 5, 3, 2]\n            guess = [1, 5, 3, 2]\n            \n      \
    \      compare(game, guess)\n            \n            returns [0, 1, 1, 0]\n\
    \            \"\"\"\n            \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0,\
    \ 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0,\
    \ 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n  \
    \  assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n\
    \    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg_c4djvy.py\"\
    , line 16\n    game = [1, 5, 3, 2]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [10, 5, 8, 4, 2]\n            guess = [10, 5, 8, 4, 2]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, 0, 0]\n            \n            game = [10,\
    \ 5, 8, 4, 2]\n            guess = [10, 5, 8, 4, 3]\n            compare(game,\
    \ guess)\n            >> [3, 3, 3, 3, 3]\n            \n            game = [10,\
    \ 5, 8, 4, 2]\n            guess = [10, 5, 8, 4, 1]\n            compare(game,\
    \ guess)\n            >> [1, 1, 1, 1, 1]\n            \n            game = [10,\
    \ 5, 8, 4, 2]\n            guess = [10, 5, 8, 4, 2]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, 0, 0]\n            \n            game = [10,\
    \ 5, 8, 4, 2]\n            guess = [10, 5, 8, 4, 3]\n            compare(game,\
    \ guess)\n            >> [3, 3, 3, 3, 3]\n            \n            game = [10,\
    \ 5, 8, 4, 2]\n            guess = [10, 5, 8, 4, 1]\n            compare(game,\
    \ guess)\n            >> [1, 1, 1, 1, 1]\n            \n            game = [10,\
    \ 5, 8, 4, 2]\n            guess = [10, 5, 8, 4, 2]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, 0, 0]\n            \n            game = [10,\
    \ 5, 8, 4, 2]\n            guess = [10, 5, 8, 4, 3]\n            compare(game,\
    \ guess)\n            >> [3, 3, 3, 3, 3]\n            \n            game = [10,\
    \ 5, 8, 4, 2]\n            guess = [10, 5, 8, 4, 1]\n            compare(game,\
    \ guess)\n            >> [1, 1, 1, 1, 1]\n            \n            game = [10,\
    \ 5, 8, 4, 2]\n            guess = [10, 5, 8, 4, 2]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, 0, 0]\n            \n            game = [10,\
    \ 5, 8, 4, 2]\n            guess = [10, 5, 8, 4, 3]\n            compare(game,\
    \ guess)\n            >> [3, 3, 3, 3, 3]\n            \n            game = [10,\
    \ 5, 8, 4, 2]\n            guess = [10, 5, 8, 4, 1]\n            compare(game,\
    \ guess)\n            >> [1, 1, 1, 1, 1]\n            \n            game = [10,\
    \ 5, 8, 4, 2]\n            guess = [10, 5, 8, 4, 2]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, 0, 0]\n            \n            game = [10,\
    \ 5, 8, 4, 2]\n            guess = [10, 5, 8, 4, 3]\n            compare(game,\
    \ guess)\n            >> [3, 3, 3, 3, 3]\n            \n            game = [10,\
    \ 5, 8, 4, 2]\n            guess = [10, 5, 8, 4, 1]\n            compare(game,\
    \ guess)\n            \ndef check(candidate):\n    assert candidate([1, 2, 3,\
    \ 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqc8oqbfk.py\"\
    , line 16\n    game = [10, 5, 8, 4, 2]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39,\
    \ 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77,\
    \ 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]\n            guess = [5, 7, 9, 11,\
    \ 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49,\
    \ 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87,\
    \ 89, 91, 93, 95, 97, 99]\n            \n            compare(game, guess)\n  \
    \          \n            returns [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0,\
    \ 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0,\
    \ 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0,\
    \ 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0,\
    \ 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1,\
    \ 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0,\
    \ 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0,\
    \ 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0,\
    \ 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0,\
    \ 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1,\
    \ 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0,\
    \ 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0,\
    \ 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0,\
    \ 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0,\
    \ 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1,\
    \ 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0,\
    \ 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0,\
    \ 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0,\
    \ 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0,\
    \ 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1,\
    \ 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0,\
    \ 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0,\
    \ 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0,\
    \ 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0,\
    \ 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1,\
    \ 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0,\
    \ 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0,\
    \ 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0,\
    \ 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0,\
    \ 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1,\
    \ 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0,\
    \ 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0,\
    \ 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0,\
    \ 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0,\
    \ 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, \n\
    def check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2,\
    \ -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0,\
    \ 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2,\
    \ -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2,\
    \ 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_vz689wj.py\"\
    , line 16\n    game = [5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33,\
    \ 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71,\
    \ 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]\nIndentationError: unexpected\
    \ indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [1, 5, 3, 7, 9, 2, 6]\n            guess = [1, 5, 3, 7, 9, 2, 6]\n  \
    \          compare(game, guess)\n            >> [0, 0, 0, 0, 0, 0]\n         \
    \   \n            game = [1, 5, 3, 7, 9, 2, 6]\n            guess = [1, 5, 3,\
    \ 7, 9, 2, 7]\n            compare(game, guess)\n            >> [0, 0, 0, 0, 0,\
    \ 0]\n            \n            game = [1, 5, 3, 7, 9, 2, 6]\n            guess\
    \ = [1, 5, 3, 7, 9, 2, 5]\n            compare(game, guess)\n            >> [0,\
    \ 0, 0, 0, 0, 0]\n            \n            game = [1, 5, 3, 7, 9, 2, 6]\n   \
    \         guess = [1, 5, 3, 7, 9, 2, 6]\n            compare(game, guess)\n  \
    \          >> [0, 0, 0, 0, 0, 0]\n            \n            game = [1, 5, 3, 7,\
    \ 9, 2, 6]\n            guess = [1, 5, 3, 7, 9, 2, 6]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, 0, 0, 0]\n            \n            game =\
    \ [1, 5, 3, 7, 9, 2, 6]\n            guess = [1, 5, 3, 7, 9, 2, 6]\n         \
    \   compare(game, guess)\n            >> [0, 0, 0, 0, 0, 0]\n            \n  \
    \          game = [1, 5, 3, 7, 9, 2, 6]\n            guess = [1, 5, 3, 7, 9, 2,\
    \ 6]\n            compare(game, guess)\n            >> [0, 0, 0, 0, 0, 0]\n  \
    \          \n            game = [1, 5, 3, 7, 9, 2, 6]\n            guess = [1,\
    \ 5, 3, 7, 9, 2, 6]\n            compare(game, guess)\n            >> [0, 0, 0,\
    \ 0, 0, 0]\n            \n            game = [1, 5, 3, 7, 9, 2, 6]\n         \
    \   guess = [1, 5, 3, 7, 9, 2, 6]\n            compare(game, guess)\n        \
    \    >> [0, 0, 0, 0, 0, 0]\n            \n            game = [1, 5, 3, 7, 9, 2,\
    \ 6]\n            guess = [1, 5, 3, 7, 9, 2, 6]\n            compare(game, guess)\n\
    \            >> [0, 0, 0, 0, 0, 0]\n            \n            game = [1, 5, 3,\
    \ 7, 9, 2, 6]\n            guess = [1, 5, 3, 7, 9, 2, 6]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, 0, 0, 0]\n            \n            game =\
    \ [1, 5, 3, 7, 9, 2, 6]\n            guess = [1, 5, 3, 7, 9, 2, 6]\n         \
    \   compare(game, guess)\n            >> [0, 0, 0, 0, 0, 0]\n            \n  \
    \          game = [1, 5, 3, 7, 9, 2, 6]\n            guess = [1, 5, 3, 7, 9, 2,\
    \ 6]\n            compare(game, guess)\n            >> [0, 0, 0, 0, 0, 0]\n  \
    \          \n            game = [1, 5, 3, 7, 9, 2, 6]\n            guess = [1,\
    \ 5, 3, 7, \ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 1], [1,\
    \ 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0, 0, 0, 0, 0,\
    \ 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1, 2, 3],\
    \ [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2, 3, 4])\
    \ == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpj_umxaqg.py\"\
    , line 16\n    game = [1, 5, 3, 7, 9, 2, 6]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [1, 5, 3, 2]\n            guess = [1, 5, 3, 2]\n            compare(game,\
    \ guess)\n            \n            game = [1, 5, 3, 2]\n            guess = [1,\
    \ 5, 3, 3]\n            compare(game, guess)\n            \n            game =\
    \ [1, 5, 3, 2]\n            guess = [1, 5, 3, 1]\n            compare(game, guess)\n\
    \            \n            game = [1, 5, 3, 2]\n            guess = [1, 5, 3,\
    \ 5]\n            compare(game, guess)\n            \n            game = [1, 5,\
    \ 3, 2]\n            guess = [1, 5, 3, 6]\n            compare(game, guess)\n\
    \            \n            game = [1, 5, 3, 2]\n            guess = [1, 5, 3,\
    \ 7]\n            compare(game, guess)\n            \n            game = [1, 5,\
    \ 3, 2]\n            guess = [1, 5, 3, 8]\n            compare(game, guess)\n\
    \            \n            game = [1, 5, 3, 2]\n            guess = [1, 5, 3,\
    \ 9]\n            compare(game, guess)\n            \n            game = [1, 5,\
    \ 3, 2]\n            guess = [1, 5, 3, 10]\n            compare(game, guess)\n\
    \            \n            game = [1, 5, 3, 2]\n            guess = [1, 5, 3,\
    \ 11]\n            compare(game, guess)\n            \n            game = [1,\
    \ 5, 3, 2]\n            guess = [1, 5, 3, 12]\n            compare(game, guess)\n\
    \            \n            game = [1, 5, 3, 2]\n            guess = [1, 5, 3,\
    \ 13]\n            compare(game, guess)\n            \n            game = [1,\
    \ 5, 3, 2]\n            guess = [1, 5, 3, 14]\n            compare(game, guess)\n\
    \            \n            game = [1, 5, 3, 2]\n            guess = [1, 5, 3,\
    \ 15]\n            compare(game, guess)\n            \n            game = [1,\
    \ 5, 3, 2]\n            guess = [1, 5, 3, 16]\n            compare(game, guess)\n\
    \            \n            game = [1, 5, 3, 2]\n            guess = [1, 5, 3,\
    \ 17]\n            compare(game, guess)\n            \n            game = [1,\
    \ 5, 3, 2]\n            guess = [1, 5, 3, 18]\n            compare(game, guess)\n\
    \            \n            game = [1, 5, 3, 2]\n            guess = [1, 5, 3,\
    \ 19]\n            compare(game, guess)\n            \n            game = [1,\
    \ 5, 3, 2]\n            guess = [1, 5, 3, 20]\n            compare(game, guess)\n\
    \            \n            game = [1, 5, 3, 2]\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n \
    \   assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0,\
    \ 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsyhmhxsp.py\"\
    , line 16\n    game = [1, 5, 3, 2]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n            guess = [60, 70, 80,\
    \ 90]\n            compare(game, guess)\n            # should return [0, 10, 10,\
    \ 10, 10, 10, 10, 10, 10]\n            \"\"\"\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n \
    \   assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0,\
    \ 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsei3a6cw.py\"\
    , line 16\n    game = [10, 20, 30, 40, 50, 60, 70, 80, 90]\nIndentationError:\
    \ unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ scores = [10, 20, 30, 40, 50]\n            guesses = [10, 20, 30, 40, 50]\n\
    \            compare(scores, guesses) == [10, -20, 30, -20, 50]\n            compare(scores,\
    \ guesses) == [10, -20, 30, -20, 50]\n            compare(scores, guesses) ==\
    \ [10, -20, 30, -20, 50]\n            compare(scores, guesses) == [10, -20, 30,\
    \ -20, 50]\n            compare(scores, guesses) == [10, -20, 30, -20, 50]\n \
    \           compare(scores, guesses) == [10, -20, 30, -20, 50]\n            compare(scores,\
    \ guesses) == [10, -20, 30, -20, 50]\n            compare(scores, guesses) ==\
    \ [10, -20, 30, -20, 50]\n            compare(scores, guesses) == [10, -20, 30,\
    \ -20, 50]\n            compare(scores, guesses) == [10, -20, 30, -20, 50]\n \
    \           compare(scores, guesses) == [10, -20, 30, -20, 50]\n            compare(scores,\
    \ guesses) == [10, -20, 30, -20, 50]\n            compare(scores, guesses) ==\
    \ [10, -20, 30, -20, 50]\n            compare(scores, guesses) == [10, -20, 30,\
    \ -20, 50]\n            compare(scores, guesses) == [10, -20, 30, -20, 50]\n \
    \           compare(scores, guesses) == [10, -20, 30, -20, 50]\n            compare(scores,\
    \ guesses) == [10, -20, 30, -20, 50]\n            compare(scores, guesses) ==\
    \ [10, -20, 30, -20, 50]\n            compare(scores, guesses) == [10, -20, 30,\
    \ -20, 50]\n            compare(scores, guesses) == [10, -20, 30, -20, 50]\n \
    \           compare(scores, guesses) == [10, -20, 30, -20, 50]\n            compare(scores,\
    \ guesses) == [10, -20, 30, -20, 50]\n            compare(scores, guesses) ==\
    \ [10, -20, 30, -20, 50]\n            compare(scores, guesses) == [10, -20, 30,\
    \ -20, 50]\n            compare(scores, guesses) == [10, -20, 30, -20, 50]\n \
    \           compare(scores, guesses) == [10, -20, 30, -20, 50]\n            compare(scores,\
    \ guesses) == [10, -20, 30, -20, 50]\n            compare(scores, guesses) ==\
    \ [10, -20, 30, -20, 50]\n            compare(scores, guesses) == [10, -20, 30,\
    \ -20, 5\ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 1], [1,\
    \ 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0, 0, 0, 0, 0,\
    \ 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1, 2, 3],\
    \ [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2, 3, 4])\
    \ == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn6r3xxcr.py\"\
    , line 16\n    scores = [10, 20, 30, 40, 50]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [10, 20, 30, 40, 50]\n            guess = [10, 20, 30, 40, 50]\n    \
    \        compare(game, guess)\n            >> [0, 0, 0, 0, 0]\n            \n\
    \            game = [10, 20, 30, 40, 50]\n            guess = [10, 20, 30, 40,\
    \ 50]\n            compare(game, guess)\n            >> [0, 0, 0, 0, 0]\n    \
    \        \n            game = [10, 20, 30, 40, 50]\n            guess = [10, 20,\
    \ 30, 40, 50]\n            compare(game, guess)\n            >> [0, 0, 0, 0, 0]\n\
    \            \n            game = [10, 20, 30, 40, 50]\n            guess = [10,\
    \ 20, 30, 40, 50]\n            compare(game, guess)\n            >> [0, 0, 0,\
    \ 0, 0]\n            \n            game = [10, 20, 30, 40, 50]\n            guess\
    \ = [10, 20, 30, 40, 50]\n            compare(game, guess)\n            >> [0,\
    \ 0, 0, 0, 0]\n            \n            game = [10, 20, 30, 40, 50]\n       \
    \     guess = [10, 20, 30, 40, 50]\n            compare(game, guess)\n       \
    \     >> [0, 0, 0, 0, 0]\n            \n            game = [10, 20, 30, 40, 50]\n\
    \            guess = [10, 20, 30, 40, 50]\n            compare(game, guess)\n\
    \            >> [0, 0, 0, 0, 0]\n            \n            game = [10, 20, 30,\
    \ 40, 50]\n            guess = [10, 20, 30, 40, 50]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, 0, 0]\n            \n            game = [10,\
    \ 20, 30, 40, 50]\n            guess = [10, 20, 30, 40, 50]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, 0, 0]\n            \n            game = [10,\
    \ 20, 30, 40, 50]\n            guess = [10, 20, 30, 40, 50]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, 0, 0]\n            \n            game = [10,\
    \ 20, 30, 40, 50]\n            guess = [10, 20, 30, 40, 50]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, 0, 0]\n            \n            game = [10,\
    \ 20, 30, 40, 50]\n            guess = [10, 20, 30, 40, 50]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, 0, 0]\n            \n            game = [10,\
    \ 20, 30, 40, 50]\n            guess = [10, 20, 30, 40, 50]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, 0, 0]\n            \n            game = [10,\
    \ 20, 30, 40, 50]\n            guess = [10, 20, 30, 40, 50]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, 0, 0]\n            \n            game = [10,\
    \ 20, 30, 40, 5\ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 1],\
    \ [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0, 0, 0, 0,\
    \ 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1, 2,\
    \ 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2, 3,\
    \ 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg6r3pzns.py\"\
    , line 16\n    game = [10, 20, 30, 40, 50]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [10, 20, 30, 40, 50]\n            guess = [20, 30, 40, 50, 60]\n    \
    \        compare(game, guess)\n            >> [10, -20, 30, -40, 50]\n       \
    \     \"\"\"\n    \"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprgf1hksp.py\"\
    , line 16\n    game = [10, 20, 30, 40, 50]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [10, 20, 30, 40, 50]\n            guess = [10, 20, 30, 40, 50]\n    \
    \        compare(game, guess)\n            >> [0, 0, 10, 10, 10]\n           \
    \ \n            game = [10, 20, 30, 40, 50]\n            guess = [10, 20, 30,\
    \ 40, 50]\n            compare(game, guess)\n            >> [0, 0, 10, 10, 10]\n\
    \            \n            game = [10, 20, 30, 40, 50]\n            guess = [10,\
    \ 20, 30, 40, 50]\n            compare(game, guess)\n            >> [0, 0, 10,\
    \ 10, 10]\n            \n            game = [10, 20, 30, 40, 50]\n           \
    \ guess = [10, 20, 30, 40, 50]\n            compare(game, guess)\n           \
    \ >> [0, 0, 10, 10, 10]\n            \n            game = [10, 20, 30, 40, 50]\n\
    \            guess = [10, 20, 30, 40, 50]\n            compare(game, guess)\n\
    \            >> [0, 0, 10, 10, 10]\n            \n            game = [10, 20,\
    \ 30, 40, 50]\n            guess = [10, 20, 30, 40, 50]\n            compare(game,\
    \ guess)\n            >> [0, 0, 10, 10, 10]\n            \n            game =\
    \ [10, 20, 30, 40, 50]\n            guess = [10, 20, 30, 40, 50]\n           \
    \ compare(game, guess)\n            >> [0, 0, 10, 10, 10]\n            \n    \
    \        game = [10, 20, 30, 40, 50]\n            guess = [10, 20, 30, 40, 50]\n\
    \            compare(game, guess)\n            >> [0, 0, 10, 10, 10]\n       \
    \     \n            game = [10, 20, 30, 40, 50]\n            guess = [10, 20,\
    \ 30, 40, 50]\n            compare(game, guess)\n            >> [0, 0, 10, 10,\
    \ 10]\n            \n            game = [10, 20, 30, 40, 50]\n            guess\
    \ = [10, 20, 30, 40, 50]\n            compare(game, guess)\n            >> [0,\
    \ 0, 10, 10, 10]\n            \n            game = [10, 20, 30, 40, 50]\n    \
    \        guess = [10, 20, 30, 40, 50]\n            compare(game, guess)\n    \
    \        >> [0, 0, 10, 10, 10]\n            \n            game = [10, 20, 30,\
    \ 40, 50]\n            guess = [10, 20, 30, 40, 50]\n            compare(game,\
    \ guess)\n            >> [0, 0, 10, 10, 10]\n            \n            game =\
    \ [10, 20, 30, 40, 50]\n            guess = [10, 20, 30, 40, 50]\n           \
    \ compare(game, guess)\n            >> [0, 0, 10, 10, 10]\n            \n    \
    \        game = [10, 20, 30, 40, 50]\n            guess = [10, 20, 30, 40, 5\n\
    def check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2,\
    \ -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0,\
    \ 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2,\
    \ -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2,\
    \ 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu7q15542.py\"\
    , line 16\n    game = [10, 20, 30, 40, 50]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [1, 4, 6, 3, 2]\n            guess = [1, 4, 6, 3, 2]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, -1, 0]\n            \n            game = [1,\
    \ 4, 6, 3, 2]\n            guess = [1, 4, 6, 3, 3]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, -1, -1]\n            \n            game = [1,\
    \ 4, 6, 3, 2]\n            guess = [1, 4, 6, 3, 1]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, -1, -1]\n            \n            game = [1,\
    \ 4, 6, 3, 2]\n            guess = [1, 4, 6, 3, 3]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, -1, -1]\n            \n            game = [1,\
    \ 4, 6, 3, 2]\n            guess = [1, 4, 6, 3, 1]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, -1, -1]\n            \n            game = [1,\
    \ 4, 6, 3, 2]\n            guess = [1, 4, 6, 3, 3]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, -1, -1]\n            \n            game = [1,\
    \ 4, 6, 3, 2]\n            guess = [1, 4, 6, 3, 1]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, -1, -1]\n            \n            game = [1,\
    \ 4, 6, 3, 2]\n            guess = [1, 4, 6, 3, 3]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, -1, -1]\n            \n            game = [1,\
    \ 4, 6, 3, 2]\n            guess = [1, 4, 6, 3, 1]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, -1, -1]\n            \n            game = [1,\
    \ 4, 6, 3, 2]\n            guess = [1, 4, 6, 3, 3]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, -1, -1]\n            \n            game = [1,\
    \ 4, 6, 3, 2]\n            guess = [1, 4, 6, 3, 1]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, -1, -1]\n            \n            game = [1,\
    \ 4, 6, 3, 2]\n            guess = [1, 4, 6, 3, 3]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, -1, -1]\n            \n            game = [1,\
    \ 4, 6, 3, 2]\n            guess = [1, 4, 6, 3, 1]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, -1, -1]\n            \n            game = [1,\
    \ 4, 6, 3, 2]\n            guess = [1, 4, 6, 3, 3]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, -1, -1]\n            \n            game = [1,\
    \ 4, 6, 3, 2]\n            guess = [1, 4, 6, 3, 1]\n            compare(game\n\
    def check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2,\
    \ -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0,\
    \ 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2,\
    \ -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2,\
    \ 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkessb7xt.py\"\
    , line 16\n    game = [1, 4, 6, 3, 2]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [1, 3, 2]\n            guess = [1, 3, 2]\n            compare(game, guess)\n\
    \            >> [0, 0, 0]\n            \n            game = [1, 3, 2]\n      \
    \      guess = [1, 3, 3]\n            compare(game, guess)\n            >> [0,\
    \ 0, 1]\n            \n            game = [1, 3, 2]\n            guess = [1, 3,\
    \ 1]\n            compare(game, guess)\n            >> [0, 0, 1]\n           \
    \ \n            game = [1, 3, 2]\n            guess = [1, 3, 2]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0]\n            \n            game = [1, 3, 2]\n\
    \            guess = [1, 3, 3]\n            compare(game, guess)\n           \
    \ >> [0, 0, 1]\n            \n            game = [1, 3, 2]\n            guess\
    \ = [1, 3, 1]\n            compare(game, guess)\n            >> [0, 0, 1]\n  \
    \          \n            game = [1, 3, 2]\n            guess = [1, 3, 2]\n   \
    \         compare(game, guess)\n            >> [0, 0, 0]\n            \n     \
    \       game = [1, 3, 2]\n            guess = [1, 3, 3]\n            compare(game,\
    \ guess)\n            >> [0, 0, 1]\n            \n            game = [1, 3, 2]\n\
    \            guess = [1, 3, 1]\n            compare(game, guess)\n           \
    \ >> [0, 0, 1]\n            \n            game = [1, 3, 2]\n            guess\
    \ = [1, 3, 2]\n            compare(game, guess)\n            >> [0, 0, 0]\n  \
    \          \n            game = [1, 3, 2]\n            guess = [1, 3, 3]\n   \
    \         compare(game, guess)\n            >> [0, 0, 1]\n            \n     \
    \       game = [1, 3, 2]\n            guess = [1, 3, 1]\n            compare(game,\
    \ guess)\n            >> [0, 0, 1]\n            \n            game = [1, 3, 2]\n\
    \            guess = [1, 3, 2]\n            compare(game, guess)\n           \
    \ >> [0, 0, 0]\n            \n            game = [1, 3, 2]\n            guess\
    \ = [1, 3, 3]\n            compare(game, guess)\n            >> [0, 0, 1]\n  \
    \          \n            game = [1, 3, 2]\n            guess = [1, 3, 1]\n   \
    \         compare(game, guess)\n            >> [0, 0, 1]\n            \n     \
    \       game = [1, 3, 2]\n            guess = [1, 3, 2]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0]\n            \n            game = [1, 3, 2]\n\
    \            guess = [1, 3, 3]\n            compare(game, guess)\n           \
    \ >> [0, 0, 1]\n            \n            game\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n \
    \   assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0,\
    \ 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdticgrqs.py\"\
    , line 16\n    game = [1, 3, 2]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [10, 7, 5, 3, 1]\n            guess = [7, 5, 3, 1]\n            compare(game,\
    \ guess)\n            \n            game = [10, 7, 5, 3, 1]\n            guess\
    \ = [7, 5, 3, 2]\n            compare(game, guess)\n            \n           \
    \ game = [10, 7, 5, 3, 1]\n            guess = [7, 5, 3, 3]\n            compare(game,\
    \ guess)\n            \n            game = [10, 7, 5, 3, 1]\n            guess\
    \ = [7, 5, 3, 4]\n            compare(game, guess)\n            \n           \
    \ game = [10, 7, 5, 3, 1]\n            guess = [7, 5, 3, 5]\n            compare(game,\
    \ guess)\n            \n            game = [10, 7, 5, 3, 1]\n            guess\
    \ = [7, 5, 3, 6]\n            compare(game, guess)\n            \n           \
    \ game = [10, 7, 5, 3, 1]\n            guess = [7, 5, 3, 7]\n            compare(game,\
    \ guess)\n            \n            game = [10, 7, 5, 3, 1]\n            guess\
    \ = [7, 5, 3, 8]\n            compare(game, guess)\n            \n           \
    \ game = [10, 7, 5, 3, 1]\n            guess = [7, 5, 3, 9]\n            compare(game,\
    \ guess)\n            \n            game = [10, 7, 5, 3, 1]\n            guess\
    \ = [7, 5, 3, 10]\n            compare(game, guess)\n            \n          \
    \  game = [10, 7, 5, 3, 1]\n            guess = [7, 5, 3, 11]\n            compare(game,\
    \ guess)\n            \n            game = [10, 7, 5, 3, 1]\n            guess\
    \ = [7, 5, 3, 12]\n            compare(game, guess)\n            \n          \
    \  game = [10, 7, 5, 3, 1]\n            guess = [7, 5, 3, 13]\n            compare(game,\
    \ guess)\n            \n            game = [10, 7, 5, 3, 1]\n            guess\
    \ = [7, 5, 3, 14]\n            compare(game, guess)\n            \n          \
    \  game = [10, 7, 5, 3, 1]\n            guess = [7, 5, 3, 15]\n            compare(game,\
    \ guess)\n            \n            game = [10, 7, 5, 3, 1]\n            guess\
    \ = [7, 5, 3, 16]\n            compare(game, guess)\n            \n          \
    \  game = [10, 7, 5, 3, 1]\n            guess = [7, 5, 3, 17]\n            compare(game,\
    \ guess)\n            \n            game = [10, 7, 5, 3, 1]\n            guess\
    \ = [7, 5, 3, 18]\n            compare(game, guess)\n            \n          \
    \  game = [10, 7, 5, 3, 1]\n            guess = [7, 5, 3, 19]\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0,\
    \ 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0,\
    \ 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n  \
    \  assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n\
    \    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppoxxhj2h.py\"\
    , line 16\n    game = [10, 7, 5, 3, 1]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [10, 15, 20, 25]\n            guess = [10, 15, 20, 25]\n            compare(game,\
    \ guess)\n            [0, -5, -10, -15, -20, -25]\n            \n            game\
    \ = [10, 15, 20, 25]\n            guess = [10, 15, 20, 25]\n            compare(game,\
    \ guess)\n            [0, -5, -10, -15, -20, -25]\n            \n            game\
    \ = [10, 15, 20, 25]\n            guess = [10, 15, 20, 25]\n            compare(game,\
    \ guess)\n            [0, -5, -10, -15, -20, -25]\n            \n            game\
    \ = [10, 15, 20, 25]\n            guess = [10, 15, 20, 25]\n            compare(game,\
    \ guess)\n            [0, -5, -10, -15, -20, -25]\n            \n            game\
    \ = [10, 15, 20, 25]\n            guess = [10, 15, 20, 25]\n            compare(game,\
    \ guess)\n            [0, -5, -10, -15, -20, -25]\n            \n            game\
    \ = [10, 15, 20, 25]\n            guess = [10, 15, 20, 25]\n            compare(game,\
    \ guess)\n            [0, -5, -10, -15, -20, -25]\n            \n            game\
    \ = [10, 15, 20, 25]\n            guess = [10, 15, 20, 25]\n            compare(game,\
    \ guess)\n            [0, -5, -10, -15, -20, -25]\n            \n            game\
    \ = [10, 15, 20, 25]\n            guess = [10, 15, 20, 25]\n            compare(game,\
    \ guess)\n            [0, -5, -10, -15, -20, -25]\n            \n            game\
    \ = [10, 15, 20, 25]\n            guess = [10, 15, 20, 25]\n            compare(game,\
    \ guess)\n            [0, -5, -10, -15, -20, -25]\n            \n            game\
    \ = [10, 15, 20, 25]\n            guess = [10, 15, 20, 25]\n            compare(game,\
    \ guess)\n            [0, -5, -10, -15, -20, -25]\n            \n            game\
    \ = [10, 15, 20, 25]\n            guess = [10, 15, 20, 25]\n            compare(game,\
    \ guess)\n            [0, -5, -10, -15, -20, -25]\n            \n            game\
    \ = [10, 15, 20, 25]\n            guess = [10, 15, 20, 25]\n            compare(game,\
    \ guess)\n            [0, -5, -10, -15, -20, -25]\n            \n            game\
    \ = [10, 15, 20, 25]\ndef check(candidate):\n    assert candidate([1, 2, 3, 4,\
    \ 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptrx0q4vu.py\"\
    , line 16\n    game = [10, 15, 20, 25]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [10, 20, 30, 40, 50]\n            guess = [10, 20, 30, 40, 50]\n    \
    \        compare(game, guess)\n            \n            game = [10, 20, 30, 40,\
    \ 50]\n            guess = [10, 20, 30, 40, 50]\n            compare(game, guess)\n\
    \            \n            game = [10, 20, 30, 40, 50]\n            guess = [10,\
    \ 20, 30, 40, 50]\n            compare(game, guess)\n            \n          \
    \  game = [10, 20, 30, 40, 50]\n            guess = [10, 20, 30, 40, 50]\n   \
    \         compare(game, guess)\n            \n            game = [10, 20, 30,\
    \ 40, 50]\n            guess = [10, 20, 30, 40, 50]\n            compare(game,\
    \ guess)\n            \n            game = [10, 20, 30, 40, 50]\n            guess\
    \ = [10, 20, 30, 40, 50]\n            compare(game, guess)\n            \n   \
    \         game = [10, 20, 30, 40, 50]\n            guess = [10, 20, 30, 40, 50]\n\
    \            compare(game, guess)\n            \n            game = [10, 20, 30,\
    \ 40, 50]\n            guess = [10, 20, 30, 40, 50]\n            compare(game,\
    \ guess)\n            \n            game = [10, 20, 30, 40, 50]\n            guess\
    \ = [10, 20, 30, 40, 50]\n            compare(game, guess)\n            \n   \
    \         game = [10, 20, 30, 40, 50]\n            guess = [10, 20, 30, 40, 50]\n\
    \            compare(game, guess)\n            \n            game = [10, 20, 30,\
    \ 40, 50]\n            guess = [10, 20, 30, 40, 50]\n            compare(game,\
    \ guess)\n            \n            game = [10, 20, 30, 40, 50]\n            guess\
    \ = [10, 20, 30, 40, 50]\n            compare(game, guess)\n            \n   \
    \         game = [10, 20, 30, 40, 50]\n            guess = [10, 20, 30, 40, 50]\n\
    \            compare(game, guess)\n            \n            game = [10, 20, 30,\
    \ 40, 50]\n            guess = [10, 20, 30, 40, 50]\n            compare(game,\
    \ guess)\n            \n            game = [10, 20, 30, 40, 50]\n            guess\
    \ = [10, 20, 30, 40, 50]\n            compare(game, guess)\n            \n   \
    \         game = [10, 20, 30, 40, 50]\n            guess = [10, 20, 30, 40, 50]\n\
    \            compare(game, guess)\n            \n            game = [10, 20, 30,\
    \ 40, 50]\n            guess = [10, 20, 30, 40, 50]\n            compare(game,\
    \ guess)\n            \n            game\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0zbn0mn2.py\"\
    , line 16\n    game = [10, 20, 30, 40, 50]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [1, 3, 2]\n            guess = [1, 3, 2]\n            compare(game, guess)\n\
    \            >> [0, 0, 0]\n            \n            game = [1, 3, 2]\n      \
    \      guess = [1, 3, 3]\n            compare(game, guess)\n            >> [1,\
    \ 1, 1]\n            \n            game = [1, 3, 2]\n            guess = [1, 3,\
    \ 1]\n            compare(game, guess)\n            >> [1, 1, 0]\n           \
    \ \n            game = [1, 3, 2]\n            guess = [1, 3, 3]\n            compare(game,\
    \ guess)\n            >> [1, 1, 1]\n            \n            game = [1, 3, 2]\n\
    \            guess = [1, 3, 1]\n            compare(game, guess)\n           \
    \ >> [1, 1, 0]\n            \n            game = [1, 3, 2]\n            guess\
    \ = [1, 3, 3]\n            compare(game, guess)\n            >> [1, 1, 1]\n  \
    \          \n            game = [1, 3, 2]\n            guess = [1, 3, 1]\n   \
    \         compare(game, guess)\n            >> [1, 1, 0]\n            \n     \
    \       game = [1, 3, 2]\n            guess = [1, 3, 3]\n            compare(game,\
    \ guess)\n            >> [1, 1, 1]\n            \n            game = [1, 3, 2]\n\
    \            guess = [1, 3, 1]\n            compare(game, guess)\n           \
    \ >> [1, 1, 0]\n            \n            game = [1, 3, 2]\n            guess\
    \ = [1, 3, 3]\n            compare(game, guess)\n            >> [1, 1, 1]\n  \
    \          \n            game = [1, 3, 2]\n            guess = [1, 3, 1]\n   \
    \         compare(game, guess)\n            >> [1, 1, 0]\n            \n     \
    \       game = [1, 3, 2]\n            guess = [1, 3, 3]\n            compare(game,\
    \ guess)\n            >> [1, 1, 1]\n            \n            game = [1, 3, 2]\n\
    \            guess = [1, 3, 1]\n            compare(game, guess)\n           \
    \ >> [1, 1, 0]\n            \n            game = [1, 3, 2]\n            guess\
    \ = [1, 3, 3]\n            compare(game, guess)\n            >> [1, 1, 1]\n  \
    \          \n            game = [1, 3, 2]\n            guess = [1, 3, 1]\n   \
    \         compare(game, guess)\n            >> [1, 1, 0]\n            \n     \
    \       game = [1, 3, 2]\n            guess = [1, 3, 3]\n            compare(game,\
    \ guess)\n            >> [1, 1, 1]\n            \n            game = [1, 3, 2]\n\
    \            guess = [1, 3, 1]\n            compare(game, guess)\n           \
    \ >> [1, 1, 0]\n            \n            game\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n \
    \   assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0,\
    \ 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdkn0wtmn.py\"\
    , line 16\n    game = [1, 3, 2]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [1, 5, 3, 7, 9, 2, 6]\n            guess = [1, 5, 3, 7, 9, 2, 6]\n  \
    \          compare(game, guess)\n            \n            game = [1, 5, 3, 7,\
    \ 9, 2, 6]\n            guess = [1, 5, 3, 7, 9, 2, 6]\n            compare(game,\
    \ guess)\n            \n            game = [1, 5, 3, 7, 9, 2, 6]\n           \
    \ guess = [1, 5, 3, 7, 9, 2, 6]\n            compare(game, guess)\n          \
    \  \n            game = [1, 5, 3, 7, 9, 2, 6]\n            guess = [1, 5, 3, 7,\
    \ 9, 2, 6]\n            compare(game, guess)\n            \n            game =\
    \ [1, 5, 3, 7, 9, 2, 6]\n            guess = [1, 5, 3, 7, 9, 2, 6]\n         \
    \   compare(game, guess)\n            \n            game = [1, 5, 3, 7, 9, 2,\
    \ 6]\n            guess = [1, 5, 3, 7, 9, 2, 6]\n            compare(game, guess)\n\
    \            \n            game = [1, 5, 3, 7, 9, 2, 6]\n            guess = [1,\
    \ 5, 3, 7, 9, 2, 6]\n            compare(game, guess)\n            \n        \
    \    game = [1, 5, 3, 7, 9, 2, 6]\n            guess = [1, 5, 3, 7, 9, 2, 6]\n\
    \            compare(game, guess)\n            \n            game = [1, 5, 3,\
    \ 7, 9, 2, 6]\n            guess = [1, 5, 3, 7, 9, 2, 6]\n            compare(game,\
    \ guess)\n            \n            game = [1, 5, 3, 7, 9, 2, 6]\n           \
    \ guess = [1, 5, 3, 7, 9, 2, 6]\n            compare(game, guess)\n          \
    \  \n            game = [1, 5, 3, 7, 9, 2, 6]\n            guess = [1, 5, 3, 7,\
    \ 9, 2, 6]\n            compare(game, guess)\n            \n            game =\
    \ [1, 5, 3, 7, 9, 2, 6]\n            guess = [1, 5, 3, 7, 9, 2, 6]\n         \
    \   compare(game, guess)\n            \n            game = [1, 5, 3, 7, 9, 2,\
    \ 6]\n            guess = [1, 5, 3, 7, 9, 2, 6]\n            compare(game, guess)\n\
    \            \n            game = [1, 5, 3, 7, 9, 2, 6]\n            guess = [1,\
    \ 5, 3, 7, 9, 2, 6]\n            compare(game, guess)\n            \n        \
    \    game = [1, 5, 3, 7, 9, 2, 6]\n            guess = [1, 5, 3, 7, 9, 2, 6]\n\
    \            compare(game, guess)\n            \n            game = [1, 5, 3,\
    \ 7, 9, 2, 6]\n            guess = [1, 5, 3, 7, 9, 2, 6]\n            compare(game,\
    \ guess)\n            \n\ndef check(candidate):\n    assert candidate([1, 2, 3,\
    \ 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdy8lki_v.py\"\
    , line 16\n    game = [1, 5, 3, 7, 9, 2, 6]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [10, 7, 8, 6, 5, 4]\n            guess = [8, 7, 10, 6, 5, 4]\n      \
    \      compare(game, guess)\n            >> [0, 0, 0, 0, 0, 0]\n            \n\
    \            game = [10, 7, 8, 6, 5, 4]\n            guess = [8, 7, 10, 6, 5,\
    \ 4]\n            compare(game, guess)\n            >> [0, 0, 0, 0, 0, 0]\n  \
    \          \n            game = [10, 7, 8, 6, 5, 4]\n            guess = [8, 7,\
    \ 10, 6, 5, 4]\n            compare(game, guess)\n            >> [0, 0, 0, 0,\
    \ 0, 0]\n            \n            game = [10, 7, 8, 6, 5, 4]\n            guess\
    \ = [8, 7, 10, 6, 5, 4]\n            compare(game, guess)\n            >> [0,\
    \ 0, 0, 0, 0, 0]\n            \n            game = [10, 7, 8, 6, 5, 4]\n     \
    \       guess = [8, 7, 10, 6, 5, 4]\n            compare(game, guess)\n      \
    \      >> [0, 0, 0, 0, 0, 0]\n            \n            game = [10, 7, 8, 6, 5,\
    \ 4]\n            guess = [8, 7, 10, 6, 5, 4]\n            compare(game, guess)\n\
    \            >> [0, 0, 0, 0, 0, 0]\n            \n            game = [10, 7, 8,\
    \ 6, 5, 4]\n            guess = [8, 7, 10, 6, 5, 4]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, 0, 0, 0]\n            \n            game =\
    \ [10, 7, 8, 6, 5, 4]\n            guess = [8, 7, 10, 6, 5, 4]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, 0, 0, 0]\n            \n            game =\
    \ [10, 7, 8, 6, 5, 4]\n            guess = [8, 7, 10, 6, 5, 4]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, 0, 0, 0]\n            \n            game =\
    \ [10, 7, 8, 6, 5, 4]\n            guess = [8, 7, 10, 6, 5, 4]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, 0, 0, 0]\n            \n            game =\
    \ [10, 7, 8, 6, 5, 4]\n            guess = [8, 7, 10, 6, 5, 4]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, 0, 0, 0]\n            \n            game =\
    \ [10, 7, 8, 6, 5, 4]\n            guess = [8, 7, 10, 6, 5, 4]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, 0, 0, 0]\n            \n            game =\
    \ [10, 7, 8, 6, 5, 4]\n            guess = [8, 7, 10, 6, 5, 4]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, 0, 0, 0]\n            \n            game =\
    \ [10, 7, 8, 6, 5, 4]\n            guess = [8, 7, 10, 6, 5, 4]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, 0, 0, 0]\n            \n            game =\
    \ [10, 7, 8, 6, 5, \ndef check(candidate):\n    assert candidate([1, 2, 3, 4,\
    \ 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsxne0c0h.py\"\
    , line 16\n    game = [10, 7, 8, 6, 5, 4]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [1, 4, 7, 9, 10, 11, 12]\n            guess = [1, 4, 7, 9, 10, 11, 12]\n\
    \            compare(game, guess)\n            # returns [0, -1, -4, -7, -9, -10,\
    \ -11]\n            \"\"\"\n    \"\"\"\n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \ndef check(candidate):\n    assert candidate([1, 2, 3,\
    \ 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0bjrm0t_.py\"\
    , line 16\n    game = [1, 4, 7, 9, 10, 11, 12]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [1, 5, 6, 2, 3]\n            guess = [1, 5, 6, 2, 3]\n            compare(game,\
    \ guess)\n            \n            game = [1, 5, 6, 2, 3]\n            guess\
    \ = [1, 5, 6, 3, 2]\n            compare(game, guess)\n            \n        \
    \    game = [1, 5, 6, 2, 3]\n            guess = [1, 5, 6, 3, 2]\n           \
    \ compare(game, guess)\n            \n            game = [1, 5, 6, 2, 3]\n   \
    \         guess = [1, 5, 6, 3, 3]\n            compare(game, guess)\n        \
    \    \n            game = [1, 5, 6, 2, 3]\n            guess = [1, 5, 6, 3, 3]\n\
    \            compare(game, guess)\n            \n            game = [1, 5, 6,\
    \ 2, 3]\n            guess = [1, 5, 6, 3, 4]\n            compare(game, guess)\n\
    \            \n            game = [1, 5, 6, 2, 3]\n            guess = [1, 5,\
    \ 6, 3, 5]\n            compare(game, guess)\n            \n            game =\
    \ [1, 5, 6, 2, 3]\n            guess = [1, 5, 6, 3, 6]\n            compare(game,\
    \ guess)\n            \n            game = [1, 5, 6, 2, 3]\n            guess\
    \ = [1, 5, 6, 3, 7]\n            compare(game, guess)\n            \n        \
    \    game = [1, 5, 6, 2, 3]\n            guess = [1, 5, 6, 3, 8]\n           \
    \ compare(game, guess)\n            \n            game = [1, 5, 6, 2, 3]\n   \
    \         guess = [1, 5, 6, 3, 9]\n            compare(game, guess)\n        \
    \    \n            game = [1, 5, 6, 2, 3]\n            guess = [1, 5, 6, 3, 10]\n\
    \            compare(game, guess)\n            \n            game = [1, 5, 6,\
    \ 2, 3]\n            guess = [1, 5, 6, 3, 11]\n            compare(game, guess)\n\
    \            \n            game = [1, 5, 6, 2, 3]\n            guess = [1, 5,\
    \ 6, 3, 12]\n            compare(game, guess)\n            \n            game\
    \ = [1, 5, 6, 2, 3]\n            guess = [1, 5, 6, 3, 13]\n            compare(game,\
    \ guess)\n            \n            game = [1, 5, 6, 2, 3]\n            guess\
    \ = [1, 5, 6, 3, 14]\n            compare(game, guess)\n            \n       \
    \     game = [1, 5, 6, 2, 3]\n            guess = [1, 5, 6, 3, 15]\n         \
    \   compare(game, guess)\n            \n            game = [1, 5, 6, 2, 3]\n \
    \           guess = [1, 5, 6, 3, 16]\n            compare(game, guess)\n     \
    \       \n            game\ndef check(candidate):\n    assert candidate([1, 2,\
    \ 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0zcr99jd.py\"\
    , line 16\n    game = [1, 5, 6, 2, 3]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [1, 2, 3, 4, 5]\n            guess = [1, 3, 5]\n            compare(game,\
    \ guess)\n            >> [0, -1, 1]\n            \n            game = [1, 2, 3,\
    \ 4, 5]\n            guess = [1, 3, 5]\n            compare(game, guess)\n   \
    \         >> [0, -1, 1]\n            \n            game = [1, 2, 3, 4, 5]\n  \
    \          guess = [1, 3, 5]\n            compare(game, guess)\n            >>\
    \ [0, -1, 1]\n            \n            game = [1, 2, 3, 4, 5]\n            guess\
    \ = [1, 3, 5]\n            compare(game, guess)\n            >> [0, -1, 1]\n \
    \           \n            game = [1, 2, 3, 4, 5]\n            guess = [1, 3, 5]\n\
    \            compare(game, guess)\n            >> [0, -1, 1]\n            \n \
    \           game = [1, 2, 3, 4, 5]\n            guess = [1, 3, 5]\n          \
    \  compare(game, guess)\n            >> [0, -1, 1]\n            \n           \
    \ game = [1, 2, 3, 4, 5]\n            guess = [1, 3, 5]\n            compare(game,\
    \ guess)\n            >> [0, -1, 1]\n            \n            game = [1, 2, 3,\
    \ 4, 5]\n            guess = [1, 3, 5]\n            compare(game, guess)\n   \
    \         >> [0, -1, 1]\n            \n            game = [1, 2, 3, 4, 5]\n  \
    \          guess = [1, 3, 5]\n            compare(game, guess)\n            >>\
    \ [0, -1, 1]\n            \n            game = [1, 2, 3, 4, 5]\n            guess\
    \ = [1, 3, 5]\n            compare(game, guess)\n            >> [0, -1, 1]\n \
    \           \n            game = [1, 2, 3, 4, 5]\n            guess = [1, 3, 5]\n\
    \            compare(game, guess)\n            >> [0, -1, 1]\n            \n \
    \           game = [1, 2, 3, 4, 5]\n            guess = [1, 3, 5]\n          \
    \  compare(game, guess)\n            >> [0, -1, 1]\n            \n           \
    \ game = [1, 2, 3, 4, 5]\n            guess = [1, 3, 5]\n            compare(game,\
    \ guess)\n            >> [0, -1, 1]\n            \n            game = [1, 2, 3,\
    \ 4, 5]\n            guess = [1, 3, 5]\n            compare(game, guess)\n   \
    \         >> [0, -1, 1]\n            \n            game = [1, 2, 3, 4, 5]\n  \
    \          guess = [1, 3, 5]\n            compare(game, guess)\n            >>\
    \ [0, -1, 1]\n            \n            game = [1, 2, 3, 4, 5]\n            guess\
    \ = [1, 3, 5]\n            compare(game, guess)\n            >> [0, -1, 1]\n \
    \           \n            game = [1, 2, 3, 4, 5]\n            guess = [1, 3, 5]\n\
    \            compare(game, guess)\n            >> [0, -1, 1]\n            \n \
    \           game\ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5,\
    \ 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0, 0,\
    \ 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp40b195sh.py\"\
    , line 16\n    game = [1, 2, 3, 4, 5]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [1, 4, 6, 8, 10]\n            guess = [1, 4, 6, 8, 10]\n            compare(game,\
    \ guess)\n            \n            game = [1, 4, 6, 8, 10]\n            guess\
    \ = [1, 4, 6, 8, 11]\n            compare(game, guess)\n            \n       \
    \     game = [1, 4, 6, 8, 10]\n            guess = [1, 4, 6, 8, 9]\n         \
    \   compare(game, guess)\n            \n            game = [1, 4, 6, 8, 10]\n\
    \            guess = [1, 4, 6, 8, 10]\n            compare(game, guess)\n    \
    \        \n            game = [1, 4, 6, 8, 10]\n            guess = [1, 4, 6,\
    \ 8, 10]\n            compare(game, guess)\n            \n            game = [1,\
    \ 4, 6, 8, 10]\n            guess = [1, 4, 6, 8, 10]\n            compare(game,\
    \ guess)\n            \n            game = [1, 4, 6, 8, 10]\n            guess\
    \ = [1, 4, 6, 8, 10]\n            compare(game, guess)\n            \n       \
    \     game = [1, 4, 6, 8, 10]\n            guess = [1, 4, 6, 8, 10]\n        \
    \    compare(game, guess)\n            \n            game = [1, 4, 6, 8, 10]\n\
    \            guess = [1, 4, 6, 8, 10]\n            compare(game, guess)\n    \
    \        \n            game = [1, 4, 6, 8, 10]\n            guess = [1, 4, 6,\
    \ 8, 10]\n            compare(game, guess)\n            \n            game = [1,\
    \ 4, 6, 8, 10]\n            guess = [1, 4, 6, 8, 10]\n            compare(game,\
    \ guess)\n            \n            game = [1, 4, 6, 8, 10]\n            guess\
    \ = [1, 4, 6, 8, 10]\n            compare(game, guess)\n            \n       \
    \     game = [1, 4, 6, 8, 10]\n            guess = [1, 4, 6, 8, 10]\n        \
    \    compare(game, guess)\n            \n            game = [1, 4, 6, 8, 10]\n\
    \            guess = [1, 4, 6, 8, 10]\n            compare(game, guess)\n    \
    \        \n            game = [1, 4, 6, 8, 10]\n            guess = [1, 4, 6,\
    \ 8, 10]\n            compare(game, guess)\n            \n            game = [1,\
    \ 4, 6, 8, 10]\n            guess = [1, 4, 6, 8, 10]\n            compare(game,\
    \ guess)\n            \n            game = [1, 4, 6, 8, 10]\n            guess\
    \ = [1, 4, 6, 8, 10]\n            compare(game, guess)\n            \n       \
    \     game = [1, 4, 6, 8, 10]\n            guess = [1, 4, 6, 8, 10]\n        \
    \    compare(game, guess)\n            \n            game = [1, 4, 6, 8, \ndef\
    \ check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2,\
    \ -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0,\
    \ 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2,\
    \ -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2,\
    \ 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmxv_ys_l.py\"\
    , line 16\n    game = [1, 4, 6, 8, 10]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [1, 5, 3, 6, 2, 4]\n            guess = [1, 5, 3, 6, 2, 4]\n        \
    \    compare(game, guess)\n            > [0, 0, 0, 1, 0, 0]\n            \n  \
    \          game = [1, 5, 3, 6, 2, 4]\n            guess = [1, 5, 3, 6, 2, 5]\n\
    \            compare(game, guess)\n            > [0, 0, 0, 1, 0, 0]\n        \
    \    \n            game = [1, 5, 3, 6, 2, 4]\n            guess = [1, 5, 3, 6,\
    \ 2, 6]\n            compare(game, guess)\n            > [0, 0, 0, 1, 0, 0]\n\
    \            \n            game = [1, 5, 3, 6, 2, 4]\n            guess = [1,\
    \ 5, 3, 6, 2, 7]\n            compare(game, guess)\n            > [0, 0, 0, 1,\
    \ 0, 0]\n            \n            game = [1, 5, 3, 6, 2, 4]\n            guess\
    \ = [1, 5, 3, 6, 2, 8]\n            compare(game, guess)\n            > [0, 0,\
    \ 0, 1, 0, 0]\n            \n            game = [1, 5, 3, 6, 2, 4]\n         \
    \   guess = [1, 5, 3, 6, 2, 9]\n            compare(game, guess)\n           \
    \ > [0, 0, 0, 1, 0, 0]\n            \n            game = [1, 5, 3, 6, 2, 4]\n\
    \            guess = [1, 5, 3, 6, 2, 10]\n            compare(game, guess)\n \
    \           > [0, 0, 0, 1, 0, 0]\n            \n            game = [1, 5, 3, 6,\
    \ 2, 4]\n            guess = [1, 5, 3, 6, 2, 11]\n            compare(game, guess)\n\
    \            > [0, 0, 0, 1, 0, 0]\n            \n            game = [1, 5, 3,\
    \ 6, 2, 4]\n            guess = [1, 5, 3, 6, 2, 12]\n            compare(game,\
    \ guess)\n            > [0, 0, 0, 1, 0, 0]\n            \n            game = [1,\
    \ 5, 3, 6, 2, 4]\n            guess = [1, 5, 3, 6, 2, 13]\n            compare(game,\
    \ guess)\n            > [0, 0, 0, 1, 0, 0]\n            \n            game = [1,\
    \ 5, 3, 6, 2, 4]\n            guess = [1, 5, 3, 6, 2, 14]\n            compare(game,\
    \ guess)\n            > [0, 0, 0, 1, 0, 0]\n            \n            game = [1,\
    \ 5, 3, 6, 2, 4]\n            guess = [1, 5, 3, 6, 2, 15]\n            compare(game,\
    \ guess)\n            > [0, 0, 0, 1, 0, 0]\n            \n            game = [1,\
    \ 5, 3, 6, 2, 4]\n            guess = [1, 5, 3, 6, 2, 16]\n            compare(game,\
    \ guess)\n            > [0, 0, 0, 1, 0, 0]\n            \n            game = [1,\
    \ 5, 3, 6, 2, 4]\n            guess = [1, 5, 3, 6, 2, 17]\n            compare(game\n\
    def check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2,\
    \ -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0,\
    \ 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2,\
    \ -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2,\
    \ 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpef_9jouf.py\"\
    , line 16\n    game = [1, 5, 3, 6, 2, 4]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [2,1,3,5,4,6,7,8,9,10]\n            guess = [2,1,3,5,4,6,7,8,9,10]\n\
    \            compare(game, guess)\n            \n            game = [2,1,3,5,4,6,7,8,9,10]\n\
    \            guess = [2,1,3,5,4,6,7,8,9,10]\n            compare(game, guess)\n\
    \            \n            game = [2,1,3,5,4,6,7,8,9,10]\n            guess =\
    \ [2,1,3,5,4,6,7,8,9,10]\n            compare(game, guess)\n            \n   \
    \         game = [2,1,3,5,4,6,7,8,9,10]\n            guess = [2,1,3,5,4,6,7,8,9,10]\n\
    \            compare(game, guess)\n            \n            game = [2,1,3,5,4,6,7,8,9,10]\n\
    \            guess = [2,1,3,5,4,6,7,8,9,10]\n            compare(game, guess)\n\
    \            \n            game = [2,1,3,5,4,6,7,8,9,10]\n            guess =\
    \ [2,1,3,5,4,6,7,8,9,10]\n            compare(game, guess)\n            \n   \
    \         game = [2,1,3,5,4,6,7,8,9,10]\n            guess = [2,1,3,5,4,6,7,8,9,10]\n\
    \            compare(game, guess)\n            \n            game = [2,1,3,5,4,6,7,8,9,10]\n\
    \            guess = [2,1,3,5,4,6,7,8,9,10]\n            compare(game, guess)\n\
    \            \n            game = [2,1,3,5,4,6,7,8,9,10]\n            guess =\
    \ [2,1,3,5,4,6,7,8,9,10]\n            compare(game, guess)\n            \n   \
    \         game = [2,1,3,5,4,6,7,8,9,10]\n            guess = [2,1,3,5,4,6,7,8,9,10]\n\
    \            compare(game, guess)\n            \n            game = [2,1,3,5,4,6,7,8,9,10]\n\
    \            guess = [2,1,3,5,4,6,7,8,9,10]\n            compare(game, guess)\n\
    \            \n            game = [2,1,3,5,4,6,7,8,9,10]\n            guess =\
    \ [2,1,3,5,4,6,7,8,9,10]\n            compare(game, guess)\n            \n   \
    \         game = [2,1,3,5,4,6,7,8,9,10]\n            guess = [2,1,3,5,4,6,7,8,9,10]\n\
    \            compare(game, guess)\n            \n            game = [2,1,3,5,4,6,7,8,9,10]\n\
    \            guess = [2,\ndef check(candidate):\n    assert candidate([1, 2, 3,\
    \ 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdj0hlasl.py\"\
    , line 16\n    game = [2,1,3,5,4,6,7,8,9,10]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [1, 5, 3, 7, 9, 2]\n            guess = [1, 5, 3, 7, 9, 2]\n        \
    \    compare(game, guess)\n            >> [0, 0, 0, 0, 0]\n            \n    \
    \        game = [1, 5, 3, 7, 9, 2]\n            guess = [1, 5, 3, 7, 9, 3]\n \
    \           compare(game, guess)\n            >> [0, 0, 0, 0, 0]\n           \
    \ \n            game = [1, 5, 3, 7, 9, 2]\n            guess = [1, 5, 3, 7, 9,\
    \ 4]\n            compare(game, guess)\n            >> [0, 0, 0, 0, 0]\n     \
    \       \n            game = [1, 5, 3, 7, 9, 2]\n            guess = [1, 5, 3,\
    \ 7, 9, 5]\n            compare(game, guess)\n            >> [0, 0, 0, 0, 0]\n\
    \            \n            game = [1, 5, 3, 7, 9, 2]\n            guess = [1,\
    \ 5, 3, 7, 9, 6]\n            compare(game, guess)\n            >> [0, 0, 0, 0,\
    \ 0]\n            \n            game = [1, 5, 3, 7, 9, 2]\n            guess =\
    \ [1, 5, 3, 7, 9, 7]\n            compare(game, guess)\n            >> [0, 0,\
    \ 0, 0, 0]\n            \n            game = [1, 5, 3, 7, 9, 2]\n            guess\
    \ = [1, 5, 3, 7, 9, 8]\n            compare(game, guess)\n            >> [0, 0,\
    \ 0, 0, 0]\n            \n            game = [1, 5, 3, 7, 9, 2]\n            guess\
    \ = [1, 5, 3, 7, 9, 9]\n            compare(game, guess)\n            >> [0, 0,\
    \ 0, 0, 0]\n            \n            game = [1, 5, 3, 7, 9, 2]\n            guess\
    \ = [1, 5, 3, 7, 9, 10]\n            compare(game, guess)\n            >> [0,\
    \ 0, 0, 0, 0]\n            \n            game = [1, 5, 3, 7, 9, 2]\n         \
    \   guess = [1, 5, 3, 7, 9, 11]\n            compare(game, guess)\n          \
    \  >> [0, 0, 0, 0, 0]\n            \n            game = [1, 5, 3, 7, 9, 2]\n \
    \           guess = [1, 5, 3, 7, 9, 12]\n            compare(game, guess)\n  \
    \          >> [0, 0, 0, 0, 0]\n            \n            game = [1, 5, 3, 7, 9,\
    \ 2]\n            guess = [1, 5, 3, 7, 9, 13]\n            compare(game, guess)\n\
    \            >> [0, 0, 0, 0, 0]\n            \n            game = [1, 5, 3, 7,\
    \ 9, 2]\n            guess = [1, 5, 3, 7, 9, 14]\n            compare(game, guess)\n\
    \            >> [0, 0, 0, 0, 0]\n            \n            game = [1, 5, 3, 7,\
    \ 9, 2]\n            guess = [1, 5, 3, 7, 9, 15]\n            compare(game, guess)\n\
    \            >> [0, 0, 0, 0, 0]\n            \n            game = [\ndef check(candidate):\n\
    \    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0,\
    \ 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0,\
    \ 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n  \
    \  assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n\
    \    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3orbxteh.py\"\
    , line 16\n    game = [1, 5, 3, 7, 9, 2]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ scores = [1, 3, 2]\n            guesses = [1, 3, 2]\n            compare(scores,\
    \ guesses) --> [0, 0, 2]\n            scores = [1, 3, 2]\n            guesses\
    \ = [1, 3, 3]\n            compare(scores, guesses) --> [0, 0, 1]\n          \
    \  scores = [1, 3, 2]\n            guesses = [1, 3, 2]\n            compare(scores,\
    \ guesses) --> [0, 0, 2]\n            scores = [1, 3, 2]\n            guesses\
    \ = [1, 3, 3]\n            compare(scores, guesses) --> [0, 0, 1]\n          \
    \  scores = [1, 3, 2]\n            guesses = [1, 3, 2]\n            compare(scores,\
    \ guesses) --> [0, 0, 2]\n            scores = [1, 3, 2]\n            guesses\
    \ = [1, 3, 3]\n            compare(scores, guesses) --> [0, 0, 1]\n          \
    \  scores = [1, 3, 2]\n            guesses = [1, 3, 2]\n            compare(scores,\
    \ guesses) --> [0, 0, 2]\n            scores = [1, 3, 2]\n            guesses\
    \ = [1, 3, 3]\n            compare(scores, guesses) --> [0, 0, 1]\n          \
    \  scores = [1, 3, 2]\n            guesses = [1, 3, 2]\n            compare(scores,\
    \ guesses) --> [0, 0, 2]\n            scores = [1, 3, 2]\n            guesses\
    \ = [1, 3, 3]\n            compare(scores, guesses) --> [0, 0, 1]\n          \
    \  scores = [1, 3, 2]\n            guesses = [1, 3, 2]\n            compare(scores,\
    \ guesses) --> [0, 0, 2]\n            scores = [1, 3, 2]\n            guesses\
    \ = [1, 3, 3]\n            compare(scores, guesses) --> [0, 0, 1]\n          \
    \  scores = [1, 3, 2]\n            guesses = [1, 3, 2]\n            compare(scores,\
    \ guesses) --> [0, 0, 2]\n            scores = [1, 3, 2]\n            guesses\
    \ = [1, 3, 3]\n            compare(scores, guesses) --> [0, 0, 1]\n          \
    \  scores = [1, 3, 2]\n            guesses = [1, 3, 2]\n            compare(scores,\
    \ guesses) --> [0, 0, 2]\n            scores = [1, 3, 2]\n            guesses\
    \ = [1, 3, 3]\n            compare(scores, guesses) --> [0, 0, 1]\n          \
    \  scores = [1, 3, 2]\n            guesses = [1, 3, 2]\n            compare(scores,\
    \ guesses) --> [0, 0, 2]\n            scores = [1, 3, 2]\n            guesses\
    \ = [1, 3, 3]\n            compare(scores, guesses) --> [0, 0, 1]\n          \
    \  scores = [1, 3, 2]\n            guesses = [1, 3, 2]\n            compare(scores,\
    \ guesses) --> [0, 0, 2]\ndef check(candidate):\n    assert candidate([1, 2, 3,\
    \ 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvlbnm6nu.py\"\
    , line 16\n    scores = [1, 3, 2]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [1, 3, 2]\n            guess = [1, 3, 2]\n            compare(game, guess)\n\
    \            \n            game = [1, 3, 2]\n            guess = [1, 3, 3]\n \
    \           compare(game, guess)\n            \n            game = [1, 3, 2]\n\
    \            guess = [1, 3, 1]\n            compare(game, guess)\n           \
    \ \n            game = [1, 3, 2]\n            guess = [1, 3, 0]\n            compare(game,\
    \ guess)\n            \n            game = [1, 3, 2]\n            guess = [1,\
    \ 3, -1]\n            compare(game, guess)\n            \n            game = [1,\
    \ 3, 2]\n            guess = [1, 3, -2]\n            compare(game, guess)\n  \
    \          \n            game = [1, 3, 2]\n            guess = [1, 3, -3]\n  \
    \          compare(game, guess)\n            \n            game = [1, 3, 2]\n\
    \            guess = [1, 3, -4]\n            compare(game, guess)\n          \
    \  \n            game = [1, 3, 2]\n            guess = [1, 3, -5]\n          \
    \  compare(game, guess)\n            \n            game = [1, 3, 2]\n        \
    \    guess = [1, 3, -5]\n            compare(game, guess)\n            \n    \
    \        game = [1, 3, 2]\n            guess = [1, 3, -5]\n            compare(game,\
    \ guess)\n            \n            game = [1, 3, 2]\n            guess = [1,\
    \ 3, -5]\n            compare(game, guess)\n            \n            game = [1,\
    \ 3, 2]\n            guess = [1, 3, -5]\n            compare(game, guess)\n  \
    \          \n            game = [1, 3, 2]\n            guess = [1, 3, -5]\n  \
    \          compare(game, guess)\n            \n            game = [1, 3, 2]\n\
    \            guess = [1, 3, -5]\n            compare(game, guess)\n          \
    \  \n            game = [1, 3, 2]\n            guess = [1, 3, -5]\n          \
    \  compare(game, guess)\n            \n            game = [1, 3, 2]\n        \
    \    guess = [1, 3, -5]\n            compare(game, guess)\n            \n    \
    \        game = [1, 3, 2]\n            guess = [1, 3, -5]\n            compare(game,\
    \ guess)\n            \n            game = [1, 3, 2]\n            guess = [1,\
    \ 3, -5]\n            compare(game, guess)\n            \n            game = [1,\
    \ 3, 2]\n            guess = [1, 3, -5]\n            compare(game, guess)\n  \
    \          \n            game = [1, 3, 2]\n            guess = [1, 3, -5]\n  \
    \          compare(\ndef check(candidate):\n    assert candidate([1, 2, 3, 4,\
    \ 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp25zcwgpz.py\"\
    , line 16\n    game = [1, 3, 2]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [10, 15, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, \ndef check(candidate):\n\
    \    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0,\
    \ 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0,\
    \ 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n  \
    \  assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n\
    \    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqwe7kzdh.py\"\
    , line 16\n    , 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, \n  \
    \             ^\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [1, 5, 7, 3, 6, 4]\n            guess = [1, 5, 7, 3, 6, 4]\n        \
    \    compare(game, guess)\n            >> [0, 0, 0, 0, 0, 0]\n            \n \
    \           game = [1, 5, 7, 3, 6, 4]\n            guess = [1, 5, 7, 3, 6, 5]\n\
    \            compare(game, guess)\n            >> [0, 0, 0, 0, 0, 0]\n       \
    \     \n            game = [1, 5, 7, 3, 6, 4]\n            guess = [1, 5, 7, 3,\
    \ 6, 6]\n            compare(game, guess)\n            >> [0, 0, 0, 0, 0, 0]\n\
    \            \n            game = [1, 5, 7, 3, 6, 4]\n            guess = [1,\
    \ 5, 7, 3, 6, 7]\n            compare(game, guess)\n            >> [0, 0, 0, 0,\
    \ 0, 0]\n            \n            game = [1, 5, 7, 3, 6, 4]\n            guess\
    \ = [1, 5, 7, 3, 6, 8]\n            compare(game, guess)\n            >> [0, 0,\
    \ 0, 0, 0, 0]\n            \n            game = [1, 5, 7, 3, 6, 4]\n         \
    \   guess = [1, 5, 7, 3, 6, 9]\n            compare(game, guess)\n           \
    \ >> [0, 0, 0, 0, 0, 0]\n            \n            game = [1, 5, 7, 3, 6, 4]\n\
    \            guess = [1, 5, 7, 3, 6, 10]\n            compare(game, guess)\n \
    \           >> [0, 0, 0, 0, 0, 0]\n            \n            game = [1, 5, 7,\
    \ 3, 6, 4]\n            guess = [1, 5, 7, 3, 6, 11]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, 0, 0, 0]\n            \n            game =\
    \ [1, 5, 7, 3, 6, 4]\n            guess = [1, 5, 7, 3, 6, 12]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, 0, 0, 0]\n            \n            game =\
    \ [1, 5, 7, 3, 6, 4]\n            guess = [1, 5, 7, 3, 6, 13]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, 0, 0, 0]\n            \n            game =\
    \ [1, 5, 7, 3, 6, 4]\n            guess = [1, 5, 7, 3, 6, 14]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, 0, 0, 0]\n            \n            game =\
    \ [1, 5, 7, 3, 6, 4]\n            guess = [1, 5, 7, 3, 6, 15]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, 0, 0, 0]\n            \n            game =\
    \ [1, 5, 7, 3, 6, 4]\n            guess = [1, 5, 7, 3, 6, 16]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, 0, 0, 0]\n            \n            game =\
    \ [1, 5, 7, 3, 6, 4]\n            guess = [1, 5, 7, 3, 6, 17]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, 0, 0, 0]\n            \n            \ndef check(candidate):\n\
    \    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0,\
    \ 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0,\
    \ 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n  \
    \  assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n\
    \    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3mn1c3vv.py\"\
    , line 16\n    game = [1, 5, 7, 3, 6, 4]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [1, 5, 3, 2]\n            guess = [1, 5, 3, 2]\n            compare(game,\
    \ guess)\n            \n            game = [1, 5, 3, 2]\n            guess = [1,\
    \ 5, 3, 3]\n            compare(game, guess)\n            \n            game =\
    \ [1, 5, 3, 2]\n            guess = [1, 5, 3, 1]\n            compare(game, guess)\n\
    \            \n            game = [1, 5, 3, 2]\n            guess = [1, 5, 3,\
    \ 5]\n            compare(game, guess)\n            \n            game = [1, 5,\
    \ 3, 2]\n            guess = [1, 5, 3, 6]\n            compare(game, guess)\n\
    \            \n            game = [1, 5, 3, 2]\n            guess = [1, 5, 3,\
    \ 7]\n            compare(game, guess)\n            \n            game = [1, 5,\
    \ 3, 2]\n            guess = [1, 5, 3, 8]\n            compare(game, guess)\n\
    \            \n            game = [1, 5, 3, 2]\n            guess = [1, 5, 3,\
    \ 9]\n            compare(game, guess)\n            \n            game = [1, 5,\
    \ 3, 2]\n            guess = [1, 5, 3, 10]\n            compare(game, guess)\n\
    \            \n            game = [1, 5, 3, 2]\n            guess = [1, 5, 3,\
    \ 11]\n            compare(game, guess)\n            \n            game = [1,\
    \ 5, 3, 2]\n            guess = [1, 5, 3, 12]\n            compare(game, guess)\n\
    \            \n            game = [1, 5, 3, 2]\n            guess = [1, 5, 3,\
    \ 13]\n            compare(game, guess)\n            \n            game = [1,\
    \ 5, 3, 2]\n            guess = [1, 5, 3, 14]\n            compare(game, guess)\n\
    \            \n            game = [1, 5, 3, 2]\n            guess = [1, 5, 3,\
    \ 15]\n            compare(game, guess)\n            \n            game = [1,\
    \ 5, 3, 2]\n            guess = [1, 5, 3, 16]\n            compare(game, guess)\n\
    \            \n            game = [1, 5, 3, 2]\n            guess = [1, 5, 3,\
    \ 17]\n            compare(game, guess)\n            \n            game = [1,\
    \ 5, 3, 2]\n            guess = [1, 5, 3, 18]\n            compare(game, guess)\n\
    \            \n            game = [1, 5, 3, 2]\n            guess = [1, 5, 3,\
    \ 19]\n            compare(game, guess)\n            \n            game = [1,\
    \ 5, 3, 2]\n            guess = [1, 5, 3, 20]\n            compare(game, guess)\n\
    \            \n            game = [1, 5, 3, 2]\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n \
    \   assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0,\
    \ 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbyaaa6d2.py\"\
    , line 16\n    game = [1, 5, 3, 2]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ scores = [10, 20, 30, 40, 50]\n            guesses = [10, 20, 30, 40, 50]\n\
    \            compare(scores, guesses) == [0, 0, 0, -1, -1]\n            \n   \
    \         scores = [10, 20, 30, 40, 50]\n            guesses = [10, 20, 30, 40,\
    \ 50]\n            compare(scores, guesses) == [0, 0, 0, -1, -1]\n           \
    \ \n            scores = [10, 20, 30, 40, 50]\n            guesses = [10, 20,\
    \ 30, 40, 50]\n            compare(scores, guesses) == [0, 0, 0, -1, -1]\n   \
    \         \n            scores = [10, 20, 30, 40, 50]\n            guesses = [10,\
    \ 20, 30, 40, 50]\n            compare(scores, guesses) == [0, 0, 0, -1, -1]\n\
    \            \n            scores = [10, 20, 30, 40, 50]\n            guesses\
    \ = [10, 20, 30, 40, 50]\n            compare(scores, guesses) == [0, 0, 0, -1,\
    \ -1]\n            \n            scores = [10, 20, 30, 40, 50]\n            guesses\
    \ = [10, 20, 30, 40, 50]\n            compare(scores, guesses) == [0, 0, 0, -1,\
    \ -1]\n            \n            scores = [10, 20, 30, 40, 50]\n            guesses\
    \ = [10, 20, 30, 40, 50]\n            compare(scores, guesses) == [0, 0, 0, -1,\
    \ -1]\n            \n            scores = [10, 20, 30, 40, 50]\n            guesses\
    \ = [10, 20, 30, 40, 50]\n            compare(scores, guesses) == [0, 0, 0, -1,\
    \ -1]\n            \n            scores = [10, 20, 30, 40, 50]\n            guesses\
    \ = [10, 20, 30, 40, 50]\n            compare(scores, guesses) == [0, 0, 0, -1,\
    \ -1]\n            \n            scores = [10, 20, 30, 40, 50]\n            guesses\
    \ = [10, 20, 30, 40, 50]\n            compare(scores, guesses) == [0, 0, 0, -1,\
    \ -1]\n            \n            scores = [10, 20, 30, 40, 50]\n            guesses\
    \ = [10, 20, 30, 40, 50]\n            compare(scores, guesses) == [0, 0, 0, -1,\
    \ -1]\n            \n            scores = [10, 20, 30, 40, 50]\n            guesses\
    \ = [10, 20, 30, 40, 50]\n            compare(scores, guesses) == [0, 0, 0, -1,\
    \ -1]\n            \n            scores = [10, 20, 30, 40, 50]\n            guesses\
    \ = [10, 20, 30, 40, 50]\n            compare(scores, guesses) == [0, 0, 0, -1,\
    \ -1]\n            \n            scores = [10, 20, 30, 40, 50]\n            guesses\
    \ = [10, 20, 30, 40, 50]\n            compare(scores, guesses) == [0, 0, 0, -1,\
    \ -1]\n            \n            scores = [10, 20, 30, 40, 50]\n            guesses\
    \ = [10, 20, 30, 40, 50]\n            \ndef check(candidate):\n    assert candidate([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv3sw0jyf.py\"\
    , line 16\n    scores = [10, 20, 30, 40, 50]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ scores = [10, 20, 30, 40, 50]\n            guesses = [10, 20, 30, 40, 50]\n\
    \            compare(scores, guesses) \n            # returns [0, 10, 10, 10,\
    \ 10]\n            \n            scores = [10, 20, 30, 40, 50]\n            guesses\
    \ = [10, 20, 30, 40, 50]\n            compare(scores, guesses) \n            #\
    \ returns [0, 10, 10, 10, 10]\n            \n            scores = [10, 20, 30,\
    \ 40, 50]\n            guesses = [10, 20, 30, 40, 50]\n            compare(scores,\
    \ guesses) \n            # returns [0, 10, 10, 10, 10]\n            \n       \
    \     scores = [10, 20, 30, 40, 50]\n            guesses = [10, 20, 30, 40, 50]\n\
    \            compare(scores, guesses) \n            # returns [0, 10, 10, 10,\
    \ 10]\n            \n            scores = [10, 20, 30, 40, 50]\n            guesses\
    \ = [10, 20, 30, 40, 50]\n            compare(scores, guesses) \n            #\
    \ returns [0, 10, 10, 10, 10]\n            \n            scores = [10, 20, 30,\
    \ 40, 50]\n            guesses = [10, 20, 30, 40, 50]\n            compare(scores,\
    \ guesses) \n            # returns [0, 10, 10, 10, 10]\n            \n       \
    \     scores = [10, 20, 30, 40, 50]\n            guesses = [10, 20, 30, 40, 50]\n\
    \            compare(scores, guesses) \n            # returns [0, 10, 10, 10,\
    \ 10]\n            \n            scores = [10, 20, 30, 40, 50]\n            guesses\
    \ = [10, 20, 30, 40, 50]\n            compare(scores, guesses) \n            #\
    \ returns [0, 10, 10, 10, 10]\n            \n            scores = [10, 20, 30,\
    \ 40, 50]\n            guesses = [10, 20, 30, 40, 50]\n            compare(scores,\
    \ guesses) \n            # returns [0, 10, 10, 10, 10]\n            \n       \
    \     scores = [10, 20, 30, 40, 50]\n            guesses = [10, 20, 30, 40, 50]\n\
    \            compare(scores, guesses) \n            # returns [0, 10, 10, 10,\
    \ 10]\n            \n            scores = [10, 20, 30, 40, 50]\n            guesses\
    \ = [10, 20, 30, 40, 50]\n            compare(scores, guesses) \n            #\
    \ returns [0, 10, 10, 10, 10]\n            \n            scores = [10, 20, 30,\
    \ 40, 50]\n            guesses = [10, 20, 30, 40, 50]\n            compare(scores,\
    \ guesses) \n            # returns [0, 10, 10, 10, 10]\n            \n       \
    \     scores = [10, 20, 30, 40, 50]\n            guesses = [10, 20, 30, 40, 50]\n\
    \            compare(scores, guesses) \n            # returns [0, 10, 10, 10,\
    \ 10]\n            \n            scores = [10, 20, \ndef check(candidate):\n \
    \   assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0,\
    \ 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0,\
    \ 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n  \
    \  assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n\
    \    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpre1u6ia6.py\"\
    , line 16\n    scores = [10, 20, 30, 40, 50]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [1, 5, 3, 2]\n            guess = [1, 5, 3, 2]\n            compare(game,\
    \ guess)\n            # returns [0, 1, 3, 2]\n            \"\"\"\n    \"\"\"\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmgt49q70.py\"\
    , line 16\n    game = [1, 5, 3, 2]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [5, 3, 6, 1, 2]\n            guess = [4, 6, 2, 5, 1]\n            compare(game,\
    \ guess)\n            \n            game = [5, 3, 6, 1, 2]\n            guess\
    \ = [4, 6, 2, 5, 1]\n            compare(game, guess)\n            \n        \
    \    game = [5, 3, 6, 1, 2]\n            guess = [4, 6, 2, 5, 1]\n           \
    \ compare(game, guess)\n            \n            game = [5, 3, 6, 1, 2]\n   \
    \         guess = [4, 6, 2, 5, 1]\n            compare(game, guess)\n        \
    \    \n            game = [5, 3, 6, 1, 2]\n            guess = [4, 6, 2, 5, 1]\n\
    \            compare(game, guess)\n            \n            game = [5, 3, 6,\
    \ 1, 2]\n            guess = [4, 6, 2, 5, 1]\n            compare(game, guess)\n\
    \            \n            game = [5, 3, 6, 1, 2]\n            guess = [4, 6,\
    \ 2, 5, 1]\n            compare(game, guess)\n            \n            game =\
    \ [5, 3, 6, 1, 2]\n            guess = [4, 6, 2, 5, 1]\n            compare(game,\
    \ guess)\n            \n            game = [5, 3, 6, 1, 2]\n            guess\
    \ = [4, 6, 2, 5, 1]\n            compare(game, guess)\n            \n        \
    \    game = [5, 3, 6, 1, 2]\n            guess = [4, 6, 2, 5, 1]\n           \
    \ compare(game, guess)\n            \n            game = [5, 3, 6, 1, 2]\n   \
    \         guess = [4, 6, 2, 5, 1]\n            compare(game, guess)\n        \
    \    \n            game = [5, 3, 6, 1, 2]\n            guess = [4, 6, 2, 5, 1]\n\
    \            compare(game, guess)\n            \n            game = [5, 3, 6,\
    \ 1, 2]\n            guess = [4, 6, 2, 5, 1]\n            compare(game, guess)\n\
    \            \n            game = [5, 3, 6, 1, 2]\n            guess = [4, 6,\
    \ 2, 5, 1]\n            compare(game, guess)\n            \n            game =\
    \ [5, 3, 6, 1, 2]\n            guess = [4, 6, 2, 5, 1]\n            compare(game,\
    \ guess)\n            \n            game = [5, 3, 6, 1, 2]\n            guess\
    \ = [4, 6, 2, 5, 1]\n            compare(game, guess)\n            \n        \
    \    game = [5, 3, 6, 1, 2]\n            guess = [4, 6, 2, 5, 1]\n           \
    \ compare(game, guess)\n            \n            game = [5, 3, 6, 1, 2]\n   \
    \         guess = [4, 6, 2, 5, 1]\n            compare(game, guess)\n        \
    \    \n            game = [5, 3, 6, 1, 2]\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptf_fs4ak.py\"\
    , line 16\n    game = [5, 3, 6, 1, 2]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [2,3,1,1,2,3]\n            guess = [2,3,1,1,2,3]\n            compare(game,\
    \ guess)\n            >> [2,3,1,1,2,3]\n            \n            game = [2,3,1,1,2,3]\n\
    \            guess = [2,3,1,1,2,4]\n            compare(game, guess)\n       \
    \     >> [2,3,1,1,2,3]\n            \n            game = [2,3,1,1,2,3]\n     \
    \       guess = [2,3,1,1,2,4]\n            compare(game, guess)\n            >>\
    \ [2,3,1,1,2,3]\n            \n            game = [2,3,1,1,2,3]\n            guess\
    \ = [2,3,1,1,2,4]\n            compare(game, guess)\n            >> [2,3,1,1,2,3]\n\
    \            \n            game = [2,3,1,1,2,3]\n            guess = [2,3,1,1,2,4]\n\
    \            compare(game, guess)\n            >> [2,3,1,1,2,3]\n            \n\
    \            game = [2,3,1,1,2,3]\n            guess = [2,3,1,1,2,4]\n       \
    \     compare(game, guess)\n            >> [2,3,1,1,2,3]\n            \n     \
    \       game = [2,3,1,1,2,3]\n            guess = [2,3,1,1,2,4]\n            compare(game,\
    \ guess)\n            >> [2,3,1,1,2,3]\n            \n            game = [2,3,1,1,2,3]\n\
    \            guess = [2,3,1,1,2,4]\n            compare(game, guess)\n       \
    \     >> [2,3,1,1,2,3]\n            \n            game = [2,3,1,1,2,3]\n     \
    \       guess = [2,3,1,1,2,4]\n            compare(game, guess)\n            >>\
    \ [2,3,1,1,2,3]\n            \n            game = [2,3,1,1,2,3]\n            guess\
    \ = [2,3,1,1,2,4]\n            compare(game, guess)\n            >> [2,3,1,1,2,3]\n\
    \            \n            game = [2,3,1,1,2,3]\n            guess = [2,3,1,1,2,4]\n\
    \            compare(game, guess)\n            >> [2,3,1,1,2,3]\n            \n\
    \            game = [2,3,1,1,2,3]\n            guess = [2,3,1,1,2,4]\n       \
    \     compare(game, guess)\n            >> [2,3,1,1,2,3]\n            \n     \
    \       game = [2,3,1,1,2,3]\n            guess = [2,3,1,1,2,4]\n            compare(game,\
    \ guess)\n            >> [2,3,1,1,2,3]\n            \n            game = [2,3,1,1,2,3]\n\
    \            guess = [2,3,1,1,2,4]\n            compare(game, guess)\n       \
    \     >> [2,3,\ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 1],\
    \ [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0, 0, 0, 0,\
    \ 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1, 2,\
    \ 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2, 3,\
    \ 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz39wfcdb.py\"\
    , line 16\n    game = [2,3,1,1,2,3]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [1, 5, 3, 7, 9, 2]\n            guess = [1, 5, 3, 7, 9, 2]\n        \
    \    compare(game, guess)\n            \n            game = [1, 5, 3, 7, 9, 2]\n\
    \            guess = [1, 5, 3, 7, 9, 3]\n            compare(game, guess)\n  \
    \          \n            game = [1, 5, 3, 7, 9, 2]\n            guess = [1, 5,\
    \ 3, 7, 9, 4]\n            compare(game, guess)\n            \n            game\
    \ = [1, 5, 3, 7, 9, 2]\n            guess = [1, 5, 3, 7, 9, 5]\n            compare(game,\
    \ guess)\n            \n            game = [1, 5, 3, 7, 9, 2]\n            guess\
    \ = [1, 5, 3, 7, 9, 6]\n            compare(game, guess)\n            \n     \
    \       game = [1, 5, 3, 7, 9, 2]\n            guess = [1, 5, 3, 7, 9, 7]\n  \
    \          compare(game, guess)\n            \n            game = [1, 5, 3, 7,\
    \ 9, 2]\n            guess = [1, 5, 3, 7, 9, 8]\n            compare(game, guess)\n\
    \            \n            game = [1, 5, 3, 7, 9, 2]\n            guess = [1,\
    \ 5, 3, 7, 9, 9]\n            compare(game, guess)\n            \n           \
    \ game = [1, 5, 3, 7, 9, 2]\n            guess = [1, 5, 3, 7, 9, 10]\n       \
    \     compare(game, guess)\n            \n            game = [1, 5, 3, 7, 9, 2]\n\
    \            guess = [1, 5, 3, 7, 9, 11]\n            compare(game, guess)\n \
    \           \n            game = [1, 5, 3, 7, 9, 2]\n            guess = [1, 5,\
    \ 3, 7, 9, 12]\n            compare(game, guess)\n            \n            game\
    \ = [1, 5, 3, 7, 9, 2]\n            guess = [1, 5, 3, 7, 9, 13]\n            compare(game,\
    \ guess)\n            \n            game = [1, 5, 3, 7, 9, 2]\n            guess\
    \ = [1, 5, 3, 7, 9, 14]\n            compare(game, guess)\n            \n    \
    \        game = [1, 5, 3, 7, 9, 2]\n            guess = [1, 5, 3, 7, 9, 15]\n\
    \            compare(game, guess)\n            \n            game = [1, 5, 3,\
    \ 7, 9, 2]\n            guess = [1, 5, 3, 7, 9, 16]\n            compare(game,\
    \ guess)\n            \n            game = [1, 5, 3, 7, 9, 2]\n            guess\
    \ = [1, 5, 3, 7, 9, 17]\n            compare(game, guess)\n            \n    \
    \        game = [1, 5, 3, 7, 9, 2]\n            guess = [1, 5, 3, 7, 9, 18]\n\
    \            compare(game\ndef check(candidate):\n    assert candidate([1, 2,\
    \ 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1guh7ya8.py\"\
    , line 16\n    game = [1, 5, 3, 7, 9, 2]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [1, 3, 2]\n            guess = [1, 3, 2]\n            compare(game, guess)\n\
    \            >> [0, 0, 0]\n            \n            game = [1, 3, 2]\n      \
    \      guess = [1, 3, 3]\n            compare(game, guess)\n            >> [1,\
    \ 1, 1]\n            \n            game = [1, 3, 2]\n            guess = [1, 3,\
    \ 3]\n            compare(game, guess)\n            >> [1, 1, 1]\n           \
    \ \n            game = [1, 3, 2]\n            guess = [1, 3, 2]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0]\n            \n            game = [1, 3, 2]\n\
    \            guess = [1, 3, 3]\n            compare(game, guess)\n           \
    \ >> [1, 1, 1]\n            \n            game = [1, 3, 2]\n            guess\
    \ = [1, 3, 2]\n            compare(game, guess)\n            >> [0, 0, 0]\n  \
    \          \n            game = [1, 3, 2]\n            guess = [1, 3, 3]\n   \
    \         compare(game, guess)\n            >> [1, 1, 1]\n            \n     \
    \       game = [1, 3, 2]\n            guess = [1, 3, 2]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0]\n            \n            game = [1, 3, 2]\n\
    \            guess = [1, 3, 3]\n            compare(game, guess)\n           \
    \ >> [1, 1, 1]\n            \n            game = [1, 3, 2]\n            guess\
    \ = [1, 3, 2]\n            compare(game, guess)\n            >> [0, 0, 0]\n  \
    \          \n            game = [1, 3, 2]\n            guess = [1, 3, 3]\n   \
    \         compare(game, guess)\n            >> [1, 1, 1]\n            \n     \
    \       game = [1, 3, 2]\n            guess = [1, 3, 2]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0]\n            \n            game = [1, 3, 2]\n\
    \            guess = [1, 3, 3]\n            compare(game, guess)\n           \
    \ >> [1, 1, 1]\n            \n            game = [1, 3, 2]\n            guess\
    \ = [1, 3, 2]\n            compare(game, guess)\n            >> [0, 0, 0]\n  \
    \          \n            game = [1, 3, 2]\n            guess = [1, 3, 3]\n   \
    \         compare(game, guess)\n            >> [1, 1, 1]\n            \n     \
    \       game = [1, 3, 2]\n            guess = [1, 3, 2]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0]\n            \n            game = [1, 3, 2]\n\
    \            guess = [1, 3, 3]\n            compare(game, guess)\n           \
    \ >> [1, 1, 1]\n            \n            game\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n \
    \   assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0,\
    \ 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf0gd1j4v.py\"\
    , line 16\n    game = [1, 3, 2]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [2,1,3,5,1,5,2,3,4]\n            guess = [2,1,3,5,1,5,2,3,4]\n      \
    \      \n            compare(game, guess)\n            \n            >>>[2,1,3,5,1,5,2,3,4]\n\
    \            \n            guess = [2,1,3,5,1,5,2,3,5]\n            \n       \
    \     compare(game, guess)\n            \n            >>>[2,1,3,5,1,5,2,3,4]\n\
    \            \n            guess = [2,1,3,5,1,5,2,3,4]\n            \n       \
    \     compare(game, guess)\n            \n            >>>[2,1,3,5,1,5,2,3,4]\n\
    \            \n            guess = [2,1,3,5,1,5,2,3,5]\n            \n       \
    \     compare(game, guess)\n            \n            >>>[2,1,3,5,1,5,2,3,4]\n\
    \            \n            guess = [2,1,3,5,1,5,2,3,5]\n            \n       \
    \     compare(game, guess)\n            \n            >>>[2,1,3,5,1,5,2,3,4]\n\
    \            \n            guess = [2,1,3,5,1,5,2,3,4]\n            \n       \
    \     compare(game, guess)\n            \n            >>>[2,1,3,5,1,5,2,3,4]\n\
    \            \n            guess = [2,1,3,5,1,5,2,3,5]\n            \n       \
    \     compare(game, guess)\n            \n            >>>[2,1,3,5,1,5,2,3,4]\n\
    \            \n            guess = [2,1,3,5,1,5,2,3,4]\n            \n       \
    \     compare(game, guess)\n            \n            >>>[2,1,3,5,1,5,2,3,4]\n\
    \            \n            guess = [2,1,3,5,1,5,2,3,5]\n            \n       \
    \     compare(game, guess)\n            \n            >>>[2,1,3,5,1,5,2,3,4]\n\
    \            \n            guess = [2,1,3,5,1,5,2,3,4]\n            \n       \
    \     compare(game, guess)\n            \n            >>>[2,1,3,5,1,5,2,3,4]\n\
    \            \n            guess = [2,1,3,5,1,5,2,3,5]\n            \n       \
    \     compare(game, guess)\n            \n            >>>[2,1,3,5,1,5,2,3,4]\n\
    \            \n            guess = [2,1,3,5,1,5,2,3,4]\n            \n       \
    \     compare(game, guess)\n            \n            >>>[2,1,3,5,1,5,2,3,4]\n\
    \            \n            guess = [2,1,3,5,1,5,2,3,5]\n            \n       \
    \     compare(game\ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5,\
    \ 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0, 0,\
    \ 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxnwyoheg.py\"\
    , line 16\n    game = [2,1,3,5,1,5,2,3,4]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [10, 20, 30, 40, 50]\n            guess = [20, 30, 40, 50, 60]\n    \
    \        compare(game, guess)\n            >> [10, 0, 0, 10, 0]\n            \"\
    \"\"\n    \"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa_395jj8.py\"\
    , line 16\n    game = [10, 20, 30, 40, 50]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [10, 20, 30, 40, 50]\n            guess = [10, 20, 30, 40, 50]\n    \
    \        compare(game, guess)\n            >> [0, 0, 0, 0, 0]\n            \n\
    \            game = [10, 20, 30, 40, 50]\n            guess = [10, 20, 30, 40,\
    \ 50]\n            compare(game, guess)\n            >> [0, 0, 0, 0, 0]\n    \
    \        \n            game = [10, 20, 30, 40, 50]\n            guess = [10, 20,\
    \ 30, 40, 50]\n            compare(game, guess)\n            >> [0, 0, 0, 0, 0]\n\
    \            \n            game = [10, 20, 30, 40, 50]\n            guess = [10,\
    \ 20, 30, 40, 50]\n            compare(game, guess)\n            >> [0, 0, 0,\
    \ 0, 0]\n            \n            game = [10, 20, 30, 40, 50]\n            guess\
    \ = [10, 20, 30, 40, 50]\n            compare(game, guess)\n            >> [0,\
    \ 0, 0, 0, 0]\n            \n            game = [10, 20, 30, 40, 50]\n       \
    \     guess = [10, 20, 30, 40, 50]\n            compare(game, guess)\n       \
    \     >> [0, 0, 0, 0, 0]\n            \n            game = [10, 20, 30, 40, 50]\n\
    \            guess = [10, 20, 30, 40, 50]\n            compare(game, guess)\n\
    \            >> [0, 0, 0, 0, 0]\n            \n            game = [10, 20, 30,\
    \ 40, 50]\n            guess = [10, 20, 30, 40, 50]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, 0, 0]\n            \n            game = [10,\
    \ 20, 30, 40, 50]\n            guess = [10, 20, 30, 40, 50]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, 0, 0]\n            \n            game = [10,\
    \ 20, 30, 40, 50]\n            guess = [10, 20, 30, 40, 50]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, 0, 0]\n            \n            game = [10,\
    \ 20, 30, 40, 50]\n            guess = [10, 20, 30, 40, 50]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, 0, 0]\n            \n            game = [10,\
    \ 20, 30, 40, 50]\n            guess = [10, 20, 30, 40, 50]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, 0, 0]\n            \n            game = [10,\
    \ 20, 30, 40, 50]\n            guess = [10, 20, 30, 40, 50]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, 0, 0]\n            \n            game = [10,\
    \ 20, 30, 40, 50]\n            guess = [10, 20, 30, 40, 50]\n            compare(game,\
    \ guess)\n            >> [0, 0, 0, 0, 0]\n            \n            game = [10,\
    \ 20, 30, 40, 5\ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 1],\
    \ [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0, 0, 0, 0,\
    \ 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1, 2,\
    \ 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2, 3,\
    \ 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpk_8u_a_c.py\"\
    , line 16\n    game = [10, 20, 30, 40, 50]\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
