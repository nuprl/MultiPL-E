name: HumanEval_103_rounded_avg
language: py
results:
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return -1\n    else:\n        return bin(n+m).replace('0b',\
    \ '')\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert\
    \ candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptp30rxur.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptp30rxur.py\"\
    , line 30, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptp30rxur.py\"\
    , line 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return -1\n    else:\n        return int(n + (m //\
    \ 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert\
    \ candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt4g3c9wx.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt4g3c9wx.py\"\
    , line 30, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt4g3c9wx.py\"\
    , line 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return -1\n    else:\n        return int(round((n\
    \ + m) / 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf2ddg024.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf2ddg024.py\"\
    , line 30, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf2ddg024.py\"\
    , line 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return \"-1\"\n    else:\n        return str(int(n\
    \ + (m-1) / 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpaztpbro0.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpaztpbro0.py\"\
    , line 30, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpaztpbro0.py\"\
    , line 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return -1\n    else:\n        return int(n + (m -\
    \ n) // 2)\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't answer the question,\
    \ which is about how to round the average, not how to round the numbers.\n<|/\
    \ c |>\n<| c |>\nI guess I misunderstood the question. I'll delete my answer if\
    \ that is the case.\n<|/ c |>\n<| a dscore=0 |>\n<code>\ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1s7ay7b8.py\"\
    , line 17\n    This doesn't answer the question, which is about how to round the\
    \ average, not how to round the numbers.\n              ^\nSyntaxError: unterminated\
    \ string literal (detected at line 17)\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return -1\n    else:\n        return bin(round(n/m\
    \ + 0.5))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgak_r9uf.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgak_r9uf.py\"\
    , line 30, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgak_r9uf.py\"\
    , line 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return -1\n    else:\n        return int(n + (m //\
    \ 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert\
    \ candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprshahbn9.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprshahbn9.py\"\
    , line 30, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprshahbn9.py\"\
    , line 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return -1\n    else:\n        return int(n + (m //\
    \ 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert\
    \ candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqlaohq28.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqlaohq28.py\"\
    , line 30, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqlaohq28.py\"\
    , line 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return -1\n    avg = n + (m - n) / 2\n    binary =\
    \ bin(avg)[2:]\n    binary = binary.zfill(8)\n    return int(binary)\n\ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7ppj_sy2.py\"\
    , line 34, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7ppj_sy2.py\"\
    , line 32, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7ppj_sy2.py\"\
    , line 18, in check\n    assert candidate(1, 5) == '0b11'\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7ppj_sy2.py\"\
    , line 13, in rounded_avg\n    binary = bin(avg)[2:]\nTypeError: 'float' object\
    \ cannot be interpreted as an integer\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return -1\n    \n    avg = n + (m // 2)\n    binary\
    \ = bin(avg)[2:]\n    \n    if int(binary[0]) == 1:\n        return -1\n    else:\n\
    \        return int(binary)\n\ndef check(candidate):\n    assert candidate(1,\
    \ 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964,\
    \ 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n \
    \   assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546)\
    \ == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert\
    \ candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n\
    \    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert\
    \ candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpju825bbc.py\"\
    , line 38, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpju825bbc.py\"\
    , line 36, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpju825bbc.py\"\
    , line 22, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return -1\n    \n    avg = n + (m // 2)\n    \n  \
    \  if avg >= n:\n        avg = avg - n\n    \n    return avg\n\ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1h_em132.py\"\
    , line 37, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1h_em132.py\"\
    , line 35, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1h_em132.py\"\
    , line 21, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return -1\n    else:\n        return int(round((n\
    \ + m) / 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqnn5va32.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqnn5va32.py\"\
    , line 30, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqnn5va32.py\"\
    , line 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return -1\n    else:\n        return int(n + (m -\
    \ n) // 2)\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n  \
    \  assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppt0dol8v.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppt0dol8v.py\"\
    , line 30, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppt0dol8v.py\"\
    , line 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return -1\n    avg = n + (m // 2)\n    binary = bin(avg)[2:]\n\
    \    binary = binary.zfill(m)\n    return int(binary)\n\ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0l5_31pn.py\"\
    , line 34, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0l5_31pn.py\"\
    , line 32, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0l5_31pn.py\"\
    , line 18, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return -1\n    else:\n        return bin(n + m - 1).count('1')\
    \ / 2.0\n\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n   \
    \ assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx7wbihr6.py\"\
    , line 33, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx7wbihr6.py\"\
    , line 31, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx7wbihr6.py\"\
    , line 17, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    avg = n + (m // 2)\n    binary = bin(avg)[2:]\n\
    \    binary = binary.zfill(m)\n    return int(binary)\n\ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp88sfbd2a.py\"\
    , line 34, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp88sfbd2a.py\"\
    , line 32, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp88sfbd2a.py\"\
    , line 18, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return -1\n    else:\n        return int(n + (m //\
    \ 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert\
    \ candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp475nyybm.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp475nyybm.py\"\
    , line 30, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp475nyybm.py\"\
    , line 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n <= m:\n        return -1\n    else:\n        return bin(n + (m -\
    \ n) // 2)[2:].zfill(n)\n</code>\n<|/ a dscore=0 |>\n<| a tags=python,python-3.x\
    \ |>\n<code>\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n  \
    \  assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqb4m2ne0.py\"\
    , line 16\n    <| a tags=python,python-3.x |>\n                             ^\n\
    SyntaxError: invalid decimal literal\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return -1\n    else:\n        return int(n + (m //\
    \ 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert\
    \ candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpue1p9fph.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpue1p9fph.py\"\
    , line 30, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpue1p9fph.py\"\
    , line 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n <= m:\n        return -1\n    else:\n        return bin(n+m//2)[2:].rjust(m,\
    \ '0')\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert\
    \ candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3j1o8qk7.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3j1o8qk7.py\"\
    , line 30, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3j1o8qk7.py\"\
    , line 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return -1\n    else:\n        return bin(n+m).replace('0b',\
    \ '')\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert\
    \ candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa5rjp_vy.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa5rjp_vy.py\"\
    , line 30, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa5rjp_vy.py\"\
    , line 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return -1\n    else:\n        return int(round((n+m)/2))\n\
    \ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7,\
    \ 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert\
    \ candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n\
    \    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496)\
    \ == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert\
    \ candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert\
    \ candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n\
    \    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbe1sc64g.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbe1sc64g.py\"\
    , line 30, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbe1sc64g.py\"\
    , line 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return \"-1\"\n    else:\n        return str(int(n\
    \ + (m - n) / 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp25bzeo2g.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp25bzeo2g.py\"\
    , line 30, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp25bzeo2g.py\"\
    , line 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return -1\n    \n    avg = n + (m // 2)\n    binary\
    \ = bin(avg)[2:]\n    \n    return int(binary)\n\ndef check(candidate):\n    assert\
    \ candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert\
    \ candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n\
    \    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546)\
    \ == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert\
    \ candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n\
    \    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert\
    \ candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp77jox2ib.py\"\
    , line 35, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp77jox2ib.py\"\
    , line 33, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp77jox2ib.py\"\
    , line 19, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return -1\n    else:\n        return int(n + (m -\
    \ n) // 2)\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n  \
    \  assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmed4erui.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmed4erui.py\"\
    , line 30, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmed4erui.py\"\
    , line 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return -1\n    \n    avg = n + (m // 2)\n    binary\
    \ = bin(avg)[2:]\n    \n    if int(binary[0]) == 1:\n        return -1\n    else:\n\
    \        return int(binary)\n    \n    \ndef check(candidate):\n    assert candidate(1,\
    \ 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964,\
    \ 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n \
    \   assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546)\
    \ == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert\
    \ candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n\
    \    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert\
    \ candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp52gf56dn.py\"\
    , line 39, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp52gf56dn.py\"\
    , line 37, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp52gf56dn.py\"\
    , line 23, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return -1\n    else:\n        return int(n + (m //\
    \ 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert\
    \ candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz06oc4j5.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz06oc4j5.py\"\
    , line 30, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz06oc4j5.py\"\
    , line 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return -1\n    else:\n        return int(n + (m //\
    \ 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert\
    \ candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2rlfavxz.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2rlfavxz.py\"\
    , line 30, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2rlfavxz.py\"\
    , line 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return -1\n    else:\n        return int(round((n\
    \ + m) / 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8sed4r8h.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8sed4r8h.py\"\
    , line 30, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8sed4r8h.py\"\
    , line 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n < m:\n        return -1\n    \n    avg = n + (m - n) / 2\n    \n\
    \    binary = bin(avg)[2:]\n    \n    if binary.startswith('0'):\n        binary\
    \ = binary[1:]\n    \n    return int(binary)\n\ndef check(candidate):\n    assert\
    \ candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert\
    \ candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n\
    \    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546)\
    \ == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert\
    \ candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n\
    \    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert\
    \ candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp30m_s4r_.py\"\
    , line 39, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp30m_s4r_.py\"\
    , line 37, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp30m_s4r_.py\"\
    , line 23, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return -1\n    else:\n        return int(n + (m //\
    \ 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert\
    \ candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpk_8gskqs.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpk_8gskqs.py\"\
    , line 30, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpk_8gskqs.py\"\
    , line 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return -1\n    else:\n        return int(n + (m -\
    \ n) // 2)\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n  \
    \  assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnc7ko6k6.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnc7ko6k6.py\"\
    , line 30, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnc7ko6k6.py\"\
    , line 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n < m:\n        return -1\n    \n    avg = n + (m // 2)\n    \n   \
    \ if avg == n:\n        return -1\n    \n    if avg > n:\n        return -1\n\
    \    \n    return avg\n\ndef check(candidate):\n    assert candidate(1, 5) ==\
    \ '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977)\
    \ == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert\
    \ candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n\
    \    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902)\
    \ == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert\
    \ candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5,\
    \ 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp05t602kr.py\"\
    , line 40, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp05t602kr.py\"\
    , line 38, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp05t602kr.py\"\
    , line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return -1\n    else:\n        return bin(n + m - 1).count('1')\
    \ / 2.0\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert\
    \ candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc3vtm8r8.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc3vtm8r8.py\"\
    , line 30, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc3vtm8r8.py\"\
    , line 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n <= m:\n        return -1\n    else:\n        avg = n + (m - n) /\
    \ 2\n        binary = bin(avg)[2:]\n        return int(binary)\n\ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpihw5frrd.py\"\
    , line 34, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpihw5frrd.py\"\
    , line 32, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpihw5frrd.py\"\
    , line 18, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return -1\n    else:\n        return int(n + (m //\
    \ 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert\
    \ candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwwjawkw2.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwwjawkw2.py\"\
    , line 30, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwwjawkw2.py\"\
    , line 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return -1\n    else:\n        return int(n + (m //\
    \ 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert\
    \ candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl4mhucey.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl4mhucey.py\"\
    , line 30, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl4mhucey.py\"\
    , line 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return -1\n    else:\n        avg = n + (m // 2)\n\
    \        binary = bin(avg)[2:]\n        binary = binary.zfill(m)\n        return\
    \ int(binary)\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6c6lv4e8.py\"\
    , line 35, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6c6lv4e8.py\"\
    , line 33, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6c6lv4e8.py\"\
    , line 19, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return \"-1\"\n    else:\n        return str(int(round((n\
    \ + m) / 2)) + 1)\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu4j0w5o0.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu4j0w5o0.py\"\
    , line 30, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu4j0w5o0.py\"\
    , line 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return -1\n    else:\n        return int(n + (m -\
    \ n) // 2)\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n  \
    \  assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzt_r73zm.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzt_r73zm.py\"\
    , line 30, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzt_r73zm.py\"\
    , line 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return -1\n    else:\n        return int(n + (m //\
    \ 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert\
    \ candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpplwrt1kh.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpplwrt1kh.py\"\
    , line 30, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpplwrt1kh.py\"\
    , line 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return \"-1\"\n    else:\n        return str(int(round((n\
    \ + m) / 2, 0)))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplk4ju4g9.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplk4ju4g9.py\"\
    , line 30, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplk4ju4g9.py\"\
    , line 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return -1\n    \n    avg = n + (m // 2)\n    \n  \
    \  if avg == n:\n        return str(n)\n    elif avg == m:\n        return str(m)\n\
    \    else:\n        return str(rounded_avg(avg, m))\n\ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa7mgzjcv.py\"\
    , line 39, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa7mgzjcv.py\"\
    , line 37, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa7mgzjcv.py\"\
    , line 23, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n <= m:\n        return -1\n    else:\n        return int(round((n\
    \ + m) / 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8ygevut8.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8ygevut8.py\"\
    , line 30, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8ygevut8.py\"\
    , line 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return -1\n    else:\n        return bin(n + m - 1).count('1')\
    \ / 2.0\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert\
    \ candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp26bv933c.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp26bv933c.py\"\
    , line 30, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp26bv933c.py\"\
    , line 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return -1\n    else:\n        return int(round(n +\
    \ (m - n) / 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph47x3yjb.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph47x3yjb.py\"\
    , line 30, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph47x3yjb.py\"\
    , line 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return -1\n    else:\n        return int(n + (m //\
    \ 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert\
    \ candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcg57jyj8.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcg57jyj8.py\"\
    , line 30, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcg57jyj8.py\"\
    , line 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n <= m:\n        return -1\n    else:\n        return int(n + (m //\
    \ 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert\
    \ candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqkcj29hu.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqkcj29hu.py\"\
    , line 30, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqkcj29hu.py\"\
    , line 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return -1\n    else:\n        avg = n + (m // 2)\n\
    \        binary = bin(avg)[2:]\n        return int(binary)\n\ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgr5uhdmo.py\"\
    , line 34, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgr5uhdmo.py\"\
    , line 32, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgr5uhdmo.py\"\
    , line 18, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return -1\n    else:\n        return int(round((n\
    \ + m) / 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp11_ucrbm.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp11_ucrbm.py\"\
    , line 30, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp11_ucrbm.py\"\
    , line 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return -1\n    else:\n        return int(n + (m //\
    \ 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert\
    \ candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsuum9suk.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsuum9suk.py\"\
    , line 30, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsuum9suk.py\"\
    , line 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return -1\n    else:\n        return int(n + (m //\
    \ 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert\
    \ candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpaneoyj58.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpaneoyj58.py\"\
    , line 30, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpaneoyj58.py\"\
    , line 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return -1\n    else:\n        return int(n + (m //\
    \ 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert\
    \ candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpiusnak2c.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpiusnak2c.py\"\
    , line 30, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpiusnak2c.py\"\
    , line 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return -1\n    else:\n        return int(n + (m //\
    \ 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert\
    \ candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp35ji_w82.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp35ji_w82.py\"\
    , line 30, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp35ji_w82.py\"\
    , line 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return -1\n    else:\n        return bin(n + m - 1).count(\"\
    1\") / 2.0\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n  \
    \  assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp406ioj3_.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp406ioj3_.py\"\
    , line 30, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp406ioj3_.py\"\
    , line 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n < m:\n        return -1\n    avg = n + (m // 2)\n    binary = bin(avg)[2:]\n\
    \    binary = binary.zfill(m)\n    return int(binary)\n\ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpykv9417e.py\"\
    , line 34, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpykv9417e.py\"\
    , line 32, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpykv9417e.py\"\
    , line 18, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return -1\n    else:\n        return bin(n + (m -\
    \ n) // 2)[2:].zfill(m)\n\ndef check(candidate):\n    assert candidate(1, 5) ==\
    \ '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977)\
    \ == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert\
    \ candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n\
    \    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902)\
    \ == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert\
    \ candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5,\
    \ 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2sok47hf.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2sok47hf.py\"\
    , line 30, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2sok47hf.py\"\
    , line 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return \"-1\"\n    else:\n        return str(int(n\
    \ + (m - n) // 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2vbi9giz.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2vbi9giz.py\"\
    , line 30, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2vbi9giz.py\"\
    , line 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return -1\n    else:\n        avg = n + (m - n) /\
    \ 2\n        return int(round(avg))\n\ndef check(candidate):\n    assert candidate(1,\
    \ 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964,\
    \ 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n \
    \   assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546)\
    \ == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert\
    \ candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n\
    \    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert\
    \ candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqpuv8evc.py\"\
    , line 33, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqpuv8evc.py\"\
    , line 31, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqpuv8evc.py\"\
    , line 17, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return -1\n    else:\n        return int(n + (m //\
    \ 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert\
    \ candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4cgdyop1.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4cgdyop1.py\"\
    , line 30, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4cgdyop1.py\"\
    , line 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return -1\n    else:\n        return int(n + (m //\
    \ 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert\
    \ candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzg94f4j2.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzg94f4j2.py\"\
    , line 30, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzg94f4j2.py\"\
    , line 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return -1\n    else:\n        return bin(n + m).count(\"\
    1\") / 2.0\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n  \
    \  assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt9mgue_t.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt9mgue_t.py\"\
    , line 30, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt9mgue_t.py\"\
    , line 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return \"-1\"\n    else:\n        avg = round((n+m)/2,\
    \ 0)\n        return str(bin(avg)[2:])\n\ndef check(candidate):\n    assert candidate(1,\
    \ 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964,\
    \ 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n \
    \   assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546)\
    \ == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert\
    \ candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n\
    \    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert\
    \ candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbu2dkzh8.py\"\
    , line 33, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbu2dkzh8.py\"\
    , line 31, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbu2dkzh8.py\"\
    , line 17, in check\n    assert candidate(1, 5) == '0b11'\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbu2dkzh8.py\"\
    , line 14, in rounded_avg\n    return str(bin(avg)[2:])\nTypeError: 'float' object\
    \ cannot be interpreted as an integer\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return \"-1\"\n    else:\n        return str(int(n\
    \ + (m - n) // 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv9in9d0t.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv9in9d0t.py\"\
    , line 30, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv9in9d0t.py\"\
    , line 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return -1\n    else:\n        return int(n + (m //\
    \ 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert\
    \ candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpeay3vxqj.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpeay3vxqj.py\"\
    , line 30, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpeay3vxqj.py\"\
    , line 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return -1\n    else:\n        return int(n + (m //\
    \ 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert\
    \ candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplzrm6wov.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplzrm6wov.py\"\
    , line 30, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplzrm6wov.py\"\
    , line 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return -1\n    else:\n        avg = n + (m - n) //\
    \ 2\n        return bin(avg)[2:]\n\ndef check(candidate):\n    assert candidate(1,\
    \ 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964,\
    \ 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n \
    \   assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546)\
    \ == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert\
    \ candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n\
    \    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert\
    \ candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfp9y4dh6.py\"\
    , line 33, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfp9y4dh6.py\"\
    , line 31, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfp9y4dh6.py\"\
    , line 17, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    \n    avg = n + (m // 2)\n    \n   \
    \ if avg < n:\n        avg = avg + 1\n    \n    return avg\n\ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp75p5y345.py\"\
    , line 37, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp75p5y345.py\"\
    , line 35, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp75p5y345.py\"\
    , line 21, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return -1\n    else:\n        return int(n + (m //\
    \ 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert\
    \ candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnahewgnr.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnahewgnr.py\"\
    , line 30, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnahewgnr.py\"\
    , line 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n < m:\n        return -1\n    avg = n + (m // 2)\n    binary = bin(avg)[2:]\n\
    \    binary = binary.zfill(m)\n    return int(binary, 2)\n\ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo983culh.py\"\
    , line 34, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo983culh.py\"\
    , line 32, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo983culh.py\"\
    , line 18, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return -1\n    else:\n        return int(n + (m //\
    \ 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert\
    \ candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy49zeykp.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy49zeykp.py\"\
    , line 30, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy49zeykp.py\"\
    , line 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n <= m:\n        return -1\n    else:\n        return bin(n+m//2)[2:].rjust(n+m//2,'0')\n\
    \ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7,\
    \ 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert\
    \ candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n\
    \    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496)\
    \ == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert\
    \ candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert\
    \ candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n\
    \    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxbjwdk37.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxbjwdk37.py\"\
    , line 30, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxbjwdk37.py\"\
    , line 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return -1\n    else:\n        return int(n + (m //\
    \ 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert\
    \ candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm6yitf9e.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm6yitf9e.py\"\
    , line 30, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm6yitf9e.py\"\
    , line 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return -1\n    else:\n        return bin(n+m).replace('0b',\
    \ '')\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert\
    \ candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcazk60wn.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcazk60wn.py\"\
    , line 30, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcazk60wn.py\"\
    , line 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return -1\n    else:\n        return int(round((n\
    \ + m) / 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyka7le19.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyka7le19.py\"\
    , line 30, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyka7le19.py\"\
    , line 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return -1\n    else:\n        return bin(n + (m -\
    \ n) // 2)[2:].zfill(n)\n\ndef check(candidate):\n    assert candidate(1, 5) ==\
    \ '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977)\
    \ == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert\
    \ candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n\
    \    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902)\
    \ == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert\
    \ candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5,\
    \ 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcp6zw8zi.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcp6zw8zi.py\"\
    , line 30, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcp6zw8zi.py\"\
    , line 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return -1\n    else:\n        return int(n + (m //\
    \ 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert\
    \ candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2izsw_go.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2izsw_go.py\"\
    , line 30, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2izsw_go.py\"\
    , line 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return -1\n    else:\n        return str(bin(n + (m\
    \ - n)))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvs4lkj6c.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvs4lkj6c.py\"\
    , line 30, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvs4lkj6c.py\"\
    , line 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return \"-1\"\n    else:\n        return str(int(n\
    \ + (m - n) / 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnkzq8ynj.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnkzq8ynj.py\"\
    , line 30, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnkzq8ynj.py\"\
    , line 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return -1\n    else:\n        return int(n + (m //\
    \ 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert\
    \ candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkd0df0d1.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkd0df0d1.py\"\
    , line 30, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkd0df0d1.py\"\
    , line 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    \n    avg = n + (m // 2)\n    \n   \
    \ if avg < n:\n        avg = avg + 1\n    \n    return str(bin(avg)[2:])\n   \
    \ \n    \ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert\
    \ candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg1ro7y99.py\"\
    , line 38, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg1ro7y99.py\"\
    , line 36, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg1ro7y99.py\"\
    , line 22, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return -1\n    else:\n        return int(n + (m //\
    \ 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert\
    \ candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprorkq6w_.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprorkq6w_.py\"\
    , line 30, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprorkq6w_.py\"\
    , line 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return -1\n    else:\n        return int(n + (m //\
    \ 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert\
    \ candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc4rqh474.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc4rqh474.py\"\
    , line 30, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc4rqh474.py\"\
    , line 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return -1\n    \n    avg = n + (m - n) / 2\n    \n\
    \    return str(bin(avg)[2:])\n\ndef check(candidate):\n    assert candidate(1,\
    \ 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964,\
    \ 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n \
    \   assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546)\
    \ == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert\
    \ candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n\
    \    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert\
    \ candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpht8sdbue.py\"\
    , line 34, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpht8sdbue.py\"\
    , line 32, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpht8sdbue.py\"\
    , line 18, in check\n    assert candidate(1, 5) == '0b11'\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpht8sdbue.py\"\
    , line 15, in rounded_avg\n    return str(bin(avg)[2:])\nTypeError: 'float' object\
    \ cannot be interpreted as an integer\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return -1\n    else:\n        return int(n + (m //\
    \ 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert\
    \ candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm7h7bwgr.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm7h7bwgr.py\"\
    , line 30, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm7h7bwgr.py\"\
    , line 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return -1\n    else:\n        return int(round((n+m)/2))\n\
    \ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7,\
    \ 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert\
    \ candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n\
    \    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496)\
    \ == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert\
    \ candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert\
    \ candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n\
    \    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyas0zm8v.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyas0zm8v.py\"\
    , line 30, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyas0zm8v.py\"\
    , line 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return -1\n    else:\n        return int(n + (m //\
    \ 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert\
    \ candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd2ka8z34.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd2ka8z34.py\"\
    , line 30, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd2ka8z34.py\"\
    , line 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return \"-1\"\n    else:\n        return str(int(n\
    \ + (m // 2)))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1d0rmylx.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1d0rmylx.py\"\
    , line 30, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1d0rmylx.py\"\
    , line 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return -1\n    else:\n        return int(n + (m -\
    \ n) // 2)\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n  \
    \  assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_mlcitr7.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_mlcitr7.py\"\
    , line 30, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_mlcitr7.py\"\
    , line 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n < m:\n        return -1\n    else:\n        return bin(n + m - 1).count('1')\
    \ / 2.0\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert\
    \ candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpam562nse.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpam562nse.py\"\
    , line 30, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpam562nse.py\"\
    , line 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return -1\n    else:\n        return int(n + (m //\
    \ 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert\
    \ candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbd_965_k.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbd_965_k.py\"\
    , line 30, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbd_965_k.py\"\
    , line 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return -1\n    else:\n        return int(n + (m-1)\
    \ / 2)\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert\
    \ candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe1kbupq8.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe1kbupq8.py\"\
    , line 30, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe1kbupq8.py\"\
    , line 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n <= m:\n        return -1\n    else:\n        return int(round((n\
    \ + m) / 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp73uzl2st.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp73uzl2st.py\"\
    , line 30, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp73uzl2st.py\"\
    , line 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return -1\n    avg = n + (m // 2)\n    binary = bin(avg)[2:]\n\
    \    binary = binary.zfill(m)\n    return int(binary, 2)\n\ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuwmprxn1.py\"\
    , line 34, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuwmprxn1.py\"\
    , line 32, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuwmprxn1.py\"\
    , line 18, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return -1\n    else:\n        return int(n + (m-1)\
    \ / 2)\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert\
    \ candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwl158ha5.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwl158ha5.py\"\
    , line 30, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwl158ha5.py\"\
    , line 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return -1\n    else:\n        return int(n + (m //\
    \ 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert\
    \ candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8_wq7csr.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8_wq7csr.py\"\
    , line 30, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8_wq7csr.py\"\
    , line 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return -1\n    else:\n        return int(round((n\
    \ + m) / 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplh4pc2qh.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplh4pc2qh.py\"\
    , line 30, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplh4pc2qh.py\"\
    , line 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    \n    avg = n + (m-1) / 2\n    \n  \
    \  return bin(avg)[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) ==\
    \ '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977)\
    \ == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert\
    \ candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n\
    \    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902)\
    \ == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert\
    \ candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5,\
    \ 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmtn30vuj.py\"\
    , line 34, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmtn30vuj.py\"\
    , line 32, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmtn30vuj.py\"\
    , line 18, in check\n    assert candidate(1, 5) == '0b11'\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmtn30vuj.py\"\
    , line 15, in rounded_avg\n    return bin(avg)[2:]\nTypeError: 'float' object\
    \ cannot be interpreted as an integer\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return -1\n    avg = n + (m // 2)\n    binary = bin(avg)[2:]\n\
    \    binary = binary.zfill(m)\n    return int(binary)\n\ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8t69np0u.py\"\
    , line 34, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8t69np0u.py\"\
    , line 32, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8t69np0u.py\"\
    , line 18, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return \"-1\"\n    else:\n        return str(int(round((n\
    \ + m) / 2)) + 1)\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1m8iovye.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1m8iovye.py\"\
    , line 30, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1m8iovye.py\"\
    , line 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return -1\n    else:\n        return int(n + (m -\
    \ n) / 2)\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n   \
    \ assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpckrh60yy.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpckrh60yy.py\"\
    , line 30, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpckrh60yy.py\"\
    , line 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return -1\n    else:\n        return int(n + (m //\
    \ 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert\
    \ candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2j_1x4i8.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2j_1x4i8.py\"\
    , line 30, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2j_1x4i8.py\"\
    , line 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return -1\n    else:\n        avg = n + (m // 2)\n\
    \        binary = bin(avg)[2:]\n        return int(binary)\n\ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6lfpz1ce.py\"\
    , line 34, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6lfpz1ce.py\"\
    , line 32, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6lfpz1ce.py\"\
    , line 18, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return \"-1\"\n    else:\n        return str(int(n\
    \ + (m - n) / 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbtdfbc1t.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbtdfbc1t.py\"\
    , line 30, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbtdfbc1t.py\"\
    , line 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return -1\n    else:\n        return int(n + (m //\
    \ 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert\
    \ candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsdgv0buw.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsdgv0buw.py\"\
    , line 30, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsdgv0buw.py\"\
    , line 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return -1\n    else:\n        return int(n + (m //\
    \ 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert\
    \ candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw_vfge5g.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw_vfge5g.py\"\
    , line 30, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw_vfge5g.py\"\
    , line 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return -1\n    else:\n        return int(n + (m -\
    \ n) // 2)\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n  \
    \  assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp51bl_td9.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp51bl_td9.py\"\
    , line 30, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp51bl_td9.py\"\
    , line 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return -1\n    else:\n        return int(n + (m //\
    \ 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert\
    \ candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd_7vjxtw.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd_7vjxtw.py\"\
    , line 30, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd_7vjxtw.py\"\
    , line 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return -1\n    else:\n        return str(bin(n + (m\
    \ - n)))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9vimas_b.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9vimas_b.py\"\
    , line 30, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9vimas_b.py\"\
    , line 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return -1\n    else:\n        return int(n + (m //\
    \ 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert\
    \ candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprgcg_oux.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprgcg_oux.py\"\
    , line 30, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprgcg_oux.py\"\
    , line 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return -1\n    else:\n        return int(n + (m //\
    \ 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert\
    \ candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpidzk7a02.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpidzk7a02.py\"\
    , line 30, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpidzk7a02.py\"\
    , line 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return -1\n    else:\n        return int(round(n +\
    \ (m - n) / 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy55dcoof.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy55dcoof.py\"\
    , line 30, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy55dcoof.py\"\
    , line 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return -1\n    else:\n        return int(round((n\
    \ + m) / 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpngervr2l.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpngervr2l.py\"\
    , line 30, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpngervr2l.py\"\
    , line 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return -1\n    else:\n        return str(bin(round(n/m\
    \ + 0.5))[2:])\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1qf9x85k.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1qf9x85k.py\"\
    , line 30, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1qf9x85k.py\"\
    , line 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n < m:\n        return -1\n    avg = n + (m // 2)\n    binary = bin(avg)[2:]\n\
    \    binary = binary.zfill(len(binary) + 1)\n    return int(binary, 2)\n\ndef\
    \ check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7,\
    \ 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert\
    \ candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n\
    \    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496)\
    \ == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert\
    \ candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert\
    \ candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n\
    \    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpr_lve2fs.py\"\
    , line 34, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpr_lve2fs.py\"\
    , line 32, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpr_lve2fs.py\"\
    , line 18, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return -1\n    else:\n        return int(n + (m //\
    \ 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert\
    \ candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe0_ssiph.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe0_ssiph.py\"\
    , line 30, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe0_ssiph.py\"\
    , line 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n <= m:\n        return -1\n    else:\n        return int(round(n/m)*m)\
    \ + n\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert\
    \ candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpszk6lpw4.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpszk6lpw4.py\"\
    , line 30, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpszk6lpw4.py\"\
    , line 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return \"-1\"\n    else:\n        return str(int(round(n/m)*m))\n\
    \ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7,\
    \ 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert\
    \ candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n\
    \    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496)\
    \ == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert\
    \ candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert\
    \ candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n\
    \    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg_fcugg7.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg_fcugg7.py\"\
    , line 30, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg_fcugg7.py\"\
    , line 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return int(n + (m - n)\
    \ // 2)\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert\
    \ candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqer1l27a.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqer1l27a.py\"\
    , line 30, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqer1l27a.py\"\
    , line 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return -1\n    else:\n        return int(n + (m -\
    \ n) // 2)\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n  \
    \  assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbsqmfg14.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbsqmfg14.py\"\
    , line 30, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbsqmfg14.py\"\
    , line 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n <= m:\n        return -1\n    else:\n        return int(str(n)+str(m))\n\
    \ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7,\
    \ 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert\
    \ candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n\
    \    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496)\
    \ == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert\
    \ candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert\
    \ candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n\
    \    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg3l2y308.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg3l2y308.py\"\
    , line 30, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg3l2y308.py\"\
    , line 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return -1\n    else:\n        return str(int(n+m)/2)\n\
    \ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7,\
    \ 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert\
    \ candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n\
    \    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496)\
    \ == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert\
    \ candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert\
    \ candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n\
    \    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpapxljmw5.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpapxljmw5.py\"\
    , line 30, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpapxljmw5.py\"\
    , line 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n < m:\n        return -1\n    \n    avg = n + (m // 2)\n    \n   \
    \ if avg == n:\n        return -1\n    \n    return int(bin(avg)[2:])\n\ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpycoqh4d6.py\"\
    , line 37, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpycoqh4d6.py\"\
    , line 35, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpycoqh4d6.py\"\
    , line 21, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return -1\n    avg = n + (m - n) / 2\n    binary =\
    \ bin(avg)[2:]\n    binary = '0' * (len(binary) - len(bin(avg))) + binary\n  \
    \  return int(binary)\n\ndef check(candidate):\n    assert candidate(1, 5) ==\
    \ '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977)\
    \ == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert\
    \ candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n\
    \    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902)\
    \ == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert\
    \ candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5,\
    \ 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg6gxaid4.py\"\
    , line 34, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg6gxaid4.py\"\
    , line 32, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg6gxaid4.py\"\
    , line 18, in check\n    assert candidate(1, 5) == '0b11'\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg6gxaid4.py\"\
    , line 13, in rounded_avg\n    binary = bin(avg)[2:]\nTypeError: 'float' object\
    \ cannot be interpreted as an integer\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return -1\n    else:\n        return int(round((n\
    \ + m) / 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5_zt7z9g.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5_zt7z9g.py\"\
    , line 30, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5_zt7z9g.py\"\
    , line 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return -1\n    else:\n        return bin(n+m).replace('0b','')\n\
    \ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7,\
    \ 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert\
    \ candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n\
    \    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496)\
    \ == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert\
    \ candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert\
    \ candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n\
    \    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpssdyvotp.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpssdyvotp.py\"\
    , line 30, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpssdyvotp.py\"\
    , line 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n < m:\n        return -1\n    else:\n        return int(str(round(n/m))\
    \ + str(m/2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpav3i1ui5.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpav3i1ui5.py\"\
    , line 30, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpav3i1ui5.py\"\
    , line 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return -1\n    else:\n        return bin(n + m - 1).count(\"\
    1\") / 2.0\n\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9mjxh2o9.py\"\
    , line 33, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9mjxh2o9.py\"\
    , line 31, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9mjxh2o9.py\"\
    , line 17, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n < m:\n        return -1\n    else:\n        return bin(n + m - 1).count(\"\
    1\") / 2.0\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n  \
    \  assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplwh8dhoi.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplwh8dhoi.py\"\
    , line 30, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplwh8dhoi.py\"\
    , line 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return -1\n    else:\n        avg = n + (m // 2)\n\
    \        binary = bin(avg)[2:]\n        return int(binary)\n\ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_b1f3r39.py\"\
    , line 34, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_b1f3r39.py\"\
    , line 32, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_b1f3r39.py\"\
    , line 18, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return -1\n    else:\n        avg = n + (m - n) /\
    \ 2\n        return int(round(avg))\n\ndef check(candidate):\n    assert candidate(1,\
    \ 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964,\
    \ 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n \
    \   assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546)\
    \ == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert\
    \ candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n\
    \    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert\
    \ candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvhqxgepc.py\"\
    , line 33, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvhqxgepc.py\"\
    , line 31, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvhqxgepc.py\"\
    , line 17, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    \n    avg = n + (m // 2)\n    \n   \
    \ if avg == n:\n        return -1\n    \n    return avg\n\ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpscyxjhuc.py\"\
    , line 37, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpscyxjhuc.py\"\
    , line 35, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpscyxjhuc.py\"\
    , line 21, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return -1\n    else:\n        return str(bin(n + m\
    \ - 1).replace('0b', '').lstrip('0b'))\n\ndef check(candidate):\n    assert candidate(1,\
    \ 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964,\
    \ 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n \
    \   assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546)\
    \ == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert\
    \ candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n\
    \    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert\
    \ candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv1mswg47.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv1mswg47.py\"\
    , line 30, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv1mswg47.py\"\
    , line 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return -1\n    else:\n        return bin(n + (m -\
    \ n) // 2)[2:].zfill(m)\n</code>\n<|/ a dscore=0 |>\n<| a tags=python,python-3.x\
    \ |>\n<code>\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n  \
    \  assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7_gpiwfh.py\"\
    , line 16\n    <| a tags=python,python-3.x |>\n                             ^\n\
    SyntaxError: invalid decimal literal\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return -1\n    else:\n        return bin(n+m//2)[2:].zfill(m)\n\
    \ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7,\
    \ 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert\
    \ candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n\
    \    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496)\
    \ == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert\
    \ candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert\
    \ candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n\
    \    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp3t0nyml.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp3t0nyml.py\"\
    , line 30, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp3t0nyml.py\"\
    , line 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n <= m:\n        return -1\n    else:\n        return bin(n + (m -\
    \ n) // 2)[2:].zfill(n)\n\ndef check(candidate):\n    assert candidate(1, 5) ==\
    \ '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977)\
    \ == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert\
    \ candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n\
    \    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902)\
    \ == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert\
    \ candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5,\
    \ 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphkwiya16.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphkwiya16.py\"\
    , line 30, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphkwiya16.py\"\
    , line 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return -1\n    \n    avg = n + (m - n) // 2\n    \n\
    \    return bin(avg)[2:]\n\ndef check(candidate):\n    assert candidate(1, 5)\
    \ == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964,\
    \ 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n \
    \   assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546)\
    \ == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert\
    \ candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n\
    \    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert\
    \ candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxj3ztnc4.py\"\
    , line 34, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxj3ztnc4.py\"\
    , line 32, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxj3ztnc4.py\"\
    , line 18, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return -1\n    else:\n        return str(bin(n + m\
    \ - 1)[2:])\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n \
    \   assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqu68n_l1.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqu68n_l1.py\"\
    , line 30, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqu68n_l1.py\"\
    , line 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return -1\n    else:\n        return int(n + (m //\
    \ 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert\
    \ candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppqy1a5i2.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppqy1a5i2.py\"\
    , line 30, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppqy1a5i2.py\"\
    , line 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return -1\n    else:\n        return int(n + (m -\
    \ n) // 2)\n</code>\n<|/ a tags=python,python-3.x |>\n<| a dscore=0 |>\n<code>\n\
    def check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7,\
    \ 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert\
    \ candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n\
    \    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496)\
    \ == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert\
    \ candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert\
    \ candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n\
    \    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4nsxv_wo.py\"\
    , line 15\n    <|/ a tags=python,python-3.x |>\n                             \
    \ ^\nSyntaxError: invalid decimal literal\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return -1\n    else:\n        return int(n + (m //\
    \ 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert\
    \ candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp74d9ungx.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp74d9ungx.py\"\
    , line 30, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp74d9ungx.py\"\
    , line 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return -1\n    avg = n + (m // 2)\n    binary = bin(avg)[2:]\n\
    \    binary = binary.zfill(m)\n    return int(binary)\n\ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1gw3pf50.py\"\
    , line 34, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1gw3pf50.py\"\
    , line 32, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1gw3pf50.py\"\
    , line 18, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return -1\n    else:\n        return int(round((n\
    \ + m) / 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn9uigdmc.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn9uigdmc.py\"\
    , line 30, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn9uigdmc.py\"\
    , line 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return -1\n    avg = n + (m // 2)\n    binary = bin(avg)[2:]\n\
    \    binary = binary.zfill(8)\n    binary = int(binary, 2)\n    return binary\n\
    \ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7,\
    \ 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert\
    \ candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n\
    \    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496)\
    \ == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert\
    \ candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert\
    \ candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n\
    \    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp15h9s_82.py\"\
    , line 35, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp15h9s_82.py\"\
    , line 33, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp15h9s_82.py\"\
    , line 19, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return -1\n    else:\n        return int(n + (m -\
    \ n) // 2)\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n  \
    \  assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv_phfz3x.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv_phfz3x.py\"\
    , line 30, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv_phfz3x.py\"\
    , line 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    \n    avg = n + (m - n) / 2\n    \n\
    \    return bin(avg)[2:].zfill(8)\n\ndef check(candidate):\n    assert candidate(1,\
    \ 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964,\
    \ 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n \
    \   assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546)\
    \ == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert\
    \ candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n\
    \    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert\
    \ candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqribxyya.py\"\
    , line 34, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqribxyya.py\"\
    , line 32, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqribxyya.py\"\
    , line 18, in check\n    assert candidate(1, 5) == '0b11'\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqribxyya.py\"\
    , line 15, in rounded_avg\n    return bin(avg)[2:].zfill(8)\nTypeError: 'float'\
    \ object cannot be interpreted as an integer\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return -1\n    else:\n        return str(bin(n + (m\
    \ - n)))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy378fgdg.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy378fgdg.py\"\
    , line 30, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy378fgdg.py\"\
    , line 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return -1\n    else:\n        return int(round(n +\
    \ (m - n) / 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp14m1chbh.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp14m1chbh.py\"\
    , line 30, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp14m1chbh.py\"\
    , line 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return -1\n    else:\n        return int(round(n/m)*m)\n\
    \ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7,\
    \ 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert\
    \ candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n\
    \    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496)\
    \ == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert\
    \ candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert\
    \ candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n\
    \    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_daza615.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_daza615.py\"\
    , line 30, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_daza615.py\"\
    , line 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return -1\n    else:\n        return int(n + (m //\
    \ 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert\
    \ candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplcaneuds.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplcaneuds.py\"\
    , line 30, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplcaneuds.py\"\
    , line 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return -1\n    else:\n        return bin(n + m - 1).count(\"\
    1\") / 2.0\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n  \
    \  assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp50uqpoyt.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp50uqpoyt.py\"\
    , line 30, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp50uqpoyt.py\"\
    , line 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return -1\n    else:\n        return str(bin(round(n/m\
    \ + 0.5))[2:])\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa21wh53_.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa21wh53_.py\"\
    , line 30, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa21wh53_.py\"\
    , line 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return -1\n    else:\n        return int(round((n\
    \ + m) / 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_i8xzhds.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_i8xzhds.py\"\
    , line 30, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_i8xzhds.py\"\
    , line 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return -1\n    avg = n + (m // 2)\n    binary = bin(avg)[2:]\n\
    \    binary = binary.zfill(m)\n    return int(binary, 2)\n\ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3oe45k13.py\"\
    , line 34, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3oe45k13.py\"\
    , line 32, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3oe45k13.py\"\
    , line 18, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return -1\n    avg = n + (m - n) / 2\n    return bin(avg)[2:].zfill(8)\n\
    \ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7,\
    \ 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert\
    \ candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n\
    \    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496)\
    \ == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert\
    \ candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert\
    \ candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n\
    \    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz941s2cq.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz941s2cq.py\"\
    , line 30, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz941s2cq.py\"\
    , line 16, in check\n    assert candidate(1, 5) == '0b11'\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz941s2cq.py\"\
    , line 13, in rounded_avg\n    return bin(avg)[2:].zfill(8)\nTypeError: 'float'\
    \ object cannot be interpreted as an integer\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n < m:\n        return -1\n    \n    avg = n + (m // 2)\n    \n   \
    \ if avg > n:\n        return -1\n    \n    return avg\n\ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptg0wlvvf.py\"\
    , line 37, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptg0wlvvf.py\"\
    , line 35, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptg0wlvvf.py\"\
    , line 21, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return -1\n    else:\n        return int(round((n\
    \ + m) / 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp35u38f9l.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp35u38f9l.py\"\
    , line 30, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp35u38f9l.py\"\
    , line 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return -1\n    \n    avg = n + (m // 2)\n    \n  \
    \  if avg >= n:\n        return -1\n    \n    return avg\n\ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjn6tqfm6.py\"\
    , line 37, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjn6tqfm6.py\"\
    , line 35, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjn6tqfm6.py\"\
    , line 21, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return -1\n    else:\n        return int(n + (m //\
    \ 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert\
    \ candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5veepmfn.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5veepmfn.py\"\
    , line 30, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5veepmfn.py\"\
    , line 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return -1\n    else:\n        return int(n + (m //\
    \ 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert\
    \ candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3rg16_5_.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3rg16_5_.py\"\
    , line 30, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3rg16_5_.py\"\
    , line 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return -1\n    else:\n        return int(n + (m //\
    \ 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert\
    \ candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpig0a9n_e.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpig0a9n_e.py\"\
    , line 30, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpig0a9n_e.py\"\
    , line 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return -1\n    else:\n        return int(round((n\
    \ + m) / 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6r4csg77.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6r4csg77.py\"\
    , line 30, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6r4csg77.py\"\
    , line 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n <= m:\n        return -1\n    else:\n        return bin(n + (m -\
    \ n) // 2)[2:].zfill(n)\n\ndef check(candidate):\n    assert candidate(1, 5) ==\
    \ '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977)\
    \ == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert\
    \ candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n\
    \    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902)\
    \ == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert\
    \ candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5,\
    \ 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_a8quf8b.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_a8quf8b.py\"\
    , line 30, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_a8quf8b.py\"\
    , line 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return -1\n    else:\n        return int(round((n\
    \ + m) / 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqaw27j0m.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqaw27j0m.py\"\
    , line 30, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqaw27j0m.py\"\
    , line 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return -1\n    else:\n        return int(n + (m //\
    \ 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert\
    \ candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt4_54f00.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt4_54f00.py\"\
    , line 30, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt4_54f00.py\"\
    , line 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return -1\n    avg = n + (m - n) // 2\n    binary\
    \ = bin(avg)[2:]\n    binary = binary.zfill(8)\n    return int(binary)\n\ndef\
    \ check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7,\
    \ 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert\
    \ candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n\
    \    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496)\
    \ == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert\
    \ candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert\
    \ candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n\
    \    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsmv6724u.py\"\
    , line 34, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsmv6724u.py\"\
    , line 32, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsmv6724u.py\"\
    , line 18, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return -1\n    else:\n        return int(n + (m-1)\
    \ / 2)\n    \ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n  \
    \  assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0m2v_vqm.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0m2v_vqm.py\"\
    , line 30, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0m2v_vqm.py\"\
    , line 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return -1\n    else:\n        return int(n + (m -\
    \ n) // 2)\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n  \
    \  assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjno11hha.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjno11hha.py\"\
    , line 30, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjno11hha.py\"\
    , line 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return -1\n    else:\n        return int(n + (m //\
    \ 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert\
    \ candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc3mczsde.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc3mczsde.py\"\
    , line 30, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc3mczsde.py\"\
    , line 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return -1\n    else:\n        return int(round((n\
    \ + m) / 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzue1_25d.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzue1_25d.py\"\
    , line 30, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzue1_25d.py\"\
    , line 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return -1\n    else:\n        return int(round(n/m)*m)\
    \ + int(round(n%m))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpstqqa4qh.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpstqqa4qh.py\"\
    , line 30, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpstqqa4qh.py\"\
    , line 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return -1\n    else:\n        return int(n + (m //\
    \ 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert\
    \ candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnylfwt_a.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnylfwt_a.py\"\
    , line 30, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnylfwt_a.py\"\
    , line 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return -1\n    else:\n        return int(n + (m-1)\
    \ / 2)\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert\
    \ candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2rb5hxg2.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2rb5hxg2.py\"\
    , line 30, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2rb5hxg2.py\"\
    , line 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return -1\n    else:\n        return int(n + (m //\
    \ 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert\
    \ candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps71uycxo.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps71uycxo.py\"\
    , line 30, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps71uycxo.py\"\
    , line 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return -1\n    else:\n        return int(round((n\
    \ + m) / 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptpv_qnx9.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptpv_qnx9.py\"\
    , line 30, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptpv_qnx9.py\"\
    , line 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return -1\n    \n    avg = n + (m // 2)\n    \n  \
    \  if avg > m:\n        return -1\n    \n    return avg\n\ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn2i1cjmi.py\"\
    , line 37, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn2i1cjmi.py\"\
    , line 35, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn2i1cjmi.py\"\
    , line 21, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return -1\n    \n    avg = n + (m // 2)\n    \n  \
    \  if avg == n:\n        return -1\n    \n    return int(bin(avg)[2:])\n\ndef\
    \ check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7,\
    \ 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert\
    \ candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n\
    \    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496)\
    \ == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert\
    \ candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert\
    \ candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n\
    \    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph886osgb.py\"\
    , line 37, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph886osgb.py\"\
    , line 35, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph886osgb.py\"\
    , line 21, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return -1\n    else:\n        avg = n + (m - n) /\
    \ 2\n        binary = bin(avg)[2:]\n        return int(binary)\n\ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd92ln912.py\"\
    , line 34, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd92ln912.py\"\
    , line 32, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd92ln912.py\"\
    , line 18, in check\n    assert candidate(1, 5) == '0b11'\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd92ln912.py\"\
    , line 14, in rounded_avg\n    binary = bin(avg)[2:]\nTypeError: 'float' object\
    \ cannot be interpreted as an integer\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return \"-1\"\n    else:\n        return str(bin(n\
    \ + (m - n)))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq6gwo3w9.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq6gwo3w9.py\"\
    , line 30, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq6gwo3w9.py\"\
    , line 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return -1\n    else:\n        return int(n + (m //\
    \ 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert\
    \ candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpizo8w6um.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpizo8w6um.py\"\
    , line 30, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpizo8w6um.py\"\
    , line 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return -1\n    else:\n        return int(round((n+m)/2))\n\
    \ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7,\
    \ 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert\
    \ candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n\
    \    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496)\
    \ == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert\
    \ candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert\
    \ candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n\
    \    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprd_zovl3.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprd_zovl3.py\"\
    , line 30, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprd_zovl3.py\"\
    , line 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n <= m:\n        return -1\n    else:\n        return int(round((n\
    \ + m) / 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxpv40nf0.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxpv40nf0.py\"\
    , line 30, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxpv40nf0.py\"\
    , line 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return -1\n    else:\n        return bin(n + m).replace('0b',\
    \ '')\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert\
    \ candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkyagfiai.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkyagfiai.py\"\
    , line 30, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkyagfiai.py\"\
    , line 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n <= m:\n        return -1\n    else:\n        return int(round((n\
    \ + m) / 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp447grkxu.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp447grkxu.py\"\
    , line 30, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp447grkxu.py\"\
    , line 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n <= m:\n        return -1\n    avg = n + (m // 2)\n    binary = bin(avg)[2:]\n\
    \    binary = binary.zfill(m)\n    return int(binary)\n\ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9bkk8irw.py\"\
    , line 34, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9bkk8irw.py\"\
    , line 32, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9bkk8irw.py\"\
    , line 18, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return -1\n    \n    avg = n + (m - n) / 2\n    \n\
    \    return int(round(avg))\n\ndef check(candidate):\n    assert candidate(1,\
    \ 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964,\
    \ 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n \
    \   assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546)\
    \ == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert\
    \ candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n\
    \    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert\
    \ candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_q3p07gy.py\"\
    , line 34, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_q3p07gy.py\"\
    , line 32, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_q3p07gy.py\"\
    , line 18, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return int(n + (m //\
    \ 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert\
    \ candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0h_hphl7.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0h_hphl7.py\"\
    , line 30, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0h_hphl7.py\"\
    , line 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n < m:\n        return -1\n    else:\n        return bin(n + m - 1).count('1')\
    \ / 2.0\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert\
    \ candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp53gg42ha.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp53gg42ha.py\"\
    , line 30, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp53gg42ha.py\"\
    , line 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return -1\n    else:\n        return int(n + (m //\
    \ 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert\
    \ candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp30ndm89g.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp30ndm89g.py\"\
    , line 30, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp30ndm89g.py\"\
    , line 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return -1\n    else:\n        return int(round(n +\
    \ (m - n) / 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw2r2zirh.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw2r2zirh.py\"\
    , line 30, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw2r2zirh.py\"\
    , line 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return -1\n    else:\n        return int(n + (m -\
    \ n) // 2)\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n  \
    \  assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph52g8imm.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph52g8imm.py\"\
    , line 30, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph52g8imm.py\"\
    , line 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return -1\n    else:\n        return int(n + (m //\
    \ 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert\
    \ candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpubnp8_ce.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpubnp8_ce.py\"\
    , line 30, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpubnp8_ce.py\"\
    , line 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return -1\n    else:\n        return int(n + (m -\
    \ n) // 2)\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n  \
    \  assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmple48kdwa.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmple48kdwa.py\"\
    , line 30, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmple48kdwa.py\"\
    , line 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return -1\n    else:\n        avg = round((n + m)\
    \ / 2)\n        return bin(avg)[2:]\n\ndef check(candidate):\n    assert candidate(1,\
    \ 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964,\
    \ 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n \
    \   assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546)\
    \ == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert\
    \ candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n\
    \    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert\
    \ candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp19x7i7wo.py\"\
    , line 33, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp19x7i7wo.py\"\
    , line 31, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp19x7i7wo.py\"\
    , line 17, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return -1\n    else:\n        return int(n + (m //\
    \ 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert\
    \ candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8vihm195.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8vihm195.py\"\
    , line 30, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8vihm195.py\"\
    , line 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return \"-1\"\n    else:\n        avg = n + (m //\
    \ 2)\n        binary = bin(avg)[2:]\n        decimal = decimal.Decimal(binary)\n\
    \        decimal = decimal.quantize(decimal.Decimal('1'), rounding=decimal.ROUND_HALF_UP)\n\
    \        return int(decimal)\n\ndef check(candidate):\n    assert candidate(1,\
    \ 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964,\
    \ 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n \
    \   assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546)\
    \ == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert\
    \ candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n\
    \    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert\
    \ candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbkpjxnnr.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbkpjxnnr.py\"\
    , line 34, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbkpjxnnr.py\"\
    , line 20, in check\n    assert candidate(1, 5) == '0b11'\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbkpjxnnr.py\"\
    , line 15, in rounded_avg\n    decimal = decimal.Decimal(binary)\nUnboundLocalError:\
    \ local variable 'decimal' referenced before assignment\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return -1\n    else:\n        return int(n + (m //\
    \ 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert\
    \ candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9simih4b.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9simih4b.py\"\
    , line 30, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9simih4b.py\"\
    , line 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return -1\n    else:\n        return int(n + (m-1)\
    \ / 2)\n</code>\n<|/ a tags=python,python-3.x |>\n<| c |>\nThe question was about\
    \ rounding up, not down.\n<|/ c |>\n<| c |>\nI see that now. Thanks for pointing\
    \ that out.\n<|/ c |>\n<| a dscore=0 |>\n<code>\ndef check(candidate):\n    assert\
    \ candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert\
    \ candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n\
    \    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546)\
    \ == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert\
    \ candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n\
    \    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert\
    \ candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc65bqkqa.py\"\
    , line 15\n    <|/ a tags=python,python-3.x |>\n                             \
    \ ^\nSyntaxError: invalid decimal literal\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return -1\n    else:\n        return bin(n + m - 1).count('1')\
    \ / 2.0\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert\
    \ candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_8uy4ert.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_8uy4ert.py\"\
    , line 30, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_8uy4ert.py\"\
    , line 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n >= m:\n        return -1\n    else:\n        return int(n + (m -\
    \ n) // 2)\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n  \
    \  assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm851at2h.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm851at2h.py\"\
    , line 30, in test_check\n    check(rounded_avg)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm851at2h.py\"\
    , line 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
