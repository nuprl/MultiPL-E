name: HumanEval_58_common
language: py
prompt: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) -> List[int]:\n\
  \    \"\"\"Return sorted unique common elements for two lists.\n        \n    \"\
  \"\"\n"
tests: "def check(candidate):\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5,\
  \ 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3,\
  \ 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n  \
  \  assert candidate([4, 3, 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\
  \ntest_check()\n"
completions: ["    return sorted(set(l1) & set(l2))\n", "    \n    common = []\n \
    \   \n    for el1 in l1:\n        for el2 in l2:\n            if el1 == el2:\n\
    \                common.append(el1)\n                break\n    \n    return sorted(common)\n",
  "    return list(set(l1) & set(l2))\n", "    \n    common = []\n    \n    for el\
    \ in l1:\n        if el in l2:\n            common.append(el)\n    \n    return\
    \ sorted(common)\n", "    \n    common = []\n    \n    for e in l1:\n        if\
    \ e in l2:\n            common.append(e)\n    \n    return common\n", "    return\
    \ sorted(list(set(l1) & set(l2)))\n", "    \n    common = []\n    \n    for el\
    \ in l1:\n        if el in l2:\n            common.append(el)\n    \n    return\
    \ sorted(common)\n", "    return sorted(list(set(l1) & set(l2)))\n", "    \n \
    \   common = []\n    \n    for e in l1:\n        if e in l2:\n            common.append(e)\n\
    \            \n    return sorted(common)\n    ", "    return sorted(list(set(l1)\
    \ & set(l2)))\n", "    \n    common = []\n    \n    for x in l1:\n        if x\
    \ in l2:\n            common.append(x)\n    \n    return common\n", "    \n  \
    \  common = []\n    \n    for el in l1:\n        if el in l2:\n            common.append(el)\n\
    \    \n    return common\n", "    return list(set(l1) & set(l2))\n", "    \n \
    \   common = []\n    \n    for e in l1:\n        if e in l2:\n            common.append(e)\n\
    \    \n    return common\n", "    \n    common = []\n    \n    for e in l1:\n\
    \        if e in l2:\n            common.append(e)\n    \n    return sorted(common)\n",
  "    \n    common = []\n    \n    for x in l1:\n        if x in l2:\n          \
    \  common.append(x)\n    \n    return common\n", "    \n    common = []\n    \n\
    \    for x in l1:\n        if x in l2:\n            common.append(x)\n       \
    \     \n    return sorted(common)\n", "    return sorted(list(set(l1) & set(l2)))\n",
  "    return sorted(list(set(l1) & set(l2)))\n", "    \n    common = []\n    \n \
    \   for el1 in l1:\n        for el2 in l2:\n            if el1 == el2:\n     \
    \           common.append(el1)\n                break\n    \n    return sorted(common)\n",
  "    \n    common = []\n    \n    for x in l1:\n        if x in l2:\n          \
    \  common.append(x)\n    \n    return common\n    ", "    \n    common = []\n\
    \    \n    for x in l1:\n        if x in l2:\n            common.append(x)\n \
    \           \n    return common\n", "    \n    common = []\n    \n    for el1\
    \ in l1:\n        for el2 in l2:\n            if el1 == el2:\n               \
    \ common.append(el1)\n                break\n    \n    return sorted(common)\n",
  "    return sorted(list(set(l1) & set(l2)))\n", "    return sorted(list(set(l1)\
    \ & set(l2)))\n", "    \n    common = []\n    \n    for el in l1:\n        if\
    \ el in l2:\n            common.append(el)\n    \n    return common\n", "    \n\
    \    common = []\n    \n    for x in l1:\n        if x in l2:\n            common.append(x)\n\
    \    \n    return common\n", "    \n    common = []\n    \n    for e in l1:\n\
    \        if e in l2:\n            common.append(e)\n            \n    return common\n",
  "    \n    common = []\n    \n    for el1 in l1:\n        for el2 in l2:\n     \
    \       if el1 == el2:\n                common.append(el1)\n                break\n\
    \    \n    return sorted(common)\n", "    return list(set(l1) & set(l2))\n", " \
    \   \n    common = []\n    \n    for x in l1:\n        if x in l2:\n         \
    \   common.append(x)\n            \n    return sorted(common)\n", "    return\
    \ sorted(list(set(l1) & set(l2)))\n", "    \n    common = []\n    \n    for x\
    \ in l1:\n        if x in l2:\n            common.append(x)\n            \n  \
    \  return sorted(common)\n", "    return sorted(set(l1) & set(l2))\n", "    \n\
    \    common = []\n    \n    for e in l1:\n        if e in l2:\n            common.append(e)\n\
    \    \n    return common\n", "    \n    common = []\n    \n    for x in l1:\n\
    \        if x in l2:\n            common.append(x)\n    \n    return common\n",
  "    return sorted(list(set(l1) & set(l2)))\n", "    \n    common = []\n    \n \
    \   for x in l1:\n        if x in l2:\n            common.append(x)\n        \
    \    \n    return sorted(common)\n", "    \n    common = []\n    \n    for e in\
    \ l1:\n        if e in l2:\n            common.append(e)\n    \n    return common\n",
  "    \n    common = []\n    \n    for x in l1:\n        if x in l2:\n          \
    \  common.append(x)\n            \n    return common\n", "    return sorted(set(l1)\
    \ & set(l2))\n", "    \n    common = []\n    \n    for x in l1:\n        if x\
    \ in l2:\n            common.append(x)\n            \n    return common\n", " \
    \   \n    common = []\n    \n    for x in l1:\n        if x in l2:\n         \
    \   common.append(x)\n    \n    return sorted(common)\n", "    return sorted(set(l1)\
    \ & set(l2))\n", "    \n    common = []\n    \n    for x in l1:\n        if x\
    \ in l2:\n            common.append(x)\n    \n    return common\n", "    \n  \
    \  common = []\n    \n    for el in l1:\n        if el in l2:\n            common.append(el)\n\
    \    \n    return common\n", "    \n    common = []\n    \n    for el1 in l1:\n\
    \        for el2 in l2:\n            if el1 == el2:\n                common.append(el1)\n\
    \                break\n    \n    return sorted(common)\n", "    \n    common\
    \ = []\n    \n    for x in l1:\n        if x in l2:\n            common.append(x)\n\
    \    \n    return common\n", "    \n    common = []\n    \n    for el1 in l1:\n\
    \        for el2 in l2:\n            if el1 == el2:\n                common.append(el1)\n\
    \                break\n    \n    return sorted(common)\n", "    \n    common\
    \ = []\n    \n    for x in l1:\n        if x in l2:\n            common.append(x)\n\
    \    \n    return common\n", "    \n    common = []\n    \n    for x in l1:\n\
    \        if x in l2:\n            common.append(x)\n    \n    return common\n",
  "    \n    common = []\n    \n    for el in l1:\n        if el in l2:\n        \
    \    common.append(el)\n    \n    return sorted(common)\n", "    return sorted(list(set(l1)\
    \ & set(l2)))\n", "    \n    common = []\n    \n    for e in l1:\n        if e\
    \ in l2:\n            common.append(e)\n    \n    return common\n", "    \n  \
    \  common = []\n    \n    for x in l1:\n        if x in l2:\n            common.append(x)\n\
    \            \n    return common\n", "    return sorted(list(set(l1) & set(l2)))\n",
  "    \n    common = []\n    \n    for x in l1:\n        if x in l2:\n          \
    \  common.append(x)\n    \n    return common\n", "    return sorted(list(set(l1)\
    \ & set(l2)))\n", "    \n    common = []\n    \n    for el in l1:\n        if\
    \ el in l2:\n            common.append(el)\n    \n    return common\n", "    \n\
    \    common = []\n    \n    for x in l1:\n        if x in l2:\n            common.append(x)\n\
    \            \n    return common\n    ", "    \n    common = []\n    \n    for\
    \ e in l1:\n        if e in l2:\n            common.append(e)\n    \n    return\
    \ common\n", "    return sorted(set(l1) & set(l2))\n", "    \n    common = []\n\
    \    \n    for x in l1:\n        if x in l2:\n            common.append(x)\n \
    \           \n    return common\n    ", "    \n    common = []\n    \n    for\
    \ el1 in l1:\n        for el2 in l2:\n            if el1 == el2:\n           \
    \     common.append(el1)\n                break\n    \n    return sorted(common)\n",
  "    \n    common = []\n    \n    for el in l1:\n        if el in l2:\n        \
    \    common.append(el)\n            \n    return common\n", "    \n    common\
    \ = []\n    \n    for el in l1:\n        if el in l2:\n            common.append(el)\n\
    \    \n    return common\n", "    \n    common = []\n    \n    for el1 in l1:\n\
    \        for el2 in l2:\n            if el1 == el2:\n                common.append(el1)\n\
    \                break\n    \n    return sorted(common)\n", "    \n    common\
    \ = []\n    \n    for x in l1:\n        if x in l2:\n            common.append(x)\n\
    \    \n    return common\n", "    \n    common = []\n    \n    for el in l1:\n\
    \        if el in l2:\n            common.append(el)\n            \n    return\
    \ sorted(common)\n", "    \n    common = []\n    \n    for x in l1:\n        if\
    \ x in l2:\n            common.append(x)\n    \n    return common\n", "    \n\
    \    common = []\n    \n    for x in l1:\n        if x in l2:\n            common.append(x)\n\
    \    \n    return common\n", "    \n    common = []\n    \n    for x in l1:\n\
    \        if x in l2:\n            common.append(x)\n    \n    return common\n",
  "    \n    common = []\n    \n    for e in l1:\n        if e in l2:\n          \
    \  common.append(e)\n    \n    return sorted(common)\n", "    \n    common = []\n\
    \    \n    for x in l1:\n        if x in l2:\n            common.append(x)\n \
    \   \n    return common\n", "    return list(set(l1) & set(l2))\n", "    \n  \
    \  common = []\n    \n    for el1 in l1:\n        for el2 in l2:\n           \
    \ if el1 == el2:\n                common.append(el1)\n                break\n\
    \    \n    return common\n", "    \n    common = []\n    \n    for el1 in l1:\n\
    \        for el2 in l2:\n            if el1 == el2:\n                common.append(el1)\n\
    \                break\n    \n    return sorted(common)\n", "    return sorted(list(set(l1)\
    \ & set(l2)))\n", "    \n    common = []\n    \n    for x in l1:\n        if x\
    \ in l2:\n            common.append(x)\n    \n    return common\n", "    \n  \
    \  common = []\n    \n    for el1 in l1:\n        for el2 in l2:\n           \
    \ if el1 == el2:\n                common.append(el1)\n                break\n\
    \    \n    return sorted(common)\n", "    return sorted(list(set(l1) & set(l2)))\n",
  "    \n    common = []\n    \n    for el1 in l1:\n        for el2 in l2:\n     \
    \       if el1 == el2:\n                common.append(el1)\n                break\n\
    \    \n    return sorted(common)\n", "    return list(set(l1) & set(l2))\n", " \
    \   \n    common = []\n    \n    for x in l1:\n        if x in l2:\n         \
    \   common.append(x)\n            \n    return sorted(common)\n", "    \n    common\
    \ = []\n    \n    for e in l1:\n        if e in l2:\n            common.append(e)\n\
    \    \n    return common\n    ", "    \n    common = []\n    \n    for el in l1:\n\
    \        if el in l2:\n            common.append(el)\n    \n    return common\n",
  "    \n    common = []\n    \n    for x in l1:\n        if x in l2:\n          \
    \  common.append(x)\n    \n    return sorted(common)\n", "    return sorted(list(set(l1)\
    \ & set(l2)))\n", "    \n    common = []\n    \n    for x in l1:\n        if x\
    \ in l2:\n            common.append(x)\n            \n    return common\n", " \
    \   \n    common = []\n    \n    for x in l1:\n        if x in l2:\n         \
    \   common.append(x)\n    \n    return common\n", "    \n    common = []\n   \
    \ \n    for x in l1:\n        if x in l2:\n            common.append(x)\n    \
    \        \n    return common\n    ", "    \n    common = []\n    \n    for x in\
    \ l1:\n        if x in l2:\n            common.append(x)\n    \n    return common\n",
  "    \n    common = []\n    \n    for x in l1:\n        if x in l2:\n          \
    \  common.append(x)\n            \n    return common\n", "    \n    common = []\n\
    \    \n    for x in l1:\n        if x in l2:\n            common.append(x)\n \
    \   \n    return sorted(common)\n", "    return sorted(set(l1) & set(l2))\n",
  "    \n    common = []\n    \n    for x in l1:\n        if x in l2:\n          \
    \  common.append(x)\n    \n    return common\n", "    \n    common = []\n    \n\
    \    for el in l1:\n        if el in l2:\n            common.append(el)\n    \n\
    \    return common\n", "    \n    common = []\n    \n    for x in l1:\n      \
    \  if x in l2:\n            common.append(x)\n            \n    return common\n",
  "    \n    common = []\n    \n    for el in l1:\n        if el in l2:\n        \
    \    common.append(el)\n            \n    return sorted(common)\n", "    \n  \
    \  common = []\n    \n    for e in l1:\n        if e in l2:\n            common.append(e)\n\
    \    \n    return sorted(common)\n", "    \n    common = []\n    \n    for e in\
    \ l1:\n        if e in l2:\n            common.append(e)\n    \n    return sorted(common)\n",
  "    \n    common = []\n    \n    for x in l1:\n        if x in l2:\n          \
    \  common.append(x)\n            \n    return common\n", "    \n    common = []\n\
    \    \n    for x in l1:\n        if x in l2:\n            common.append(x)\n \
    \           \n    return common\n    ", "    \n    common = []\n    \n    for\
    \ el in l1:\n        if el in l2:\n            common.append(el)\n    \n    return\
    \ sorted(common)\n", "    \n    common = []\n    \n    for x in l1:\n        if\
    \ x in l2:\n            common.append(x)\n    \n    return common\n", "    \n\
    \    common = []\n    \n    for e in l1:\n        if e in l2:\n            common.append(e)\n\
    \    \n    return common\n", "    return sorted(set(l1) & set(l2))\n", "    \n\
    \    common = []\n    \n    for x in l1:\n        if x in l2:\n            common.append(x)\n\
    \            \n    return common\n", "    \n    common = []\n    \n    for el\
    \ in l1:\n        if el in l2:\n            common.append(el)\n            \n\
    \    return common\n", "    \n    common = []\n    \n    for x in l1:\n      \
    \  if x in l2:\n            common.append(x)\n    \n    return common\n", "  \
    \  return list(set(l1) & set(l2))\n", "    return list(set(l1) & set(l2))\n",
  "    \n    common = []\n    \n    for x in l1:\n        if x in l2:\n          \
    \  common.append(x)\n            \n    return common\n", "    \n    common = []\n\
    \    \n    for x in l1:\n        if x in l2:\n            common.append(x)\n \
    \   \n    return common\n", "    return sorted(list(set(l1) & set(l2)))\n", " \
    \   \n    common = []\n    \n    for el1 in l1:\n        for el2 in l2:\n    \
    \        if el1 == el2:\n                common.append(el1)\n                break\n\
    \    \n    return sorted(common)\n", "    \n    common = []\n    \n    for el1\
    \ in l1:\n        for el2 in l2:\n            if el1 == el2:\n               \
    \ common.append(el1)\n                break\n    \n    return sorted(common)\n",
  "    return sorted(list(set(l1) & set(l2)))\n", "    \n    common = []\n    \n \
    \   for x in l1:\n        if x in l2:\n            common.append(x)\n    \n  \
    \  return common\n", "    return sorted(list(set(l1) & set(l2)))\n", "    \n \
    \   common = []\n    \n    for x in l1:\n        if x in l2:\n            common.append(x)\n\
    \    \n    return common\n    ", "    \n    common = []\n    \n    for el1 in\
    \ l1:\n        for el2 in l2:\n            if el1 == el2:\n                common.append(el1)\n\
    \                break\n    return common\n", "    return sorted(list(set(l1)\
    \ & set(l2)))\n", "    \n    common = []\n    \n    for el1 in l1:\n        for\
    \ el2 in l2:\n            if el1 == el2:\n                common.append(el1)\n\
    \                break\n    \n    return sorted(common)\n</cell>\n<cell>\ncommon([1,2,3],\
    \ [4,5,6])\n</cell>\n<cell>\ncommon([1,2,3], [4,5,6,7])\n</cell>\n<cell>\ncommon([1,2,3],\
    \ [4,5,6,7,8])\n</cell>\n<cell>\ncommon([1,2,3], [4,5,6,7,8,9])\n</cell>\n<cell>\n\
    common([1,2,3], [4,5,6,7,8,9,10])\n</cell>\n<cell>\ncommon([1,2,3], [4,5,6,7,8,9,10,11])\n\
    </cell>\n<cell>\ncommon([1,2,3], [4,5,6,7,8,9,10,11,12])\n</cell>\n<cell>\ncommon([1,2,3],\
    \ [4,5,6,7,8,9,10,11,12,13])\n</cell>\n<cell>\ncommon([1,2,3], [4,5,6,7,8,9,10,11,12,13,14])\n\
    </cell>\n<cell>\ncommon([1,2,3], [4,5,6,7,8,9,10,11,12,13,14,15])\n</cell>\n<cell>\n\
    common([1,2,3], [4,5,6,7,8,9,10,11,12,13,14,15,16])\n</cell>\n<cell>\ncommon([1,2,3],\
    \ [4,5,6,7,8,9,10,11,12,13,14,15,16,17])\n</cell>\n<cell>\ncommon([1,2,3], [4,5,6,7,8,9,10,11,12,13,14,15,16,17,18])\n\
    </cell>\n<cell>\ncommon([1,2,3], [4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19])\n\
    </cell>\n<cell>\ncommon([1,2,3], [4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<cell>\ncommon([1,2,3], [4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21])\n\
    </cell>\n<cell>\ncommon([1,2,3], [4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22])\n\
    </cell>\n<cell>\ncommon([1,2,3], [4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23])\n\
    </cell>\n<cell>\ncommon([1,2,3], [4,5,6,", "    \n    common = []\n    \n    for\
    \ x in l1:\n        if x in l2:\n            common.append(x)\n            \n\
    \    return common\n", "    return sorted(list(set(l1) & set(l2)))\n", "    \n\
    \    common = []\n    \n    for el in l1:\n        if el in l2:\n            common.append(el)\n\
    \    \n    return sorted(common)\n", "    \n    common = []\n    \n    for el1\
    \ in l1:\n        for el2 in l2:\n            if el1 == el2:\n               \
    \ common.append(el1)\n                break\n    \n    return common\n", "   \
    \ \n    common = []\n    \n    for el in l1:\n        if el in l2:\n         \
    \   common.append(el)\n    \n    return common\n", "    return list(set(l1) &\
    \ set(l2))\n", "    return list(set(l1) & set(l2))\n", "    \n    common = []\n\
    \    \n    for e in l1:\n        if e in l2:\n            common.append(e)\n \
    \   \n    return common\n", "    \n    common = []\n    \n    for el in l1:\n\
    \        if el in l2:\n            common.append(el)\n    \n    return common\n\
    \    ", "    \n    common = []\n    \n    for x in l1:\n        if x in l2:\n\
    \            common.append(x)\n            \n    return common\n", "    \n   \
    \ common = []\n    \n    for x in l1:\n        if x in l2:\n            common.append(x)\n\
    \            \n    return common\n", "    \n    common = []\n    \n    for el1\
    \ in l1:\n        for el2 in l2:\n            if el1 == el2:\n               \
    \ common.append(el1)\n                break\n    \n    return sorted(common)\n",
  "    \n    common = []\n    \n    for x in l1:\n        if x in l2:\n          \
    \  common.append(x)\n            \n    return common\n    ", "    \n    common\
    \ = []\n    \n    for el1 in l1:\n        for el2 in l2:\n            if el1 ==\
    \ el2:\n                common.append(el1)\n                break\n    \n    return\
    \ common\n", "    \n    common = []\n    \n    for x in l1:\n        if x in l2:\n\
    \            common.append(x)\n    \n    return common\n", "    \n    common =\
    \ []\n    \n    for x in l1:\n        if x in l2:\n            common.append(x)\n\
    \            \n    return common\n", "    \n    common = []\n    \n    for e in\
    \ l1:\n        if e in l2:\n            common.append(e)\n    \n    return common\n",
  "    return sorted(list(set(l1) & set(l2)))\n", "    \n    common = []\n    \n \
    \   for x in l1:\n        if x in l2:\n            common.append(x)\n    \n  \
    \  return sorted(common)\n", "    \n    common = []\n    \n    for x in l1:\n\
    \        if x in l2:\n            common.append(x)\n            \n    return sorted(common)\n",
  "    return sorted(set(l1) & set(l2))\n", "    return sorted(list(set(l1) & set(l2)))\n",
  "    return sorted(list(set(l1) & set(l2)))\n", "    \n    common = []\n    \n \
    \   for el1 in l1:\n        for el2 in l2:\n            if el1 == el2:\n     \
    \           common.append(el1)\n                break\n    \n    return sorted(common)\n",
  "    \n    common = []\n    \n    for e in l1:\n        if e in l2:\n          \
    \  common.append(e)\n    \n    return common\n</cell>\n<cell>\ncommon([1,2,3],\
    \ [4,5,6])\n</cell>\n<cell>\ncommon([1,2,3], [4,5,6,7])\n</cell>\n<cell>\ncommon([1,2,3],\
    \ [4,5,6,7,8])\n</cell>\n<cell>\ncommon([1,2,3], [4,5,6,7,8,9])\n</cell>\n<cell>\n\
    common([1,2,3], [4,5,6,7,8,9,10])\n</cell>\n<cell>\ncommon([1,2,3], [4,5,6,7,8,9,10,11])\n\
    </cell>\n<cell>\ncommon([1,2,3], [4,5,6,7,8,9,10,11,12])\n</cell>\n<cell>\ncommon([1,2,3],\
    \ [4,5,6,7,8,9,10,11,12,13])\n</cell>\n<cell>\ncommon([1,2,3], [4,5,6,7,8,9,10,11,12,13,14])\n\
    </cell>\n<cell>\ncommon([1,2,3], [4,5,6,7,8,9,10,11,12,13,14,15])\n</cell>\n<cell>\n\
    common([1,2,3], [4,5,6,7,8,9,10,11,12,13,14,15,16])\n</cell>\n<cell>\ncommon([1,2,3],\
    \ [4,5,6,7,8,9,10,11,12,13,14,15,16,17])\n</cell>\n<cell>\ncommon([1,2,3], [4,5,6,7,8,9,10,11,12,13,14,15,16,17,18])\n\
    </cell>\n<cell>\ncommon([1,2,3], [4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19])\n\
    </cell>\n<cell>\ncommon([1,2,3], [4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<cell>\ncommon([1,2,3], [4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21])\n\
    </cell>\n<cell>\ncommon([1,2,3], [4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22])\n\
    </cell>\n<cell>\ncommon([1,2,3], [4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23])\n\
    </cell>\n<cell>\ncommon([1,2,3], [4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,",
  "    \n    common = []\n    \n    for el1 in l1:\n        for el2 in l2:\n     \
    \       if el1 == el2:\n                common.append(el1)\n                break\n\
    \    \n    return sorted(common)\n", "    \n    common = []\n    \n    for el\
    \ in l1:\n        if el in l2:\n            common.append(el)\n    \n    return\
    \ sorted(common)\n", "    \n    common = []\n    \n    for x in l1:\n        if\
    \ x in l2:\n            common.append(x)\n    \n    return sorted(common)\n",
  "    \n    common = []\n    \n    for x in l1:\n        if x in l2:\n          \
    \  common.append(x)\n            \n    return common\n", "    \n    common = []\n\
    \    \n    for e in l1:\n        if e in l2:\n            common.append(e)\n \
    \   \n    return common\n", "    \n    common = []\n    \n    for x in l1:\n \
    \       if x in l2:\n            common.append(x)\n    \n    return sorted(common)\n",
  "    \n    common = []\n    \n    for x in l1:\n        if x in l2:\n          \
    \  common.append(x)\n    \n    return sorted(common)\n", "    \n    common = []\n\
    \    \n    for x in l1:\n        if x in l2:\n            common.append(x)\n \
    \   \n    return sorted(common)\n    ", "    return sorted(list(set(l1) & set(l2)))\n",
  "    \n    common = []\n    \n    for e in l1:\n        if e in l2:\n          \
    \  common.append(e)\n    \n    return common\n    ", "    \n    common = []\n\
    \    \n    for x in l1:\n        if x in l2:\n            common.append(x)\n \
    \           \n    return sorted(common)\n", "    \n    common = []\n    \n   \
    \ for x in l1:\n        if x in l2:\n            common.append(x)\n    \n    return\
    \ sorted(common)\n", "    \n    common = []\n    \n    for el in l1:\n       \
    \ if el in l2:\n            common.append(el)\n            \n    return common\n",
  "    \n    common = []\n    \n    for x in l1:\n        if x in l2:\n          \
    \  common.append(x)\n    \n    return common\n</cell>\n<cell>\ncommon([1,2,3],\
    \ [4,5,6])\n</cell>\n<cell>\ncommon([1,2,3], [4,5,6,7])\n</cell>\n<cell>\ncommon([1,2,3],\
    \ [4,5,6,7,8])\n</cell>\n<cell>\ncommon([1,2,3], [4,5,6,7,8,9])\n</cell>\n<cell>\n\
    common([1,2,3], [4,5,6,7,8,9,10])\n</cell>\n<cell>\ncommon([1,2,3], [4,5,6,7,8,9,10,11])\n\
    </cell>\n<cell>\ncommon([1,2,3], [4,5,6,7,8,9,10,11,12])\n</cell>\n<cell>\ncommon([1,2,3],\
    \ [4,5,6,7,8,9,10,11,12,13])\n</cell>\n<cell>\ncommon([1,2,3], [4,5,6,7,8,9,10,11,12,13,14])\n\
    </cell>\n<cell>\ncommon([1,2,3], [4,5,6,7,8,9,10,11,12,13,14,15])\n</cell>\n<cell>\n\
    common([1,2,3], [4,5,6,7,8,9,10,11,12,13,14,15,16])\n</cell>\n<cell>\ncommon([1,2,3],\
    \ [4,5,6,7,8,9,10,11,12,13,14,15,16,17])\n</cell>\n<cell>\ncommon([1,2,3], [4,5,6,7,8,9,10,11,12,13,14,15,16,17,18])\n\
    </cell>\n<cell>\ncommon([1,2,3], [4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19])\n\
    </cell>\n<cell>\ncommon([1,2,3], [4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<cell>\ncommon([1,2,3], [4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21])\n\
    </cell>\n<cell>\ncommon([1,2,3], [4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22])\n\
    </cell>\n<cell>\ncommon([1,2,3], [4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23])\n\
    </cell>\n<cell>\ncommon([1,2,3], [4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,",
  "    \n    common = []\n    \n    for x in l1:\n        if x in l2:\n          \
    \  common.append(x)\n            \n    return common\n", "    return sorted(list(set(l1)\
    \ & set(l2)))\n", "    \n    common = []\n    \n    for el1 in l1:\n        for\
    \ el2 in l2:\n            if el1 == el2:\n                common.append(el1)\n\
    \                break\n    \n    return sorted(common)\n", "    \n    common\
    \ = []\n    \n    for x in l1:\n        if x in l2:\n            common.append(x)\n\
    \    \n    return common\n", "    \n    common = []\n    \n    for x in l1:\n\
    \        if x in l2:\n            common.append(x)\n    \n    return sorted(common)\n",
  "    \n    common = []\n    \n    for x in l1:\n        if x in l2:\n          \
    \  common.append(x)\n    \n    return sorted(common)\n", "    \n    common = []\n\
    \    \n    for el in l1:\n        if el in l2:\n            common.append(el)\n\
    \    \n    return common\n    ", "    \n    common = []\n    \n    for x in l1:\n\
    \        if x in l2:\n            common.append(x)\n    \n    return common\n",
  "    return sorted(list(set(l1) & set(l2)))\n", "    return list(set(l1) & set(l2))\n",
  "    return sorted(list(set(l1) & set(l2)))\n", "    return sorted(list(set(l1)\
    \ & set(l2)))\n", "    \n    common = []\n    \n    for x in l1:\n        if x\
    \ in l2:\n            common.append(x)\n    \n    return common\n    ", "    \n\
    \    common = []\n    \n    for el in l1:\n        if el in l2:\n            common.append(el)\n\
    \    \n    return sorted(common)\n", "    \n    common = []\n    \n    for x in\
    \ l1:\n        if x in l2:\n            common.append(x)\n    \n    return sorted(common)\n",
  "    \n    common = []\n    \n    for x in l1:\n        if x in l2:\n          \
    \  common.append(x)\n    \n    return common\n", "    \n    common = []\n    \n\
    \    for x in l1:\n        if x in l2:\n            common.append(x)\n       \
    \     \n    return common\n", "    \n    common = []\n    \n    for x in l1:\n\
    \        if x in l2:\n            common.append(x)\n    \n    return common\n",
  "    return sorted(list(set(l1) & set(l2)))\n", "    \n    common = []\n    \n \
    \   for x in l1:\n        if x in l2:\n            common.append(x)\n        \
    \    \n    return common\n    ", "    return list(set(l1) & set(l2))\n", "   \
    \ \n    common = []\n    \n    for el1 in l1:\n        for el2 in l2:\n      \
    \      if el1 == el2:\n                common.append(el1)\n                break\n\
    \    \n    return common\n", "    return sorted(set(l1) & set(l2))\n", "    \n\
    \    common = []\n    \n    for x in l1:\n        if x in l2:\n            common.append(x)\n\
    \            \n    return common\n", "    \n    common = []\n    \n    for x in\
    \ l1:\n        if x in l2:\n            common.append(x)\n    \n    return common\n",
  "    \n    common = []\n    \n    for x in l1:\n        if x in l2:\n          \
    \  common.append(x)\n    \n    return common\n    ", "    return sorted(set(l1)\
    \ & set(l2))\n", "    \n    common = []\n    \n    for el in l1:\n        if el\
    \ in l2:\n            common.append(el)\n    \n    return sorted(common)\n", " \
    \   return sorted(list(set(l1) & set(l2)))\n", "    \n    common = []\n    \n\
    \    for x in l1:\n        if x in l2:\n            common.append(x)\n       \
    \     \n    return common\n", "    return sorted(set(l1) & set(l2))\n", "    return\
    \ sorted(list(set(l1) & set(l2)))\n", "    \n    common = []\n    \n    for el\
    \ in l1:\n        if el in l2:\n            common.append(el)\n    \n    return\
    \ sorted(common)\n", "    \n    common = []\n    \n    for el1 in l1:\n      \
    \  for el2 in l2:\n            if el1 == el2:\n                common.append(el1)\n\
    \                break\n    \n    return sorted(common)\n", "    \n    common\
    \ = []\n    \n    for el1 in l1:\n        for el2 in l2:\n            if el1 ==\
    \ el2:\n                common.append(el1)\n                break\n    \n    return\
    \ sorted(common)\n    ", "    return sorted(list(set(l1) & set(l2)))\n", "   \
    \ \n    common = []\n    \n    for el1 in l1:\n        for el2 in l2:\n      \
    \      if el1 == el2:\n                common.append(el1)\n                break\n\
    \    \n    return sorted(common)\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
