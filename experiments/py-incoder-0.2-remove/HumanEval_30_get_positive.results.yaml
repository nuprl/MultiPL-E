name: HumanEval_30_get_positive
language: py
results:
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [i for i in l if i > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [i for i in l if i > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [i for i in l if i > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [i for i in l if i >= 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm_vqv0z2.py\"\
    , line 17, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm_vqv0z2.py\"\
    , line 15, in test_check\n    check(get_positive)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm_vqv0z2.py\"\
    , line 10, in check\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])\
    \ == [5, 3, 2, 3, 3, 9, 123, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [i for i in l if i > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [i for i in l if i > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [i for i in l if i > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [i for i in l if i > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [i for i in l if i > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [i for i in l if i > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [i for i in l if i > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [i for i in l if i > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [i for i in l if i > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [i for i in l if i > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [i for i in l if i > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [i for i in l if i > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [i for i in l if i > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [i for i in l if i > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [i for i in l if i > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [i for i in l if i > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [i for i in l if i > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [i for i in l if i > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [i for i in l if i > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [i for i in l if i > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [i for i in l if i > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [i for i in l if i > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [i for i in l if i > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [i for i in l if i > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [i for i in l if i > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [i for i in l if i > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [i for i in l if i > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [i for i in l if i > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [i for i in l if i > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [i for i in l if i > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [i for i in l if i > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [i for i in l if i > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [i for i in l if i >= 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzjsxfjha.py\"\
    , line 17, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzjsxfjha.py\"\
    , line 15, in test_check\n    check(get_positive)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzjsxfjha.py\"\
    , line 10, in check\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])\
    \ == [5, 3, 2, 3, 3, 9, 123, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [i for i in l if i > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [i for i in l if i > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [i for i in l if i > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [i for i in l if i > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [i for i in l if i > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [i for i in l if i > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [i for i in l if i > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n            \"\"\"\n   \
    \ return [x for x in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
