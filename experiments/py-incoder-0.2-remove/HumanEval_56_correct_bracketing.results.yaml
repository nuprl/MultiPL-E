name: HumanEval_56_correct_bracketing
language: py
results:
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets =\
    \ brackets.replace(\"<\", \"\").replace(\">\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3w8t3t6v.py\"\
    , line 48\n    brackets = brackets.replace(\"\n                              \
    \  ^\nSyntaxError: unterminated string literal (detected at line 48)\n"
  exit_code: 1
  status: SyntaxError
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == '<':\n            stack.append(c)\n \
    \       elif c == '>':\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert\
    \ candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n\
    \    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>')\
    \ == False\n    assert candidate('><<>') == False\n    assert candidate('<') ==\
    \ False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n\
    \    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == '<':\n            stack.append(c)\n \
    \       elif c == '>':\n            if not stack:\n                return False\n\
    \            top = stack.pop()\n            if top != c:\n                return\
    \ False\n    return not stack\n\n\ndef check(candidate):\n    assert candidate('<>')\
    \ == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpi14aziiw.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpi14aziiw.py\"\
    , line 34, in test_check\n    check(correct_bracketing)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpi14aziiw.py\"\
    , line 20, in check\n    assert candidate('<>') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets =\
    \ brackets.replace(\"<\", \"\")\n    brackets = brackets.replace(\">\", \"\")\n\
    \    brackets = brackets.replace(\"(\", \"\")\n    brackets = brackets.replace(\"\
    )\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"[\", \"\")\n    brackets = brackets.replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    '\", \"\")\n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    '\", \"\")\n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    '\", \"\")\n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    '\", \"\")\n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    '\", \"\")\n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    '\", \"\")\n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    '\", \"\")\n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    '\", \"\")\n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\",\", \"\")\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppmle_vs8.py\"\
    , line 80, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppmle_vs8.py\"\
    , line 78, in test_check\n    check(correct_bracketing)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppmle_vs8.py\"\
    , line 64, in check\n    assert candidate('<>') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == '<':\n            stack.append(c)\n \
    \       elif c == '>':\n            if not stack:\n                return False\n\
    \            top = stack.pop()\n            if top != c:\n                return\
    \ False\n    return not stack\n\n\ndef check(candidate):\n    assert candidate('<>')\
    \ == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp02ifta8k.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp02ifta8k.py\"\
    , line 34, in test_check\n    check(correct_bracketing)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp02ifta8k.py\"\
    , line 20, in check\n    assert candidate('<>') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for char in brackets:\n        if char == \"<\":\n            stack.append(char)\n\
    \        elif char == \">\":\n            if not stack:\n                return\
    \ False\n            stack.pop()\n    return not stack\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == \"<\":\n            stack.append(c)\n\
    \        elif c == \">\":\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n        else:\n     \
    \       return False\n    return len(stack) == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == \"<\":\n            stack.append(c)\n\
    \        elif c == \">\":\n            if not stack:\n                return False\n\
    \            else:\n                stack.pop()\n    return not stack\n\n\ndef\
    \ check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets =\
    \ brackets.replace(\"<\", \"\").replace(\">\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl5fxahps.py\"\
    , line 48\n    brackets = brackets.replace(\"\n                              \
    \  ^\nSyntaxError: unterminated string literal (detected at line 48)\n"
  exit_code: 1
  status: SyntaxError
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets =\
    \ brackets.replace(\"<\", \"\").replace(\">\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmdylyi0z.py\"\
    , line 48\n    brackets = brackets.replace(\"\n                              \
    \  ^\nSyntaxError: unterminated string literal (detected at line 48)\n"
  exit_code: 1
  status: SyntaxError
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets =\
    \ brackets.replace(\"<\", \"\").replace(\">\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxefbnb_w.py\"\
    , line 48\n    brackets = brackets.replace(\"\n                              \
    \  ^\nSyntaxError: unterminated string literal (detected at line 48)\n"
  exit_code: 1
  status: SyntaxError
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == \"<\":\n            stack.append(c)\n\
    \        elif c == \">\":\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert\
    \ candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n\
    \    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>')\
    \ == False\n    assert candidate('><<>') == False\n    assert candidate('<') ==\
    \ False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n\
    \    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets =\
    \ brackets.replace('(', '').replace(')', '')\n    brackets = brackets.replace('[',\
    \ '').replace(']', '')\n    brackets = brackets.replace('{', '').replace('}',\
    \ '')\n    brackets = brackets.replace(' ', '')\n    brackets = brackets.split(',')\n\
    \    brackets = [x for x in brackets if x != '']\n    brackets = [x for x in brackets\
    \ if x != '<' and x != '>']\n    brackets = [x for x in brackets if x != '{' and\
    \ x != '}']\n    brackets = [x for x in brackets if x != '[' and x != ']']\n \
    \   brackets = [x for x in brackets if x != '(' and x != ')']\n    brackets =\
    \ [x for x in brackets if x != '{' and x != '}']\n    brackets = [x for x in brackets\
    \ if x != '[' and x != ']']\n    brackets = [x for x in brackets if x != '(' and\
    \ x != ')']\n    brackets = [x for x in brackets if x != '{' and x != '}']\n \
    \   brackets = [x for x in brackets if x != '[' and x != ']']\n    brackets =\
    \ [x for x in brackets if x != '(' and x != ')']\n    brackets = [x for x in brackets\
    \ if x != '{' and x != '}']\n    brackets = [x for x in brackets if x != '[' and\
    \ x != ']']\n    brackets = [x for x in brackets if x != '(' and x != ')']\n \
    \   brackets = [x for x in brackets if x != '{' and x != '}']\n    brackets =\
    \ [x for x in brackets if x != '[' and x != ']']\n    brackets = [x for x in brackets\
    \ if x != '(' and x != ')']\n    brackets = [x for x in brackets if x != '{' and\
    \ x != '}']\n    brackets = [x for x in brackets if x != '[' and x != ']']\n \
    \   brackets = [x for x in brackets if x != '(' and x != ')']\n    brackets =\
    \ [x for x in brackets if x != '{' and x != '}']\n    brackets = [x for x in brackets\
    \ if x != '[' and x != ']']\n    brackets = [x for x in brackets if x != '(' and\
    \ x != ')']\n    brackets = [x for x in brackets if x != '{' and x != '}']\n \
    \   brackets = [x for x in brackets if x != '[' and x != ']']\n    brackets =\
    \ [x for x in brackets if x != '(' and x != ')']\n    brackets = [x for x in brackets\
    \ if x != '{' and x != '}']\n    brackets = [x for x in brackets if x != '[' and\
    \ x != ']']\n    brackets = [x for x in brackets if x != '(' and x != ')']\n \
    \   brackets = [x for x in brackets if x != '{' and x != '}']\n    brackets =\
    \ [x for x in brackets if x != '[' and x != ']']\n\ndef check(candidate):\n  \
    \  assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n  \
    \  assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbva1tnmp.py\"\
    , line 60, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbva1tnmp.py\"\
    , line 58, in test_check\n    check(correct_bracketing)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbva1tnmp.py\"\
    , line 44, in check\n    assert candidate('<>') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == \"<\":\n            stack.append(c)\n\
    \        elif c == \">\":\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert\
    \ candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n\
    \    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>')\
    \ == False\n    assert candidate('><<>') == False\n    assert candidate('<') ==\
    \ False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n\
    \    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == \"<\":\n            stack.append(c)\n\
    \        elif c == \">\":\n            if not stack:\n                return False\n\
    \            stack.pop()\n    return not stack\n\n\ndef check(candidate):\n  \
    \  assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n  \
    \  assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == '<':\n            stack.append(c)\n \
    \       elif c == '>':\n            if len(stack) == 0:\n                return\
    \ False\n            stack.pop()\n    return len(stack) == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == \"<\":\n            stack.append(c)\n\
    \        elif c == \">\":\n            if not stack:\n                return False\n\
    \            top = stack.pop()\n            if top != c:\n                return\
    \ False\n    return not stack\n\n\ndef check(candidate):\n    assert candidate('<>')\
    \ == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgf17gg18.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgf17gg18.py\"\
    , line 34, in test_check\n    check(correct_bracketing)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgf17gg18.py\"\
    , line 20, in check\n    assert candidate('<>') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == \"<\":\n            stack.append(c)\n\
    \        elif c == \">\":\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n        else:\n     \
    \       return False\n    return True\n\n\ndef check(candidate):\n    assert candidate('<>')\
    \ == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3dh71gyb.py\"\
    , line 37, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3dh71gyb.py\"\
    , line 35, in test_check\n    check(correct_bracketing)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3dh71gyb.py\"\
    , line 27, in check\n    assert candidate('<') == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == \"<\":\n            stack.append(c)\n\
    \        elif c == \">\":\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert\
    \ candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n\
    \    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>')\
    \ == False\n    assert candidate('><<>') == False\n    assert candidate('<') ==\
    \ False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n\
    \    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets_set\
    \ = set(brackets)\n    opening_brackets = brackets_set.difference('[]')\n    closing_brackets\
    \ = brackets_set.difference('()')\n    return len(opening_brackets) == 0 and len(closing_brackets)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert\
    \ candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n\
    \    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>')\
    \ == False\n    assert candidate('><<>') == False\n    assert candidate('<') ==\
    \ False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n\
    \    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphwhf7hg9.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphwhf7hg9.py\"\
    , line 27, in test_check\n    check(correct_bracketing)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphwhf7hg9.py\"\
    , line 13, in check\n    assert candidate('<>') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets =\
    \ brackets.replace(\"<\", \"\")\n    brackets = brackets.replace(\">\", \"\")\n\
    \    brackets = brackets.replace(\"(\", \"\")\n    brackets = brackets.replace(\"\
    )\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"[\", \"\")\n    brackets = brackets.replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    '\", \"\")\n    brackets = brackets.replace('\"', \"\")\n    brackets = brackets.replace(\"\
    !\", \"\")\n    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    ~\", \"\")\n    brackets = brackets.replace(\"*\", \"\")\n    brackets = brackets.replace(\"\
    %\", \"\")\n    brackets = brackets.replace(\"^\", \"\")\n    brackets = brackets.replace(\"\
    &\", \"\")\n    brackets = brackets.replace(\"_\", \"\")\n    brackets = brackets.replace(\"\
    +\", \"\")\n    brackets = brackets.replace(\"-\", \"\")\n    brackets = brackets.replace(\"\
    =\", \"\")\n    brackets = brackets.replace(\"<=\", \"\")\n    brackets = brackets.replace(\"\
    >=\", \"\")\n    brackets = brackets.replace(\"!=\", \"\")\n    brackets = brackets.replace(\"\
    ==\", \"\")\n    brackets = brackets.replace(\"<\", \" \")\n    brackets = brackets.replace(\"\
    >\", \" \")\n    brackets = brackets.replace(\"(\", \" \")\n    brackets = brackets.replace(\"\
    )\", \" \")\n    brackets = brackets.replace(\"{\", \" \")\n    brackets = brackets.replace(\"\
    }\", \" \")\n    brackets = brackets.replace(\"[\", \" \")\n    brackets = brackets.replace(\"\
    ]\", \" \")\n    brackets = brackets.replace(\",\", \" \")\n    brackets = brackets.replace(\"\
    ;\", \" \")\n    brackets = brackets.replace(\":\", \" \")\n    brackets = brackets.replace(\"\
    '\", \" \")\n    brackets = brackets.replace('\"', \" \")\n    brackets = brackets.replace(\"\
    !\", \" \")\n    brackets = brackets.replace(\"?\", \" \")\n    brackets = brackets.replace(\"\
    ~\", \" \")\n    brackets = brackets.replace(\"*\", \" \")\n    brackets = brackets.replace(\"\
    %\", \" \")\n    brackets = brackets.replace(\"^\", \" \")\n    brackets = brackets.replace(\"\
    &\", \" \")\n    brackets = brackets.replace(\"_\", \" \")\n    brackets = brackets.replace(\"\
    +\", \" \")\n    brackets = brackets.replace(\"-\", \" \")\n    brackets = brackets.replace(\"\
    =\", \" \")\n    brackets = brackets.replace(\"<=\", \" \")\n    brackets = brackets.\n\
    def check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbnfdveh9.py\"\
    , line 59\n    brackets = brackets.\n                        ^\nSyntaxError: invalid\
    \ syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == \"<\":\n            stack.append(c)\n\
    \        elif c == \">\":\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert\
    \ candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n\
    \    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>')\
    \ == False\n    assert candidate('><<>') == False\n    assert candidate('<') ==\
    \ False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n\
    \    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets =\
    \ brackets.replace(\"<\", \"\").replace(\">\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo5ldkbbn.py\"\
    , line 48\n    brackets = brackets.replace(\"\n                              \
    \  ^\nSyntaxError: unterminated string literal (detected at line 48)\n"
  exit_code: 1
  status: SyntaxError
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == \"<\":\n            stack.append(c)\n\
    \        elif c == \">\":\n            if len(stack) == 0:\n                return\
    \ False\n            stack.pop()\n    return len(stack) == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets =\
    \ brackets.replace(\"<\", \"\").replace(\">\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\").replace(\":\", \"\")\n\
    \    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\"'\", \"\")\n    brackets = brackets.replace(\"\
    \\\"\", \"\")\n    brackets = brackets.replace(\"%\", \"\")\n    brackets = brackets.replace(\"\
    ^\", \"\")\n    brackets = brackets.replace(\"&\", \"\")\n    brackets = brackets.replace(\"\
    *\", \"\")\n    brackets = brackets.replace(\"+\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\").replace(\":\", \"\")\n\
    \    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\"'\", \"\")\n    brackets = brackets.replace(\"\
    \\\"\", \"\")\n    brackets = brackets.replace(\"%\", \"\")\n    brackets = brackets.replace(\"\
    ^\", \"\")\n    brackets = brackets.replace(\"&\", \"\")\n    brackets = brackets.replace(\"\
    *\", \"\")\n    brackets = brackets.replace(\"+\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\").replace(\":\", \"\")\n\
    \    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\"'\", \"\")\n    brackets = brackets.replace(\"\
    \\\"\", \"\")\n    brackets = brackets.replace(\"%\", \"\")\n    brackets = brackets.replace(\"\
    ^\", \"\")\n    brackets = brackets.replace(\"&\", \"\")\n    brackets = brackets.replace(\"\
    *\", \"\")\n    brackets = brackets.replace(\"+\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    \ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjf7mhmj6.py\"\
    , line 56\n    brackets = brackets.replace(\"\n                              \
    \  ^\nSyntaxError: unterminated string literal (detected at line 56)\n"
  exit_code: 1
  status: SyntaxError
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == '<':\n            stack.append(c)\n \
    \       elif c == '>':\n            if not stack:\n                return False\n\
    \            stack.pop()\n    return not stack\n\n\ndef check(candidate):\n  \
    \  assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n  \
    \  assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == '<':\n            stack.append(c)\n \
    \       elif c == '>':\n            if not stack:\n                return False\n\
    \            top = stack.pop()\n            if top != c:\n                return\
    \ False\n    return not stack\n\n\ndef check(candidate):\n    assert candidate('<>')\
    \ == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpi9nmmj27.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpi9nmmj27.py\"\
    , line 34, in test_check\n    check(correct_bracketing)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpi9nmmj27.py\"\
    , line 20, in check\n    assert candidate('<>') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for char in brackets:\n        if char == '<':\n            stack.append(char)\n\
    \        elif char == '>':\n            if not stack:\n                return\
    \ False\n            top = stack.pop()\n            if top != char:\n        \
    \        return False\n    return not stack\n\n\ndef check(candidate):\n    assert\
    \ candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert\
    \ candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkzd00_ka.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkzd00_ka.py\"\
    , line 34, in test_check\n    check(correct_bracketing)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkzd00_ka.py\"\
    , line 20, in check\n    assert candidate('<>') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == \"<\":\n            stack.append(c)\n\
    \        elif c == \">\":\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n        else:\n     \
    \       return False\n    if len(stack) != 0:\n        return False\n    return\
    \ True\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert\
    \ candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n\
    \    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>')\
    \ == False\n    assert candidate('><<>') == False\n    assert candidate('<') ==\
    \ False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n\
    \    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for char in brackets:\n        if char == '<':\n            stack.append(char)\n\
    \        elif char == '>':\n            if not stack:\n                return\
    \ False\n            top = stack.pop()\n            if top != char:\n        \
    \        return False\n    return not stack\n\n\ndef check(candidate):\n    assert\
    \ candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert\
    \ candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt6hf0nfy.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt6hf0nfy.py\"\
    , line 34, in test_check\n    check(correct_bracketing)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt6hf0nfy.py\"\
    , line 20, in check\n    assert candidate('<>') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets_set\
    \ = set(brackets)\n    opening_brackets = brackets_set.difference('[]')\n    closing_brackets\
    \ = brackets_set.difference('()')\n    return len(opening_brackets) == 0 and len(closing_brackets)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert\
    \ candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n\
    \    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>')\
    \ == False\n    assert candidate('><<>') == False\n    assert candidate('<') ==\
    \ False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n\
    \    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmp4kft3o.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmp4kft3o.py\"\
    , line 27, in test_check\n    check(correct_bracketing)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmp4kft3o.py\"\
    , line 13, in check\n    assert candidate('<>') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == \"<\":\n            stack.append(c)\n\
    \        elif c == \">\":\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert\
    \ candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n\
    \    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>')\
    \ == False\n    assert candidate('><<>') == False\n    assert candidate('<') ==\
    \ False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n\
    \    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets_set\
    \ = set(brackets)\n    opening_brackets = set([\"<\", \">\"])\n    closing_brackets\
    \ = set([\"<\", \">\"])\n    opening_brackets_set = set(opening_brackets)\n  \
    \  closing_brackets_set = set(closing_brackets)\n    opening_brackets_set.intersection_update(brackets_set)\n\
    \    closing_brackets_set.intersection_update(brackets_set)\n    return opening_brackets_set\
    \ == closing_brackets_set\n\n\ndef check(candidate):\n    assert candidate('<>')\
    \ == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppwlicr25.py\"\
    , line 33, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppwlicr25.py\"\
    , line 31, in test_check\n    check(correct_bracketing)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppwlicr25.py\"\
    , line 21, in check\n    assert candidate('<<<><>>>>') == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for char in brackets:\n        if char == '<':\n            stack.append(char)\n\
    \        elif char == '>':\n            if not stack:\n                return\
    \ False\n            top = stack.pop()\n            if top != char:\n        \
    \        return False\n    return not stack\n\n\ndef check(candidate):\n    assert\
    \ candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert\
    \ candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpatltamno.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpatltamno.py\"\
    , line 34, in test_check\n    check(correct_bracketing)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpatltamno.py\"\
    , line 20, in check\n    assert candidate('<>') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets =\
    \ brackets.strip()\n    opening_brackets = [\"<\", \">\"]\n    closing_brackets\
    \ = [\">\", \"<\"]\n    for opening_bracket in opening_brackets:\n        if opening_bracket\
    \ not in brackets:\n            return False\n    for closing_bracket in closing_brackets:\n\
    \        if closing_bracket not in brackets:\n            return False\n    return\
    \ True\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert\
    \ candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n\
    \    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>')\
    \ == False\n    assert candidate('><<>') == False\n    assert candidate('<') ==\
    \ False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n\
    \    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphyr4qkyg.py\"\
    , line 35, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphyr4qkyg.py\"\
    , line 33, in test_check\n    check(correct_bracketing)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphyr4qkyg.py\"\
    , line 23, in check\n    assert candidate('<<<><>>>>') == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == \"<\":\n            stack.append(c)\n\
    \        elif c == \">\":\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n        else:\n     \
    \       return False\n    return len(stack) == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == '<':\n            stack.append(c)\n \
    \       elif c == '>':\n            if not stack:\n                return False\n\
    \            top = stack.pop()\n            if top != c:\n                return\
    \ False\n    return not stack\n\n\ndef check(candidate):\n    assert candidate('<>')\
    \ == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4ttkvf45.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4ttkvf45.py\"\
    , line 34, in test_check\n    check(correct_bracketing)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4ttkvf45.py\"\
    , line 20, in check\n    assert candidate('<>') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == '<':\n            stack.append(c)\n \
    \       elif c == '>':\n            if not stack:\n                return False\n\
    \            stack.pop()\n    return not stack\n\n\ndef check(candidate):\n  \
    \  assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n  \
    \  assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets =\
    \ brackets.replace(\"<\", \"\").replace(\">\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppouto51n.py\"\
    , line 48\n    brackets = brackets.\n                        ^\nSyntaxError: invalid\
    \ syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == \"<\":\n            stack.append(c)\n\
    \        elif c == \">\":\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert\
    \ candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n\
    \    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>')\
    \ == False\n    assert candidate('><<>') == False\n    assert candidate('<') ==\
    \ False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n\
    \    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == '<':\n            stack.append(c)\n \
    \       elif c == '>':\n            if not stack:\n                return False\n\
    \            top = stack.pop()\n            if top != c:\n                return\
    \ False\n    return not stack\n\n\ndef check(candidate):\n    assert candidate('<>')\
    \ == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu31e8o74.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu31e8o74.py\"\
    , line 34, in test_check\n    check(correct_bracketing)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu31e8o74.py\"\
    , line 20, in check\n    assert candidate('<>') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets =\
    \ brackets.replace('(', ' ( ').replace(')', ' ) ')\n    brackets = brackets.replace('[',\
    \ ' [').replace(']', ' ] ')\n    brackets = brackets.replace('{', ' {').replace('}',\
    \ ' } ')\n    brackets = brackets.replace('(', ' ( ').replace(')', ' ) ')\n  \
    \  brackets = brackets.replace('[', ' [').replace(']', ' ] ')\n    brackets =\
    \ brackets.replace('{', ' {').replace('}', ' } ')\n    brackets = brackets.replace('(',\
    \ ' ( ').replace(')', ' ) ')\n    brackets = brackets.replace('[', ' [').replace(']',\
    \ ' ] ')\n    brackets = brackets.replace('{', ' {').replace('}', ' } ')\n   \
    \ brackets = brackets.replace('(', ' ( ').replace(')', ' ) ')\n    brackets =\
    \ brackets.replace('[', ' [').replace(']', ' ] ')\n    brackets = brackets.replace('{',\
    \ ' {').replace('}', ' } ')\n    brackets = brackets.replace('(', ' ( ').replace(')',\
    \ ' ) ')\n    brackets = brackets.replace('[', ' [').replace(']', ' ] ')\n   \
    \ brackets = brackets.replace('{', ' {').replace('}', ' } ')\n    brackets = brackets.replace('(',\
    \ ' ( ').replace(')', ' ) ')\n    brackets = brackets.replace('[', ' [').replace(']',\
    \ ' ] ')\n    brackets = brackets.replace('{', ' {').replace('}', ' } ')\n   \
    \ brackets = brackets.replace('(', ' ( ').replace(')', ' ) ')\n    brackets =\
    \ brackets.replace('[', ' [').replace(']', ' ] ')\n    brackets = brackets.replace('{',\
    \ ' {').replace('}', ' } ')\n    brackets = brackets.replace('(', ' ( ').replace(')',\
    \ ' ) ')\n    brackets = brackets.replace('[', ' [').replace(']', ' ] ')\n   \
    \ brackets = brackets.replace('{', ' {').replace('}', ' } ')\n    brackets = brackets.replace('(',\
    \ ' ( ').replace(')', ' ) ')\n    brackets = brackets.replace('[', ' [').replace(']',\
    \ ' ] ')\n    brackets = brackets.replace('{', ' {').replace('}', ' } ')\n   \
    \ brackets = brackets.replace('(', ' ( ').replace(')', ' ) ')\n    brackets =\
    \ brackets.replace('[', ' [').replace(']', ' ] ')\n    brackets = brackets.replace('{',\
    \ ' {').replace('}', ' } ')\n    brackets = brackets.replace('(', ' ( ').replace(')',\
    \ ' ) ')\n    brackets = brackets.replace('[', ' [').replace(']', ' ] ')\n   \
    \ brackets = brackets.replace('{', ' {').replace('}', ' } ')\n    brackets = brackets.replace('(',\
    \ ' ( ').replace(')', ' ) ')\n    bracket\ndef check(candidate):\n    assert candidate('<>')\
    \ == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5aiwj4z8.py\"\
    , line 58, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5aiwj4z8.py\"\
    , line 56, in test_check\n    check(correct_bracketing)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5aiwj4z8.py\"\
    , line 42, in check\n    assert candidate('<>') == True\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5aiwj4z8.py\"\
    , line 40, in correct_bracketing\n    bracket\nNameError: name 'bracket' is not\
    \ defined. Did you mean: 'brackets'?\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == \"<\":\n            stack.append(c)\n\
    \        elif c == \">\":\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n        else:\n     \
    \       return False\n    return len(stack) == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == \"<\":\n            stack.append(c)\n\
    \        elif c == \">\":\n            if not stack:\n                return False\n\
    \            top = stack.pop()\n            if top != c:\n                return\
    \ False\n    return not stack\n\n\ndef check(candidate):\n    assert candidate('<>')\
    \ == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp52ce0ss7.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp52ce0ss7.py\"\
    , line 34, in test_check\n    check(correct_bracketing)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp52ce0ss7.py\"\
    , line 20, in check\n    assert candidate('<>') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets_set\
    \ = set(brackets)\n    open_brackets_set = set([\"<\", \">\"])\n    close_brackets_set\
    \ = set([\"<\", \">\"])\n    open_brackets_set.intersection_update(brackets_set)\n\
    \    close_brackets_set.intersection_update(brackets_set)\n    return len(open_brackets_set)\
    \ == 0 and len(close_brackets_set) == 0\n\n\ndef check(candidate):\n    assert\
    \ candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert\
    \ candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv8sca64n.py\"\
    , line 31, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv8sca64n.py\"\
    , line 29, in test_check\n    check(correct_bracketing)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv8sca64n.py\"\
    , line 15, in check\n    assert candidate('<>') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == '<':\n            stack.append(c)\n \
    \       elif c == '>':\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n        else:\n     \
    \       return False\n    return len(stack) == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets =\
    \ brackets.strip()\n    opening_brackets = [x for x in brackets if x == \"<\"\
    ]\n    closing_brackets = [x for x in brackets if x == \">\"]\n    opening_brackets_set\
    \ = set(opening_brackets)\n    closing_brackets_set = set(closing_brackets)\n\
    \    return not (opening_brackets_set - closing_brackets_set).__len__()\n\n\n\
    def check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3_11syop.py\"\
    , line 31, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3_11syop.py\"\
    , line 29, in test_check\n    check(correct_bracketing)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3_11syop.py\"\
    , line 15, in check\n    assert candidate('<>') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == \"<\":\n            stack.append(c)\n\
    \        elif c == \">\":\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert\
    \ candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n\
    \    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>')\
    \ == False\n    assert candidate('><<>') == False\n    assert candidate('<') ==\
    \ False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n\
    \    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == '<':\n            stack.append(c)\n \
    \       elif c == '>':\n            if not stack:\n                return False\n\
    \            top = stack.pop()\n            if top != c:\n                return\
    \ False\n    return not stack\n\n\ndef check(candidate):\n    assert candidate('<>')\
    \ == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqd3jydqf.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqd3jydqf.py\"\
    , line 34, in test_check\n    check(correct_bracketing)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqd3jydqf.py\"\
    , line 20, in check\n    assert candidate('<>') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == \"<\":\n            stack.append(c)\n\
    \        elif c == \">\":\n            if not stack:\n                return False\n\
    \            stack.pop()\n    return not stack\n\n\ndef check(candidate):\n  \
    \  assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n  \
    \  assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == \"<\":\n            stack.append(c)\n\
    \        elif c == \">\":\n            if not stack:\n                return False\n\
    \            else:\n                stack.pop()\n    return not stack\n\n\ndef\
    \ check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == '<':\n            stack.append(c)\n \
    \       elif c == '>':\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n        else:\n     \
    \       return False\n    return len(stack) == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == '<':\n            stack.append(c)\n \
    \       elif c == '>':\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert\
    \ candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n\
    \    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>')\
    \ == False\n    assert candidate('><<>') == False\n    assert candidate('<') ==\
    \ False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n\
    \    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets =\
    \ brackets.replace(\"<\", \"\").replace(\">\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpquyfumhl.py\"\
    , line 48\n    brackets = brackets.replace(\"\n                              \
    \  ^\nSyntaxError: unterminated string literal (detected at line 48)\n"
  exit_code: 1
  status: SyntaxError
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == \"<\":\n            stack.append(c)\n\
    \        elif c == \">\":\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert\
    \ candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n\
    \    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>')\
    \ == False\n    assert candidate('><<>') == False\n    assert candidate('<') ==\
    \ False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n\
    \    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets =\
    \ brackets.replace(\"<\", \"\").replace(\">\", \"\")\n    opening_brackets = [x\
    \ for x in brackets if x == \"<\"]\n    closing_brackets = [x for x in brackets\
    \ if x == \">\"]\n    return len(opening_brackets) == len(closing_brackets)\n\n\
    \ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmuik4khd.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmuik4khd.py\"\
    , line 27, in test_check\n    check(correct_bracketing)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmuik4khd.py\"\
    , line 17, in check\n    assert candidate('<<<><>>>>') == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets_set\
    \ = set(brackets)\n    opening_brackets = brackets_set.difference({'<', '>'})\n\
    \    closing_brackets = brackets_set.difference({'<', '>'})\n    return len(opening_brackets)\
    \ == 0 and len(closing_brackets) == 0\n\n\ndef check(candidate):\n    assert candidate('<>')\
    \ == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3ex87ijv.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3ex87ijv.py\"\
    , line 27, in test_check\n    check(correct_bracketing)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3ex87ijv.py\"\
    , line 17, in check\n    assert candidate('<<<><>>>>') == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets =\
    \ brackets.replace(\"<\", \"\").replace(\">\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfe6z67e2.py\"\
    , line 48\n    brackets = brackets.\n                        ^\nSyntaxError: invalid\
    \ syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets =\
    \ brackets.replace(\"<\", \"\").replace(\"<\", \"\").replace(\"<\", \"\")\n  \
    \  brackets = brackets.replace(\">\", \"\").replace(\">\", \"\").replace(\">\"\
    , \"\")\n    brackets = brackets.replace(\"(\", \"\").replace(\")\", \"\")\n \
    \   brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\").replace(\";\", \"\")\n    brackets = brackets.replace(\":\", \"\").replace(\"\
    :\", \"\")\n    brackets = brackets.replace(\"!\", \"\").replace(\"!\", \"\")\n\
    \    brackets = brackets.replace(\"?\", \"\").replace(\"?\", \"\")\n    brackets\
    \ = brackets.replace(\",\", \"\").replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\").replace(\":\", \"\")\n    brackets = brackets.replace(\"!\", \"\").replace(\"\
    !\", \"\")\n    brackets = brackets.replace(\"?\", \"\").replace(\"?\", \"\")\n\
    \    brackets = brackets.replace(\",\", \"\").replace(\";\", \"\")\n    brackets\
    \ = brackets.replace(\":\", \"\").replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\").replace(\"!\", \"\")\n    brackets = brackets.replace(\"?\", \"\").replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\",\", \"\").replace(\";\", \"\")\n\
    \    brackets = brackets.replace(\":\", \"\").replace(\":\", \"\")\n    brackets\
    \ = brackets.replace(\"!\", \"\").replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\").replace(\"?\", \"\")\n    brackets = brackets.replace(\",\", \"\").replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\").replace(\":\", \"\")\n\
    \    brackets = brackets.replace(\"!\", \"\").replace(\"!\", \"\")\n    brackets\
    \ = brackets.replace(\"?\", \"\").replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\").replace(\";\", \"\")\n    brackets = brackets.replace(\":\", \"\").replace(\"\
    :\", \"\")\n    brackets = brackets.replace(\"!\", \"\").replace(\"!\", \"\")\n\
    \    brackets = brackets.replace(\"?\", \"\").replace(\"?\", \"\")\n    brackets\
    \ = brackets.replace(\",\", \"\").replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\").replace(\":\", \"\")\n    brackets = brackets.replace(\"!\", \"\").replace(\"\
    !\", \"\")\n    brackets = brackets.replace(\"?\", \"\").replace(\"?\", \"\")\n\
    \    brackets = brackets.replace(\",\", \"\").replace(\";\", \"\")\n    brackets\
    \ = brackets.replace(\":\", \"\").replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\").replace(\"!\", \"\")\n    brackets = brackets.replace(\"?\", \"\").replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\",\", \"\").replace(\";\", \"\")\n\
    \    brackets = brackets.replace(\":\", \"\").replace(\":\", \"\")\n    brackets\
    \ = brackets.replace(\"!\", \"\").replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\").replace(\"?\", \"\")\n    brackets = brackets.replace(\",\", \"\").replace(\"\
    ;\", \"\")\n    bracket\ndef check(candidate):\n    assert candidate('<>') ==\
    \ True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwiebrc3f.py\"\
    , line 66, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwiebrc3f.py\"\
    , line 64, in test_check\n    check(correct_bracketing)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwiebrc3f.py\"\
    , line 50, in check\n    assert candidate('<>') == True\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwiebrc3f.py\"\
    , line 48, in correct_bracketing\n    bracket\nNameError: name 'bracket' is not\
    \ defined. Did you mean: 'brackets'?\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == \"<\":\n            stack.append(c)\n\
    \        elif c == \">\":\n            if not stack:\n                return False\n\
    \            stack.pop()\n    return not stack\n\n\ndef check(candidate):\n  \
    \  assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n  \
    \  assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == '<':\n            stack.append(c)\n \
    \       elif c == '>':\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert\
    \ candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n\
    \    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>')\
    \ == False\n    assert candidate('><<>') == False\n    assert candidate('<') ==\
    \ False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n\
    \    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets =\
    \ brackets.replace(\"<\", \"\").replace(\">\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8x24bkb3.py\"\
    , line 48\n    brackets = brackets.\n                        ^\nSyntaxError: invalid\
    \ syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for char in brackets:\n        if char == \"<\":\n            stack.append(char)\n\
    \        elif char == \">\":\n            if not stack:\n                return\
    \ False\n            else:\n                stack.pop()\n    return not stack\n\
    \n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == '<':\n            stack.append(c)\n \
    \       elif c == '>':\n            if not stack:\n                return False\n\
    \            if stack.pop() != '<':\n                return False\n    return\
    \ not stack\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n \
    \   assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') ==\
    \ True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == '<':\n            stack.append(c)\n \
    \       elif c == '>':\n            if not stack:\n                return False\n\
    \            top = stack.pop()\n            if top != c:\n                return\
    \ False\n    return not stack\n\n\ndef check(candidate):\n    assert candidate('<>')\
    \ == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl4cnnav3.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl4cnnav3.py\"\
    , line 34, in test_check\n    check(correct_bracketing)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl4cnnav3.py\"\
    , line 20, in check\n    assert candidate('<>') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for char in brackets:\n        if char == \"<\":\n            stack.append(char)\n\
    \        elif char == \">\":\n            if not stack:\n                return\
    \ False\n            stack.pop()\n    return not stack\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == \"<\":\n            stack.append(c)\n\
    \        elif c == \">\":\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert\
    \ candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n\
    \    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>')\
    \ == False\n    assert candidate('><<>') == False\n    assert candidate('<') ==\
    \ False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n\
    \    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == '<':\n            stack.append(c)\n \
    \       elif c == '>':\n            if not stack:\n                return False\n\
    \            top = stack.pop()\n            if top != c:\n                return\
    \ False\n    return not stack\n\n\ndef check(candidate):\n    assert candidate('<>')\
    \ == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3lrhcr6h.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3lrhcr6h.py\"\
    , line 34, in test_check\n    check(correct_bracketing)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3lrhcr6h.py\"\
    , line 20, in check\n    assert candidate('<>') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for char in brackets:\n        if char == '<':\n            stack.append(char)\n\
    \        elif char == '>':\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert\
    \ candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n\
    \    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>')\
    \ == False\n    assert candidate('><<>') == False\n    assert candidate('<') ==\
    \ False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n\
    \    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets =\
    \ brackets.replace(\"<\", \"\").replace(\">\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\").replace(\":\", \"\")\n\
    \    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\").replace(\":\", \"\")\n\
    \    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\").replace(\":\", \"\")\n\
    \    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\").replace(\":\", \"\")\n\
    \    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\").replace(\":\", \"\")\n\
    \    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"\
    ]\", \"\")\n    brackets = bracket\ndef check(candidate):\n    assert candidate('<>')\
    \ == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprvhskzpg.py\"\
    , line 72, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprvhskzpg.py\"\
    , line 70, in test_check\n    check(correct_bracketing)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprvhskzpg.py\"\
    , line 56, in check\n    assert candidate('<>') == True\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprvhskzpg.py\"\
    , line 54, in correct_bracketing\n    brackets = bracket\nNameError: name 'bracket'\
    \ is not defined. Did you mean: 'brackets'?\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == \"<\":\n            stack.append(c)\n\
    \        elif c == \">\":\n            if not stack:\n                return False\n\
    \            stack.pop()\n    return not stack\n\n\ndef check(candidate):\n  \
    \  assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n  \
    \  assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets =\
    \ brackets.replace(\"<\", \"\").replace(\">\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkvwfytv4.py\"\
    , line 48\n    brackets = brackets.\n                        ^\nSyntaxError: invalid\
    \ syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets =\
    \ brackets.replace(\"<\", \"\").replace(\">\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0rdtoswn.py\"\
    , line 48\n    brackets = brackets.replace(\"\n                              \
    \  ^\nSyntaxError: unterminated string literal (detected at line 48)\n"
  exit_code: 1
  status: SyntaxError
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == \"<\":\n            stack.append(c)\n\
    \        elif c == \">\":\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n        else:\n     \
    \       return False\n    return len(stack) == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == \"<\":\n            stack.append(c)\n\
    \        elif c == \">\":\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert\
    \ candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n\
    \    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>')\
    \ == False\n    assert candidate('><<>') == False\n    assert candidate('<') ==\
    \ False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n\
    \    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets =\
    \ brackets.replace(\"<\", \"\").replace(\">\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4maqrlu0.py\"\
    , line 48\n    brackets = brackets.replace(\"\n                              \
    \  ^\nSyntaxError: unterminated string literal (detected at line 48)\n"
  exit_code: 1
  status: SyntaxError
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets_set\
    \ = set(brackets)\n    open_brackets = brackets_set.difference({\"<\", \">\"})\n\
    \    close_brackets = brackets_set.difference({\"<\", \">\"})\n    return len(open_brackets)\
    \ == 0 and len(close_brackets) == 0\n\n\ndef check(candidate):\n    assert candidate('<>')\
    \ == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpujnd0ky4.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpujnd0ky4.py\"\
    , line 27, in test_check\n    check(correct_bracketing)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpujnd0ky4.py\"\
    , line 17, in check\n    assert candidate('<<<><>>>>') == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == \"<\":\n            stack.append(c)\n\
    \        elif c == \">\":\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert\
    \ candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n\
    \    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>')\
    \ == False\n    assert candidate('><<>') == False\n    assert candidate('<') ==\
    \ False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n\
    \    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == '<':\n            stack.append(c)\n \
    \       elif c == '>':\n            if not stack:\n                return False\n\
    \            top = stack.pop()\n            if top != c:\n                return\
    \ False\n    return not stack\n\n\ndef check(candidate):\n    assert candidate('<>')\
    \ == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4hnbxmuc.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4hnbxmuc.py\"\
    , line 34, in test_check\n    check(correct_bracketing)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4hnbxmuc.py\"\
    , line 20, in check\n    assert candidate('<>') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == '<':\n            stack.append(c)\n \
    \       elif c == '>':\n            if not stack:\n                return False\n\
    \            top = stack.pop()\n            if top != c:\n                return\
    \ False\n    return not stack\n\n\ndef check(candidate):\n    assert candidate('<>')\
    \ == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9rr9xtkc.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9rr9xtkc.py\"\
    , line 34, in test_check\n    check(correct_bracketing)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9rr9xtkc.py\"\
    , line 20, in check\n    assert candidate('<>') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for char in brackets:\n        if char == '<':\n            stack.append(char)\n\
    \        elif char == '>':\n            if not stack:\n                return\
    \ False\n            top = stack.pop()\n            if top != char:\n        \
    \        return False\n    return not stack\n\n\ndef check(candidate):\n    assert\
    \ candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert\
    \ candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqaiolk5o.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqaiolk5o.py\"\
    , line 34, in test_check\n    check(correct_bracketing)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqaiolk5o.py\"\
    , line 20, in check\n    assert candidate('<>') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == \"<\":\n            stack.append(c)\n\
    \        elif c == \">\":\n            if not stack:\n                return False\n\
    \            top = stack.pop()\n            if top != c:\n                return\
    \ False\n    return not stack\n\n\ndef check(candidate):\n    assert candidate('<>')\
    \ == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3fjz_j8f.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3fjz_j8f.py\"\
    , line 34, in test_check\n    check(correct_bracketing)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3fjz_j8f.py\"\
    , line 20, in check\n    assert candidate('<>') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == \"<\":\n            stack.append(c)\n\
    \        elif c == \">\":\n            if not stack:\n                return False\n\
    \            top = stack.pop()\n            if top != c:\n                return\
    \ False\n    return not stack\n\n\ndef check(candidate):\n    assert candidate('<>')\
    \ == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxm8m_rbh.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxm8m_rbh.py\"\
    , line 34, in test_check\n    check(correct_bracketing)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxm8m_rbh.py\"\
    , line 20, in check\n    assert candidate('<>') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets =\
    \ brackets.replace(\"<\", \"\").replace(\">\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    '\", \"\")\n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    '\", \"\")\n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    '\", \"\")\n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    '\", \"\")\n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    '\", \"\")\n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    '\", \"\")\n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    '\", \"\")\n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    '\", \"\")\n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = \ndef\
    \ check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpb3yzpt9o.py\"\
    , line 61\n    brackets = \n               ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets =\
    \ brackets.replace(\"<\", \"\").replace(\">\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\")\n    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    '\", \"\")\n    brackets = brackets.replace(\"\\\"\", \"\")\n    brackets = brackets.replace(\"\
    %\", \"\")\n    brackets = brackets.replace(\"^\", \"\")\n    brackets = brackets.replace(\"\
    &\", \"\")\n    brackets = brackets.replace(\"*\", \"\")\n    brackets = brackets.replace(\"\
    +\", \"\")\n    brackets = brackets.replace(\"-\", \"\")\n    brackets = brackets.replace(\"\
    =\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\")\n    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    '\", \"\")\n    brackets = brackets.replace(\"\\\"\", \"\")\n    brackets = brackets.replace(\"\
    %\", \"\")\n    brackets = brackets.replace(\"^\", \"\")\n    brackets = brackets.replace(\"\
    &\", \"\")\n    brackets = brackets.replace(\"*\", \"\")\n    brackets = brackets.replace(\"\
    +\", \"\")\n    brackets = brackets.replace(\"-\", \"\")\n    brackets = brackets.replace(\"\
    =\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\")\n    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    '\", \"\")\n    brackets = brackets.replace(\"\\\"\", \"\")\n    brackets = brackets.replace(\"\
    %\", \"\")\n    brackets = brackets.replace(\"^\", \"\")\n    brackets = brackets.replace(\"\
    &\", \"\")\n    brackets = brackets.replace(\"*\", \"\")\n    brackets = brackets.replace(\"\
    +\", \"\")\n    brackets = brackets.replace(\"-\", \"\")\n    brackets = brackets.replace(\"\
    =\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\")\n    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    '\", \"\")\n    brackets = brackets.replace(\"\\\"\", \"\")\n    brackets = brackets.replace(\"\
    %\", \"\")\n    brackets = brackets.\ndef check(candidate):\n    assert candidate('<>')\
    \ == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8pjrfu52.py\"\
    , line 60\n    brackets = brackets.\n                        ^\nSyntaxError: invalid\
    \ syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets =\
    \ brackets.replace(\"<\", \"\").replace(\">\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\").replace(\")\ndef check(candidate):\n    assert candidate('<>') == True\n\
    \    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw412mkmd.py\"\
    , line 47\n    brackets = brackets.replace(\"(\", \"\").replace(\")\n        \
    \                                         ^\nSyntaxError: unterminated string\
    \ literal (detected at line 47)\n"
  exit_code: 1
  status: SyntaxError
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == \"<\":\n            stack.append(c)\n\
    \        elif c == \">\":\n            if not stack:\n                return False\n\
    \            stack.pop()\n    return not stack\n\n\ndef check(candidate):\n  \
    \  assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n  \
    \  assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == '<':\n            stack.append(c)\n \
    \       elif c == '>':\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert\
    \ candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n\
    \    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>')\
    \ == False\n    assert candidate('><<>') == False\n    assert candidate('<') ==\
    \ False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n\
    \    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets =\
    \ brackets.replace(\"<\", \"\").replace(\"<\", \"\").replace(\">\", \"\").replace(\"\
    >\", \"\")\n    brackets = brackets.replace(\"<\", \"\").replace(\"<\", \"\").replace(\"\
    >\", \"\").replace(\">\", \"\")\n    brackets = brackets.replace(\"<\", \"\").replace(\"\
    <\", \"\").replace(\">\", \"\").replace(\">\", \"\")\n    brackets = brackets.replace(\"\
    <\", \"\").replace(\"<\", \"\").replace(\">\", \"\").replace(\">\", \"\")\n  \
    \  brackets = brackets.replace(\"<\", \"\").replace(\"<\", \"\").replace(\">\"\
    , \"\").replace(\">\", \"\")\n    brackets = brackets.replace(\"<\", \"\").replace(\"\
    <\", \"\").replace(\">\", \"\").replace(\">\", \"\")\n    brackets = brackets.replace(\"\
    <\", \"\").replace(\"<\", \"\").replace(\">\", \"\").replace(\">\", \"\")\n  \
    \  brackets = brackets.replace(\"<\", \"\").replace(\"<\", \"\").replace(\">\"\
    , \"\").replace(\">\", \"\")\n    brackets = brackets.replace(\"<\", \"\").replace(\"\
    <\", \"\").replace(\">\", \"\").replace(\">\", \"\")\n    brackets = brackets.replace(\"\
    <\", \"\").replace(\"<\", \"\").replace(\">\", \"\").replace(\">\", \"\")\n  \
    \  brackets = brackets.replace(\"<\", \"\").replace(\"<\", \"\").replace(\">\"\
    , \"\").replace(\">\", \"\")\n    brackets = brackets.replace(\"<\", \"\").replace(\"\
    <\", \"\").replace(\">\", \"\").replace(\">\", \"\")\n    brackets = brackets.replace(\"\
    <\", \"\").replace(\"<\", \"\").replace(\">\", \"\").replace(\">\", \"\")\n  \
    \  brackets = brackets.replace(\"<\", \"\").replace(\"<\", \"\").replace(\">\"\
    , \"\").replace(\">\", \"\")\n    brackets = brackets.replace(\"<\", \"\").replace(\"\
    <\", \"\").replace(\">\", \"\").replace(\">\", \"\")\n    brackets = brackets.replace(\"\
    <\", \"\").replace(\"<\", \"\").replace(\">\", \"\").replace(\">\", \"\")\n  \
    \  brackets = brackets.replace(\"<\", \"\").replace(\"<\", \"\").replace(\">\"\
    , \"\").replace(\">\", \"\")\n    brackets = brackets.replace(\"<\", \"\").replace(\"\
    <\", \"\").replace(\">\", \"\").replace(\">\", \"\")\n    brackets = brackets.replace(\"\
    <\", \"\").replace(\"<\", \"\").replace(\">\", \"\").replace(\">\", \"\")\n  \
    \  brackets = brackets.replace(\"<\", \"\").replace(\"<\", \"\").replace(\">\"\
    , \"\").replace(\">\", \"\")\n    brackets = brackets.replace(\"<\", \"\").replace(\"\
    <\", \"\").replace(\">\", \"\").replace(\">\", \"\")\n    brackets = brackets.replace(\"\
    <\", \"\").replace(\"<\", \"\").replace(\">\", \"\").replace(\">\", \"\")\n  \
    \  brackets = brackets.replace(\"<\", \"\").replace(\"<\", \"\").replace(\">\"\
    , \"\").replace(\">\", \"\")\n    brackets = brackets.replace(\"<\", \"\").replace(\"\
    <\", \"\").replace(\">\", \"\").replace(\">\", \"\")\n    brackets = brackets.replace(\"\
    <\", \"\").replace(\"<\", \"\").replace(\">\", \"\").replace(\">\", \"\")\n  \
    \  brackets = brackets.replace(\"<\", \"\").replace(\"<\", \"\").replace(\">\"\
    , \"\").replace(\">\", \"\")\n    brackets = brackets.replace(\"<\", \"\").replace(\"\
    <\", \"\").replace(\">\", \"\").replace(\">\", \"\")\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgpxwwdyy.py\"\
    , line 50, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgpxwwdyy.py\"\
    , line 48, in test_check\n    check(correct_bracketing)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgpxwwdyy.py\"\
    , line 34, in check\n    assert candidate('<>') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == \"<\":\n            stack.append(c)\n\
    \        elif c == \">\":\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert\
    \ candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n\
    \    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>')\
    \ == False\n    assert candidate('><<>') == False\n    assert candidate('<') ==\
    \ False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n\
    \    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == \"<\":\n            stack.append(c)\n\
    \        elif c == \">\":\n            if not stack:\n                return False\n\
    \            top = stack.pop()\n            if top != c:\n                return\
    \ False\n    return not stack\n\n\ndef check(candidate):\n    assert candidate('<>')\
    \ == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy8brj3yq.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy8brj3yq.py\"\
    , line 34, in test_check\n    check(correct_bracketing)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy8brj3yq.py\"\
    , line 20, in check\n    assert candidate('<>') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets =\
    \ brackets.replace(\"<\", \"\").replace(\">\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsg8bkkg1.py\"\
    , line 48\n    brackets = brackets.\n                        ^\nSyntaxError: invalid\
    \ syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for char in brackets:\n        if char == \"<\":\n            stack.append(char)\n\
    \        elif char == \">\":\n            if not stack:\n                return\
    \ False\n            stack.pop()\n    return not stack\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == '<':\n            stack.append(c)\n \
    \       elif c == '>':\n            if not stack:\n                return False\n\
    \            top = stack.pop()\n            if top != c:\n                return\
    \ False\n    return not stack\n\n\ndef check(candidate):\n    assert candidate('<>')\
    \ == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpns28p5y_.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpns28p5y_.py\"\
    , line 34, in test_check\n    check(correct_bracketing)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpns28p5y_.py\"\
    , line 20, in check\n    assert candidate('<>') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == '<':\n            stack.append(c)\n \
    \       elif c == '>':\n            if not stack:\n                return False\n\
    \            top = stack.pop()\n            if top != c:\n                return\
    \ False\n    return not stack\n\n\ndef check(candidate):\n    assert candidate('<>')\
    \ == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4xto_557.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4xto_557.py\"\
    , line 34, in test_check\n    check(correct_bracketing)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4xto_557.py\"\
    , line 20, in check\n    assert candidate('<>') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets =\
    \ brackets.replace(\"<\", \"\").replace(\">\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\").replace(\":\", \"\")\n\
    \    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\"'\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\").replace(\":\", \"\")\n    brackets = brackets.replace(\"!\", \"\")\n\
    \    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    '\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\").replace(\":\", \"\")\n\
    \    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\"'\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\").replace(\":\", \"\")\n    brackets = brackets.replace(\"!\", \"\")\n\
    \    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    '\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\").replace(\":\", \"\")\n\
    \    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\"'\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\").replace(\":\", \"\")\n    brackets = brackets.replace(\"!\", \"\")\n\
    \    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    '\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\").replace(\":\", \"\")\n\
    \    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\"'\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\").replace(\":\", \"\")\n    brackets = brackets.replace(\"!\", \"\")\n\
    \    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    '\", \"\")\n    brackets = brackets.replace(\"\ndef check(candidate):\n    assert\
    \ candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert\
    \ candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu4uqx0ui.py\"\
    , line 58\n    brackets = brackets.replace(\"\n                              \
    \  ^\nSyntaxError: unterminated string literal (detected at line 58)\n"
  exit_code: 1
  status: SyntaxError
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == \"<\":\n            stack.append(c)\n\
    \        elif c == \">\":\n            if not stack:\n                return False\n\
    \            top = stack.pop()\n            if top != c:\n                return\
    \ False\n    return not stack\n\n\ndef check(candidate):\n    assert candidate('<>')\
    \ == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8kevmbo9.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8kevmbo9.py\"\
    , line 34, in test_check\n    check(correct_bracketing)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8kevmbo9.py\"\
    , line 20, in check\n    assert candidate('<>') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for char in brackets:\n        if char == \"<\":\n            stack.append(char)\n\
    \        elif char == \">\":\n            if len(stack) == 0:\n              \
    \  return False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert\
    \ candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n\
    \    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>')\
    \ == False\n    assert candidate('><<>') == False\n    assert candidate('<') ==\
    \ False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n\
    \    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == \"<\":\n            stack.append(c)\n\
    \        elif c == \">\":\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert\
    \ candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n\
    \    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>')\
    \ == False\n    assert candidate('><<>') == False\n    assert candidate('<') ==\
    \ False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n\
    \    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == '<':\n            stack.append(c)\n \
    \       elif c == '>':\n            if not stack:\n                return False\n\
    \            top = stack.pop()\n            if top != c:\n                return\
    \ False\n    return not stack\n\n\ndef check(candidate):\n    assert candidate('<>')\
    \ == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa5df0bin.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa5df0bin.py\"\
    , line 34, in test_check\n    check(correct_bracketing)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa5df0bin.py\"\
    , line 20, in check\n    assert candidate('<>') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets_set\
    \ = set(brackets)\n    opening_brackets = {x for x in brackets_set if brackets.count(x)\
    \ == 1}\n    closing_brackets = {x for x in brackets_set if brackets.count(x)\
    \ == 2}\n    return len(opening_brackets) == len(closing_brackets)\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfp7ikkgd.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfp7ikkgd.py\"\
    , line 27, in test_check\n    check(correct_bracketing)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfp7ikkgd.py\"\
    , line 13, in check\n    assert candidate('<>') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets =\
    \ brackets.replace(\"<\", \"\").replace(\">\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\",\", \"\").replace(\";\", \"\")\n    brackets\
    \ = brackets.replace(\":\", \"\").replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\").replace(\"!\", \"\")\n    brackets = brackets.replace(\"?\", \"\").replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\",\", \"\").replace(\";\", \"\")\n\
    \    brackets = brackets.replace(\":\", \"\").replace(\":\", \"\")\n    brackets\
    \ = brackets.replace(\"!\", \"\").replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\").replace(\"?\", \"\")\n    brackets = brackets.replace(\",\", \"\").replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\").replace(\":\", \"\")\n\
    \    brackets = brackets.replace(\"!\", \"\").replace(\"!\", \"\")\n    brackets\
    \ = brackets.replace(\"?\", \"\").replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\").replace(\";\", \"\")\n    brackets = brackets.replace(\":\", \"\").replace(\"\
    :\", \"\")\n    brackets = brackets.replace(\"!\", \"\").replace(\"!\", \"\")\n\
    \    brackets = brackets.replace(\"?\", \"\").replace(\"?\", \"\")\n    brackets\
    \ = brackets.replace(\",\", \"\").replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\").replace(\":\", \"\")\n    brackets = brackets.replace(\"!\", \"\").replace(\"\
    !\", \"\")\n    brackets = brackets.replace(\"?\", \"\").replace(\"?\", \"\")\n\
    \    brackets = brackets.replace(\",\", \"\").replace(\";\", \"\")\n    brackets\
    \ = brackets.replace(\":\", \"\").replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\").replace(\"!\", \"\")\n    brackets = brackets.replace(\"?\", \"\").replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\",\", \"\").replace(\";\", \"\")\n\
    \    brackets = brackets.replace(\":\", \"\").replace(\":\", \"\")\n    brackets\
    \ = brackets.replace(\"!\", \"\").replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\").replace(\"?\", \"\")\n    brackets = brackets.replace(\",\", \"\").replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\").replace(\":\", \"\")\n\
    \    brackets = brackets.replace(\"!\", \"\").replace(\"!\", \"\")\n    brackets\
    \ = brackets.replace(\"?\", \"\").replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\").replace(\";\", \"\")\n    brackets = brackets.replace(\":\", \"\").replace(\"\
    :\", \"\")\n    brackets = brackets.replace(\"!\", \"\").replace(\"!\", \"\")\n\
    \    brackets = brackets.replace(\"?\", \"\").replace(\"?\", \"\")\n    brackets\
    \ = brackets.replace(\",\", \"\").replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\").replace(\":\", \"\")\n    brackets = brackets.replace(\"!\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplahysgjn.py\"\
    , line 48\n    brackets = brackets.replace(\"!\n                             \
    \   ^\nSyntaxError: unterminated string literal (detected at line 48)\n"
  exit_code: 1
  status: SyntaxError
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets =\
    \ brackets.replace(\"<\", \"\").replace(\">\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\").replace(\":\", \"\")\n\
    \    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\"%\", \"\")\n    brackets = brackets.replace(\"\
    $\", \"\")\n    brackets = brackets.replace(\"@\", \"\")\n    brackets = brackets.replace(\"\
    ^\", \"\")\n    brackets = brackets.replace(\"&\", \"\")\n    brackets = brackets.replace(\"\
    *\", \"\")\n    brackets = brackets.replace(\"(\", \"\").replace(\")\", \"\")\n\
    \    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\").replace(\":\", \"\")\n    brackets = brackets.replace(\"!\", \"\")\n\
    \    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    %\", \"\")\n    brackets = brackets.replace(\"$\", \"\")\n    brackets = brackets.replace(\"\
    @\", \"\")\n    brackets = brackets.replace(\"^\", \"\")\n    brackets = brackets.replace(\"\
    &\", \"\")\n    brackets = brackets.replace(\"*\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\").replace(\":\", \"\")\n\
    \    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\"%\", \"\")\n    brackets = brackets.replace(\"\
    $\", \"\")\n    brackets = brackets.replace(\"@\", \"\")\n    brackets = brackets.replace(\"\
    ^\", \"\")\n    brackets = brackets.replace(\"&\", \"\")\n    brackets = brackets.replace(\"\
    *\", \"\")\n    brackets = brackets.replace(\"(\", \"\").replace(\")\", \"\")\n\
    \    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\").replace(\":\", \"\")\n    brackets = brackets.replace(\"!\", \"\")\n\
    \    brackets = brackets.replace(\"\ndef check(candidate):\n    assert candidate('<>')\
    \ == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp00f_6qly.py\"\
    , line 56\n    brackets = brackets.replace(\"\n                              \
    \  ^\nSyntaxError: unterminated string literal (detected at line 56)\n"
  exit_code: 1
  status: SyntaxError
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets =\
    \ brackets.replace(\"<\", \"\").replace(\"<\", \"\").replace(\">\", \"\").replace(\"\
    >\", \"\")\n    brackets = brackets.replace(\"(\", \"\").replace(\")\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2686qvpy.py\"\
    , line 66, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2686qvpy.py\"\
    , line 64, in test_check\n    check(correct_bracketing)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2686qvpy.py\"\
    , line 50, in check\n    assert candidate('<>') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets =\
    \ brackets.replace(\"<\", \"\").replace(\"<\", \"\").replace(\">\", \"\").replace(\"\
    )\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"(\", \"\").replace(\"\
    )\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets\
    \ = brackets.replace(\",\", \"\").replace(\";\", \"\").replace(\":\", \"\")\n\
    \    brackets = brackets.replace(\"!\", \"\").replace(\"?\", \"\").replace(\"\
    ,\", \"\").replace(\";\", \"\").replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    '\", \"\").replace(\"\\\"\", \"\")\n    brackets = brackets.replace(\"[\", \"\"\
    ).replace(\"]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"(\", \"\").replace(\")\", \"\")\n\
    \    brackets = brackets.replace(\",\", \"\").replace(\";\", \"\").replace(\"\
    :\", \"\")\n    brackets = brackets.replace(\"!\", \"\").replace(\"?\", \"\").replace(\"\
    ,\", \"\").replace(\";\", \"\").replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    '\", \"\").replace(\"\\\"\", \"\")\n    brackets = brackets.replace(\"[\", \"\"\
    ).replace(\"]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"(\", \"\").replace(\")\", \"\")\n\
    \    brackets = brackets.replace(\",\", \"\").replace(\";\", \"\").replace(\"\
    :\", \"\")\n    brackets = brackets.replace(\"!\", \"\").replace(\"?\", \"\").replace(\"\
    ,\", \"\").replace(\";\", \"\").replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    '\", \"\").replace(\"\\\"\", \"\")\n    brackets = brackets.replace(\"[\", \"\"\
    ).replace(\"]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"(\", \"\").replace(\")\", \"\")\n\
    \    brackets = brackets.replace(\",\", \"\").replace(\";\", \"\").replace(\"\
    :\", \"\")\n    brackets = brackets.replace(\"!\", \"\").replace(\"?\", \"\").replace(\"\
    ,\", \"\").replace(\";\", \"\").replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    '\", \"\").replace(\"\\\"\", \"\")\n    brackets = brackets.replace(\"[\", \"\"\
    ).replace(\"]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"(\", \"\").replace(\")\", \"\")\n\
    \    brackets = brackets.replace(\",\", \"\").replace(\";\", \"\").replace(\"\
    :\", \"\")\n    brackets = brackets.replace(\"!\", \"\").replace(\"?\", \"\").replace(\"\
    ,\", \"\").replace(\";\", \"\").replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    '\", \"\").replace(\"\\\"\", \"\")\n    brackets = brackets.replace(\"[\", \"\"\
    ).replace(\"]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"(\", \"\").replace(\")\", \"\")\n\
    \    brackets = brackets.replace(\",\", \"\").replace(\";\", \"\").replace(\"\
    :\", \"\")\n    brackets = brackets.replace(\"!\", \"\"\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5lzvypem.py\"\
    , line 41\n    brackets = brackets.replace(\"!\", \"\"\n                     \
    \          ^\nSyntaxError: '(' was never closed\n"
  exit_code: 1
  status: SyntaxError
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == '<':\n            stack.append(c)\n \
    \       elif c == '>':\n            if not stack:\n                return False\n\
    \            top = stack.pop()\n            if top != c:\n                return\
    \ False\n    return not stack\n\n\ndef check(candidate):\n    assert candidate('<>')\
    \ == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz9lfoowg.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz9lfoowg.py\"\
    , line 34, in test_check\n    check(correct_bracketing)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz9lfoowg.py\"\
    , line 20, in check\n    assert candidate('<>') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets =\
    \ brackets.replace(\"<\", \"\").replace(\">\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\")\n    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\"'\", \"\").replace(\"\\\"\", \"\"\
    )\n    brackets = brackets.replace(\"%\", \"\")\n    brackets = brackets.replace(\"\
    $\", \"\")\n    brackets = brackets.replace(\"&\", \"\")\n    brackets = brackets.replace(\"\
    *\", \"\")\n    brackets = brackets.replace(\"+\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\")\n    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\"'\", \"\").replace(\"\\\"\", \"\"\
    )\n    brackets = brackets.replace(\"%\", \"\")\n    brackets = brackets.replace(\"\
    $\", \"\")\n    brackets = brackets.replace(\"&\", \"\")\n    brackets = brackets.replace(\"\
    *\", \"\")\n    brackets = brackets.replace(\"+\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\")\n    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\"'\", \"\").replace(\"\\\"\", \"\"\
    )\n    brackets = brackets.replace(\"%\", \"\")\n    brackets = brackets.replace(\"\
    $\", \"\")\n    brackets = brackets.replace(\"&\", \"\")\n    brackets = brackets.replace(\"\
    *\", \"\")\n    brackets = brackets.replace(\"+\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    \ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpk3_qs96o.py\"\
    , line 56\n    brackets = brackets.replace(\"\n                              \
    \  ^\nSyntaxError: unterminated string literal (detected at line 56)\n"
  exit_code: 1
  status: SyntaxError
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == \"<\":\n            stack.append(c)\n\
    \        elif c == \">\":\n            if not stack:\n                return False\n\
    \            top = stack.pop()\n            if top != c:\n                return\
    \ False\n    return not stack\n\n\ndef check(candidate):\n    assert candidate('<>')\
    \ == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvqte40ha.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvqte40ha.py\"\
    , line 34, in test_check\n    check(correct_bracketing)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvqte40ha.py\"\
    , line 20, in check\n    assert candidate('<>') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == \"<\":\n            stack.append(c)\n\
    \        elif c == \">\":\n            if not stack:\n                return False\n\
    \            top = stack.pop()\n            if top != c:\n                return\
    \ False\n    return not stack\n\n\ndef check(candidate):\n    assert candidate('<>')\
    \ == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn6p221cr.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn6p221cr.py\"\
    , line 34, in test_check\n    check(correct_bracketing)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn6p221cr.py\"\
    , line 20, in check\n    assert candidate('<>') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets_set\
    \ = set(brackets)\n    opening_brackets_set = set([\"<\", \">\"])\n    closing_brackets_set\
    \ = set([\"<\", \">\"])\n    opening_brackets = brackets_set - opening_brackets_set\n\
    \    closing_brackets = brackets_set - closing_brackets_set\n    return len(opening_brackets)\
    \ == 0 and len(closing_brackets) == 0\n\n\ndef check(candidate):\n    assert candidate('<>')\
    \ == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp96e2pc0w.py\"\
    , line 31, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp96e2pc0w.py\"\
    , line 29, in test_check\n    check(correct_bracketing)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp96e2pc0w.py\"\
    , line 19, in check\n    assert candidate('<<<><>>>>') == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == '<':\n            stack.append(c)\n \
    \       elif c == '>':\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n        else:\n     \
    \       return False\n    return True\n\n\ndef check(candidate):\n    assert candidate('<>')\
    \ == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpr2imxm1s.py\"\
    , line 37, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpr2imxm1s.py\"\
    , line 35, in test_check\n    check(correct_bracketing)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpr2imxm1s.py\"\
    , line 27, in check\n    assert candidate('<') == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == '<':\n            stack.append(c)\n \
    \       elif c == '>':\n            if not stack:\n                return False\n\
    \            top = stack.pop()\n            if top != c:\n                return\
    \ False\n    return not stack\n\n\ndef check(candidate):\n    assert candidate('<>')\
    \ == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprlshkh1c.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprlshkh1c.py\"\
    , line 34, in test_check\n    check(correct_bracketing)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprlshkh1c.py\"\
    , line 20, in check\n    assert candidate('<>') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == '<':\n            stack.append(c)\n \
    \       elif c == '>':\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n        else:\n     \
    \       return False\n    return len(stack) == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == \"<\":\n            stack.append(c)\n\
    \        elif c == \">\":\n            if not stack:\n                return False\n\
    \            else:\n                stack.pop()\n    return not stack\n\n\ndef\
    \ check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == \"<\":\n            stack.append(c)\n\
    \        elif c == \">\":\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert\
    \ candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n\
    \    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>')\
    \ == False\n    assert candidate('><<>') == False\n    assert candidate('<') ==\
    \ False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n\
    \    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == \"<\":\n            stack.append(c)\n\
    \        elif c == \">\":\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n        else:\n     \
    \       return False\n    return len(stack) == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == \"<\":\n            stack.append(c)\n\
    \        elif c == \">\":\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert\
    \ candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n\
    \    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>')\
    \ == False\n    assert candidate('><<>') == False\n    assert candidate('<') ==\
    \ False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n\
    \    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets_set\
    \ = set(brackets)\n    stack = []\n    for c in brackets:\n        if c == '<':\n\
    \            stack.append(c)\n        elif c == '>':\n            if not stack:\n\
    \                return False\n            top = stack.pop()\n            if top\
    \ != c:\n                return False\n    return not stack\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4dp803xx.py\"\
    , line 37, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4dp803xx.py\"\
    , line 35, in test_check\n    check(correct_bracketing)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4dp803xx.py\"\
    , line 21, in check\n    assert candidate('<>') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets =\
    \ brackets.replace(\"<\", \"\").replace(\"<\", \"\").replace(\">\", \"\").replace(\"\
    >\", \"\")\n    brackets = brackets.replace(\"(\", \"\").replace(\")\", \"\")\n\
    \    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\").replace(\":\", \"\")\n    brackets = brackets.replace(\";\", \"\").replace(\"\
    \\n\", \"\")\n    brackets = brackets.replace(\"\\t\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\")\n    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    %\", \"\")\n    brackets = brackets.replace(\"$\", \"\")\n    brackets = brackets.replace(\"\
    &\", \"\")\n    brackets = brackets.replace(\"*\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\",\", \"\").replace(\":\", \"\")\n    brackets\
    \ = brackets.replace(\";\", \"\").replace(\"\\n\", \"\")\n    brackets = brackets.replace(\"\
    \\t\", \"\")\n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\"%\", \"\")\n    brackets = brackets.replace(\"\
    $\", \"\")\n    brackets = brackets.replace(\"&\", \"\")\n    brackets = brackets.replace(\"\
    *\", \"\")\n    brackets = brackets.replace(\"(\", \"\").replace(\")\", \"\")\n\
    \    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\").replace(\":\", \"\")\n    brackets = brackets.replace(\";\", \"\").replace(\"\
    \\n\", \"\")\n    brackets = brackets.replace(\"\\t\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\")\n    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    %\", \"\")\n    brackets = brackets.replace(\"$\", \"\")\n    brackets = brackets.replace(\"\
    &\", \"\")\n    brackets = brackets.replace(\"*\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\",\", \"\").replace(\":\", \"\")\n    brackets\
    \ = brackets.replace(\";\", \"\").replace(\"\\n\", \"\")\n    brackets = brackets.replace(\"\
    \\t\", \"\")\n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\"%\", \"\")\n    brackets = brackets.replace(\"\
    $\", \"\")\n    brackets = brackets.replace(\"&\", \"\")\n    brackets = brackets.replace(\"\
    \ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjn8rql4y.py\"\
    , line 54\n    brackets = brackets.replace(\"\n                              \
    \  ^\nSyntaxError: unterminated string literal (detected at line 54)\n"
  exit_code: 1
  status: SyntaxError
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets_set\
    \ = set(brackets)\n    stack = []\n    for c in brackets:\n        if c == \"\
    <\":\n            stack.append(c)\n        elif c == \">\":\n            if not\
    \ stack:\n                return False\n            stack.pop()\n    return not\
    \ stack\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert\
    \ candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n\
    \    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>')\
    \ == False\n    assert candidate('><<>') == False\n    assert candidate('<') ==\
    \ False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n\
    \    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets_set\
    \ = set(brackets)\n    opening_brackets = brackets_set.difference('>')\n    closing_brackets\
    \ = brackets_set.difference('<')\n    return len(opening_brackets) == 0 and len(closing_brackets)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert\
    \ candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n\
    \    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>')\
    \ == False\n    assert candidate('><<>') == False\n    assert candidate('<') ==\
    \ False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n\
    \    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpj3uyvlqj.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpj3uyvlqj.py\"\
    , line 27, in test_check\n    check(correct_bracketing)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpj3uyvlqj.py\"\
    , line 13, in check\n    assert candidate('<>') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets =\
    \ brackets.strip()\n    opening_brackets = [x for x in brackets if x == \"<\"\
    ]\n    closing_brackets = [x for x in brackets if x == \">\"]\n    opening_brackets_set\
    \ = set(opening_brackets)\n    closing_brackets_set = set(closing_brackets)\n\
    \    return len(opening_brackets_set) == 1 and len(closing_brackets_set) == 1\n\
    \n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu5qnh254.py\"\
    , line 31, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu5qnh254.py\"\
    , line 29, in test_check\n    check(correct_bracketing)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu5qnh254.py\"\
    , line 19, in check\n    assert candidate('<<<><>>>>') == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets_set\
    \ = set(brackets)\n    open_brackets = {x for x in brackets_set if brackets.count(x)\
    \ == 1}\n    close_brackets = {x for x in brackets_set if brackets.count(x) >\
    \ 1}\n    return not (open_brackets or close_brackets)\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpthhv5dfh.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpthhv5dfh.py\"\
    , line 27, in test_check\n    check(correct_bracketing)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpthhv5dfh.py\"\
    , line 13, in check\n    assert candidate('<>') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == \"<\":\n            stack.append(c)\n\
    \        elif c == \">\":\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert\
    \ candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n\
    \    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>')\
    \ == False\n    assert candidate('><<>') == False\n    assert candidate('<') ==\
    \ False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n\
    \    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets =\
    \ brackets.replace(\"<\", \"\").replace(\">\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc93fjkwt.py\"\
    , line 48\n    brackets = brackets.\n                        ^\nSyntaxError: invalid\
    \ syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == '<':\n            stack.append(c)\n \
    \       elif c == '>':\n            if not stack:\n                return False\n\
    \            top = stack.pop()\n            if top != c:\n                return\
    \ False\n    return not stack\n\n\ndef check(candidate):\n    assert candidate('<>')\
    \ == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfk4684se.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfk4684se.py\"\
    , line 34, in test_check\n    check(correct_bracketing)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfk4684se.py\"\
    , line 20, in check\n    assert candidate('<>') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == '<':\n            stack.append(c)\n \
    \       elif c == '>':\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n        else:\n     \
    \       return False\n    if len(stack) == 0:\n        return True\n    else:\n\
    \        return False\n\ndef check(candidate):\n    assert candidate('<>') ==\
    \ True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == \"<\":\n            stack.append(c)\n\
    \        elif c == \">\":\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n        else:\n     \
    \       return False\n    return True\n\n\ndef check(candidate):\n    assert candidate('<>')\
    \ == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxyqwteod.py\"\
    , line 37, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxyqwteod.py\"\
    , line 35, in test_check\n    check(correct_bracketing)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxyqwteod.py\"\
    , line 27, in check\n    assert candidate('<') == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == '<':\n            stack.append(c)\n \
    \       elif c == '>':\n            if not stack:\n                return False\n\
    \            top = stack.pop()\n            if top != c:\n                return\
    \ False\n    return not stack\n\n\ndef check(candidate):\n    assert candidate('<>')\
    \ == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpiuqh78e7.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpiuqh78e7.py\"\
    , line 34, in test_check\n    check(correct_bracketing)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpiuqh78e7.py\"\
    , line 20, in check\n    assert candidate('<>') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets =\
    \ brackets.replace(\"<\", \"\").replace(\"<\", \"\").replace(\">\", \"\").replace(\"\
    >\", \"\")\n    brackets = brackets.replace(\"(\", \"\").replace(\")\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"(\", \"\").replace(\")\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"(\", \"\").replace(\")\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"(\", \"\").replace(\")\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"(\", \"\").replace(\")\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"(\", \"\").replace(\")\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"(\", \"\").replace(\")\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"(\", \"\").replace(\")\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"\
    ]\", \"\")\n    brackets = bracket\ndef check(candidate):\n    assert candidate('<>')\
    \ == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpk8cejay2.py\"\
    , line 65, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpk8cejay2.py\"\
    , line 63, in test_check\n    check(correct_bracketing)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpk8cejay2.py\"\
    , line 49, in check\n    assert candidate('<>') == True\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpk8cejay2.py\"\
    , line 47, in correct_bracketing\n    brackets = bracket\nNameError: name 'bracket'\
    \ is not defined. Did you mean: 'brackets'?\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == \"<\":\n            stack.append(c)\n\
    \        elif c == \">\":\n            if not stack:\n                return False\n\
    \            stack.pop()\n    return not stack\n\n\ndef check(candidate):\n  \
    \  assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n  \
    \  assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets =\
    \ brackets.replace(\"<\", \"\").replace(\"<\", \"\").replace(\">\", \"\").replace(\"\
    >\", \"\")\n    brackets = brackets.replace(\"<\", \"\").replace(\"<\", \"\").replace(\"\
    >\", \"\").replace(\">\", \"\")\n    brackets = brackets.replace(\"<\", \"\").replace(\"\
    <\", \"\").replace(\">\", \"\").replace(\">\", \"\")\n    brackets = brackets.replace(\"\
    <\", \"\").replace(\"<\", \"\").replace(\">\", \"\").replace(\">\", \"\")\n  \
    \  brackets = brackets.replace(\"<\", \"\").replace(\"<\", \"\").replace(\">\"\
    , \"\").replace(\">\", \"\")\n    brackets = brackets.replace(\"<\", \"\").replace(\"\
    <\", \"\").replace(\">\", \"\").replace(\">\", \"\")\n    brackets = brackets.replace(\"\
    <\", \"\").replace(\"<\", \"\").replace(\">\", \"\").replace(\">\", \"\")\n  \
    \  brackets = brackets.replace(\"<\", \"\").replace(\"<\", \"\").replace(\">\"\
    , \"\").replace(\">\", \"\")\n    brackets = brackets.replace(\"<\", \"\").replace(\"\
    <\", \"\").replace(\">\", \"\").replace(\">\", \"\")\n    brackets = brackets.replace(\"\
    <\", \"\").replace(\"<\", \"\").replace(\">\", \"\").replace(\">\", \"\")\n  \
    \  brackets = brackets.replace(\"<\", \"\").replace(\"<\", \"\").replace(\">\"\
    , \"\").replace(\">\", \"\")\n    brackets = brackets.replace(\"<\", \"\").replace(\"\
    <\", \"\").replace(\">\", \"\").replace(\">\", \"\")\n    brackets = brackets.replace(\"\
    <\", \"\").replace(\"<\", \"\").replace(\">\", \"\").replace(\">\", \"\")\n  \
    \  brackets = brackets.replace(\"<\", \"\").replace(\"<\", \"\").replace(\">\"\
    , \"\").replace(\">\", \"\")\n    brackets = brackets.replace(\"<\", \"\").replace(\"\
    <\", \"\").replace(\">\", \"\").replace(\">\", \"\")\n    brackets = brackets.replace(\"\
    <\", \"\").replace(\"<\", \"\").replace(\">\", \"\").replace(\">\", \"\")\n  \
    \  brackets = brackets.replace(\"<\", \"\").replace(\"<\", \"\").replace(\">\"\
    , \"\").replace(\">\", \"\")\n    brackets = brackets.replace(\"<\", \"\").replace(\"\
    <\", \"\").replace(\">\", \"\").replace(\">\", \"\")\n    brackets = brackets.replace(\"\
    <\", \"\").replace(\"<\", \"\").replace(\">\", \"\").replace(\">\", \"\")\n  \
    \  brackets = brackets.replace(\"<\", \"\").replace(\"<\", \"\").replace(\">\"\
    , \"\").replace(\">\", \"\")\n    brackets = brackets.replace(\"<\", \"\").replace(\"\
    <\", \"\").replace(\">\", \"\").replace(\">\", \"\")\n    brackets = brackets.replace(\"\
    <\", \"\").replace(\"<\", \"\").replace(\">\", \"\").replace(\">\", \"\")\n  \
    \  brackets = brackets.replace(\"<\", \"\").replace(\"<\", \"\").replace(\">\"\
    , \"\").replace(\">\", \"\")\n    brackets = brackets.replace(\"<\", \"\").replace(\"\
    <\", \"\").replace(\">\", \"\").replace(\">\", \"\")\n    brackets = brackets.replace(\"\
    <\", \"\").replace(\"<\", \"\").replace(\">\", \"\").replace(\">\", \"\")\n  \
    \  brackets = brackets.replace(\"<\", \"\").replace(\"<\", \"\").\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwupgh_c4.py\"\
    , line 31\n    brackets = brackets.replace(\"<\", \"\").replace(\"<\", \"\").\n\
    \                                                          ^\nSyntaxError: invalid\
    \ syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == \"<\":\n            stack.append(c)\n\
    \        elif c == \">\":\n            if not stack:\n                return False\n\
    \            top = stack.pop()\n            if top != c:\n                return\
    \ False\n    return not stack\n\n\ndef check(candidate):\n    assert candidate('<>')\
    \ == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm_qg4dz7.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm_qg4dz7.py\"\
    , line 34, in test_check\n    check(correct_bracketing)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm_qg4dz7.py\"\
    , line 20, in check\n    assert candidate('<>') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for char in brackets:\n        if char == \"<\":\n            stack.append(char)\n\
    \        elif char == \">\":\n            if len(stack) == 0:\n              \
    \  return False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert\
    \ candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n\
    \    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>')\
    \ == False\n    assert candidate('><<>') == False\n    assert candidate('<') ==\
    \ False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n\
    \    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for char in brackets:\n        if char == \"<\":\n            stack.append(char)\n\
    \        elif char == \">\":\n            if not stack:\n                return\
    \ False\n            top = stack.pop()\n            if top != char:\n        \
    \        return False\n    return not stack\n\n\ndef check(candidate):\n    assert\
    \ candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert\
    \ candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxzu6enj0.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxzu6enj0.py\"\
    , line 34, in test_check\n    check(correct_bracketing)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxzu6enj0.py\"\
    , line 20, in check\n    assert candidate('<>') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == '<':\n            stack.append(c)\n \
    \       elif c == '>':\n            if len(stack) == 0:\n                return\
    \ False\n            stack.pop()\n    return len(stack) == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == \"<\":\n            stack.append(c)\n\
    \        elif c == \">\":\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert\
    \ candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n\
    \    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>')\
    \ == False\n    assert candidate('><<>') == False\n    assert candidate('<') ==\
    \ False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n\
    \    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == '<':\n            stack.append(c)\n \
    \       elif c == '>':\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert\
    \ candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n\
    \    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>')\
    \ == False\n    assert candidate('><<>') == False\n    assert candidate('<') ==\
    \ False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n\
    \    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets_set\
    \ = set(brackets)\n    opening_brackets_set = set([\"<\", \">\"])\n    closing_brackets_set\
    \ = set([\"<\", \">\"])\n    opening_brackets_set.intersection_update(brackets_set)\n\
    \    closing_brackets_set.intersection_update(brackets_set)\n    return len(opening_brackets_set)\
    \ == 0 and len(closing_brackets_set) == 0\n\n\ndef check(candidate):\n    assert\
    \ candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert\
    \ candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppvdj45in.py\"\
    , line 31, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppvdj45in.py\"\
    , line 29, in test_check\n    check(correct_bracketing)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppvdj45in.py\"\
    , line 15, in check\n    assert candidate('<>') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == \"<\":\n            stack.append(c)\n\
    \        elif c == \">\":\n            if not stack:\n                return False\n\
    \            top = stack.pop()\n            if top != c:\n                return\
    \ False\n    return not stack\n\n\ndef check(candidate):\n    assert candidate('<>')\
    \ == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4pm965k4.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4pm965k4.py\"\
    , line 34, in test_check\n    check(correct_bracketing)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4pm965k4.py\"\
    , line 20, in check\n    assert candidate('<>') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets =\
    \ brackets.replace(\"<\", \"\").replace(\">\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5jgyihnz.py\"\
    , line 48\n    brackets = brackets.\n                        ^\nSyntaxError: invalid\
    \ syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == \"<\":\n            stack.append(c)\n\
    \        elif c == \">\":\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert\
    \ candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n\
    \    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>')\
    \ == False\n    assert candidate('><<>') == False\n    assert candidate('<') ==\
    \ False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n\
    \    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == \"<\":\n            stack.append(c)\n\
    \        elif c == \">\":\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert\
    \ candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n\
    \    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>')\
    \ == False\n    assert candidate('><<>') == False\n    assert candidate('<') ==\
    \ False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n\
    \    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == '<':\n            stack.append(c)\n \
    \       elif c == '>':\n            if not stack:\n                return False\n\
    \            top = stack.pop()\n            if top != c:\n                return\
    \ False\n    return not stack\n\n\ndef check(candidate):\n    assert candidate('<>')\
    \ == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppyumf60i.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppyumf60i.py\"\
    , line 34, in test_check\n    check(correct_bracketing)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppyumf60i.py\"\
    , line 20, in check\n    assert candidate('<>') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets =\
    \ brackets.replace(\"<\", \"\").replace(\">\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\").replace(\":\", \"\")\n\
    \    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\").replace(\":\", \"\")\n\
    \    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\").replace(\":\", \"\")\n\
    \    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\").replace(\":\", \"\")\n\
    \    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\").replace(\":\", \"\")\n\
    \    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\").replace(\":\", \"\")\n\
    \    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\").replace(\":\", \"\")\n\
    \    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\").replace(\":\", \"\")\n\
    \    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\").replace(\":\", \"\")\n\
    \    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\").replace(\":\", \"\")\n\
    \ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpi3z__ydp.py\"\
    , line 76, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpi3z__ydp.py\"\
    , line 74, in test_check\n    check(correct_bracketing)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpi3z__ydp.py\"\
    , line 60, in check\n    assert candidate('<>') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for char in brackets:\n        if char == \"<\":\n            stack.append(char)\n\
    \        elif char == \">\":\n            if not stack:\n                return\
    \ False\n            top = stack.pop()\n            if top != char:\n        \
    \        return False\n    return not stack\n\n\ndef check(candidate):\n    assert\
    \ candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert\
    \ candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1tqz4qw2.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1tqz4qw2.py\"\
    , line 34, in test_check\n    check(correct_bracketing)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1tqz4qw2.py\"\
    , line 20, in check\n    assert candidate('<>') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for char in brackets:\n        if char == '<':\n            stack.append(char)\n\
    \        elif char == '>':\n            if not stack:\n                return\
    \ False\n            top = stack.pop()\n            if top != char:\n        \
    \        return False\n    return not stack\n\n\ndef check(candidate):\n    assert\
    \ candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert\
    \ candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpobqwejhx.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpobqwejhx.py\"\
    , line 34, in test_check\n    check(correct_bracketing)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpobqwejhx.py\"\
    , line 20, in check\n    assert candidate('<>') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets =\
    \ brackets.replace(\"<\", \"\")\n    brackets = brackets.replace(\">\", \"\")\n\
    \    brackets = brackets.replace(\"(\", \"\")\n    brackets = brackets.replace(\"\
    )\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"[\", \"\")\n    brackets = brackets.replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    '\", \"\")\n    brackets = brackets.replace('\"', \"\")\n    brackets = brackets.replace(\"\
    !\", \"\")\n    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    %\", \"\")\n    brackets = brackets.replace(\"$\", \"\")\n    brackets = brackets.replace(\"\
    &\", \"\")\n    brackets = brackets.replace(\"*\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\")\n    brackets = brackets.replace(\")\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\")\n    brackets = brackets.replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\")\n    brackets = brackets.replace(\"'\", \"\")\n    brackets = brackets.replace('\"\
    ', \"\")\n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\"%\", \"\")\n    brackets = brackets.replace(\"\
    $\", \"\")\n    brackets = brackets.replace(\"&\", \"\")\n    brackets = brackets.replace(\"\
    *\", \"\")\n    brackets = brackets.replace(\"(\", \"\")\n    brackets = brackets.replace(\"\
    )\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"[\", \"\")\n    brackets = brackets.replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    '\", \"\")\n    brackets = brackets.replace('\"', \"\")\n    brackets = brackets.replace(\"\
    !\", \"\")\n    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    %\", \"\")\n    brackets = brackets.replace(\"$\", \"\")\n    brackets = brackets.replace(\"\
    &\", \"\")\n    brackets = brackets.replace(\"*\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\")\n    brackets = brackets.replace(\")\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.\ndef check(candidate):\n    assert candidate('<>')\
    \ == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz15vn04d.py\"\
    , line 62\n    brackets = brackets.\n                        ^\nSyntaxError: invalid\
    \ syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == '<':\n            stack.append(c)\n \
    \       elif c == '>':\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n        else:\n     \
    \       return False\n    return True\n\n\ndef check(candidate):\n    assert candidate('<>')\
    \ == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqw7097gn.py\"\
    , line 37, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqw7097gn.py\"\
    , line 35, in test_check\n    check(correct_bracketing)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqw7097gn.py\"\
    , line 27, in check\n    assert candidate('<') == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets =\
    \ brackets.replace(\"<\", \"\").replace(\">\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp_7eck0r.py\"\
    , line 48\n    brackets = brackets.replace(\"\n                              \
    \  ^\nSyntaxError: unterminated string literal (detected at line 48)\n"
  exit_code: 1
  status: SyntaxError
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == \"<\":\n            stack.append(c)\n\
    \        elif c == \">\":\n            if not stack:\n                return False\n\
    \            if stack.pop() != c:\n                return False\n    return not\
    \ stack\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert\
    \ candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n\
    \    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>')\
    \ == False\n    assert candidate('><<>') == False\n    assert candidate('<') ==\
    \ False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n\
    \    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptid9rlqz.py\"\
    , line 35, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptid9rlqz.py\"\
    , line 33, in test_check\n    check(correct_bracketing)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptid9rlqz.py\"\
    , line 19, in check\n    assert candidate('<>') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == '<':\n            stack.append(c)\n \
    \       elif c == '>':\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n        else:\n     \
    \       return False\n    return len(stack) == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets_set\
    \ = set(brackets)\n    opening_brackets = set([\"<\", \">\"])\n    closing_brackets\
    \ = set([\"<\", \">\"])\n    opening_brackets_set = set(opening_brackets)\n  \
    \  closing_brackets_set = set(closing_brackets)\n    opening_brackets_set.intersection_update(brackets_set)\n\
    \    closing_brackets_set.intersection_update(brackets_set)\n    return len(opening_brackets_set)\
    \ == 0 and len(closing_brackets_set) == 0\n\n\ndef check(candidate):\n    assert\
    \ candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert\
    \ candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqhuwfk95.py\"\
    , line 33, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqhuwfk95.py\"\
    , line 31, in test_check\n    check(correct_bracketing)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqhuwfk95.py\"\
    , line 17, in check\n    assert candidate('<>') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets =\
    \ brackets.replace(\"<\", \"\").replace(\">\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptuyojqb2.py\"\
    , line 48\n    brackets = brackets.\n                        ^\nSyntaxError: invalid\
    \ syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == \"<\":\n            stack.append(c)\n\
    \        elif c == \">\":\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert\
    \ candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n\
    \    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>')\
    \ == False\n    assert candidate('><<>') == False\n    assert candidate('<') ==\
    \ False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n\
    \    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets =\
    \ brackets.replace(\"<\", \"\").replace(\"<\", \"\").replace(\">\", \"\").replace(\"\
    >\", \"\")\n    brackets = brackets.replace(\"(\", \"\").replace(\")\", \"\")\n\
    \    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\").replace(\":\", \"\")\n    brackets = brackets.replace(\";\", \"\").replace(\"\
    '\", \"\")\n    brackets = brackets.replace(\"!\", \"\").replace(\"?\", \"\")\n\
    \    brackets = brackets.replace(\"%\", \"\").replace(\"^\", \"\")\n    brackets\
    \ = brackets.replace(\"&\", \"\").replace(\"*\", \"\")\n    brackets = brackets.replace(\"\
    +\", \"\").replace(\"(\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"\
    =\", \"\").replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\",\", \"\").replace(\"\
    :\", \"\")\n    brackets = brackets.replace(\";\", \"\").replace(\"'\", \"\")\n\
    \    brackets = brackets.replace(\"!\", \"\").replace(\"?\", \"\")\n    brackets\
    \ = brackets.replace(\"%\", \"\").replace(\"^\", \"\")\n    brackets = brackets.replace(\"\
    &\", \"\").replace(\"*\", \"\")\n    brackets = brackets.replace(\"+\", \"\").replace(\"\
    (\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"=\", \"\").replace(\"\
    [\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\",\", \"\").replace(\":\", \"\")\n\
    \    brackets = brackets.replace(\";\", \"\").replace(\"'\", \"\")\n    brackets\
    \ = brackets.replace(\"!\", \"\").replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    %\", \"\").replace(\"^\", \"\")\n    brackets = brackets.replace(\"&\", \"\").replace(\"\
    *\", \"\")\n    brackets = brackets.replace(\"+\", \"\").replace(\"(\", \"\").replace(\"\
    )\", \"\")\n    brackets = brackets.replace(\"=\", \"\").replace(\"[\", \"\").replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\",\", \"\").replace(\":\", \"\")\n    brackets\
    \ = brackets.replace(\";\", \"\").replace(\"'\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\").replace(\"?\", \"\")\n    brackets = brackets.replace(\"%\", \"\").replace(\"\
    ^\", \"\")\n    brackets = brackets.replace(\"&\", \"\").replace(\"*\", \"\")\n\
    \    brackets = brackets.replace(\"+\", \"\").replace(\"(\", \"\").replace(\"\
    )\", \"\")\n    brackets = brackets.replace(\"=\", \"\").replace(\"[\", \"\").replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\",\", \"\").replace(\":\", \"\")\n    brackets\
    \ = brackets.replace(\";\", \"\").replace(\"'\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\").replace(\"?\", \"\")\n    brackets = bracket\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpttirbdu3.py\"\
    , line 63, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpttirbdu3.py\"\
    , line 61, in test_check\n    check(correct_bracketing)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpttirbdu3.py\"\
    , line 47, in check\n    assert candidate('<>') == True\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpttirbdu3.py\"\
    , line 45, in correct_bracketing\n    brackets = bracket\nNameError: name 'bracket'\
    \ is not defined. Did you mean: 'brackets'?\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for char in brackets:\n        if char == \"<\":\n            stack.append(char)\n\
    \        elif char == \">\":\n            if not stack:\n                return\
    \ False\n            top = stack.pop()\n            if top != char:\n        \
    \        return False\n    return not stack\n\n\ndef check(candidate):\n    assert\
    \ candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert\
    \ candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzaatpatk.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzaatpatk.py\"\
    , line 34, in test_check\n    check(correct_bracketing)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzaatpatk.py\"\
    , line 20, in check\n    assert candidate('<>') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == '<':\n            stack.append(c)\n \
    \       elif c == '>':\n            if len(stack) == 0:\n                return\
    \ False\n            stack.pop()\n    return len(stack) == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == \"<\":\n            stack.append(c)\n\
    \        elif c == \">\":\n            if len(stack) == 0:\n                return\
    \ False\n            stack.pop()\n        else:\n            return False\n  \
    \  return len(stack) == 0\n\n\ndef check(candidate):\n    assert candidate('<>')\
    \ == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == \"<\":\n            stack.append(c)\n\
    \        elif c == \">\":\n            if not stack:\n                return False\n\
    \            stack.pop()\n    return not stack\n\n\ndef check(candidate):\n  \
    \  assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n  \
    \  assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets =\
    \ brackets.replace('(', ' ( ').replace(')', ' ) ')\n    brackets = brackets.replace('[',\
    \ ' [').replace(']', ' ] ')\n    brackets = brackets.replace('{', ' {').replace('}',\
    \ ' } ')\n    brackets = brackets.replace('(', ' ( ').replace(')', ' ) ')\n  \
    \  brackets = brackets.replace('[', ' [').replace(']', ' ] ')\n    brackets =\
    \ brackets.replace('{', ' {').replace('}', ' } ')\n    brackets = brackets.replace('(',\
    \ ' ( ').replace(')', ' ) ')\n    brackets = brackets.replace('[', ' [').replace(']',\
    \ ' ] ')\n    brackets = brackets.replace('{', ' {').replace('}', ' } ')\n   \
    \ brackets = brackets.replace('(', ' ( ').replace(')', ' ) ')\n    brackets =\
    \ brackets.replace('[', ' [').replace(']', ' ] ')\n    brackets = brackets.replace('{',\
    \ ' {').replace('}', ' } ')\n    brackets = brackets.replace('(', ' ( ').replace(')',\
    \ ' ) ')\n    brackets = brackets.replace('[', ' [').replace(']', ' ] ')\n   \
    \ brackets = brackets.replace('{', ' {').replace('}', ' } ')\n    brackets = brackets.replace('(',\
    \ ' ( ').replace(')', ' ) ')\n    brackets = brackets.replace('[', ' [').replace(']',\
    \ ' ] ')\n    brackets = brackets.replace('{', ' {').replace('}', ' } ')\n   \
    \ brackets = brackets.replace('(', ' ( ').replace(')', ' ) ')\n    brackets =\
    \ brackets.replace('[', ' [').replace(']', ' ] ')\n    brackets = brackets.replace('{',\
    \ ' {').replace('}', ' } ')\n    brackets = brackets.replace('(', ' ( ').replace(')',\
    \ ' ) ')\n    brackets = brackets.replace('[', ' [').replace(']', ' ] ')\n   \
    \ brackets = brackets.replace('{', ' {').replace('}', ' } ')\n    brackets = brackets.replace('(',\
    \ ' ( ').replace(')', ' ) ')\n    brackets = brackets.replace('[', ' [').replace(']',\
    \ ' ] ')\n    brackets = brackets.replace('{', ' {').replace('}', ' } ')\n   \
    \ brackets = brackets.replace('(', ' ( ').replace(')', ' ) ')\n    brackets =\
    \ brackets.replace('[', ' [').replace(']', ' ] ')\n    brackets = brackets.replace('{',\
    \ ' {').replace('}', ' } ')\n    brackets = brackets.replace('(', ' ( ').replace(')',\
    \ ' ) ')\n    brackets = brackets.replace('[', ' [').replace(']', ' ] ')\n   \
    \ brackets = brackets.replace('{', ' {').replace('}', ' } ')\n    brackets = brackets.replace('(',\
    \ ' ( ').replace(')', ' ) ')\n    bracket\ndef check(candidate):\n    assert candidate('<>')\
    \ == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1v_p897z.py\"\
    , line 58, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1v_p897z.py\"\
    , line 56, in test_check\n    check(correct_bracketing)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1v_p897z.py\"\
    , line 42, in check\n    assert candidate('<>') == True\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1v_p897z.py\"\
    , line 40, in correct_bracketing\n    bracket\nNameError: name 'bracket' is not\
    \ defined. Did you mean: 'brackets'?\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for char in brackets:\n        if char == \"<\":\n            stack.append(char)\n\
    \        elif char == \">\":\n            if len(stack) == 0:\n              \
    \  return False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert\
    \ candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n\
    \    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>')\
    \ == False\n    assert candidate('><<>') == False\n    assert candidate('<') ==\
    \ False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n\
    \    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == \"<\":\n            stack.append(c)\n\
    \        elif c == \">\":\n            if not stack:\n                return False\n\
    \            top = stack.pop()\n            if top != c:\n                return\
    \ False\n    return not stack\n\n\ndef check(candidate):\n    assert candidate('<>')\
    \ == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9epegdew.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9epegdew.py\"\
    , line 34, in test_check\n    check(correct_bracketing)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9epegdew.py\"\
    , line 20, in check\n    assert candidate('<>') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == \"<\":\n            stack.append(c)\n\
    \        elif c == \">\":\n            if not stack:\n                return False\n\
    \            stack.pop()\n    return not stack\n\n\ndef check(candidate):\n  \
    \  assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n  \
    \  assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets =\
    \ brackets.replace(\"<\", \"\").replace(\"<\", \"\").replace(\">\", \"\").replace(\"\
    >\", \"\")\n    brackets = brackets.replace(\"(\", \"\").replace(\")\", \"\")\n\
    \    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\").replace(\":\", \"\")\n    brackets = brackets.replace(\";\", \"\").replace(\"\
    '\", \"\")\n    brackets = brackets.replace(\"!\", \"\").replace(\"?\", \"\")\n\
    \    brackets = brackets.replace(\",\", \"\").replace(\":\", \"\")\n    brackets\
    \ = brackets.replace(\";\", \"\").replace(\"'\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\").replace(\"?\", \"\")\n    brackets = brackets.replace(\",\", \"\").replace(\"\
    :\", \"\")\n    brackets = brackets.replace(\";\", \"\").replace(\"'\", \"\")\n\
    \    brackets = brackets.replace(\"!\", \"\").replace(\"?\", \"\")\n    brackets\
    \ = brackets.replace(\",\", \"\").replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\").replace(\"'\", \"\")\n    brackets = brackets.replace(\"!\", \"\").replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\",\", \"\").replace(\":\", \"\")\n\
    \    brackets = brackets.replace(\";\", \"\").replace(\"'\", \"\")\n    brackets\
    \ = brackets.replace(\"!\", \"\").replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\").replace(\":\", \"\")\n    brackets = brackets.replace(\";\", \"\").replace(\"\
    '\", \"\")\n    brackets = brackets.replace(\"!\", \"\").replace(\"?\", \"\")\n\
    \    brackets = brackets.replace(\",\", \"\").replace(\":\", \"\")\n    brackets\
    \ = brackets.replace(\";\", \"\").replace(\"'\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\").replace(\"?\", \"\")\n    brackets = brackets.replace(\",\", \"\").replace(\"\
    :\", \"\")\n    brackets = brackets.replace(\";\", \"\").replace(\"'\", \"\")\n\
    \    brackets = brackets.replace(\"!\", \"\").replace(\"?\", \"\")\n    brackets\
    \ = brackets.replace(\",\", \"\").replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\").replace(\"'\", \"\")\n    brackets = brackets.replace(\"!\", \"\").replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\",\", \"\").replace(\":\", \"\")\n\
    \    brackets = brackets.replace(\";\", \"\").replace(\"'\", \"\")\n    brackets\
    \ = brackets.replace(\"!\", \"\").replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\").replace(\":\", \"\")\n    brackets = brackets.replace(\";\", \"\").replace(\"\
    '\", \"\")\n    brackets = brackets.replace(\"!\", \"\").replace(\"?\", \"\")\n\
    \    brackets = brackets.replace(\",\", \"\").replace(\":\", \"\")\n    brackets\
    \ = brackets.replace(\";\", \"\").replace(\"'\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\").replace(\"?\", \"\")\n    brackets = brackets.replace(\",\", \"\").replace(\"\
    :\", \"\")\n    brackets = brackets.replace(\";\", \"\").replace(\"'\", \"\")\n\
    \ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqmmpvako.py\"\
    , line 66, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqmmpvako.py\"\
    , line 64, in test_check\n    check(correct_bracketing)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqmmpvako.py\"\
    , line 50, in check\n    assert candidate('<>') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == \"<\":\n            stack.append(c)\n\
    \        elif c == \">\":\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert\
    \ candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n\
    \    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>')\
    \ == False\n    assert candidate('><<>') == False\n    assert candidate('<') ==\
    \ False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n\
    \    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == \"<\":\n            stack.append(c)\n\
    \        elif c == \">\":\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert\
    \ candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n\
    \    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>')\
    \ == False\n    assert candidate('><<>') == False\n    assert candidate('<') ==\
    \ False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n\
    \    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == '<':\n            stack.append(c)\n \
    \       elif c == '>':\n            if not stack:\n                return False\n\
    \            top = stack.pop()\n            if top != c:\n                return\
    \ False\n    return not stack\n\n\ndef check(candidate):\n    assert candidate('<>')\
    \ == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp385bwa46.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp385bwa46.py\"\
    , line 34, in test_check\n    check(correct_bracketing)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp385bwa46.py\"\
    , line 20, in check\n    assert candidate('<>') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for char in brackets:\n        if char == \"<\":\n            stack.append(char)\n\
    \        elif char == \">\":\n            if len(stack) == 0:\n              \
    \  return False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert\
    \ candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n\
    \    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>')\
    \ == False\n    assert candidate('><<>') == False\n    assert candidate('<') ==\
    \ False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n\
    \    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets =\
    \ brackets.replace(\"<\", \"\").replace(\">\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"(\", \"\").replace(\"\
    )\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\").replace(\"]\", \"\")\n    brackets = brackets.\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxvuct5t3.py\"\
    , line 48\n    brackets = brackets.\n                        ^\nSyntaxError: invalid\
    \ syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets =\
    \ brackets.replace(\"<\", \"\").replace(\">\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\").replace(\":\", \"\")\n\
    \    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\").replace(\":\", \"\")\n\
    \    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\").replace(\":\", \"\")\n\
    \    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\").replace(\":\", \"\")\n\
    \    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\").replace(\":\", \"\")\n\
    \    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\").replace(\":\", \"\")\n\
    \    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\").replace(\":\", \"\")\n\
    \    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\").replace(\":\", \"\")\n\
    \    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\").replace(\":\", \"\")\n\
    \    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\").replace(\":\", \"\")\n\
    \ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkkpqx1aa.py\"\
    , line 76, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkkpqx1aa.py\"\
    , line 74, in test_check\n    check(correct_bracketing)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkkpqx1aa.py\"\
    , line 60, in check\n    assert candidate('<>') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == \"<\":\n            stack.append(c)\n\
    \        elif c == \">\":\n            if not stack:\n                return False\n\
    \            stack.pop()\n    return not stack\n\n\ndef check(candidate):\n  \
    \  assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n  \
    \  assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets =\
    \ brackets.replace(\"<\", \"\").replace(\">\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5xgxy59j.py\"\
    , line 48\n    brackets = brackets.replace(\"\n                              \
    \  ^\nSyntaxError: unterminated string literal (detected at line 48)\n"
  exit_code: 1
  status: SyntaxError
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets =\
    \ brackets.replace(\"<\", \"\")\n    brackets = brackets.replace(\">\", \"\")\n\
    \    brackets = brackets.replace(\"(\", \"\")\n    brackets = brackets.replace(\"\
    )\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"[\", \"\")\n    brackets = brackets.replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    '\", \"\")\n    brackets = brackets.replace('\"', \"\")\n    brackets = brackets.replace(\"\
    !\", \"\")\n    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\")\n    brackets = brackets.replace(\")\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\")\n    brackets = brackets.replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\")\n    brackets = brackets.replace(\"'\", \"\")\n    brackets = brackets.replace('\"\
    ', \"\")\n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\"(\", \"\")\n    brackets = brackets.replace(\"\
    )\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"[\", \"\")\n    brackets = brackets.replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    '\", \"\")\n    brackets = brackets.replace('\"', \"\")\n    brackets = brackets.replace(\"\
    !\", \"\")\n    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\")\n    brackets = brackets.replace(\")\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\")\n    brackets = brackets.replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\")\n    brackets = brackets.replace(\"'\", \"\")\n    brackets = brackets.replace('\"\
    ', \"\")\n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\"(\", \"\")\n    brackets = brackets.replace(\"\
    )\", \"\")\n    brackets = bracket\ndef check(candidate):\n    assert candidate('<>')\
    \ == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4xig3itc.py\"\
    , line 80, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4xig3itc.py\"\
    , line 78, in test_check\n    check(correct_bracketing)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4xig3itc.py\"\
    , line 64, in check\n    assert candidate('<>') == True\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4xig3itc.py\"\
    , line 62, in correct_bracketing\n    brackets = bracket\nNameError: name 'bracket'\
    \ is not defined. Did you mean: 'brackets'?\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for char in brackets:\n        if char == \"<\":\n            stack.append(char)\n\
    \        elif char == \">\":\n            if not stack:\n                return\
    \ False\n            top = stack.pop()\n            if top != char:\n        \
    \        return False\n    return not stack\n\n\ndef check(candidate):\n    assert\
    \ candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert\
    \ candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgbqkj854.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgbqkj854.py\"\
    , line 34, in test_check\n    check(correct_bracketing)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgbqkj854.py\"\
    , line 20, in check\n    assert candidate('<>') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == \"<\":\n            stack.append(c)\n\
    \        elif c == \">\":\n            if len(stack) == 0:\n                return\
    \ False\n            stack.pop()\n    return len(stack) == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets =\
    \ brackets.replace(\"<\", \"\").replace(\">\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\").replace(\":\", \"\")\n\
    \    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\").replace(\":\", \"\")\n\
    \    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\").replace(\":\", \"\")\n\
    \    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\").replace(\":\", \"\")\n\
    \    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\").replace(\":\", \"\")\n\
    \    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\").replace(\":\", \"\")\n\
    \    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\").replace(\":\", \"\")\n\
    \    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\").replace(\":\", \"\")\n\
    \    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\").replace(\":\", \"\")\n\
    \    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\").replace(\":\", \"\")\n\
    \ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppxcbgsjr.py\"\
    , line 76, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppxcbgsjr.py\"\
    , line 74, in test_check\n    check(correct_bracketing)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppxcbgsjr.py\"\
    , line 60, in check\n    assert candidate('<>') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == \"<\":\n            stack.append(c)\n\
    \        elif c == \">\":\n            if not stack:\n                return False\n\
    \            stack.pop()\n    return not stack\n\n\ndef check(candidate):\n  \
    \  assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n  \
    \  assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == \"<\":\n            stack.append(c)\n\
    \        elif c == \">\":\n            if not stack:\n                return False\n\
    \            stack.pop()\n    return not stack\n\n\ndef check(candidate):\n  \
    \  assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n  \
    \  assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets =\
    \ brackets.replace(\"<\", \"\")\n    brackets = brackets.replace(\">\", \"\")\n\
    \    brackets = brackets.replace(\"(\", \"\")\n    brackets = brackets.replace(\"\
    )\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"[\", \"\")\n    brackets = brackets.replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    '\", \"\")\n    brackets = brackets.replace('\"', \"\")\n    brackets = brackets.replace(\"\
    !\", \"\")\n    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    %\", \"\")\n    brackets = brackets.replace(\"$\", \"\")\n    brackets = brackets.replace(\"\
    &\", \"\")\n    brackets = brackets.replace(\"*\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\")\n    brackets = brackets.replace(\")\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\")\n    brackets = brackets.replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\")\n    brackets = brackets.replace(\"'\", \"\")\n    brackets = brackets.replace('\"\
    ', \"\")\n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\"%\", \"\")\n    brackets = brackets.replace(\"\
    $\", \"\")\n    brackets = brackets.replace(\"&\", \"\")\n    brackets = brackets.replace(\"\
    *\", \"\")\n    brackets = brackets.replace(\"(\", \"\")\n    brackets = brackets.replace(\"\
    )\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"[\", \"\")\n    brackets = brackets.replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    '\", \"\")\n    brackets = brackets.replace('\"', \"\")\n    brackets = brackets.replace(\"\
    !\", \"\")\n    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    %\", \"\")\n    brackets = brackets.replace(\"$\", \"\")\n    brackets = brackets.replace(\"\
    &\", \"\")\n    brackets = brackets.replace(\"*\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\")\n    brackets = brackets.replace(\")\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.\ndef check(candidate):\n    assert candidate('<>')\
    \ == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppahfheu1.py\"\
    , line 62\n    brackets = brackets.\n                        ^\nSyntaxError: invalid\
    \ syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == \"<\":\n            stack.append(c)\n\
    \        elif c == \">\":\n            if not stack:\n                return False\n\
    \            if stack.pop() != c:\n                return False\n    return not\
    \ stack\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert\
    \ candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n\
    \    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>')\
    \ == False\n    assert candidate('><<>') == False\n    assert candidate('<') ==\
    \ False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n\
    \    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpccya9vfk.py\"\
    , line 35, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpccya9vfk.py\"\
    , line 33, in test_check\n    check(correct_bracketing)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpccya9vfk.py\"\
    , line 19, in check\n    assert candidate('<>') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == \"<\":\n            stack.append(c)\n\
    \        elif c == \">\":\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert\
    \ candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n\
    \    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>')\
    \ == False\n    assert candidate('><<>') == False\n    assert candidate('<') ==\
    \ False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n\
    \    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == '<':\n            stack.append(c)\n \
    \       elif c == '>':\n            if not stack:\n                return False\n\
    \            top = stack.pop()\n            if top != c:\n                return\
    \ False\n    return not stack\n\n\ndef check(candidate):\n    assert candidate('<>')\
    \ == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcbycmcqz.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcbycmcqz.py\"\
    , line 34, in test_check\n    check(correct_bracketing)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcbycmcqz.py\"\
    , line 20, in check\n    assert candidate('<>') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets =\
    \ brackets.replace(\"<\", \"\").replace(\">\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyaixjqfe.py\"\
    , line 48\n    brackets = brackets.replace(\"\n                              \
    \  ^\nSyntaxError: unterminated string literal (detected at line 48)\n"
  exit_code: 1
  status: SyntaxError
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == \"<\":\n            stack.append(c)\n\
    \        elif c == \">\":\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert\
    \ candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n\
    \    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>')\
    \ == False\n    assert candidate('><<>') == False\n    assert candidate('<') ==\
    \ False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n\
    \    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == \"<\":\n            stack.append(c)\n\
    \        elif c == \">\":\n            if not stack:\n                return False\n\
    \            top = stack.pop()\n            if top != c:\n                return\
    \ False\n    return not stack\n\n\ndef check(candidate):\n    assert candidate('<>')\
    \ == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq_m7bhjq.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq_m7bhjq.py\"\
    , line 34, in test_check\n    check(correct_bracketing)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq_m7bhjq.py\"\
    , line 20, in check\n    assert candidate('<>') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for char in brackets:\n        if char == \"<\":\n            stack.append(char)\n\
    \        elif char == \">\":\n            if len(stack) == 0:\n              \
    \  return False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert\
    \ candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n\
    \    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>')\
    \ == False\n    assert candidate('><<>') == False\n    assert candidate('<') ==\
    \ False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n\
    \    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == \"<\":\n            stack.append(c)\n\
    \        elif c == \">\":\n            if not stack:\n                return False\n\
    \            stack.pop()\n    return not stack\n\n\ndef check(candidate):\n  \
    \  assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n  \
    \  assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for char in brackets:\n        if char == \"<\":\n            stack.append(char)\n\
    \        elif char == \">\":\n            if len(stack) == 0:\n              \
    \  return False\n            else:\n                stack.pop()\n        else:\n\
    \            return False\n    return True\n\n\ndef check(candidate):\n    assert\
    \ candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert\
    \ candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplzrs7gda.py\"\
    , line 37, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplzrs7gda.py\"\
    , line 35, in test_check\n    check(correct_bracketing)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplzrs7gda.py\"\
    , line 27, in check\n    assert candidate('<') == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == \"<\":\n            stack.append(c)\n\
    \        elif c == \">\":\n            if not stack:\n                return False\n\
    \            stack.pop()\n    return not stack\n\n\ndef check(candidate):\n  \
    \  assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n  \
    \  assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == \"<\":\n            stack.append(c)\n\
    \        elif c == \">\":\n            if not stack:\n                return False\n\
    \            else:\n                stack.pop()\n    return not stack\n\n\ndef\
    \ check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == \"<\":\n            stack.append(c)\n\
    \        elif c == \">\":\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert\
    \ candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n\
    \    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>')\
    \ == False\n    assert candidate('><<>') == False\n    assert candidate('<') ==\
    \ False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n\
    \    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == \"<\":\n            stack.append(c)\n\
    \        elif c == \">\":\n            if len(stack) == 0:\n                return\
    \ False\n            stack.pop()\n    return len(stack) == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for char in brackets:\n        if char == \"<\":\n            stack.append(char)\n\
    \        elif char == \">\":\n            if not stack:\n                return\
    \ False\n            stack.pop()\n    return not stack\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == '<':\n            stack.append(c)\n \
    \       elif c == '>':\n            if not stack:\n                return False\n\
    \            top = stack.pop()\n            if top != c:\n                return\
    \ False\n    return not stack\n\n\ndef check(candidate):\n    assert candidate('<>')\
    \ == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_3p1aip3.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_3p1aip3.py\"\
    , line 34, in test_check\n    check(correct_bracketing)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_3p1aip3.py\"\
    , line 20, in check\n    assert candidate('<>') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == '<':\n            stack.append(c)\n \
    \       elif c == '>':\n            if not stack:\n                return False\n\
    \            top = stack.pop()\n            if top != c:\n                return\
    \ False\n    return not stack\n\n\ndef check(candidate):\n    assert candidate('<>')\
    \ == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvepxutag.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvepxutag.py\"\
    , line 34, in test_check\n    check(correct_bracketing)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvepxutag.py\"\
    , line 20, in check\n    assert candidate('<>') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets =\
    \ brackets.replace(\"<\", \"\").replace(\"<\", \"\").replace(\">\", \"\").replace(\"\
    >\", \"\")\n    brackets = brackets.replace(\"(\", \"\").replace(\")\", \"\")\n\
    \    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\").replace(\";\", \"\")\n    brackets = brackets.replace(\":\", \"\").replace(\"\
    :\", \"\")\n    brackets = brackets.replace(\"!\", \"\").replace(\"!\", \"\")\n\
    \    brackets = brackets.replace(\"?\", \"\").replace(\"?\", \"\")\n    brackets\
    \ = brackets.replace(\",\", \"\").replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\").replace(\":\", \"\")\n    brackets = brackets.replace(\"!\", \"\").replace(\"\
    !\", \"\")\n    brackets = brackets.replace(\"?\", \"\").replace(\"?\", \"\")\n\
    \    brackets = brackets.replace(\",\", \"\").replace(\";\", \"\")\n    brackets\
    \ = brackets.replace(\":\", \"\").replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\").replace(\"!\", \"\")\n    brackets = brackets.replace(\"?\", \"\").replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\",\", \"\").replace(\";\", \"\")\n\
    \    brackets = brackets.replace(\":\", \"\").replace(\":\", \"\")\n    brackets\
    \ = brackets.replace(\"!\", \"\").replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\").replace(\"?\", \"\")\n    brackets = brackets.replace(\",\", \"\").replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\").replace(\":\", \"\")\n\
    \    brackets = brackets.replace(\"!\", \"\").replace(\"!\", \"\")\n    brackets\
    \ = brackets.replace(\"?\", \"\").replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\").replace(\";\", \"\")\n    brackets = brackets.replace(\":\", \"\").replace(\"\
    :\", \"\")\n    brackets = brackets.replace(\"!\", \"\").replace(\"!\", \"\")\n\
    \    brackets = brackets.replace(\"?\", \"\").replace(\"?\", \"\")\n    brackets\
    \ = brackets.replace(\",\", \"\").replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\").replace(\":\", \"\")\n    brackets = brackets.replace(\"!\", \"\").replace(\"\
    !\", \"\")\n    brackets = brackets.replace(\"?\", \"\").replace(\"?\", \"\")\n\
    \    brackets = brackets.replace(\",\", \"\").replace(\";\", \"\")\n    brackets\
    \ = brackets.replace(\":\", \"\").replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\").replace(\"!\", \"\")\n    brackets = brackets.replace(\"?\", \"\").replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\",\", \"\").replace(\";\", \"\")\n\
    \    brackets = brackets.replace(\":\", \"\").replace(\":\", \"\")\n    brackets\
    \ = brackets.replace(\"!\", \"\").replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\").replace(\"?\", \"\")\n    brackets = brackets.replace(\",\", \"\").replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\").replace(\":\", \"\")\n\
    \ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe8_43vmp.py\"\
    , line 66, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe8_43vmp.py\"\
    , line 64, in test_check\n    check(correct_bracketing)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe8_43vmp.py\"\
    , line 50, in check\n    assert candidate('<>') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == \"<\":\n            stack.append(c)\n\
    \        elif c == \">\":\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert\
    \ candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n\
    \    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>')\
    \ == False\n    assert candidate('><<>') == False\n    assert candidate('<') ==\
    \ False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n\
    \    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets =\
    \ brackets.replace(\"<\", \"\")\n    brackets = brackets.replace(\">\", \"\")\n\
    \    brackets = brackets.replace(\"(\", \"\")\n    brackets = brackets.replace(\"\
    )\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"[\", \"\")\n    brackets = brackets.replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    '\", \"\")\n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\"%\", \"\")\n    brackets = brackets.replace(\"\
    $\", \"\")\n    brackets = brackets.replace(\"&\", \"\")\n    brackets = brackets.replace(\"\
    *\", \"\")\n    brackets = brackets.replace(\"(\", \"\")\n    brackets = brackets.replace(\"\
    )\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"[\", \"\")\n    brackets = brackets.replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    '\", \"\")\n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\"%\", \"\")\n    brackets = brackets.replace(\"\
    $\", \"\")\n    brackets = brackets.replace(\"&\", \"\")\n    brackets = brackets.replace(\"\
    *\", \"\")\n    brackets = brackets.replace(\"(\", \"\")\n    brackets = brackets.replace(\"\
    )\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"[\", \"\")\n    brackets = brackets.replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    '\", \"\")\n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\"%\", \"\")\n    brackets = brackets.replace(\"\
    $\", \"\")\n    brackets = brackets.replace(\"&\", \"\")\n    brackets = brackets.replace(\"\
    *\", \"\")\n    brackets = brackets.replace(\"(\", \"\")\n    brackets = brackets.replace(\"\
    )\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"[\", \"\")\n    brackets = brackets.replace(\"\
    ]\", \"\")\n    brackets = brackets.\ndef check(candidate):\n    assert candidate('<>')\
    \ == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjx_kli13.py\"\
    , line 62\n    brackets = brackets.\n                        ^\nSyntaxError: invalid\
    \ syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets =\
    \ brackets.replace(\"<\", \"\").replace(\">\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm3rs7vo5.py\"\
    , line 48\n    brackets = brackets.replace(\"\n                              \
    \  ^\nSyntaxError: unterminated string literal (detected at line 48)\n"
  exit_code: 1
  status: SyntaxError
