name: HumanEval_49_modp
language: py
prompt: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
  \ of numerics).\n                        \"\"\"\n"
tests: "def check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101,\
  \ 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n\
  \    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n    assert\
  \ candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
completions: ["    if n == 0:\n        return 0\n    if n == 1:\n        return p\n\
    \    if p == 2:\n        return n\n    if p % 4 == 0:\n        return p - (p %\
    \ 4)\n    if p % 2 == 0:\n        return p\n    if p % 3 == 0:\n        return\
    \ p - (p % 3)\n    return p - (p % 5 + 2)\n\n", "    if p == 2:\n        return\
    \ n\n    if p == 3:\n        return n & 1\n    if p == 4:\n        return n &\
    \ 2\n    if p == 5:\n        return n & 3\n    if p == 6:\n        return n &\
    \ 4\n    if p == 7:\n        return n & 5\n    if p == 8:\n        return n &\
    \ 6\n    if p == 9:\n        return n & 7\n    if p == 10:\n        return n &\
    \ 8\n    if p == 11:\n        return n & 9\n    if p == 12:\n        return n\
    \ & 10\n    if p == 13:\n        return n & 11\n    if p == 14:\n        return\
    \ n & 12\n    if p == 15:\n        return n & 13\n    if p == 16:\n        return\
    \ n & 14\n    if p == 17:\n        return n & 15\n    if p == 18:\n        return\
    \ n & 16\n    if p == 19:\n        return n & 17\n    if p == 20:\n        return\
    \ n & 18\n    if p == 21:\n        return n & 19\n    if p == 22:\n        return\
    \ n & 20\n    if p == 23:\n        return n & 21\n    if p == 24:\n        return\
    \ n & 22\n    if p == 25:\n        return n & 23\n    if p == 26:\n        return\
    \ n & 24\n    if p == 27:\n        return n & 25\n    if p == 28:\n        return\
    \ n & 26\n    if p == 29:\n        return n & 27\n    if p == 30:\n        return\
    \ n & 28\n    if p == 31:\n        return n & 29\n    if p == 32:\n        return\
    \ n & 30\n    if p == 33:\n        return n & 31\n    if p == 34:\n        return\
    \ n & 32\n    if p == 35:\n        return n & 33\n    if p == 36:\n        return\
    \ n & 34\n    if p == 37:\n        return n & 35\n    if p == 38:\n        return\
    \ n & 36\n    if p == 39:\n        return n & 37\n    if p == 40:\n        return\
    \ n & 38\n    if p == 41:\n        return n & 39\n    if p == 42:\n        return\
    \ n & 40\n    if p == 43:\n        return n & 41\n    if p == 44:\n        return\
    \ n & 42\n    if p == 45:\n        return n & 43\n    if p == 46:\n        return\
    \ n & 44\n    if p == 47:\n        return n & 45\n    if p == 48:\n        return\
    \ n & 46\n    if p == 49:\n        return n & 47\n    if p == 50:\n        return\
    \ n & 48\n    if p == 51:\n        return n & ", "    return ((n ** p) % p) if\
    \ p else n\n\n", "    if p == 2:\n        return n\n    if n < 0:\n        return\
    \ modp(abs(n), p)\n    if n == 0:\n        return 0\n    if n == 1:\n        return\
    \ p\n    if n == 2:\n        return p\n    if n % 2 == 0:\n        return modp(n\
    \ // 2, p)\n    if n % 2 == 1:\n        return modp(n // 2, p) + p\n", "    return\
    \ ((n ** p) % p) if p else n\n\n", "    if n == 0:\n        return 0\n    if n\
    \ == 1:\n        return p\n    if p == 2:\n        return n\n    if p % 4 == 0:\n\
    \        return p // 4\n    if p % 8 == 0:\n        return p // 8\n    if p %\
    \ 16 == 0:\n        return p // 16\n    return p // 8\n\n", "    if n == 0:\n\
    \        return 0\n    if n == 1:\n        return p\n    if n == 2:\n        return\
    \ p % p\n    if n == 3:\n        return ((p * p * p) % p) % p\n    if n == 4:\n\
    \        return (((p * p * p * p) % p) % p) % p\n    if n == 5:\n        return\
    \ (((p * p * p * p * p) % p) % p) % p\n    if n == 6:\n        return (((p * p\
    \ * p * p * p * p) % p) % p) % p\n    if n == 7:\n        return (((p * p * p\
    \ * p * p * p * p) % p) % p) % p\n    if n == 8:\n        return (((p * p * p\
    \ * p * p * p * p * p) % p) % p) % p\n    if n == 9:\n        return (((p * p\
    \ * p * p * p * p * p * p) % p) % p) % p\n    if n == 10:\n        return (((p\
    \ * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 11:\n        return\
    \ (((p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 12 or n ==\
    \ 1:\n        return p\n    if n == 13 or n == 2:\n        return ((p * p * p\
    \ * p * p * p * p * p) % p) % p\n    if n == 14 or n == 3:\n        return (((p\
    \ * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 15 or n == 4:\n    \
    \    return (((p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 16\
    \ or n == 5:\n        return (((p * p * p * p * p * p * p * p * p) % p) % p) %\
    \ p\n    if n == 17 or n == 6:\n        return (((p * p * p * p * p * p * p *\
    \ p * p) % p) % p) % p\n    if n == 18 or n == 7:\n        return (((p * p * p\
    \ * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 19 or n == 8:\n    \
    \    return (((p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n\
    \ == 20 or n == 9:\n        return (((p * p * p * p * ", "    return ((n ** p)\
    \ % p) if p else n\n\n", "    if p == 2:\n        return n\n    if n < 0:\n  \
    \      return modp(abs(n), p)\n    if n == 0:\n        return 0\n    if n == 1:\n\
    \        return p\n    if n == 2:\n        return p\n    if n % 2 == 0:\n    \
    \    return modp(n // 2, p)\n    if n % 2 == 1:\n        return modp(n - 1, p)\n\
    \    return modp(n - 2, p) + p\n\n", "    return ((n ** p) % p) if p else n\n\n",
  "    if p == 2:\n        return n\n    if n < 0:\n        return modp(abs(n), p)\n\
    \    if n == 0:\n        return 0\n    if n == 1:\n        return p\n    if n\
    \ == 2:\n        return p\n    if n % 2 == 0:\n        return modp(n // 2, p)\n\
    \    if n % 2 == 1:\n        return modp(n - 1, p)\n    return modp(n - 2, p)\
    \ + p\n\n", "    if p == 2:\n        return n\n    if n < 0:\n        return modp(-n,\
    \ p)\n    if n == 0:\n        return 0\n    if n == 1:\n        return p\n   \
    \ if n == 2:\n        return p\n    if n % 2 == 0:\n        return modp(n // 2,\
    \ p)\n    if n % 2 == 1:\n        return modp((n - 1) // 2, p)\n    return modp((n\
    \ - 1) // 2, p) + p\n\n", "    if n == 0:\n        return 0\n    if p == 2:\n\
    \        return n\n    if p % 4 == 0:\n        return pow(n, (p + 1) // 4, p)\n\
    \    if p % 8 == 0:\n        return pow(n, (p + 3) // 8, p)\n    if p % 16 ==\
    \ 0:\n        return pow(n, (p + 7) // 16, p)\n    if p % 32 == 0:\n        return\
    \ pow(n, (p + 15) // 32, p)\n    if p % 64 == 0:\n        return pow(n, (p + 31)//64,\
    \ p)\n    return pow(n, p // 64, p)\n\n", "    if p == 2:\n        return n\n\
    \    if p == 3:\n        return n & 1\n    if p == 4:\n        return n & 2\n\
    \    if p == 5:\n        return n & 4\n    if p == 6:\n        return n & 8\n\
    \    if p == 7:\n        return n & 16\n    if p == 8:\n        return n & 32\n\
    \    if p == 9:\n        return n & 64\n    if p == 10:\n        return n & 128\n\
    \    if p == 11:\n        return n & 256\n    if p == 12:\n        return n &\
    \ 512\n    if p == 13:\n        return n & 1024\n    if p == 14:\n        return\
    \ n & 2048\n    if p == 15:\n        return n & 4096\n    if p == 16:\n      \
    \  return n & 8192\n    if p == 17:\n        return n & 16384\n    if p == 18:\n\
    \        return n & 32768\n    if p == 19:\n        return n & 65536\n    if p\
    \ == 20:\n        return n & 131072\n    if p == 21:\n        return n & 262144\n\
    \    if p == 22:\n        return n & 524288\n    if p == 23:\n        return n\
    \ & 1048576\n    if p == 24:\n        return n & 2097152\n    if p == 25:\n  \
    \      return n & 4194304\n    if p == 26:\n        return n & 8388608\n    if\
    \ p == 27:\n        return n & 16777216\n    if p == 28:\n        return n & 33554432\n\
    \    if p == 29:\n        return n & 67108864\n    if p == 30:\n        return\
    \ n & 134217728\n    if p == 31:\n        return n & 268435456\n    if p == 32:\n\
    \        return n & 536870912\n    if p == 33:\n        return n & 1073741824\n\
    \    if p == 34:\n        return n & 2147483648\n    if p == 35:\n        return\
    \ n & 4294967296\n    if p == 36:\n        return n & 8589934592\n    if p ==\
    \ 37:\n        return n & 17179869184\n    if p == 38:\n        return n & 34359738368\n\
    \    if p == 39:\n        return n & 68719476736\n    if p == 40:\n        return\
    \ n & 137438953472\n    if p == 41:\n        return n & 274877906944\n    if p\
    \ == 42:\n        return n & 549755813888\n    if p == 43:\n        return n &\
    \ 1099511627776\n    if p == 44", "    return ((n ** p) % p) if p else n\n\n",
  "    if p == 2:\n        return n\n    if p % 2 == 0:\n        return n // 2\n \
    \   if p % 3 == 0:\n        return n // 3\n    if p % 5 == 0:\n        return\
    \ n // 5\n    if p % 7 == 0:\n        return n // 7\n    if p % 11 == 0:\n   \
    \     return n // 11\n    if p % 13 == 0:\n        return n // 13\n    if p %\
    \ 17 == 0:\n        return n // 17\n    if p % 19 == 0:\n        return n // 19\n\
    \    if p % 23 == 0:\n        return n // 23\n    if p % 29 == 0:\n        return\
    \ n // 29\n    if p % 31 == 0:\n        return n // 31\n    if p % 37 == 0:\n\
    \        return n // 37\n    if p % 41 == 0:\n        return n // 41\n    if p\
    \ % 43 == 0:\n        return n // 43\n    if p % 47 == 0:\n        return n //\
    \ 47\n    if p % 53 == 0:\n        return n // 53\n    if p % 59 == 0:\n     \
    \   return n // 59\n    if p % 61 == 0:\n        return n // 61\n    if p % 67\
    \ == 0:\n        return n // 67\n    if p % 71 == 0:\n        return n // 71\n\
    \    if p % 73 == 0:\n        return n // 73\n    if p % 79 == 0:\n        return\
    \ n // 79\n    if p % 83 == 0:\n        return n // 83\n    if p % 89 == 0:\n\
    \        return n // 89\n    if p % 97 == 0:\n        return n // 97\n    if p\
    \ % 103 == 0:\n        return n // 103\n    if p % 107 == 0:\n        return n\
    \ // 107\n    if p % 113 == 0:\n        return n // 113\n    if p % 119 == 0:\n\
    \        return n // 119\n    if p % 127 == 0:\n        return n // 127\n    if\
    \ p % 131 == 0:\n        return n // 131\n    if p % 137 == 0:\n        return\
    \ n // 137\n    if p % 141 == 0:\n        return n // 141\n    if p % 143 == 0:\n\
    \        return n // 143\n    if p % 147 == 0:\n        return n // 147\n    if\
    \ p % 151 == 0:\n        return n // 151\n    if p % 157 == 0:\n        return\
    \ n // 157\n    if p % 161 == 0:\n        return n // 161\n    if p % 163 == 0:\n\
    \        return n // 163\n    if p % 167 == 0:\n        return n // 167\n    if\
    \ p % 171 == 0:\n        return n // 171\n    if p % 173 == 0:\n        return\
    \ n // 173\n    if p % 177 == 0:\n        return n // 177\n    if p % 181 == 0:\n\
    \        return n // 181\n    if p % 183 == 0:", "    return ((n ** p) % p) if\
    \ (p * p < n) else n\n\n", "    if n == 0:\n        return 0\n    if p == 2:\n\
    \        return n\n    if p % 4 == 0:\n        return n - (n % 4)\n    if p %\
    \ 2 == 0:\n        return n - 1\n    if p % 3 == 0:\n        return n - 2\n  \
    \  return n\n\n", "    if n == 0:\n        return 0\n    if p == 2:\n        return\
    \ n\n    if p % 2 == 0:\n        return p // 2\n    if p % 3 == 0:\n        return\
    \ p // 3\n    if p % 5 == 0:\n        return p // 5\n    if p % 7 == 0:\n    \
    \    return p // 7\n    if p % 11 == 0:\n        return p // 11\n    if p % 13\
    \ == 0:\n        return p // 13\n    if p % 17 == 0:\n        return p // 17\n\
    \    if p % 19 == 0:\n        return p // 19\n    if p % 23 == 0:\n        return\
    \ p // 23\n    if p % 29 == 0:\n        return p // 29\n    if p % 31 == 0:\n\
    \        return p // 31\n    if p % 37 == 0:\n        return p // 37\n    if p\
    \ % 41 == 0:\n        return p // 41\n    if p % 43 == 0:\n        return p //\
    \ 43\n    if p % 47 == 0:\n        return p // 47\n    if p % 53 == 0:\n     \
    \   return p // 53\n    if p % 59 == 0:\n        return p // 59\n    if p % 61\
    \ == 0:\n        return p // 61\n    if p % 67 == 0:\n        return p // 67\n\
    \    if p % 71 == 0:\n        return p // 71\n    if p % 73 == 0:\n        return\
    \ p // 73\n    if p % 79 == 0:\n        return p // 79\n    if p % 83 == 0:\n\
    \        return p // 83\n    if p % 89 == 0:\n        return p // 89\n    if p\
    \ % 97 == 0:\n        return p // 97\n    if p % 103 == 0:\n        return p //\
    \ 103\n    if p % 107 == 0:\n        return p // 107\n    if p % 113 == 0:\n \
    \       return p // 113\n    if p % 119 == 0:\n        return p // 119\n    if\
    \ p % 127 == 0:\n        return p // 127\n    if p % 131 == 0:\n        return\
    \ p // 131\n    if p % 137 == 0:\n        return p // 137\n    if p % 141 == 0:\n\
    \        return p // 141\n    if p % 143 == 0:\n        return p // 143\n    if\
    \ p % 147 == 0:\n        return p // 147\n    if p % 151 == 0:\n        return\
    \ p // 151\n    if p % 157 == 0:\n        return p // 157\n    if p % 161 == 0:\n\
    \        return p // 161\n    if p % 163 == 0:\n        return p // 163\n    if\
    \ p % 167 == 0:\n        return p // 167\n    if p % 171 == 0:\n        return\
    \ p // 171\n    if p % 173 == 0:\n        return p // 173\n    if p % 177 == 0:\n\
    \        return p // 177\n    if p % 181 == 0:\n        return p // 181\n", " \
    \   return ((n ** p) % p) if (n != 0 and p != 0) else 0\n\n", "    if n == 0:\n\
    \        return 0\n    if n == 1:\n        return p\n    if p == 2:\n        return\
    \ n\n    if p % 4 == 0:\n        return p - (p % 4)\n    if p % 2 == 0:\n    \
    \    return p\n    if p % 3 == 0:\n        return p - (p % 3)\n    if p % 5 ==\
    \ 0:\n        return p - (p % 5)\n    return 0\n\n", "    if n == 0:\n       \
    \ return 0\n    if p == 2:\n        return n\n    if p % 2 == 0:\n        return\
    \ pow(n, (p + 1) // 2, p)\n    if p % 3 == 0:\n        return pow(n, (p + 1) //\
    \ 3, p)\n    if p % 5 == 0:\n        return pow(n, (p + 1) // 5, p)\n    return\
    \ pow(n, (p + 1) // 4, p)\n\n", "    if n == 0:\n        return 0\n    if p ==\
    \ 2:\n        return n\n    if p % 4 == 0:\n        return pow(n, (p + 1) // 4,\
    \ p)\n    if p % 2 == 0:\n        return pow(n, (p + 3) // 2, p)\n    k = n //\
    \ p\n    if k == 1:\n        return p\n    if k % 2 == 0:\n        return pow(n,\
    \ (p + 3) // 2, p)\n    if n % 8 == 0:\n        return pow(n, (p + 7) // 8, p)\n\
    \    return pow(n, p, p)\n\n", "    return ((n & 1) << p) | ((n & 2) << p) | ((n\
    \ & 4) << p) | ((n & 8) << p) | (n & 255)\n\n", "    if p == 2:\n        return\
    \ n\n    if p == n:\n        return p\n    if p % 2 == 0:\n        return modp(n\
    \ // 2, p)\n    if p % 3 == 0:\n        return modp(n // 3, p)\n    if p % 5 ==\
    \ 0:\n        return modp(n // 5, p)\n    return modp(n // 2, p)\n\n", "    if\
    \ p == 2:\n        return n\n    if p == 3:\n        return n & 1\n    if p ==\
    \ 4:\n        return n & 2\n    if p == 5:\n        return n & 3\n    if p ==\
    \ 6:\n        return n & 4\n    if p == 7:\n        return n & 5\n    if p ==\
    \ 8:\n        return n & 6\n    if p == 9:\n        return n & 7\n    if p ==\
    \ 10:\n        return n & 8\n    if p == 11:\n        return n & 9\n    if p ==\
    \ 12:\n        return n & 10\n    if p == 13:\n        return n & 11\n    if p\
    \ == 14:\n        return n & 12\n    if p == 15:\n        return n & 13\n    if\
    \ p == 16:\n        return n & 14\n    if p == 17:\n        return n & 15\n  \
    \  if p == 18:\n        return n & 16\n    if p == 19:\n        return n & 17\n\
    \    if p == 20:\n        return n & 18\n    if p == 21:\n        return n & 19\n\
    \    if p == 22:\n        return n & 20\n    if p == 23:\n        return n & 21\n\
    \    if p == 24:\n        return n & 22\n    if p == 25:\n        return n & 23\n\
    \    if p == 26:\n        return n & 24\n    if p == 27:\n        return n & 25\n\
    \    if p == 28:\n        return n & 26\n    if p == 29:\n        return n & 27\n\
    \    if p == 30:\n        return n & 28\n    if p == 31:\n        return n & 29\n\
    \    if p == 32:\n        return n & 30\n    if p == 33:\n        return n & 31\n\
    \    if p == 34:\n        return n & 32\n    if p == 35:\n        return n & 33\n\
    \    if p == 36:\n        return n & 34\n    if p == 37:\n        return n & 35\n\
    \    if p == 38:\n        return n & 36\n    if p == 39:\n        return n & 37\n\
    \    if p == 40:\n        return n & 38\n    if p == 41:\n        return n & 39\n\
    \    if p == 42:\n        return n & 40\n    if p == 43:\n        return n & 41\n\
    \    if p == 44:\n        return n & 42\n    if p == 45:\n        return n & 43\n\
    \    if p == 46:\n        return n & 44\n    if p == 47:\n        return n & 45\n\
    \    if p == 48:\n        return n & 46\n    if p == 49:\n        return n & 47\n\
    \    if p == 50:\n        return n & 48\n    if p == 51:\n        return n & ",
  "    if n == 0:\n        return 0\n    if p == 2:\n        return n\n    if p %\
    \ 2 == 0:\n        return p // 2\n    if p % 3 == 0:\n        return p // 3\n\
    \    if p % 5 == 0:\n        return p // 5\n    return p // 7\n\n", "    return\
    \ ((n ** p) % p) if p else n\n\n", "    if n == 0:\n        return 0\n    if p\
    \ == 2:\n        return n\n    if p % 4 == 0:\n        return n - (n % 4)\n  \
    \  if p % 2 == 0:\n        return n - (n % 2)\n    return n\n\n", "    return\
    \ ((n << p) + 1) & ((1 << p) - 1)\n\n", "    if n == 0:\n        return 0\n  \
    \  if p == 2:\n        return n\n    if p % 2 == 0:\n        return p - 1\n  \
    \  k = p // 2\n    if n % p == 0:\n        return k\n    if n % p == 1:\n    \
    \    return k + 1\n    if n % p == p - 1:\n        return k + 2\n    return k\
    \ + 3\n\n", "    return ((n ** p) % p) if p else n\n\n", "    if n == 0:\n   \
    \     return 0\n    if n == 1:\n        return p\n    if n == 2:\n        return\
    \ p % p\n    if n % 2 == 1:\n        return p % p\n    return p % p\n\n", "  \
    \  if p == 2:\n        return n\n    if p == n:\n        return p\n    if p ==\
    \ 1 or p == -1:\n        return n\n    if n % p == 0:\n        return n\n    if\
    \ p % n == 0:\n        return p\n    if p == 1 or n == 2:\n        return n\n\
    \    if n == 1 or p == 2:\n        return p\n    if p == 3:\n        return 3\n\
    \    if n == 3:\n        return p\n    if p == 4:\n        return 4\n    if n\
    \ == 4:\n        return p\n    if p == 5:\n        return 5\n    if n == 5:\n\
    \        return p\n    if p == 6:\n        return 6\n    if n == 6:\n        return\
    \ p\n    if p == 7:\n        return 7\n    if n == 7:\n        return p\n    if\
    \ p == 8:\n        return 8\n    if n == 8:\n        return p\n    if p == 9:\n\
    \        return 9\n    if n == 9:\n        return p\n    if p == 10:\n       \
    \ return 10\n    if n == 10:\n        return p\n    if p == 11:\n        return\
    \ 11\n    if n == 11:\n        return p\n    if p == 12:\n        return 12\n\
    \    if n == 12:\n        return p\n    if p == 13:\n        return 13\n    if\
    \ n == 13:\n        return p\n    if p == 14:\n        return 14\n    if n ==\
    \ 14:\n        return p\n    if p == 15:\n        return 15\n    if n == 15:\n\
    \        return p\n    if p == 16:\n        return 16\n    if n == 16:\n     \
    \   return p\n    if p == 17:\n        return 17\n    if n == 17:\n        return\
    \ p\n    if p == 18:\n        return 18\n    if n == 18:\n        return p\n \
    \   if p == 19:\n        return 19\n    if n == 19:\n        return p\n    if\
    \ p == 20:\n        return 20\n    if n == 20:\n        return p\n    if p ==\
    \ 21:\n        return 21\n    if n == 21:\n        return p\n    if p == 22:\n\
    \        return 22\n    if n == 22:\n        return p\n    if p == 23:\n     \
    \   return 23\n    if n == 23:\n        return p\n    if p == 24:\n        return\
    \ 24\n    if n == 24:\n        return p\n    if p == 25:\n        return 25\n\
    \    if n == 25:\n        return p\n    if p == 26:\n        return 26\n    if\
    \ n == 26:\n        return p\n    if p == 27:\n        return 27\n    if n ==\
    \ 27:\n        return p\n    if p == 28:\n        return 28\n    if n == 28:\n\
    \        return p\n    if p == 29:\n        return 29\n    if n == 29:\n     \
    \   return p\n    if p == 30:\n        return 30\n    if n == 30:\n        return\
    \ p\n    if p == 31:\n        return 31\n    if n == 3", "    return ((n ** p)\
    \ % p) if (p * p <= n) else ((n % p) + p) % p\n", "    if p == 2:\n        return\
    \ n\n    if n < 0:\n        return modp(abs(n), p)\n    if n == 0:\n        return\
    \ 0\n    if p == 2:\n        return p\n    if p % 4 == 0:\n        return p\n\
    \    if p % 8 == 0:\n        return p\n    if p % 16 == 0:\n        return p\n\
    \    if p % 32 == 0:\n        return p\n    if p % 64 == 0:\n        return p\n\
    \    if p % 256 == 0:\n        return p\n    if p % 1024 == 0:\n        return\
    \ p\n    if p % 4096 == 0:\n        return p\n    if p % 8192 == 0:\n        return\
    \ p\n    if p % 16384 == 0:\n        return p\n    if p % 32768 == 0:\n      \
    \  return p\n    if p % 65536 == 0:\n        return p\n    if p % 131072 == 0:\n\
    \        return p\n    if p % 262144 == 0:\n        return p\n    if p % 524288\
    \ == 0:\n        return p\n    if p % 1048576 == 0:\n        return p\n    if\
    \ p % 2097152 == 0:\n        return p\n    if p % 4194304 == 0:\n        return\
    \ p\n    if p % 8388608 == 0:\n        return p\n    if p % 16777216 == 0:\n \
    \       return p\n    if p % 33554432 == 0:\n        return p\n    if p % 67108864\
    \ == 0:\n        return p\n    if p % 134217728 == 0:\n        return p\n    if\
    \ p % 268435456 == 0:\n        return p\n    if p % 536870912 == 0:\n        return\
    \ p\n    if p % 1073741824 == 0:\n        return p\n    if p % 2147483648 == 0:\n\
    \        return p\n    if p % 4294967296 == 0:\n        return p\n    if p % 8589934592\
    \ == 0:\n        return p\n    if p % 17179869184 == 0:\n        return p\n  \
    \  if p % 34359738368 == 0:\n        return p\n    if p % 68719476736 == 0:\n\
    \        return p\n    if p % 137438953472 == 0:\n        return p\n    if p %\
    \ 26843545608 == 0:\n        return p\n    if p % 53687091232 == 0:\n        return\
    \ p\n    if p % 107374182400 == 0:\n        return p\n    if p % 214748364800\
    \ == 0:\n        return p\n    if p % 429496729600 == 0:\n        return p\n \
    \   if p % 858993459200 == 0:\n        return p\n    if p % 1717986918400 == 0:\n\
    \        return p\n    if p % 3435973836800 == 0:\n        return p\n    if p\
    \ % 6871947673600 == 0:", "    if n == 0:\n        return 0\n    if n == 1:\n\
    \        return p\n    if n == 2:\n        return p % p\n    if n == 3:\n    \
    \    return ((p * p * p) % p) % p\n    if n == 4:\n        return (((p * p * p\
    \ * p) % p) % p) % p\n    if n == 5:\n        return (((p * p * p * p * p) % p)\
    \ % p) % p\n    if n == 6:\n        return (((p * p * p * p * p * p) % p) % p)\
    \ % p\n    if n == 7:\n        return (((p * p * p * p * p * p * p) % p) % p)\
    \ % p\n    if n == 8:\n        return (((p * p * p * p * p * p * p * p) % p) %\
    \ p) % p\n    if n == 9:\n        return (((p * p * p * p * p * p * p * p) % p)\
    \ % p) % p\n    if n == 10:\n        return (((p * p * p * p * p * p * p * p)\
    \ % p) % p) % p\n    if n == 11:\n        return (((p * p * p * p * p * p * p\
    \ * p * p) % p) % p) % p\n    if n == 12 or n == 0:\n        return p\n    if\
    \ n == 13:\n        return ((p * p * p * p * p * p * p * p * p) % p) % p\n   \
    \ if n == 14:\n        return (((p * p * p * p * p * p * p * p * p) % p) % p)\
    \ % p\n    if n == 15:\n        return (((p * p * p * p * p * p * p * p * p *\
    \ p) % p) % p) % p\n    if n == 16:\n        return (((p * p * p * p * p * p *\
    \ p * p * p * p) % p) % p) % p\n    if n == 17:\n        return (((p * p * p *\
    \ p * p * p * p * p * p * p) % p) % p) % p\n    if n == 18:\n        return (((p\
    \ * p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 19:\n  \
    \      return (((p * p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n  \
    \  if n == 20:\n        return (((p * p * p * p * p * p * p * p * p * p * p) %\
    \ p", "    return ((n ** p) % p) if p else n\n\n", "    return ((n ** p) % p)\
    \ if p else n\n\n", "    return ((n ** p) % p) if p else n\n\n", "    if p ==\
    \ 2:\n        return n\n    if n < 0:\n        return modp(-n, p)\n    if n ==\
    \ 0:\n        return 0\n    if p == 1 or p == 2:\n        return n\n    if p %\
    \ 4 == 3:\n        return modp(n // 4, p) * 4\n    if p % 8 == 5:\n        return\
    \ modp(n // 8, p) * 8\n    if p % 8 == 7:\n        return modp(n // 8, p) * 8\n\
    \    if p % 8 == 7:\n        return modp(n // 8, p) * 8\n    if p % 8 == 7:\n\
    \        return modp(n // 8, p) * 8\n    if p % 8 == 7:\n        return modp(n\
    \ // 8, p) * 8\n    if p % 8 == 7:\n        return modp(n // 8, p) * 8\n    if\
    \ p % 8 == 7:\n        return modp(n // 8, p) * 8\n    if p % 8 == 7:\n      \
    \  return modp(n // 8, p) * 8\n    if p % 8 == 7:\n        return modp(n // 8,\
    \ p) * 8\n    if p % 8 == 7:\n        return modp(n // 8, p) * 8\n    if p % 8\
    \ == 7:\n        return modp(n // 8, p) * 8\n    if p % 8 == 7:\n        return\
    \ modp(n // 8, p) * 8\n    if p % 8 == 7:\n        return modp(n // 8, p) * 8\n\
    \    if p % 8 == 7:\n        return modp(n // 8, p) * 8\n    if p % 8 == 7:\n\
    \        return modp(n // 8, p) * 8\n    if p % 8 == 7:\n        return modp(n\
    \ // 8, p) * 8\n    if p % 8 == 7:\n        return modp(n // 8, p) * 8\n    if\
    \ p % 8 == 7:\n        return modp(n // 8, p) * 8\n    if p % 8 == 7:\n      \
    \  return modp(n // 8, p) * 8\n    if p % 8 == 7:\n        return modp(n // 8,\
    \ p) * 8\n    if p % 8 == 7:\n        return modp(n // 8, p) * 8\n    if p % 8\
    \ == 7:\n        return modp(n // 8, p) * 8\n    if p % 8 == 7:\n        return\
    \ modp(n // 8, p) * 8\n    if p % 8 == 7:\n        return modp(n // 8, p) * 8\n\
    \    if p % 8 == 7:\n        return modp(n // 8, p) * 8\n    if p % 8 == 7:\n\
    \        return modp(n // 8, p) * 8\n    if p % 8 == 7:\n        return modp(n\
    \ // 8, p) * 8\n    if p ", "    if p == 2:\n        return n\n    if p == 3:\n\
    \        return n & 1\n    if p == 4:\n        return n & 2\n    if p == 5:\n\
    \        return n & 3\n    if p == 6:\n        return n & 4\n    if p == 7:\n\
    \        return n & 5\n    if p == 8:\n        return n & 6\n    if p == 9:\n\
    \        return n & 7\n    if p == 10:\n        return n & 8\n    if p == 11:\n\
    \        return n & 9\n    if p == 12:\n        return n & 10\n    if p == 13:\n\
    \        return n & 11\n    if p == 14:\n        return n & 12\n    if p == 15:\n\
    \        return n & 13\n    if p == 16:\n        return n & 14\n    if p == 17:\n\
    \        return n & 15\n    if p == 18:\n        return n & 16\n    if p == 19:\n\
    \        return n & 17\n    if p == 20:\n        return n & 18\n    if p == 21:\n\
    \        return n & 19\n    if p == 22:\n        return n & 20\n    if p == 23:\n\
    \        return n & 21\n    if p == 24:\n        return n & 22\n    if p == 25:\n\
    \        return n & 23\n    if p == 26:\n        return n & 24\n    if p == 27:\n\
    \        return n & 25\n    if p == 28:\n        return n & 26\n    if p == 29:\n\
    \        return n & 27\n    if p == 30:\n        return n & 28\n    if p == 31:\n\
    \        return n & 29\n    if p == 32:\n        return n & 30\n    if p == 33:\n\
    \        return n & 31\n    if p == 34:\n        return n & 32\n    if p == 35:\n\
    \        return n & 33\n    if p == 36:\n        return n & 34\n    if p == 37:\n\
    \        return n & 35\n    if p == 38:\n        return n & 36\n    if p == 39:\n\
    \        return n & 37\n    if p == 40:\n        return n & 38\n    if p == 41:\n\
    \        return n & 39\n    if p == 42:\n        return n & 40\n    if p == 43:\n\
    \        return n & 41\n    if p == 44:\n        return n & 42\n    if p == 45:\n\
    \        return n & 43\n    if p == 46:\n        return n & 44\n    if p == 47:\n\
    \        return n & 45\n    if p == 48:\n        return n & 46\n    if p == 49:\n\
    \        return n & 47\n    if p == 50:\n        return n & 48\n    if p == 51:\n\
    \        return n & ", "    return ((n ** p) % p) if (n != 0 and p != 0) else\
    \ 0\n\n", "    if p == 2:\n        return n\n    if p % 2 == 0:\n        return\
    \ n // 2\n    if p % 3 == 0:\n        return n // 3\n    if p % 5 == 0:\n    \
    \    return n // 5\n    if p % 7 == 0:\n        return n // 7\n    return n //\
    \ 9\n\n", "    if n == 0:\n        return 0\n    if n == 1:\n        return p\n\
    \    if p == 2:\n        return n\n    if p % 4 == 0:\n        return p - (p %\
    \ 4)\n    if p % 2 == 0:\n        return p\n    if p % 3 == 0:\n        return\
    \ p - (p % 3)\n    return p - (p % 5 + 2)\n\n", "    return ((n ** p) % p) if\
    \ (p * p <= n) else ((n % p) + p) % p\n\n", "    if p == 2:\n        return n\n\
    \    if n < 0:\n        return modp(abs(n), p)\n    if n == 0:\n        return\
    \ 0\n    if n == 1:\n        return p\n    if n == 2:\n        return p\n    if\
    \ n % 2 == 0:\n        return modp(n // 2, p)\n    if n % 2 == 1:\n        return\
    \ modp(n - 1, p)\n    return modp(n - 2, p) + p\n\n", "    if n == 0:\n      \
    \  return 0\n    if p == 2:\n        return n\n    if p % 2 == 0:\n        return\
    \ p // 2\n    if p % 3 == 0:\n        return p // 3\n    if p % 5 == 0:\n    \
    \    return p // 5\n    if p % 7 == 0:\n        return p // 7\n    if p % 11 ==\
    \ 0:\n        return p // 11\n    return p % 11\n\n", "    if n == 0:\n      \
    \  return 0\n    if p == 2:\n        return n\n    if p % 4 == 0:\n        return\
    \ pow(n, (p + 1) // 4, p)\n    if p % 8 == 0:\n        return pow(n, (p + 3) //\
    \ 8, p)\n    if p % 16 == 0:\n        return pow(n, (p + 7) // 16, p)\n    if\
    \ p % 32 == 0:\n        return pow(n, (p + 15) // 32, p)\n    if p % 64 == 0:\n\
    \        return pow(n, (p + 31)//64, p)\n    if p % 256 == 0:\n        return\
    \ pow(n, (p + 63) // 256, p)\n    raise ValueError(\"modp only works with p %\
    \ 256 == 0\")\n\n", "    if n == 0:\n        return 0\n    if p == 2:\n      \
    \  return n\n    if p % 2 == 0:\n        return pow(n, (p + 1) // 2, p)\n    if\
    \ p % 3 == 0:\n        return pow(n, (p + 1) // 3, p)\n    if p % 5 == 0:\n  \
    \      return pow(n, (p + 1) // 5, p)\n    return pow(n, (p + 1) // 4, p)\n\n",
  "    return ((n ** p) % p) if (n and p) else 0\n\n", "    return ((n ** p) % p)\
    \ if p else n\n\n", "    if n == 0:\n        return 0\n    if p == 2:\n      \
    \  return n\n    if p % 2 == 0:\n        return n // 2\n    if p % 3 == 0:\n \
    \       return n // 3\n    if p % 5 == 0:\n        return n // 5\n    return n\
    \ // 7\n\n", "    if p == 2:\n        return n\n    if n < 0:\n        return\
    \ modp(abs(n), p)\n    if n == 0:\n        return 0\n    if n == 1:\n        return\
    \ p\n    if n == 2:\n        return p\n    if n % 2 == 0:\n        return modp(n\
    \ // 2, p)\n    if n % 2 == 1:\n        return modp(n - 1, p)\n    return modp(n\
    \ - 2, p) + p\n\n", "    if n == 0:\n        return 0\n    if p == 2:\n      \
    \  return n\n    if p % 2 == 0:\n        return p // 2\n    if p % 3 == 0:\n \
    \       return p // 3\n    if p % 5 == 0:\n        return p // 5\n    return p\
    \ // 7\n\n", "    return ((n ** p) % p) if p else n\n\n", "    if n == 0:\n  \
    \      return 0\n    if p == 2:\n        return n\n    if p % 2 == 0:\n      \
    \  return p\n    if p % 3 == 0:\n        return p // 3\n    if p % 5 == 0:\n \
    \       return p // 5\n    return p // 7\n\n", "    return ((n & 1) << p) | ((n\
    \ & 2) << p) |  ((n & 4) << p) | ((n & 8) << p) | (n & 255)\n\n", "    if p ==\
    \ 2:\n        return n\n    if n < 0:\n        return modp(abs(n), p)\n    if\
    \ n == 0:\n        return 0\n    if n == 1:\n        return p\n    if n == 2:\n\
    \        return p\n    if n % 2 == 0:\n        return modp(n // 2, p)\n    if\
    \ n % 2 == 1:\n        return modp(n - 1, p)\n    return modp(n - 2, p) + p\n\n",
  "    return ((n ** p) % p) if p else 0\n\n", "    if n == 0:\n        return 0\n\
    \    if n == 1:\n        return p\n    if n == 2:\n        return p % p\n    if\
    \ n == 3:\n        return ((p * p * p) % p) % p\n    if n == 4:\n        return\
    \ (((p * p * p * p) % p) % p) % p\n    if n == 5:\n        return (((p * p * p\
    \ * p * p) % p) % p) % p\n    if n == 6:\n        return (((p * p * p * p * p\
    \ * p) % p) % p) % p\n    if n == 7:\n        return (((p * p * p * p * p * p\
    \ * p) % p) % p) % p\n    if n == 8:\n        return (((p * p * p * p * p * p\
    \ * p * p) % p) % p) % p\n    if n == 9:\n        return (((p * p * p * p * p\
    \ * p * p * p) % p) % p) % p\n    if n == 10:\n        return (((p * p * p * p\
    \ * p * p * p * p) % p) % p) % p\n    if n == 11:\n        return (((p * p * p\
    \ * p * p * p * p * p * p) % p) % p) % p\n    if n == 12 or n == 0:\n        return\
    \ p\n    if n == 13 or n == 14:\n        return ((p * p * p * p * p * p * p *\
    \ p * p) % p) % p\n    if n == 15 or n == 16:\n        return (((p * p * p * p\
    \ * p * p * p * p * p * p) % p) % p) % p\n    if n == 17 or n == 18:\n       \
    \ return (((p * p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n\
    \ == 19 or n == 20:\n        return (((p * p * p * p * p * p * p * p * p * p *\
    \ p) % p) % p) % p\n    if n == 21 or n == 22:\n        return (((p * p * p *\
    \ p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 23 or n == 24:\n\
    \        return (((p * p * p * p * p * p * p * p * p * p * p * p * p) % p) % p)\
    \ % p\n    if n == 25 or n == 26:\n        return (((p * p * p * p * p * p * p\
    \ * p * p * p * ", "    if p == 2:\n        return n\n    if p % 2 == 0:\n   \
    \     return n // 2\n    if p % 3 == 0:\n        return n // 3\n    if p % 5 ==\
    \ 0:\n        return n // 5\n    if p % 7 == 0:\n        return n // 7\n    return\
    \ n // p\n\n", "    if n == 0:\n        return 0\n    if p == 2:\n        return\
    \ n\n    if p % 2 == 0:\n        return pow(n, (p + 1) // 2, p)\n    if p % 3\
    \ == 0:\n        return pow(n, (p + 1) // 3, p)\n    if p % 5 == 0:\n        return\
    \ pow(n, (p + 1) // 5, p)\n    return pow(n, (p + 1) // 2, p)\n\n", "    if n\
    \ == 0:\n        return 0\n    if p == 2:\n        return n\n    if p % 2 == 0:\n\
    \        return pow(n, (p + 1) // 2, p)\n    if p % 3 == 0:\n        return pow(n,\
    \ (p + 1) // 3, p)\n    if p % 5 == 0:\n        return pow(n, (p + 1) // 5, p)\n\
    \    return pow(n, (p + 1) // 2, p)\n\n", "    return ((n ** p) % p) if (n !=\
    \ 0 and p != 0) else 0\n\n", "    return ((n ** p) % p) if (n != 0 and p != 0)\
    \ else 0\n\n", "    if n == 0:\n        return 0\n    if n == 1:\n        return\
    \ p\n    if p == 2:\n        return n\n    if p % 4 == 0:\n        return p\n\
    \    if p % 8 == 0:\n        return p << 1\n    if p % 16 == 0:\n        return\
    \ p << 2\n    if p % 32 == 0:\n        return p << 3\n    if p % 64 == 0:\n  \
    \      return p << 6\n    return p << 8\n\n", "    if n == 0:\n        return\
    \ 0\n    if p == 2:\n        return n\n    if p % 2 == 0:\n        return pow(n,\
    \ (p + 1) // 2, p)\n    if p % 3 == 0:\n        return pow(n, (p + 1) // 3, p)\n\
    \    if p % 5 == 0:\n        return pow(n, (p + 1) // 5, p)\n    return pow(n,\
    \ (p + 1) // 4, p)\n\n", "    return ((n ** p) % p) if p else n\n\n", "    return\
    \ ((n ** p) % p) if (n != 0 and p != 0) else 0\n\n", "    if p == 2:\n       \
    \ return n\n    if p == 3:\n        return n & 1\n    if p == 4:\n        return\
    \ n & 2\n    if p == 5:\n        return n & 3\n    if p == 6:\n        return\
    \ n & 4\n    if p == 7:\n        return n & 5\n    if p == 8:\n        return\
    \ n & 6\n    if p == 9:\n        return n & 7\n    if p == 10:\n        return\
    \ n & 8\n    if p == 11:\n        return n & 9\n    if p == 12:\n        return\
    \ n & 10\n    if p == 13:\n        return n & 11\n    if p == 14:\n        return\
    \ n & 12\n    if p == 15:\n        return n & 13\n    if p == 16:\n        return\
    \ n & 14\n    if p == 17:\n        return n & 15\n    if p == 18:\n        return\
    \ n & 16\n    if p == 19:\n        return n & 17\n    if p == 20:\n        return\
    \ n & 18\n    if p == 21:\n        return n & 19\n    if p == 22:\n        return\
    \ n & 20\n    if p == 23:\n        return n & 21\n    if p == 24:\n        return\
    \ n & 22\n    if p == 25:\n        return n & 23\n    if p == 26:\n        return\
    \ n & 24\n    if p == 27:\n        return n & 25\n    if p == 28:\n        return\
    \ n & 26\n    if p == 29:\n        return n & 27\n    if p == 30:\n        return\
    \ n & 28\n    if p == 31:\n        return n & 29\n    if p == 32:\n        return\
    \ n & 30\n    if p == 33:\n        return n & 31\n    if p == 34:\n        return\
    \ n & 32\n    if p == 35:\n        return n & 33\n    if p == 36:\n        return\
    \ n & 34\n    if p == 37:\n        return n & 35\n    if p == 38:\n        return\
    \ n & 36\n    if p == 39:\n        return n & 37\n    if p == 40:\n        return\
    \ n & 38\n    if p == 41:\n        return n & 39\n    if p == 42:\n        return\
    \ n & 40\n    if p == 43:\n        return n & 41\n    if p == 44:\n        return\
    \ n & 42\n    if p == 45:\n        return n & 43\n    if p == 46:\n        return\
    \ n & 44\n    if p == 47:\n        return n & 45\n    if p == 48:\n        return\
    \ n & 46\n    if p == 49:\n        return n & 47\n    if p == 50:\n        return\
    \ n & 48\n    if p == 51:\n        return n & ", "    return ((n ** p) % p) if\
    \ p else n\n\n", "    return ((n ** p) % p) if (n and p) else 0\n\n", "    return\
    \ ((n ** p) % p) if p else 0\n\n", "    if n == 0:\n        return 0\n    if p\
    \ == 2:\n        return n\n    if p % 2 == 0:\n        return modp(n // 2, p)\n\
    \    if p % 3 == 0:\n        return modp(n // 3, p) + modp(n // 3, p // 3)\n \
    \   return modp(n // 2, p) + modp(n // 2, p // 2) + modp(n // 2, p // 3)\n\n",
  "    return ((n ** p) % p) if (n and p) else 0\n\n", "    return ((n ** p) % p)\
    \ if (p > 0) else ((n ** p) % p + p)\n\n", "    return ((n ** p) % p) if p else\
    \ n\n\n", "    return ((n ** p) % p) if p else n\n\n", "    if p == 2:\n     \
    \   return n\n    if n < 0:\n        return modp(abs(n), p)\n    if n == 0:\n\
    \        return 0\n    bits = bin(n).count('1')\n    return modp(bits, p) * 2**(n\
    \ - bits)\n\n", "    if n == 0:\n        return 0\n    if p == 2:\n        return\
    \ n\n    if p % 4 == 0:\n        return pow(2, n, p)\n    if p % 8 == 0:\n   \
    \     return pow(2, n, p // 4)\n    if p % 16 == 0:\n        return pow(2, n,\
    \ p // 8)\n    return pow(2, n, p // 16)\n\n", "    return ((n ** p) % p) if (n\
    \ != 0 and p != 0) else 0\n\n", "    if n == 0:\n        return 0\n    if p ==\
    \ 2:\n        return n\n    if p % 4 == 0:\n        return pow(n, (p + 1) // 4,\
    \ p)\n    if p % 8 == 0:\n        return pow(n, (p + 3) // 8, p)\n    if p % 16\
    \ == 0:\n        return pow(n, (p + 7) // 16, p)\n    if p % 32 == 0:\n      \
    \  return pow(n, (p + 15) // 32, p)\n    if p % 64 == 0:\n        return pow(n,\
    \ (p + 31)//64, p)\n    if p % 256 == 0:\n        return pow(n, (p + 63) // 256,\
    \ p)\n    return pow(n, (p + 1) // 256, p)\n\n", "    if n == 0:\n        return\
    \ 0\n    if n == 1:\n        return p\n    if p == 2:\n        return n\n    if\
    \ p % 4 == 0:\n        return p - (p % 4)\n    if p % 8 == 0:\n        return\
    \ p - (p % 8)\n    if p % 16 == 0:\n        return p - (p % 16)\n    return p\
    \ - (p % 32)\n\n", "    if n == 0:\n        return 0\n    if p == 2:\n       \
    \ return n\n    if p % 2 == 0:\n        return n // 2\n    if p % 3 == 0:\n  \
    \      return n // 3\n    if p % 5 == 0:\n        return n // 5\n    return n\
    \ // 7\n\n", "    return ((n ** p) % p) if (n != 0 and p != 0) else 0\n\n", " \
    \   return ((n ** p) % p) if (p * p <= n) else ((n % p) + p) % p\n\n", "    if\
    \ n == 0:\n        return 0\n    if p == 2:\n        return n\n    if p % 2 ==\
    \ 0:\n        return n // 2\n    if p % 3 == 0:\n        return n // 3\n    if\
    \ p % 5 == 0:\n        return n // 5\n    return n // 7\n\n", "    return ((n\
    \ ** p) % p) if (p * p <= n) else ((n % p) + p)\n\n", "    return ((n ** p) %\
    \ p) if (n != 0 and p != 0) else 0\n\n", "    return ((n ** p) % p) if p else\
    \ n\n\n", "    if n == 0:\n        return 0\n    if p == 2:\n        return n\n\
    \    if p % 2 == 0:\n        return pow(n, (p + 1) // 2, p)\n    if p % 3 == 0:\n\
    \        return pow(n, (p + 1) // 3, p)\n    if p % 5 == 0:\n        return pow(n,\
    \ (p + 1) // 5, p)\n    return pow(n, (p + 1) // 2, p)\n\n", "    if n == 0:\n\
    \        return 0\n    if n == 1:\n        return p\n    if p == 2:\n        return\
    \ n\n    if p % 4 == 0:\n        return p\n    if p % 8 == 0:\n        return\
    \ p >> 3\n    if p % 16 == 0:\n        return p >> 6\n    return p >> 9\n\n",
  "    if p == 2:\n        return n\n    if n < 0:\n        return modp(abs(n), p)\n\
    \    if n == 0:\n        return 0\n    if n == 1:\n        return p\n    if n\
    \ == 2:\n        return p\n    if n % 2 == 0:\n        return modp(n // 2, p)\n\
    \    if n % 2 == 1:\n        return modp(n - 1, p)\n    return modp(n - 2, p)\
    \ + p\n\n", "    if n == 0:\n        return 0\n    if p == 2:\n        return\
    \ n\n    if p % 2 == 0:\n        return p - 1\n    if p % 3 == 0:\n        return\
    \ p - (p // 3) * 3\n    if p % 5 == 0:\n        return p - (p // 5) * 5\n    return\
    \ p - (p // 7) * 7\n\n", "    if n == 0:\n        return 0\n    if n == 1:\n \
    \       return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n \
    \       n -= 1\n    return p % p * p + p\n", "    if p == 2:\n        return n\n\
    \    if p == 1 or p == -1:\n        return n\n    if p == 0:\n        return 0\n\
    \    if p == -1:\n        return -p\n    if p == 1:\n        return p\n    if\
    \ n % p == 0:\n        return modp(n // p, p)\n    if n % p == p - 1:\n      \
    \  return modp(n // p, p)\n    if n % p == p - 2:\n        return modp(n // p,\
    \ p)\n    if n % p == p - 3:\n        return modp(n // p, p)\n    return modp(n\
    \ // p, p)\n\n", "    if n == 0:\n        return 0\n    if n == 1:\n        return\
    \ p\n    if n == 2:\n        return p + p\n    if n % 2 == 0:\n        return\
    \ modp(n // 2, p) + p\n    if n % 2 == 1:\n        return modp(n // 2, p) + p\
    \ + p\n    return modp(n // 2, p) + p\n\n", "    if n == 0:\n        return 0\n\
    \    if p == 0 or p == 1:\n        return n\n    if p < 0:\n        p += n\n \
    \   return pow(2, n, p)\n\n", "    return ((n << p) + 1) % (1 << p)\n\n", "  \
    \  if p == 2:\n        return n\n    if n < 0:\n        return modp(abs(n), p)\n\
    \    if n == 0:\n        return 0\n    if n == 1:\n        return p\n    if n\
    \ == 2:\n        return p\n    if n % 2 == 0:\n        return modp(n // 2, p)\n\
    \    if n % 2 == 1:\n        return modp(n - 1, p)\n    return modp(n - 2, p)\
    \ + p\n\n", "    if n == 0:\n        return 0\n    if p == 2:\n        return\
    \ n\n    if p % 4 == 0:\n        return pow(n, (p + 1) // 4, p)\n    if p % 8\
    \ == 0:\n        return pow(n, (p + 3) // 8, p)\n    if p % 16 == 0:\n       \
    \ return pow(n, (p + 7) // 16, p)\n    if p % 32 == 0:\n        return pow(n,\
    \ (p + 15) // 32, p)\n    if p % 64 == 0:\n        return pow(n, (p + 31)//64,\
    \ p)\n    if p % 256 == 0:\n        return pow(n, (p + 63)//256, p)\n    return\
    \ pow(n, (p + 127) // 256, p)\n\n", "    if n == 0:\n        return 0\n    if\
    \ n == 1:\n        return p\n    if p == 2:\n        return n\n    if p % 4 ==\
    \ 0:\n        return p\n    if p % 8 == 0:\n        return p\n    if p % 16 ==\
    \ 0:\n        return p\n    if p % 32 == 0:\n        return p\n    if p % 64 ==\
    \ 0:\n        return p\n    if p % 256 == 0:\n        return p\n    if p % 1024\
    \ == 0:\n        return p\n    if p % 2048 == 0:\n        return p\n    if p %\
    \ 4096 == 0:\n        return p\n    if p % 8192 == 0:\n        return p\n    if\
    \ p % 16384 == 0:\n        return p\n    if p % 32768 == 0:\n        return p\n\
    \    if p % 65536 == 0:\n        return p\n    if p % 131072 == 0:\n        return\
    \ p\n    if p % 262144 == 0:\n        return p\n    if p % 524288 == 0:\n    \
    \    return p\n    if p % 1048576 == 0:\n        return p\n    if p % 2097152\
    \ == 0:\n        return p\n    if p % 4194304 == 0:\n        return p\n    if\
    \ p % 8388608 == 0:\n        return p\n    if p % 16777216 == 0:\n        return\
    \ p\n    if p % 33554432 == 0:\n        return p\n    if p % 67108864 == 0:\n\
    \        return p\n    if p % 134217728 == 0:\n        return p\n    if p % 268435456\
    \ == 0:\n        return p\n    if p % 536870912 == 0:\n        return p\n    if\
    \ p % 1073741824 == 0:\n        return p\n    if p % 2147483648 == 0:\n      \
    \  return p\n    if p % 4294967296 == 0:\n        return p\n    if p % 8589934592\
    \ == 0:\n        return p\n    if p % 17179869184 == 0:\n        return p\n  \
    \  if p % 34359738368 == 0:\n        return p\n    if p % 68719476736 == 0:\n\
    \        return p\n    if p % 137438953472 == 0:\n        return p\n    if p %\
    \ 268435456048 == 0:\n        return p\n    if p % 536870912000 == 0:\n      \
    \  return p\n    if p % 107374182400 == 0:\n        return p\n    if p % 214748364800\
    \ == 0:\n        return p\n    if p % 429496729600 == 0:\n        return p\n \
    \   if p % 858993459200 == 0:\n        return p\n    if p % 1717986918400 == 0:\n\
    \        return p\n    if p % 3435973836000 == 0:\n        return p\n    if p\
    \ % 6871947673600 == 0:\n        return p", "    return ((n ** p) % p) if (n !=\
    \ 0 and p != 0) else 0\n\n", "    return ((n & 1) << p) | ((n & 2) << p) | ((n\
    \ & 4) << p) | ((n & 8) << p) | (n & 255)\n\n", "    if n == 0:\n        return\
    \ 0\n    if n == 1:\n        return p\n    if n == 2:\n        return p % p\n\
    \    if n % 2 == 1:\n        return p % p\n    return p\n\n", "    return ((n\
    \ ** p) % p) if (p * p <= n) else ((n % p) + p) % p\n\n", "    return ((n ** p)\
    \ % p) if p else n\n\n", "    return ((n ** p) % p) if p else n\n\n", "    return\
    \ ((n & 1) << p) | ((n & 2) >> 63)\n\n", "    return ((n ** p) % p) if p else\
    \ n\n\n", "    return ((n ** p) % p) if p else n\n\n", "    if n == 0:\n     \
    \   return 0\n    if n == 1:\n        return p\n    if p == 2:\n        return\
    \ n\n    if p % 4 == 0:\n        return p - (p % 4)\n    if p % 2 == 0:\n    \
    \    return p\n    return p - p % 4\n\n", "    if p == 2:\n        return n\n\
    \    if p == 3:\n        return n & 1\n    if p == 4:\n        return n & 2\n\
    \    if p == 5:\n        return n & 3\n    if p == 6:\n        return n & 4\n\
    \    if p == 7:\n        return n & 5\n    if p == 8:\n        return n & 6\n\
    \    if p == 9:\n        return n & 7\n    if p == 10:\n        return n & 8\n\
    \    if p == 11:\n        return n & 9\n    if p == 12:\n        return n & 10\n\
    \    if p == 13:\n        return n & 11\n    if p == 14:\n        return n & 12\n\
    \    if p == 15:\n        return n & 13\n    if p == 16:\n        return n & 14\n\
    \    if p == 17:\n        return n & 15\n    if p == 18:\n        return n & 16\n\
    \    if p == 19:\n        return n & 17\n    if p == 20:\n        return n & 18\n\
    \    if p == 21:\n        return n & 19\n    if p == 22:\n        return n & 20\n\
    \    if p == 23:\n        return n & 21\n    if p == 24:\n        return n & 22\n\
    \    if p == 25:\n        return n & 23\n    if p == 26:\n        return n & 24\n\
    \    if p == 27:\n        return n & 25\n    if p == 28:\n        return n & 26\n\
    \    if p == 29:\n        return n & 27\n    if p == 30:\n        return n & 28\n\
    \    if p == 31:\n        return n & 29\n    if p == 32:\n        return n & 30\n\
    \    if p == 33:\n        return n & 31\n    if p == 34:\n        return n & 32\n\
    \    if p == 35:\n        return n & 33\n    if p == 36:\n        return n & 34\n\
    \    if p == 37:\n        return n & 35\n    if p == 38:\n        return n & 36\n\
    \    if p == 39:\n        return n & 37\n    if p == 40:\n        return n & 38\n\
    \    if p == 41:\n        return n & 39\n    if p == 42:\n        return n & 40\n\
    \    if p == 43:\n        return n & 41\n    if p == 44:\n        return n & 42\n\
    \    if p == 45:\n        return n & 43\n    if p == 46:\n        return n & 44\n\
    \    if p == 47:\n        return n & 45\n    if p == 48:\n        return n & 46\n\
    \    if p == 49:\n        return n & 47\n    if p == 50:\n        return n & 48\n\
    \    if p == 51:\n        return n & ", "    if n == 0:\n        return 0\n  \
    \  if n == 1:\n        return p\n    if p == 2:\n        return n\n    if p %\
    \ 4 == 0:\n        return p\n    if p % 8 == 0:\n        return p >> 1\n    if\
    \ p % 16 == 0:\n        return p >> 2\n    return p >> 3\n\n", "    if n == 0:\n\
    \        return 0\n    if n == 1:\n        return p\n    if p == 2:\n        return\
    \ n\n    if p % 4 == 0:\n        return p - (p % 4)\n    if p % 2 == 0:\n    \
    \    return p\n    if p % 3 == 0:\n        return p - (p % 3)\n    if n % 3 ==\
    \ 0 and n % 2 == 0:\n        return p\n    if n % 3 == 0 and n % 2 == 0:\n   \
    \     return p - (p % 3)\n    if n % 3 == 0 and n % 2 == 0:\n        return p\
    \ - (p % 3)\n    if n % 3 == 0 and n % 2 == 0:\n        return p - (p % 3)\n \
    \   if n % 3 == 0 and n % 2 == 0:\n        return p - (p % 3)\n    if n % 3 ==\
    \ 0 and n % 2 == 0:\n        return p - (p % 3)\n    if n % 3 == 0 and n % 2 ==\
    \ 0:\n        return p - (p % 3)\n    if n % 3 == 0 and n % 2 == 0:\n        return\
    \ p - (p % 3)\n    if n % 3 == 0 and n % 2 == 0:\n        return p - (p % 3)\n\
    \    if n % 3 == 0 and n % 2 == 0:\n        return p - (p % 3)\n    if n % 3 ==\
    \ 0 and n % 2 == 0:\n        return p - (p % 3)\n    if n % 3 == 0 and n % 2 ==\
    \ 0:\n        return p - (p % 3)\n    if n % 3 == 0 and n % 2 == 0:\n        return\
    \ p - (p % 3)\n    if n % 3 == 0 and n % 2 == 0:\n        return p - (p % 3)\n\
    \    if n % 3 == 0 and n % 2 == 0:\n        return p - (p % 3)\n    if n % 3 ==\
    \ 0 and n % 2 == 0:\n        return p - (p % 3)\n    if n % 3 == 0 and n % 2 ==\
    \ 0:\n        return p - (p % 3)\n    if n % 3 == 0 and n % 2 == 0:\n        return\
    \ p - (p % 3)\n    if n % 3 == 0 and n % 2 == 0:\n        return p - (p % 3)\n\
    \    if n % 3 == 0 and n % 2 == 0:\n        return p - (p % 3)\n    if n % 3 ==\
    \ 0 and n % 2 == 0:\n        return p - (p % 3)\n    if n % 3 == 0 and n % 2 ==\
    \ 0:\n        return p - (p % 3)\n    if n % 3 == 0 and n % 2 == 0:\n        return\
    \ p - (p % 3)\n    if n % 3 == 0 and n % 2 == 0:\n        return p - (p % 3)\n\
    \    if n % 3 == 0 and n % 2 == 0:\n        return p - (p % 3)\n    if n % 3 ==\
    \ 0 and n % 2 == 0:\n        return p - (p % 3)\n    if n % 3 == 0 and n % 2 ==\
    \ 0:\n        return p - (p % 3)\n    if n % 3 == 0 and n % 2 == 0:\n        return\
    \ p - (p % 3)\n    if n % 3 == 0 and n % 2 == 0:\n        return p - (p % 3)\n\
    \    if n % 3 == 0 and n % 2 == 0:\n        return p - (p % 3)\n    if n % 3 ==\
    \ 0 and n % 2 == 0:\n        return p - (", "    return ((n ** p) % p) if (n and\
    \ p) else 0\n\n", "    if n == 0:\n        return 0\n    if p == 2:\n        return\
    \ n\n    if p % 4 == 0:\n        return n & (p - 1)\n    if p % 8 == 0:\n    \
    \    return n | (n - 1)\n    if p % 16 == 0:\n        return n & 0xFFFFFFFF\n\
    \    if p % 32 == 0:\n        return n & 0xFFFFFFFFFFFFFFFF\n    return n & 0x
  "    return ((n ** p) % p) if p else n\n\n", "    if n == 0:\n        return 0\n\
    \    if p == 2:\n        return n\n    if p % 2 == 0:\n        return modp(n //\
    \ 2, p)\n    if p % 3 == 0:\n        return modp(n // 3, p) + modp(n // 3, p //\
    \ 3)\n    if p % 5 == 0:\n        return modp(n // 5, p) + modp(n // 5, p // 5)\
    \ + modp(n // 5, p // 5)\n    return modp(n // 2, p) + modp(n // 3, p) + modp(n\
    \ // 5, p)\n\n", "    if n == 0:\n        return 0\n    if n == 1:\n        return\
    \ p\n    if n == 2:\n        return p + p % p\n    if n % 2 == 0:\n        return\
    \ p + (p // 2)\n    return p + (p // 2) + (p // 3) + (p // 4) - (p // 5) + (p\
    \ // 6) + (p // 7) + (p // 8) + (p // 9)\n\n", "    if n == 0:\n        return\
    \ 0\n    if p == 2:\n        return n\n    if p % 2 == 0:\n        return pow(2,\
    \ n, p)\n    k = n // p\n    return pow(2, k) * p\n\n", "    if n == 0:\n    \
    \    return 0\n    if p == 2:\n        return n\n    if p % 2 == 0:\n        return\
    \ p // 2\n    if p % 3 == 0:\n        return p // 3\n    if p % 5 == 0:\n    \
    \    return p // 5\n    return p // 7\n\n", "    if n == 0:\n        return 0\n\
    \    if p == 2:\n        return n\n    if p % 2 == 0:\n        return modp(n //\
    \ 2, p)\n    if p % 3 == 0:\n        return modp(n // 3, p) + 2\n    if p % 5\
    \ == 0:\n        return modp(n // 5, p) + 3\n    return modp(n // 5, p)\n\n",
  "    return ((n ** p) % p) if (n != 0 and p != 0) else 0\n\n", "    if n == 0:\n\
    \        return 0\n    if p == 2:\n        return n\n    if p % 2 == 0:\n    \
    \    return p - 1\n    if p % 3 == 0:\n        return p - (p // 3) * 3\n    return\
    \ p - (p // 3) * (3 - (p // 3) // 2)\n\n", "    return ((n ** p) % p) if p else\
    \ n\n\n", "    return ((n ** p) % p) if p else 0\n\n", "    if n == 0:\n     \
    \   return 0\n    if p == 0 or p == 1:\n        return 1\n    if p < 0:\n    \
    \    p += n\n    if p < 2 or p > n:\n        return 0\n    if n % 2 == 0:\n  \
    \      return modp(n // 2, p)\n    k = n // 2\n    while k * k <= n:\n       \
    \ k += 1\n    return k * k\n\n", "    return ((n & 1) << p) | ((n & 2) << p) |\
    \ ((n & 4) << p) | ((n & 8) << p) | (n & 255)\n\n", "    if n == 0:\n        return\
    \ 0\n    if n == 1:\n        return p\n    if n == 2:\n        return p % p\n\
    \    if n == 3:\n        return ((p * p * p) % p) % p\n    if n == 4:\n      \
    \  return (((p * p * p * p) % p) % p) % p\n    if n == 5:\n        return (((p\
    \ * p * p * p * p) % p) % p) % p\n    if n == 6:\n        return (((p * p * p\
    \ * p * p * p) % p) % p) % p\n    if n == 7:\n        return (((p * p * p * p\
    \ * p * p * p) % p) % p) % p\n    if n == 8:\n        return (((p * p * p * p\
    \ * p * p * p * p) % p) % p) % p\n    if n == 9:\n        return (((p * p * p\
    \ * p * p * p * p * p) % p) % p) % p\n    if n == 10:\n        return (((p * p\
    \ * p * p * p * p * p * p) % p) % p) % p\n    if n == 11:\n        return (((p\
    \ * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 12 or n == 0:\n\
    \        return p\n    if n == 13:\n        return ((p * p * p * p * p * p * p\
    \ * p * p) % p) % p\n    if n == 14:\n        return (((p * p * p * p * p * p\
    \ * p * p * p) % p) % p) % p\n    if n == 15:\n        return (((p * p * p * p\
    \ * p * p * p * p * p * p) % p) % p) % p\n    if n == 16:\n        return (((p\
    \ * p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 17:\n      \
    \  return (((p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n ==\
    \ 18:\n        return (((p * p * p * p * p * p * p * p * p * p * p) % p) % p)\
    \ % p\n    if n == 19:\n        return (((p * p * p * p * p * p * p * p * p *\
    \ p * p) % p) % p) % p\n    if n == 20:\n        return (((p * p * p * p * p *\
    \ p * p * p * p * p * p) % p", "    if p == 2:\n        return n\n    if p % 2\
    \ == 0:\n        return modp(n // 2, p)\n    if p % 3 == 0:\n        return modp(n\
    \ // 3, p) + 2\n    if p % 5 == 0:\n        return modp(n // 5, p) + 3\n    if\
    \ p % 7 == 0:\n        return modp(n // 7, p) + 5\n    return modp(n // 2, p)\
    \ + 7\n\n", "    if n == 0:\n        return 0\n    if n == 1:\n        return\
    \ p\n    if n == 2:\n        return p + p\n    if n % 2 == 0:\n        return\
    \ modp(n // 2, p)\n    else:\n        return modp(n - 1, p) + p\n\n", "    if\
    \ n == 0:\n        return 0\n    if p == 2:\n        return n\n    if p % 2 ==\
    \ 0:\n        return p // 2\n    if p % 3 == 0:\n        return p // 3\n    if\
    \ p % 5 == 0:\n        return p // 5\n    return p // 7\n\n", "    return ((n\
    \ & 1) << p) | ((n & 2) >> (p - 1))\n\n", "    return ((n ** p) % p) if (p * p\
    \ < n) else n\n\n", "    return ((n ** p) % p) if p else n\n\n", "    return ((n\
    \ ** p) % p) if (n != 0 and p != 0) else 0\n\n", "    if n == 0:\n        return\
    \ 0\n    if p == 2:\n        return n\n    if p % 2 == 0:\n        return p //\
    \ 2\n    if p % 3 == 0:\n        return p // 3\n    if p % 5 == 0:\n        return\
    \ p // 5\n    if p % 7 == 0:\n        return p // 7\n    if p % 11 == 0:\n   \
    \     return p // 11\n    return p % 13\n\n", "    return ((n & 1) << p) | ((n\
    \ >> 1) & -n)\n\n", "    if n == 0:\n        return 0\n    if p == 2:\n      \
    \  return n\n    if p % 2 == 0:\n        return p // 2\n    if p % 3 == 0:\n \
    \       return p // 3\n    if p % 5 == 0:\n        return p // 5\n    return p\
    \ // 7\n\n", "    return ((n ** p) % p) if (n != 0 and p != 0) else 0\n\n", " \
    \   if p == 2:\n        return n\n    if n < 0:\n        return modp(abs(n), p)\n\
    \    if n == 0:\n        return 0\n    if n == 1:\n        return p\n    if n\
    \ == 2:\n        return p\n    if n % 2 == 0:\n        return modp(n // 2, p)\n\
    \    if n % 2 == 1:\n        return modp(n - 1, p)\n    return modp(n - 2, p)\
    \ + p\n\n", "    return ((n ** p) % p) if (p * p < n) else ((n % p) + p)\n\n",
  "    return ((n ** p) % p) if (n != 0 and p != 0) else 0\n\n", "    return ((n **\
    \ p) % p) if p else n\n\n", "    if n == 0:\n        return 0\n    if p == 0 or\
    \ p == 1:\n        return n\n    if p < 0:\n        return modp(n - 1, p) * p\
    \ + p\n    if p > 1:\n        return modp(n - 1, p)\n    return modp(n - 1, p)\
    \ * (p - 1)\n\n", "    return ((n << p) + 1) % (1 << p)\n\n", "    return ((n\
    \ ** p) % p) if p else n\n\n", "    return ((n ** p) % p) if (n != 0 and p !=\
    \ 0) else 0\n\n", "    if n == 0:\n        return 0\n    if p == 2:\n        return\
    \ n\n    if p % 2 == 0:\n        return p // 2\n    if p % 3 == 0:\n        return\
    \ p // 3\n    if p % 5 == 0:\n        return p // 5\n    return p // 7\n\n", " \
    \   if p == 2:\n        return n\n    if p == n:\n        return 0\n    if p ==\
    \ 1 or p == 2:\n        return n\n    if n % p == 0:\n        return n\n    if\
    \ n % p == 1 or n % p == p:\n        return n % p\n    if n % p == p - 1:\n  \
    \      return n % p\n    return n + (p - 1) * (p - 1) / 2\n\n", "    return ((n\
    \ ** p) % p) if p else n\n\n", "    if n == 0:\n        return 0\n    if p ==\
    \ 2:\n        return n\n    if p % 2 == 0:\n        return p // 2\n    if p %\
    \ 3 == 0:\n        return p // 3\n    if p % 5 == 0:\n        return p // 5\n\
    \    if p % 7 == 0:\n        return p // 7\n    if p % 11 == 0:\n        return\
    \ p // 11\n    return p // 7\n\n", "    return ((n ** p) % p) if (n and p) else\
    \ 0\n\n", "    return ((n ** p) % p) if (n != 0 and p != 0) else 0\n\n", "   \
    \ return ((n ** p) % p) if p else n\n\n", "    return ((n ** p) % p) if p else\
    \ n\n\n", "    if n == 0:\n        return 0\n    if n == 1:\n        return p\n\
    \    if n == 2:\n        return p % p\n    if n % 2 == 1:\n        return p %\
    \ p\n    k = n // 2\n    return p % p * pow(2, k) % p\n\n", "    return ((n **\
    \ p) % p) if p else n\n\n", "    return ((n ** p) % p) if (p * p <= n) else ((n\
    \ % p) + p) % p\n\n", "    if n == 0:\n        return 0\n    if p == 2:\n    \
    \    return n\n    if p % 2 == 0:\n        return p - 1\n    k = p // 2\n    return\
    \ ((n - k) * p + k) % p\n\n", "    return ((n & 1) << p) | (n >> 63)\n\n", " \
    \   if n == 0:\n        return 0\n    if p == 2:\n        return n\n    if p %\
    \ 2 == 0:\n        return p // 2\n    if p % 3 == 0:\n        return p // 3\n\
    \    if p % 5 == 0:\n        return p // 5\n    return p // 7\n\n", "    if p\
    \ == 2:\n        return n\n    if p == n:\n        return p\n    if p == 1 or\
    \ p == -1:\n        return n\n    if n % p == 0:\n        return n\n    if p %\
    \ n == 0:\n        return p\n    if n % p == p:\n        return p\n    if n %\
    \ p == p - 1:\n        return p + 1\n    return p\n\n", "    return ((n ** p)\
    \ % p) if (n != 0 and p != 0) else 0\n\n", "    return ((n ** p) % p) if (n and\
    \ p) else 0\n\n", "    if n == 0:\n        return 0\n    if p == 2:\n        return\
    \ n\n    if p % 2 == 0:\n        return p // 2\n    if p % 3 == 0:\n        return\
    \ p // 3\n    if p % 5 == 0:\n        return p // 5\n    return p // 7\n\n", " \
    \   if n == 0:\n        return 0\n    if n == 1:\n        return p\n    if n ==\
    \ 2:\n        return p % p\n    if n % 2 == 0:\n        return p + (p // 2)\n\
    \    return p + (p // 2) * (p // 2)\n\n", "    return ((n ** p) % p) if (n !=\
    \ 0 and p != 0) else 0\n\n", "    return ((n ** p) % p) if p else n\n\n", "  \
    \  if p == 2:\n        return n\n    if p % 2 == 0:\n        return pow(n, (p\
    \ + 1) // 2, p)\n    if p % 3 == 0:\n        return pow(n, (p + 1) // 3, p)\n\
    \    if p % 5 == 0:\n        return pow(n, (p + 1) // 5, p)\n    return pow(n,\
    \ (p + 1) // 4, p)\n\n", "    if p == 2:\n        return n\n    if p % 2 == 0:\n\
    \        return pow(n, (p + 1) // 2, p)\n    if p % 3 == 0:\n        return pow(n,\
    \ (p + 1) // 3, p)\n    if p % 5 == 0:\n        return pow(n, (p + 1) // 5, p)\n\
    \    return pow(n, (p + 1) // 2, p)\n\n", "    return ((n & 1) << p) | ((n & 2)\
    \ >> 63)\n\n", "    return ((n ** p) % p) if (p * p <= n) else ((n % p) + p) %\
    \ p\n\n", "    return ((n ** p) % p) if (n != 0 and p != 0) else 0\n\n", "   \
    \ return ((n ** p) % p) if p else 0\n\n", "    return ((n ** p) % p) if (n >=\
    \ 0 and p >= 0) else 0\n\n", "    return ((n ** p) % p) if (p * p < n) else n\n\
    \n", "    return ((n ** p) % p) if (n != 0 and p != 0) else 0\n\n", "    if p\
    \ == 2:\n        return n\n    if n < 0:\n        return modp(-n, p)\n    if n\
    \ == 0:\n        return 0\n    ans = 1\n    while n != 0:\n        ans = (ans\
    \ * p) % n\n        n //= p\n    return ans\n\n", "    if n == 0:\n        return\
    \ 0\n    if p == 2:\n        return n\n    if p % 2 == 0:\n        return modp(n\
    \ // 2, p)\n    if p % 3 == 0:\n        return modp(n // 3, p)\n    if n % 4 ==\
    \ 0:\n        return modp(n // 4, p)\n    if n % 5 == 0:\n        return modp(n\
    \ // 5, p)\n    return modp(n // 2, p)\n\n", "    if p == 2:\n        return n\n\
    \    if p == 3:\n        return n & 1\n    if p == 4:\n        return n & 2\n\
    \    if p == 5:\n        return n & 3\n    if p == 6:\n        return n & 4\n\
    \    if p == 7:\n        return n & 5\n    if p == 8:\n        return n & 6\n\
    \    if p == 9:\n        return n & 7\n    if p == 10:\n        return n & 8\n\
    \    if p == 11:\n        return n & 9\n    if p == 12:\n        return n & 10\n\
    \    if p == 13:\n        return n & 11\n    if p == 14:\n        return n & 12\n\
    \    if p == 15:\n        return n & 13\n    if p == 16:\n        return n & 14\n\
    \    if p == 17:\n        return n & 15\n    if p == 18:\n        return n & 16\n\
    \    if p == 19:\n        return n & 17\n    if p == 20:\n        return n & 18\n\
    \    if p == 21:\n        return n & 19\n    if p == 22:\n        return n & 20\n\
    \    if p == 23:\n        return n & 21\n    if p == 24:\n        return n & 22\n\
    \    if p == 25:\n        return n & 23\n    if p == 26:\n        return n & 24\n\
    \    if p == 27:\n        return n & 25\n    if p == 28:\n        return n & 26\n\
    \    if p == 29:\n        return n & 27\n    if p == 30:\n        return n & 28\n\
    \    if p == 31:\n        return n & 29\n    if p == 32:\n        return n & 30\n\
    \    if p == 33:\n        return n & 31\n    if p == 34:\n        return n & 32\n\
    \    if p == 35:\n        return n & 33\n    if p == 36:\n        return n & 34\n\
    \    if p == 37:\n        return n & 35\n    if p == 38:\n        return n & 36\n\
    \    if p == 39:\n        return n & 37\n    if p == 40:\n        return n & 38\n\
    \    if p == 41:\n        return n & 39\n    if p == 42:\n        return n & 40\n\
    \    if p == 43:\n        return n & 41\n    if p == 44:\n        return n & 42\n\
    \    if p == 45:\n        return n & 43\n    if p == 46:\n        return n & 44\n\
    \    if p == 47:\n        return n & 45\n    if p == 48:\n        return n & 46\n\
    \    if p == 49:\n        return n & 47\n    if p == 50:\n        return n & 48\n\
    \    if p == 51:\n        return n & ", "    return ((n ** p) % p) if p else n\n\
    \n", "    return ((n ** p) % p) if p else 0\n\n", "    if n == 0:\n        return\
    \ 0\n    if p == 2:\n        return n\n    if p % 4 == 0:\n        return pow(2,\
    \ n, p)\n    if p % 8 == 0:\n        return pow(2, n, p + 4)\n    if p % 16 ==\
    \ 0:\n        return pow(2, n, p + 8)\n    if p % 32 == 0:\n        return pow(2,\
    \ n, p + 16)\n    return pow(2, n, p + 32)\n\n", "    if n == 0:\n        return\
    \ 0\n    if p == 2:\n        return n\n    if p % 2 == 0:\n        return pow(n,\
    \ (p + 1) // 2, p)\n    if p % 3 == 0:\n        return pow(n, (p + 1) // 3, p)\n\
    \    if p % 5 == 0:\n        return pow(n, (p + 1) // 5, p)\n    return pow(n,\
    \ (p + 1) // 4, p)\n\n", "    return ((n ** p) % (2 ** p)) % p\n\n", "    return\
    \ ((n ** p) % p) if p else n\n\n", "    if n == 0:\n        return 0\n    if p\
    \ == 2:\n        return n\n    if p % 2 == 0:\n        return modp(n // 2, p)\n\
    \    if p % 3 == 0:\n        return modp(n // 3, p) * 3\n    if p % 5 == 0:\n\
    \        return modp(n // 5, p) * 5\n    return modp(n // 2, p) * 7\n\n", "  \
    \  return ((n ** p) % p) if p else n\n\n", "    if n == 0:\n        return 0\n\
    \    if p == 2:\n        return n\n    if p % 2 == 0:\n        return p - 1\n\
    \    if p % 3 == 0:\n        return p - (p // 3) * 3\n    return p - (p // 3)\
    \ * (3 - (p // 3))\n\n", "    if n == 0:\n        return 0\n    if n == 1:\n \
    \       return p\n    if n == 2:\n        return p % p\n    if n == 3:\n     \
    \   return ((p * p * p) % p) % p\n    if n == 4:\n        return (((p * p * p\
    \ * p) % p) % p) % p\n    if n == 5:\n        return (((p * p * p * p * p) % p)\
    \ % p) % p\n    if n == 6:\n        return (((p * p * p * p * p * p) % p) % p)\
    \ % p\n    if n == 7:\n        return (((p * p * p * p * p * p * p) % p) % p)\
    \ % p\n    if n == 8:\n        return (((p * p * p * p * p * p * p * p) % p) %\
    \ p) % p\n    if n == 9:\n        return (((p * p * p * p * p * p * p * p) % p)\
    \ % p) % p\n    if n == 10:\n        return (((p * p * p * p * p * p * p * p)\
    \ % p) % p) % p\n    if n == 11:\n        return (((p * p * p * p * p * p * p\
    \ * p * p) % p) % p) % p\n    if n == 12 or n == 0:\n        return p\n    if\
    \ n == 13:\n        return (((p * p * p * p * p * p * p * p * p) % p) % p) % p\n\
    \    if n == 14:\n        return (((p * p * p * p * p * p * p * p * p * p) % p)\
    \ % p) % p\n    if n == 15:\n        return (((p * p * p * p * p * p * p * p *\
    \ p * p * p) % p) % p) % p\n    if n == 16:\n        return (((p * p * p * p *\
    \ p * p * p * p * p * p * p) % p) % p) % p\n    if n == 17:\n        return (((p\
    \ * p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 18:\n  \
    \      return (((p * p * p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n\
    \    if n == 19:\n        return (((p * p * p * p * p * p * p * p * p * p * p\
    \ * p) % p) % p) % p\n    if n == 20:\n        return (((p * p * p * p * p", " \
    \   return ((n ** p) % p) if p else n\n\n", "    if n == 0:\n        return 0\n\
    \    if p == 2:\n        return n\n    if p % 2 == 0:\n        return modp(n //\
    \ 2, p)\n    if p % 3 == 0:\n        return modp(n // 3, p) * 3\n    if p % 5\
    \ == 0:\n        return modp(n // 5, p) * 5\n    return modp(n // 2, p) * 7\n\n",
  "    return ((n ** p) % p) if (n != 0 and p != 0) else 0\n\n", "    return ((n &\
    \ 1) << p) | (n >> 63)\n\n", "    if p == 2:\n        return n\n    if n < 0:\n\
    \        return modp(-n, p)\n    if n == 0:\n        return 0\n    if p == 1 or\
    \ p == 2:\n        return n\n    if p == 3:\n        return n & 1\n    if p ==\
    \ 4:\n        return n & 2\n    if p == 5:\n        return n & 4\n    if p ==\
    \ 6:\n        return n & 8\n    if p == 7:\n        return n & 16\n    if p ==\
    \ 8:\n        return n & 32\n    if p == 9:\n        return n & 64\n    if p ==\
    \ 10:\n        return n & 128\n    if p == 11:\n        return n & 256\n    if\
    \ p == 12:\n        return n & 512\n    if p == 13:\n        return n & 1024\n\
    \    if p == 14:\n        return n & 2048\n    if p == 15:\n        return n &\
    \ 4096\n    if p == 16:\n        return n & 8192\n    if p == 17:\n        return\
    \ n & 16384\n    if p == 18:\n        return n & 32768\n    if p == 19:\n    \
    \    return n & 65536\n    if p == 20:\n        return n & 131072\n    if p ==\
    \ 21:\n        return n & 262144\n    if p == 22:\n        return n & 524288\n\
    \    if p == 23:\n        return n & 1048576\n    if p == 24:\n        return\
    \ n & 2097152\n    if p == 25:\n        return n & 4194304\n    if p == 26:\n\
    \        return n & 8388608\n    if p == 27:\n        return n & 16777216\n  \
    \  if p == 28:\n        return n & 33554432\n    if p == 29:\n        return n\
    \ & 67108864\n    if p == 30:\n        return n & 134217728\n    if p == 31:\n\
    \        return n & 268435456\n    if p == 32:\n        return n & 536870912\n\
    \    if p == 33:\n        return n & 1073741824\n    if p == 34:\n        return\
    \ n & 2147483648\n    if p == 35:\n        return n & 4294967296\n    if p ==\
    \ 36:\n        return n & 8589934592\n    if p == 37:\n        return n & 17179869184\n\
    \    if p == 38:\n        return n & 34359738368\n    if p == 39:\n        return\
    \ n & 68719476736\n    if p == 40:\n        return n & 137438953472\n    if p\
    \ == 41:\n        return n & 274877906944\n    if p == 42:\n        return n & ",
  "    return ((n ** p) % p) if p else 0\n\n", "    return ((n ** p) % p) if p else\
    \ n\n\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
