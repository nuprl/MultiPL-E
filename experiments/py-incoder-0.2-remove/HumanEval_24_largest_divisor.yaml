name: HumanEval_24_largest_divisor
language: py
prompt: "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find\
  \ the largest number that divides n evenly, smaller than n\n        \"\"\"\n"
tests: "def check(candidate):\n    assert candidate(3) == 1\n    assert candidate(7)\
  \ == 1\n    assert candidate(10) == 5\n    assert candidate(100) == 50\n    assert\
  \ candidate(49) == 7\n\ndef test_check():\n    check(largest_divisor)\n\ntest_check()\n"
completions: ["    largest_divisor = 1\n    for i in range(2, n):\n        if n %\
    \ i == 0:\n            largest_divisor = i\n    return largest_divisor\n\n", " \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    divisor =\
    \ 1\n    \n    while n % divisor != 0:\n        divisor *= 2\n    \n    return\
    \ divisor\n\n", "    divisor = 1\n    largest_divisor = 1\n    while n % divisor\
    \ == 0:\n        divisor += 1\n        largest_divisor = divisor\n    return largest_divisor\n\
    \n", "    \n    largest_divisor = 0\n    \n    for i in range(1, n+1):\n     \
    \   if n % i == 0:\n            if largest_divisor < i:\n                largest_divisor\
    \ = i\n    \n    return largest_divisor\n\n", "    \n    largest_divisor = 1\n\
    \    \n    for i in range(2, n):\n        if n % i == 0:\n            largest_divisor\
    \ = i\n            \n    return largest_divisor\n\n", "    \n    # Base case\n\
    \    if n == 1:\n        return 1\n    \n    # Recursive case\n    divisor = largest_divisor(n\
    \ // 2)\n    if n % 2 == 0 and divisor < n:\n        divisor = divisor + 1\n \
    \   \n    return divisor\n\n", "    \n    largest_divisor = 1\n    \n    for i\
    \ in range(2, n):\n        if n % i == 0:\n            largest_divisor = i\n \
    \           break\n    \n    return largest_divisor\n\n", "    \n    largest_divisor\
    \ = 1\n    \n    for i in range(2, n+1):\n        if n % i == 0:\n           \
    \ largest_divisor = i\n            \n    return largest_divisor\n</cell>\n<cell>\n\
    largest_divisor(100)\n</cell>\n<cell>\nlargest_divisor(1000)\n</cell>\n<cell>\n\
    largest_divisor(10000)\n</cell>\n<cell>\nlargest_divisor(100000)\n</cell>\n<cell>\n\
    largest_divisor(1000000)\n</cell>\n<cell>\nlargest_divisor(10000000)\n</cell>\n\
    <cell>\nlargest_divisor(100000000)\n</cell>\n<cell>\nlargest_divisor(1000000000)\n\
    </cell>\n<cell>\nlargest_divisor(10000000000)\n</cell>\n<cell>\nlargest_divisor(100000000000)\n\
    </cell>\n<cell>\nlargest_divisor(1000000000000)\n</cell>\n<cell>\nlargest_divisor(10000000000000)\n\
    </cell>\n<cell>\nlargest_divisor(100000000000000)\n</cell>\n<cell>\nlargest_divisor(1000000000000000)\n\
    </cell>\n<cell>\nlargest_divisor(10000000000000000)\n</cell>\n<cell>\nlargest_divisor(100000000000000000)\n\
    </cell>\n<cell>\nlargest_divisor(1000000000000000000)\n</cell>\n<cell>\nlargest_divisor(10000000000000000000)\n\
    </cell>\n<cell>\nlargest_divisor(100000000000000000000)\n</cell>\n<cell>\nlargest_divisor(1000000000000000000000)\n\
    </cell>\n<cell>\nlargest_divisor(10000000000000000000000)\n</cell>\n<cell>\nlargest_divisor(100000000000000000000000)\n\
    </cell>\n<cell>\nlargest_divisor(1000000000000000000000000)\n</cell>\n<cell>\n\
    largest_divisor(10000000000000000000000000)\n</cell>\n<cell>\nlargest_divisor(100000000000000000000000000)\n\
    </cell>\n<cell>\nlargest_divisor(1000000000000000000000000000)\n</cell>\n<cell>\n\
    largest_divisor(10000000000000000000000000000)\n</cell>\n<cell>\nlargest_divisor(100000000000000000000000000000)\n\
    </cell>\n<cell>\nlargest_divisor(1000000000000000000000000000000)\n</cell>\n<cell>\n\
    large", "    \n    largest_divisor = 0\n    \n    for i in range(1, n+1):\n  \
    \      if n % i == 0:\n            if largest_divisor < i:\n                largest_divisor\
    \ = i\n    return largest_divisor\n</cell>\n<cell>\nlargest_divisor(100)\n</cell>\n\
    <cell>", "    \n    largest_divisor = 1\n    \n    for i in range(2, n):\n   \
    \     if n % i == 0:\n            largest_divisor = i\n            \n    return\
    \ largest_divisor\n</cell>\n<cell>\nlargest_divisor(10)\n</cell>\n<cell>\nlargest_divisor(100)\n\
    </cell>\n<cell>\nlargest_divisor(1000)\n</cell>\n<cell>\nlargest_divisor(10000)\n\
    </cell>\n<cell>\nlargest_divisor(100000)\n</cell>\n<cell>\nlargest_divisor(1000000)\n\
    </cell>\n<cell>\nlargest_divisor(10000000)\n</cell>\n<cell>\nlargest_divisor(100000000)\n\
    </cell>\n<cell>\nlargest_divisor(1000000000)\n</cell>\n<cell>\nlargest_divisor(10000000000)\n\
    </cell>\n<cell>\nlargest_divisor(100000000000)\n</cell>\n<cell>\nlargest_divisor(1000000000000)\n\
    </cell>\n<cell>\nlargest_divisor(10000000000000)\n</cell>\n<cell>\nlargest_divisor(100000000000000)\n\
    </cell>\n<cell>\nlargest_divisor(1000000000000000)\n</cell>\n<cell>\nlargest_divisor(10000000000000000)\n\
    </cell>\n<cell>\nlargest_divisor(100000000000000000)\n</cell>\n<cell>\nlargest_divisor(1000000000000000000)\n\
    </cell>\n<cell>\nlargest_divisor(10000000000000000000)\n</cell>\n<cell>\nlargest_divisor(100000000000000000000)\n\
    </cell>\n<cell>\nlargest_divisor(1000000000000000000000)\n</cell>\n<cell>\nlargest_divisor(10000000000000000000000)\n\
    </cell>\n<cell>\nlargest_divisor(100000000000000000000000)\n</cell>\n<cell>\n\
    largest_divisor(1000000000000000000000000)\n</cell>\n<cell>\nlargest_divisor(10000000000000000000000000)\n\
    </cell>\n<cell>\nlargest_divisor(100000000000000000000000000)\n</cell>\n<cell>\n\
    largest_divisor(1000000000000000000000000000)\n</cell>\n<cell>\nlargest_divisor(10000000000000000000000000000)\n\
    </cell>\n<cell>\nlargest_divisor(100000000000000000000000000000)\n</cell>\n<cell>\n\
    largest_divisor(100", "    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n    largest_divisor = 1\n    \n    for i in range(1, n//2 + 1):\n       \
    \ if n % i == 0:\n            largest_divisor = i\n            \n    return largest_divisor\n\
    </cell>\n<cell>\nlargest_divisor(100)\n</cell>\n<cell>\nlargest_divisor(1000)\n\
    </cell>\n<cell>\nlargest_divisor(10000)\n</cell>\n<cell>\nlargest_divisor(100000)\n\
    </cell>\n<cell>\nlargest_divisor(1000000)\n</cell>\n<cell>\nlargest_divisor(10000000)\n\
    </cell>\n<cell>\nlargest_divisor(100000000)\n</cell>\n<cell>\nlargest_divisor(1000000000)\n\
    </cell>\n<cell>\nlargest_divisor(10000000000)\n</cell>\n<cell>\nlargest_divisor(100000000000)\n\
    </cell>\n<cell>\nlargest_divisor(1000000000000)\n</cell>\n<cell>\nlargest_divisor(10000000000000)\n\
    </cell>\n<cell>\nlargest_divisor(100000000000000)\n</cell>\n<cell>\nlargest_divisor(1000000000000000)\n\
    </cell>\n<cell>\nlargest_divisor(10000000000000000)\n</cell>\n<cell>\nlargest_divisor(100000000000000000)\n\
    </cell>\n<cell>\nlargest_divisor(1000000000000000000)\n</cell>\n<cell>\nlargest_divisor(10000000000000000000)\n\
    </cell>\n<cell>\nlargest_divisor(100000000000000000000)\n</cell>\n<cell>\nlargest_divisor(1000000000000000000000)\n\
    </cell>\n<cell>\nlargest_divisor(10000000000000000000000)\n</cell>\n<cell>\nlargest_divisor(100000000000000000000000)\n\
    </cell>\n<cell>\nlargest_divisor(1000000000000000000000000)\n</cell>\n<cell>\n\
    largest_divisor(10000000000000000000000000)\n</cell>\n<cell>\nlargest_divisor(100000000000000000000000000)\n\
    </cell>\n<cell>\nlargest_divisor(1000000000000000000000000000)\n</cell>\n<cell>\n\
    largest_divisor(10000000000000000000000000000)\n</cell>\n<cell>\nlargest_divisor(100000000000000000000000000000)\n\
    </cell>\n<cell>\nlargest_divisor(1000000000000000000000000000000)\n</cell>\n<cell>",
  "    largest_divisor = 1\n    for i in range(2, n):\n        if n % i == 0:\n  \
    \          largest_divisor = i\n    return largest_divisor\n\n", "    \n    largest_divisor\
    \ = 1\n    \n    for i in range(1, n//2 + 1):\n        if n % i == 0:\n      \
    \      largest_divisor = i\n            break\n    \n    return largest_divisor\n\
    </cell>\n<cell>\nlargest_divisor(100)\n</cell>\n<cell>", "    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    largest_divisor = 1\n    for i in\
    \ range(1, n + 1):\n        if n % i == 0:\n            if i > largest_divisor:\n\
    \                largest_divisor = i\n    return largest_divisor\n\n", "    largest_divisor\
    \ = 1\n    i = 2\n    while i <= n:\n        if n % i == 0:\n            largest_divisor\
    \ = i\n        i += 1\n    return largest_divisor\n\n", "    \n    largest_divisor\
    \ = 1\n    \n    for i in range(2, n):\n        if n % i == 0:\n            largest_divisor\
    \ = i\n            break\n    \n    return largest_divisor\n</cell>\n<cell>\n\
    largest_divisor(100)\n</cell>\n<cell>", "    divisor = 1\n    while n % divisor\
    \ == 0:\n        divisor *= 2\n    return divisor\n\n", "    divisor = 1\n   \
    \ while n % divisor == 0:\n        divisor += 1\n    return divisor\n\n", "  \
    \  \n    # Initialize a list to store the divisors\n    divisors = []\n    \n\
    \    # Initialize a variable to store the largest divisor\n    max_divisor = 0\n\
    \    \n    # Loop through all numbers from 1 to n\n    for i in range(1, n + 1):\n\
    \        \n        # Check if i is a divisor\n        if n % i == 0:\n       \
    \     \n            # Append i to divisors\n            divisors.append(i)\n \
    \           \n            # Check if i is larger than max_divisor\n          \
    \  if i > max_divisor:\n                max_divisor = i\n    \n    # Return the\
    \ largest divisor\n    return max_divisor\n</cell>\n<cell>\nlargest_divisor(100)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the greatest common\
    \ divisor of two numbers. You may assume that both numbers are positive.\n\n\n\
    </text>\n<cell>", "    \n    largest_divisor = 1\n    \n    for i in range(1,\
    \ n+1):\n        if n % i == 0:\n            largest_divisor = i\n           \
    \ \n    return largest_divisor\n", "    divisor = 1\n    while n % divisor ==\
    \ 0:\n        divisor *= 2\n    return divisor\n\n", "    largest_divisor = 0\n\
    \    for i in range(1, n + 1):\n        if n % i == 0:\n            if i > largest_divisor:\n\
    \                largest_divisor = i\n    return largest_divisor\n\n", "    \n\
    \    # Initialize a list to store the divisors\n    divisors = []\n    \n    #\
    \ Initialize a variable to store the largest divisor found\n    max_divisor =\
    \ 0\n    \n    # Loop through all numbers from 1 to n and check whether they divide\
    \ evenly\n    for i in range(1, n + 1):\n        \n        # Check if the number\
    \ divides evenly\n        if n % i == 0:\n            \n            # If the number\
    \ divides evenly, append it to the list\n            divisors.append(i)\n    \
    \        \n            # If the number divides evenly and is the largest divisor\
    \ found, update max_divisor\n            if i == max_divisor:\n              \
    \  max_divisor = i\n    \n    # Return the largest divisor found\n    return max_divisor\n\
    </cell>\n<cell>\nlargest_divisor(10)\n</cell>\n<text>\nProblem 3\nWrite a function\
    \ that returns the sum of the numbers from 1 to n that are divisible by k.\n\n\
    \n</text>\n<cell>", "    \n    largest_divisor = 1\n    \n    for i in range(2,\
    \ n):\n        if n % i == 0:\n            largest_divisor = i\n            \n\
    \    return largest_divisor\n\n", "    \n    divisors = []\n    \n    for i in\
    \ range(1, n//2 + 1):\n        if n % i == 0:\n            divisors.append(i)\n\
    \    \n    return max(divisors)\n</cell>\n<cell>\nlargest_divisor(100)\n</cell>\n\
    <cell>", "    \n    largest_divisor = 0\n    \n    for i in range(1, n + 1):\n\
    \        if n % i == 0:\n            if i > largest_divisor:\n               \
    \ largest_divisor = i\n    return largest_divisor\n\n", "    largest_divisor =\
    \ 1\n    for i in range(2, n):\n        if n % i == 0:\n            largest_divisor\
    \ = i\n    return largest_divisor\n\n", "    \n    # Base case\n    if n < 2:\n\
    \        return n\n    \n    # Recursive case\n    largest_divisor = largest_divisor(n//2)\n\
    \    if n % largest_divisor == 0:\n        return largest_divisor\n    else:\n\
    \        return largest_divisor + 1\n</cell>\n<cell>\nlargest_divisor(10)\n</cell>\n\
    <text>\nThe above function largest_divisor is recursive, meaning that it calls\
    \ itself over and over again, until it reaches the base case (n < 2). At this\
    \ point, it returns the value n and stops recursing.\n\nThe base case is when\
    \ n is less than 2. In that case, we return the value n. Otherwise, we return\
    \ the largest divisor of n that is smaller than n (the largest number that divides\
    \ n evenly).\n\n\n</text>\n<text>\nExercise 2\nWrite a function that returns the\
    \ sum of the numbers from 1 to n that are divisible by 3.\n\n\n</text>\n<cell>",
  "    divisor = 1\n    largest_divisor = 1\n    while n % divisor != 0:\n       \
    \ divisor += 1\n        largest_divisor = divisor\n    return largest_divisor\n\
    \n", "    largest_divisor = 1\n    for i in range(2, n):\n        if n % i ==\
    \ 0:\n            largest_divisor = i\n    return largest_divisor\n\n", "    divisor\
    \ = 1\n    largest_divisor = 1\n    while n % divisor == 0:\n        divisor *=\
    \ 2\n        largest_divisor = divisor\n    return largest_divisor\n\n", "   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    largest_divisor\
    \ = 1\n    \n    for i in range(2, n):\n        if n % i == 0:\n            largest_divisor\
    \ = i\n            \n    return largest_divisor\n</cell>\n<cell>\nlargest_divisor(100)\n\
    </cell>\n<cell>", "    \n    largest_divisor = 1\n    \n    for i in range(2,\
    \ n):\n        if n % i == 0:\n            largest_divisor = i\n            \n\
    \    return largest_divisor\n</cell>\n<cell>\nlargest_divisor(100)\n</cell>\n\
    <cell>", "    \n    # initialize a list to store the divisors\n    divisors =\
    \ []\n    \n    # loop through all numbers from 1 to n and check if they are evenly\
    \ divisible\n    for i in range(1, n + 1):\n        if n % i == 0:\n         \
    \   divisors.append(i)\n    \n    # return the largest number in the list\n  \
    \  return max(divisors)\n</cell>\n<cell>\nlargest_divisor(10)\n</cell>\n<cell>\n\
    largest_divisor(100)\n</cell>\n<cell>\nlargest_divisor(1000)\n</cell>\n<cell>\n\
    largest_divisor(10000)\n</cell>\n<cell>\nlargest_divisor(100000)\n</cell>\n<cell>\n\
    largest_divisor(1000000)\n</cell>\n<cell>\nlargest_divisor(10000000)\n</cell>\n\
    <cell>\nlargest_divisor(100000000)\n</cell>\n<cell>\nlargest_divisor(1000000000)\n\
    </cell>\n<cell>\nlargest_divisor(10000000000)\n</cell>\n<cell>\nlargest_divisor(100000000000)\n\
    </cell>\n<cell>\nlargest_divisor(1000000000000)\n</cell>\n<cell>\nlargest_divisor(10000000000000)\n\
    </cell>\n<cell>\nlargest_divisor(100000000000000)\n</cell>\n<cell>\nlargest_divisor(1000000000000000)\n\
    </cell>\n<cell>\nlargest_divisor(10000000000000000)\n</cell>\n<cell>\nlargest_divisor(100000000000000000)\n\
    </cell>\n<cell>\nlargest_divisor(1000000000000000000)\n</cell>\n<cell>\nlargest_divisor(10000000000000000000)\n\
    </cell>\n<cell>\nlargest_divisor(100000000000000000000)\n</cell>\n<cell>\nlargest_divisor(1000000000000000000000)\n\
    </cell>\n<cell>\nlargest_divisor(10000000000000000000000)\n</cell>\n<cell>\nlargest_divisor(100000000000000000000000)\n\
    </cell>\n<cell>\nlargest_divisor(1000000000000000000000000)\n</cell>\n<cell>\n\
    largest_divisor(10000000000000000000000000)\n</cell>\n<cell>\nlargest_divisor(100000000000000000000000000)\n\
    </cell>\n<cell>\nlargest_divisor(1000000000000000000000000000)\n</cell>\n<cell>\n\
    largest_divisor(10000000000000000000000000000)\n</cell", "    divisor = 1\n  \
    \  while n % divisor == 0:\n        divisor *= 2\n    return divisor\n\n", " \
    \   \n    # initialize a list to store the largest divisor\n    largest_divisor\
    \ = []\n    \n    # loop through all numbers from 1 to n\n    for i in range(1,\
    \ n + 1):\n        \n        # if the number divides evenly, append it to the\
    \ list\n        if n % i == 0:\n            largest_divisor.append(i)\n      \
    \      \n    # return the largest number in the list\n    return max(largest_divisor)\n\
    </cell>\n<cell>\nlargest_divisor(100)\n</cell>\n<cell>\nlargest_divisor(1000)\n\
    </cell>\n<cell>\nlargest_divisor(10000)\n</cell>\n<cell>\nlargest_divisor(100000)\n\
    </cell>\n<cell>\nlargest_divisor(1000000)\n</cell>\n<cell>\nlargest_divisor(10000000)\n\
    </cell>\n<cell>\nlargest_divisor(100000000)\n</cell>\n<cell>\nlargest_divisor(1000000000)\n\
    </cell>\n<cell>\nlargest_divisor(10000000000)\n</cell>\n<cell>\nlargest_divisor(100000000000)\n\
    </cell>\n<cell>\nlargest_divisor(1000000000000)\n</cell>\n<cell>\nlargest_divisor(10000000000000)\n\
    </cell>\n<cell>\nlargest_divisor(100000000000000)\n</cell>\n<cell>\nlargest_divisor(1000000000000000)\n\
    </cell>\n<cell>\nlargest_divisor(10000000000000000)\n</cell>\n<cell>\nlargest_divisor(100000000000000000)\n\
    </cell>\n<cell>\nlargest_divisor(1000000000000000000)\n</cell>\n<cell>\nlargest_divisor(10000000000000000000)\n\
    </cell>\n<cell>\nlargest_divisor(100000000000000000000)\n</cell>\n<cell>\nlargest_divisor(1000000000000000000000)\n\
    </cell>\n<cell>\nlargest_divisor(10000000000000000000000)\n</cell>\n<cell>\nlargest_divisor(100000000000000000000000)\n\
    </cell>\n<cell>\nlargest_divisor(1000000000000000000000000)\n</cell>\n<cell>\n\
    largest_divisor(10000000000000000000000000)\n</cell>\n<cell>\nlargest_divisor(100000000000000000000000000)\n\
    </cell>\n<cell>\nlargest_divisor(1000000000000000000000000000)\n</cell>\n<cell>\n\
    largest_divisor(10000000000000000000000000000)\n</cell>\n", "    \n    largest_divisor\
    \ = 1\n    \n    for i in range(2, n):\n        if n % i == 0:\n            largest_divisor\
    \ = i\n            \n    return largest_divisor\n</cell>\n<cell>\nlargest_divisor(100)\n\
    </cell>\n<cell>", "    largest_divisor = 1\n    for i in range(1, n):\n      \
    \  if n % i == 0:\n            largest_divisor = i\n    return largest_divisor\n\
    \n", "    \n    divisors = []\n    \n    for i in range(1, n + 1):\n        if\
    \ n % i == 0:\n            divisors.append(i)\n    \n    return max(divisors)\n\
    \    ", "    divisor = 1\n    largest_divisor = 1\n    while n % divisor != 0:\n\
    \        divisor += 1\n        largest_divisor = divisor\n    return largest_divisor\n\
    \n", "    divisor = 1\n    while n % divisor == 0:\n        divisor *= 2\n   \
    \ return divisor\n\n", "    divisor = 1\n    while n % divisor == 0:\n       \
    \ divisor *= 2\n    return divisor\n\n", "    \n    largest_divisor = 0\n    \n\
    \    for i in range(1, n + 1):\n        if n % i == 0:\n            if i > largest_divisor:\n\
    \                largest_divisor = i\n    return largest_divisor\n\n", "    divisor\
    \ = 1\n    while n % divisor == 0:\n        divisor *= 2\n    return divisor\n\
    \n", "    \n    # base case\n    if n == 1:\n        return 1\n    \n    # recursive\
    \ case\n    else:\n        \n        # find the largest divisor smaller than n\n\
    \        largest_divisor = largest_divisor(n // 2)\n        \n        # check\
    \ if n is divisible by largest_divisor\n        if n % largest_divisor == 0:\n\
    \            return largest_divisor\n        \n        # otherwise n is divisible\
    \ by largest_divisor\n        else:\n            return n\n</cell>\n<cell>\nlargest_divisor(100)\n\
    </cell>\n<text>\nThe function largest_divisor is recursive, and it can take a\
    \ long time to run. Let's see how long it takes to run it on our sample numbers.\n\
    \n\n</text>\n<cell>\n%%timeit\nlargest_divisor(100)\n</cell>\n<cell>\n%%timeit\n\
    largest_divisor(1000)\n</cell>\n<cell>\n%%timeit\nlargest_divisor(10000)\n</cell>\n\
    <cell>\n%%timeit\nlargest_divisor(100000)\n</cell>\n<cell>\n%%timeit\nlargest_divisor(1000000)\n\
    </cell>\n<cell>\n%%timeit\nlargest_divisor(10000000)\n</cell>\n<text>\nThe function\
    \ largest_divisor is recursive, and it can take a long time to run. Let's see\
    \ how long it takes to run it on our sample numbers.\n\n\n</text>\n<cell>\n%%timeit\n\
    largest_divisor(100)\n</cell>\n<cell>\n%%timeit\nlargest_divisor(1000)\n</cell>\n\
    <cell>\n%%timeit\nlargest_divisor(10000)\n</cell>\n<cell>\n%%timeit\nlargest_divisor(100000)\n\
    </cell>\n<cell>\n%%timeit\nlargest_divisor(1000000)\n</cell>\n<cell>\n%%timeit\n\
    largest_divisor(10000000)\n</cell>\n<text>\nThe function largest_divisor is recursive,\
    \ and it can take a long time to run. Let's see how long it takes to run it on\
    \ our sample numbers.\n\n\n</text>\n<cell>\n%%timeit\nlargest_divisor(100)\n</cell>\n\
    <cell>\n%%timeit\nlargest_divisor(1000)\n</cell>\n<cell>\n%%timeit\nlargest_divisor(10000)\n\
    </cell>\n<cell>\n%%timeit\nlargest_divisor(100000)\n</cell>\n<cell>\n%%timeit",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    largest_divisor\
    \ = 1\n    for i in range(2, n):\n        if n % i == 0:\n            largest_divisor\
    \ = i\n    return largest_divisor\n\n", "    divisor = 1\n    while n % divisor\
    \ == 0:\n        divisor *= 2\n    return divisor\n\n", "    \n    largest_divisor\
    \ = 1\n    \n    for i in range(2, n+1):\n        if n % i == 0:\n           \
    \ if largest_divisor < i:\n                largest_divisor = i\n    return largest_divisor\n",
  "    \n    largest_divisor = 1\n    \n    for i in range(1, n+1):\n        if n\
    \ % i == 0:\n            if i > largest_divisor:\n                largest_divisor\
    \ = i\n    return largest_divisor\n", "    largest_divisor = 1\n    for i in range(2,\
    \ n):\n        if n % i == 0:\n            largest_divisor = i\n    return largest_divisor\n\
    \n", "    \n    # Initialize a list to store the divisors\n    divisors = []\n\
    \    \n    # Initialize a variable to store the largest divisor found\n    largest_divisor\
    \ = 0\n    \n    # Loop through all numbers from 1 to n\n    for i in range(1,\
    \ n + 1):\n        \n        # Check if i is divisible by any number in the list\n\
    \        if i % len(divisors) == 0:\n            \n            # If the largest\
    \ divisor found so far is less than i, update it\n            if largest_divisor\
    \ < i:\n                largest_divisor = i\n        \n        # Append i to the\
    \ list\n        divisors.append(i)\n    \n    # Return the largest divisor found\n\
    \    return largest_divisor\n</cell>\n<cell>\nlargest_divisor(100)\n</cell>\n\
    <cell>\nlargest_divisor(1000)\n</cell>\n<cell>\nlargest_divisor(10000)\n</cell>\n\
    <cell>\nlargest_divisor(100000)\n</cell>\n<cell>\nlargest_divisor(1000000)\n</cell>\n\
    <cell>\nlargest_divisor(10000000)\n</cell>\n<cell>\nlargest_divisor(100000000)\n\
    </cell>\n<cell>\nlargest_divisor(1000000000)\n</cell>\n<cell>\nlargest_divisor(10000000000)\n\
    </cell>\n<cell>\nlargest_divisor(100000000000)\n</cell>\n<cell>\nlargest_divisor(1000000000000)\n\
    </cell>\n<cell>\nlargest_divisor(10000000000000)\n</cell>\n<cell>\nlargest_divisor(100000000000000)\n\
    </cell>\n<cell>\nlargest_divisor(1000000000000000)\n</cell>\n<cell>\nlargest_divisor(10000000000000000)\n\
    </cell>\n<cell>\nlargest_divisor(100000000000000000)\n</cell>\n<cell>\nlargest_divisor(1000000000000000000)\n\
    </cell>\n<cell>\nlargest_divisor(10000000000000000000)\n</cell>\n<cell>\nlargest_divisor(100000000000000000000)\n\
    </cell>\n<cell>\nlargest_divisor(1000000000000000000000)\n</cell>\n<cell>\nlargest_divisor(10000000000000000000000)\n\
    </cell>\n<cell>\nlargest_divisor(100000000000000000000000)\n</cell>\n<cell>\n\
    largest_divisor(1000000000000000000000000)\n</cell>\n<cell>\nlargest_divisor(10000000000000000000000000)\n\
    </", "    divisor = 1\n    while n % divisor == 0:\n        divisor *= 2\n   \
    \ return divisor\n\n", "    divisor = 1\n    largest_divisor = 1\n    while divisor\
    \ < n:\n        divisor += 1\n        if n % divisor == 0:\n            largest_divisor\
    \ = divisor\n    return largest_divisor\n\n", "    largest_divisor = 1\n    i\
    \ = 2\n    while i <= n:\n        if n % i == 0:\n            largest_divisor\
    \ = i\n        i += 1\n    return largest_divisor\n\n", "    largest_divisor =\
    \ 1\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            largest_divisor\
    \ = i\n            n //= i\n        else:\n            i += 1\n    return largest_divisor\n\
    \n", "    \n    largest_divisor = 1\n    \n    for i in range(2, n):\n       \
    \ if n % i == 0:\n            largest_divisor = i\n            \n    return largest_divisor\n\
    </cell>\n<cell>\nlargest_divisor(100)\n</cell>\n<cell>", "    \n    largest_divisor\
    \ = 1\n    \n    for i in range(2, n):\n        if n % i == 0:\n            if\
    \ largest_divisor < i:\n                largest_divisor = i\n    return largest_divisor\n\
    \n", "    \n    # Initialize a list to store divisors\n    divisors = []\n   \
    \ \n    # Initialize a variable to store largest divisor found\n    max_divisor\
    \ = 0\n    \n    # Loop through all numbers from 1 to n\n    for i in range(1,\
    \ n + 1):\n        \n        # Check if i is a divisor\n        if n % i == 0:\n\
    \            \n            # Check if i is larger than the largest divisor found\n\
    \            if i > max_divisor:\n                max_divisor = i\n          \
    \  \n            # Append i to divisors\n            divisors.append(i)\n    \n\
    \    # Return the largest divisor found\n    return max_divisor\n</cell>\n<cell>\n\
    largest_divisor(100)\n</cell>\n<cell>\nlargest_divisor(1000)\n</cell>\n<cell>\n\
    largest_divisor(10000)\n</cell>\n<cell>\nlargest_divisor(100000)\n</cell>\n<cell>\n\
    largest_divisor(1000000)\n</cell>\n<cell>\nlargest_divisor(10000000)\n</cell>\n\
    <cell>\nlargest_divisor(100000000)\n</cell>\n<cell>\nlargest_divisor(1000000000)\n\
    </cell>\n<cell>\nlargest_divisor(10000000000)\n</cell>\n<cell>\nlargest_divisor(100000000000)\n\
    </cell>\n<cell>\nlargest_divisor(1000000000000)\n</cell>\n<cell>\nlargest_divisor(10000000000000)\n\
    </cell>\n<cell>\nlargest_divisor(100000000000000)\n</cell>\n<cell>\nlargest_divisor(1000000000000000)\n\
    </cell>\n<cell>\nlargest_divisor(10000000000000000)\n</cell>\n<cell>\nlargest_divisor(100000000000000000)\n\
    </cell>\n<cell>\nlargest_divisor(1000000000000000000)\n</cell>\n<cell>\nlargest_divisor(10000000000000000000)\n\
    </cell>\n<cell>\nlargest_divisor(100000000000000000000)\n</cell>\n<cell>\nlargest_divisor(1000000000000000000000)\n\
    </cell>\n<cell>\nlargest_divisor(10000000000000000000000)\n</cell>\n<cell>\nlargest_divisor(100000000000000000000000)\n\
    </cell>\n<cell>\nlargest_divisor(1000000000000000000000000)\n</cell>\n<cell>\n\
    largest_divisor(10000000000000000000000000)\n</cell>\n<cell>\nlargest_divisor(100000000000000000000000000)\n",
  "    divisors = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n    \
    \        divisors.append(i)\n    return max(divisors)\n\n", "    largest_divisor\
    \ = 1\n    for i in range(2, n):\n        if n % i == 0:\n            largest_divisor\
    \ = i\n    return largest_divisor\n\n", "    \n    largest_divisor = 1\n    \n\
    \    for i in range(2, n):\n        if n % i == 0:\n            if largest_divisor\
    \ < i:\n                largest_divisor = i\n    \n    return largest_divisor\n\
    \n", "    \n    largest_divisor = 0\n    \n    for i in range(1, n//2 + 1):\n\
    \        if n % i == 0:\n            largest_divisor = i\n            break\n\
    \    \n    return largest_divisor\n\n", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    divisor = 1\n    while n % divisor == 0:\n        divisor\
    \ *= 2\n    return divisor\n\n", "    \n    divisor = 1\n    \n    while n % divisor\
    \ == 0:\n        divisor *= 2\n    \n    return divisor\n</cell>\n<cell>\nlargest_divisor(100)\n\
    </cell>\n<cell>", "    \n    largest_divisor = 1\n    \n    for i in range(2,\
    \ n):\n        if n % i == 0:\n            largest_divisor = i\n            break\n\
    \    \n    return largest_divisor\n</cell>\n<cell>\nlargest_divisor(100)\n</cell>\n\
    <cell>", "    largest_divisor = 1\n    for i in range(2, n):\n        if n % i\
    \ == 0:\n            largest_divisor = i\n    return largest_divisor\n\n", " \
    \   \n    largest_divisor = 1\n    \n    for i in range(2, n):\n        if n %\
    \ i == 0:\n            largest_divisor = i\n            \n    return largest_divisor\n\
    </cell>\n<cell>\nlargest_divisor(100)\n</cell>\n<cell>\nlargest_divisor(1000)\n\
    </cell>\n<cell>\nlargest_divisor(10000)\n</cell>\n<cell>\nlargest_divisor(100000)\n\
    </cell>\n<cell>\nlargest_divisor(1000000)\n</cell>\n<cell>\nlargest_divisor(10000000)\n\
    </cell>\n<cell>\nlargest_divisor(100000000)\n</cell>\n<cell>\nlargest_divisor(1000000000)\n\
    </cell>\n<cell>\nlargest_divisor(10000000000)\n</cell>\n<cell>\nlargest_divisor(100000000000)\n\
    </cell>\n<cell>\nlargest_divisor(1000000000000)\n</cell>\n<cell>\nlargest_divisor(10000000000000)\n\
    </cell>\n<cell>\nlargest_divisor(100000000000000)\n</cell>\n<cell>\nlargest_divisor(1000000000000000)\n\
    </cell>\n<cell>\nlargest_divisor(10000000000000000)\n</cell>\n<cell>\nlargest_divisor(100000000000000000)\n\
    </cell>\n<cell>\nlargest_divisor(1000000000000000000)\n</cell>\n<cell>\nlargest_divisor(10000000000000000000)\n\
    </cell>\n<cell>\nlargest_divisor(100000000000000000000)\n</cell>\n<cell>\nlargest_divisor(1000000000000000000000)\n\
    </cell>\n<cell>\nlargest_divisor(10000000000000000000000)\n</cell>\n<cell>\nlargest_divisor(100000000000000000000000)\n\
    </cell>\n<cell>\nlargest_divisor(1000000000000000000000000)\n</cell>\n<cell>\n\
    largest_divisor(10000000000000000000000000)\n</cell>\n<cell>\nlargest_divisor(100000000000000000000000000)\n\
    </cell>\n<cell>\nlargest_divisor(1000000000000000000000000000)\n</cell>\n<cell>\n\
    largest_divisor(10000000000000000000000000000)\n</cell>\n<cell>\nlargest_divisor(100000000000000000000000000000)\n\
    </cell>\n<cell>\nlargest_divisor(1000000000000000000000000000000)\n</cell>\n<cell>\n\
    largest_", "    divisor = 1\n    while n % divisor == 0:\n        divisor *= 2\n\
    \    return divisor\n\n", "    \n    largest_divisor = 0\n    \n    for i in range(1,\
    \ n):\n        if n % i == 0:\n            if i % 2 == 0:\n                largest_divisor\
    \ = i\n            else:\n                largest_divisor = i + 1\n    \n    return\
    \ largest_divisor\n</cell>\n<cell>\nlargest_divisor(100)\n</cell>\n<cell>", " \
    \   largest_divisor = 1\n    i = 2\n    while i <= n:\n        if n % i == 0:\n\
    \            largest_divisor = i\n            n = n // i\n        else:\n    \
    \        i += 1\n    return largest_divisor\n\n", "    \n    largest_divisor =\
    \ 1\n    \n    for i in range(2, n+1):\n        if n % i == 0:\n            if\
    \ largest_divisor < i:\n                largest_divisor = i\n    \n    return\
    \ largest_divisor\n", "    \n    largest_divisor = 1\n    \n    for i in range(2,\
    \ n):\n        if n % i == 0:\n            largest_divisor = i\n            \n\
    \    return largest_divisor\n</cell>\n<cell>\nlargest_divisor(100)\n</cell>\n\
    <cell>", "    largest_divisor = 1\n    largest_divisor_p = 1\n    for i in range(2,\
    \ n):\n        if n % i == 0:\n            largest_divisor_p = i\n           \
    \ largest_divisor = i\n    if largest_divisor == largest_divisor_p:\n        return\
    \ largest_divisor\n    else:\n        return largest_divisor_p\n\n", "    divisor\
    \ = 1\n    while n % divisor == 0:\n        divisor += 1\n    return divisor\n\
    \n", "    \n    # Initialize a list to store all divisors\n    divisors = []\n\
    \    \n    # Initialize a variable to store the largest divisor found\n    max_divisor\
    \ = 0\n    \n    # Loop through all numbers from 1 to n and check if they are\
    \ evenly divisible\n    for i in range(1, n + 1):\n        if n % i == 0:\n  \
    \          divisors.append(i)\n            \n    # Loop through all divisors and\
    \ find the largest one\n    for divisor in divisors:\n        if divisor > max_divisor:\n\
    \            max_divisor = divisor\n    \n    return max_divisor\n\n", "    \n\
    \    # Initialize a list to store the divisors\n    divisors = []\n    \n    #\
    \ Initialize a variable to store the largest divisor found\n    max_divisor =\
    \ 0\n    \n    # Loop through all numbers from 1 to n\n    for i in range(1, n\
    \ + 1):\n        \n        # Check if the number is divisible by any number in\
    \ the list\n        if n % i == 0:\n            \n            # If the current\
    \ number is larger than the largest found so far, update max_divisor\n       \
    \     if i > max_divisor:\n                max_divisor = i\n            \n   \
    \         # Append the number to the list\n            divisors.append(i)\n  \
    \  \n    # Return the largest divisor found\n    return max_divisor\n\n", "  \
    \  largest_divisor = 1\n    for i in range(1, n):\n        if n % i == 0:\n  \
    \          largest_divisor = i\n    return largest_divisor\n\n", "    \n    largest_divisor\
    \ = 0\n    \n    for i in range(1, n+1):\n        if n % i == 0:\n           \
    \ largest_divisor = i\n            break\n    \n    return largest_divisor\n\n",
  "    \n    largest_divisor = 1\n    \n    for i in range(2, n):\n        if n %\
    \ i == 0:\n            largest_divisor = i\n            \n    return largest_divisor\n\
    \n", "    \n    largest_divisor = 0\n    \n    for i in range(1, n//2 + 1):\n\
    \        if n % i == 0:\n            largest_divisor = i\n            break\n\
    \    \n    return largest_divisor\n", "    \n    largest_divisor = 0\n    \n \
    \   for i in range(1, n):\n        if n % i == 0:\n            largest_divisor\
    \ = i\n            break\n    \n    return largest_divisor\n\n", "    \n    largest_divisor\
    \ = 0\n    \n    for i in range(1, n+1):\n        if n % i == 0:\n           \
    \ largest_divisor = i\n            break\n    \n    return largest_divisor\n\n",
  "    \n    # Initialize a list to store the divisors\n    divisors = []\n    \n\
    \    # Initialize a variable to store the largest divisor so far\n    max_divisor\
    \ = 0\n    \n    # Loop through all numbers from 1 to n\n    for i in range(1,\
    \ n + 1):\n        \n        # Check if the number is divisible by any number\
    \ in the list\n        if n % i == 0:\n            \n            # If the current\
    \ number is larger than the largest so far, update it\n            if i > max_divisor:\n\
    \                max_divisor = i\n            \n            # Append the number\
    \ to the list\n            divisors.append(i)\n    \n    # Return the largest\
    \ divisor found\n    return max_divisor\n</cell>\n<cell>\nlargest_divisor(100)\n\
    </cell>\n<text>\nThe largest divisor of 100 was 41. We can confirm this by checking\
    \ the list we created earlier:\n\n\n</text>\n<cell>\ndivisors\n</cell>\n<text>\n\
    Exercise\nWrite a function that returns the greatest common divisor of two numbers.\
    \ You can assume that both numbers are positive.\n\n\n</text>\n<cell>", "    largest_divisor\
    \ = 1\n    for i in range(2, n):\n        if n % i == 0:\n            largest_divisor\
    \ = i\n    return largest_divisor\n\n", "    divisor = 1\n    while n % divisor\
    \ != 0:\n        divisor *= 2\n    return divisor\n\n", "    \n    largest_divisor\
    \ = 1\n    \n    for i in range(2, n):\n        if n % i == 0:\n            largest_divisor\
    \ = i\n            \n    return largest_divisor\n</cell>\n<cell>\nlargest_divisor(10)\n\
    </cell>\n<cell>\nlargest_divisor(100)\n</cell>\n<cell>\nlargest_divisor(1000)\n\
    </cell>\n<cell>\nlargest_divisor(10000)\n</cell>\n<cell>\nlargest_divisor(100000)\n\
    </cell>\n<cell>\nlargest_divisor(1000000)\n</cell>\n<cell>\nlargest_divisor(10000000)\n\
    </cell>\n<cell>\nlargest_divisor(100000000)\n</cell>\n<cell>\nlargest_divisor(1000000000)\n\
    </cell>\n<cell>\nlargest_divisor(10000000000)\n</cell>\n<cell>\nlargest_divisor(100000000000)\n\
    </cell>\n<cell>\nlargest_divisor(1000000000000)\n</cell>\n<cell>\nlargest_divisor(10000000000000)\n\
    </cell>\n<cell>\nlargest_divisor(100000000000000)\n</cell>\n<cell>\nlargest_divisor(1000000000000000)\n\
    </cell>\n<cell>\nlargest_divisor(10000000000000000)\n</cell>\n<cell>\nlargest_divisor(100000000000000000)\n\
    </cell>\n<cell>\nlargest_divisor(1000000000000000000)\n</cell>\n<cell>\nlargest_divisor(10000000000000000000)\n\
    </cell>\n<cell>\nlargest_divisor(100000000000000000000)\n</cell>\n<cell>\nlargest_divisor(1000000000000000000000)\n\
    </cell>\n<cell>\nlargest_divisor(10000000000000000000000)\n</cell>\n<cell>\nlargest_divisor(100000000000000000000000)\n\
    </cell>\n<cell>\nlargest_divisor(1000000000000000000000000)\n</cell>\n<cell>\n\
    largest_divisor(10000000000000000000000000)\n</cell>\n<cell>\nlargest_divisor(100000000000000000000000000)\n\
    </cell>\n<cell>\nlargest_divisor(1000000000000000000000000000)\n</cell>\n<cell>\n\
    largest_divisor(10000000000000000000000000000)\n</cell>\n<cell>\nlargest_divisor(100000000000000000000000000000)\n\
    </cell>\n<cell>\nlargest_divisor(100", "    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    largest_divisor = 0\n    \n    for i in range(1,\
    \ n + 1):\n        if n % i == 0:\n            if i > largest_divisor:\n     \
    \           largest_divisor = i\n            else:\n                largest_divisor\
    \ = largest_divisor\n    return largest_divisor\n\n", "    largest_divisor = 0\n\
    \    for i in range(1, n + 1):\n        if n % i == 0:\n            largest_divisor\
    \ = i\n    return largest_divisor\n\n", "    \n    largest_divisor = 1\n    \n\
    \    for i in range(2, n):\n        if n % i == 0:\n            largest_divisor\
    \ = i\n            \n    return largest_divisor\n\n", "    \n    largest_divisor\
    \ = 1\n    \n    for i in range(2, n):\n        if n % i == 0:\n            if\
    \ largest_divisor < i:\n                largest_divisor = i\n    \n    return\
    \ largest_divisor\n\n", "    \n    # Initialize a list to store the divisors\n\
    \    divisors = []\n    \n    # Initialize a list to store the largest divisor\
    \ so far\n    largest_divisor = []\n    \n    # Loop through the numbers 1 to\
    \ n and find the divisors\n    for i in range(1, n+1):\n        if n % i == 0:\n\
    \            divisors.append(i)\n            \n    # Loop through the divisors\
    \ and find the largest one\n    for divisor in divisors:\n        if divisor >\
    \ largest_divisor:\n            largest_divisor = divisor\n    \n    return largest_divisor\n\
    </cell>\n<cell>\nlargest_divisor(100)\n</cell>\n<cell>\nlargest_divisor(1000)\n\
    </cell>\n<cell>\nlargest_divisor(10000)\n</cell>\n<cell>\nlargest_divisor(100000)\n\
    </cell>\n<cell>\nlargest_divisor(1000000)\n</cell>\n<cell>\nlargest_divisor(10000000)\n\
    </cell>\n<cell>\nlargest_divisor(100000000)\n</cell>\n<cell>\nlargest_divisor(1000000000)\n\
    </cell>\n<cell>\nlargest_divisor(10000000000)\n</cell>\n<cell>\nlargest_divisor(100000000000)\n\
    </cell>\n<cell>\nlargest_divisor(1000000000000)\n</cell>\n<cell>\nlargest_divisor(10000000000000)\n\
    </cell>\n<cell>\nlargest_divisor(100000000000000)\n</cell>\n<cell>\nlargest_divisor(1000000000000000)\n\
    </cell>\n<cell>\nlargest_divisor(10000000000000000)\n</cell>\n<cell>\nlargest_divisor(100000000000000000)\n\
    </cell>\n<cell>\nlargest_divisor(1000000000000000000)\n</cell>\n<cell>\nlargest_divisor(10000000000000000000)\n\
    </cell>\n<cell>\nlargest_divisor(100000000000000000000)\n</cell>\n<cell>\nlargest_divisor(1000000000000000000000)\n\
    </cell>\n<cell>\nlargest_divisor(10000000000000000000000)\n</cell>\n<cell>\nlargest_divisor(100000000000000000000000)\n\
    </cell>\n<cell>\nlargest_divisor(1000000000000000000000000)\n</cell>\n<cell>\n\
    largest_divisor(10000000000000000000000000)\n</cell>\n<cell>\nlargest_divisor(100000000000000000000000000)\n\
    </cell>\n<cell>\nlarge", "    \n    largest_divisor = 1\n    \n    for i in range(1,\
    \ n):\n        if n % i == 0:\n            if largest_divisor < i:\n         \
    \       largest_divisor = i\n    return largest_divisor\n\n", "    \n    largest_divisor\
    \ = 1\n    \n    for i in range(2, n):\n        if n % i == 0:\n            if\
    \ largest_divisor < i:\n                largest_divisor = i\n    return largest_divisor\n\
    \n", "    \n    largest_divisor = 0\n    \n    for i in range(1, n):\n       \
    \ if n % i == 0:\n            if i > largest_divisor:\n                largest_divisor\
    \ = i\n    return largest_divisor\n\n", "    largest_divisor = 1\n    for i in\
    \ range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            largest_divisor\
    \ = i\n    return largest_divisor\n\n", "    divisor = 1\n    while n % divisor\
    \ == 0:\n        divisor *= 2\n    return divisor\n\n", "    largest_divisor =\
    \ 1\n    divisor = 2\n    while divisor <= n:\n        if n % divisor == 0:\n\
    \            largest_divisor = divisor\n        divisor += 1\n    return largest_divisor\n\
    \n", "    \n    largest_divisor = 1\n    \n    for i in range(2, n):\n       \
    \ if n % i == 0:\n            largest_divisor = i\n            \n    return largest_divisor\n\
    \n", "    \n    largest_divisor = 0\n    \n    for i in range(1, n//2 + 1):\n\
    \        if n % i == 0:\n            largest_divisor = i\n            break\n\
    \    \n    return largest_divisor\n\n", "    largest_divisor = 0\n    for i in\
    \ range(1, n):\n        if n % i == 0:\n            largest_divisor = i\n    return\
    \ largest_divisor\n\n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n    divisors = []\n    \n    for i in range(1, n + 1):\n        if n % i\
    \ == 0:\n            divisors.append(i)\n            \n    return max(divisors)\n\
    \n", "    \n    largest_divisor = 1\n    \n    for i in range(2, n):\n       \
    \ if n % i == 0:\n            largest_divisor = i\n            \n    return largest_divisor\n\
    </cell>\n<cell>\nlargest_divisor(10)\n</cell>\n<cell>\nlargest_divisor(100)\n\
    </cell>\n<cell>\nlargest_divisor(1000)\n</cell>\n<cell>\nlargest_divisor(10000)\n\
    </cell>\n<cell>\nlargest_divisor(100000)\n</cell>\n<cell>\nlargest_divisor(1000000)\n\
    </cell>\n<cell>\nlargest_divisor(10000000)\n</cell>\n<cell>\nlargest_divisor(100000000)\n\
    </cell>\n<cell>\nlargest_divisor(1000000000)\n</cell>\n<cell>\nlargest_divisor(10000000000)\n\
    </cell>\n<cell>\nlargest_divisor(100000000000)\n</cell>\n<cell>\nlargest_divisor(1000000000000)\n\
    </cell>\n<cell>\nlargest_divisor(10000000000000)\n</cell>\n<cell>\nlargest_divisor(100000000000000)\n\
    </cell>\n<cell>\nlargest_divisor(1000000000000000)\n</cell>\n<cell>\nlargest_divisor(10000000000000000)\n\
    </cell>\n<cell>\nlargest_divisor(100000000000000000)\n</cell>\n<cell>\nlargest_divisor(1000000000000000000)\n\
    </cell>\n<cell>\nlargest_divisor(10000000000000000000)\n</cell>\n<cell>\nlargest_divisor(100000000000000000000)\n\
    </cell>\n<cell>\nlargest_divisor(1000000000000000000000)\n</cell>\n<cell>\nlargest_divisor(10000000000000000000000)\n\
    </cell>\n<cell>\nlargest_divisor(100000000000000000000000)\n</cell>\n<cell>\n\
    largest_divisor(1000000000000000000000000)\n</cell>\n<cell>\nlargest_divisor(10000000000000000000000000)\n\
    </cell>\n<cell>\nlargest_divisor(100000000000000000000000000)\n</cell>\n<cell>\n\
    largest_divisor(1000000000000000000000000000)\n</cell>\n<cell>\nlargest_divisor(10000000000000000000000000000)\n\
    </cell>\n<cell>\nlargest_divisor(100000000000000000000000000000)\n</cell>\n<cell>\n\
    largest_divisor(100", "    largest_divisor = 1\n    for i in range(2, n):\n  \
    \      if n % i == 0:\n            largest_divisor = i\n    return largest_divisor\n\
    \n", "    \n    largest_divisor = 1\n    \n    for i in range(2, n):\n       \
    \ if n % i == 0:\n            largest_divisor = i\n            \n    return largest_divisor\n\
    \n", "    \n    # Initialize a list to store the divisors\n    divisors = []\n\
    \    \n    # Initialize a variable to store the largest divisor found\n    max_divisor\
    \ = 0\n    \n    # Loop through the numbers 1 to n\n    for i in range(1, n +\
    \ 1):\n        \n        # Check if the number divides evenly by i\n        if\
    \ n % i == 0:\n            \n            # If the number divides evenly by i,\
    \ append it to the list\n            divisors.append(i)\n            \n      \
    \      # If the number divides evenly by i, but is larger than the largest divisor\
    \ found, update max_divisor\n            if i > max_divisor:\n               \
    \ max_divisor = i\n    \n    # Return the largest divisor found\n    return max_divisor\n\
    \n", "    largest_divisor = 1\n    i = 2\n    while i <= n:\n        if n % i\
    \ == 0:\n            largest_divisor = i\n        i += 1\n    return largest_divisor\n\
    \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    largest_divisor\
    \ = 0\n    for i in range(1, n):\n        if n % i == 0:\n            largest_divisor\
    \ = i\n    return largest_divisor\n\n", "    \n    largest_divisor = 1\n    \n\
    \    for i in range(2, n):\n        if n % i == 0:\n            largest_divisor\
    \ = i\n            \n    return largest_divisor\n</cell>\n<cell>\nlargest_divisor(100)\n\
    </cell>\n<cell>", "    largest_divisor = 0\n    for i in range(1, n + 1):\n  \
    \      if n % i == 0:\n            largest_divisor = i\n    return largest_divisor\n\
    \n", "    \n    # Initialize a list to store the divisors\n    divisors = []\n\
    \    \n    # Loop through all numbers from 1 to n\n    for i in range(1, n + 1):\n\
    \        # Check if i is a divisor\n        if n % i == 0:\n            # Append\
    \ i to divisors\n            divisors.append(i)\n    \n    # Return the largest\
    \ number in divisors\n    return max(divisors)\n\n", "    divisor = 1\n    largest_divisor\
    \ = 1\n    while divisor < n:\n        divisor += 1\n        if n % divisor ==\
    \ 0:\n            largest_divisor = divisor\n    return largest_divisor\n\n",
  "    largest_divisor = 1\n    for i in range(2, n):\n        if n % i == 0:\n  \
    \          largest_divisor = i\n    return largest_divisor\n\n", "    divisor\
    \ = 1\n    while n % divisor == 0:\n        divisor *= 2\n    return divisor\n\
    \n", "    \n    divisors = []\n    \n    for i in range(1, n + 1):\n        if\
    \ n % i == 0:\n            divisors.append(i)\n    \n    return max(divisors)\n\
    \n", "    \n    # Base case\n    if n < 2:\n        return 1\n    \n    # Recursive\
    \ case\n    largest_divisor_recursive(n, 1)\n    \n    return largest_divisor_recursive(n,\
    \ 2)\n</cell>\n<cell>\nlargest_divisor(10)\n</cell>\n<cell>\nlargest_divisor(100)\n\
    </cell>\n<cell>\nlargest_divisor(1000)\n</cell>\n<cell>\nlargest_divisor(10000)\n\
    </cell>\n<cell>\nlargest_divisor(100000)\n</cell>\n<cell>\nlargest_divisor(1000000)\n\
    </cell>\n<cell>\nlargest_divisor(10000000)\n</cell>\n<cell>\nlargest_divisor(100000000)\n\
    </cell>\n<cell>\nlargest_divisor(1000000000)\n</cell>\n<cell>\nlargest_divisor(10000000000)\n\
    </cell>\n<cell>\nlargest_divisor(100000000000)\n</cell>\n<cell>\nlargest_divisor(1000000000000)\n\
    </cell>\n<cell>\nlargest_divisor(10000000000000)\n</cell>\n<cell>\nlargest_divisor(100000000000000)\n\
    </cell>\n<cell>\nlargest_divisor(1000000000000000)\n</cell>\n<cell>\nlargest_divisor(10000000000000000)\n\
    </cell>\n<cell>\nlargest_divisor(100000000000000000)\n</cell>\n<cell>\nlargest_divisor(1000000000000000000)\n\
    </cell>\n<cell>\nlargest_divisor(10000000000000000000)\n</cell>\n<cell>\nlargest_divisor(100000000000000000000)\n\
    </cell>\n<cell>\nlargest_divisor(1000000000000000000000)\n</cell>\n<cell>\nlargest_divisor(10000000000000000000000)\n\
    </cell>\n<cell>\nlargest_divisor(100000000000000000000000)\n</cell>\n<cell>\n\
    largest_divisor(1000000000000000000000000)\n</cell>\n<cell>\nlargest_divisor(10000000000000000000000000)\n\
    </cell>\n<cell>\nlargest_divisor(100000000000000000000000000)\n</cell>\n<cell>\n\
    largest_divisor(1000000000000000000000000000)\n</cell>\n<cell>\nlargest_divisor(10000000000000000000000000000)\n\
    </cell>\n<cell>\nlargest_divisor(100000000000000000000000000000)\n</cell>\n<cell",
  "    \n    largest_divisor = 0\n    \n    for i in range(1, n):\n        if n %\
    \ i == 0:\n            if i > largest_divisor:\n                largest_divisor\
    \ = i\n    \n    return largest_divisor\n</cell>\n<cell>\nlargest_divisor(100)\n\
    </cell>\n<text>\nProblem 5\nWrite a function that returns the number of prime\
    \ numbers less than or equal to a given number. \nThe function should take in\
    \ a number as an argument and return an integer.\n\n\n</text>\n<cell>", "    \n\
    \    largest_divisor = 1\n    \n    for i in range(2, n):\n        if n % i ==\
    \ 0:\n            largest_divisor = i\n            \n    return largest_divisor\n\
    </cell>\n<cell>\nlargest_divisor(100)\n</cell>\n<cell>", "    \n    largest_divisor\
    \ = 1\n    \n    for i in range(2, n):\n        if n % i == 0:\n            largest_divisor\
    \ = i\n            \n    return largest_divisor\n\n", "    \n    divisors = []\n\
    \    \n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors.append(i)\n\
    \    \n    return max(divisors)\n\n", "    \n    largest_divisor = 1\n    \n \
    \   for i in range(2, n):\n        if n % i == 0:\n            largest_divisor\
    \ = i\n            break\n    \n    return largest_divisor\n", "    \n    largest_divisor\
    \ = 0\n    \n    for i in range(1, n//2 + 1):\n        if n % i == 0:\n      \
    \      largest_divisor = i\n            \n    return largest_divisor\n</cell>\n\
    <cell>\nlargest_divisor(100)\n</cell>\n<cell>", "    \n    largest_divisor = 1\n\
    \    \n    for i in range(2, n):\n        if n % i == 0:\n            largest_divisor\
    \ = i\n            \n    return largest_divisor\n\n", "    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    \n    largest_divisor = 0\n    \n    for\
    \ i in range(1, n+1):\n        if n % i == 0:\n            if i > largest_divisor:\n\
    \                largest_divisor = i\n    \n    return largest_divisor\n", " \
    \   \n    largest_divisor = 1\n    \n    for i in range(2, n):\n        if n %\
    \ i == 0:\n            largest_divisor = i\n            \n    return largest_divisor\n\
    </cell>\n<cell>\nlargest_divisor(10)\n</cell>\n<cell>", "    \n    largest_divisor\
    \ = 1\n    \n    for i in range(2, n):\n        if n % i == 0:\n            largest_divisor\
    \ = i\n    \n    return largest_divisor\n\n", "    \n    largest_divisor = 1\n\
    \    \n    for i in range(2, n):\n        if n % i == 0:\n            largest_divisor\
    \ = i\n            \n    return largest_divisor\n</cell>\n<cell>\nlargest_divisor(100)\n\
    </cell>\n<cell>", "    largest_divisor = 1\n    divisor = 2\n    while divisor\
    \ < n:\n        if n % divisor == 0:\n            largest_divisor = divisor\n\
    \        divisor += 1\n    return largest_divisor\n\n", "    \n    largest_divisor\
    \ = 1\n    \n    for i in range(2, n):\n        if n % i == 0:\n            largest_divisor\
    \ = i\n            \n    return largest_divisor\n</cell>\n<cell>\nlargest_divisor(100)\n\
    </cell>\n<text>\nProblem 7: Write a function that returns the greatest common\
    \ divisor of two numbers, using Euclid's algorithm.\n\n\n</text>\n<cell>", " \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    divisor =\
    \ 1\n    \n    while n % divisor == 0:\n        divisor *= 2\n    \n    return\
    \ divisor\n</cell>\n<cell>\nlargest_divisor(100)\n</cell>\n<cell>", "    largest_divisor\
    \ = 1\n    for i in range(2, n):\n        if n % i == 0:\n            largest_divisor\
    \ = i\n    return largest_divisor\n\n", "    \n    divisor = 1\n    \n    while\
    \ n % divisor == 0:\n        divisor = divisor + 1\n    \n    return divisor\n\
    \n", "    largest_divisor = 1\n    for i in range(2, n):\n        if n % i ==\
    \ 0:\n            largest_divisor = i\n    return largest_divisor\n\n", "    \n\
    \    # Base case\n    if n == 1:\n        return 1\n    \n    # Recursive case\n\
    \    largest_divisor = largest_divisor(n//2)\n    if n % largest_divisor == 0:\n\
    \        return largest_divisor\n    else:\n        return largest_divisor + 1\n\
    \n", "    largest_divisor = 0\n    i = 2\n    while i <= n:\n        if n % i\
    \ == 0:\n            largest_divisor = i\n        i += 1\n    return largest_divisor\n\
    \n", "    \n    # Initialize a list to store the divisors\n    divisors = []\n\
    \    \n    # Initialize a variable to store the largest divisor found\n    max_divisor\
    \ = 0\n    \n    # Initialize a variable to store the current divisor found\n\
    \    current_divisor = 1\n    \n    # Loop through all numbers from 1 to n and\
    \ check if the current number is divisible by any number in the list\n    for\
    \ i in range(1, n + 1):\n        \n        # If the current number is divisible\
    \ by any number in the list, append it to the list\n        if current_divisor\
    \ % i == 0:\n            divisors.append(i)\n            \n        # If the current\
    \ number is not divisible by any number in the list, check if it is larger than\
    \ the largest divisor found\n        elif current_divisor > max_divisor:\n   \
    \         max_divisor = current_divisor\n            \n        # If the current\
    \ number is divisible by all numbers in the list, update the current divisor found\n\
    \        else:\n            current_divisor = current_divisor / i\n    \n    #\
    \ Return the largest divisor found\n    return max_divisor\n</cell>\n<cell>\n\
    largest_divisor(100)\n</cell>\n<cell>\nlargest_divisor(1000)\n</cell>\n<cell>\n\
    largest_divisor(10000)\n</cell>\n<cell>\nlargest_divisor(100000)\n</cell>\n<cell>\n\
    largest_divisor(1000000)\n</cell>\n<cell>\nlargest_divisor(10000000)\n</cell>\n\
    <cell>\nlargest_divisor(100000000)\n</cell>\n<cell>\nlargest_divisor(1000000000)\n\
    </cell>\n<cell>\nlargest_divisor(10000000000)\n</cell>\n<cell>\nlargest_divisor(100000000000)\n\
    </cell>\n<cell>\nlargest_divisor(1000000000000)\n</cell>\n<cell>\nlargest_divisor(10000000000000)\n\
    </cell>\n<cell>\nlargest_divisor(100000000000000)\n</cell>\n<cell>\nlargest_divisor(1000000000000000)\n\
    </cell>\n<cell>\nlargest_divisor(10000000000000000)\n</cell>\n<cell>\nlargest_divisor(100000000000000000)\n\
    </cell>\n<cell>\nlargest_divisor(1000000000000000000)\n</cell>\n<cell>\nlargest_divisor(10000000000000000000)\n\
    </cell>\n<cell>\nlargest_divisor(100000000000000000000)\n</cell>\n<cell>\nlargest_divisor(1000000000000000000000)\n\
    </cell>\n<cell>\nlargest_divisor(", "    \n    largest_divisor = 1\n    \n   \
    \ for i in range(2, n):\n        if n % i == 0:\n            largest_divisor =\
    \ i\n            break\n    \n    return largest_divisor\n\n", "    \n    largest_divisor\
    \ = 1\n    \n    for i in range(1, n):\n        if n % i == 0:\n            if\
    \ i > largest_divisor:\n                largest_divisor = i\n    \n    return\
    \ largest_divisor\n\n", "    divisor = 1\n    while n % divisor == 0:\n      \
    \  divisor += 1\n    return divisor\n\n", "    \n    largest_divisor = 0\n   \
    \ \n    for i in range(1, n//2 + 1):\n        if n % i == 0:\n            largest_divisor\
    \ = i\n            break\n    \n    return largest_divisor\n\n", "    \n    largest_divisor\
    \ = 1\n    \n    for i in range(2, n):\n        if n % i == 0:\n            largest_divisor\
    \ = i\n            \n    return largest_divisor\n\n", "    largest_divisor = 1\n\
    \    for i in range(2, n):\n        if n % i == 0:\n            largest_divisor\
    \ = i\n    return largest_divisor\n\n", "    \n    largest_divisor = 1\n    \n\
    \    for i in range(1, n):\n        if n % i == 0:\n            largest_divisor\
    \ = i\n            \n    return largest_divisor\n\n", "    \n    largest_divisor\
    \ = 1\n    \n    for i in range(2, n):\n        if n % i == 0:\n            largest_divisor\
    \ = i\n            \n    return largest_divisor\n</cell>\n<cell>\nlargest_divisor(100)\n\
    </cell>\n<cell>\nlargest_divisor(1000)\n</cell>\n<cell>\nlargest_divisor(10000)\n\
    </cell>\n<cell>\nlargest_divisor(100000)\n</cell>\n<cell>\nlargest_divisor(1000000)\n\
    </cell>\n<cell>\nlargest_divisor(10000000)\n</cell>\n<cell>\nlargest_divisor(100000000)\n\
    </cell>\n<cell>\nlargest_divisor(1000000000)\n</cell>\n<cell>\nlargest_divisor(10000000000)\n\
    </cell>\n<cell>\nlargest_divisor(100000000000)\n</cell>\n<cell>\nlargest_divisor(1000000000000)\n\
    </cell>\n<cell>\nlargest_divisor(10000000000000)\n</cell>\n<cell>\nlargest_divisor(100000000000000)\n\
    </cell>\n<cell>\nlargest_divisor(1000000000000000)\n</cell>\n<cell>\nlargest_divisor(10000000000000000)\n\
    </cell>\n<cell>\nlargest_divisor(100000000000000000)\n</cell>\n<cell>\nlargest_divisor(1000000000000000000)\n\
    </cell>\n<cell>\nlargest_divisor(10000000000000000000)\n</cell>\n<cell>\nlargest_divisor(100000000000000000000)\n\
    </cell>\n<cell>\nlargest_divisor(1000000000000000000000)\n</cell>\n<cell>\nlargest_divisor(10000000000000000000000)\n\
    </cell>\n<cell>\nlargest_divisor(100000000000000000000000)\n</cell>\n<cell>\n\
    largest_divisor(1000000000000000000000000)\n</cell>\n<cell>\nlargest_divisor(10000000000000000000000000)\n\
    </cell>\n<cell>\nlargest_divisor(100000000000000000000000000)\n</cell>\n<cell>\n\
    largest_divisor(1000000000000000000000000000)\n</cell>\n<cell>\nlargest_divisor(10000000000000000000000000000)\n\
    </cell>\n<cell>\nlargest_divisor(100000000000000000000000000000)\n</cell>\n<cell>\n\
    largest_divisor(1000000000000000000000000000000)\n</cell>\n<cell>\nlargest_",
  "    largest_divisor = 1\n    for i in range(2, n):\n        if n % i == 0:\n  \
    \          largest_divisor = i\n    return largest_divisor\n\n", "    divisors\
    \ = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            divisors.append(i)\n\
    \    return max(divisors)\n\n", "    \n    largest_divisor = 1\n    \n    for\
    \ i in range(2, n):\n        if n % i == 0:\n            largest_divisor = i\n\
    \            break\n    \n    return largest_divisor\n\n", "    \n    largest_divisor\
    \ = 1\n    \n    for i in range(2, n):\n        if n % i == 0:\n            if\
    \ i > largest_divisor:\n                largest_divisor = i\n    \n    return\
    \ largest_divisor\n\n", "    divisor = 1\n    while n % divisor != 0:\n      \
    \  divisor += 1\n    return divisor\n\n", "    \n    largest_divisor = 1\n   \
    \ \n    for i in range(2, n+1):\n        if n % i == 0:\n            largest_divisor\
    \ = i\n    \n    return largest_divisor\n\n", "    \n    largest_divisor = 0\n\
    \    \n    for i in range(1, n + 1):\n        if n % i == 0:\n            if largest_divisor\
    \ < i:\n                largest_divisor = i\n    \n    return largest_divisor\n\
    \n", "    divisor = 1\n    while n % divisor == 0:\n        divisor *= 2\n   \
    \ return divisor\n\n", "    divisor = 1\n    while n % divisor == 0:\n       \
    \ divisor *= 2\n    return divisor\n\n", "    \n    divisors = []\n    \n    for\
    \ i in range(1, n + 1):\n        if n % i == 0:\n            divisors.append(i)\n\
    \            \n    return max(divisors)\n\n", "    divisor = 1\n    while n %\
    \ divisor == 0:\n        divisor += 1\n    return divisor\n\n", "    \n    divisors\
    \ = []\n    \n    for i in range(1, n//2+1):\n        if n % i == 0:\n       \
    \     divisors.append(i)\n    \n    return max(divisors)\n</cell>\n<cell>\nlargest_divisor(100)\n\
    </cell>\n<cell>\nlargest_divisor(1000)\n</cell>\n<cell>\nlargest_divisor(10000)\n\
    </cell>\n<cell>\nlargest_divisor(100000)\n</cell>\n<cell>\nlargest_divisor(1000000)\n\
    </cell>\n<cell>\nlargest_divisor(10000000)\n</cell>\n<cell>\nlargest_divisor(100000000)\n\
    </cell>\n<cell>\nlargest_divisor(1000000000)\n</cell>\n<cell>\nlargest_divisor(10000000000)\n\
    </cell>\n<cell>\nlargest_divisor(100000000000)\n</cell>\n<cell>\nlargest_divisor(1000000000000)\n\
    </cell>\n<cell>\nlargest_divisor(10000000000000)\n</cell>\n<cell>\nlargest_divisor(100000000000000)\n\
    </cell>\n<cell>\nlargest_divisor(1000000000000000)\n</cell>\n<cell>\nlargest_divisor(10000000000000000)\n\
    </cell>\n<cell>\nlargest_divisor(100000000000000000)\n</cell>\n<cell>\nlargest_divisor(1000000000000000000)\n\
    </cell>\n<cell>\nlargest_divisor(10000000000000000000)\n</cell>\n<cell>\nlargest_divisor(100000000000000000000)\n\
    </cell>\n<cell>\nlargest_divisor(1000000000000000000000)\n</cell>\n<cell>\nlargest_divisor(10000000000000000000000)\n\
    </cell>\n<cell>\nlargest_divisor(100000000000000000000000)\n</cell>\n<cell>\n\
    largest_divisor(1000000000000000000000000)\n</cell>\n<cell>\nlargest_divisor(10000000000000000000000000)\n\
    </cell>\n<cell>\nlargest_divisor(100000000000000000000000000)\n</cell>\n<cell>\n\
    largest_divisor(1000000000000000000000000000)\n</cell>\n<cell>\nlargest_divisor(10000000000000000000000000000)\n\
    </cell>\n<cell>\nlargest_divisor(100000000000000000000000000000)\n</cell>\n<cell>\n\
    largest_divisor(1000000000000000000000000000000)\n</cell>\n<cell>\nlargest_divisor",
  "    largest_divisor = 1\n    i = 2\n    while i <= n:\n        if n % i == 0:\n\
    \            largest_divisor = i\n        i += 1\n    return largest_divisor\n\
    \n", "    \n    largest_divisor = 0\n    \n    for i in range(1, n//2+1):\n  \
    \      if n % i == 0:\n            largest_divisor = i\n            break\n  \
    \  \n    return largest_divisor\n</cell>\n<cell>\nlargest_divisor(100)\n</cell>\n\
    <cell>\nlargest_divisor(1000)\n</cell>\n<cell>\nlargest_divisor(10000)\n</cell>\n\
    <cell>\nlargest_divisor(100000)\n</cell>\n<cell>\nlargest_divisor(1000000)\n</cell>\n\
    <cell>\nlargest_divisor(10000000)\n</cell>\n<cell>\nlargest_divisor(100000000)\n\
    </cell>\n<cell>\nlargest_divisor(1000000000)\n</cell>\n<cell>\nlargest_divisor(10000000000)\n\
    </cell>\n<cell>\nlargest_divisor(100000000000)\n</cell>\n<cell>\nlargest_divisor(1000000000000)\n\
    </cell>\n<cell>\nlargest_divisor(10000000000000)\n</cell>\n<cell>\nlargest_divisor(100000000000000)\n\
    </cell>\n<cell>\nlargest_divisor(1000000000000000)\n</cell>\n<cell>\nlargest_divisor(10000000000000000)\n\
    </cell>\n<cell>\nlargest_divisor(100000000000000000)\n</cell>\n<cell>\nlargest_divisor(1000000000000000000)\n\
    </cell>\n<cell>\nlargest_divisor(10000000000000000000)\n</cell>\n<cell>\nlargest_divisor(100000000000000000000)\n\
    </cell>\n<cell>\nlargest_divisor(1000000000000000000000)\n</cell>\n<cell>\nlargest_divisor(10000000000000000000000)\n\
    </cell>\n<cell>\nlargest_divisor(100000000000000000000000)\n</cell>\n<cell>\n\
    largest_divisor(1000000000000000000000000)\n</cell>\n<cell>\nlargest_divisor(10000000000000000000000000)\n\
    </cell>\n<cell>\nlargest_divisor(100000000000000000000000000)\n</cell>\n<cell>\n\
    largest_divisor(1000000000000000000000000000)\n</cell>\n<cell>\nlargest_divisor(10000000000000000000000000000)\n\
    </cell>\n<cell>\nlargest_divisor(100000000000000000000000000000)\n</cell>\n<cell>\n\
    largest_divisor(1000000000000000000000000000000)\n</cell>\n<", "    divisor =\
    \ 1\n    while n % divisor == 0:\n        divisor *= 2\n    return divisor\n\n",
  "    \n    largest_divisor = 1\n    \n    for i in range(2, n):\n        if n %\
    \ i == 0:\n            largest_divisor = i\n            \n    return largest_divisor\n\
    \n", "    \n    largest_divisor = 1\n    \n    for i in range(2, n):\n       \
    \ if n % i == 0:\n            largest_divisor = i\n            \n    return largest_divisor\n\
    </cell>\n<cell>\nlargest_divisor(100)\n</cell>\n<cell>", "    \n    # Base case\n\
    \    if n == 0:\n        return 0\n    \n    # Recursive case\n    largest_divisor_recursive(n,\
    \ 1)\n    \n    return largest_divisor_recursive(n, 1)\n</cell>\n<cell>\nlargest_divisor(10)\n\
    </cell>\n<cell>\nlargest_divisor(100)\n</cell>\n<cell>\nlargest_divisor(1000)\n\
    </cell>\n<cell>\nlargest_divisor(10000)\n</cell>\n<cell>\nlargest_divisor(100000)\n\
    </cell>\n<cell>\nlargest_divisor(1000000)\n</cell>\n<cell>\nlargest_divisor(10000000)\n\
    </cell>\n<cell>\nlargest_divisor(100000000)\n</cell>\n<cell>\nlargest_divisor(1000000000)\n\
    </cell>\n<cell>\nlargest_divisor(10000000000)\n</cell>\n<cell>\nlargest_divisor(100000000000)\n\
    </cell>\n<cell>\nlargest_divisor(1000000000000)\n</cell>\n<cell>\nlargest_divisor(10000000000000)\n\
    </cell>\n<cell>\nlargest_divisor(100000000000000)\n</cell>\n<cell>\nlargest_divisor(1000000000000000)\n\
    </cell>\n<cell>\nlargest_divisor(10000000000000000)\n</cell>\n<cell>\nlargest_divisor(100000000000000000)\n\
    </cell>\n<cell>\nlargest_divisor(1000000000000000000)\n</cell>\n<cell>\nlargest_divisor(10000000000000000000)\n\
    </cell>\n<cell>\nlargest_divisor(100000000000000000000)\n</cell>\n<cell>\nlargest_divisor(1000000000000000000000)\n\
    </cell>\n<cell>\nlargest_divisor(10000000000000000000000)\n</cell>\n<cell>\nlargest_divisor(100000000000000000000000)\n\
    </cell>\n<cell>\nlargest_divisor(1000000000000000000000000)\n</cell>\n<cell>\n\
    largest_divisor(10000000000000000000000000)\n</cell>\n<cell>\nlargest_divisor(100000000000000000000000000)\n\
    </cell>\n<cell>\nlargest_divisor(1000000000000000000000000000)\n</cell>\n<cell>\n\
    largest_divisor(10000000000000000000000000000)\n</cell>\n<cell>\nlargest_divisor(100000000000000000000000000000)\n\
    </cell>\n<cell", "    divisor = 1\n    while n % divisor == 0:\n        divisor\
    \ *= 2\n    return divisor\n\n", "    largest_divisor = 1\n    for i in range(1,\
    \ n + 1):\n        if n % i == 0:\n            largest_divisor = i\n    return\
    \ largest_divisor\n\n", "    largest_divisor = 1\n    for i in range(1, n):\n\
    \        if n % i == 0:\n            largest_divisor = i\n    return largest_divisor\n\
    \n", "    largest_divisor = 1\n    i = 2\n    while i <= n:\n        if n % i\
    \ == 0:\n            largest_divisor = i\n        i += 1\n    return largest_divisor\n\
    \n", "    largest_divisor = 1\n    for i in range(2, n):\n        if n % i ==\
    \ 0:\n            largest_divisor = i\n    return largest_divisor\n\n", "    divisor\
    \ = 1\n    while n % divisor == 0:\n        divisor *= 2\n    return divisor\n\
    \n", "    \n    largest_divisor = 0\n    \n    for i in range(1, n//2 + 1):\n\
    \        if n % i == 0:\n            largest_divisor = i\n            break\n\
    \    \n    return largest_divisor\n\n", "    \n    largest_divisor = 0\n    \n\
    \    for i in range(1, n + 1):\n        if n % i == 0:\n            if i > largest_divisor:\n\
    \                largest_divisor = i\n    return largest_divisor\n\n", "    largest_divisor\
    \ = 1\n    for i in range(2, n):\n        if n % i == 0:\n            largest_divisor\
    \ = i\n    return largest_divisor\n\n", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    largest_divisor = 0\n    \n    for i in range(1,\
    \ n):\n        if n % i == 0:\n            if i > largest_divisor:\n         \
    \       largest_divisor = i\n    return largest_divisor\n</cell>\n<cell>\nlargest_divisor(10)\n\
    </cell>\n<cell>\nlargest_divisor(100)\n</cell>\n<cell>\nlargest_divisor(1000)\n\
    </cell>\n<cell>\nlargest_divisor(10000)\n</cell>\n<cell>\nlargest_divisor(100000)\n\
    </cell>\n<cell>\nlargest_divisor(1000000)\n</cell>\n<cell>\nlargest_divisor(10000000)\n\
    </cell>\n<cell>\nlargest_divisor(100000000)\n</cell>\n<cell>\nlargest_divisor(1000000000)\n\
    </cell>\n<cell>\nlargest_divisor(10000000000)\n</cell>\n<cell>\nlargest_divisor(100000000000)\n\
    </cell>\n<cell>\nlargest_divisor(1000000000000)\n</cell>\n<cell>\nlargest_divisor(10000000000000)\n\
    </cell>\n<cell>\nlargest_divisor(100000000000000)\n</cell>\n<cell>\nlargest_divisor(1000000000000000)\n\
    </cell>\n<cell>\nlargest_divisor(10000000000000000)\n</cell>\n<cell>\nlargest_divisor(100000000000000000)\n\
    </cell>\n<cell>\nlargest_divisor(1000000000000000000)\n</cell>\n<cell>\nlargest_divisor(10000000000000000000)\n\
    </cell>\n<cell>\nlargest_divisor(100000000000000000000)\n</cell>\n<cell>\nlargest_divisor(1000000000000000000000)\n\
    </cell>\n<cell>\nlargest_divisor(10000000000000000000000)\n</cell>\n<cell>\nlargest_divisor(100000000000000000000000)\n\
    </cell>\n<cell>\nlargest_divisor(1000000000000000000000000)\n</cell>\n<cell>\n\
    largest_divisor(10000000000000000000000000)\n</cell>\n<cell>\nlargest_divisor(100000000000000000000000000)\n\
    </cell>\n<cell>\nlargest_divisor(1000000000000000000000000000)\n</cell>\n<cell>\n\
    largest_divisor(10000000000000000000000000000)\n</cell>\n<cell>\nlargest_divisor(100000000000000000000000000000)\n\
    </cell>\n<cell>\n", "    \n    largest_divisor = 1\n    \n    for i in range(2,\
    \ n):\n        if n % i == 0:\n            if largest_divisor < i:\n         \
    \       largest_divisor = i\n    return largest_divisor\n\n", "    largest_divisor\
    \ = 1\n    for i in range(2, n):\n        if n % i == 0:\n            largest_divisor\
    \ = i\n    return largest_divisor\n\n", "    \n    # Base case\n    if n == 0:\n\
    \        return 0\n    \n    # Recursive case\n    divisor = largest_divisor(n\
    \ // 2)\n    if n % 2 == 0:\n        return divisor\n    else:\n        return\
    \ divisor + 1\n    \n    ", "    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    divisor = 1\n    while n % divisor != 0:\n        divisor += 1\n\
    \    return divisor\n\n", "    \n    largest_divisor = 1\n    \n    for i in range(2,\
    \ n):\n        if n % i == 0:\n            largest_divisor = i\n            break\n\
    \    \n    return largest_divisor\n</cell>\n<cell>\nlargest_divisor(10)\n</cell>\n\
    <cell>\nlargest_divisor(100)\n</cell>\n<cell>\nlargest_divisor(1000)\n</cell>\n\
    <cell>\nlargest_divisor(10000)\n</cell>\n<cell>\nlargest_divisor(100000)\n</cell>\n\
    <cell>\nlargest_divisor(1000000)\n</cell>\n<cell>\nlargest_divisor(10000000)\n\
    </cell>\n<cell>\nlargest_divisor(100000000)\n</cell>\n<cell>\nlargest_divisor(1000000000)\n\
    </cell>\n<cell>\nlargest_divisor(10000000000)\n</cell>\n<cell>\nlargest_divisor(100000000000)\n\
    </cell>\n<cell>\nlargest_divisor(1000000000000)\n</cell>\n<cell>\nlargest_divisor(10000000000000)\n\
    </cell>\n<cell>\nlargest_divisor(100000000000000)\n</cell>\n<cell>\nlargest_divisor(1000000000000000)\n\
    </cell>\n<cell>\nlargest_divisor(10000000000000000)\n</cell>\n<cell>\nlargest_divisor(100000000000000000)\n\
    </cell>\n<cell>\nlargest_divisor(1000000000000000000)\n</cell>\n<cell>\nlargest_divisor(10000000000000000000)\n\
    </cell>\n<cell>\nlargest_divisor(100000000000000000000)\n</cell>\n<cell>\nlargest_divisor(1000000000000000000000)\n\
    </cell>\n<cell>\nlargest_divisor(10000000000000000000000)\n</cell>\n<cell>\nlargest_divisor(100000000000000000000000)\n\
    </cell>\n<cell>\nlargest_divisor(1000000000000000000000000)\n</cell>\n<cell>\n\
    largest_divisor(10000000000000000000000000)\n</cell>\n<cell>\nlargest_divisor(100000000000000000000000000)\n\
    </cell>\n<cell>\nlargest_divisor(1000000000000000000000000000)\n</cell>\n<cell>\n\
    largest_divisor(10000000000000000000000000000)\n</cell>\n<cell>\nlargest_divisor(100000000000000000000000000000)\n\
    </cell>\n<cell>\nlargest_divisor", "    \n    largest_divisor = 1\n    \n    for\
    \ i in range(2, n):\n        if n % i == 0:\n            largest_divisor = i\n\
    \            \n    return largest_divisor\n</cell>\n<cell>\nlargest_divisor(10)\n\
    </cell>\n<cell>\nlargest_divisor(100)\n</cell>\n<cell>\nlargest_divisor(1000)\n\
    </cell>\n<cell>\nlargest_divisor(10000)\n</cell>\n<cell>\nlargest_divisor(100000)\n\
    </cell>\n<cell>\nlargest_divisor(1000000)\n</cell>\n<cell>\nlargest_divisor(10000000)\n\
    </cell>\n<cell>\nlargest_divisor(100000000)\n</cell>\n<cell>\nlargest_divisor(1000000000)\n\
    </cell>\n<cell>\nlargest_divisor(10000000000)\n</cell>\n<cell>\nlargest_divisor(100000000000)\n\
    </cell>\n<cell>\nlargest_divisor(1000000000000)\n</cell>\n<cell>\nlargest_divisor(10000000000000)\n\
    </cell>\n<cell>\nlargest_divisor(100000000000000)\n</cell>\n<cell>\nlargest_divisor(1000000000000000)\n\
    </cell>\n<cell>\nlargest_divisor(10000000000000000)\n</cell>\n<cell>\nlargest_divisor(100000000000000000)\n\
    </cell>\n<cell>\nlargest_divisor(1000000000000000000)\n</cell>\n<cell>\nlargest_divisor(10000000000000000000)\n\
    </cell>\n<cell>\nlargest_divisor(100000000000000000000)\n</cell>\n<cell>\nlargest_divisor(1000000000000000000000)\n\
    </cell>\n<cell>\nlargest_divisor(10000000000000000000000)\n</cell>\n<cell>\nlargest_divisor(100000000000000000000000)\n\
    </cell>\n<cell>\nlargest_divisor(1000000000000000000000000)\n</cell>\n<cell>\n\
    largest_divisor(10000000000000000000000000)\n</cell>\n<cell>\nlargest_divisor(100000000000000000000000000)\n\
    </cell>\n<cell>\nlargest_divisor(1000000000000000000000000000)\n</cell>\n<cell>\n\
    largest_divisor(10000000000000000000000000000)\n</cell>\n<cell>\nlargest_divisor(100000000000000000000000000000)\n\
    </cell>\n<cell>\nlargest_divisor(100", "    divisors = []\n    for i in range(1,\
    \ n + 1):\n        if n % i == 0:\n            divisors.append(i)\n    return\
    \ max(divisors)\n\n", "    divisor = 1\n    while n % divisor == 0:\n        divisor\
    \ *= 2\n    return divisor\n\n", "    divisor = 1\n    largest_divisor = 1\n \
    \   while divisor < n:\n        if n % divisor == 0:\n            largest_divisor\
    \ = divisor\n        divisor += 1\n    return largest_divisor\n\n", "    largest_divisor\
    \ = 1\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            largest_divisor\
    \ = i\n        i += 1\n    return largest_divisor\n\n", "    \n    largest_divisor\
    \ = 1\n    \n    for i in range(2, n):\n        if n % i == 0:\n            largest_divisor\
    \ = i\n            break\n    \n    return largest_divisor\n", "    \n    largest_divisor\
    \ = 0\n    \n    for i in range(1, n//2 + 1):\n        if n % i == 0:\n      \
    \      largest_divisor = i\n            break\n    \n    return largest_divisor\n",
  "    largest_divisor = 1\n    for i in range(2, n):\n        if n % i == 0:\n  \
    \          largest_divisor = i\n    return largest_divisor\n\n", "    \n    largest_divisor\
    \ = 1\n    \n    for i in range(2, n):\n        if n % i == 0:\n            largest_divisor\
    \ = i\n            \n    return largest_divisor\n</cell>\n<cell>\nlargest_divisor(100)\n\
    </cell>\n<cell>", "    \n    largest_divisor = 1\n    \n    for i in range(2,\
    \ n):\n        if n % i == 0:\n            largest_divisor = i\n            \n\
    \    return largest_divisor\n</cell>\n<cell>\nlargest_divisor(10)\n</cell>\n<cell>\n\
    largest_divisor(100)\n</cell>\n<cell>\nlargest_divisor(1000)\n</cell>\n<cell>\n\
    largest_divisor(10000)\n</cell>\n<cell>\nlargest_divisor(100000)\n</cell>\n<cell>\n\
    largest_divisor(1000000)\n</cell>\n<cell>\nlargest_divisor(10000000)\n</cell>\n\
    <cell>\nlargest_divisor(100000000)\n</cell>\n<cell>\nlargest_divisor(1000000000)\n\
    </cell>\n<cell>\nlargest_divisor(10000000000)\n</cell>\n<cell>\nlargest_divisor(100000000000)\n\
    </cell>\n<cell>\nlargest_divisor(1000000000000)\n</cell>\n<cell>\nlargest_divisor(10000000000000)\n\
    </cell>\n<cell>\nlargest_divisor(100000000000000)\n</cell>\n<cell>\nlargest_divisor(1000000000000000)\n\
    </cell>\n<cell>\nlargest_divisor(10000000000000000)\n</cell>\n<cell>\nlargest_divisor(100000000000000000)\n\
    </cell>\n<cell>\nlargest_divisor(1000000000000000000)\n</cell>\n<cell>\nlargest_divisor(10000000000000000000)\n\
    </cell>\n<cell>\nlargest_divisor(100000000000000000000)\n</cell>\n<cell>\nlargest_divisor(1000000000000000000000)\n\
    </cell>\n<cell>\nlargest_divisor(10000000000000000000000)\n</cell>\n<cell>\nlargest_divisor(100000000000000000000000)\n\
    </cell>\n<cell>\nlargest_divisor(1000000000000000000000000)\n</cell>\n<cell>\n\
    largest_divisor(10000000000000000000000000)\n</cell>\n<cell>\nlargest_divisor(100000000000000000000000000)\n\
    </cell>\n<cell>\nlargest_divisor(1000000000000000000000000000)\n</cell>\n<cell>\n\
    largest_divisor(10000000000000000000000000000)\n</cell>\n<cell>\nlargest_divisor(100000000000000000000000000000)\n\
    </cell>\n<cell>\nlargest_divisor(100", "    largest_divisor = 0\n    for i in\
    \ range(1, n):\n        if n % i == 0:\n            if i > largest_divisor:\n\
    \                largest_divisor = i\n    return largest_divisor\n\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
