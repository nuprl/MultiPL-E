name: HumanEval_44_change_base
language: py
results:
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError\n    if base == 10:\n \
    \       return str(x)\n    digits = []\n    while x:\n        digits.append(str(x\
    \ % base))\n        x = int(x / base)\n    digits.reverse()\n    return ''.join(digits)\n\
    \n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError(\"Base must be between\
    \ 2 and 36\")\n    if base == 10:\n        return str(x)\n    digits = []\n  \
    \  while x:\n        digits.append(str(x % base))\n        x = int(x / base)\n\
    \    if digits[-1] == '0':\n        digits = digits[:-1]\n    return ''.join(reversed(digits))\n\
    \n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError(\"Base must be between\
    \ 2 and 36\")\n    if base == 10:\n        return str(x)\n    digits = []\n  \
    \  while x > 0:\n        digits.append(x % base)\n        x = int(x / base)\n\
    \    digits.reverse()\n    return ''.join(str(digit) for digit in digits)\n\n\n\
    def check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError\n    if base == 10:\n \
    \       return str(x)\n    digits = []\n    while x:\n        digits.append(str(x\
    \ % base))\n        x = int(x / base)\n    if digits[-1] == '0':\n        digits\
    \ = digits[:-1]\n    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError(\"Base must be between\
    \ 2 and 36\")\n    if base == 10:\n        return str(x)\n    digits = []\n  \
    \  while x:\n        digits.append(str(x % base))\n        x = int(x / base)\n\
    \    if digits[-1] == '0':\n        digits = digits[:-1]\n    return ''.join(reversed(digits))\n\
    \n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError(\"Base must be between\
    \ 2 and 36\")\n    if base == 10:\n        return str(x)\n    digits = []\n  \
    \  while x > 0:\n        digits.append(x % base)\n        x = int(x / base)\n\
    \    digits.reverse()\n    return ''.join(str(digit) for digit in digits)\n\n\n\
    def check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError(\"base must be between\
    \ 2 and 36\")\n    if base == 10:\n        return str(x)\n    digits = []\n  \
    \  while x:\n        digits.append(str(x % base))\n        x = int(x / base)\n\
    \    digits.reverse()\n    return ''.join(digits)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError(\"Base must be between\
    \ 2 and 36\")\n    if base == 10:\n        return str(x)\n    digits = []\n  \
    \  while x:\n        digits.append(str(x % base))\n        x = x // base\n   \
    \ if digits[-1] == '0':\n        digits = digits[:-1]\n    return ''.join(reversed(digits))\n\
    \n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError(\"Base must be between\
    \ 2 and 36\")\n    if base == 10:\n        return str(x)\n    digits = []\n  \
    \  while x:\n        digits.append(str(x % base))\n        x = int(x / base)\n\
    \    digits.reverse()\n    return ''.join(digits)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError(\"Base must be between\
    \ 2 and 36\")\n    if base == 10:\n        return str(x)\n    digits = []\n  \
    \  while x:\n        digits.append(str(x % base))\n        x = int(x / base)\n\
    \    digits.reverse()\n    return ''.join(digits)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError\n    if base == 10:\n \
    \       return str(x)\n    digits = []\n    while x > 0:\n        digits.append(x\
    \ % base)\n        x = int(x / base)\n    digits.reverse()\n    return ''.join(map(str,\
    \ digits))\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n  \
    \  assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError(\"Base must be between\
    \ 2 and 36\")\n    if base == 10:\n        return str(x)\n    digits = []\n  \
    \  while x:\n        digits.append(str(x % base))\n        x = int(x / base)\n\
    \    if digits[-1] == '0':\n        digits = digits[:-1]\n    return ''.join(reversed(digits))\n\
    \n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError(\"Base must be between\
    \ 2 and 36\")\n    if base == 10:\n        return str(x)\n    digits = []\n  \
    \  while x:\n        digits.append(str(x % base))\n        x = int(x / base)\n\
    \    digits.reverse()\n    return ''.join(digits)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError(\"Base must be between\
    \ 2 and 36\")\n    if base == 10:\n        return str(x)\n    digits = []\n  \
    \  while x != 0:\n        digits.append(x % base)\n        x = int(x / base)\n\
    \    digits.reverse()\n    return ''.join(map(str, digits))\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError(\"Base must be between\
    \ 2 and 36\")\n    if base == 10:\n        return str(x)\n    digits = []\n  \
    \  while x:\n        digits.append(str(x % base))\n        x = int(x / base)\n\
    \    digits.reverse()\n    return ''.join(digits)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError(\"Base must be between\
    \ 2 and 36\")\n    if base == 10:\n        return str(x)\n    digits = []\n  \
    \  while x:\n        digits.append(str(x % base))\n        x = int(x / base)\n\
    \    digits.reverse()\n    return ''.join(digits)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError(f\"base must be between\
    \ 2 and 36\")\n    if base == 10:\n        return str(x)\n    digits = []\n  \
    \  while x:\n        digits.append(str(x % base))\n        x = x // base\n   \
    \ if digits[-1] == '0':\n        digits = digits[:-1]\n    return ''.join(reversed(digits))\n\
    \n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError(\"Base must be between\
    \ 2 and 36\")\n    if base == 10:\n        return str(x)\n    digits = []\n  \
    \  while x != 0:\n        digits.append(str(x % base))\n        x = int(x / base)\n\
    \    digits.reverse()\n    return ''.join(digits)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError(\"Base must be between\
    \ 2 and 36\")\n    if base == 10:\n        return str(x)\n    digits = []\n  \
    \  while x:\n        digits.append(str(x % base))\n        x = int(x / base)\n\
    \    digits.reverse()\n    return ''.join(digits)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError\n    if base == 10:\n \
    \       return str(x)\n    digits = []\n    while x:\n        digits.append(str(x\
    \ % base))\n        x = x // base\n    if digits[-1] == '0':\n        digits =\
    \ digits[:-1]\n    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError(\"Base must be between\
    \ 2 and 36\")\n    if base == 10:\n        return str(x)\n    digits = []\n  \
    \  while x:\n        digits.append(str(x % base))\n        x = int(x / base)\n\
    \    digits.reverse()\n    return ''.join(digits)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError(\"Base must be between\
    \ 2 and 36\")\n    if base == 10:\n        return str(x)\n    digits = []\n  \
    \  while x:\n        digits.append(str(x % base))\n        x = int(x / base)\n\
    \    digits.reverse()\n    return ''.join(digits)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError(\"base must be between\
    \ 2 and 36\")\n    if base == 10:\n        return str(x)\n    digits = []\n  \
    \  while x:\n        digits.append(str(x % base))\n        x = int(x / base)\n\
    \    if digits[-1] == '0':\n        digits = digits[:-1]\n    return ''.join(reversed(digits))\n\
    \n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError(\"Base must be between\
    \ 2 and 36\")\n    if base == 10:\n        return str(x)\n    digits = []\n  \
    \  while x:\n        digits.append(str(x % base))\n        x = x // base\n   \
    \ if digits[-1] == '0':\n        digits = digits[:-1]\n    return ''.join(reversed(digits))\n\
    \n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError(\"Base must be between\
    \ 2 and 36\")\n    if base == 10:\n        return str(x)\n    digits = []\n  \
    \  while x:\n        digits.append(str(x % base))\n        x = x // base\n   \
    \ digits.reverse()\n    return ''.join(digits)\n\n\ndef check(candidate):\n  \
    \  assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert\
    \ candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n  \
    \  assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n   \
    \ assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError\n    if base == 10:\n \
    \       return str(x)\n    digits = []\n    while x:\n        digits.append(str(x\
    \ % base))\n        x = x // base\n    digits.reverse()\n    return ''.join(digits)\n\
    \n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError(\"Base must be between\
    \ 2 and 36\")\n    if base == 10:\n        return str(x)\n    digits = []\n  \
    \  while x:\n        digits.append(str(x % base))\n        x = x // base\n   \
    \ if digits[-1] == '0':\n        digits = digits[:-1]\n    return ''.join(reversed(digits))\n\
    \n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError(\"Base must be between\
    \ 2 and 36\")\n    if base == 10:\n        return str(x)\n    digits = []\n  \
    \  while x:\n        digits.append(str(x % base))\n        x = int(x / base)\n\
    \    if digits[-1] == '0':\n        digits = digits[:-1]\n    return ''.join(reversed(digits))\n\
    \n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError(\"Base must be between\
    \ 2 and 36\")\n    if base == 10:\n        return str(x)\n    digits = []\n  \
    \  while x:\n        digits.append(str(x % base))\n        x = int(x / base)\n\
    \    digits.reverse()\n    return ''.join(digits)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError\n    if base == 10:\n \
    \       return str(x)\n    digits = []\n    while x > 0:\n        digits.append(str(x\
    \ % base))\n        x = int(x / base)\n    digits.reverse()\n    return ''.join(digits)\n\
    \n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError\n    if base == 10:\n \
    \       return str(x)\n    digits = []\n    while x:\n        digits.append(str(x\
    \ % base))\n        x = int(x / base)\n    digits.reverse()\n    return ''.join(digits)\n\
    \n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError\n    if base == 10:\n \
    \       return str(x)\n    digits = []\n    while x:\n        digits.append(str(x\
    \ % base))\n        x = int(x / base)\n    if digits[-1] == '0':\n        digits\
    \ = digits[:-1]\n    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError(\"Base must be between\
    \ 2 and 36\")\n    if base == 10:\n        return str(x)\n    digits = []\n  \
    \  while x != 0:\n        digits.append(x % base)\n        x = int(x / base)\n\
    \    digits.reverse()\n    return str(digits)\n\n\ndef check(candidate):\n   \
    \ assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert\
    \ candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n  \
    \  assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n   \
    \ assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq9n8c_r7.py\"\
    , line 35, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq9n8c_r7.py\"\
    , line 33, in test_check\n    check(change_base)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq9n8c_r7.py\"\
    , line 19, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError(\"Base must be between\
    \ 2 and 36\")\n    if base == 10:\n        return str(x)\n    digits = []\n  \
    \  while x:\n        digits.append(str(x % base))\n        x = int(x / base)\n\
    \    if digits[-1] == '0':\n        digits = digits[:-1]\n    return ''.join(reversed(digits))\n\
    \n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError(\"Base must be between\
    \ 2 and 36\")\n    if base == 10:\n        return str(x)\n    digits = []\n  \
    \  while x > 0:\n        digits.append(str(x % base))\n        x = int(x / base)\n\
    \    digits.reverse()\n    return ''.join(digits)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError\n    if base == 10:\n \
    \       return str(x)\n    digits = []\n    while x != 0:\n        digits.append(x\
    \ % base)\n        x = int(x / base)\n    digits.reverse()\n    return ''.join(map(str,\
    \ digits))\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n  \
    \  assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError\n    if base == 10:\n \
    \       return str(x)\n    digits = []\n    while x:\n        digits.append(str(x\
    \ % base))\n        x = x // base\n    if digits[-1] == '0':\n        digits =\
    \ digits[:-1]\n    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError\n    if base == 10:\n \
    \       return str(x)\n    digits = []\n    while x:\n        digits.append(str(x\
    \ % base))\n        x = x // base\n    if digits[-1] == '0':\n        digits =\
    \ digits[:-1]\n    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError(f\"Invalid base {base}\"\
    )\n    if base == 10:\n        return str(x)\n    digits = []\n    while x > 0:\n\
    \        digits.append(x % base)\n        x = x // base\n    digits.reverse()\n\
    \    return ''.join(map(str, digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError(\"Base must be between\
    \ 2 and 36\")\n    if base == 10:\n        return str(x)\n    digits = []\n  \
    \  while x > 0:\n        digits.append(x % base)\n        x = int(x / base)\n\
    \    digits.reverse()\n    return ''.join(map(str, digits))\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError(\"Base must be between\
    \ 2 and 36\")\n    if base == 10:\n        return str(x)\n    digits = []\n  \
    \  while x != 0:\n        digits.append(x % base)\n        x = int(x / base)\n\
    \    digits.reverse()\n    return ''.join(str(digit) for digit in digits)\n\n\n\
    def check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError(\"Base must be between\
    \ 2 and 36\")\n    if base == 10:\n        return str(x)\n    digits = []\n  \
    \  while x != 0:\n        digits.append(x % base)\n        x = int(x / base)\n\
    \    digits.reverse()\n    return ''.join(map(str, digits))\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError(f\"base {base} is not in\
    \ range [2, 36]\")\n    if base == 10:\n        return str(x)\n    digits = []\n\
    \    while x > 0:\n        digits.append(x % base)\n        x = int(x / base)\n\
    \    digits.reverse()\n    return ''.join(map(str, digits))\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError(\"Base must be between\
    \ 2 and 36\")\n    if base == 10:\n        return str(x)\n    digits = []\n  \
    \  while x:\n        digits.append(str(x % base))\n        x = int(x / base)\n\
    \    digits.reverse()\n    return ''.join(digits)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError(\"Base must be between\
    \ 2 and 36\")\n    if base == 10:\n        return str(x)\n    digits = []\n  \
    \  while x:\n        digits.append(str(x % base))\n        x = x // base\n   \
    \ if digits[-1] == '0':\n        digits = digits[:-1]\n    return ''.join(reversed(digits))\n\
    \n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError(\"Base must be between\
    \ 2 and 36\")\n    if base == 10:\n        return str(x)\n    digits = []\n  \
    \  while x > 0:\n        digits.append(str(x % base))\n        x = int(x / base)\n\
    \    digits.reverse()\n    return ''.join(digits)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError(\"Base must be between\
    \ 2 and 36\")\n    if base == 10:\n        return str(x)\n    digits = []\n  \
    \  while x != 0:\n        digits.append(str(x % base))\n        x = int(x / base)\n\
    \    if digits[-1] == '0':\n        digits = digits[:-1]\n    return ''.join(reversed(digits))\n\
    \n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError(\"Base must be between\
    \ 2 and 36\")\n    if base == 10:\n        return str(x)\n    digits = []\n  \
    \  while x:\n        digits.append(str(x % base))\n        x = int(x / base)\n\
    \    if digits[len(digits) - 1] == \"0\":\n        digits = digits[:-1]\n    return\
    \ \"\".join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError(\"Base must be between\
    \ 2 and 36\")\n    if base == 10:\n        return str(x)\n    digits = []\n  \
    \  while x:\n        digits.append(str(x % base))\n        x = int(x / base)\n\
    \    if digits[-1] == '0':\n        digits = digits[:-1]\n    return ''.join(reversed(digits))\n\
    \n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError\n    if base == 10:\n \
    \       return str(x)\n    digits = []\n    while x > 0:\n        digits.append(x\
    \ % base)\n        x = int(x / base)\n    digits.reverse()\n    return ''.join(map(str,\
    \ digits))\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n  \
    \  assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError(\"Base must be between\
    \ 2 and 36\")\n    if base == 10:\n        return str(x)\n    digits = []\n  \
    \  while x > 0:\n        digits.append(x % base)\n        x = int(x / base)\n\
    \    digits.reverse()\n    return ''.join(str(digit) for digit in digits)\n\n\n\
    def check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError(f\"base {base} is not in\
    \ range [2, 36]\")\n    if base == 10:\n        return str(x)\n    digits = []\n\
    \    while x:\n        digits.append(str(x % base))\n        x = x // base\n \
    \   if digits[-1] == '0':\n        digits = digits[:-1]\n    return ''.join(reversed(digits))\n\
    \n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError\n    if base == 10:\n \
    \       return str(x)\n    digits = []\n    while x > 0:\n        digits.append(x\
    \ % base)\n        x = int(x / base)\n    digits.reverse()\n    return ''.join(str(digit)\
    \ for digit in digits)\n\n\ndef check(candidate):\n    assert candidate(8, 3)\
    \ == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) ==\
    \ '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError(f\"base must be between\
    \ 2 and 36\")\n    if base == 10:\n        return str(x)\n    digits = []\n  \
    \  while x > 0:\n        digits.append(x % base)\n        x = int(x / base)\n\
    \    digits.reverse()\n    return ''.join(map(str, digits))\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError(\"Base must be between\
    \ 2 and 36\")\n    if base == 10:\n        return str(x)\n    digits = []\n  \
    \  while x:\n        digits.append(str(x % base))\n        x = x // base\n   \
    \ if digits[-1] == '0':\n        digits = digits[:-1]\n    return ''.join(reversed(digits))\n\
    \n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError(\"Base must be between\
    \ 2 and 36\")\n    if base == 10:\n        return str(x)\n    digits = []\n  \
    \  while x:\n        digits.append(str(x % base))\n        x = x // base\n   \
    \ if digits[-1] == '0':\n        digits = digits[:-1]\n    return ''.join(reversed(digits))\n\
    \n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError(f\"base must be between\
    \ 2 and 36\")\n    if base == 10:\n        return str(x)\n    digits = []\n  \
    \  while x != 0:\n        digits.append(x % base)\n        x = x // base\n   \
    \ digits.reverse()\n    return ''.join(map(str, digits))\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError\n    if base == 10:\n \
    \       return str(x)\n    digits = []\n    while x:\n        digits.append(str(x\
    \ % base))\n        x = x // base\n    if digits[-1] == '0':\n        digits =\
    \ digits[:-1]\n    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError(\"Base must be between\
    \ 2 and 36\")\n    if base == 10:\n        return str(x)\n    digits = []\n  \
    \  while x != 0:\n        digits.append(x % base)\n        x = int(x / base)\n\
    \    digits.reverse()\n    return ''.join(map(str, digits))\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError(\"Base must be between\
    \ 2 and 36\")\n    if base == 10:\n        return str(x)\n    digits = []\n  \
    \  while x > 0:\n        digits.append(str(x % base))\n        x = int(x / base)\n\
    \    digits.reverse()\n    return ''.join(digits)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError\n    if base == 10:\n \
    \       return str(x)\n    digits = []\n    while x > 0:\n        digits.append(x\
    \ % base)\n        x = int(x / base)\n    digits.reverse()\n    return ''.join(map(str,\
    \ digits))\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n  \
    \  assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError\n    if base == 10:\n \
    \       return str(x)\n    digits = []\n    while x > 0:\n        digits.append(str(x\
    \ % base))\n        x = x // base\n    digits.reverse()\n    return ''.join(digits)\n\
    \n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError\n    if base == 10:\n \
    \       return str(x)\n    digits = []\n    while x > 0:\n        digits.append(x\
    \ % base)\n        x = int(x / base)\n    digits.reverse()\n    return ''.join(map(str,\
    \ digits))\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n  \
    \  assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError\n    if base == 10:\n \
    \       return str(x)\n    digits = []\n    while x > 0:\n        digits.append(str(x\
    \ % base))\n        x = int(x / base)\n    digits.reverse()\n    return ''.join(digits)\n\
    \n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError(f\"base must be between\
    \ 2 and 36\")\n    if base == 10:\n        return str(x)\n    digits = []\n  \
    \  while x != 0:\n        digits.append(x % base)\n        x = int(x / base)\n\
    \    digits.reverse()\n    return ''.join(map(str, digits))\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError(\"Base must be between\
    \ 2 and 36\")\n    if base == 10:\n        return str(x)\n    digits = []\n  \
    \  while x:\n        digits.append(str(x % base))\n        x = x // base\n   \
    \ if digits[-1] == '0':\n        digits = digits[:-1]\n    return ''.join(reversed(digits))\n\
    \n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError\n    if base == 10:\n \
    \       return str(x)\n    digits = []\n    while x:\n        digits.append(str(x\
    \ % base))\n        x = x // base\n    if digits[-1] == '0':\n        digits =\
    \ digits[:-1]\n    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError(\"Base must be between\
    \ 2 and 36\")\n    if base == 10:\n        return str(x)\n    digits = []\n  \
    \  while x:\n        digits.append(str(x % base))\n        x = int(x / base)\n\
    \    digits.reverse()\n    return ''.join(digits)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError(\"Base must be between\
    \ 2 and 36\")\n    if base == 10:\n        return str(x)\n    digits = []\n  \
    \  while x > 0:\n        digits.append(x % base)\n        x = int(x / base)\n\
    \    digits.reverse()\n    return ''.join(map(str, digits))\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError(\"Base must be between\
    \ 2 and 36\")\n    if base == 10:\n        return str(x)\n    digits = []\n  \
    \  while x > 0:\n        digits.append(x % base)\n        x = int(x / base)\n\
    \    digits.reverse()\n    return ''.join(str(digit) for digit in digits)\n\n\n\
    def check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError(\"Base must be between\
    \ 2 and 36\")\n    if base == 10:\n        return str(x)\n    digits = []\n  \
    \  while x:\n        digits.append(str(x % base))\n        x = int(x / base)\n\
    \    if digits[-1] == '0':\n        digits = digits[:-1]\n    return ''.join(reversed(digits))\n\
    \n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError(\"Base must be between\
    \ 2 and 36\")\n    if base == 10:\n        return str(x)\n    digits = []\n  \
    \  while x != 0:\n        digits.append(str(x % base))\n        x = int(x / base)\n\
    \    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError\n    if base == 10:\n \
    \       return str(x)\n    digits = []\n    while x:\n        digits.append(str(x\
    \ % base))\n        x = int(x / base)\n    digits.reverse()\n    return ''.join(digits)\n\
    \n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError(\"Base must be between\
    \ 2 and 36\")\n    if base == 10:\n        return str(x)\n    digits = []\n  \
    \  while x:\n        digits.append(str(x % base))\n        x = int(x / base)\n\
    \    digits.reverse()\n    return ''.join(digits)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError(\"Base must be between\
    \ 2 and 36\")\n    if base == 10:\n        return str(x)\n    digits = []\n  \
    \  while x:\n        digits.append(str(x % base))\n        x = int(x / base)\n\
    \    if digits[-1] == '0':\n        digits = digits[:-1]\n    return ''.join(reversed(digits))\n\
    \n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError(\"Base must be between\
    \ 2 and 36\")\n    if base == 10:\n        return str(x)\n    digits = []\n  \
    \  while x:\n        digits.append(str(x % base))\n        x = int(x / base)\n\
    \    if digits[-1] == '0':\n        digits = digits[:-1]\n    return ''.join(reversed(digits))\n\
    \n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError(\"Base must be between\
    \ 2 and 36\")\n    if base == 10:\n        return str(x)\n    digits = []\n  \
    \  while x:\n        digits.append(str(x % base))\n        x = int(x / base)\n\
    \    digits.reverse()\n    return ''.join(digits)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError(f\"base {base} is out of\
    \ range\")\n    if base == 10:\n        return str(x)\n    digits = []\n    while\
    \ x:\n        digits.append(str(x % base))\n        x = int(x / base)\n    if\
    \ digits[-1] == '0':\n        digits = digits[:-1]\n    return ''.join(reversed(digits))\n\
    \n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError\n    if base == 10:\n \
    \       return str(x)\n    digits = []\n    while x:\n        digits.append(str(x\
    \ % base))\n        x = int(x / base)\n    if digits[-1] == '0':\n        digits\
    \ = digits[:-1]\n    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError(\"Base must be between\
    \ 2 and 36\")\n    if base == 10:\n        return str(x)\n    digits = []\n  \
    \  while x != 0:\n        digits.append(str(x % base))\n        x = int(x / base)\n\
    \    digits.reverse()\n    return ''.join(digits)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError(f\"base {base} is not in\
    \ range [2, 36]\")\n    if base == 10:\n        return str(x)\n    digits = []\n\
    \    while x:\n        digits.append(str(x % base))\n        x = x // base\n \
    \   if digits[-1] == '0':\n        digits = digits[:-1]\n    return ''.join(reversed(digits))\n\
    \n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError(\"Base must be between\
    \ 2 and 36\")\n    if base == 10:\n        return str(x)\n    digits = []\n  \
    \  while x:\n        digits.append(str(x % base))\n        x = int(x / base)\n\
    \    if digits[-1] == '0':\n        digits = digits[:-1]\n    return ''.join(reversed(digits))\n\
    \n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError(\"Base must be between\
    \ 2 and 36\")\n    if base == 10:\n        return str(x)\n    digits = []\n  \
    \  while x:\n        digits.append(str(x % base))\n        x = int(x / base)\n\
    \    digits.reverse()\n    return ''.join(digits)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError(f\"base {base} is not in\
    \ range [2, 36]\")\n    if base == 10:\n        return str(x)\n    digits = []\n\
    \    while x:\n        digits.append(str(x % base))\n        x = x // base\n \
    \   if digits[-1] == '0':\n        digits = digits[:-1]\n    return ''.join(reversed(digits))\n\
    \n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError(\"Base must be between\
    \ 2 and 36\")\n    if base == 10:\n        return str(x)\n    digits = []\n  \
    \  while x:\n        digits.append(str(x % base))\n        x = int(x / base)\n\
    \    if digits[-1] == '0':\n        digits = digits[:-1]\n    return ''.join(reversed(digits))\n\
    \n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError\n    if base == 10:\n \
    \       return str(x)\n    digits = []\n    while x > 0:\n        digits.append(x\
    \ % base)\n        x = int(x / base)\n    digits.reverse()\n    return ''.join(str(digit)\
    \ for digit in digits)\n\n\ndef check(candidate):\n    assert candidate(8, 3)\
    \ == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) ==\
    \ '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError(\"Base must be between\
    \ 2 and 36\")\n    if base == 10:\n        return str(x)\n    digits = []\n  \
    \  while x != 0:\n        digits.append(str(x % base))\n        x = int(x / base)\n\
    \    digits.reverse()\n    return ''.join(digits)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError(\"Base must be between\
    \ 2 and 36\")\n    if base == 10:\n        return str(x)\n    digits = []\n  \
    \  while x != 0:\n        digits.append(x % base)\n        x = int(x / base)\n\
    \    digits.reverse()\n    return ''.join(map(str, digits))\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError(\"base must be between\
    \ 2 and 36\")\n    if base == 10:\n        return str(x)\n    digits = []\n  \
    \  while x:\n        digits.append(str(x % base))\n        x = int(x / base)\n\
    \    digits.reverse()\n    return ''.join(digits)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError(\"Base must be between\
    \ 2 and 36\")\n    if base == 10:\n        return str(x)\n    digits = []\n  \
    \  while x:\n        digits.append(str(x % base))\n        x = int(x / base)\n\
    \    digits.reverse()\n    return ''.join(digits)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError(\"Base must be between\
    \ 2 and 36\")\n    if base == 10:\n        return str(x)\n    digits = []\n  \
    \  while x != 0:\n        digits.append(x % base)\n        x = int(x / base)\n\
    \    digits.reverse()\n    return ''.join(str(digit) for digit in digits)\n\n\n\
    def check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError\n    if base == 10:\n \
    \       return str(x)\n    digits = []\n    while x:\n        digits.append(str(x\
    \ % base))\n        x = x // base\n    if digits[-1] == '0':\n        digits =\
    \ digits[:-1]\n    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError(\"Base must be between\
    \ 2 and 36\")\n    if base == 10:\n        return str(x)\n    digits = []\n  \
    \  while x != 0:\n        digits.append(x % base)\n        x = int(x / base)\n\
    \    digits.reverse()\n    return ''.join(map(str, digits))\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError(\"Base must be between\
    \ 2 and 36\")\n    if base == 10:\n        return str(x)\n    digits = []\n  \
    \  while x:\n        digits.append(str(x % base))\n        x = int(x / base)\n\
    \    digits.reverse()\n    return ''.join(digits)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError\n    if base == 10:\n \
    \       return str(x)\n    digits = []\n    while x > 0:\n        digits.append(x\
    \ % base)\n        x = int(x / base)\n    digits.reverse()\n    return ''.join(map(str,\
    \ digits))\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n  \
    \  assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError(\"Base must be between\
    \ 2 and 36\")\n    if base == 10:\n        return str(x)\n    digits = []\n  \
    \  while x > 0:\n        digits.append(str(x % base))\n        x = int(x / base)\n\
    \    if digits[-1] == '0':\n        digits = digits[:-1]\n    return ''.join(reversed(digits))\n\
    \n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError(f\"base must be between\
    \ 2 and 36\")\n    if base == 10:\n        return str(x)\n    digits = []\n  \
    \  while x > 0:\n        digits.append(x % base)\n        x = x // base\n    digits.reverse()\n\
    \    return ''.join(map(str, digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError(\"base must be between\
    \ 2 and 36\")\n    if base == 10:\n        return str(x)\n    digits = []\n  \
    \  while x:\n        digits.append(str(x % base))\n        x = x // base\n   \
    \ if digits[-1] == '0':\n        digits = digits[:-1]\n    return ''.join(reversed(digits))\n\
    \n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError\n    if base == 10:\n \
    \       return str(x)\n    digits = []\n    while x:\n        digits.append(str(x\
    \ % base))\n        x = int(x / base)\n    if digits[-1] == '0':\n        digits\
    \ = digits[:-1]\n    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError(\"Base must be between\
    \ 2 and 36\")\n    if base == 10:\n        return str(x)\n    digits = []\n  \
    \  while x:\n        digits.append(str(x % base))\n        x = int(x / base)\n\
    \    digits.reverse()\n    return ''.join(digits)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError(\"Base must be between\
    \ 2 and 36\")\n    if base == 10:\n        return str(x)\n    digits = []\n  \
    \  while x:\n        digits.append(str(x % base))\n        x = int(x / base)\n\
    \    digits.reverse()\n    return ''.join(digits)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError(\"base must be between\
    \ 2 and 36\")\n    if base == 10:\n        return str(x)\n    digits = []\n  \
    \  while x:\n        digits.append(str(x % base))\n        x = int(x / base)\n\
    \    if digits[-1] == '0':\n        digits = digits[:-1]\n    return ''.join(reversed(digits))\n\
    \n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError(\"Base must be between\
    \ 2 and 36\")\n    if base == 10:\n        return str(x)\n    digits = []\n  \
    \  while x:\n        digits.append(str(x % base))\n        x = int(x / base)\n\
    \    digits.reverse()\n    return ''.join(digits)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError(\"Base must be between\
    \ 2 and 36\")\n    if base == 10:\n        return str(x)\n    digits = []\n  \
    \  while x != 0:\n        digits.append(str(x % base))\n        x = int(x / base)\n\
    \    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError(\"Base must be between\
    \ 2 and 36\")\n    if base == 10:\n        return str(x)\n    digits = []\n  \
    \  while x:\n        digits.append(str(x % base))\n        x = int(x / base)\n\
    \    if digits[len(digits) - 1] == '0':\n        digits = digits[:-1]\n    return\
    \ ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError\n    if base == 10:\n \
    \       return str(x)\n    digits = []\n    while x > 0:\n        digits.append(x\
    \ % base)\n        x = int(x / base)\n    digits.reverse()\n    return ''.join(str(digit)\
    \ for digit in digits)\n\n\ndef check(candidate):\n    assert candidate(8, 3)\
    \ == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) ==\
    \ '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError(\"Base must be between\
    \ 2 and 36\")\n    if base == 10:\n        return str(x)\n    digits = []\n  \
    \  while x:\n        digits.append(str(x % base))\n        x = int(x / base)\n\
    \    digits.reverse()\n    return ''.join(digits)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError\n    if base == 10:\n \
    \       return str(x)\n    digits = []\n    while x > 0:\n        digits.append(str(x\
    \ % base))\n        x = int(x / base)\n    digits.reverse()\n    return ''.join(digits)\n\
    \n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError(\"Base must be between\
    \ 2 and 36\")\n    if base == 10:\n        return str(x)\n    digits = []\n  \
    \  while x:\n        digits.append(str(x % base))\n        x = int(x / base)\n\
    \    if digits[len(digits) - 1] == \"0\":\n        digits = digits[:-1]\n    return\
    \ \"\".join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError\n    if base == 10:\n \
    \       return str(x)\n    digits = []\n    while x != 0:\n        digits.append(x\
    \ % base)\n        x = int(x / base)\n    digits.reverse()\n    return ''.join(map(str,\
    \ digits))\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n  \
    \  assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError\n    if base == 10:\n \
    \       return str(x)\n    digits = []\n    while x:\n        digits.append(str(x\
    \ % base))\n        x = x // base\n    if digits[-1] == '0':\n        digits =\
    \ digits[:-1]\n    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError(f\"base {base} is out of\
    \ range\")\n    if base == 10:\n        return str(x)\n    digits = []\n    while\
    \ x:\n        digits.append(str(x % base))\n        x = x // base\n    if digits[-1]\
    \ == '0':\n        digits = digits[:-1]\n    return ''.join(reversed(digits))\n\
    \n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError(\"Base must be between\
    \ 2 and 36\")\n    if base == 10:\n        return str(x)\n    digits = []\n  \
    \  while x > 0:\n        digits.append(x % base)\n        x = int(x / base)\n\
    \    digits.reverse()\n    return ''.join(map(str, digits))\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError(\"Base must be between\
    \ 2 and 36\")\n    if base == 10:\n        return str(x)\n    digits = []\n  \
    \  while x:\n        digits.append(str(x % base))\n        x = int(x / base)\n\
    \    if digits[-1] == '0':\n        digits = digits[:-1]\n    return ''.join(reversed(digits))\n\
    \n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError(\"Base must be between\
    \ 2 and 36\")\n    if base == 10:\n        return str(x)\n    digits = []\n  \
    \  while x != 0:\n        digits.append(x % base)\n        x = int(x / base)\n\
    \    digits.reverse()\n    return str(digits)\n\n\ndef check(candidate):\n   \
    \ assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert\
    \ candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n  \
    \  assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n   \
    \ assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcoazjg5f.py\"\
    , line 35, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcoazjg5f.py\"\
    , line 33, in test_check\n    check(change_base)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcoazjg5f.py\"\
    , line 19, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError\n    if base == 10:\n \
    \       return str(x)\n    digits = []\n    while x:\n        digits.append(str(x\
    \ % base))\n        x = int(x / base)\n    digits.reverse()\n    return ''.join(digits)\n\
    \n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError(\"Base must be between\
    \ 2 and 36\")\n    if base == 10:\n        return str(x)\n    digits = []\n  \
    \  while x:\n        digits.append(str(x % base))\n        x = int(x / base)\n\
    \    digits.reverse()\n    return ''.join(digits)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError\n    if base == 10:\n \
    \       return str(x)\n    digits = []\n    while x:\n        digits.append(str(x\
    \ % base))\n        x = x // base\n    digits.reverse()\n    return ''.join(digits)\n\
    \n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError(\"Base must be between\
    \ 2 and 36\")\n    if base == 10:\n        return str(x)\n    digits = []\n  \
    \  while x:\n        digits.append(str(x % base))\n        x = int(x / base)\n\
    \    digits.reverse()\n    return ''.join(digits)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError\n    if base == 10:\n \
    \       return str(x)\n    digits = []\n    while x:\n        digits.append(str(x\
    \ % base))\n        x = int(x / base)\n    digits.reverse()\n    return ''.join(digits)\n\
    \n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError(\"Base must be between\
    \ 2 and 36\")\n    if base == 10:\n        return str(x)\n    digits = []\n  \
    \  while x != 0:\n        digits.append(str(x % base))\n        x = int(x / base)\n\
    \    if digits[len(digits) - 1] == \"0\":\n        digits = digits[:-1]\n    return\
    \ ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError(\"Base must be between\
    \ 2 and 36\")\n    if base == 10:\n        return str(x)\n    digits = []\n  \
    \  while x != 0:\n        digits.append(x % base)\n        x = int(x / base)\n\
    \    digits.reverse()\n    return str(digits)\n\n\ndef check(candidate):\n   \
    \ assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert\
    \ candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n  \
    \  assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n   \
    \ assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe98khiwf.py\"\
    , line 35, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe98khiwf.py\"\
    , line 33, in test_check\n    check(change_base)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe98khiwf.py\"\
    , line 19, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError(\"Base must be between\
    \ 2 and 36\")\n    if base == 10:\n        return str(x)\n    digits = []\n  \
    \  while x:\n        digits.append(str(x % base))\n        x = int(x / base)\n\
    \    if digits[len(digits) - 1] == '0':\n        digits = digits[:-1]\n    return\
    \ ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError(f\"Base must be between\
    \ 2 and 36\")\n    if base == 10:\n        return str(x)\n    digits = []\n  \
    \  while x > 0:\n        digits.append(x % base)\n        x = int(x / base)\n\
    \    digits.reverse()\n    return ''.join(map(str, digits))\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError(\"Base must be between\
    \ 2 and 36\")\n    if base == 10:\n        return str(x)\n    digits = []\n  \
    \  while x:\n        digits.append(str(x % base))\n        x = x // base\n   \
    \ digits.reverse()\n    return ''.join(digits)\n\n\ndef check(candidate):\n  \
    \  assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert\
    \ candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n  \
    \  assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n   \
    \ assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError(\"Base must be between\
    \ 2 and 36\")\n    if base == 10:\n        return str(x)\n    digits = []\n  \
    \  while x:\n        digits.append(str(x % base))\n        x = int(x / base)\n\
    \    if digits[-1] == '0':\n        digits = digits[:-1]\n    return ''.join(reversed(digits))\n\
    \n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError(f\"Invalid base {base}\"\
    )\n    digits = []\n    while x:\n        digits.append(str(x % base))\n     \
    \   x = x // base\n    if digits[-1] == '0':\n        digits = digits[:-1]\n \
    \   return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError\n    if base == 10:\n \
    \       return str(x)\n    digits = []\n    while x:\n        digits.append(str(x\
    \ % base))\n        x = x // base\n    digits[-1] = digits[-1][:1]\n    return\
    \ ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError(\"Base must be between\
    \ 2 and 36\")\n    if base == 10:\n        return str(x)\n    digits = []\n  \
    \  while x:\n        digits.append(str(x % base))\n        x = x // base\n   \
    \ if digits[-1] == '0':\n        digits = digits[:-1]\n    return ''.join(reversed(digits))\n\
    \n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError(\"Base must be between\
    \ 2 and 36\")\n    if base == 10:\n        return str(x)\n    digits = []\n  \
    \  while x:\n        digits.append(str(x % base))\n        x = int(x / base)\n\
    \    digits.reverse()\n    return ''.join(digits)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError\n    if base == 10:\n \
    \       return str(x)\n    digits = []\n    while x:\n        digits.append(str(x\
    \ % base))\n        x = int(x / base)\n    if digits[len(digits) - 1] == '0':\n\
    \        digits = digits[:-1]\n    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError(\"Base must be between\
    \ 2 and 36\")\n    if base == 10:\n        return str(x)\n    digits = []\n  \
    \  while x:\n        digits.append(str(x % base))\n        x = int(x / base)\n\
    \    if digits[-1] == '0':\n        digits = digits[:-1]\n    return ''.join(reversed(digits))\n\
    \n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError(\"Base must be between\
    \ 2 and 36\")\n    if base == 10:\n        return str(x)\n    digits = []\n  \
    \  while x:\n        digits.append(str(x % base))\n        x = int(x / base)\n\
    \    if digits[-1] == '0':\n        digits = digits[:-1]\n    return ''.join(reversed(digits))\n\
    \n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError(\"Base must be between\
    \ 2 and 36\")\n    if base == 10:\n        return str(x)\n    digits = []\n  \
    \  while x:\n        digits.append(str(x % base))\n        x = int(x / base)\n\
    \    digits.reverse()\n    return ''.join(digits)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError\n    if base == 10:\n \
    \       return str(x)\n    digits = []\n    while x > 0:\n        digits.append(x\
    \ % base)\n        x = int(x / base)\n    digits.reverse()\n    return ''.join(map(str,\
    \ digits))\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n  \
    \  assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError(\"Base must be between\
    \ 2 and 36\")\n    if base == 10:\n        return str(x)\n    digits = []\n  \
    \  while x > 0:\n        digits.append(str(x % base))\n        x = int(x / base)\n\
    \    digits.reverse()\n    return ''.join(digits)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError(f\"Invalid base: {base}\"\
    )\n    if base == 10:\n        return str(x)\n    digits = []\n    while x > 0:\n\
    \        digits.append(x % base)\n        x = int(x / base)\n    digits.reverse()\n\
    \    return ''.join(map(str, digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError(\"Base must be between\
    \ 2 and 36\")\n    if base == 10:\n        return str(x)\n    digits = []\n  \
    \  while x != 0:\n        digits.append(x % base)\n        x = int(x / base)\n\
    \    digits.reverse()\n    return str(digits)\n\n\ndef check(candidate):\n   \
    \ assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert\
    \ candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n  \
    \  assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n   \
    \ assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcz8t6bae.py\"\
    , line 35, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcz8t6bae.py\"\
    , line 33, in test_check\n    check(change_base)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcz8t6bae.py\"\
    , line 19, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError(\"Base must be between\
    \ 2 and 36\")\n    if base == 10:\n        return str(x)\n    digits = []\n  \
    \  while x:\n        digits.append(str(x % base))\n        x = int(x / base)\n\
    \    if digits[len(digits) - 1] == '0':\n        digits = digits[:-1]\n    return\
    \ ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError(\"Base must be between\
    \ 2 and 36\")\n    if base == 10:\n        return str(x)\n    digits = []\n  \
    \  while x > 0:\n        digits.append(x % base)\n        x = int(x / base)\n\
    \    digits.reverse()\n    return str(digits)\n\n\ndef check(candidate):\n   \
    \ assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert\
    \ candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n  \
    \  assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n   \
    \ assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd5pldjqz.py\"\
    , line 35, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd5pldjqz.py\"\
    , line 33, in test_check\n    check(change_base)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd5pldjqz.py\"\
    , line 19, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError\n    if base == 10:\n \
    \       return str(x)\n    digits = []\n    while x > 0:\n        digits.append(x\
    \ % base)\n        x = int(x / base)\n    digits.reverse()\n    return ''.join(map(str,\
    \ digits))\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n  \
    \  assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError\n    if base == 10:\n \
    \       return str(x)\n    digits = []\n    while x > 0:\n        digits.append(str(x\
    \ % base))\n        x = int(x / base)\n    if digits[-1] == '0':\n        digits\
    \ = digits[:-1]\n    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError(f\"base {base} is not in\
    \ range 2..36\")\n    if base == 10:\n        return str(x)\n    digits = []\n\
    \    while x:\n        digits.append(x % base)\n        x = x // base\n    if\
    \ digits:\n        digits.reverse()\n    return ''.join(map(str, digits))\n\n\n\
    def check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError(\"Base must be between\
    \ 2 and 36\")\n    if base == 10:\n        return str(x)\n    digits = []\n  \
    \  while x > 0:\n        digits.append(str(x % base))\n        x = int(x / base)\n\
    \    digits.reverse()\n    return ''.join(digits)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError(\"Base must be between\
    \ 2 and 36\")\n    if base == 10:\n        return str(x)\n    digits = []\n  \
    \  while x:\n        digits.append(str(x % base))\n        x = x // base\n   \
    \ if digits[-1] == '0':\n        digits = digits[:-1]\n    return ''.join(reversed(digits))\n\
    \n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError(\"Base must be between\
    \ 2 and 36\")\n    if base == 10:\n        return str(x)\n    digits = []\n  \
    \  while x:\n        digits.append(str(x % base))\n        x = int(x / base)\n\
    \    if digits[-1] == '0':\n        digits = digits[:-1]\n    return ''.join(reversed(digits))\n\
    \n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError(\"Base must be between\
    \ 2 and 36\")\n    if base == 10:\n        return str(x)\n    digits = []\n  \
    \  while x > 0:\n        digits.append(x % base)\n        x = int(x / base)\n\
    \    digits.reverse()\n    return str(digits)\n\n\ndef check(candidate):\n   \
    \ assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert\
    \ candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n  \
    \  assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n   \
    \ assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2t7xondh.py\"\
    , line 35, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2t7xondh.py\"\
    , line 33, in test_check\n    check(change_base)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2t7xondh.py\"\
    , line 19, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError(\"base must be between\
    \ 2 and 36\")\n    if base == 10:\n        return str(x)\n    digits = []\n  \
    \  while x:\n        digits.append(str(x % base))\n        x = int(x / base)\n\
    \    digits.reverse()\n    return ''.join(digits)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError(\"Base must be between\
    \ 2 and 36\")\n    if base == 10:\n        return str(x)\n    digits = []\n  \
    \  while x:\n        digits.append(str(x % base))\n        x = int(x / base)\n\
    \    digits.reverse()\n    return ''.join(digits)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError(f\"base {base} is out of\
    \ range\")\n    if base == 10:\n        return str(x)\n    digits = []\n    while\
    \ x != 0:\n        digits.append(x % base)\n        x = int(x / base)\n    digits.reverse()\n\
    \    return str(digits)\n\n\ndef check(candidate):\n    assert candidate(8, 3)\
    \ == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) ==\
    \ '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgnhl91l4.py\"\
    , line 35, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgnhl91l4.py\"\
    , line 33, in test_check\n    check(change_base)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgnhl91l4.py\"\
    , line 19, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError(\"Base must be between\
    \ 2 and 36\")\n    if base == 10:\n        return str(x)\n    digits = []\n  \
    \  while x != 0:\n        digits.append(str(x % base))\n        x = int(x / base)\n\
    \    digits.reverse()\n    return ''.join(digits)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError(\"Base must be between\
    \ 2 and 36\")\n    if base == 10:\n        return str(x)\n    digits = []\n  \
    \  while x > 0:\n        digits.append(str(x % base))\n        x = int(x / base)\n\
    \    digits.reverse()\n    return ''.join(digits)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError\n    if base == 10:\n \
    \       return str(x)\n    digits = []\n    while x:\n        digits.append(str(x\
    \ % base))\n        x = int(x / base)\n    digits.reverse()\n    return ''.join(digits)\n\
    \n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError\n    if base == 10:\n \
    \       return str(x)\n    digits = []\n    while x:\n        digits.append(str(x\
    \ % base))\n        x = x // base\n    if digits[-1] == '0':\n        digits =\
    \ digits[:-1]\n    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError(f\"invalid base: {base}\"\
    )\n    if base == 10:\n        return str(x)\n    digits = []\n    while x:\n\
    \        digits.append(str(x % base))\n        x = x // base\n    digits.reverse()\n\
    \    return ''.join(digits)\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError(\"Base must be between\
    \ 2 and 36\")\n    if base == 10:\n        return str(x)\n    digits = []\n  \
    \  while x:\n        digits.append(str(x % base))\n        x = int(x / base)\n\
    \    digits.reverse()\n    return ''.join(digits)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError(\"Base must be between\
    \ 2 and 36\")\n    if base == 10:\n        return str(x)\n    digits = []\n  \
    \  while x:\n        digits.append(str(x % base))\n        x = int(x / base)\n\
    \    if digits[len(digits) - 1] == '0':\n        digits = digits[:-1]\n    return\
    \ ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError\n    if base == 10:\n \
    \       return str(x)\n    digits = []\n    while x:\n        digits.append(str(x\
    \ % base))\n        x = int(x / base)\n    if digits[-1] == '0':\n        digits\
    \ = digits[:-1]\n    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError\n    if base == 10:\n \
    \       return str(x)\n    digits = []\n    while x:\n        digits.append(str(x\
    \ % base))\n        x = x // base\n    if digits[-1] == '0':\n        digits =\
    \ digits[:-1]\n    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError\n    if base == 10:\n \
    \       return str(x)\n    digits = []\n    while x:\n        digits.append(str(x\
    \ % base))\n        x = int(x / base)\n    if digits[-1] == '0':\n        digits\
    \ = digits[:-1]\n    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError(\"Base must be between\
    \ 2 and 36\")\n    if base == 10:\n        return str(x)\n    digits = []\n  \
    \  while x:\n        digits.append(str(x % base))\n        x = int(x / base)\n\
    \    digits.reverse()\n    return ''.join(digits)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError(f\"base {base} is not in\
    \ range [2, 36]\")\n    if base == 10:\n        return str(x)\n    digits = []\n\
    \    while x:\n        digits.append(str(x % base))\n        x = x // base\n \
    \   if digits[-1] == '0':\n        digits.pop()\n    digits.reverse()\n    return\
    \ ''.join(digits)\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n\
    \    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError(\"Base must be between\
    \ 2 and 36\")\n    if base == 10:\n        return str(x)\n    digits = []\n  \
    \  while x:\n        digits.append(str(x % base))\n        x = int(x / base)\n\
    \    if digits[-1] == '0':\n        digits = digits[:-1]\n    return ''.join(reversed(digits))\n\
    \n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError(f\"base must be between\
    \ 2 and 36\")\n    if base == 10:\n        return str(x)\n    digits = []\n  \
    \  while x > 0:\n        digits.append(x % base)\n        x = int(x / base)\n\
    \    digits.reverse()\n    return ''.join(str(d) for d in digits)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError\n    if base == 10:\n \
    \       return str(x)\n    digits = []\n    while x:\n        digits.append(str(x\
    \ % base))\n        x = int(x / base)\n    digits.reverse()\n    return ''.join(digits)\n\
    \n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError(\"Base must be between\
    \ 2 and 36\")\n    if base == 10:\n        return str(x)\n    digits = []\n  \
    \  while x > 0:\n        digits.append(x % base)\n        x = int(x / base)\n\
    \    digits.reverse()\n    return ''.join(map(str, digits))\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError(\"Base must be between\
    \ 2 and 36\")\n    if base == 10:\n        return str(x)\n    digits = []\n  \
    \  while x > 0:\n        digits.append(str(x % base))\n        x = int(x / base)\n\
    \    digits.reverse()\n    return ''.join(digits)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError(\"Base must be between\
    \ 2 and 36\")\n    if base == 10:\n        return str(x)\n    digits = []\n  \
    \  while x:\n        digits.append(str(x % base))\n        x = int(x / base)\n\
    \    digits.reverse()\n    return ''.join(digits)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError(\"Base must be between\
    \ 2 and 36\")\n    if base == 10:\n        return str(x)\n    digits = []\n  \
    \  while x != 0:\n        digits.append(x % base)\n        x = int(x / base)\n\
    \    digits.reverse()\n    return str(digits)\n\n\ndef check(candidate):\n   \
    \ assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert\
    \ candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n  \
    \  assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n   \
    \ assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvhy3h001.py\"\
    , line 35, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvhy3h001.py\"\
    , line 33, in test_check\n    check(change_base)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvhy3h001.py\"\
    , line 19, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError(\"Base must be between\
    \ 2 and 36\")\n    if base == 10:\n        return str(x)\n    digits = []\n  \
    \  while x > 0:\n        digits.append(x % base)\n        x = int(x / base)\n\
    \    digits.reverse()\n    return str(digits)\n\n\ndef check(candidate):\n   \
    \ assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert\
    \ candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n  \
    \  assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n   \
    \ assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptsgnek4m.py\"\
    , line 35, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptsgnek4m.py\"\
    , line 33, in test_check\n    check(change_base)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptsgnek4m.py\"\
    , line 19, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError(\"Base must be between\
    \ 2 and 36\")\n    if base == 10:\n        return str(x)\n    digits = []\n  \
    \  while x:\n        digits.append(str(x % base))\n        x = int(x / base)\n\
    \    if digits[-1] == '0':\n        digits = digits[:-1]\n    return ''.join(reversed(digits))\n\
    \n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError(\"Base must be between\
    \ 2 and 36\")\n    if base == 10:\n        return str(x)\n    digits = []\n  \
    \  while x:\n        digits.append(str(x % base))\n        x = x // base\n   \
    \ if digits[-1] == '0':\n        digits = digits[:-1]\n    return ''.join(reversed(digits))\n\
    \n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError(\"Base must be between\
    \ 2 and 36\")\n    if base == 10:\n        return str(x)\n    digits = []\n  \
    \  while x > 0:\n        digits.append(str(x % base))\n        x = int(x / base)\n\
    \    digits.reverse()\n    return ''.join(digits)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError(f\"base {base} is not in\
    \ range [2, 36]\")\n    if base == 10:\n        return str(x)\n    digits = []\n\
    \    while x > 0:\n        digits.append(x % base)\n        x = int(x / base)\n\
    \    digits.reverse()\n    return ''.join(map(str, digits))\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError(\"Base must be between\
    \ 2 and 36\")\n    if base == 10:\n        return str(x)\n    digits = []\n  \
    \  while x > 0:\n        digits.append(str(x % base))\n        x = int(x / base)\n\
    \    digits.reverse()\n    return ''.join(digits)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError(\"Base must be between\
    \ 2 and 36\")\n    if base == 10:\n        return str(x)\n    digits = []\n  \
    \  while x > 0:\n        digits.append(str(x % base))\n        x = int(x / base)\n\
    \    digits.reverse()\n    return ''.join(digits)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError(\"Base must be between\
    \ 2 and 36\")\n    if base == 10:\n        return str(x)\n    digits = []\n  \
    \  while x:\n        digits.append(str(x % base))\n        x = int(x / base)\n\
    \    digits.reverse()\n    return ''.join(digits)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError(\"Base must be between\
    \ 2 and 36\")\n    if base == 10:\n        return str(x)\n    digits = []\n  \
    \  while x != 0:\n        digits.append(x % base)\n        x = int(x / base)\n\
    \    digits.reverse()\n    return ''.join(map(str, digits))\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError(\"Base must be between\
    \ 2 and 36\")\n    if base == 10:\n        return str(x)\n    digits = []\n  \
    \  while x:\n        digits.append(str(x % base))\n        x = x // base\n   \
    \ if digits[-1] == '0':\n        digits = digits[:-1]\n    return ''.join(reversed(digits))\n\
    \n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError(\"Base must be between\
    \ 2 and 36\")\n    if base == 10:\n        return str(x)\n    digits = []\n  \
    \  while x:\n        digits.append(str(x % base))\n        x = int(x / base)\n\
    \    if digits[-1] == '0':\n        digits = digits[:-1]\n    return ''.join(reversed(digits))\n\
    \n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError\n    if base == 10:\n \
    \       return str(x)\n    digits = []\n    while x:\n        digits.append(str(x\
    \ % base))\n        x = x // base\n    if digits[-1] == '0':\n        digits =\
    \ digits[:-1]\n    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError\n    if base == 10:\n \
    \       return str(x)\n    digits = []\n    while x:\n        digits.append(str(x\
    \ % base))\n        x = int(x / base)\n    if digits[-1] == '0':\n        digits\
    \ = digits[:-1]\n    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError\n    if base == 10:\n \
    \       return str(x)\n    digits = []\n    while x:\n        digits.append(str(x\
    \ % base))\n        x = x // base\n    if digits[-1] == '0':\n        digits =\
    \ digits[:-1]\n    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError\n    if base == 10:\n \
    \       return str(x)\n    digits = []\n    while x > 0:\n        digits.append(x\
    \ % base)\n        x = int(x / base)\n    digits.reverse()\n    return ''.join(map(str,\
    \ digits))\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n  \
    \  assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError(\"Base must be between\
    \ 2 and 36\")\n    if base == 10:\n        return str(x)\n    digits = []\n  \
    \  while x:\n        digits.append(str(x % base))\n        x = int(x / base)\n\
    \    if digits[len(digits) - 1] == '0':\n        digits = digits[:-1]\n    return\
    \ ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError(\"Base must be between\
    \ 2 and 36\")\n    if base == 10:\n        return str(x)\n    digits = []\n  \
    \  while x:\n        digits.append(str(x % base))\n        x = int(x / base)\n\
    \    digits.reverse()\n    return ''.join(digits)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError(\"Base must be between\
    \ 2 and 36\")\n    if base == 10:\n        return str(x)\n    digits = []\n  \
    \  while x:\n        digits.append(str(x % base))\n        x = int(x / base)\n\
    \    if digits[-1] == '0':\n        digits = digits[:-1]\n    return ''.join(reversed(digits))\n\
    \n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError(\"Base must be between\
    \ 2 and 36\")\n    if base == 10:\n        return str(x)\n    digits = []\n  \
    \  while x > 0:\n        digits.append(x % base)\n        x = int(x / base)\n\
    \    digits.reverse()\n    return ''.join(str(digit) for digit in digits)\n\n\n\
    def check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError(\"base must be between\
    \ 2 and 36\")\n    if base == 10:\n        return str(x)\n    digits = []\n  \
    \  while x:\n        digits.append(str(x % base))\n        x = int(x / base)\n\
    \    if digits[-1] == '0':\n        digits = digits[:-1]\n    return ''.join(reversed(digits))\n\
    \n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError(\"base must be between\
    \ 2 and 36\")\n    if base == 10:\n        return str(x)\n    digits = []\n  \
    \  while x:\n        digits.append(str(x % base))\n        x = x // base\n   \
    \ if digits[-1] == '0':\n        digits = digits[:-1]\n    return ''.join(reversed(digits))\n\
    \n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError(\"Base must be between\
    \ 2 and 36\")\n    if base == 10:\n        return str(x)\n    digits = []\n  \
    \  while x:\n        digits.append(str(x % base))\n        x = int(x / base)\n\
    \    if digits[len(digits) - 1] == '0':\n        digits = digits[:-1]\n    return\
    \ ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError(\"Base must be between\
    \ 2 and 36\")\n    if base == 10:\n        return str(x)\n    digits = []\n  \
    \  while x:\n        digits.append(str(x % base))\n        x = int(x / base)\n\
    \    digits.reverse()\n    return ''.join(digits)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError\n    if base == 10:\n \
    \       return str(x)\n    digits = []\n    while x > 0:\n        digits.append(str(x\
    \ % base))\n        x = int(x / base)\n    digits.reverse()\n    return ''.join(digits)\n\
    \n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError(\"Base must be between\
    \ 2 and 36\")\n    if base == 10:\n        return str(x)\n    digits = []\n  \
    \  while x != 0:\n        digits.append(x % base)\n        x = int(x / base)\n\
    \    digits.reverse()\n    return ''.join(map(str, digits))\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError(\"Base must be between\
    \ 2 and 36\")\n    if base == 10:\n        return str(x)\n    digits = []\n  \
    \  while x > 0:\n        digits.append(x % base)\n        x = int(x / base)\n\
    \    digits.reverse()\n    return ''.join(str(d) for d in digits)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError(\"Base must be between\
    \ 2 and 36\")\n    if base == 10:\n        return str(x)\n    digits = []\n  \
    \  while x:\n        digits.append(str(x % base))\n        x = int(x / base)\n\
    \    digits.reverse()\n    return ''.join(digits)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError(\"Base must be between\
    \ 2 and 36\")\n    if base == 10:\n        return str(x)\n    digits = []\n  \
    \  while x:\n        digits.append(str(x % base))\n        x = x // base\n   \
    \ if digits[-1] == '0':\n        digits = digits[:-1]\n    return ''.join(reversed(digits))\n\
    \n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError(\"Base must be between\
    \ 2 and 36\")\n    if base == 10:\n        return str(x)\n    digits = []\n  \
    \  while x != 0:\n        digits.append(x % base)\n        x = int(x / base)\n\
    \    digits.reverse()\n    return str(digits)\n\n\ndef check(candidate):\n   \
    \ assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert\
    \ candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n  \
    \  assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n   \
    \ assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkso_fi1i.py\"\
    , line 35, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkso_fi1i.py\"\
    , line 33, in test_check\n    check(change_base)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkso_fi1i.py\"\
    , line 19, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError(\"Base must be between\
    \ 2 and 36\")\n    if base == 10:\n        return str(x)\n    digits = []\n  \
    \  while x:\n        digits.append(str(x % base))\n        x = int(x / base)\n\
    \    if digits[-1] == '0':\n        digits = digits[:-1]\n    return ''.join(reversed(digits))\n\
    \n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n                \"\"\"\n  \
    \  if base < 2 or base > 36:\n        raise ValueError(\"Base must be between\
    \ 2 and 36\")\n    if base == 10:\n        return str(x)\n    digits = []\n  \
    \  while x:\n        digits.append(str(x % base))\n        x = int(x / base)\n\
    \    if digits[-1] == '0':\n        digits = digits[:-1]\n    return ''.join(reversed(digits))\n\
    \n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
