name: HumanEval_12_longest
language: py
results:
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    else:\n        return max(strings, key=len)\n\
    \ndef check(candidate):\n    assert candidate([]) == None\n    assert candidate(['x',\
    \ 'y', 'z']) == 'x'\n    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk',\
    \ 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    longest_string = strings[0]\n    for string\
    \ in strings:\n        if len(string) > len(longest_string):\n            longest_string\
    \ = string\n    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    elif len(strings) == 1:\n        return strings[0]\n\
    \    else:\n        return max(strings, key=len)\n\ndef check(candidate):\n  \
    \  assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n\
    \    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\n\
    def test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    longest_string = strings[0]\n    for string\
    \ in strings[1:]:\n        if len(string) > len(longest_string):\n           \
    \ longest_string = string\n    return longest_string\n\ndef check(candidate):\n\
    \    assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n\
    \    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\n\
    def test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    elif len(strings) == 1:\n        return strings[0]\n\
    \    else:\n        return max(strings, key=len)\n\ndef check(candidate):\n  \
    \  assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n\
    \    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\n\
    def test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    else:\n        return max(strings, key=len)\n\
    \ndef check(candidate):\n    assert candidate([]) == None\n    assert candidate(['x',\
    \ 'y', 'z']) == 'x'\n    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk',\
    \ 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    else:\n        return max(strings, key=len)\n\
    \ndef check(candidate):\n    assert candidate([]) == None\n    assert candidate(['x',\
    \ 'y', 'z']) == 'x'\n    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk',\
    \ 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    elif len(strings) == 1:\n        return strings[0]\n\
    \    else:\n        return max(strings, key=len)\n\ndef check(candidate):\n  \
    \  assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n\
    \    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\n\
    def test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    else:\n        return max(strings, key=len)\n\
    \ndef check(candidate):\n    assert candidate([]) == None\n    assert candidate(['x',\
    \ 'y', 'z']) == 'x'\n    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk',\
    \ 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    else:\n        return max(strings, key=len)\n\
    \ndef check(candidate):\n    assert candidate([]) == None\n    assert candidate(['x',\
    \ 'y', 'z']) == 'x'\n    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk',\
    \ 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    return max(strings, key=len)\n\ndef check(candidate):\n\
    \    assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n\
    \    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\n\
    def test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    longest_string = strings[0]\n    for string\
    \ in strings[1:]:\n        if len(string) > len(longest_string):\n           \
    \ longest_string = string\n    return longest_string\n\ndef check(candidate):\n\
    \    assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n\
    \    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\n\
    def test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    else:\n        return max(strings, key=len)\n\
    \ndef check(candidate):\n    assert candidate([]) == None\n    assert candidate(['x',\
    \ 'y', 'z']) == 'x'\n    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk',\
    \ 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    return max(strings, key=len)\n\ndef check(candidate):\n\
    \    assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n\
    \    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\n\
    def test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    longest_string = strings[0]\n    for string\
    \ in strings[1:]:\n        if len(string) > len(longest_string):\n           \
    \ longest_string = string\n    return longest_string\n\ndef check(candidate):\n\
    \    assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n\
    \    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\n\
    def test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    return max(strings, key=len)\n\ndef check(candidate):\n\
    \    assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n\
    \    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\n\
    def test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    else:\n        return max(strings, key=len)\n\
    \ndef check(candidate):\n    assert candidate([]) == None\n    assert candidate(['x',\
    \ 'y', 'z']) == 'x'\n    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk',\
    \ 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    elif len(strings) == 1:\n        return strings[0]\n\
    \    else:\n        return max(strings, key=len)\n\ndef check(candidate):\n  \
    \  assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n\
    \    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\n\
    def test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    longest_string = max(strings, key=len)\n   \
    \ longest_string_length = len(longest_string)\n    longest_string_index = 0\n\
    \    for index, string in enumerate(strings):\n        if longest_string_length\
    \ == len(string):\n            longest_string_index = index\n        elif longest_string_length\
    \ < len(string):\n            longest_string_index = index\n            longest_string_length\
    \ = len(string)\n    return longest_strings[longest_string_index]\n\ndef check(candidate):\n\
    \    assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n\
    \    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\n\
    def test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_kduxqhr.py\"\
    , line 28, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_kduxqhr.py\"\
    , line 26, in test_check\n    check(longest)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_kduxqhr.py\"\
    , line 22, in check\n    assert candidate(['x', 'y', 'z']) == 'x'\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_kduxqhr.py\"\
    , line 18, in longest\n    return longest_strings[longest_string_index]\nNameError:\
    \ name 'longest_strings' is not defined. Did you mean: 'longest_string'?\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    elif len(strings) == 1:\n        return strings[0]\n\
    \    else:\n        return max(strings, key=len)\n\ndef check(candidate):\n  \
    \  assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n\
    \    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\n\
    def test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    return max(strings, key=len)\n\ndef check(candidate):\n\
    \    assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n\
    \    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\n\
    def test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    elif len(strings) == 1:\n        return strings[0]\n\
    \    else:\n        max_length = max([len(s) for s in strings])\n        return\
    \ strings[max_length]\n\ndef check(candidate):\n    assert candidate([]) == None\n\
    \    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x', 'yyy',\
    \ 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmposh18ahx.py\"\
    , line 23, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmposh18ahx.py\"\
    , line 21, in test_check\n    check(longest)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmposh18ahx.py\"\
    , line 17, in check\n    assert candidate(['x', 'y', 'z']) == 'x'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    elif len(strings) == 1:\n        return strings[0]\n\
    \    else:\n        return max(strings, key=len)\n\ndef check(candidate):\n  \
    \  assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n\
    \    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\n\
    def test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    longest_string = max(strings, key=len)\n   \
    \ longest_string_index = 0\n    for i in range(len(strings)):\n        if strings[i].startswith(longest_string):\n\
    \            longest_string_index = i\n    return longest_string\n\ndef check(candidate):\n\
    \    assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n\
    \    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\n\
    def test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    else:\n        return max(strings, key=len)\n\
    \ndef check(candidate):\n    assert candidate([]) == None\n    assert candidate(['x',\
    \ 'y', 'z']) == 'x'\n    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk',\
    \ 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    longest_string = max(strings, key=len)\n   \
    \ longest_string_length = len(longest_string)\n    longest_string_with_length\
    \ = longest_string + f\" ({longest_string_length})\"\n    longest_string_with_length_and_index\
    \ = longest_string_with_length + f\" ({strings.index(longest_string)})\"\n   \
    \ return longest_string_with_length_and_index\n\ndef check(candidate):\n    assert\
    \ candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert\
    \ candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n\
    \    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzvbp7iog.py\"\
    , line 23, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzvbp7iog.py\"\
    , line 21, in test_check\n    check(longest)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzvbp7iog.py\"\
    , line 17, in check\n    assert candidate(['x', 'y', 'z']) == 'x'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    longest_string = strings[0]\n    for string\
    \ in strings[1:]:\n        if len(string) > len(longest_string):\n           \
    \ longest_string = string\n    return longest_string\n\ndef check(candidate):\n\
    \    assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n\
    \    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\n\
    def test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    elif len(strings) == 1:\n        return strings[0]\n\
    \    else:\n        return max(strings, key=len)\n\ndef check(candidate):\n  \
    \  assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n\
    \    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\n\
    def test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    elif len(strings) == 1:\n        return strings[0]\n\
    \    else:\n        return max(strings, key=len)\n\ndef check(candidate):\n  \
    \  assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n\
    \    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\n\
    def test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    elif len(strings) == 1:\n        return strings[0]\n\
    \    else:\n        return max(strings, key=len)\n\ndef check(candidate):\n  \
    \  assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n\
    \    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\n\
    def test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    else:\n        return max(strings, key=len)\n\
    \ndef check(candidate):\n    assert candidate([]) == None\n    assert candidate(['x',\
    \ 'y', 'z']) == 'x'\n    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk',\
    \ 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    elif len(strings) == 1:\n        return strings[0]\n\
    \    else:\n        return max(strings, key=len)\n\ndef check(candidate):\n  \
    \  assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n\
    \    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\n\
    def test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    elif len(strings) == 1:\n        return strings[0]\n\
    \    else:\n        return max(strings, key=len)\n\ndef check(candidate):\n  \
    \  assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n\
    \    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\n\
    def test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    longest_string = strings[0]\n    for string\
    \ in strings[1:]:\n        if len(string) > len(longest_string):\n           \
    \ longest_string = string\n    return longest_string\n\ndef check(candidate):\n\
    \    assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n\
    \    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\n\
    def test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    longest_string = max(strings, key=len)\n   \
    \ return longest_string\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    elif len(strings) == 1:\n        return strings[0]\n\
    \    else:\n        return max(strings, key=len)\n\ndef check(candidate):\n  \
    \  assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n\
    \    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\n\
    def test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    else:\n        return max(strings, key=len)\n\
    \ndef check(candidate):\n    assert candidate([]) == None\n    assert candidate(['x',\
    \ 'y', 'z']) == 'x'\n    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk',\
    \ 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    else:\n        return max(strings, key=len)\n\
    \ndef check(candidate):\n    assert candidate([]) == None\n    assert candidate(['x',\
    \ 'y', 'z']) == 'x'\n    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk',\
    \ 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    longest_string = strings[0]\n    for string\
    \ in strings[1:]:\n        if len(string) > len(longest_string):\n           \
    \ longest_string = string\n    return longest_string\n\ndef check(candidate):\n\
    \    assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n\
    \    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\n\
    def test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    if len(strings) == 1:\n        return strings[0]\n\
    \    max_length = max([len(s) for s in strings])\n    return strings[max_length]\n\
    \ndef check(candidate):\n    assert candidate([]) == None\n    assert candidate(['x',\
    \ 'y', 'z']) == 'x'\n    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk',\
    \ 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptszqegdq.py\"\
    , line 22, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptszqegdq.py\"\
    , line 20, in test_check\n    check(longest)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptszqegdq.py\"\
    , line 16, in check\n    assert candidate(['x', 'y', 'z']) == 'x'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    longest_string = strings[0]\n    for string\
    \ in strings[1:]:\n        if len(string) > len(longest_string):\n           \
    \ longest_string = string\n    return longest_string\n\ndef check(candidate):\n\
    \    assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n\
    \    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\n\
    def test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = max(strings, key=len)\n    return longest_string\n\
    \ndef check(candidate):\n    assert candidate([]) == None\n    assert candidate(['x',\
    \ 'y', 'z']) == 'x'\n    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk',\
    \ 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    else:\n        return max(strings, key=len)\n\
    \ndef check(candidate):\n    assert candidate([]) == None\n    assert candidate(['x',\
    \ 'y', 'z']) == 'x'\n    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk',\
    \ 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    longest_string = strings[0]\n    for string\
    \ in strings:\n        if len(string) > len(longest_string):\n            longest_string\
    \ = string\n    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    return max(strings, key=len)\n\ndef check(candidate):\n\
    \    assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n\
    \    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\n\
    def test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    else:\n        return max(strings, key=len)\n\
    \ndef check(candidate):\n    assert candidate([]) == None\n    assert candidate(['x',\
    \ 'y', 'z']) == 'x'\n    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk',\
    \ 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    else:\n        return max(strings, key=len)\n\
    \ndef check(candidate):\n    assert candidate([]) == None\n    assert candidate(['x',\
    \ 'y', 'z']) == 'x'\n    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk',\
    \ 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    else:\n        return max(strings, key=len)\n\
    \ndef check(candidate):\n    assert candidate([]) == None\n    assert candidate(['x',\
    \ 'y', 'z']) == 'x'\n    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk',\
    \ 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    elif len(strings) == 1:\n        return strings[0]\n\
    \    else:\n        return max(strings, key=len)\n\ndef check(candidate):\n  \
    \  assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n\
    \    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\n\
    def test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    longest_string = strings[0]\n    for string\
    \ in strings[1:]:\n        if len(string) > len(longest_string):\n           \
    \ longest_string = string\n    return longest_string\n\ndef check(candidate):\n\
    \    assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n\
    \    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\n\
    def test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    longest_string = max(strings, key=len)\n   \
    \ return longest_string\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    longest_string = strings[0]\n    for string\
    \ in strings[1:]:\n        if len(string) > len(longest_string):\n           \
    \ longest_string = string\n    return longest_string\n\ndef check(candidate):\n\
    \    assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n\
    \    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\n\
    def test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    elif len(strings) == 1:\n        return strings[0]\n\
    \    else:\n        max_length = max([len(s) for s in strings])\n        return\
    \ strings[max_length]\n\ndef check(candidate):\n    assert candidate([]) == None\n\
    \    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x', 'yyy',\
    \ 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpoo5cd2jb.py\"\
    , line 23, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpoo5cd2jb.py\"\
    , line 21, in test_check\n    check(longest)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpoo5cd2jb.py\"\
    , line 17, in check\n    assert candidate(['x', 'y', 'z']) == 'x'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = max(strings, key=len)\n    return longest_string\n\
    \ndef check(candidate):\n    assert candidate([]) == None\n    assert candidate(['x',\
    \ 'y', 'z']) == 'x'\n    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk',\
    \ 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    elif len(strings) == 1:\n        return strings[0]\n\
    \    else:\n        return max(strings, key=len)\n\ndef check(candidate):\n  \
    \  assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n\
    \    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\n\
    def test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    longest_string = strings[0]\n    for string\
    \ in strings:\n        if len(string) > len(longest_string):\n            longest_string\
    \ = string\n    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    longest_string = max(strings, key=len)\n   \
    \ return longest_string\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    else:\n        return max(strings, key=len)\n\
    \ndef check(candidate):\n    assert candidate([]) == None\n    assert candidate(['x',\
    \ 'y', 'z']) == 'x'\n    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk',\
    \ 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    if len(strings) == 1:\n        return strings[0]\n\
    \    max_length = max([len(s) for s in strings])\n    return strings[max_length]\n\
    \ndef check(candidate):\n    assert candidate([]) == None\n    assert candidate(['x',\
    \ 'y', 'z']) == 'x'\n    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk',\
    \ 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9_obo11j.py\"\
    , line 22, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9_obo11j.py\"\
    , line 20, in test_check\n    check(longest)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9_obo11j.py\"\
    , line 16, in check\n    assert candidate(['x', 'y', 'z']) == 'x'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    longest_string = strings[0]\n    for string\
    \ in strings:\n        if len(string) > len(longest_string):\n            longest_string\
    \ = string\n    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    else:\n        return max(strings, key=len)\n\
    \ndef check(candidate):\n    assert candidate([]) == None\n    assert candidate(['x',\
    \ 'y', 'z']) == 'x'\n    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk',\
    \ 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    longest_string = strings[0]\n    for string\
    \ in strings[1:]:\n        if len(string) > len(longest_string):\n           \
    \ longest_string = string\n    return longest_string\n\ndef check(candidate):\n\
    \    assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n\
    \    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\n\
    def test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    elif len(strings) == 1:\n        return strings[0]\n\
    \    else:\n        return max(strings, key=len)\n\ndef check(candidate):\n  \
    \  assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n\
    \    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\n\
    def test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    else:\n        return max(strings, key=len)\n\
    \ndef check(candidate):\n    assert candidate([]) == None\n    assert candidate(['x',\
    \ 'y', 'z']) == 'x'\n    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk',\
    \ 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    else:\n        return max(strings, key=len)\n\
    \ndef check(candidate):\n    assert candidate([]) == None\n    assert candidate(['x',\
    \ 'y', 'z']) == 'x'\n    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk',\
    \ 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    return max(strings, key=len)\n\ndef check(candidate):\n\
    \    assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n\
    \    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\n\
    def test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    else:\n        return max(strings, key=len)\n\
    \ndef check(candidate):\n    assert candidate([]) == None\n    assert candidate(['x',\
    \ 'y', 'z']) == 'x'\n    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk',\
    \ 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    elif len(strings) == 1:\n        return strings[0]\n\
    \    else:\n        return max(strings, key=len)\n\ndef check(candidate):\n  \
    \  assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n\
    \    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\n\
    def test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    longest_string = max(strings, key=len)\n   \
    \ longest_string_index = strings.index(longest_string)\n    if longest_string_index\
    \ == 0:\n        return longest_string\n    else:\n        return strings[longest_string_index\
    \ - 1]\n\ndef check(candidate):\n    assert candidate([]) == None\n    assert\
    \ candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x', 'yyy', 'zzzz',\
    \ 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvxsyyw4u.py\"\
    , line 24, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvxsyyw4u.py\"\
    , line 22, in test_check\n    check(longest)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvxsyyw4u.py\"\
    , line 19, in check\n    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk',\
    \ 'abc']) == 'zzzz'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    longest_string = strings[0]\n    for string\
    \ in strings[1:]:\n        if len(string) > len(longest_string):\n           \
    \ longest_string = string\n    return longest_string\n\ndef check(candidate):\n\
    \    assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n\
    \    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\n\
    def test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    if len(strings) == 1:\n        return strings[0]\n\
    \    max_length = max([len(s) for s in strings])\n    return strings[max_length]\n\
    \ndef check(candidate):\n    assert candidate([]) == None\n    assert candidate(['x',\
    \ 'y', 'z']) == 'x'\n    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk',\
    \ 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1bbqj6nc.py\"\
    , line 22, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1bbqj6nc.py\"\
    , line 20, in test_check\n    check(longest)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1bbqj6nc.py\"\
    , line 16, in check\n    assert candidate(['x', 'y', 'z']) == 'x'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    longest_string = strings[0]\n    for string\
    \ in strings:\n        if len(string) > len(longest_string):\n            longest_string\
    \ = string\n    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    return max(strings, key=len)\n\ndef check(candidate):\n\
    \    assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n\
    \    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\n\
    def test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    else:\n        return max(strings, key=len)\n\
    \ndef check(candidate):\n    assert candidate([]) == None\n    assert candidate(['x',\
    \ 'y', 'z']) == 'x'\n    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk',\
    \ 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    else:\n        return max(strings, key=len)\n\
    \ndef check(candidate):\n    assert candidate([]) == None\n    assert candidate(['x',\
    \ 'y', 'z']) == 'x'\n    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk',\
    \ 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    elif len(strings) == 1:\n        return strings[0]\n\
    \    else:\n        return max(strings, key=len)\n\ndef check(candidate):\n  \
    \  assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n\
    \    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\n\
    def test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    longest_string = strings[0]\n    for string\
    \ in strings[1:]:\n        if len(string) > len(longest_string):\n           \
    \ longest_string = string\n    return longest_string\n\ndef check(candidate):\n\
    \    assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n\
    \    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\n\
    def test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    return max(strings, key=len)\n\ndef check(candidate):\n\
    \    assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n\
    \    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\n\
    def test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    longest_string = max(strings, key=len)\n   \
    \ return longest_string\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    longest_string = max(strings, key=len)\n   \
    \ return longest_string\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    elif len(strings) == 1:\n        return strings[0]\n\
    \    else:\n        return max(strings, key=len)\n\ndef check(candidate):\n  \
    \  assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n\
    \    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\n\
    def test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    elif len(strings) == 1:\n        return strings[0]\n\
    \    else:\n        return max(strings, key=len)\n\ndef check(candidate):\n  \
    \  assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n\
    \    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\n\
    def test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    elif len(strings) == 1:\n        return strings[0]\n\
    \    else:\n        max_length = 0\n        max_length_str = None\n        for\
    \ s in strings:\n            if len(s) > max_length:\n                max_length\
    \ = len(s)\n                max_length_str = s\n        return max_length_str\n\
    \ndef check(candidate):\n    assert candidate([]) == None\n    assert candidate(['x',\
    \ 'y', 'z']) == 'x'\n    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk',\
    \ 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    elif len(strings) == 1:\n        return strings[0]\n\
    \    else:\n        return max(strings, key=len)\n\ndef check(candidate):\n  \
    \  assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n\
    \    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\n\
    def test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    return max(strings, key=len)\n\ndef check(candidate):\n\
    \    assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n\
    \    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\n\
    def test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    longest_string = max(strings, key=len)\n   \
    \ return longest_string\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    elif len(strings) == 1:\n        return strings[0]\n\
    \    else:\n        return max(strings, key=len)\n\ndef check(candidate):\n  \
    \  assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n\
    \    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\n\
    def test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    else:\n        return max(strings, key=len)\n\
    \ndef check(candidate):\n    assert candidate([]) == None\n    assert candidate(['x',\
    \ 'y', 'z']) == 'x'\n    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk',\
    \ 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    longest_string = max(strings, key=len)\n   \
    \ return longest_string\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    longest_string = max(strings, key=len)\n   \
    \ return longest_string\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    elif len(strings) == 1:\n        return strings[0]\n\
    \    else:\n        return max(strings, key=len)\n\ndef check(candidate):\n  \
    \  assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n\
    \    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\n\
    def test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    if len(strings) == 1:\n        return strings[0]\n\
    \    max_length = max([len(s) for s in strings])\n    return strings[max_length]\n\
    \ndef check(candidate):\n    assert candidate([]) == None\n    assert candidate(['x',\
    \ 'y', 'z']) == 'x'\n    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk',\
    \ 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpna_0pz2a.py\"\
    , line 22, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpna_0pz2a.py\"\
    , line 20, in test_check\n    check(longest)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpna_0pz2a.py\"\
    , line 16, in check\n    assert candidate(['x', 'y', 'z']) == 'x'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    longest_string = strings[0]\n    for string\
    \ in strings:\n        if len(string) > len(longest_string):\n            longest_string\
    \ = string\n    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    else:\n        return max(strings, key=len)\n\
    \ndef check(candidate):\n    assert candidate([]) == None\n    assert candidate(['x',\
    \ 'y', 'z']) == 'x'\n    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk',\
    \ 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    elif len(strings) == 1:\n        return strings[0]\n\
    \    else:\n        return max(strings, key=len)\n\ndef check(candidate):\n  \
    \  assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n\
    \    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\n\
    def test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    elif len(strings) == 1:\n        return strings[0]\n\
    \    else:\n        return max(strings, key=len)\n\ndef check(candidate):\n  \
    \  assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n\
    \    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\n\
    def test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    if len(strings) == 1:\n        return strings[0]\n\
    \    max_length = max([len(s) for s in strings])\n    return strings[max_length]\n\
    \ndef check(candidate):\n    assert candidate([]) == None\n    assert candidate(['x',\
    \ 'y', 'z']) == 'x'\n    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk',\
    \ 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu7g5skvd.py\"\
    , line 22, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu7g5skvd.py\"\
    , line 20, in test_check\n    check(longest)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu7g5skvd.py\"\
    , line 16, in check\n    assert candidate(['x', 'y', 'z']) == 'x'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    longest_string = strings[0]\n    for string\
    \ in strings[1:]:\n        if len(string) > len(longest_string):\n           \
    \ longest_string = string\n    return longest_string\n\ndef check(candidate):\n\
    \    assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n\
    \    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\n\
    def test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    else:\n        return max(strings, key=len)\n\
    \ndef check(candidate):\n    assert candidate([]) == None\n    assert candidate(['x',\
    \ 'y', 'z']) == 'x'\n    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk',\
    \ 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    elif len(strings) == 1:\n        return strings[0]\n\
    \    else:\n        return max(strings, key=len)\n\ndef check(candidate):\n  \
    \  assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n\
    \    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\n\
    def test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    else:\n        return max(strings, key=len)\n\
    \ndef check(candidate):\n    assert candidate([]) == None\n    assert candidate(['x',\
    \ 'y', 'z']) == 'x'\n    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk',\
    \ 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    longest_string = max(strings, key=len)\n   \
    \ longest_string_length = len(longest_string)\n    for string in strings:\n  \
    \      if len(string) == longest_string_length:\n            return longest_string\n\
    \    return None\n\ndef check(candidate):\n    assert candidate([]) == None\n\
    \    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x', 'yyy',\
    \ 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = max(strings, key=len)\n    longest_string_length\
    \ = len(longest_string)\n    longest_string_length_index = longest_string.rfind(\"\
    \ \")\n    if longest_string_length_index != -1:\n        longest_string_length\
    \ = longest_string[longest_string_length_index + 1:]\n    return longest_string\n\
    \ndef check(candidate):\n    assert candidate([]) == None\n    assert candidate(['x',\
    \ 'y', 'z']) == 'x'\n    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk',\
    \ 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    else:\n        return max(strings, key=len)\n\
    \ndef check(candidate):\n    assert candidate([]) == None\n    assert candidate(['x',\
    \ 'y', 'z']) == 'x'\n    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk',\
    \ 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    else:\n        return max(strings, key=len)\n\
    \ndef check(candidate):\n    assert candidate([]) == None\n    assert candidate(['x',\
    \ 'y', 'z']) == 'x'\n    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk',\
    \ 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    longest_string = strings[0]\n    for string\
    \ in strings:\n        if len(string) > len(longest_string):\n            longest_string\
    \ = string\n    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    elif len(strings) == 1:\n        return strings[0]\n\
    \    else:\n        return max(strings, key=len)\n\ndef check(candidate):\n  \
    \  assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n\
    \    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\n\
    def test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    else:\n        return max(strings, key=len)\n\
    \ndef check(candidate):\n    assert candidate([]) == None\n    assert candidate(['x',\
    \ 'y', 'z']) == 'x'\n    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk',\
    \ 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    else:\n        return max(strings, key=len)\n\
    \ndef check(candidate):\n    assert candidate([]) == None\n    assert candidate(['x',\
    \ 'y', 'z']) == 'x'\n    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk',\
    \ 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    else:\n        return max(strings, key=len)\n\
    \ndef check(candidate):\n    assert candidate([]) == None\n    assert candidate(['x',\
    \ 'y', 'z']) == 'x'\n    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk',\
    \ 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    longest_string = max(strings, key=len)\n   \
    \ longest_string_length = len(longest_string)\n    longest_string_with_length\
    \ = longest_string + f\" ({longest_string_length})\"\n    longest_string_with_length_and_index\
    \ = longest_string_with_length + f\" ({len(strings) - strings.index(longest_string)})\"\
    \n    if len(strings) == 1:\n        return longest_string\n    elif longest_string_length\
    \ == len(strings[0]):\n        return longest_string\n    else:\n        return\
    \ longest_string_with_length\n\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc7qixxfr.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc7qixxfr.py\"\
    , line 27, in test_check\n    check(longest)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc7qixxfr.py\"\
    , line 24, in check\n    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk',\
    \ 'abc']) == 'zzzz'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    elif len(strings) == 1:\n        return strings[0]\n\
    \    else:\n        return max(strings, key=len)\n\ndef check(candidate):\n  \
    \  assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n\
    \    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\n\
    def test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = max(strings, key=len)\n    return longest_string\n\
    \ndef check(candidate):\n    assert candidate([]) == None\n    assert candidate(['x',\
    \ 'y', 'z']) == 'x'\n    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk',\
    \ 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    else:\n        return max(strings, key=len)\n\
    \ndef check(candidate):\n    assert candidate([]) == None\n    assert candidate(['x',\
    \ 'y', 'z']) == 'x'\n    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk',\
    \ 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    else:\n        return max(strings, key=len)\n\
    \ndef check(candidate):\n    assert candidate([]) == None\n    assert candidate(['x',\
    \ 'y', 'z']) == 'x'\n    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk',\
    \ 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    longest_string = strings[0]\n    for string\
    \ in strings:\n        if len(string) > len(longest_string):\n            longest_string\
    \ = string\n    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    elif len(strings) == 1:\n        return strings[0]\n\
    \    else:\n        return max(strings, key=len)\n\ndef check(candidate):\n  \
    \  assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n\
    \    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\n\
    def test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    else:\n        return max(strings, key=len)\n\
    \ndef check(candidate):\n    assert candidate([]) == None\n    assert candidate(['x',\
    \ 'y', 'z']) == 'x'\n    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk',\
    \ 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    longest_string = strings[0]\n    for string\
    \ in strings:\n        if len(string) > len(longest_string):\n            longest_string\
    \ = string\n    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    elif len(strings) == 1:\n        return strings[0]\n\
    \    else:\n        return max(strings, key=len)\n\ndef check(candidate):\n  \
    \  assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n\
    \    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\n\
    def test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    elif len(strings) == 1:\n        return strings[0]\n\
    \    else:\n        return max(strings, key=len)\n\ndef check(candidate):\n  \
    \  assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n\
    \    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\n\
    def test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    longest_string = max(strings, key=len)\n   \
    \ longest_string_index = strings.index(longest_string)\n    return longest_string\n\
    \ndef check(candidate):\n    assert candidate([]) == None\n    assert candidate(['x',\
    \ 'y', 'z']) == 'x'\n    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk',\
    \ 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    elif len(strings) == 1:\n        return strings[0]\n\
    \    else:\n        return max(strings, key=len)\n\ndef check(candidate):\n  \
    \  assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n\
    \    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\n\
    def test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    return max(strings, key=len)\n\ndef check(candidate):\n\
    \    assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n\
    \    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\n\
    def test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    elif len(strings) == 1:\n        return strings[0]\n\
    \    else:\n        return max(strings, key=len)\n\ndef check(candidate):\n  \
    \  assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n\
    \    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\n\
    def test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    longest_string = strings[0]\n    for string\
    \ in strings[1:]:\n        if len(string) > len(longest_string):\n           \
    \ longest_string = string\n    return longest_string\n\ndef check(candidate):\n\
    \    assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n\
    \    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\n\
    def test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    if len(strings) == 1:\n        return strings[0]\n\
    \    max_length = max([len(s) for s in strings])\n    return strings[max_length]\n\
    \ndef check(candidate):\n    assert candidate([]) == None\n    assert candidate(['x',\
    \ 'y', 'z']) == 'x'\n    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk',\
    \ 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5n76x8nr.py\"\
    , line 22, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5n76x8nr.py\"\
    , line 20, in test_check\n    check(longest)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5n76x8nr.py\"\
    , line 16, in check\n    assert candidate(['x', 'y', 'z']) == 'x'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    else:\n        return max(strings, key=len)\n\
    \ndef check(candidate):\n    assert candidate([]) == None\n    assert candidate(['x',\
    \ 'y', 'z']) == 'x'\n    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk',\
    \ 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    elif len(strings) == 1:\n        return strings[0]\n\
    \    else:\n        max_length = max([len(s) for s in strings])\n        return\
    \ strings[max_length]\n\ndef check(candidate):\n    assert candidate([]) == None\n\
    \    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x', 'yyy',\
    \ 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpiprxcpzr.py\"\
    , line 23, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpiprxcpzr.py\"\
    , line 21, in test_check\n    check(longest)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpiprxcpzr.py\"\
    , line 17, in check\n    assert candidate(['x', 'y', 'z']) == 'x'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    longest_string = strings[0]\n    for string\
    \ in strings[1:]:\n        if len(string) > len(longest_string):\n           \
    \ longest_string = string\n    return longest_string\n\ndef check(candidate):\n\
    \    assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n\
    \    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\n\
    def test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    elif len(strings) == 1:\n        return strings[0]\n\
    \    else:\n        return max(strings, key=len)\n\ndef check(candidate):\n  \
    \  assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n\
    \    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\n\
    def test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    else:\n        return max(strings, key=len)\n\
    \ndef check(candidate):\n    assert candidate([]) == None\n    assert candidate(['x',\
    \ 'y', 'z']) == 'x'\n    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk',\
    \ 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = max(strings, key=len)\n    longest_string_len\
    \ = len(longest_string)\n    for string in strings:\n        if len(string) ==\
    \ longest_string_len:\n            return string\n    return None\n\ndef check(candidate):\n\
    \    assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n\
    \    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\n\
    def test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    longest_string = strings[0]\n    for string\
    \ in strings:\n        if len(string) > len(longest_string):\n            longest_string\
    \ = string\n    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    longest_string = strings[0]\n    for string\
    \ in strings[1:]:\n        if len(string) > len(longest_string):\n           \
    \ longest_string = string\n    return longest_string\n\ndef check(candidate):\n\
    \    assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n\
    \    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\n\
    def test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    elif len(strings) == 1:\n        return strings[0]\n\
    \    else:\n        return max(strings, key=len)\n\ndef check(candidate):\n  \
    \  assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n\
    \    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\n\
    def test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    else:\n        return max(strings, key=len)\n\
    \ndef check(candidate):\n    assert candidate([]) == None\n    assert candidate(['x',\
    \ 'y', 'z']) == 'x'\n    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk',\
    \ 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    else:\n        return max(strings, key=len)\n\
    \ndef check(candidate):\n    assert candidate([]) == None\n    assert candidate(['x',\
    \ 'y', 'z']) == 'x'\n    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk',\
    \ 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    elif len(strings) == 1:\n        return strings[0]\n\
    \    else:\n        return max(strings, key=len)\n\ndef check(candidate):\n  \
    \  assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n\
    \    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\n\
    def test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    longest_string = max(strings, key=len)\n   \
    \ return longest_string\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    elif len(strings) == 1:\n        return strings[0]\n\
    \    else:\n        return max(strings, key=len)\n\ndef check(candidate):\n  \
    \  assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n\
    \    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\n\
    def test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    elif len(strings) == 1:\n        return strings[0]\n\
    \    else:\n        return max(strings, key=len)\n\ndef check(candidate):\n  \
    \  assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n\
    \    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\n\
    def test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    longest_string = max(strings, key=len)\n   \
    \ return longest_string\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    else:\n        return max(strings, key=len)\n\
    \ndef check(candidate):\n    assert candidate([]) == None\n    assert candidate(['x',\
    \ 'y', 'z']) == 'x'\n    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk',\
    \ 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    else:\n        return max(strings, key=len)\n\
    \ndef check(candidate):\n    assert candidate([]) == None\n    assert candidate(['x',\
    \ 'y', 'z']) == 'x'\n    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk',\
    \ 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    elif len(strings) == 1:\n        return strings[0]\n\
    \    else:\n        return max(strings, key=len)\n\ndef check(candidate):\n  \
    \  assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n\
    \    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\n\
    def test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    elif len(strings) == 1:\n        return strings[0]\n\
    \    else:\n        return max(strings, key=len)\n\ndef check(candidate):\n  \
    \  assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n\
    \    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\n\
    def test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = max(strings, key=len)\n    longest_string_length\
    \ = len(longest_string)\n    longest_string_with_spaces = longest_string + ' '\
    \ * (longest_string_length - len(longest_string))\n    longest_string_with_spaces\
    \ = longest_string_with_spaces.strip()\n    return longest_string_with_spaces\n\
    \ndef check(candidate):\n    assert candidate([]) == None\n    assert candidate(['x',\
    \ 'y', 'z']) == 'x'\n    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk',\
    \ 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    else:\n        return max(strings, key=len)\n\
    \ndef check(candidate):\n    assert candidate([]) == None\n    assert candidate(['x',\
    \ 'y', 'z']) == 'x'\n    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk',\
    \ 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    return max(strings, key=len)\n\ndef check(candidate):\n\
    \    assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n\
    \    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\n\
    def test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    else:\n        return max(strings, key=len)\n\
    \ndef check(candidate):\n    assert candidate([]) == None\n    assert candidate(['x',\
    \ 'y', 'z']) == 'x'\n    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk',\
    \ 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    elif len(strings) == 1:\n        return strings[0]\n\
    \    else:\n        return max(strings, key=len)\n\ndef check(candidate):\n  \
    \  assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n\
    \    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\n\
    def test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    elif len(strings) == 1:\n        return strings[0]\n\
    \    else:\n        return max(strings, key=len)\n\ndef check(candidate):\n  \
    \  assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n\
    \    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\n\
    def test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    return max(strings, key=len)\n\ndef check(candidate):\n\
    \    assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n\
    \    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\n\
    def test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    elif len(strings) == 1:\n        return strings[0]\n\
    \    else:\n        return max(strings, key=len)\n\ndef check(candidate):\n  \
    \  assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n\
    \    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\n\
    def test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    elif len(strings) == 1:\n        return strings[0]\n\
    \    else:\n        return max(strings, key=len)\n\ndef check(candidate):\n  \
    \  assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n\
    \    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\n\
    def test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    else:\n        return max(strings, key=len)\n\
    \ndef check(candidate):\n    assert candidate([]) == None\n    assert candidate(['x',\
    \ 'y', 'z']) == 'x'\n    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk',\
    \ 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    elif len(strings) == 1:\n        return strings[0]\n\
    \    else:\n        return max(strings, key=len)\n\ndef check(candidate):\n  \
    \  assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n\
    \    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\n\
    def test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    longest_string = strings[0]\n    for string\
    \ in strings[1:]:\n        if len(string) > len(longest_string):\n           \
    \ longest_string = string\n    return longest_string\n\ndef check(candidate):\n\
    \    assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n\
    \    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\n\
    def test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    if len(strings) == 1:\n        return strings[0]\n\
    \    max_length = 0\n    for s in strings:\n        if len(s) > max_length:\n\
    \            max_length = len(s)\n    return strings[max_length]\n\ndef check(candidate):\n\
    \    assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n\
    \    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\n\
    def test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9s3syeb7.py\"\
    , line 25, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9s3syeb7.py\"\
    , line 23, in test_check\n    check(longest)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9s3syeb7.py\"\
    , line 19, in check\n    assert candidate(['x', 'y', 'z']) == 'x'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    elif len(strings) == 1:\n        return strings[0]\n\
    \    else:\n        return max(strings, key=len)\n\ndef check(candidate):\n  \
    \  assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n\
    \    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\n\
    def test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    if len(strings) == 1:\n        return strings[0]\n\
    \    max_length = 0\n    max_length_str = None\n    for s in strings:\n      \
    \  if len(s) > max_length:\n            max_length = len(s)\n            max_length_str\
    \ = s\n    if max_length == 0:\n        return None\n    return max_length_str\n\
    \ndef check(candidate):\n    assert candidate([]) == None\n    assert candidate(['x',\
    \ 'y', 'z']) == 'x'\n    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk',\
    \ 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    elif len(strings) == 1:\n        return strings[0]\n\
    \    else:\n        return max(strings, key=len)\n\ndef check(candidate):\n  \
    \  assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n\
    \    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\n\
    def test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    else:\n        return max(strings, key=len)\n\
    \ndef check(candidate):\n    assert candidate([]) == None\n    assert candidate(['x',\
    \ 'y', 'z']) == 'x'\n    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk',\
    \ 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    elif len(strings) == 1:\n        return strings[0]\n\
    \    else:\n        return max(strings, key=len)\n\ndef check(candidate):\n  \
    \  assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n\
    \    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\n\
    def test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    else:\n        return max(strings, key=len)\n\
    \ndef check(candidate):\n    assert candidate([]) == None\n    assert candidate(['x',\
    \ 'y', 'z']) == 'x'\n    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk',\
    \ 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    elif len(strings) == 1:\n        return strings[0]\n\
    \    else:\n        return max(strings, key=len)\n\ndef check(candidate):\n  \
    \  assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n\
    \    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\n\
    def test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    elif len(strings) == 1:\n        return strings[0]\n\
    \    else:\n        return max(strings, key=len)\n\ndef check(candidate):\n  \
    \  assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n\
    \    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\n\
    def test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    elif len(strings) == 1:\n        return strings[0]\n\
    \    else:\n        return max(strings, key=len)\n\ndef check(candidate):\n  \
    \  assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n\
    \    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\n\
    def test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest = strings[0]\n    for s in strings[1:]:\n  \
    \      if len(s) > len(longest):\n            longest = s\n    return longest\n\
    \ndef check(candidate):\n    assert candidate([]) == None\n    assert candidate(['x',\
    \ 'y', 'z']) == 'x'\n    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk',\
    \ 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    elif len(strings) == 1:\n        return strings[0]\n\
    \    else:\n        return max(strings, key=len)\n\ndef check(candidate):\n  \
    \  assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n\
    \    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\n\
    def test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    longest_string = strings[0]\n    for string\
    \ in strings[1:]:\n        if len(string) > len(longest_string):\n           \
    \ longest_string = string\n    return longest_string\n\ndef check(candidate):\n\
    \    assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n\
    \    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\n\
    def test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    longest_string = strings[0]\n    for string\
    \ in strings:\n        if len(string) > len(longest_string):\n            longest_string\
    \ = string\n    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    if len(strings) == 1:\n        return strings[0]\n\
    \    max_length = max([len(s) for s in strings])\n    return strings[max_length]\n\
    \ndef check(candidate):\n    assert candidate([]) == None\n    assert candidate(['x',\
    \ 'y', 'z']) == 'x'\n    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk',\
    \ 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdkerp9ac.py\"\
    , line 22, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdkerp9ac.py\"\
    , line 20, in test_check\n    check(longest)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdkerp9ac.py\"\
    , line 16, in check\n    assert candidate(['x', 'y', 'z']) == 'x'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    else:\n        return max(strings, key=len)\n\
    \ndef check(candidate):\n    assert candidate([]) == None\n    assert candidate(['x',\
    \ 'y', 'z']) == 'x'\n    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk',\
    \ 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    return max(strings, key=len)\n\ndef check(candidate):\n\
    \    assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n\
    \    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\n\
    def test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    return max(strings, key=len)\n\ndef check(candidate):\n\
    \    assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n\
    \    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\n\
    def test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    elif len(strings) == 1:\n        return strings[0]\n\
    \    else:\n        return max(strings, key=len)\n\ndef check(candidate):\n  \
    \  assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n\
    \    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\n\
    def test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    else:\n        return max(strings, key=len)\n\
    \ndef check(candidate):\n    assert candidate([]) == None\n    assert candidate(['x',\
    \ 'y', 'z']) == 'x'\n    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk',\
    \ 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    return max(strings, key=len)\n\ndef check(candidate):\n\
    \    assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n\
    \    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\n\
    def test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    longest_string = max(strings, key=len)\n   \
    \ return longest_string\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    elif len(strings) == 1:\n        return strings[0]\n\
    \    else:\n        max_length = max([len(s) for s in strings])\n        return\
    \ strings[max_length]\n\ndef check(candidate):\n    assert candidate([]) == None\n\
    \    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x', 'yyy',\
    \ 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjxinphd7.py\"\
    , line 23, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjxinphd7.py\"\
    , line 21, in test_check\n    check(longest)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjxinphd7.py\"\
    , line 17, in check\n    assert candidate(['x', 'y', 'z']) == 'x'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    else:\n        return max(strings, key=len)\n\
    \ndef check(candidate):\n    assert candidate([]) == None\n    assert candidate(['x',\
    \ 'y', 'z']) == 'x'\n    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk',\
    \ 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    elif len(strings) == 1:\n        return strings[0]\n\
    \    else:\n        max_length = max([len(s) for s in strings])\n        return\
    \ strings[max_length]\n\ndef check(candidate):\n    assert candidate([]) == None\n\
    \    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x', 'yyy',\
    \ 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdffmpgw6.py\"\
    , line 23, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdffmpgw6.py\"\
    , line 21, in test_check\n    check(longest)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdffmpgw6.py\"\
    , line 17, in check\n    assert candidate(['x', 'y', 'z']) == 'x'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    longest_string = strings[0]\n    for string\
    \ in strings[1:]:\n        if len(string) > len(longest_string):\n           \
    \ longest_string = string\n    return longest_string\n\ndef check(candidate):\n\
    \    assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n\
    \    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\n\
    def test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = max(strings, key=len)\n    return longest_string\n\
    \ndef check(candidate):\n    assert candidate([]) == None\n    assert candidate(['x',\
    \ 'y', 'z']) == 'x'\n    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk',\
    \ 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    longest_string = max(strings, key=len)\n   \
    \ return longest_string\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    longest_string = max(strings, key=len)\n   \
    \ longest_string_index = strings.index(longest_string)\n    return longest_string\n\
    \ndef check(candidate):\n    assert candidate([]) == None\n    assert candidate(['x',\
    \ 'y', 'z']) == 'x'\n    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk',\
    \ 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    longest_string = max(strings, key=len)\n   \
    \ longest_string_index = strings.index(longest_string)\n    return longest_string\n\
    \ndef check(candidate):\n    assert candidate([]) == None\n    assert candidate(['x',\
    \ 'y', 'z']) == 'x'\n    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk',\
    \ 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    else:\n        return max(strings, key=len)\n\
    \ndef check(candidate):\n    assert candidate([]) == None\n    assert candidate(['x',\
    \ 'y', 'z']) == 'x'\n    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk',\
    \ 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    longest_string = max(strings, key=len)\n   \
    \ return longest_string\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    elif len(strings) == 1:\n        return strings[0]\n\
    \    else:\n        return max(strings, key=len)\n\ndef check(candidate):\n  \
    \  assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n\
    \    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\n\
    def test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    longest_string = max(strings, key=len)\n   \
    \ longest_string_index = strings.index(longest_string)\n    return longest_string\n\
    \ndef check(candidate):\n    assert candidate([]) == None\n    assert candidate(['x',\
    \ 'y', 'z']) == 'x'\n    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk',\
    \ 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    elif len(strings) == 1:\n        return strings[0]\n\
    \    else:\n        return max(strings, key=len)\n\ndef check(candidate):\n  \
    \  assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n\
    \    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\n\
    def test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    else:\n        return max(strings, key=len)\n\
    \ndef check(candidate):\n    assert candidate([]) == None\n    assert candidate(['x',\
    \ 'y', 'z']) == 'x'\n    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk',\
    \ 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    else:\n        return max(strings, key=len)\n\
    \ndef check(candidate):\n    assert candidate([]) == None\n    assert candidate(['x',\
    \ 'y', 'z']) == 'x'\n    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk',\
    \ 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    return max(strings, key=len)\n\ndef check(candidate):\n\
    \    assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n\
    \    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\n\
    def test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    elif len(strings) == 1:\n        return strings[0]\n\
    \    else:\n        return max(strings, key=len)\n\ndef check(candidate):\n  \
    \  assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n\
    \    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\n\
    def test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    else:\n        return max(strings, key=len)\n\
    \ndef check(candidate):\n    assert candidate([]) == None\n    assert candidate(['x',\
    \ 'y', 'z']) == 'x'\n    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk',\
    \ 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    else:\n        return max(strings, key=len)\n\
    \ndef check(candidate):\n    assert candidate([]) == None\n    assert candidate(['x',\
    \ 'y', 'z']) == 'x'\n    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk',\
    \ 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
