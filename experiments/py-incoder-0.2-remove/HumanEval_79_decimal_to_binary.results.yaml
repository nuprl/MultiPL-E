name: HumanEval_79_decimal_to_binary
language: py
results:
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n    >>> decimal_to_binary(0)\n    '0'\n    >>>\
    \ decimal_to_binary(1)\n    '1'\n    >>> decimal_to_binary(10)\n    '1010'\n \
    \   >>> decimal_to_binary(11)\n    '111'\n    >>> decimal_to_binary(12)\n    '1100'\n\
    \    >>> decimal_to_binary(13)\n    '1101'\n    >>> decimal_to_binary(14)\n  \
    \  '1110'\n    >>> decimal_to_binary(15)\n    '1111'\n    >>> decimal_to_binary(16)\n\
    \    '11110'\n    >>> decimal_to_binary(17)\n    '11111'\n    >>> decimal_to_binary(18)\n\
    \    '111110'\n    >>> decimal_to_binary(19)\n    '111111'\n    >>> decimal_to_binary(20)\n\
    \    '1111110'\n    >>> decimal_to_binary(21)\n    '1111111'\n    >>> decimal_to_binary(22)\n\
    \    '11111110'\n    >>> decimal_to_binary(23)\n    '11111111'\n    >>> decimal_to_binary(24)\n\
    \    '111111110'\n    >>> decimal_to_binary(25)\n    '111111111'\n    >>> decimal_to_binary(26)\n\
    \    '1111111110'\n    >>> decimal_to_binary(27)\n    '1111111111'\n    >>> decimal_to_binary(28)\n\
    \    '11111111110'\n    >>> decimal_to_binary(29)\n    '11111111111'\n    >>>\
    \ decimal_to_binary(30)\n    '111111111110'\n    >>> decimal_to_binary(31)\n \
    \   '111111111111'\n    >>> decimal_to_binary(32)\n    '1111111111110'\n    >>>\
    \ decimal_to_binary(33)\n    '1111111111111'\n    >>> decimal_to_binary(34)\n\
    \    '11111111111101'\n    >>> decimal_to_binary(35)\n    '11111111111110'\n \
    \   >>> decimal_to_binary(36)\n    '11111111111111'\n    >>> decimal_to_binary(37)\n\
    \    '111111111111110'\n    >>> decimal_to_binary(38)\n    '111111111111111'\n\
    \    >>> decimal_to_binary(39)\n    '1111111111111110'\n    >>> decimal_to_binary(40)\n\
    \    '1111111111111111'\n    >>> decimal_to_binary(41)\n    '11111111111111110'\n\
    \    >>> decimal_to_binary(42)\n    '11111111111111111'\n    >>> decimal_to_binary(43)\n\
    \    '111111111111111101'\n    >>> decimal_to_binary(44)\n    '111111111111111110'\n\
    \    >>> decimal_to_binary(45)\n    '111111111111111111'\n    >>> decimal_to_binary(46)\n\
    def check(candidate):\n    assert candidate(0) == 'db0db'\n    assert candidate(32)\
    \ == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n    assert candidate(15)\
    \ == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnr0_rmgq.py\"\
    , line 11\n    >>> decimal_to_binary(0)\n    ^^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # Output: '1100'\n            \"\"\"\n            decimal = 12\n           \
    \ binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\ndef check(candidate):\n   \
    \ assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n \
    \   assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpice1t4nv.py\"\
    , line 11\n    decimal = 12\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # Output: '1100'\n            \"\"\"\n            decimal = 12\n           \
    \ binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\ndef check(candidate):\n   \
    \ assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n \
    \   assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd41x1ox3.py\"\
    , line 11\n    decimal = 12\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n    >>> decimal_to_binary(10)\n    '1010'\n \
    \   >>> decimal_to_binary(5)\n    '0101'\n    >>> decimal_to_binary(1)\n    '0001'\n\
    \    >>> decimal_to_binary(0)\n    '0000'\n    >>> decimal_to_binary(-1)\n   \
    \ '1001'\n    >>> decimal_to_binary(-5)\n    '0101'\n    >>> decimal_to_binary(-10)\n\
    \    '1010'\n    >>> decimal_to_binary(-15)\n    '1111'\n    >>> decimal_to_binary(-20)\n\
    \    '1111'\n    >>> decimal_to_binary(-25)\n    '1111'\n    >>> decimal_to_binary(-30)\n\
    \    '1111'\n    >>> decimal_to_binary(-35)\n    '1111'\n    >>> decimal_to_binary(-40)\n\
    \    '1111'\n    >>> decimal_to_binary(-45)\n    '1111'\n    >>> decimal_to_binary(-50)\n\
    \    '1111'\n    >>> decimal_to_binary(-55)\n    '1111'\n    >>> decimal_to_binary(-60)\n\
    \    '1111'\n    >>> decimal_to_binary(-65)\n    '1111'\n    >>> decimal_to_binary(-70)\n\
    \    '1111'\n    >>> decimal_to_binary(-75)\n    '1111'\n    >>> decimal_to_binary(-80)\n\
    \    '1111'\n    >>> decimal_to_binary(-85)\n    '1111'\n    >>> decimal_to_binary(-90)\n\
    \    '1111'\n    >>> decimal_to_binary(-95)\n    '1111'\n    >>> decimal_to_binary(-100)\n\
    \    '1111'\n    >>> decimal_to_binary(-105)\n    '1111'\n    >>> decimal_to_binary(-110)\n\
    \    '1111'\n    >>> decimal_to_binary(-111)\n    '1111'\n    >>> decimal_to_binary(-125)\n\
    \    '1111'\n    >>> decimal_to_binary(-130)\n    '1111'\n    >>> decimal_to_binary(-135)\n\
    \    '1111'\n    >>> decimal_to_binary(-140)\n    '1111'\n    >>> decimal_to_binary(-145)\n\
    \    '1111'\n    >>> decimal_to_binary(-150)\n    '1111'\n    >>> decimal_to_binary(-155)\n\
    \    '1111'\n    >>> decimal_to_binary(-160)\n    '1111'\n    >>> decimal_to_binary(-165)\n\
    \    '1111'\n    >>> decimal_to_binary(-170)\n    '1111'\n    >>> decimal_to_binary(-175)\n\
    \    '1111'\n    >>> decimal_to_binary(-180)\n    '1111'\n    >>> decimal_to_binary(-185)\n\
    \    '1111'\n    >>> decimal_to_binary(-190)\n    '1111'\n    >>> decimal_to_bin\n\
    def check(candidate):\n    assert candidate(0) == 'db0db'\n    assert candidate(32)\
    \ == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n    assert candidate(15)\
    \ == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsdq7smu4.py\"\
    , line 11\n    >>> decimal_to_binary(10)\n    ^^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\ndef check(candidate):\n\
    \    assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n\
    \    assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph95zbjyb.py\"\
    , line 11\n    decimal = 12\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n            Input: decimal = 15\n           \
    \ Output: '1111'\n            Input: decimal = 25\n            Output: '111111'\n\
    \            Input: decimal = 45\n            Output: '1111111'\n            Input:\
    \ decimal = 75\n            Output: '111111110'\n            Input: decimal =\
    \ 125\n            Output: '1111111101'\n            Input: decimal = 255\n  \
    \          Output: '11111111010'\n            Input: decimal = 65535\n       \
    \     Output: '111111110101'\n            Input: decimal = 65536\n           \
    \ Output: '1111111101010'\n            Input: decimal = 65537\n            Output:\
    \ '11111111010100'\n            Input: decimal = 65538\n            Output: '111111110101000'\n\
    \            Input: decimal = 65539\n            Output: '1111111101010000'\n\
    \            Input: decimal = 65536\n            Output: '1111111101010000'\n\
    \            Input: decimal = 65537\n            Output: '11111111010100000'\n\
    \            Input: decimal = 65538\n            Output: '111111110101000000'\n\
    \            Input: decimal = 65539\n            Output: '1111111101010000000'\n\
    \            Input: decimal = 65536\n            Output: '11111111010100000000'\n\
    \            Input: decimal = 65537\n            Output: '111111110101000000000'\n\
    \            Input: decimal = 65538\n            Output: '1111111101010000000000'\n\
    \            Input: decimal = 65539\n            Output: '11111111010100000000000'\n\
    \            Input: decimal = 65536\n            Output: '111111110101000000000000000000'\n\
    \            Input: decimal = 65537\n            Output: '1111111101010000000000000000000'\n\
    \            Input: decimal = 65538\n            Output: '11111111010100000000000000000000'\n\
    \            Input: decimal = 65539\n            Output: '111111110101000000000000000000000'\n\
    \            Input: decimal = 65536\n            Output: '1111111101010000000000000000000000'\n\
    \            Input: decimal = 65537\n            Output: '111111110101000000000000000000000000'\n\
    \            Input: decimal = 65538\n            Output: '1111111101010000000000000000000000000'\n\
    \            Input: decimal = 65539\n            Output: '11111111010100000000000000000000000000'\n\
    \            Input: decimal = 65536\n            Output: '1111111101010000000000000000000000000000'\n\
    \            Input: decimal = 65537\n            Output\ndef check(candidate):\n\
    \    assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n\
    \    assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd8047ult.py\"\
    , line 11\n    Input: decimal = 15\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # Output: '1100'\n            \"\"\"\n            decimal = 12\n           \
    \ binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\ndef check(candidate):\n   \
    \ assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n \
    \   assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpoay35nff.py\"\
    , line 11\n    decimal = 12\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n    >>> decimal_to_binary(0)\n    '0'\n    >>>\
    \ decimal_to_binary(1)\n    '1'\n    >>> decimal_to_binary(2)\n    '10'\n    >>>\
    \ decimal_to_binary(3)\n    '11'\n    >>> decimal_to_binary(4)\n    '100'\n  \
    \  >>> decimal_to_binary(5)\n    '101'\n    >>> decimal_to_binary(6)\n    '110'\n\
    \    >>> decimal_to_binary(7)\n    '111'\n    >>> decimal_to_binary(8)\n    '1000'\n\
    \    >>> decimal_to_binary(9)\n    '1001'\n    >>> decimal_to_binary(10)\n   \
    \ '1010'\n    >>> decimal_to_binary(11)\n    '1011'\n    >>> decimal_to_binary(12)\n\
    \    '1100'\n    >>> decimal_to_binary(13)\n    '1101'\n    >>> decimal_to_binary(14)\n\
    \    '1110'\n    >>> decimal_to_binary(15)\n    '1111'\n    >>> decimal_to_binary(16)\n\
    \    '10000'\n    >>> decimal_to_binary(17)\n    '10001'\n    >>> decimal_to_binary(18)\n\
    \    '10010'\n    >>> decimal_to_binary(19)\n    '10011'\n    >>> decimal_to_binary(20)\n\
    \    '10100'\n    >>> decimal_to_binary(21)\n    '10101'\n    >>> decimal_to_binary(22)\n\
    \    '10110'\n    >>> decimal_to_binary(23)\n    '10111'\n    >>> decimal_to_binary(24)\n\
    \    '11000'\n    >>> decimal_to_binary(25)\n    '11001'\n    >>> decimal_to_binary(26)\n\
    \    '11010'\n    >>> decimal_to_binary(27)\n    '11011'\n    >>> decimal_to_binary(28)\n\
    \    '11100'\n    >>> decimal_to_binary(29)\n    '11101'\n    >>> decimal_to_binary(30)\n\
    \    '11110'\n    >>> decimal_to_binary(31)\n    '11111'\n    >>> decimal_to_binary(32)\n\
    \    '100000'\n    >>> decimal_to_binary(33)\n    '100001'\n    >>> decimal_to_binary(34)\n\
    \    '100010'\n    >>> decimal_to_binary(35)\n    '100011'\n    >>> decimal_to_binary(36)\n\
    \    '100100'\n    >>> decimal_to_binary(37)\n    '100101'\n    >>> decimal_to_binary(38)\n\
    \    '100110'\n    >>> decimal_to_binary(39)\n    '100111'\n    >>> decimal_to_binary(40)\n\
    \    '101000'\n    >>> decimal_to_binary(41)\n    '101001'\n    >>> decimal_to_binary(42)\n\
    \    '101010'\n    >>> decimal_to_binary(\ndef check(candidate):\n    assert candidate(0)\
    \ == 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsns00rv5.py\"\
    , line 11\n    >>> decimal_to_binary(0)\n    ^^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n            Input: decimal = 15\n           \
    \ Output: '1111'\n            Explanation: 15 in binary is 1111\n            \"\
    \"\"\n            Input: decimal = 15\n            Output: '1111'\n          \
    \  Explanation: 15 in binary is 1111\n            \"\"\"\n            Input: decimal\
    \ = 15\n            Output: '1111'\n            Explanation: 15 in binary is 1111\n\
    \            \"\"\"\n            Input: decimal = 15\n            Output: '1111'\n\
    \            Explanation: 15 in binary is 1111\n            \"\"\"\n         \
    \   Input: decimal = 15\n            Output: '1111'\n            Explanation:\
    \ 15 in binary is 1111\n            \"\"\"\n            Input: decimal = 15\n\
    \            Output: '1111'\n            Explanation: 15 in binary is 1111\n \
    \           \"\"\"\n            Input: decimal = 15\n            Output: '1111'\n\
    \            Explanation: 15 in binary is 1111\n            \"\"\"\n         \
    \   Input: decimal = 15\n            Output: '1111'\n            Explanation:\
    \ 15 in binary is 1111\n            \"\"\"\n            Input: decimal = 15\n\
    \            Output: '1111'\n            Explanation: 15 in binary is 1111\n \
    \           \"\"\"\n            Input: decimal = 15\n            Output: '1111'\n\
    \            Explanation: 15 in binary is 1111\n            \"\"\"\n         \
    \   Input: decimal = 15\n            Output: '1111'\n            Explanation:\
    \ 15 in binary is 1111\n            \"\"\"\n            Input: decimal = 15\n\
    \            Output: '1111'\n            Explanation: 15 in binary is 1111\n \
    \           \"\"\"\n            Input: decimal = 15\n            Output: '1111'\n\
    \            Explanation: 15 in binary is 1111\n            \"\"\"\n         \
    \   Input: decimal = 15\n            Output: '1111'\n            Explanation:\
    \ 15 in binary is 1111\n            \"\"\"\n            Input: decimal = 15\n\
    \            Output: '1111'\n            Explanation: 15 in binary is 1111\n \
    \           \"\"\"\n            Input: decimal = 15\n            Output: '1111'\n\
    \            Explanation: 15 in binary is 1111\n            \"\"\"\n         \
    \   Input: decimal = 15\n            Output: '1111'\n            Explanation:\
    \ 15 in binary is 1111\n            \"\"\"\n            Input: decimal = 15\n\
    \            Output: '1111'\n            Explanation: 15 in binary is 1111\n \
    \           \"\"\"\n            Input: decimal = 15\n            Output: '1111'\n\
    \            Explanation: 15 in binary is 1111\n            \"\"\"\n         \
    \   Input: decimal = 15\n            Output: '1111'\n            Explanation:\
    \ \ndef check(candidate):\n    assert candidate(0) == 'db0db'\n    assert candidate(32)\
    \ == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n    assert candidate(15)\
    \ == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfggtgaco.py\"\
    , line 11\n    Input: decimal = 15\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # Output: '1100'\n            \"\"\"\n            decimal = 12\n           \
    \ binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\ndef check(candidate):\n   \
    \ assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n \
    \   assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjt52e18m.py\"\
    , line 11\n    decimal = 12\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n    >>> decimal_to_binary(4)\n    '100'\n   \
    \ >>> decimal_to_binary(5)\n    '101'\n    >>> decimal_to_binary(6)\n    '110'\n\
    \    >>> decimal_to_binary(7)\n    '111'\n    >>> decimal_to_binary(8)\n    '1000'\n\
    \    >>> decimal_to_binary(9)\n    '1001'\n    >>> decimal_to_binary(10)\n   \
    \ '1010'\n    >>> decimal_to_binary(11)\n    '1011'\n    >>> decimal_to_binary(12)\n\
    \    '1100'\n    >>> decimal_to_binary(13)\n    '1101'\n    >>> decimal_to_binary(14)\n\
    \    '1110'\n    >>> decimal_to_binary(15)\n    '1111'\n    >>> decimal_to_binary(16)\n\
    \    '10000'\n    >>> decimal_to_binary(17)\n    '10001'\n    >>> decimal_to_binary(18)\n\
    \    '10010'\n    >>> decimal_to_binary(19)\n    '10011'\n    >>> decimal_to_binary(20)\n\
    \    '10100'\n    >>> decimal_to_binary(21)\n    '10101'\n    >>> decimal_to_binary(22)\n\
    \    '10110'\n    >>> decimal_to_binary(23)\n    '10111'\n    >>> decimal_to_binary(24)\n\
    \    '11000'\n    >>> decimal_to_binary(25)\n    '11001'\n    >>> decimal_to_binary(26)\n\
    \    '11010'\n    >>> decimal_to_binary(27)\n    '11011'\n    >>> decimal_to_binary(28)\n\
    \    '11100'\n    >>> decimal_to_binary(29)\n    '11101'\n    >>> decimal_to_binary(30)\n\
    \    '11110'\n    >>> decimal_to_binary(31)\n    '11111'\n    >>> decimal_to_binary(32)\n\
    \    '100000'\n    >>> decimal_to_binary(33)\n    '100001'\n    >>> decimal_to_binary(34)\n\
    \    '100010'\n    >>> decimal_to_binary(35)\n    '100011'\n    >>> decimal_to_binary(36)\n\
    \    '100100'\n    >>> decimal_to_binary(37)\n    '100101'\n    >>> decimal_to_binary(38)\n\
    \    '100110'\n    >>> decimal_to_binary(39)\n    '100111'\n    >>> decimal_to_binary(40)\n\
    \    '101000'\n    >>> decimal_to_binary(41)\n    '101001'\n    >>> decimal_to_binary(42)\n\
    \    '101010'\n    >>> decimal_to_binary(43)\n    '101011'\n    >>> decimal_to_binary(44)\n\
    \    '101100'\n    >>> decimal_to_binary(45)\n    '101101'\n    >>> decimal_to_binary(46)\n\
    def check(candidate):\n    assert candidate(0) == 'db0db'\n    assert candidate(32)\
    \ == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n    assert candidate(15)\
    \ == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpolm03oyf.py\"\
    , line 11\n    >>> decimal_to_binary(4)\n    ^^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n    >>> decimal_to_binary(10)\n    '1100'\n \
    \   >>> decimal_to_binary(11)\n    '1101'\n    >>> decimal_to_binary(12)\n   \
    \ '1110'\n    >>> decimal_to_binary(13)\n    '11110'\n    >>> decimal_to_binary(14)\n\
    \    '11111'\n    >>> decimal_to_binary(15)\n    '111111'\n    >>> decimal_to_binary(16)\n\
    \    '1111111'\n    >>> decimal_to_binary(17)\n    '11111110'\n    >>> decimal_to_binary(18)\n\
    \    '111111110'\n    >>> decimal_to_binary(19)\n    '1111111101'\n    >>> decimal_to_binary(20)\n\
    \    '11111111010'\n    >>> decimal_to_binary(21)\n    '111111110100'\n    >>>\
    \ decimal_to_binary(22)\n    '1111111101000'\n    >>> decimal_to_binary(23)\n\
    \    '11111111010000'\n    >>> decimal_to_binary(24)\n    '111111110100000'\n\
    \    >>> decimal_to_binary(25)\n    '1111111101000000'\n    >>> decimal_to_binary(26)\n\
    \    '11111111010000000'\n    >>> decimal_to_binary(27)\n    '111111110100000000'\n\
    \    >>> decimal_to_binary(28)\n    '1111111101000000000'\n    >>> decimal_to_binary(29)\n\
    \    '11111111010000000000'\n    >>> decimal_to_binary(30)\n    '111111110100000000000'\n\
    \    >>> decimal_to_binary(31)\n    '1111111101000000000000'\n    >>> decimal_to_binary(32)\n\
    \    '11111111010000000000000'\n    >>> decimal_to_binary(33)\n    '111111110100000000000000'\n\
    \    >>> decimal_to_binary(34)\n    '11111111010000000000000000'\n    >>> decimal_to_binary(35)\n\
    \    '1111111101000000000000000000'\n    >>> decimal_to_binary(36)\n    '11111111010000000000000000000'\n\
    \    >>> decimal_to_binary(37)\n    '111111110100000000000000000000'\n    >>>\
    \ decimal_to_binary(38)\n    '1111111101000000000000000000000'\n    >>> decimal_to_binary(39)\n\
    \    '11111111010000000000000000000000'\n    >>> decimal_to_binary(40)\n    '1111111101000000000000000000000000'\n\
    \    >>> decimal_to_binary(41)\n    '11111111010000000000000000000000000'\n  \
    \  >>> decimal_to_binary(42)\n    '111111110100000000000000000000000000'\n   \
    \ >>> decimal_to_binary(43)\n    '1111111101000000000000000000000000000'\n   \
    \ >>> decimal_to_binary(44)\n    '111111\ndef check(candidate):\n    assert candidate(0)\
    \ == 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpskiibmp6.py\"\
    , line 80\n    '111111\n    ^\nSyntaxError: unterminated string literal (detected\
    \ at line 80)\n"
  exit_code: 1
  status: SyntaxError
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # Output: '1100'\n            \"\"\"\n            decimal = 12\n           \
    \ binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\ndef check(candidate):\n   \
    \ assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n \
    \   assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2na_5e0q.py\"\
    , line 11\n    decimal = 12\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\ndef check(candidate):\n\
    \    assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n\
    \    assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpedjlf25j.py\"\
    , line 11\n    decimal = 12\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # >>> '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # >>> '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # >>> '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # >>> '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # >>> '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # >>> '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # >>> '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # >>> '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # >>> '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # >>> '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # >>> '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # >>> '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # >>> '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # >>> '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # >>> '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # >>> '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # >>> '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # >>> '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # >>> '1100'\n            \"\"\"\ndef check(candidate):\n    assert candidate(0)\
    \ == 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_sjgn90m.py\"\
    , line 11\n    decimal = 12\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n    >>> decimal_to_binary(5)\n    '0000101'\n\
    \    >>> decimal_to_binary(8)\n    '0100010'\n    >>> decimal_to_binary(12)\n\
    \    '1001001'\n    >>> decimal_to_binary(15)\n    '1100111'\n    >>> decimal_to_binary(17)\n\
    \    '1110110'\n    >>> decimal_to_binary(18)\n    '1111010'\n    >>> decimal_to_binary(19)\n\
    \    '1111001'\n    >>> decimal_to_binary(20)\n    '1111111'\n    >>> decimal_to_binary(21)\n\
    \    '1111111'\n    >>> decimal_to_binary(22)\n    '1111111'\n    >>> decimal_to_binary(23)\n\
    \    '1111111'\n    >>> decimal_to_binary(24)\n    '1111111'\n    >>> decimal_to_binary(25)\n\
    \    '1111111'\n    >>> decimal_to_binary(26)\n    '1111111'\n    >>> decimal_to_binary(27)\n\
    \    '1111111'\n    >>> decimal_to_binary(28)\n    '1111111'\n    >>> decimal_to_binary(29)\n\
    \    '1111111'\n    >>> decimal_to_binary(30)\n    '1111111'\n    >>> decimal_to_binary(31)\n\
    \    '1111111'\n    >>> decimal_to_binary(32)\n    '1111111'\n    >>> decimal_to_binary(33)\n\
    \    '1111111'\n    >>> decimal_to_binary(34)\n    '1111111'\n    >>> decimal_to_binary(35)\n\
    \    '1111111'\n    >>> decimal_to_binary(36)\n    '1111111'\n    >>> decimal_to_binary(37)\n\
    \    '1111111'\n    >>> decimal_to_binary(38)\n    '1111111'\n    >>> decimal_to_binary(39)\n\
    \    '1111111'\n    >>> decimal_to_binary(40)\n    '1111111'\n    >>> decimal_to_binary(41)\n\
    \    '1111111'\n    >>> decimal_to_binary(42)\n    '1111111'\n    >>> decimal_to_binary(43)\n\
    \    '1111111'\n    >>> decimal_to_binary(44)\n    '1111111'\n    >>> decimal_to_binary(45)\n\
    \    '1111111'\n    >>> decimal_to_binary(46)\n    '1111111'\n    >>> decimal_to_binary(47)\n\
    \    '1111111'\n    >>> decimal_to_binary(48)\n    '1111111'\n    >>> decimal_to_binary(49)\n\
    \    '1111111'\n    >>> decimal_to_binary(50)\n    '1111111'\n    >>> decimal_to_binary(51)\n\
    \    '1111111'\n    >>> decimal_to_binary(52)\n    '1111111'\n    >>> decimal_to_binary(\n\
    def check(candidate):\n    assert candidate(0) == 'db0db'\n    assert candidate(32)\
    \ == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n    assert candidate(15)\
    \ == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp37kp6wf1.py\"\
    , line 11\n    >>> decimal_to_binary(5)\n    ^^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n    >>> decimal_to_binary(10)\n    '1010'\n \
    \   >>> decimal_to_binary(5)\n    '101'\n    >>> decimal_to_binary(1)\n    '1'\n\
    \    >>> decimal_to_binary(0)\n    '0'\n    >>> decimal_to_binary(-1)\n    '11111111'\n\
    \    >>> decimal_to_binary(-5)\n    '11111110'\n    >>> decimal_to_binary(-10)\n\
n\
    def check(candidate):\n    assert candidate(0) == 'db0db'\n    assert candidate(32)\
    \ == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n    assert candidate(15)\
    \ == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuvvoa1_9.py\"\
    , line 24\n
  exit_code: 1
  status: SyntaxError
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n            decimal = 15\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # Output: '1111'\n            \"\"\"\n            decimal = 15\n           \
    \ binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1111'\n            \"\"\"\n            decimal = 15\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1111'\n            \"\"\"\n            decimal = 15\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1111'\n            \"\"\"\n            decimal = 15\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1111'\n            \"\"\"\n            decimal = 15\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1111'\n            \"\"\"\n            decimal = 15\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1111'\n            \"\"\"\n            decimal = 15\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1111'\n            \"\"\"\n            decimal = 15\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1111'\n            \"\"\"\n            decimal = 15\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1111'\n            \"\"\"\n            decimal = 15\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1111'\n            \"\"\"\n            decimal = 15\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1111'\n            \"\"\"\n            decimal = 15\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1111'\n            \"\"\"\n            decimal = 15\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1111'\n            \"\"\"\n            decimal = 15\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1111'\n            \"\"\"\n            decimal = 15\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1111'\n            \"\"\"\n            decimal = 15\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1111'\n            \"\"\"\n            decimal = 15\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1111'\n            \"\"\"\n            decimal = 15\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1111'\n            \"\"\"\ndef check(candidate):\n   \
    \ assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n \
    \   assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6y69zqfw.py\"\
    , line 11\n    decimal = 15\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\ndef check(candidate):\n\
    \    assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n\
    \    assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjkmlfaqd.py\"\
    , line 11\n    decimal = 12\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n            Input: decimal = 12\n           \
    \ Output: '1100'\n            \"\"\"\n            Input: decimal = 12\n      \
    \      Output: '1100'\n            \"\"\"\n            Input: decimal = 12\n \
    \           Output: '1100'\n            \"\"\"\n            Input: decimal = 12\n\
    \            Output: '1100'\n            \"\"\"\n            Input: decimal =\
    \ 12\n            Output: '1100'\n            \"\"\"\n            Input: decimal\
    \ = 12\n            Output: '1100'\n            \"\"\"\n            Input: decimal\
    \ = 12\n            Output: '1100'\n            \"\"\"\n            Input: decimal\
    \ = 12\n            Output: '1100'\n            \"\"\"\n            Input: decimal\
    \ = 12\n            Output: '1100'\n            \"\"\"\n            Input: decimal\
    \ = 12\n            Output: '1100'\n            \"\"\"\n            Input: decimal\
    \ = 12\n            Output: '1100'\n            \"\"\"\n            Input: decimal\
    \ = 12\n            Output: '1100'\n            \"\"\"\n            Input: decimal\
    \ = 12\n            Output: '1100'\n            \"\"\"\n            Input: decimal\
    \ = 12\n            Output: '1100'\n            \"\"\"\n            Input: decimal\
    \ = 12\n            Output: '1100'\n            \"\"\"\n            Input: decimal\
    \ = 12\n            Output: '1100'\n            \"\"\"\n            Input: decimal\
    \ = 12\n            Output: '1100'\n            \"\"\"\n            Input: decimal\
    \ = 12\n            Output: '1100'\n            \"\"\"\n            Input: decimal\
    \ = 12\n            Output: '1100'\n            \"\"\"\n            Input: decimal\
    \ = 12\n            Output: '1100'\n            \"\"\"\n            Input: decimal\
    \ = 12\n            Output: '1100'\n            \"\"\"\n            Input: decimal\
    \ = 12\n            Output: '1100'\n            \"\"\"\n            Input: decimal\
    \ = 12\n            Output: '1100'\n            \"\"\"\n            Input: decimal\
    \ = 12\n            Output: '1100'\n            \"\"\"\n            Input: decimal\
    \ = 12\n            Output: '1100'\n            \"\"\"\n            Input: decimal\
    \ = 12\n            Output: '1100'\n            \"\"\"\n            Input: decimal\
    \ = 12\n            Output: '1100'\n            \"\"\"\n            Input: decimal\
    \ = 12\n            Output: '1100'\n            \"\"\"\n            Input: decimal\
    \ = 12\n            Output: '1100'\n            \"\"\"\n            Input: decimal\
    \ = 12\n            Output: '1100'\n            \"\"\"\n            Input: decimal\
    \ = 12\n            Output: '1100'\n            \"\"\"\n            Input: decimal\
    \ = 12\n            Output: '1100'\n            \"\"\"\n            Input: decimal\
    \ = 12\n            Output: '1100'\n            \"\"\"\n            Input: decimal\
    \ = 12\n            Output: '1100'\n            \"\"\"\n            Input\ndef\
    \ check(candidate):\n    assert candidate(0) == 'db0db'\n    assert candidate(32)\
    \ == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n    assert candidate(15)\
    \ == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7hcrj36l.py\"\
    , line 11\n    Input: decimal = 12\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n            Input: decimal = 12\n           \
    \ Output: '1100'\n            Input: decimal = 12\n            Output: '1100'\n\
    \            Input: decimal = 12\n            Output: '1100'\n            Input:\
    \ decimal = 12\n            Output: '1100'\n            Input: decimal = 12\n\
    \            Output: '1100'\n            Input: decimal = 12\n            Output:\
    \ '1100'\n            Input: decimal = 12\n            Output: '1100'\n      \
    \      Input: decimal = 12\n            Output: '1100'\n            Input: decimal\
    \ = 12\n            Output: '1100'\n            Input: decimal = 12\n        \
    \    Output: '1100'\n            Input: decimal = 12\n            Output: '1100'\n\
    \            Input: decimal = 12\n            Output: '1100'\n            Input:\
    \ decimal = 12\n            Output: '1100'\n            Input: decimal = 12\n\
    \            Output: '1100'\n            Input: decimal = 12\n            Output:\
    \ '1100'\n            Input: decimal = 12\n            Output: '1100'\n      \
    \      Input: decimal = 12\n            Output: '1100'\n            Input: decimal\
    \ = 12\n            Output: '1100'\n            Input: decimal = 12\n        \
    \    Output: '1100'\n            Input: decimal = 12\n            Output: '1100'\n\
    \            Input: decimal = 12\n            Output: '1100'\n            Input:\
    \ decimal = 12\n            Output: '1100'\n            Input: decimal = 12\n\
    \            Output: '1100'\n            Input: decimal = 12\n            Output:\
    \ '1100'\n            Input: decimal = 12\n            Output: '1100'\n      \
    \      Input: decimal = 12\n            Output: '1100'\n            Input: decimal\
    \ = 12\n            Output: '1100'\n            Input: decimal = 12\n        \
    \    Output: '1100'\n            Input: decimal = 12\n            Output: '1100'\n\
    \            Input: decimal = 12\n            Output: '1100'\n            Input:\
    \ decimal = 12\n            Output: '1100'\n            Input: decimal = 12\n\
    \            Output: '1100'\n            Input: decimal = 12\n            Output:\
    \ '1100'\n            Input: decimal = 12\n            Output: '1100'\n      \
    \      Input: decimal = 12\n            Output: '1100'\n            Input: decimal\
    \ = 12\n            Output: '1100'\n            Input: decimal = 12\n        \
    \    Output: '1100'\n            Input: decimal = 12\n            Output: '1100'\n\
    \            Input: decimal = 12\n            Output: '1100'\n            Input:\
    \ decimal = \ndef check(candidate):\n    assert candidate(0) == 'db0db'\n    assert\
    \ candidate(32) == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n\
    \    assert candidate(15) == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplytcrbx2.py\"\
    , line 11\n    Input: decimal = 12\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n            Input: decimal = 12\n           \
    \ Output: '1100'\n            \"\"\"\n            Input: decimal = 12\n      \
    \      Output: '1100'\n            \"\"\"\n            Input: decimal = 12\n \
    \           Output: '1100'\n            \"\"\"\n            Input: decimal = 12\n\
    \            Output: '1100'\n            \"\"\"\n            Input: decimal =\
    \ 12\n            Output: '1100'\n            \"\"\"\n            Input: decimal\
    \ = 12\n            Output: '1100'\n            \"\"\"\n            Input: decimal\
    \ = 12\n            Output: '1100'\n            \"\"\"\n            Input: decimal\
    \ = 12\n            Output: '1100'\n            \"\"\"\n            Input: decimal\
    \ = 12\n            Output: '1100'\n            \"\"\"\n            Input: decimal\
    \ = 12\n            Output: '1100'\n            \"\"\"\n            Input: decimal\
    \ = 12\n            Output: '1100'\n            \"\"\"\n            Input: decimal\
    \ = 12\n            Output: '1100'\n            \"\"\"\n            Input: decimal\
    \ = 12\n            Output: '1100'\n            \"\"\"\n            Input: decimal\
    \ = 12\n            Output: '1100'\n            \"\"\"\n            Input: decimal\
    \ = 12\n            Output: '1100'\n            \"\"\"\n            Input: decimal\
    \ = 12\n            Output: '1100'\n            \"\"\"\n            Input: decimal\
    \ = 12\n            Output: '1100'\n            \"\"\"\n            Input: decimal\
    \ = 12\n            Output: '1100'\n            \"\"\"\n            Input: decimal\
    \ = 12\n            Output: '1100'\n            \"\"\"\n            Input: decimal\
    \ = 12\n            Output: '1100'\n            \"\"\"\n            Input: decimal\
    \ = 12\n            Output: '1100'\n            \"\"\"\n            Input: decimal\
    \ = 12\n            Output: '1100'\n            \"\"\"\n            Input: decimal\
    \ = 12\n            Output: '1100'\n            \"\"\"\n            Input: decimal\
    \ = 12\n            Output: '1100'\n            \"\"\"\n            Input: decimal\
    \ = 12\n            Output: '1100'\n            \"\"\"\n            Input: decimal\
    \ = 12\n            Output: '1100'\n            \"\"\"\n            Input: decimal\
    \ = 12\n            Output: '1100'\n            \"\"\"\n            Input: decimal\
    \ = 12\n            Output: '1100'\n            \"\"\"\n            Input: decimal\
    \ = 12\n            Output: '1100'\n            \"\"\"\n            Input: decimal\
    \ = 12\n            Output: '1100'\n            \"\"\"\n            Input: decimal\
    \ = 12\n            Output: '1100'\n            \"\"\"\n            Input: decimal\
    \ = 12\n            Output: '1100'\n            \"\"\"\n            Input: decimal\
    \ = 12\n            Output: '1100'\n            \"\"\"\n            Input: decimal\
    \ = 12\n            Output: '1100'\n            \"\"\"\n            Input\ndef\
    \ check(candidate):\n    assert candidate(0) == 'db0db'\n    assert candidate(32)\
    \ == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n    assert candidate(15)\
    \ == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo3dd5za8.py\"\
    , line 11\n    Input: decimal = 12\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # Output: '1100'\n            \"\"\"\n            decimal = 12\n           \
    \ binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\ndef check(candidate):\n   \
    \ assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n \
    \   assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjm46qq5p.py\"\
    , line 11\n    decimal = 12\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\ndef check(candidate):\n\
    \    assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n\
    \    assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9vzh7y2h.py\"\
    , line 11\n    decimal = 12\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n    >>> decimal_to_binary(5)\n    '1111'\n  \
    \  >>> decimal_to_binary(10)\n    '1010'\n    >>> decimal_to_binary(15)\n    '1111'\n\
    \    >>> decimal_to_binary(16)\n    '1110'\n    >>> decimal_to_binary(17)\n  \
    \  '1111'\n    >>> decimal_to_binary(18)\n    '1110'\n    >>> decimal_to_binary(19)\n\
    \    '1111'\n    >>> decimal_to_binary(20)\n    '1110'\n    >>> decimal_to_binary(21)\n\
    \    '1111'\n    >>> decimal_to_binary(22)\n    '1110'\n    >>> decimal_to_binary(23)\n\
    \    '1111'\n    >>> decimal_to_binary(24)\n    '1110'\n    >>> decimal_to_binary(25)\n\
    \    '1111'\n    >>> decimal_to_binary(26)\n    '1110'\n    >>> decimal_to_binary(27)\n\
    \    '1111'\n    >>> decimal_to_binary(28)\n    '1110'\n    >>> decimal_to_binary(29)\n\
    \    '1111'\n    >>> decimal_to_binary(30)\n    '1110'\n    >>> decimal_to_binary(31)\n\
    \    '1111'\n    >>> decimal_to_binary(32)\n    '1110'\n    >>> decimal_to_binary(33)\n\
    \    '1111'\n    >>> decimal_to_binary(34)\n    '1110'\n    >>> decimal_to_binary(35)\n\
    \    '1111'\n    >>> decimal_to_binary(36)\n    '1110'\n    >>> decimal_to_binary(37)\n\
    \    '1111'\n    >>> decimal_to_binary(38)\n    '1110'\n    >>> decimal_to_binary(39)\n\
    \    '1111'\n    >>> decimal_to_binary(40)\n    '1110'\n    >>> decimal_to_binary(41)\n\
    \    '1111'\n    >>> decimal_to_binary(42)\n    '1110'\n    >>> decimal_to_binary(43)\n\
    \    '1111'\n    >>> decimal_to_binary(44)\n    '1110'\n    >>> decimal_to_binary(45)\n\
    \    '1111'\n    >>> decimal_to_binary(46)\n    '1110'\n    >>> decimal_to_binary(47)\n\
    \    '1111'\n    >>> decimal_to_binary(48)\n    '1110'\n    >>> decimal_to_binary(49)\n\
    \    '1111'\n    >>> decimal_to_binary(50)\n    '1110'\n    >>> decimal_to_binary(51)\n\
    \    '1111'\n    >>> decimal_to_binary(52)\n    '1110'\n    >>> decimal_to_binary(53)\n\
    \    '1111'\n    >>> decimal_to_binary(54)\n    '1110'\n    >>> decimal_to_bin\n\
    def check(candidate):\n    assert candidate(0) == 'db0db'\n    assert candidate(32)\
    \ == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n    assert candidate(15)\
    \ == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpaz_qdkjg.py\"\
    , line 11\n    >>> decimal_to_binary(5)\n    ^^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # Output: '1100'\n            \"\"\"\n            decimal = 12\n           \
    \ binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\ndef check(candidate):\n   \
    \ assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n \
    \   assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnrkh0mxw.py\"\
    , line 11\n    decimal = 12\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n    >>> decimal_to_binary(5)\n    '111'\n   \
    \ >>> decimal_to_binary(10)\n    '1010'\n    >>> decimal_to_binary(15)\n    '1111'\n\
    \    >>> decimal_to_binary(20)\n    '111111'\n    >>> decimal_to_binary(25)\n\
    \    '1111111'\n    >>> decimal_to_binary(30)\n    '11111110'\n    >>> decimal_to_binary(35)\n\
    \    '1111111010'\n    >>> decimal_to_binary(40)\n    '111111101010'\n    >>>\
    \ decimal_to_binary(45)\n    '11111110101010'\n    >>> decimal_to_binary(50)\n\
    \    '1111111010101010'\n    >>> decimal_to_binary(55)\n    '111111101010101010'\n\
    \    >>> decimal_to_binary(60)\n    '11111110101010101010'\n    >>> decimal_to_binary(65)\n\
    \    '1111111010101010101010'\n    >>> decimal_to_binary(70)\n    '111111101010101010101010'\n\
    \    >>> decimal_to_binary(75)\n    '11111110101010101010101010'\n    >>> decimal_to_binary(80)\n\
    \    '1111111010101010101010101010'\n    >>> decimal_to_binary(85)\n    '111111101010101010101010101010'\n\
    \    >>> decimal_to_binary(90)\n    '11111110101010101010101010101010'\n    >>>\
    \ decimal_to_binary(95)\n    '111111101010101010101010101010101010'\n    >>> decimal_to_binary(100)\n\
    \    '11111110101010101010101010101010101010'\n    >>> decimal_to_binary(105)\n\
    \    '1111111010101010101010101010101010101010'\n    >>> decimal_to_binary(110)\n\
    \    '111111101010101010101010101010101010101010'\n    >>> decimal_to_binary(115)\n\
    \    '11111110101010101010101010101010101010101010'\n    >>> decimal_to_binary(120)\n\
    \    '1111111010101010101010101010101010101010101010'\n    >>> decimal_to_binary(125)\n\
    \    '11111110101010101010101010101010101010101010101010'\n    >>> decimal_to_binary(130)\n\
    \    '111111101010101010101010101010101010101010101010101010'\n    >>> decimal_to_binary(135)\n\
    \    '111111101010101010101010101010101010101010101010101010'\n    >>> decimal_to_binary(140)\n\
    \    '1111111010101010101010101010101010101010101010101010101010'\n    >>> decimal_to_binary(145)\n\
    \    '11111110101010\ndef check(candidate):\n    assert candidate(0) == 'db0db'\n\
    \    assert candidate(32) == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n\
    \    assert candidate(15) == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkc3t_n8t.py\"\
    , line 68\n    '11111110101010\n    ^\nSyntaxError: unterminated string literal\
    \ (detected at line 68)\n"
  exit_code: 1
  status: SyntaxError
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n    >>> decimal_to_binary(5)\n    '101'\n   \
    \ >>> decimal_to_binary(10)\n    '111'\n    >>> decimal_to_binary(15)\n    '1111'\n\
    \    >>> decimal_to_binary(16)\n    '1111'\n    >>> decimal_to_binary(17)\n  \
    \  '1111'\n    >>> decimal_to_binary(18)\n    '1111'\n    >>> decimal_to_binary(19)\n\
    \    '1111'\n    >>> decimal_to_binary(20)\n    '1111'\n    >>> decimal_to_binary(21)\n\
    \    '1111'\n    >>> decimal_to_binary(22)\n    '1111'\n    >>> decimal_to_binary(23)\n\
    \    '1111'\n    >>> decimal_to_binary(24)\n    '1111'\n    >>> decimal_to_binary(25)\n\
    \    '1111'\n    >>> decimal_to_binary(26)\n    '1111'\n    >>> decimal_to_binary(27)\n\
    \    '1111'\n    >>> decimal_to_binary(28)\n    '1111'\n    >>> decimal_to_binary(29)\n\
    \    '1111'\n    >>> decimal_to_binary(30)\n    '1111'\n    >>> decimal_to_binary(31)\n\
    \    '1111'\n    >>> decimal_to_binary(32)\n    '1111'\n    >>> decimal_to_binary(33)\n\
    \    '1111'\n    >>> decimal_to_binary(34)\n    '1111'\n    >>> decimal_to_binary(35)\n\
    \    '1111'\n    >>> decimal_to_binary(36)\n    '1111'\n    >>> decimal_to_binary(37)\n\
    \    '1111'\n    >>> decimal_to_binary(38)\n    '1111'\n    >>> decimal_to_binary(39)\n\
    \    '1111'\n    >>> decimal_to_binary(40)\n    '1111'\n    >>> decimal_to_binary(41)\n\
    \    '1111'\n    >>> decimal_to_binary(42)\n    '1111'\n    >>> decimal_to_binary(43)\n\
    \    '1111'\n    >>> decimal_to_binary(44)\n    '1111'\n    >>> decimal_to_binary(45)\n\
    \    '1111'\n    >>> decimal_to_binary(46)\n    '1111'\n    >>> decimal_to_binary(47)\n\
    \    '1111'\n    >>> decimal_to_binary(48)\n    '1111'\n    >>> decimal_to_binary(49)\n\
    \    '1111'\n    >>> decimal_to_binary(50)\n    '1111'\n    >>> decimal_to_binary(51)\n\
    \    '1111'\n    >>> decimal_to_binary(52)\n    '1111'\n    >>> decimal_to_binary(53)\n\
    \    '1111'\n    >>> decimal_to_binary(54)\n    '1111'\n    >>> decimal_to_binary(55)\n\
    \    '1111'\n    >>> decimal_to_binary(56)\n    '1111'\n\ndef check(candidate):\n\
    \    assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n\
    \    assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0pcjafxj.py\"\
    , line 11\n    >>> decimal_to_binary(5)\n    ^^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n    >>> decimal_to_binary(5)\n    '111'\n   \
    \ >>> decimal_to_binary(10)\n    '1010'\n    >>> decimal_to_binary(15)\n    '1111'\n\
    \    >>> decimal_to_binary(17)\n    '101111'\n    >>> decimal_to_binary(19)\n\
    \    '10010011'\n    >>> decimal_to_binary(20)\n    '1001000011'\n    >>> decimal_to_binary(21)\n\
    \    '10010000101111'\n    >>> decimal_to_binary(22)\n    '100100001011110'\n\
    \    >>> decimal_to_binary(23)\n    '1001000010111100'\n    >>> decimal_to_binary(24)\n\
    \    '10010000101111000'\n    >>> decimal_to_binary(25)\n    '100100001011110000'\n\
    \    >>> decimal_to_binary(26)\n    '1001000010111100000'\n    >>> decimal_to_binary(27)\n\
    \    '10010000101111000000'\n    >>> decimal_to_binary(28)\n    '100100001011110000000'\n\
    \    >>> decimal_to_binary(29)\n    '1001000010111100000000'\n    >>> decimal_to_binary(30)\n\
    \    '10010000101111000000000'\n    >>> decimal_to_binary(31)\n    '100100001011110000000000'\n\
    \    >>> decimal_to_binary(32)\n    '1001000010111100000000000'\n    >>> decimal_to_binary(33)\n\
    \    '10010000101111000000000000'\n    >>> decimal_to_binary(34)\n    '1001000010111100000000000000'\n\
    \    >>> decimal_to_binary(35)\n    '10010000101111000000000000000'\n    >>> decimal_to_binary(36)\n\
    \    '100100001011110000000000000000'\n    >>> decimal_to_binary(37)\n    '1001000010111100000000000000000'\n\
    \    >>> decimal_to_binary(38)\n    '10010000101111000000000000000000'\n    >>>\
    \ decimal_to_binary(39)\n    '100100001011110000000000000000000'\n    >>> decimal_to_binary(40)\n\
    \    '1001000010111100000000000000000000'\n    >>> decimal_to_binary(41)\n   \
    \ '100100001011110000000000000000000000'\n    >>> decimal_to_binary(42)\n    '1001000010111100000000000000000000000'\n\
    \    >>> decimal_to_binary(43)\n    '10010000101111000000000000000000000000'\n\
    \    >>> decimal_to_binary(44)\n    '100100001011110000000000000000000000000'\n\
    \    >>> decimal_to_binary(45)\n    '1001000010111100000000000000000000000000'\n\
    \    >>> decimal_to_binary(46)\n    '10010000101111000000000000000000000000000'\n\
    \    >>> decimal_to_binary(47)\n    '100100001011110000000000000000000000000000'\n\
    \    >>> \ndef check(candidate):\n    assert candidate(0) == 'db0db'\n    assert\
    \ candidate(32) == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n\
    \    assert candidate(15) == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa1drdv0f.py\"\
    , line 11\n    >>> decimal_to_binary(5)\n    ^^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n            Input: decimal = 12\n           \
    \ Output: '1100'\n            Input: decimal = 12\n            Output: '1100'\n\
    \            Input: decimal = 12\n            Output: '1100'\n            Input:\
    \ decimal = 12\n            Output: '1100'\n            Input: decimal = 12\n\
    \            Output: '1100'\n            Input: decimal = 12\n            Output:\
    \ '1100'\n            Input: decimal = 12\n            Output: '1100'\n      \
    \      Input: decimal = 12\n            Output: '1100'\n            Input: decimal\
    \ = 12\n            Output: '1100'\n            Input: decimal = 12\n        \
    \    Output: '1100'\n            Input: decimal = 12\n            Output: '1100'\n\
    \            Input: decimal = 12\n            Output: '1100'\n            Input:\
    \ decimal = 12\n            Output: '1100'\n            Input: decimal = 12\n\
    \            Output: '1100'\n            Input: decimal = 12\n            Output:\
    \ '1100'\n            Input: decimal = 12\n            Output: '1100'\n      \
    \      Input: decimal = 12\n            Output: '1100'\n            Input: decimal\
    \ = 12\n            Output: '1100'\n            Input: decimal = 12\n        \
    \    Output: '1100'\n            Input: decimal = 12\n            Output: '1100'\n\
    \            Input: decimal = 12\n            Output: '1100'\n            Input:\
    \ decimal = 12\n            Output: '1100'\n            Input: decimal = 12\n\
    \            Output: '1100'\n            Input: decimal = 12\n            Output:\
    \ '1100'\n            Input: decimal = 12\n            Output: '1100'\n      \
    \      Input: decimal = 12\n            Output: '1100'\n            Input: decimal\
    \ = 12\n            Output: '1100'\n            Input: decimal = 12\n        \
    \    Output: '1100'\n            Input: decimal = 12\n            Output: '1100'\n\
    \            Input: decimal = 12\n            Output: '1100'\n            Input:\
    \ decimal = 12\n            Output: '1100'\n            Input: decimal = 12\n\
    \            Output: '1100'\n            Input: decimal = 12\n            Output:\
    \ '1100'\n            Input: decimal = 12\n            Output: '1100'\n      \
    \      Input: decimal = 12\n            Output: '1100'\n            Input: decimal\
    \ = 12\n            Output: '1100'\n            Input: decimal = 12\n        \
    \    Output: '1100'\n            Input: decimal = 12\n            Output: '1100'\n\
    \            Input: decimal = 12\n            Output: '1100'\n            Input:\
    \ decimal = \ndef check(candidate):\n    assert candidate(0) == 'db0db'\n    assert\
    \ candidate(32) == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n\
    \    assert candidate(15) == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnx2z95e6.py\"\
    , line 11\n    Input: decimal = 12\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # Output: '1100'\n            \"\"\"\n            decimal = 12\n           \
    \ binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\ndef check(candidate):\n   \
    \ assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n \
    \   assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp77l11o6y.py\"\
    , line 11\n    decimal = 12\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\ndef check(candidate):\n\
    \    assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n\
    \    assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn816hiqr.py\"\
    , line 11\n    decimal = 12\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n    >>> decimal_to_binary(1)\n    'db1'\n   \
    \ >>> decimal_to_binary(10)\n    '1010'\n    >>> decimal_to_binary(32)\n    '1110011'\n\
    \    >>> decimal_to_binary(123)\n    '111001110011'\n    >>> decimal_to_binary(124)\n\
    \    '11100111001110011'\n    >>> decimal_to_binary(125)\n    '1110011100111001110011'\n\
    \    >>> decimal_to_binary(126)\n    '111001110011100111001110011'\n    >>> decimal_to_binary(127)\n\
    \    '11100111001110011100111001110011'\n    >>> decimal_to_binary(128)\n    '1110011100111001110011100111001110011'\n\
    \    >>> decimal_to_binary(129)\n    '111001110011100111001110011100111001110011'\n\
    \    >>> decimal_to_binary(256)\nn\
    def check(candidate):\n    assert candidate(0) == 'db0db'\n    assert candidate(32)\
    \ == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n    assert candidate(15)\
    \ == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpoc796h_1.py\"\
    , line 32\nn\
    \    ^\nSyntaxError: unterminated string literal (detected at line 32)\n"
  exit_code: 1
  status: SyntaxError
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\ndef check(candidate):\n\
    \    assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n\
    \    assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzvyvk9q0.py\"\
    , line 11\n    decimal = 12\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n    >>> decimal_to_binary(5)\n    '111'\n   \
    \ >>> decimal_to_binary(10)\n    '1010'\n    >>> decimal_to_binary(15)\n    '1111'\n\
    \    >>> decimal_to_binary(20)\n    '111100'\n    >>> decimal_to_binary(25)\n\
    \    '1111000'\n    >>> decimal_to_binary(30)\n    '111100000'\n    >>> decimal_to_binary(35)\n\
    \    '111100000000'\n    >>> decimal_to_binary(40)\n    '1111000000000'\n    >>>\
    \ decimal_to_binary(45)\n    '1111000000000000'\n    >>> decimal_to_binary(50)\n\
    \    '111100000000000000'\n    >>> decimal_to_binary(55)\n    '1111000000000000000'\n\
    \    >>> decimal_to_binary(60)\n    '11110000000000000000'\n    >>> decimal_to_binary(65)\n\
    \    '111100000000000000000'\n    >>> decimal_to_binary(70)\n    '1111000000000000000000'\n\
    \    >>> decimal_to_binary(75)\n    '11110000000000000000000'\n    >>> decimal_to_binary(80)\n\
    \    '1111000000000000000000000'\n    >>> decimal_to_binary(85)\n    '1111000000000000000000000000'\n\
    \    >>> decimal_to_binary(90)\n    '11110000000000000000000000000'\n    >>> decimal_to_binary(95)\n\
    \    '11110000000000000000000000000000'\n    >>> decimal_to_binary(100)\n    '1111000000000000000000000000000000'\n\
    \    >>> decimal_to_binary(105)\n    '11110000000000000000000000000000000'\n \
    \   >>> decimal_to_binary(110)\n    '111100000000000000000000000000000000'\n \
    \   >>> decimal_to_binary(115)\n    '1111000000000000000000000000000000000'\n\
    \    >>> decimal_to_binary(120)\n    '11110000000000000000000000000000000000'\n\
    \    >>> decimal_to_binary(125)\n    '111100000000000000000000000000000000000'\n\
    \    >>> decimal_to_binary(130)\n    '11110000000000000000000000000000000000000'\n\
    \    >>> decimal_to_binary(135)\n    '11110000000000000000000000000000000000000000'\n\
    \    >>> decimal_to_binary(140)\n    '111100000000000000000000000000000000000000000'\n\
    \    >>> decimal_to_binary(145)\n    '111100000000000000000000000000000000000000000000'\n\
    \    >>> decimal_to_binary(150)\n    '11110000000000000000000000000000000000000000000000'\n\
    \    >>> decimal_to_binary(155)\n    '111100000000000000000000000000000000000000000000000'\n\
    \    >>> decimal_to_binary(160)\n    '1111000000000000000000000000000000000000000000000000'\n\
    \    >>> decimal_to_binary(165)\n    '11110000000000000000000000000000000000000000000000000'\n\
    \    >>> decimal_to_binary(170)\n    '111100000000000000000000000000000000000000000000000000'\n\
    \    >>> decimal_to_binary(175)\n    '1111000000000000000000000000000000000000000000000000000'\n\
    \    >>> decimal_to_binary(180)\n    '111100000000000000000000000000000000000000000000000000000'\n\
    \    >>> decimal_to_binary(185)\n    '111100000000000000000000000000000000\ndef\
    \ check(candidate):\n    assert candidate(0) == 'db0db'\n    assert candidate(32)\
    \ == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n    assert candidate(15)\
    \ == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv_nmyb91.py\"\
    , line 84\n    '111100000000000000000000000000000000\n    ^\nSyntaxError: unterminated\
    \ string literal (detected at line 84)\n"
  exit_code: 1
  status: SyntaxError
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n    >>> decimal_to_binary(8)\n    '100'\n   \
    \ >>> decimal_to_binary(10)\n    '1010'\n    >>> decimal_to_binary(16)\n    '10010'\n\
    \    >>> decimal_to_binary(32)\n    '10000'\n    >>> decimal_to_binary(64)\n \
    \   '1001000'\n    >>> decimal_to_binary(128)\n    '10010000'\n    >>> decimal_to_binary(256)\n\
    \    '100100000'\n    >>> decimal_to_binary(512)\n    '10010000000'\n    >>> decimal_to_binary(1024)\n\
    \    '100100000000'\n    >>> decimal_to_binary(2048)\n    '1001000000000'\n  \
    \  >>> decimal_to_binary(4096)\n    '10010000000000'\n    >>> decimal_to_binary(8192)\n\
    \    '100100000000000'\n    >>> decimal_to_binary(16384)\n    '1001000000000000'\n\
    \    >>> decimal_to_binary(32768)\n    '10010000000000000'\n    >>> decimal_to_binary(65536)\n\
    \    '100100000000000000'\n    >>> decimal_to_binary(131072)\n    '1001000000000000000'\n\
    \    >>> decimal_to_binary(262144)\n    '10010000000000000000'\n    >>> decimal_to_binary(524288)\n\
    \    '1001000000000000000000'\n    >>> decimal_to_binary(1048576)\n    '10010000000000000000000'\n\
    \    >>> decimal_to_binary(2097152)\n    '100100000000000000000000'\n    >>> decimal_to_binary(4194304)\n\
    \    '1001000000000000000000000'\n    >>> decimal_to_binary(8388608)\n    '10010000000000000000000000'\n\
    \    >>> decimal_to_binary(16777216)\n    '1001000000000000000000000000'\n   \
    \ >>> decimal_to_binary(33554432)\n    '10010000000000000000000000000'\n    >>>\
    \ decimal_to_binary(67108864)\n    '100100000000000000000000000000'\n    >>> decimal_to_binary(134217728)\n\
    \    '1001000000000000000000000000000'\n    >>> decimal_to_binary(268435456)\n\
    \    '10010000000000000000000000000000'\n    >>> decimal_to_binary(536870912)\n\
    \    '100100000000000000000000000000000'\n    >>> decimal_to_binary(1073741824)\n\
    \    '1001000000000000000000000000000000'\n    >>> decimal_to_binary(2147483648)\n\
    \    '100100000000000000000000000000000000'\n    >>> decimal_to_binary(4294967296)\n\
    \    '1001000000000000000000000000000000000'\n    >>> decimal_to_binary(8589934592)\n\
    \    '10010000000000000000000000000000000000'\n    >>> decimal_to_binary(17179869184)\n\
    \    '100100000000000000000000000000000000000'\n\ndef check(candidate):\n    assert\
    \ candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert\
    \ candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\n\
    def test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp15ku6e1o.py\"\
    , line 11\n    >>> decimal_to_binary(8)\n    ^^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n            Input: decimal = 12\n           \
    \ Output: '1100'\n            \"\"\"\n            Input: decimal = 12\n      \
    \      Output: '1100'\n            \"\"\"\n            Input: decimal = 12\n \
    \           Output: '1100'\n            \"\"\"\n            Input: decimal = 12\n\
    \            Output: '1100'\n            \"\"\"\n            Input: decimal =\
    \ 12\n            Output: '1100'\n            \"\"\"\n            Input: decimal\
    \ = 12\n            Output: '1100'\n            \"\"\"\n            Input: decimal\
    \ = 12\n            Output: '1100'\n            \"\"\"\n            Input: decimal\
    \ = 12\n            Output: '1100'\n            \"\"\"\n            Input: decimal\
    \ = 12\n            Output: '1100'\n            \"\"\"\n            Input: decimal\
    \ = 12\n            Output: '1100'\n            \"\"\"\n            Input: decimal\
    \ = 12\n            Output: '1100'\n            \"\"\"\n            Input: decimal\
    \ = 12\n            Output: '1100'\n            \"\"\"\n            Input: decimal\
    \ = 12\n            Output: '1100'\n            \"\"\"\n            Input: decimal\
    \ = 12\n            Output: '1100'\n            \"\"\"\n            Input: decimal\
    \ = 12\n            Output: '1100'\n            \"\"\"\n            Input: decimal\
    \ = 12\n            Output: '1100'\n            \"\"\"\n            Input: decimal\
    \ = 12\n            Output: '1100'\n            \"\"\"\n            Input: decimal\
    \ = 12\n            Output: '1100'\n            \"\"\"\n            Input: decimal\
    \ = 12\n            Output: '1100'\n            \"\"\"\n            Input: decimal\
    \ = 12\n            Output: '1100'\n            \"\"\"\n            Input: decimal\
    \ = 12\n            Output: '1100'\n            \"\"\"\n            Input: decimal\
    \ = 12\n            Output: '1100'\n            \"\"\"\n            Input: decimal\
    \ = 12\n            Output: '1100'\n            \"\"\"\n            Input: decimal\
    \ = 12\n            Output: '1100'\n            \"\"\"\n            Input: decimal\
    \ = 12\n            Output: '1100'\n            \"\"\"\n            Input: decimal\
    \ = 12\n            Output: '1100'\n            \"\"\"\n            Input: decimal\
    \ = 12\n            Output: '1100'\n            \"\"\"\n            Input: decimal\
    \ = 12\n            Output: '1100'\n            \"\"\"\n            Input: decimal\
    \ = 12\n            Output: '1100'\n            \"\"\"\n            Input: decimal\
    \ = 12\n            Output: '1100'\n            \"\"\"\n            Input: decimal\
    \ = 12\n            Output: '1100'\n            \"\"\"\n            Input: decimal\
    \ = 12\n            Output: '1100'\n            \"\"\"\n            Input: decimal\
    \ = 12\n            Output: '1100'\n            \"\"\"\n            Input: decimal\
    \ = 12\n            Output: '1100'\n            \"\"\"\n            Input\ndef\
    \ check(candidate):\n    assert candidate(0) == 'db0db'\n    assert candidate(32)\
    \ == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n    assert candidate(15)\
    \ == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm_8sev29.py\"\
    , line 11\n    Input: decimal = 12\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # Output: '1100'\n            \"\"\"\n            decimal = 12\n           \
    \ binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\ndef check(candidate):\n   \
    \ assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n \
    \   assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7lnj0sji.py\"\
    , line 11\n    decimal = 12\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n    >>> decimal_to_binary(12)\n    '1100'\n \
    \   >>> decimal_to_binary(-4)\n    '-1000'\n    >>> decimal_to_binary(0)\n   \
    \ '0'\n    >>> decimal_to_binary(1)\n    '1'\n    >>> decimal_to_binary(2)\n \
    \   '10'\n    >>> decimal_to_binary(3)\n    '11'\n    >>> decimal_to_binary(4)\n\
    \    '100'\n    >>> decimal_to_binary(5)\n    '101'\n    >>> decimal_to_binary(6)\n\
    \    '110'\n    >>> decimal_to_binary(7)\n    '111'\n    >>> decimal_to_binary(8)\n\
    \    '1000'\n    >>> decimal_to_binary(9)\n    '1001'\n    >>> decimal_to_binary(10)\n\
    \    '1010'\n    >>> decimal_to_binary(11)\n    '1011'\n    >>> decimal_to_binary(12)\n\
    \    '1100'\n    >>> decimal_to_binary(13)\n    '1101'\n    >>> decimal_to_binary(14)\n\
    \    '1110'\n    >>> decimal_to_binary(15)\n    '1111'\n    >>> decimal_to_binary(16)\n\
    \    '10000'\n    >>> decimal_to_binary(17)\n    '10001'\n    >>> decimal_to_binary(18)\n\
    \    '10010'\n    >>> decimal_to_binary(19)\n    '10011'\n    >>> decimal_to_binary(20)\n\
    \    '10100'\n    >>> decimal_to_binary(21)\n    '10101'\n    >>> decimal_to_binary(22)\n\
    \    '101010'\n    >>> decimal_to_binary(23)\n    '101011'\n    >>> decimal_to_binary(24)\n\
    \    '110000'\n    >>> decimal_to_binary(25)\n    '110001'\n    >>> decimal_to_binary(26)\n\
    \    '1100010'\n    >>> decimal_to_binary(27)\n    '1100011'\n    >>> decimal_to_binary(28)\n\
    \    '1100100'\n    >>> decimal_to_binary(29)\n    '1100101'\n    >>> decimal_to_binary(30)\n\
    \    '11001100'\n    >>> decimal_to_binary(31)\n    '11001101'\n    >>> decimal_to_binary(32)\n\
    \    '110011010'\n    >>> decimal_to_binary(33)\n    '110011011'\n    >>> decimal_to_binary(34)\n\
    \    '110011100'\n    >>> decimal_to_binary(35)\n    '110011101'\n    >>> decimal_to_binary(36)\n\
    \    '110011110'\n    >>> decimal_to_binary(37)\n    '110011111'\n    >>> decimal_to_binary(38)\n\
    \    '1100111100'\n    >>> decimal_to_binary(39)\n    '1100111101'\n\ndef check(candidate):\n\
    \    assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n\
    \    assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfr08amoh.py\"\
    , line 11\n    >>> decimal_to_binary(12)\n    ^^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n    >>> decimal_to_binary(10)\n    '1010'\n \
    \   >>> decimal_to_binary(11)\n    '1110'\n    >>> decimal_to_binary(12)\n   \
    \ '1100'\n    >>> decimal_to_binary(13)\n    '1101'\n    >>> decimal_to_binary(14)\n\
    \    '1110'\n    >>> decimal_to_binary(15)\n    '1111'\n    >>> decimal_to_binary(16)\n\
    \    '1110'\n    >>> decimal_to_binary(17)\n    '1111'\n    >>> decimal_to_binary(18)\n\
    \    '1110'\n    >>> decimal_to_binary(19)\n    '1111'\n    >>> decimal_to_binary(20)\n\
    \    '1110'\n    >>> decimal_to_binary(21)\n    '1111'\n    >>> decimal_to_binary(22)\n\
    \    '1110'\n    >>> decimal_to_binary(23)\n    '1111'\n    >>> decimal_to_binary(24)\n\
    \    '1110'\n    >>> decimal_to_binary(25)\n    '1111'\n    >>> decimal_to_binary(26)\n\
    \    '1110'\n    >>> decimal_to_binary(27)\n    '1111'\n    >>> decimal_to_binary(28)\n\
    \    '1110'\n    >>> decimal_to_binary(29)\n    '1111'\n    >>> decimal_to_binary(30)\n\
    \    '1110'\n    >>> decimal_to_binary(31)\n    '1111'\n    >>> decimal_to_binary(32)\n\
    \    '1110'\n    >>> decimal_to_binary(33)\n    '1111'\n    >>> decimal_to_binary(34)\n\
    \    '1110'\n    >>> decimal_to_binary(35)\n    '1111'\n    >>> decimal_to_binary(36)\n\
    \    '1110'\n    >>> decimal_to_binary(37)\n    '1111'\n    >>> decimal_to_binary(38)\n\
    \    '1110'\n    >>> decimal_to_binary(39)\n    '1111'\n    >>> decimal_to_binary(40)\n\
    \    '1110'\n    >>> decimal_to_binary(41)\n    '1111'\n    >>> decimal_to_binary(42)\n\
    \    '1110'\n    >>> decimal_to_binary(43)\n    '1111'\n    >>> decimal_to_binary(44)\n\
    \    '1110'\n    >>> decimal_to_binary(45)\n    '1111'\n    >>> decimal_to_binary(46)\n\
    \    '1110'\n    >>> decimal_to_binary(47)\n    '1111'\n    >>> decimal_to_binary(48)\n\
    \    '1110'\n    >>> decimal_to_binary(49)\n    '1111'\n    >>> decimal_to_binary(50)\n\
    \    '1110'\n    >>> decimal_to_binary(51)\n    '1111'\n    >>> decimal_to_binary(52)\n\
    def check(candidate):\n    assert candidate(0) == 'db0db'\n    assert candidate(32)\
    \ == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n    assert candidate(15)\
    \ == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3xzx8a9i.py\"\
    , line 11\n    >>> decimal_to_binary(10)\n    ^^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n            Input: decimal = 12\n           \
    \ Output: '1100'\n            Input: decimal = -12\n            Output: '-11'\n\
    \            Input: decimal = 12\n            Output: '1100'\n            Input:\
    \ decimal = 12\n            Output: '1100'\n            Input: decimal = 12\n\
    \            Output: '1100'\n            Input: decimal = 12\n            Output:\
    \ '1100'\n            Input: decimal = 12\n            Output: '1100'\n      \
    \      Input: decimal = 12\n            Output: '1100'\n            Input: decimal\
    \ = 12\n            Output: '1100'\n            Input: decimal = 12\n        \
    \    Output: '1100'\n            Input: decimal = 12\n            Output: '1100'\n\
    \            Input: decimal = 12\n            Output: '1100'\n            Input:\
    \ decimal = 12\n            Output: '1100'\n            Input: decimal = 12\n\
    \            Output: '1100'\n            Input: decimal = 12\n            Output:\
    \ '1100'\n            Input: decimal = 12\n            Output: '1100'\n      \
    \      Input: decimal = 12\n            Output: '1100'\n            Input: decimal\
    \ = 12\n            Output: '1100'\n            Input: decimal = 12\n        \
    \    Output: '1100'\n            Input: decimal = 12\n            Output: '1100'\n\
    \            Input: decimal = 12\n            Output: '1100'\n            Input:\
    \ decimal = 12\n            Output: '1100'\n            Input: decimal = 12\n\
    \            Output: '1100'\n            Input: decimal = 12\n            Output:\
    \ '1100'\n            Input: decimal = 12\n            Output: '1100'\n      \
    \      Input: decimal = 12\n            Output: '1100'\n            Input: decimal\
    \ = 12\n            Output: '1100'\n            Input: decimal = 12\n        \
    \    Output: '1100'\n            Input: decimal = 12\n            Output: '1100'\n\
    \            Input: decimal = 12\n            Output: '1100'\n            Input:\
    \ decimal = 12\n            Output: '1100'\n            Input: decimal = 12\n\
    \            Output: '1100'\n            Input: decimal = 12\n            Output:\
    \ '1100'\n            Input: decimal = 12\n            Output: '1100'\n      \
    \      Input: decimal = 12\n            Output: '1100'\n            Input: decimal\
    \ = 12\n            Output: '1100'\n            Input: decimal = 12\n        \
    \    Output: '1100'\n            Input: decimal = 12\n            Output: '1100'\n\
    \            Input: decimal = 12\n            Output: '1100'\n            Input:\
    \ decimal = \ndef check(candidate):\n    assert candidate(0) == 'db0db'\n    assert\
    \ candidate(32) == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n\
    \    assert candidate(15) == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphg0hfr37.py\"\
    , line 11\n    Input: decimal = 12\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\ndef check(candidate):\n\
    \    assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n\
    \    assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5l8w1iu8.py\"\
    , line 11\n    decimal = 12\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n    >>> decimal_to_binary(5)\n    '101'\n   \
    \ >>> decimal_to_binary(10)\n    '1010'\n    >>> decimal_to_binary(15)\n    '1111'\n\
    \    >>> decimal_to_binary(17)\n    '11111'\n    >>> decimal_to_binary(18)\n \
    \   '111111'\n    >>> decimal_to_binary(19)\n    '1111111'\n    >>> decimal_to_binary(20)\n\
    \    '11111110'\n    >>> decimal_to_binary(21)\n    '111111110'\n    >>> decimal_to_binary(22)\n\
    \    '1111111101'\n    >>> decimal_to_binary(23)\n    '11111111010'\n    >>> decimal_to_binary(24)\n\
    \    '111111110100'\n    >>> decimal_to_binary(25)\n    '1111111101000'\n    >>>\
    \ decimal_to_binary(26)\n    '11111111010000'\n    >>> decimal_to_binary(27)\n\
    \    '111111110100000'\n    >>> decimal_to_binary(28)\n    '1111111101000000'\n\
    \    >>> decimal_to_binary(29)\n    '11111111010000000'\n    >>> decimal_to_binary(30)\n\
    \    '111111110100000000'\n    >>> decimal_to_binary(31)\n    '1111111101000000000'\n\
    \    >>> decimal_to_binary(32)\n    '11111111010000000000'\n    >>> decimal_to_binary(33)\n\
    \    '111111110100000000000'\n    >>> decimal_to_binary(34)\n    '1111111101000000000000'\n\
    \    >>> decimal_to_binary(35)\n    '11111111010000000000000'\n    >>> decimal_to_binary(36)\n\
    \    '111111110100000000000000'\n    >>> decimal_to_binary(37)\n    '11111111010000000000000000'\n\
    \    >>> decimal_to_binary(38)\n    '111111110100000000000000000'\n    >>> decimal_to_binary(39)\n\
    \    '1111111101000000000000000000'\n    >>> decimal_to_binary(40)\n    '11111111010000000000000000000'\n\
    \    >>> decimal_to_binary(41)\n    '111111110100000000000000000000'\n    >>>\
    \ decimal_to_binary(42)\n    '1111111101000000000000000000000'\n    >>> decimal_to_binary(43)\n\
    \    '11111111010000000000000000000000'\n    >>> decimal_to_binary(44)\n    '1111111101000000000000000000000000'\n\
    \    >>> decimal_to_binary(45)\n    '11111111010000000000000000000000000'\n  \
    \  >>> decimal_to_binary(46)\n    '111111110100000000000000000000000000'\n   \
    \ >>> decimal_to_binary(47)\n    '1111111101000000000000000000000000000'\n   \
    \ >>> decimal_to_bin\ndef check(candidate):\n    assert candidate(0) == 'db0db'\n\
    \    assert candidate(32) == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n\
    \    assert candidate(15) == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp116s6u07.py\"\
    , line 11\n    >>> decimal_to_binary(5)\n    ^^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n    >>> decimal_to_binary(0)\n    '0'\n    >>>\
    \ decimal_to_binary(1)\n    '1'\n    >>> decimal_to_binary(2)\n    '10'\n    >>>\
    \ decimal_to_binary(3)\n    '11'\n    >>> decimal_to_binary(4)\n    '100'\n  \
    \  >>> decimal_to_binary(5)\n    '101'\n    >>> decimal_to_binary(6)\n    '110'\n\
    \    >>> decimal_to_binary(7)\n    '111'\n    >>> decimal_to_binary(8)\n    '1000'\n\
    \    >>> decimal_to_binary(9)\n    '1001'\n    >>> decimal_to_binary(10)\n   \
    \ '1010'\n    >>> decimal_to_binary(11)\n    '1011'\n    >>> decimal_to_binary(12)\n\
    \    '1100'\n    >>> decimal_to_binary(13)\n    '1101'\n    >>> decimal_to_binary(14)\n\
    \    '1110'\n    >>> decimal_to_binary(15)\n    '1111'\n    >>> decimal_to_binary(16)\n\
    \    '10000'\n    >>> decimal_to_binary(17)\n    '10001'\n    >>> decimal_to_binary(18)\n\
    \    '10010'\n    >>> decimal_to_binary(19)\n    '10011'\n    >>> decimal_to_binary(20)\n\
    \    '10100'\n    >>> decimal_to_binary(21)\n    '10101'\n    >>> decimal_to_binary(22)\n\
    \    '10110'\n    >>> decimal_to_binary(23)\n    '10111'\n    >>> decimal_to_binary(24)\n\
    \    '11000'\n    >>> decimal_to_binary(25)\n    '11001'\n    >>> decimal_to_binary(26)\n\
    \    '11010'\n    >>> decimal_to_binary(27)\n    '11011'\n    >>> decimal_to_binary(28)\n\
    \    '11100'\n    >>> decimal_to_binary(29)\n    '11101'\n    >>> decimal_to_binary(30)\n\
    \    '11110'\n    >>> decimal_to_binary(31)\n    '11111'\n    >>> decimal_to_binary(32)\n\
    \    '100000'\n    >>> decimal_to_binary(33)\n    '100001'\n    >>> decimal_to_binary(34)\n\
    \    '100010'\n    >>> decimal_to_binary(35)\n    '100011'\n    >>> decimal_to_binary(36)\n\
    \    '100100'\n    >>> decimal_to_binary(37)\n    '100101'\n    >>> decimal_to_binary(38)\n\
    \    '100110'\n    >>> decimal_to_binary(39)\n    '100111'\n    >>> decimal_to_binary(40)\n\
    \    '101000'\n    >>> decimal_to_binary(41)\n    '101001'\n    >>> decimal_to_binary(42)\n\
    \    '101010'\n    >>> decimal_to_binary(\ndef check(candidate):\n    assert candidate(0)\
    \ == 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphgrka1nf.py\"\
    , line 11\n    >>> decimal_to_binary(0)\n    ^^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n    >>> decimal_to_binary(10)\n    '1010'\n \
    \   >>> decimal_to_binary(11)\n    '111'\n    >>> decimal_to_binary(12)\n    '1100'\n\
    \    >>> decimal_to_binary(13)\n    '1101'\n    >>> decimal_to_binary(14)\n  \
    \  '1110'\n    >>> decimal_to_binary(15)\n    '1111'\n    >>> decimal_to_binary(16)\n\
    \    '11100'\n    >>> decimal_to_binary(17)\n    '11101'\n    >>> decimal_to_binary(18)\n\
    \    '11110'\n    >>> decimal_to_binary(19)\n    '11111'\n    >>> decimal_to_binary(20)\n\
    \    '111101'\n    >>> decimal_to_binary(21)\n    '111110'\n    >>> decimal_to_binary(22)\n\
    \    '111111'\n    >>> decimal_to_binary(23)\n    '1111110'\n    >>> decimal_to_binary(24)\n\
    \    '1111111'\n    >>> decimal_to_binary(25)\n    '11111110'\n    >>> decimal_to_binary(26)\n\
    \    '11111111'\n    >>> decimal_to_binary(27)\n    '111111110'\n    >>> decimal_to_binary(28)\n\
    \    '111111111'\n    >>> decimal_to_binary(29)\n    '1111111110'\n    >>> decimal_to_binary(30)\n\
    \    '1111111111'\n    >>> decimal_to_binary(31)\n    '11111111110'\n    >>> decimal_to_binary(32)\n\
    \    '11111111111'\n    >>> decimal_to_binary(33)\n    '111111111110'\n    >>>\
    \ decimal_to_binary(34)\n    '111111111111'\n    >>> decimal_to_binary(35)\n \
    \   '1111111111110'\n    >>> decimal_to_binary(36)\n    '1111111111111'\n    >>>\
    \ decimal_to_binary(37)\n    '1111111111110'\n    >>> decimal_to_binary(38)\n\
    \    '11111111111111'\n    >>> decimal_to_binary(39)\n    '11111111111101'\n \
    \   >>> decimal_to_binary(40)\n    '111111111111111'\n    >>> decimal_to_binary(41)\n\
    \    '111111111111010'\n    >>> decimal_to_binary(42)\n    '1111111111111110'\n\
    \    >>> decimal_to_binary(43)\n    '11111111111111110'\n    >>> decimal_to_binary(44)\n\
    \    '1111111111111111'\n    >>> decimal_to_binary(45)\n    '111111111111111101'\n\
    \    >>> decimal_to_binary(46)\n    '1111111111111111010'\n    >>> decimal_to_binary(47)\n\
    \    '11111111111111110100'\n\ndef check(candidate):\n    assert candidate(0)\
    \ == 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw1erz49s.py\"\
    , line 11\n    >>> decimal_to_binary(10)\n    ^^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n    >>> decimal_to_binary(10)\n    '1010'\n \
    \   >>> decimal_to_binary(5)\n    '101'\n    >>> decimal_to_binary(0)\n    ''\n\
    \    >>> decimal_to_binary(-5)\n    '1111'\n    >>> decimal_to_binary(-10)\n \
    \   '1001'\n    >>> decimal_to_binary(-15)\n    '1111'\n    \"\"\"\n    if decimal\
    \ < 0:\n        decimal = -decimal\n        sign = '-'\n    else:\n        sign\
    \ = ''\n\n    decimal = abs(decimal)\n    binary_string = ''\n    while decimal\
    \ != 0:\n        binary_string = str(decimal % 2) + binary_string\n        decimal\
    \ = decimal // 2\n    binary_string = binary_string[::-1]\n    binary_string =\
    \ 'db' + binary_string\n    return sign + binary_string\n\n\ndef check(candidate):\n\
    \    assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n\
    \    assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy4bcgsri.py\"\
    , line 23\n    \"\"\"\n    ^\nSyntaxError: unterminated triple-quoted string literal\
    \ (detected at line 49)\n"
  exit_code: 1
  status: SyntaxError
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # Output: '1100'\n            \"\"\"\n            decimal = 12\n           \
    \ binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\ndef check(candidate):\n   \
    \ assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n \
    \   assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplb124hzo.py\"\
    , line 11\n    decimal = 12\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n    >>> decimal_to_binary(5)\n    '11001'\n \
    \   >>> decimal_to_binary(10)\n    '1010'\n    >>> decimal_to_binary(15)\n   \
    \ '1111'\n    >>> decimal_to_binary(16)\n    '1111'\n    >>> decimal_to_binary(17)\n\
    \    '1110'\n    >>> decimal_to_binary(18)\n    '1011'\n    >>> decimal_to_binary(19)\n\
    \    '1010'\n    >>> decimal_to_binary(20)\n    '1011'\n    >>> decimal_to_binary(21)\n\
    \    '1010'\n    >>> decimal_to_binary(22)\n    '1011'\n    >>> decimal_to_binary(23)\n\
    \    '1010'\n    >>> decimal_to_binary(24)\n    '1011'\n    >>> decimal_to_binary(25)\n\
    \    '1010'\n    >>> decimal_to_binary(26)\n    '1011'\n    >>> decimal_to_binary(27)\n\
    \    '1010'\n    >>> decimal_to_binary(28)\n    '1011'\n    >>> decimal_to_binary(29)\n\
    \    '1010'\n    >>> decimal_to_binary(30)\n    '1011'\n    >>> decimal_to_binary(31)\n\
    \    '1010'\n    >>> decimal_to_binary(32)\n    '1011'\n    >>> decimal_to_binary(33)\n\
    \    '1010'\n    >>> decimal_to_binary(34)\n    '1011'\n    >>> decimal_to_binary(35)\n\
    \    '1010'\n    >>> decimal_to_binary(36)\n    '1011'\n    >>> decimal_to_binary(37)\n\
    \    '1010'\n    >>> decimal_to_binary(38)\n    '1011'\n    >>> decimal_to_binary(39)\n\
    \    '1010'\n    >>> decimal_to_binary(40)\n    '1011'\n    >>> decimal_to_binary(41)\n\
    \    '1010'\n    >>> decimal_to_binary(42)\n    '1011'\n    >>> decimal_to_binary(43)\n\
    \    '1010'\n    >>> decimal_to_binary(44)\n    '1011'\n    >>> decimal_to_binary(45)\n\
    \    '1010'\n    >>> decimal_to_binary(46)\n    '1011'\n    >>> decimal_to_binary(47)\n\
    \    '1010'\n    >>> decimal_to_binary(48)\n    '1011'\n    >>> decimal_to_binary(49)\n\
    \    '1010'\n    >>> decimal_to_binary(50)\n    '1011'\n    >>> decimal_to_binary(51)\n\
    \    '1010'\n    >>> decimal_to_binary(52)\n    '1011'\n    >>> decimal_to_binary(53)\n\
    \    '1010'\n    >>> decimal_to_binary(54)\n    '1011'\n    >>> decimal_to_binary(55)\n\
    \    '1010'\n    >>> decimal_to_binary(56)\n    '1011'\ndef check(candidate):\n\
    \    assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n\
    \    assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwqm88871.py\"\
    , line 11\n    >>> decimal_to_binary(5)\n    ^^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # Output: '1100'\n            \"\"\"\n            decimal = 12\n           \
    \ binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\ndef check(candidate):\n   \
    \ assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n \
    \   assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6km2fd2f.py\"\
    , line 11\n    decimal = 12\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # Output: '1100'\n            \"\"\"\n            decimal = 12\n           \
    \ binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\ndef check(candidate):\n   \
    \ assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n \
    \   assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdf129c7h.py\"\
    , line 11\n    decimal = 12\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # Output: '1100'\n            \"\"\"\n            decimal = 12\n           \
    \ binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\ndef check(candidate):\n   \
    \ assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n \
    \   assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkxn9ergv.py\"\
    , line 11\n    decimal = 12\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n    >>> decimal_to_binary(0)\n    '0'\n    >>>\
    \ decimal_to_binary(1)\n    '1'\n    >>> decimal_to_binary(10)\n    '1010'\n \
    \   >>> decimal_to_binary(11)\n    '111'\n    >>> decimal_to_binary(100)\n   \
    \ '1100100'\n    >>> decimal_to_binary(101)\n    '1100111'\n    >>> decimal_to_binary(123)\n\
    \    '1100011100'\n    >>> decimal_to_binary(124)\n    '11000111101'\n    >>>\
    \ decimal_to_binary(125)\n    '1100011110010'\n    >>> decimal_to_binary(126)\n\
    \    '11000111100110'\n    >>> decimal_to_binary(127)\n    '110001111001111'\n\
    \    >>> decimal_to_binary(128)\n    '11000111100000000'\n    >>> decimal_to_binary(129)\n\
    \    '110001111000000000'\n    >>> decimal_to_binary(130)\n    '1100011110000000000'\n\
    \    >>> decimal_to_binary(131)\n    '11000111100000000000'\n    >>> decimal_to_binary(132)\n\
    \    '110001111000000000000'\n    >>> decimal_to_binary(133)\n    '1100011110000000000000'\n\
    \    >>> decimal_to_binary(134)\n    '11000111100000000000000'\n    >>> decimal_to_binary(135)\n\
    \    '110001111000000000000000'\n    >>> decimal_to_binary(136)\n    '1100011110000000000000000'\n\
    \    >>> decimal_to_binary(137)\n    '11000111100000000000000000'\n    >>> decimal_to_binary(138)\n\
    \    '110001111000000000000000000'\n    >>> decimal_to_binary(139)\n    '1100011110000000000000000000'\n\
    \    >>> decimal_to_binary(140)\n    '11000111100000000000000000000'\n    >>>\
    \ decimal_to_binary(141)\n    '110001111000000000000000000000'\n    >>> decimal_to_binary(142)\n\
    \    '1100011110000000000000000000000'\n    >>> decimal_to_binary(143)\n    '11000111100000000000000000000000'\n\
    \    >>> decimal_to_binary(144)\n    '110001111000000000000000000000000'\n   \
    \ >>> decimal_to_binary(145)\n    '1100011110000000000000000000000000'\n    >>>\
    \ decimal_to_binary(146)\n    '11000111100000000000000000000000000'\n    >>> decimal_to_binary(147)\n\
    \    '110001111000000000000000000000000000'\n    >>> decimal_to_binary(148)\n\
    \    '1100011110000000000000000000000000000'\n    >>> decimal_to_binary(149)\n\
    \    '11000111100000000000000000000000000000'\n    >>> decimal_to_binary(150)\n\
    \    '110001111000000000000000000000000000000'\ndef check(candidate):\n    assert\
    \ candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert\
    \ candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\n\
    def test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyewa9wng.py\"\
    , line 11\n    >>> decimal_to_binary(0)\n    ^^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\ndef check(candidate):\n\
    \    assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n\
    \    assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpoy3tning.py\"\
    , line 11\n    decimal = 12\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # Output: '1100'\n            \"\"\"\n            decimal = 12\n           \
    \ binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\ndef check(candidate):\n   \
    \ assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n \
    \   assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkft_w01m.py\"\
    , line 11\n    decimal = 12\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n    >>> decimal_to_binary(5)\n    '0000101'\n\
    \    >>> decimal_to_binary(10)\n    '000100'\n    >>> decimal_to_binary(15)\n\
    \    '001001'\n    >>> decimal_to_binary(20)\n    '010010'\n    >>> decimal_to_binary(25)\n\
    \    '100110'\n    >>> decimal_to_binary(30)\n    '101001'\n    >>> decimal_to_binary(35)\n\
    \    '110100'\n    >>> decimal_to_binary(40)\n    '111001'\n    >>> decimal_to_binary(45)\n\
    \    '111101'\n    >>> decimal_to_binary(50)\n    '111110'\n    >>> decimal_to_binary(55)\n\
    \    '111111'\n    >>> decimal_to_binary(60)\n    '111111'\n    >>> decimal_to_binary(65)\n\
    \    '111111'\n    >>> decimal_to_binary(70)\n    '111111'\n    >>> decimal_to_binary(75)\n\
    \    '111111'\n    >>> decimal_to_binary(80)\n    '111111'\n    >>> decimal_to_binary(85)\n\
    \    '111111'\n    >>> decimal_to_binary(90)\n    '111111'\n    >>> decimal_to_binary(95)\n\
    \    '111111'\n    >>> decimal_to_binary(100)\n    '111111'\n    >>> decimal_to_binary(105)\n\
    \    '111111'\n    >>> decimal_to_binary(110)\n    '111111'\n    >>> decimal_to_binary(115)\n\
    \    '111111'\n    >>> decimal_to_binary(120)\n    '111111'\n    >>> decimal_to_binary(125)\n\
    \    '111111'\n    >>> decimal_to_binary(130)\n    '111111'\n    >>> decimal_to_binary(135)\n\
    \    '111111'\n    >>> decimal_to_binary(140)\n    '111111'\n    >>> decimal_to_binary(145)\n\
    \    '111111'\n    >>> decimal_to_binary(150)\n    '111111'\n    >>> decimal_to_binary(155)\n\
    \    '111111'\n    >>> decimal_to_binary(160)\n    '111111'\n    >>> decimal_to_binary(165)\n\
    \    '111111'\n    >>> decimal_to_binary(170)\n    '111111'\n    >>> decimal_to_binary(175)\n\
    \    '111111'\n    >>> decimal_to_binary(180)\n    '111111'\n    >>> decimal_to_binary(185)\n\
    \    '111111'\n    >>> decimal_to_binary(190)\n    '111111'\n    >>> decimal_to_binary(195)\n\
    \    '111111'\n    >>> decimal_to_binary(200)\n    '111111'\n    >>> decimal_to_binary(\n\
    def check(candidate):\n    assert candidate(0) == 'db0db'\n    assert candidate(32)\
    \ == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n    assert candidate(15)\
    \ == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcgyxjbam.py\"\
    , line 11\n    >>> decimal_to_binary(5)\n    ^^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n            decimal = 15\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # Output: '1111'\n            \"\"\"\n            decimal = 15\n           \
    \ binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: 'db1111'\n            \"\"\"\n            decimal = 15\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: 'db1111'\n            \"\"\"\n            decimal = 15\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: 'db1111'\n            \"\"\"\n            decimal = 15\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: 'db1111'\n            \"\"\"\n            decimal = 15\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: 'db1111'\n            \"\"\"\n            decimal = 15\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: 'db1111'\n            \"\"\"\n            decimal = 15\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: 'db1111'\n            \"\"\"\n            decimal = 15\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: 'db1111'\n            \"\"\"\n            decimal = 15\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: 'db1111'\n            \"\"\"\n            decimal = 15\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: 'db1111'\n            \"\"\"\n            decimal = 15\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: 'db1111'\n            \"\"\"\n            decimal = 15\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: 'db1111'\n            \"\"\"\n            decimal = 15\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: 'db1111'\n            \"\"\"\n            decimal = 15\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: 'db1111'\n            \"\"\"\n            decimal = 15\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: 'db1111'\n            \"\"\"\n            decimal = 15\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: 'db1111'\n            \"\"\"\n            decimal = 15\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: 'db1111'\n            \"\"\"\n            decimal = 15\n\
    \            binary_string = decimal_\ndef check(candidate):\n    assert candidate(0)\
    \ == 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp03v705s7.py\"\
    , line 11\n    decimal = 15\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # Output: '1100'\n            \"\"\"\n            decimal = 12\n           \
    \ binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\ndef check(candidate):\n   \
    \ assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n \
    \   assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4yq5512s.py\"\
    , line 11\n    decimal = 12\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # Output: '1100'\n            \"\"\"\n            decimal = 12\n           \
    \ binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\ndef check(candidate):\n   \
    \ assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n \
    \   assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg3wqowji.py\"\
    , line 11\n    decimal = 12\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n    >>> decimal_to_binary(1)\n    'db1'\n   \
    \ >>> decimal_to_binary(2)\n    '11'\n    >>> decimal_to_binary(3)\n    '111'\n\
    \    >>> decimal_to_binary(4)\n    '1111'\n    >>> decimal_to_binary(5)\n    '11111'\n\
    \    >>> decimal_to_binary(6)\n    '111111'\n    >>> decimal_to_binary(7)\n  \
    \  '1111111'\n    >>> decimal_to_binary(8)\n    '11111110'\n    >>> decimal_to_binary(9)\n\
    \    '111111110'\n    >>> decimal_to_binary(10)\n    '1111111101'\n    >>> decimal_to_binary(11)\n\
    \    '11111111010'\n    >>> decimal_to_binary(12)\n    '111111110100'\n    >>>\
    \ decimal_to_binary(13)\n    '1111111101000'\n    >>> decimal_to_binary(14)\n\
    \    '11111111010000'\n    >>> decimal_to_binary(15)\n    '111111110100000'\n\
    \    >>> decimal_to_binary(16)\n    '1111111101000000'\n    >>> decimal_to_binary(17)\n\
    \    '11111111010000000'\n    >>> decimal_to_binary(18)\n    '111111110100000000'\n\
    \    >>> decimal_to_binary(19)\n    '1111111101000000000'\n    >>> decimal_to_binary(20)\n\
    \    '11111111010000000000'\n    >>> decimal_to_binary(21)\n    '111111110100000000000'\n\
    \    >>> decimal_to_binary(22)\n    '1111111101000000000000'\n    >>> decimal_to_binary(23)\n\
    \    '11111111010000000000000'\n    >>> decimal_to_binary(24)\n    '111111110100000000000000'\n\
    \    >>> decimal_to_binary(25)\n    '11111111010000000000000000'\n    >>> decimal_to_binary(26)\n\
    \    '1111111101000000000000000000'\n    >>> decimal_to_binary(27)\n    '11111111010000000000000000000'\n\
    \    >>> decimal_to_binary(28)\n    '111111110100000000000000000000'\n    >>>\
    \ decimal_to_binary(29)\n    '1111111101000000000000000000000'\n    >>> decimal_to_binary(30)\n\
    \    '11111111010000000000000000000000'\n    >>> decimal_to_binary(31)\n    '1111111101000000000000000000000000'\n\
    \    >>> decimal_to_binary(32)\n    '11111111010000000000000000000000000'\n  \
    \  >>> decimal_to_binary(33)\n    '111111110100000000000000000000000000'\n   \
    \ >>> decimal_to_binary(34)\n    '1111111101000000000000000000000000000'\n   \
    \ >>> decimal_to_binary(35)\n    '11111111010000000000000000000000000000'\n  \
    \  >>> decimal_\ndef check(candidate):\n    assert candidate(0) == 'db0db'\n \
    \   assert candidate(32) == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n\
    \    assert candidate(15) == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyp_oj79o.py\"\
    , line 11\n    >>> decimal_to_binary(1)\n    ^^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n    >>> decimal_to_binary(10)\n    '1010'\n \
    \   >>> decimal_to_binary(15)\n    '11110'\n    >>> decimal_to_binary(16)\n  \
    \  '11111'\n    >>> decimal_to_binary(17)\n    '111111'\n    >>> decimal_to_binary(18)\n\
    \    '1111111'\n    >>> decimal_to_binary(19)\n    '11111110'\n    >>> decimal_to_binary(20)\n\
    \    '111111110'\n    >>> decimal_to_binary(21)\n    '1111111101'\n    >>> decimal_to_binary(22)\n\
    \    '11111111010'\n    >>> decimal_to_binary(23)\n    '111111110100'\n    >>>\
    \ decimal_to_binary(24)\n    '1111111101000'\n    >>> decimal_to_binary(25)\n\
    \    '11111111010000'\n    >>> decimal_to_binary(26)\n    '111111110100000'\n\
    \    >>> decimal_to_binary(27)\n    '1111111101000001'\n    >>> decimal_to_binary(28)\n\
    \    '11111111010000010'\n    >>> decimal_to_binary(29)\n    '111111110100000110'\n\
    \    >>> decimal_to_binary(30)\n    '11111111010000011010'\n    >>> decimal_to_binary(31)\n\
    \    '1111111101000001100000'\n    >>> decimal_to_binary(32)\n    '111111110100000110000100'\n\
    \    >>> decimal_to_binary(33)\n    '1111111101000001100001000'\n    >>> decimal_to_binary(34)\n\
    \    '11111111010000011000010000'\n    >>> decimal_to_binary(35)\n    '111111110100000110000100000'\n\
    \    >>> decimal_to_binary(36)\n    '1111111101000001100001000000'\n    >>> decimal_to_binary(37)\n\
    \    '11111111010000011000010000000'\n    >>> decimal_to_binary(38)\n    '111111110100000110000100000000'\n\
    \    >>> decimal_to_binary(39)\n    '1111111101000001100001000000000'\n    >>>\
    \ decimal_to_binary(40)\n    '11111111010000011000010000000000'\n    >>> decimal_to_binary(41)\n\
    \    '111111110100000110000100000000000'\n    >>> decimal_to_binary(42)\n    '1111111101000001100001000000000000'\n\
    \    >>> decimal_to_binary(43)\n    '11111111010000011000010000000000000'\n  \
    \  >>> decimal_to_binary(44)\n    '1111111101000001100001000000000000000'\n  \
    \  >>> decimal_to_binary(45)\n    '11111111010000011000010000000000000000\ndef\
    \ check(candidate):\n    assert candidate(0) == 'db0db'\n    assert candidate(32)\
    \ == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n    assert candidate(15)\
    \ == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5hy5m0ag.py\"\
    , line 74\n    '11111111010000011000010000000000000000\n    ^\nSyntaxError: unterminated\
    \ string literal (detected at line 74)\n"
  exit_code: 1
  status: SyntaxError
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n            Input:\n            decimal = 12\n\
    \            Output:\n            1100\n            \"\"\"\n            Input:\n\
    \            decimal = 13\n            Output:\n            1101\n           \
    \ \"\"\"\n            Input:\n            decimal = 15\n            Output:\n\
    \            1111\n            \"\"\"\n            Input:\n            decimal\
    \ = 20\n            Output:\n            10010\n            \"\"\"\n         \
    \   Input:\n            decimal = 25\n            Output:\n            10011\n\
    \            \"\"\"\n            Input:\n            decimal = 25\n          \
    \  Output:\n            10011\n            \"\"\"\n            Input:\n      \
    \      decimal = 25\n            Output:\n            10011\n            \"\"\"\
    \n            Input:\n            decimal = 25\n            Output:\n        \
    \    10011\n            \"\"\"\n            Input:\n            decimal = 25\n\
    \            Output:\n            10011\n            \"\"\"\n            Input:\n\
    \            decimal = 25\n            Output:\n            10011\n          \
    \  \"\"\"\n            Input:\n            decimal = 25\n            Output:\n\
    \            10011\n            \"\"\"\n            Input:\n            decimal\
    \ = 25\n            Output:\n            10011\n            \"\"\"\n         \
    \   Input:\n            decimal = 25\n            Output:\n            10011\n\
    \            \"\"\"\n            Input:\n            decimal = 25\n          \
    \  Output:\n            10011\n            \"\"\"\n            Input:\n      \
    \      decimal = 25\n            Output:\n            10011\n            \"\"\"\
    \n            Input:\n            decimal = 25\n            Output:\n        \
    \    10011\n            \"\"\"\n            Input:\n            decimal = 25\n\
    \            Output:\n            10011\n            \"\"\"\n            Input:\n\
    \            decimal = 25\n            Output:\n            10011\n          \
    \  \"\"\"\n            Input:\n            decimal = 25\n            Output:\n\
    \            10011\n            \"\"\"\n            Input:\n            decimal\
    \ = 25\n            Output:\n            10011\n            \"\"\"\n         \
    \   Input:\n            decimal = 25\n            Output:\n            10011\n\
    \            \"\"\"\n            Input:\n            decimal = 25\n          \
    \  Output:\n            10011\n            \"\"\"\n            Input:\n      \
    \      decimal = 25\n            Output:\n            10011\n            \"\"\"\
    \n            Input:\n            decimal = 25\n            Output:\n        \
    \    10011\n            \"\"\"\n            Input:\n            decimal = 25\n\
    \            Output:\n            10011\n            \"\"\"\n            Input:\n\
    \            decimal = 25\n            Output:\n            10011\n          \
    \  \"\"\"\n            Input:\n            decimal = 25\n            Output:\n\
    \            10011\n            \"\"\"\n            Input:\n            decimal\
    \ = 25\n            Output:\n            10011\n            \"\"\"\n         \
    \   Input:\n            decimal = 25\n            \ndef check(candidate):\n  \
    \  assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n\
    \    assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu_g8ui9d.py\"\
    , line 11\n    Input:\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n    >>> decimal_to_binary(10)\n    '1010'\n \
    \   >>> decimal_to_binary(11)\n    '1110'\n    >>> decimal_to_binary(12)\n   \
    \ '1100'\n    >>> decimal_to_binary(13)\n    '1101'\n    >>> decimal_to_binary(14)\n\
    \    '1110'\n    >>> decimal_to_binary(15)\n    '1111'\n    >>> decimal_to_binary(16)\n\
    \    '1110'\n    >>> decimal_to_binary(17)\n    '1111'\n    >>> decimal_to_binary(18)\n\
    \    '1110'\n    >>> decimal_to_binary(19)\n    '1111'\n    >>> decimal_to_binary(20)\n\
    \    '1110'\n    >>> decimal_to_binary(21)\n    '1111'\n    >>> decimal_to_binary(22)\n\
    \    '1110'\n    >>> decimal_to_binary(23)\n    '1111'\n    >>> decimal_to_binary(24)\n\
    \    '1110'\n    >>> decimal_to_binary(25)\n    '1111'\n    >>> decimal_to_binary(26)\n\
    \    '1110'\n    >>> decimal_to_binary(27)\n    '1111'\n    >>> decimal_to_binary(28)\n\
    \    '1110'\n    >>> decimal_to_binary(29)\n    '1111'\n    >>> decimal_to_binary(30)\n\
    \    '1110'\n    >>> decimal_to_binary(31)\n    '1111'\n    >>> decimal_to_binary(32)\n\
    \    '1110'\n    >>> decimal_to_binary(33)\n    '1111'\n    >>> decimal_to_binary(34)\n\
    \    '1110'\n    >>> decimal_to_binary(35)\n    '1111'\n    >>> decimal_to_binary(36)\n\
    \    '1110'\n    >>> decimal_to_binary(37)\n    '1111'\n    >>> decimal_to_binary(38)\n\
    \    '1110'\n    >>> decimal_to_binary(39)\n    '1111'\n    >>> decimal_to_binary(40)\n\
    \    '1110'\n    >>> decimal_to_binary(41)\n    '1111'\n    >>> decimal_to_binary(42)\n\
    \    '1110'\n    >>> decimal_to_binary(43)\n    '1111'\n    >>> decimal_to_binary(44)\n\
    \    '1110'\n    >>> decimal_to_binary(45)\n    '1111'\n    >>> decimal_to_binary(46)\n\
    \    '1110'\n    >>> decimal_to_binary(47)\n    '1111'\n    >>> decimal_to_binary(48)\n\
    \    '1110'\n    >>> decimal_to_binary(49)\n    '1111'\n    >>> decimal_to_binary(50)\n\
    \    '1110'\n    >>> decimal_to_binary(51)\n    '1111'\n    >>> decimal_to_binary(52)\n\
    def check(candidate):\n    assert candidate(0) == 'db0db'\n    assert candidate(32)\
    \ == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n    assert candidate(15)\
    \ == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpit0iqs5y.py\"\
    , line 11\n    >>> decimal_to_binary(10)\n    ^^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n            Input: decimal = 15\n           \
    \ Output: '1111'\n            Input: decimal = 15\n            Output: '1111'\n\
    \            Input: decimal = 15\n            Output: '1111'\n            Input:\
    \ decimal = 15\n            Output: '1111'\n            Input: decimal = 15\n\
    \            Output: '1111'\n            Input: decimal = 15\n            Output:\
    \ '1111'\n            Input: decimal = 15\n            Output: '1111'\n      \
    \      Input: decimal = 15\n            Output: '1111'\n            Input: decimal\
    \ = 15\n            Output: '1111'\n            Input: decimal = 15\n        \
    \    Output: '1111'\n            Input: decimal = 15\n            Output: '1111'\n\
    \            Input: decimal = 15\n            Output: '1111'\n            Input:\
    \ decimal = 15\n            Output: '1111'\n            Input: decimal = 15\n\
    \            Output: '1111'\n            Input: decimal = 15\n            Output:\
    \ '1111'\n            Input: decimal = 15\n            Output: '1111'\n      \
    \      Input: decimal = 15\n            Output: '1111'\n            Input: decimal\
    \ = 15\n            Output: '1111'\n            Input: decimal = 15\n        \
    \    Output: '1111'\n            Input: decimal = 15\n            Output: '1111'\n\
    \            Input: decimal = 15\n            Output: '1111'\n            Input:\
    \ decimal = 15\n            Output: '1111'\n            Input: decimal = 15\n\
    \            Output: '1111'\n            Input: decimal = 15\n            Output:\
    \ '1111'\n            Input: decimal = 15\n            Output: '1111'\n      \
    \      Input: decimal = 15\n            Output: '1111'\n            Input: decimal\
    \ = 15\n            Output: '1111'\n            Input: decimal = 15\n        \
    \    Output: '1111'\n            Input: decimal = 15\n            Output: '1111'\n\
    \            Input: decimal = 15\n            Output: '1111'\n            Input:\
    \ decimal = 15\n            Output: '1111'\n            Input: decimal = 15\n\
    \            Output: '1111'\n            Input: decimal = 15\n            Output:\
    \ '1111'\n            Input: decimal = 15\n            Output: '1111'\n      \
    \      Input: decimal = 15\n            Output: '1111'\n            Input: decimal\
    \ = 15\n            Output: '1111'\n            Input: decimal = 15\n        \
    \    Output: '1111'\n            Input: decimal = 15\n            Output: '1111'\n\
    \            Input: decimal = 15\n            Output: '1111'\n            Input:\
    \ decimal = \ndef check(candidate):\n    assert candidate(0) == 'db0db'\n    assert\
    \ candidate(32) == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n\
    \    assert candidate(15) == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbeg_6igx.py\"\
    , line 11\n    Input: decimal = 15\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # Output: '1100'\n            \"\"\"\n            decimal = 12\n           \
    \ binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\ndef check(candidate):\n   \
    \ assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n \
    \   assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwjqivpdn.py\"\
    , line 11\n    decimal = 12\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n            decimal = 15\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1111'\n            \"\"\"\n            decimal = 15\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1111'\n            \"\"\"\n            decimal = 15\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1111'\n            \"\"\"\n            decimal = 15\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1111'\n            \"\"\"\n            decimal = 15\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1111'\n            \"\"\"\n            decimal = 15\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1111'\n            \"\"\"\n            decimal = 15\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1111'\n            \"\"\"\n            decimal = 15\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1111'\n            \"\"\"\n            decimal = 15\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1111'\n            \"\"\"\n            decimal = 15\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1111'\n            \"\"\"\n            decimal = 15\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1111'\n            \"\"\"\n            decimal = 15\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1111'\n            \"\"\"\n            decimal = 15\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1111'\n            \"\"\"\n            decimal = 15\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1111'\n            \"\"\"\n            decimal = 15\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1111'\n            \"\"\"\n            decimal = 15\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1111'\n            \"\"\"\n            decimal = 15\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1111'\n            \"\"\"\n            decimal = 15\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1111'\n            \"\"\"\n            decimal = 15\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1111'\n            \"\"\"\n            decimal = 15\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\ndef check(candidate):\n\
    \    assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n\
    \    assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph_6ewbay.py\"\
    , line 11\n    decimal = 15\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n    >>> decimal_to_binary(10)\n    '1010'\n \
    \   >>> decimal_to_binary(11)\n    '1110'\n    >>> decimal_to_binary(12)\n   \
    \ '1100'\n    >>> decimal_to_binary(13)\n    '1101'\n    >>> decimal_to_binary(14)\n\
    \    '1110'\n    >>> decimal_to_binary(15)\n    '1111'\n    >>> decimal_to_binary(16)\n\
    \    '1110'\n    >>> decimal_to_binary(17)\n    '1111'\n    >>> decimal_to_binary(18)\n\
    \    '1110'\n    >>> decimal_to_binary(19)\n    '1111'\n    >>> decimal_to_binary(20)\n\
    \    '1110'\n    >>> decimal_to_binary(21)\n    '1111'\n    >>> decimal_to_binary(22)\n\
    \    '1110'\n    >>> decimal_to_binary(23)\n    '1111'\n    >>> decimal_to_binary(24)\n\
    \    '1110'\n    >>> decimal_to_binary(25)\n    '1111'\n    >>> decimal_to_binary(26)\n\
    \    '1110'\n    >>> decimal_to_binary(27)\n    '1111'\n    >>> decimal_to_binary(28)\n\
    \    '1110'\n    >>> decimal_to_binary(29)\n    '1111'\n    >>> decimal_to_binary(30)\n\
    \    '1110'\n    >>> decimal_to_binary(31)\n    '1111'\n    >>> decimal_to_binary(32)\n\
    \    '1110'\n    >>> decimal_to_binary(33)\n    '1111'\n    >>> decimal_to_binary(34)\n\
    \    '1110'\n    >>> decimal_to_binary(35)\n    '1111'\n    >>> decimal_to_binary(36)\n\
    \    '1110'\n    >>> decimal_to_binary(37)\n    '1111'\n    >>> decimal_to_binary(38)\n\
    \    '1110'\n    >>> decimal_to_binary(39)\n    '1111'\n    >>> decimal_to_binary(40)\n\
    \    '1110'\n    >>> decimal_to_binary(41)\n    '1111'\n    >>> decimal_to_binary(42)\n\
    \    '1110'\n    >>> decimal_to_binary(43)\n    '1111'\n    >>> decimal_to_binary(44)\n\
    \    '1110'\n    >>> decimal_to_binary(45)\n    '1111'\n    >>> decimal_to_binary(46)\n\
    \    '1110'\n    >>> decimal_to_binary(47)\n    '1111'\n    >>> decimal_to_binary(48)\n\
    \    '1110'\n    >>> decimal_to_binary(49)\n    '1111'\n    >>> decimal_to_binary(50)\n\
    \    '1110'\n    >>> decimal_to_binary(51)\n    '1111'\n    >>> decimal_to_binary(52)\n\
    def check(candidate):\n    assert candidate(0) == 'db0db'\n    assert candidate(32)\
    \ == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n    assert candidate(15)\
    \ == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphccq44q7.py\"\
    , line 11\n    >>> decimal_to_binary(10)\n    ^^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n            Input: decimal = 15\n           \
    \ Output: '1111'\n            \"\"\"\n            Input: decimal = 15\n      \
    \      Output: '1111'\n            \"\"\"\n            Input: decimal = 15\n \
    \           Output: '1111'\n            \"\"\"\n            Input: decimal = 15\n\
    \            Output: '1111'\n            \"\"\"\n            Input: decimal =\
    \ 15\n            Output: '1111'\n            \"\"\"\n            Input: decimal\
    \ = 15\n            Output: '1111'\n            \"\"\"\n            Input: decimal\
    \ = 15\n            Output: '1111'\n            \"\"\"\n            Input: decimal\
    \ = 15\n            Output: '1111'\n            \"\"\"\n            Input: decimal\
    \ = 15\n            Output: '1111'\n            \"\"\"\n            Input: decimal\
    \ = 15\n            Output: '1111'\n            \"\"\"\n            Input: decimal\
    \ = 15\n            Output: '1111'\n            \"\"\"\n            Input: decimal\
    \ = 15\n            Output: '1111'\n            \"\"\"\n            Input: decimal\
    \ = 15\n            Output: '1111'\n            \"\"\"\n            Input: decimal\
    \ = 15\n            Output: '1111'\n            \"\"\"\n            Input: decimal\
    \ = 15\n            Output: '1111'\n            \"\"\"\n            Input: decimal\
    \ = 15\n            Output: '1111'\n            \"\"\"\n            Input: decimal\
    \ = 15\n            Output: '1111'\n            \"\"\"\n            Input: decimal\
    \ = 15\n            Output: '1111'\n            \"\"\"\n            Input: decimal\
    \ = 15\n            Output: '1111'\n            \"\"\"\n            Input: decimal\
    \ = 15\n            Output: '1111'\n            \"\"\"\n            Input: decimal\
    \ = 15\n            Output: '1111'\n            \"\"\"\n            Input: decimal\
    \ = 15\n            Output: '1111'\n            \"\"\"\n            Input: decimal\
    \ = 15\n            Output: '1111'\n            \"\"\"\n            Input: decimal\
    \ = 15\n            Output: '1111'\n            \"\"\"\n            Input: decimal\
    \ = 15\n            Output: '1111'\n            \"\"\"\n            Input: decimal\
    \ = 15\n            Output: '1111'\n            \"\"\"\n            Input: decimal\
    \ = 15\n            Output: '1111'\n            \"\"\"\n            Input: decimal\
    \ = 15\n            Output: '1111'\n            \"\"\"\n            Input: decimal\
    \ = 15\n            Output: '1111'\n            \"\"\"\n            Input: decimal\
    \ = 15\n            Output: '1111'\n            \"\"\"\n            Input: decimal\
    \ = 15\n            Output: '1111'\n            \"\"\"\n            Input: decimal\
    \ = 15\n            Output: '1111'\n            \"\"\"\n            Input: decimal\
    \ = 15\n            Output: '1111'\n            \"\"\"\n            Input: decimal\
    \ = 15\n            Output: '1111'\n            \"\"\"\n            Input\ndef\
    \ check(candidate):\n    assert candidate(0) == 'db0db'\n    assert candidate(32)\
    \ == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n    assert candidate(15)\
    \ == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbd1qhkp8.py\"\
    , line 11\n    Input: decimal = 15\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # >>> '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # >>> '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # >>> '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # >>> '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # >>> '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # >>> '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # >>> '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # >>> '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # >>> '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # >>> '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # >>> '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # >>> '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # >>> '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # >>> '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # >>> '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # >>> '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # >>> '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # >>> '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # >>> '1100'\n            \"\"\"\ndef check(candidate):\n    assert candidate(0)\
    \ == 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqgff_dvt.py\"\
    , line 11\n    decimal = 12\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # Output: '1100'\n            \"\"\"\n            decimal = 12\n           \
    \ binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\ndef check(candidate):\n   \
    \ assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n \
    \   assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm48krc2e.py\"\
    , line 11\n    decimal = 12\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n            Input: decimal = 12\n           \
    \ Output: '1100'\n            Explanation: 12 in binary is 1100.\n           \
    \ \"\"\"\n            Input: decimal = 12\n            Output: '1100'\n      \
    \      Explanation: 12 in binary is 1100.\n            \"\"\"\n            Input:\
    \ decimal = 12\n            Output: '1100'\n            Explanation: 12 in binary\
    \ is 1100.\n            \"\"\"\n            Input: decimal = 12\n            Output:\
    \ '1100'\n            Explanation: 12 in binary is 1100.\n            \"\"\"\n\
    \            Input: decimal = 12\n            Output: '1100'\n            Explanation:\
    \ 12 in binary is 1100.\n            \"\"\"\n            Input: decimal = 12\n\
    \            Output: '1100'\n            Explanation: 12 in binary is 1100.\n\
    \            \"\"\"\n            Input: decimal = 12\n            Output: '1100'\n\
    \            Explanation: 12 in binary is 1100.\n            \"\"\"\n        \
    \    Input: decimal = 12\n            Output: '1100'\n            Explanation:\
    \ 12 in binary is 1100.\n            \"\"\"\n            Input: decimal = 12\n\
    \            Output: '1100'\n            Explanation: 12 in binary is 1100.\n\
    \            \"\"\"\n            Input: decimal = 12\n            Output: '1100'\n\
    \            Explanation: 12 in binary is 1100.\n            \"\"\"\n        \
    \    Input: decimal = 12\n            Output: '1100'\n            Explanation:\
    \ 12 in binary is 1100.\n            \"\"\"\n            Input: decimal = 12\n\
    \            Output: '1100'\n            Explanation: 12 in binary is 1100.\n\
    \            \"\"\"\n            Input: decimal = 12\n            Output: '1100'\n\
    \            Explanation: 12 in binary is 1100.\n            \"\"\"\n        \
    \    Input: decimal = 12\n            Output: '1100'\n            Explanation:\
    \ 12 in binary is 1100.\n            \"\"\"\n            Input: decimal = 12\n\
    \            Output: '1100'\n            Explanation: 12 in binary is 1100.\n\
    \            \"\"\"\n            Input: decimal = 12\n            Output: '1100'\n\
    \            Explanation: 12 in binary is 1100.\n            \"\"\"\n        \
    \    Input: decimal = 12\n            Output: '1100'\n            Explanation:\
    \ 12 in binary is 1100.\n            \"\"\"\n            Input: decimal = 12\n\
    \            Output: '1100'\n            Explanation: 12 in binary is 1100.\n\
    \            \"\"\"\n            Input: decimal = 12\n            Output: '1100'\n\
    \            Explanation: 12 in binary is 1100.\n            \"\"\"\ndef check(candidate):\n\
    \    assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n\
    \    assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpninxdwk2.py\"\
    , line 11\n    Input: decimal = 12\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n    >>> decimal_to_binary(1)\n    '1'\n    >>>\
    \ decimal_to_binary(10)\n    '1010'\n    >>> decimal_to_binary(16)\n    '10100'\n\
    \    >>> decimal_to_binary(17)\n    '11000'\n    >>> decimal_to_binary(18)\n \
    \   '11100'\n    >>> decimal_to_binary(19)\n    '11110'\n    >>> decimal_to_binary(20)\n\
    \    '11111'\n    >>> decimal_to_binary(21)\n    '111111'\n    >>> decimal_to_binary(22)\n\
    \    '1111111'\n    >>> decimal_to_binary(23)\n    '11111110'\n    >>> decimal_to_binary(24)\n\
    \    '111111100'\n    >>> decimal_to_binary(25)\n    '1111111000'\n    >>> decimal_to_binary(26)\n\
    \    '11111110000'\n    >>> decimal_to_binary(27)\n    '111111100000'\n    >>>\
    \ decimal_to_binary(28)\n    '1111111000000'\n    >>> decimal_to_binary(29)\n\
    \    '11111110000000'\n    >>> decimal_to_binary(30)\n    '111111100000000'\n\
    \    >>> decimal_to_binary(31)\n    '1111111000000000'\n    >>> decimal_to_binary(32)\n\
    \    '11111110000000000'\n    >>> decimal_to_binary(33)\n    '111111100000000000'\n\
    \    >>> decimal_to_binary(34)\n    '1111111000000000000'\n    >>> decimal_to_binary(35)\n\
    \    '11111110000000000000'\n    >>> decimal_to_binary(36)\n    '111111100000000000000'\n\
    \    >>> decimal_to_binary(37)\n    '1111111000000000000000'\n    >>> decimal_to_binary(38)\n\
    \    '11111110000000000000000'\n    >>> decimal_to_binary(39)\n    '111111100000000000000000'\n\
    \    >>> decimal_to_binary(40)\n    '1111111000000000000000000'\n    >>> decimal_to_binary(41)\n\
    \    '11111110000000000000000000'\n    >>> decimal_to_binary(42)\n    '111111100000000000000000000'\n\
    \    >>> decimal_to_binary(43)\n    '1111111000000000000000000000'\n    >>> decimal_to_binary(44)\n\
    \    '11111110000000000000000000000'\n    >>> decimal_to_binary(45)\n    '111111100000000000000000000000'\n\
    \    >>> decimal_to_binary(46)\n    '1111111000000000000000000000000'\n    >>>\
    \ decimal_to_binary(47)\n    '11111110000000000000000000000000'\n    >>> decimal_to_binary(48)\n\
    \    '111111100000000000000000000000000'\n    >>> decimal_to_binary(49)\n    '1111111000000000000000000000000000'\n\
    \ndef check(candidate):\n    assert candidate(0) == 'db0db'\n    assert candidate(32)\
    \ == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n    assert candidate(15)\
    \ == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1u6rcs6m.py\"\
    , line 11\n    >>> decimal_to_binary(1)\n    ^^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # Output: '1100'\n            \"\"\"\n            decimal = 12\n           \
    \ binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\ndef check(candidate):\n   \
    \ assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n \
    \   assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzrg8ryqu.py\"\
    , line 11\n    decimal = 12\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # Output: '1100'\n            \"\"\"\n            decimal = 12\n           \
    \ binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\ndef check(candidate):\n   \
    \ assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n \
    \   assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfiq4u_1v.py\"\
    , line 11\n    decimal = 12\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n    >>> decimal_to_binary(1)\n    '1'\n    >>>\
    \ decimal_to_binary(2)\n    '10'\n    >>> decimal_to_binary(3)\n    '111'\n  \
    \  >>> decimal_to_binary(4)\n    '1010'\n    >>> decimal_to_binary(5)\n    '10111'\n\
    \    >>> decimal_to_binary(6)\n    '111010'\n    >>> decimal_to_binary(7)\n  \
    \  '11101111'\n    >>> decimal_to_binary(8)\n    '111011111'\n    >>> decimal_to_binary(9)\n\
    \    '1110111111'\n    >>> decimal_to_binary(10)\n    '11101111111'\n    >>> decimal_to_binary(11)\n\
    \    '111011111111'\n    >>> decimal_to_binary(12)\n    '1110111111111'\n    >>>\
    \ decimal_to_binary(13)\n    '11101111111110'\n    >>> decimal_to_binary(14)\n\
    \    '111011111111110'\n    >>> decimal_to_binary(15)\n    '1110111111111101'\n\
    \    >>> decimal_to_binary(16)\n    '11101111111111010'\n    >>> decimal_to_binary(17)\n\
    \    '111011111111110100'\n    >>> decimal_to_binary(18)\n    '1110111111111101000'\n\
    \    >>> decimal_to_binary(19)\n    '11101111111111010000'\n    >>> decimal_to_binary(20)\n\
    \    '111011111111110100000'\n    >>> decimal_to_binary(21)\n    '1110111111111101000000'\n\
    \    >>> decimal_to_binary(22)\n    '11101111111111010000000'\n    >>> decimal_to_binary(23)\n\
    \    '111011111111110100000000'\n    >>> decimal_to_binary(24)\n    '1110111111111101000000000'\n\
    \    >>> decimal_to_binary(25)\n    '11101111111111010000000000'\n    >>> decimal_to_binary(26)\n\
    \    '111011111111110100000000000'\n    >>> decimal_to_binary(27)\n    '1110111111111101000000000000'\n\
    \    >>> decimal_to_binary(28)\n    '11101111111111010000000000000'\n    >>> decimal_to_binary(29)\n\
    \    '111011111111110100000000000000'\n    >>> decimal_to_binary(30)\n    '11101111111111010000000000000000'\n\
    \    >>> decimal_to_binary(31)\n    '1110111111111101000000000000000000'\n   \
    \ >>> decimal_to_binary(32)\n    '11101111111111010000000000000000000'\n    >>>\
    \ decimal_to_binary(33)\n    '111011111111110100000000000000000000'\n    >>> decimal_to_binary(34)\n\
    \ndef check(candidate):\n    assert candidate(0) == 'db0db'\n    assert candidate(32)\
    \ == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n    assert candidate(15)\
    \ == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbp4sssec.py\"\
    , line 11\n    >>> decimal_to_binary(1)\n    ^^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # Output: '1100'\n            \"\"\"\n            decimal = 12\n           \
    \ binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\ndef check(candidate):\n   \
    \ assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n \
    \   assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfy8nzw40.py\"\
    , line 11\n    decimal = 12\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n            Input: decimal = 15\n           \
    \ Output: '1111'\n            \"\"\"\n            Input: decimal = 15\n      \
    \      Output: '1111'\n            \"\"\"\n            Input: decimal = 15\n \
    \           Output: '1111'\n            \"\"\"\n            Input: decimal = 15\n\
    \            Output: '1111'\n            \"\"\"\n            Input: decimal =\
    \ 15\n            Output: '1111'\n            \"\"\"\n            Input: decimal\
    \ = 15\n            Output: '1111'\n            \"\"\"\n            Input: decimal\
    \ = 15\n            Output: '1111'\n            \"\"\"\n            Input: decimal\
    \ = 15\n            Output: '1111'\n            \"\"\"\n            Input: decimal\
    \ = 15\n            Output: '1111'\n            \"\"\"\n            Input: decimal\
    \ = 15\n            Output: '1111'\n            \"\"\"\n            Input: decimal\
    \ = 15\n            Output: '1111'\n            \"\"\"\n            Input: decimal\
    \ = 15\n            Output: '1111'\n            \"\"\"\n            Input: decimal\
    \ = 15\n            Output: '1111'\n            \"\"\"\n            Input: decimal\
    \ = 15\n            Output: '1111'\n            \"\"\"\n            Input: decimal\
    \ = 15\n            Output: '1111'\n            \"\"\"\n            Input: decimal\
    \ = 15\n            Output: '1111'\n            \"\"\"\n            Input: decimal\
    \ = 15\n            Output: '1111'\n            \"\"\"\n            Input: decimal\
    \ = 15\n            Output: '1111'\n            \"\"\"\n            Input: decimal\
    \ = 15\n            Output: '1111'\n            \"\"\"\n            Input: decimal\
    \ = 15\n            Output: '1111'\n            \"\"\"\n            Input: decimal\
    \ = 15\n            Output: '1111'\n            \"\"\"\n            Input: decimal\
    \ = 15\n            Output: '1111'\n            \"\"\"\n            Input: decimal\
    \ = 15\n            Output: '1111'\n            \"\"\"\n            Input: decimal\
    \ = 15\n            Output: '1111'\n            \"\"\"\n            Input: decimal\
    \ = 15\n            Output: '1111'\n            \"\"\"\n            Input: decimal\
    \ = 15\n            Output: '1111'\n            \"\"\"\n            Input: decimal\
    \ = 15\n            Output: '1111'\n            \"\"\"\n            Input: decimal\
    \ = 15\n            Output: '1111'\n            \"\"\"\n            Input: decimal\
    \ = 15\n            Output: '1111'\n            \"\"\"\n            Input: decimal\
    \ = 15\n            Output: '1111'\n            \"\"\"\n            Input: decimal\
    \ = 15\n            Output: '1111'\n            \"\"\"\n            Input: decimal\
    \ = 15\n            Output: '1111'\n            \"\"\"\n            Input: decimal\
    \ = 15\n            Output: '1111'\n            \"\"\"\n            Input: decimal\
    \ = 15\n            Output: '1111'\n            \"\"\"\n            Input\ndef\
    \ check(candidate):\n    assert candidate(0) == 'db0db'\n    assert candidate(32)\
    \ == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n    assert candidate(15)\
    \ == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4_khh8sb.py\"\
    , line 11\n    Input: decimal = 15\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # Output: '1100'\n            \"\"\"\n            decimal = 12\n           \
    \ binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\ndef check(candidate):\n   \
    \ assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n \
    \   assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp07csy8mr.py\"\
    , line 11\n    decimal = 12\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # Output: '1100'\n            \"\"\"\n            decimal = 12\n           \
    \ binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\ndef check(candidate):\n   \
    \ assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n \
    \   assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8lyh175j.py\"\
    , line 11\n    decimal = 12\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # Output: '1100'\n            \"\"\"\n            decimal = 12\n           \
    \ binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\ndef check(candidate):\n   \
    \ assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n \
    \   assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp71fx_55x.py\"\
    , line 11\n    decimal = 12\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\ndef check(candidate):\n\
    \    assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n\
    \    assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3az8zo2v.py\"\
    , line 11\n    decimal = 12\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # Output: '1100'\n            \"\"\"\n            decimal = 12\n           \
    \ binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\ndef check(candidate):\n   \
    \ assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n \
    \   assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfx2km7ue.py\"\
    , line 11\n    decimal = 12\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # Output: '1100'\n            \"\"\"\n            decimal = 12\n           \
    \ binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\ndef check(candidate):\n   \
    \ assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n \
    \   assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfraaaqf1.py\"\
    , line 11\n    decimal = 12\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # Output: '1100'\n            \"\"\"\n            decimal = 12\n           \
    \ binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\ndef check(candidate):\n   \
    \ assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n \
    \   assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmposv7y81d.py\"\
    , line 11\n    decimal = 12\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # Output: '1100'\n            \"\"\"\n            decimal = 12\n           \
    \ binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\ndef check(candidate):\n   \
    \ assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n \
    \   assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps3h8jfam.py\"\
    , line 11\n    decimal = 12\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n            decimal = 15\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # Output: '1111'\n            \"\"\"\n            decimal = 15\n           \
    \ binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1111'\n            \"\"\"\n            decimal = 15\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1111'\n            \"\"\"\n            decimal = 15\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1111'\n            \"\"\"\n            decimal = 15\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1111'\n            \"\"\"\n            decimal = 15\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1111'\n            \"\"\"\n            decimal = 15\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1111'\n            \"\"\"\n            decimal = 15\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1111'\n            \"\"\"\n            decimal = 15\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1111'\n            \"\"\"\n            decimal = 15\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1111'\n            \"\"\"\n            decimal = 15\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1111'\n            \"\"\"\n            decimal = 15\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1111'\n            \"\"\"\n            decimal = 15\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1111'\n            \"\"\"\n            decimal = 15\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1111'\n            \"\"\"\n            decimal = 15\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1111'\n            \"\"\"\n            decimal = 15\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1111'\n            \"\"\"\n            decimal = 15\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1111'\n            \"\"\"\n            decimal = 15\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1111'\n            \"\"\"\n            decimal = 15\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1111'\n            \"\"\"\ndef check(candidate):\n   \
    \ assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n \
    \   assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7ufsw4a5.py\"\
    , line 11\n    decimal = 15\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n    >>> decimal_to_binary(5)\n    '111'\n   \
    \ >>> decimal_to_binary(10)\n    '1010'\n    >>> decimal_to_binary(15)\n    '1111'\n\
    \    >>> decimal_to_binary(20)\n    '111111'\n    >>> decimal_to_binary(25)\n\
    \    '1111111'\n    >>> decimal_to_binary(30)\n    '111111110'\n    >>> decimal_to_binary(35)\n\
    \    '11111111010'\n    >>> decimal_to_binary(40)\n    '1111111101010'\n    >>>\
    \ decimal_to_binary(45)\n    '11111111010101'\n    >>> decimal_to_binary(50)\n\
    \    '11111111010101010'\n    >>> decimal_to_binary(55)\n    '111111110101010101'\n\
    \    >>> decimal_to_binary(60)\n    '111111110101010101010'\n    >>> decimal_to_binary(65)\n\
    \    '1111111101010101010101'\n    >>> decimal_to_binary(70)\n    '1111111101010101010101010'\n\
    \    >>> decimal_to_binary(75)\n    '111111110101010101010101010'\n    >>> decimal_to_binary(80)\n\
    \    '11111111010101010101010101010'\n    >>> decimal_to_binary(85)\n    '1111111101010101010101010101010'\n\
    \    >>> decimal_to_binary(90)\n    '111111110101010101010101010101010'\n    >>>\
    \ decimal_to_binary(95)\n    '1111111101010101010101010101010101010'\n    >>>\
    \ decimal_to_binary(100)\n    '11111111010101010101010101010101010101010'\n  \
    \  >>> decimal_to_binary(105)\n    '111111110101010101010101010101010101010101010'\n\
    \    >>> decimal_to_binary(110)\n    '1111111101010101010101010101010101010101010101010'\n\
    \    >>> decimal_to_binary(115)\n    '11111111010101010101010101010101010101010101010101010'\n\
    \    >>> decimal_to_binary(120)\n    '111111110101010101010101010101010101010101010101010101010'\n\
    \    >>> decimal_to_binary(125)\n    '1111111101010101010101010101010101010101010101010101010101010'\n\
    \    >>> decimal_to_binary(130)\n    '11111111010101010101010101010101010101010101010101010101010101010'\n\
    \    >>> decimal_to_binary(135)\n    '111111110101010101010101010101010101010101010101010101010101010101010'\n\
    \    >>> decimal_to_binary(140)\n    '11111111010101010101010101010\ndef check(candidate):\n\
    \    assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n\
    \    assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4lxm59p3.py\"\
    , line 66\n    '11111111010101010101010101010\n    ^\nSyntaxError: unterminated\
    \ string literal (detected at line 66)\n"
  exit_code: 1
  status: SyntaxError
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # Output: '1100'\n            \"\"\"\n            decimal = 12\n           \
    \ binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\ndef check(candidate):\n   \
    \ assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n \
    \   assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8mrk9_by.py\"\
    , line 11\n    decimal = 12\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # >>> '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # >>> '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # >>> '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # >>> '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # >>> '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # >>> '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # >>> '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # >>> '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # >>> '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # >>> '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # >>> '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # >>> '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # >>> '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # >>> '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # >>> '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # >>> '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # >>> '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # >>> '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # >>> '1100'\n            \"\"\"\ndef check(candidate):\n    assert candidate(0)\
    \ == 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf0ycn93d.py\"\
    , line 11\n    decimal = 12\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n    >>> decimal_to_binary(10)\n    '1010'\n \
    \   >>> decimal_to_binary(20)\n    '11100'\n    >>> decimal_to_binary(30)\n  \
    \  '11110'\n    >>> decimal_to_binary(40)\n    '111110'\n    >>> decimal_to_binary(50)\n\
    \    '111111'\n    >>> decimal_to_binary(60)\n    '1111110'\n    >>> decimal_to_binary(70)\n\
    \    '11111110'\n    >>> decimal_to_binary(80)\n    '111111110'\n    >>> decimal_to_binary(90)\n\
    \    '1111111101'\n    >>> decimal_to_binary(100)\n    '11111111010'\n    >>>\
    \ decimal_to_binary(200)\n    '111111110100'\n    >>> decimal_to_binary(300)\n\
    \    '1111111101000'\n    >>> decimal_to_binary(400)\n    '11111111010000'\n \
    \   >>> decimal_to_binary(500)\n    '111111110100000'\n    >>> decimal_to_binary(600)\n\
    \    '1111111101000000'\n    >>> decimal_to_binary(700)\n    '11111111010000000'\n\
    \    >>> decimal_to_binary(800)\n    '111111110100000000'\n    >>> decimal_to_binary(900)\n\
    \    '1111111101000000000'\n    >>> decimal_to_binary(1000)\n    '11111111010000000000'\n\
    \    >>> decimal_to_binary(2000)\n    '111111110100000000000'\n    >>> decimal_to_binary(3000)\n\
    \    '1111111101000000000000'\n    >>> decimal_to_binary(4000)\n    '11111111010000000000000'\n\
    \    >>> decimal_to_binary(5000)\n    '111111110100000000000000'\n    >>> decimal_to_binary(6000)\n\
    \    '11111111010000000000000000'\n    >>> decimal_to_binary(7000)\n    '111111110100000000000000000'\n\
    \    >>> decimal_to_binary(8000)\n    '1111111101000000000000000000'\n    >>>\
    \ decimal_to_binary(9000)\n    '11111111010000000000000000000'\n    >>> decimal_to_binary(10000)\n\
    \    '111111110100000000000000000000'\n    >>> decimal_to_binary(100000)\n   \
    \ '1111111101000000000000000000000'\n    >>> decimal_to_binary(1000000)\n    '11111111010000000000000000000000'\n\
    \    >>> decimal_to_binary(10000000)\n    '1111111101000000000000000000000000'\n\
    \    >>> decimal_to_binary(100000000)\n    '11111111010000000000000000000000000'\n\
    \    >>> decimal_to_binary(1000000000)\n    '111111110100000000000000000000000000'\n\
    \    >>> decimal_to_binary(10000000000)\n    '111111110100000000000000000000000000\n\
    def check(candidate):\n    assert candidate(0) == 'db0db'\n    assert candidate(32)\
    \ == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n    assert candidate(15)\
    \ == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp34z48s32.py\"\
    , line 78\n    '111111110100000000000000000000000000\n    ^\nSyntaxError: unterminated\
    \ string literal (detected at line 78)\n"
  exit_code: 1
  status: SyntaxError
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # Output: '1100'\n            \"\"\"\n            decimal = 12\n           \
    \ binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\ndef check(candidate):\n   \
    \ assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n \
    \   assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2ew2rct4.py\"\
    , line 11\n    decimal = 12\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n    >>> decimal_to_binary(10)\n    '1010'\n \
    \   >>> decimal_to_binary(5)\n    '101'\n    >>> decimal_to_binary(-5)\n    '1111'\n\
    \    >>> decimal_to_binary(0)\n    '0'\n    >>> decimal_to_binary(1)\n    '1'\n\
    \    >>> decimal_to_binary(2)\n    '10'\n    >>> decimal_to_binary(3)\n    '11'\n\
    \    >>> decimal_to_binary(4)\n    '100'\n    >>> decimal_to_binary(5)\n    '101'\n\
    \    >>> decimal_to_binary(6)\n    '110'\n    >>> decimal_to_binary(7)\n    '111'\n\
    \    >>> decimal_to_binary(8)\n    '1000'\n    >>> decimal_to_binary(9)\n    '1001'\n\
    \    >>> decimal_to_binary(10)\n    '1010'\n    >>> decimal_to_binary(11)\n  \
    \  '1011'\n    >>> decimal_to_binary(12)\n    '1100'\n    >>> decimal_to_binary(13)\n\
    \    '1101'\n    >>> decimal_to_binary(14)\n    '1110'\n    >>> decimal_to_binary(15)\n\
    \    '1111'\n    >>> decimal_to_binary(16)\n    '10000'\n    >>> decimal_to_binary(17)\n\
    \    '10001'\n    >>> decimal_to_binary(18)\n    '10010'\n    >>> decimal_to_binary(19)\n\
    \    '10011'\n    >>> decimal_to_binary(20)\n    '10100'\n    >>> decimal_to_binary(21)\n\
    \    '10101'\n    >>> decimal_to_binary(22)\n    '101010'\n    >>> decimal_to_binary(23)\n\
    \    '101011'\n    >>> decimal_to_binary(24)\n    '110000'\n    >>> decimal_to_binary(25)\n\
    \    '110001'\n    >>> decimal_to_binary(26)\n    '1100010'\n    >>> decimal_to_binary(27)\n\
    \    '1100011'\n    >>> decimal_to_binary(28)\n    '1100100'\n    >>> decimal_to_binary(29)\n\
    \    '1100101'\n    >>> decimal_to_binary(30)\n    '11001100'\n    >>> decimal_to_binary(31)\n\
    \    '11001101'\n    >>> decimal_to_binary(32)\n    '11001110'\n    >>> decimal_to_binary(33)\n\
    \    '11001111'\n    >>> decimal_to_binary(34)\n    '11010000'\n    >>> decimal_to_binary(35)\n\
    \    '11010001'\n    >>> decimal_to_binary(36)\n    '11010010'\n    >>> decimal_to_binary(37)\n\
    \    '11010011'\n    >>> decimal_to_binary(38)\n    '11010100'\n    >>> decimal_to_binary(39\n\
    def check(candidate):\n    assert candidate(0) == 'db0db'\n    assert candidate(32)\
    \ == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n    assert candidate(15)\
    \ == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpca8unhc9.py\"\
    , line 11\n    >>> decimal_to_binary(10)\n    ^^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n    >>> decimal_to_binary(4)\n    '0000'\n  \
    \  >>> decimal_to_binary(5)\n    '0101'\n    >>> decimal_to_binary(6)\n    '0110'\n\
    \    >>> decimal_to_binary(7)\n    '0111'\n    >>> decimal_to_binary(8)\n    '1000'\n\
    \    >>> decimal_to_binary(9)\n    '1001'\n    >>> decimal_to_binary(10)\n   \
    \ '1010'\n    >>> decimal_to_binary(11)\n    '1011'\n    >>> decimal_to_binary(12)\n\
    \    '1100'\n    >>> decimal_to_binary(13)\n    '1101'\n    >>> decimal_to_binary(14)\n\
    \    '1110'\n    >>> decimal_to_binary(15)\n    '1111'\n    \"\"\"\n    binary\
    \ = \"\"\n    decimal = abs(decimal)\n    while decimal > 0:\n        binary =\
    \ str(decimal % 2) + binary\n        decimal = decimal // 2\n    return binary\n\
    \n\ndef check(candidate):\n    assert candidate(0) == 'db0db'\n    assert candidate(32)\
    \ == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n    assert candidate(15)\
    \ == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpi7xv8z1l.py\"\
    , line 35\n    \"\"\"\n    ^\nSyntaxError: unterminated triple-quoted string literal\
    \ (detected at line 53)\n"
  exit_code: 1
  status: SyntaxError
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\ndef check(candidate):\n\
    \    assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n\
    \    assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpinpik3ik.py\"\
    , line 11\n    decimal = 12\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\ndef check(candidate):\n\
    \    assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n\
    \    assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgg2pxn5u.py\"\
    , line 11\n    decimal = 12\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\ndef check(candidate):\n\
    \    assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n\
    \    assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkygi1e6a.py\"\
    , line 11\n    decimal = 12\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\ndef check(candidate):\n\
    \    assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n\
    \    assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpksk6ukld.py\"\
    , line 11\n    decimal = 12\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n            Input:\n            decimal = 15\n\
    \            Output:\n            1100011\n            Explanation:\n        \
    \    Decimal: 15\n            Binary: 1100011\n            \"\"\"\n    \"\"\"\n\
    \    binary_string = \"\"\n    binary_string += \"0\" * (decimal // 2)\n    binary_string\
    \ += \"1\" * (decimal % 2)\n    binary_string += \"db\"\n    return binary_string\n\
    \n\ndef check(candidate):\n    assert candidate(0) == 'db0db'\n    assert candidate(32)\
    \ == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n    assert candidate(15)\
    \ == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcfp4dnz0.py\"\
    , line 11\n    Input:\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # Output: '1100'\n            \"\"\"\n            decimal = 12\n           \
    \ binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\ndef check(candidate):\n   \
    \ assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n \
    \   assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw443zzs1.py\"\
    , line 11\n    decimal = 12\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # Output: '1100'\n            \"\"\"\n            decimal = 12\n           \
    \ binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\ndef check(candidate):\n   \
    \ assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n \
    \   assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp09bqji9o.py\"\
    , line 11\n    decimal = 12\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # Output: '1100'\n            \"\"\"\n            decimal = 12\n           \
    \ binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\ndef check(candidate):\n   \
    \ assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n \
    \   assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxm8re0t1.py\"\
    , line 11\n    decimal = 12\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\ndef check(candidate):\n\
    \    assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n\
    \    assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxm0bzri7.py\"\
    , line 11\n    decimal = 12\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n    >>> decimal_to_binary(1)\n    '1'\n    >>>\
    \ decimal_to_binary(10)\n    '1010'\n    >>> decimal_to_binary(32)\nn\
    def check(candidate):\n    assert candidate(0) == 'db0db'\n    assert candidate(32)\
    \ == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n    assert candidate(15)\
    \ == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptrmyrvg1.py\"\
    , line 16\nn\
    \    ^\nSyntaxError: unterminated string literal (detected at line 16)\n"
  exit_code: 1
  status: SyntaxError
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # Output: '1100'\n            \"\"\"\n            decimal = 12\n           \
    \ binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\ndef check(candidate):\n   \
    \ assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n \
    \   assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpiwf8mjm_.py\"\
    , line 11\n    decimal = 12\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n            Input: decimal = 15\n           \
    \ Output: '1111'\n            Input: decimal = 12\n            Output: '1100'\n\
    \            Input: decimal = 15\n            Output: '1111'\n            Input:\
    \ decimal = 12\n            Output: '1100'\n            Input: decimal = 15\n\
    \            Output: '1111'\n            Input: decimal = 12\n            Output:\
    \ '1100'\n            Input: decimal = 15\n            Output: '1111'\n      \
    \      Input: decimal = 12\n            Output: '1100'\n            Input: decimal\
    \ = 15\n            Output: '1111'\n            Input: decimal = 12\n        \
    \    Output: '1100'\n            Input: decimal = 15\n            Output: '1111'\n\
    \            Input: decimal = 12\n            Output: '1100'\n            Input:\
    \ decimal = 15\n            Output: '1111'\n            Input: decimal = 12\n\
    \            Output: '1100'\n            Input: decimal = 15\n            Output:\
    \ '1111'\n            Input: decimal = 12\n            Output: '1100'\n      \
    \      Input: decimal = 15\n            Output: '1111'\n            Input: decimal\
    \ = 12\n            Output: '1100'\n            Input: decimal = 15\n        \
    \    Output: '1111'\n            Input: decimal = 12\n            Output: '1100'\n\
    \            Input: decimal = 15\n            Output: '1111'\n            Input:\
    \ decimal = 12\n            Output: '1100'\n            Input: decimal = 15\n\
    \            Output: '1111'\n            Input: decimal = 12\n            Output:\
    \ '1100'\n            Input: decimal = 15\n            Output: '1111'\n      \
    \      Input: decimal = 12\n            Output: '1100'\n            Input: decimal\
    \ = 15\n            Output: '1111'\n            Input: decimal = 12\n        \
    \    Output: '1100'\n            Input: decimal = 15\n            Output: '1111'\n\
    \            Input: decimal = 12\n            Output: '1100'\n            Input:\
    \ decimal = 15\n            Output: '1111'\n            Input: decimal = 12\n\
    \            Output: '1100'\n            Input: decimal = 15\n            Output:\
    \ '1111'\n            Input: decimal = 12\n            Output: '1100'\n      \
    \      Input: decimal = 15\n            Output: '1111'\n            Input: decimal\
    \ = 12\n            Output: '1100'\n            Input: decimal = 15\n        \
    \    Output: '1111'\n            Input: decimal = 12\n            Output: '1100'\n\
    \            Input: decimal = 15\n            Output: '1111'\n            Input:\
    \ decimal = \ndef check(candidate):\n    assert candidate(0) == 'db0db'\n    assert\
    \ candidate(32) == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n\
    \    assert candidate(15) == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy01ncsis.py\"\
    , line 11\n    Input: decimal = 15\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # Output: '1100'\n            \"\"\"\n            decimal = 12\n           \
    \ binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\ndef check(candidate):\n   \
    \ assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n \
    \   assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1xw3aj4c.py\"\
    , line 11\n    decimal = 12\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # Output: '1100'\n            \"\"\"\n            decimal = 12\n           \
    \ binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\ndef check(candidate):\n   \
    \ assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n \
    \   assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpavslcino.py\"\
    , line 11\n    decimal = 12\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # Output: '1100'\n            \"\"\"\n            decimal = 12\n           \
    \ binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\ndef check(candidate):\n   \
    \ assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n \
    \   assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8of2c8io.py\"\
    , line 11\n    decimal = 12\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n            Input:\n            decimal = 12\n\
    \            Output:\n            1100\n            Explanation:\n           \
    \ Decimal: 12\n            Binary: 1100\n            \"\"\"\n            Input:\n\
    \            decimal = 12\n            Output:\n            1100\n           \
    \ Explanation:\n            Decimal: 12\n            Binary: 1100\n          \
    \  \"\"\"\n            Input:\n            decimal = 12\n            Output:\n\
    \            1100\n            Explanation:\n            Decimal: 12\n       \
    \     Binary: 1100\n            \"\"\"\n            Input:\n            decimal\
    \ = 12\n            Output:\n            1100\n            Explanation:\n    \
    \        Decimal: 12\n            Binary: 1100\n            \"\"\"\n         \
    \   Input:\n            decimal = 12\n            Output:\n            1100\n\
    \            Explanation:\n            Decimal: 12\n            Binary: 1100\n\
    \            \"\"\"\n            Input:\n            decimal = 12\n          \
    \  Output:\n            1100\n            Explanation:\n            Decimal: 12\n\
    \            Binary: 1100\n            \"\"\"\n            Input:\n          \
    \  decimal = 12\n            Output:\n            1100\n            Explanation:\n\
    \            Decimal: 12\n            Binary: 1100\n            \"\"\"\n     \
    \       Input:\n            decimal = 12\n            Output:\n            1100\n\
    \            Explanation:\n            Decimal: 12\n            Binary: 1100\n\
    \            \"\"\"\n            Input:\n            decimal = 12\n          \
    \  Output:\n            1100\n            Explanation:\n            Decimal: 12\n\
    \            Binary: 1100\n            \"\"\"\n            Input:\n          \
    \  decimal = 12\n            Output:\n            1100\n            Explanation:\n\
    \            Decimal: 12\n            Binary: 1100\n            \"\"\"\n     \
    \       Input:\n            decimal = 12\n            Output:\n            1100\n\
    \            Explanation:\n            Decimal: 12\n            Binary: 1100\n\
    \            \"\"\"\n            Input:\n            decimal = 12\n          \
    \  Output:\n            1100\n            Explanation:\n            Decimal: 12\n\
    \            Binary: 1100\n            \"\"\"\n            Input:\n          \
    \  decimal = 12\n            Output:\n            1100\n            Explanation:\n\
    \            Decimal: 12\n            Binary: 1100\n            \"\"\"\n     \
    \       Input:\n            decimal = 12\n            Output:\n            1100\n\
    \            Explanation:\n            Decimal: 12\n            Binary: 1100\n\
    \            \"\"\"\n            Input:\n            decimal = 12\n          \
    \  Output:\n            1100\n            Explanation:\n            Decimal: 12\n\
    \            Binary: 1100\n            \"\"\"\n            Input:\n          \
    \  decimal = 12\n            Output:\n            1100\n            Explanation:\n\
    \            Decimal: 12\n            Binary: 1100\n            \"\"\"\n\ndef\
    \ check(candidate):\n    assert candidate(0) == 'db0db'\n    assert candidate(32)\
    \ == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n    assert candidate(15)\
    \ == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpur1ldxpg.py\"\
    , line 11\n    Input:\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n    >>> decimal_to_binary(0)\n    '0'\n    >>>\
    \ decimal_to_binary(1)\n    '1'\n    >>> decimal_to_binary(2)\n    '10'\n    >>>\
    \ decimal_to_binary(3)\n    '11'\n    >>> decimal_to_binary(4)\n    '100'\n  \
    \  >>> decimal_to_binary(5)\n    '101'\n    >>> decimal_to_binary(6)\n    '110'\n\
    \    >>> decimal_to_binary(7)\n    '111'\n    >>> decimal_to_binary(8)\n    '1000'\n\
    \    >>> decimal_to_binary(9)\n    '1001'\n    >>> decimal_to_binary(10)\n   \
    \ '1010'\n    >>> decimal_to_binary(11)\n    '1011'\n    >>> decimal_to_binary(12)\n\
    \    '1100'\n    >>> decimal_to_binary(13)\n    '1101'\n    >>> decimal_to_binary(14)\n\
    \    '1110'\n    >>> decimal_to_binary(15)\n    '1111'\n    >>> decimal_to_binary(16)\n\
    \    '10000'\n    >>> decimal_to_binary(17)\n    '10001'\n    >>> decimal_to_binary(18)\n\
    \    '10010'\n    >>> decimal_to_binary(19)\n    '10011'\n    >>> decimal_to_binary(20)\n\
    \    '10100'\n    >>> decimal_to_binary(21)\n    '10101'\n    >>> decimal_to_binary(22)\n\
    \    '101010'\n    >>> decimal_to_binary(23)\n    '101011'\n    >>> decimal_to_binary(24)\n\
    \    '101100'\n    >>> decimal_to_binary(25)\n    '101101'\n    >>> decimal_to_binary(26)\n\
    \    '101110'\n    >>> decimal_to_binary(27)\n    '101111'\n    >>> decimal_to_binary(28)\n\
    \    '110000'\n    >>> decimal_to_binary(29)\n    '110001'\n    >>> decimal_to_binary(30)\n\
    \    '110010'\n    >>> decimal_to_binary(31)\n    '110011'\n    >>> decimal_to_binary(32)\n\
    \    '110100'\n    >>> decimal_to_binary(33)\n    '110101'\n    >>> decimal_to_binary(34)\n\
    \    '110110'\n    >>> decimal_to_binary(35)\n    '110111'\n    >>> decimal_to_binary(36)\n\
    \    '111000'\n    >>> decimal_to_binary(37)\n    '111001'\n    >>> decimal_to_binary(38)\n\
    \    '111010'\n    >>> decimal_to_binary(39)\n    '111011'\n    >>> decimal_to_binary(40)\n\
    \    '111100'\n    >>> decimal_to_binary(41)\n    '111101'\n    >>> decimal_to_binary(42)\n\
    \    '111110'\ndef check(candidate):\n    assert candidate(0) == 'db0db'\n   \
    \ assert candidate(32) == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n\
    \    assert candidate(15) == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpncwxdsl2.py\"\
    , line 11\n    >>> decimal_to_binary(0)\n    ^^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n    >>> decimal_to_binary(8)\n    '111'\n   \
    \ >>> decimal_to_binary(9)\n    '100'\n    >>> decimal_to_binary(10)\n    '1010'\n\
    \    >>> decimal_to_binary(11)\n    '1011'\n    >>> decimal_to_binary(12)\n  \
    \  '1100'\n    >>> decimal_to_binary(13)\n    '1101'\n    >>> decimal_to_binary(14)\n\
    \    '1110'\n    >>> decimal_to_binary(15)\n    '1111'\n    >>> decimal_to_binary(16)\n\
    \    '11110'\n    >>> decimal_to_binary(17)\n    '11111'\n    >>> decimal_to_binary(18)\n\
    \    '111101'\n    >>> decimal_to_binary(19)\n    '111110'\n    >>> decimal_to_binary(20)\n\
    \    '111111'\n    >>> decimal_to_binary(21)\n    '1111110'\n    >>> decimal_to_binary(22)\n\
    \    '1111111'\n    >>> decimal_to_binary(23)\n    '11111110'\n    >>> decimal_to_binary(24)\n\
    \    '11111111'\n    >>> decimal_to_binary(25)\n    '111111110'\n    >>> decimal_to_binary(26)\n\
    \    '111111111'\n    >>> decimal_to_binary(27)\n    '1111111110'\n    >>> decimal_to_binary(28)\n\
    \    '1111111111'\n    >>> decimal_to_binary(29)\n    '11111111110'\n    >>> decimal_to_binary(30)\n\
    \    '11111111111'\n    >>> decimal_to_binary(31)\n    '111111111110'\n    >>>\
    \ decimal_to_binary(32)\n    '111111111111'\n    >>> decimal_to_binary(33)\n \
    \   '1111111111111'\n    >>> decimal_to_binary(34)\n    '11111111111110'\n   \
    \ >>> decimal_to_binary(35)\n    '11111111111111'\n    >>> decimal_to_binary(36)\n\
    \    '111111111111110'\n    >>> decimal_to_binary(37)\n    '111111111111111'\n\
    \    >>> decimal_to_binary(38)\n    '1111111111111110'\n    >>> decimal_to_binary(39)\n\
    \    '1111111111111111'\n    >>> decimal_to_binary(40)\n    '111111111111111'\n\
    \    >>> decimal_to_binary(41)\n    '1111111111111110'\n    >>> decimal_to_binary(42)\n\
    \    '1111111111111111'\n    >>> decimal_to_binary(43)\n    '111111111111111'\n\
    \    >>> decimal_to_binary(44)\n    '1111111111111110'\n    >>> decimal_to_binary(45)\n\
    \    '1111111111111111'\n    >>> decimal_to_binary(46)\n    '111111111111111'\n\
    \    >>> decimal_to_binary(47)\n    '\ndef check(candidate):\n    assert candidate(0)\
    \ == 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzrg9v7pw.py\"\
    , line 90\n    '\n    ^\nSyntaxError: unterminated string literal (detected at\
    \ line 90)\n"
  exit_code: 1
  status: SyntaxError
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n    >>> decimal_to_binary(5)\n    '0000101'\n\
    \    >>> decimal_to_binary(7)\n    '0111101'\n    >>> decimal_to_binary(8)\n \
    \   '1001001'\n    >>> decimal_to_binary(10)\n    '1010100'\n    >>> decimal_to_binary(12)\n\
    \    '11001010'\n    >>> decimal_to_binary(13)\n    '11010011'\n    >>> decimal_to_binary(14)\n\
    \    '11101011'\n    >>> decimal_to_binary(15)\n    '11110011'\n    >>> decimal_to_binary(16)\n\
    \    '11111110'\n    >>> decimal_to_binary(17)\n    '11111110'\n    >>> decimal_to_binary(18)\n\
    \    '11111110'\n    >>> decimal_to_binary(19)\n    '11111110'\n    >>> decimal_to_binary(20)\n\
    \    '11111110'\n    >>> decimal_to_binary(21)\n    '11111110'\n    >>> decimal_to_binary(22)\n\
    \    '11111110'\n    >>> decimal_to_binary(23)\n    '11111110'\n    >>> decimal_to_binary(24)\n\
    \    '11111110'\n    >>> decimal_to_binary(25)\n    '11111110'\n    >>> decimal_to_binary(26)\n\
    \    '11111110'\n    >>> decimal_to_binary(27)\n    '11111110'\n    >>> decimal_to_binary(28)\n\
    \    '11111110'\n    >>> decimal_to_binary(29)\n    '11111110'\n    >>> decimal_to_binary(30)\n\
    \    '11111110'\n    >>> decimal_to_binary(31)\n    '11111110'\n    >>> decimal_to_binary(32)\n\
    \    '11111110'\n    >>> decimal_to_binary(33)\n    '11111110'\n    >>> decimal_to_binary(34)\n\
    \    '11111110'\n    >>> decimal_to_binary(35)\n    '11111110'\n    >>> decimal_to_binary(36)\n\
    \    '11111110'\n    >>> decimal_to_binary(37)\n    '11111110'\n    >>> decimal_to_binary(38)\n\
    \    '11111110'\n    >>> decimal_to_binary(39)\n    '11111110'\n    >>> decimal_to_binary(40)\n\
    \    '11111110'\n    >>> decimal_to_binary(41)\n    '11111110'\n    >>> decimal_to_binary(42)\n\
    \    '11111110'\n    >>> decimal_to_binary(43)\n    '11111110'\n    >>> decimal_to_binary(44)\n\
    \    '11111110'\n    >>> decimal_to_binary(45)\n    '11111110'\n    >>> decimal_to_binary(\n\
    def check(candidate):\n    assert candidate(0) == 'db0db'\n    assert candidate(32)\
    \ == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n    assert candidate(15)\
    \ == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnnlfjrcc.py\"\
    , line 11\n    >>> decimal_to_binary(5)\n    ^^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n    >>> decimal_to_binary(5)\n    '1111'\n  \
    \  >>> decimal_to_binary(8)\n    '1001'\n    >>> decimal_to_binary(10)\n    '1010'\n\
    \    >>> decimal_to_binary(15)\n    '1111'\n    >>> decimal_to_binary(16)\n  \
    \  '1001'\n    >>> decimal_to_binary(17)\n    '1001'\n    >>> decimal_to_binary(18)\n\
    \    '1001'\n    >>> decimal_to_binary(19)\n    '1001'\n    >>> decimal_to_binary(20)\n\
    \    '1010'\n    >>> decimal_to_binary(21)\n    '1010'\n    >>> decimal_to_binary(22)\n\
    \    '1010'\n    >>> decimal_to_binary(23)\n    '1010'\n    >>> decimal_to_binary(24)\n\
    \    '1010'\n    >>> decimal_to_binary(25)\n    '1010'\n    >>> decimal_to_binary(26)\n\
    \    '1010'\n    >>> decimal_to_binary(27)\n    '1010'\n    >>> decimal_to_binary(28)\n\
    \    '1010'\n    >>> decimal_to_binary(29)\n    '1010'\n    >>> decimal_to_binary(30)\n\
    \    '1010'\n    >>> decimal_to_binary(31)\n    '1010'\n    >>> decimal_to_binary(32)\n\
    \    '1010'\n    >>> decimal_to_binary(33)\n    '1010'\n    >>> decimal_to_binary(34)\n\
    \    '1010'\n    >>> decimal_to_binary(35)\n    '1010'\n    >>> decimal_to_binary(36)\n\
    \    '1010'\n    >>> decimal_to_binary(37)\n    '1010'\n    >>> decimal_to_binary(38)\n\
    \    '1010'\n    >>> decimal_to_binary(39)\n    '1010'\n    >>> decimal_to_binary(40)\n\
    \    '1010'\n    >>> decimal_to_binary(41)\n    '1010'\n    >>> decimal_to_binary(42)\n\
    \    '1010'\n    >>> decimal_to_binary(43)\n    '1010'\n    >>> decimal_to_binary(44)\n\
    \    '1010'\n    >>> decimal_to_binary(45)\n    '1010'\n    >>> decimal_to_binary(46)\n\
    \    '1010'\n    >>> decimal_to_binary(47)\n    '1010'\n    >>> decimal_to_binary(48)\n\
    \    '1010'\n    >>> decimal_to_binary(49)\n    '1010'\n    >>> decimal_to_binary(50)\n\
    \    '1010'\n    >>> decimal_to_binary(51)\n    '1010'\n    >>> decimal_to_binary(52)\n\
    \    '1010'\n    >>> decimal_to_binary(53)\n    '1010'\n    >>> decimal_to_binary(54)\n\
    \    '1010'\n    >>> decimal_to_binary(55)\n    '1010'\n    >>> \ndef check(candidate):\n\
    \    assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n\
    \    assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpumkzjnh7.py\"\
    , line 11\n    >>> decimal_to_binary(5)\n    ^^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n    >>> decimal_to_binary(5)\n    '1100'\n  \
    \  >>> decimal_to_binary(6)\n    '1101'\n    >>> decimal_to_binary(7)\n    '1110'\n\
    \    >>> decimal_to_binary(8)\n    '1111'\n    >>> decimal_to_binary(9)\n    '1111'\n\
    \    >>> decimal_to_binary(10)\n    '1111'\n    >>> decimal_to_binary(11)\n  \
    \  '1111'\n    >>> decimal_to_binary(12)\n    '1111'\n    >>> decimal_to_binary(13)\n\
    \    '1111'\n    >>> decimal_to_binary(14)\n    '1111'\n    >>> decimal_to_binary(15)\n\
    \    '1111'\n    >>> decimal_to_binary(16)\n    '1111'\n    >>> decimal_to_binary(17)\n\
    \    '1111'\n    >>> decimal_to_binary(18)\n    '1111'\n    >>> decimal_to_binary(19)\n\
    \    '1111'\n    >>> decimal_to_binary(20)\n    '1111'\n    >>> decimal_to_binary(21)\n\
    \    '1111'\n    >>> decimal_to_binary(22)\n    '1111'\n    >>> decimal_to_binary(23)\n\
    \    '1111'\n    >>> decimal_to_binary(24)\n    '1111'\n    >>> decimal_to_binary(25)\n\
    \    '1111'\n    >>> decimal_to_binary(26)\n    '1111'\n    >>> decimal_to_binary(27)\n\
    \    '1111'\n    >>> decimal_to_binary(28)\n    '1111'\n    >>> decimal_to_binary(29)\n\
    \    '1111'\n    >>> decimal_to_binary(30)\n    '1111'\n    >>> decimal_to_binary(31)\n\
    \    '1111'\n    >>> decimal_to_binary(32)\n    '1111'\n    >>> decimal_to_binary(33)\n\
    \    '1111'\n    >>> decimal_to_binary(34)\n    '1111'\n    >>> decimal_to_binary(35)\n\
    \    '1111'\n    >>> decimal_to_binary(36)\n    '1111'\n    >>> decimal_to_binary(37)\n\
    \    '1111'\n    >>> decimal_to_binary(38)\n    '1111'\n    >>> decimal_to_binary(39)\n\
    \    '1111'\n    >>> decimal_to_binary(40)\n    '1111'\n    >>> decimal_to_binary(41)\n\
    \    '1111'\n    >>> decimal_to_binary(42)\n    '1111'\n    >>> decimal_to_binary(43)\n\
    \    '1111'\n    >>> decimal_to_binary(44)\n    '1111'\n    >>> decimal_to_binary(45)\n\
    \    '1111'\n    >>> decimal_to_binary(46)\n    '1111'\n    >>> decimal_to_binary(47)\n\
    \    '1111'\n    >>> decimal_to_binary(48)\n    '1111'\n    >>> decimal_to_binary(49\n\
    def check(candidate):\n    assert candidate(0) == 'db0db'\n    assert candidate(32)\
    \ == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n    assert candidate(15)\
    \ == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpk5p8sfuz.py\"\
    , line 11\n    >>> decimal_to_binary(5)\n    ^^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\ndef check(candidate):\n\
    \    assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n\
    \    assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprh16q4gh.py\"\
    , line 11\n    decimal = 12\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n            Input:\n            decimal = 15\n\
    \n            Output:\n            1100011\n\n            Explanation:\n     \
    \       Decimal: 15\n            Binary: 1100011\n            \"\"\"\n       \
    \     decimal = int(decimal)\n            binary_string = \"\"\n            while\
    \ decimal > 0:\n                binary_string += \"0\"\n                decimal\
    \ -= 1\n            while decimal < 0:\n                binary_string += \"1\"\
    \n                decimal += 1\n            binary_string = \"db\" + binary_string\n\
    \            return binary_string\n\n\ndef check(candidate):\n    assert candidate(0)\
    \ == 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbynbjeod.py\"\
    , line 11\n    Input:\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # >>> '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # >>> '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # >>> '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # >>> '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # >>> '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # >>> '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # >>> '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # >>> '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # >>> '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # >>> '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # >>> '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # >>> '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # >>> '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # >>> '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # >>> '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # >>> '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # >>> '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # >>> '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # >>> '1100'\n            \"\"\"\ndef check(candidate):\n    assert candidate(0)\
    \ == 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_2e2cuh2.py\"\
    , line 11\n    decimal = 12\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n    >>> decimal_to_binary(5)\n    '111'\n   \
    \ >>> decimal_to_binary(10)\n    '1010'\n    >>> decimal_to_binary(15)\n    '1111'\n\
    \    >>> decimal_to_binary(16)\n    '1111'\n    >>> decimal_to_binary(17)\n  \
    \  '1111'\n    >>> decimal_to_binary(18)\n    '1111'\n    >>> decimal_to_binary(19)\n\
    \    '1111'\n    >>> decimal_to_binary(20)\n    '1111'\n    >>> decimal_to_binary(21)\n\
    \    '1111'\n    >>> decimal_to_binary(22)\n    '1111'\n    >>> decimal_to_binary(23)\n\
    \    '1111'\n    >>> decimal_to_binary(24)\n    '1111'\n    >>> decimal_to_binary(25)\n\
    \    '1111'\n    >>> decimal_to_binary(26)\n    '1111'\n    >>> decimal_to_binary(27)\n\
    \    '1111'\n    >>> decimal_to_binary(28)\n    '1111'\n    >>> decimal_to_binary(29)\n\
    \    '1111'\n    >>> decimal_to_binary(30)\n    '1111'\n    >>> decimal_to_binary(31)\n\
    \    '1111'\n    >>> decimal_to_binary(32)\n    '1111'\n    >>> decimal_to_binary(33)\n\
    \    '1111'\n    >>> decimal_to_binary(34)\n    '1111'\n    >>> decimal_to_binary(35)\n\
    \    '1111'\n    >>> decimal_to_binary(36)\n    '1111'\n    >>> decimal_to_binary(37)\n\
    \    '1111'\n    >>> decimal_to_binary(38)\n    '1111'\n    >>> decimal_to_binary(39)\n\
    \    '1111'\n    >>> decimal_to_binary(40)\n    '1111'\n    >>> decimal_to_binary(41)\n\
    \    '1111'\n    >>> decimal_to_binary(42)\n    '1111'\n    >>> decimal_to_binary(43)\n\
    \    '1111'\n    >>> decimal_to_binary(44)\n    '1111'\n    >>> decimal_to_binary(45)\n\
    \    '1111'\n    >>> decimal_to_binary(46)\n    '1111'\n    >>> decimal_to_binary(47)\n\
    \    '1111'\n    >>> decimal_to_binary(48)\n    '1111'\n    >>> decimal_to_binary(49)\n\
    \    '1111'\n    >>> decimal_to_binary(50)\n    '1111'\n    >>> decimal_to_binary(51)\n\
    \    '1111'\n    >>> decimal_to_binary(52)\n    '1111'\n    >>> decimal_to_binary(53)\n\
    \    '1111'\n    >>> decimal_to_binary(54)\n    '1111'\n    >>> decimal_to_binary(55)\n\
    \    '1111'\n    >>> decimal_to_binary(56)\n    '1111'\n\ndef check(candidate):\n\
    \    assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n\
    \    assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkf7zu_d5.py\"\
    , line 11\n    >>> decimal_to_binary(5)\n    ^^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n            Input: decimal = 15\n           \
    \ Output: '1111'\n            Explanation: 15 is represented as '1111'\n     \
    \       \"\"\"\n            Input: decimal = 15\n            Output: '1111'\n\
    \            Explanation: 15 is represented as '1111'\n            \"\"\"\n  \
    \          Input: decimal = 15\n            Output: '1111'\n            Explanation:\
    \ 15 is represented as '1111'\n            \"\"\"\n            Input: decimal\
    \ = 15\n            Output: '1111'\n            Explanation: 15 is represented\
    \ as '1111'\n            \"\"\"\n            Input: decimal = 15\n           \
    \ Output: '1111'\n            Explanation: 15 is represented as '1111'\n     \
    \       \"\"\"\n            Input: decimal = 15\n            Output: '1111'\n\
    \            Explanation: 15 is represented as '1111'\n            \"\"\"\n  \
    \          Input: decimal = 15\n            Output: '1111'\n            Explanation:\
    \ 15 is represented as '1111'\n            \"\"\"\n            Input: decimal\
    \ = 15\n            Output: '1111'\n            Explanation: 15 is represented\
    \ as '1111'\n            \"\"\"\n            Input: decimal = 15\n           \
    \ Output: '1111'\n            Explanation: 15 is represented as '1111'\n     \
    \       \"\"\"\n            Input: decimal = 15\n            Output: '1111'\n\
    \            Explanation: 15 is represented as '1111'\n            \"\"\"\n  \
    \          Input: decimal = 15\n            Output: '1111'\n            Explanation:\
    \ 15 is represented as '1111'\n            \"\"\"\n            Input: decimal\
    \ = 15\n            Output: '1111'\n            Explanation: 15 is represented\
    \ as '1111'\n            \"\"\"\n            Input: decimal = 15\n           \
    \ Output: '1111'\n            Explanation: 15 is represented as '1111'\n     \
    \       \"\"\"\n            Input: decimal = 15\n            Output: '1111'\n\
    \            Explanation: 15 is represented as '1111'\n            \"\"\"\n  \
    \          Input: decimal = 15\n            Output: '1111'\n            Explanation:\
    \ 15 is represented as '1111'\n            \"\"\"\n            Input: decimal\
    \ = 15\n            Output: '1111'\n            Explanation: 15 is represented\
    \ as '1111'\n            \"\"\"\n            Input: decimal = 15\n           \
    \ Output: '1111'\n            Explanation: 15 is represented as '1111'\n     \
    \       \"\"\"\n            Input: decimal = 15\n            Output: '1111'\n\
    \            Explanation: 15 is represented as '1111'\n            \"\"\"\n  \
    \          Input: decimal = 15\n            \ndef check(candidate):\n    assert\
    \ candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert\
    \ candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\n\
    def test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn3jx2wig.py\"\
    , line 11\n    Input: decimal = 15\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n    >>> decimal_to_binary(5)\n    '111'\n   \
    \ >>> decimal_to_binary(10)\n    '1010'\n    >>> decimal_to_binary(15)\n    '1111'\n\
    \    >>> decimal_to_binary(20)\n    '111111'\n    >>> decimal_to_binary(25)\n\
    \    '1111111'\n    >>> decimal_to_binary(30)\n    '111111110'\n    >>> decimal_to_binary(35)\n\
    \    '11111111010'\n    >>> decimal_to_binary(40)\n    '1111111101010'\n    >>>\
    \ decimal_to_binary(45)\n    '11111111010101'\n    >>> decimal_to_binary(50)\n\
    \    '11111111010101010'\n    >>> decimal_to_binary(55)\n    '111111110101010101'\n\
    \    >>> decimal_to_binary(60)\n    '111111110101010101010'\n    >>> decimal_to_binary(65)\n\
    \    '1111111101010101010101'\n    >>> decimal_to_binary(70)\n    '1111111101010101010101010'\n\
    \    >>> decimal_to_binary(75)\n    '111111110101010101010101010'\n    >>> decimal_to_binary(80)\n\
    \    '11111111010101010101010101010'\n    >>> decimal_to_binary(85)\n    '1111111101010101010101010101010'\n\
    \    >>> decimal_to_binary(90)\n    '111111110101010101010101010101010'\n    >>>\
    \ decimal_to_binary(95)\n    '1111111101010101010101010101010101010'\n    >>>\
    \ decimal_to_binary(100)\n    '11111111010101010101010101010101010101010'\n  \
    \  >>> decimal_to_binary(105)\n    '111111110101010101010101010101010101010101010'\n\
    \    >>> decimal_to_binary(110)\n    '1111111101010101010101010101010101010101010101010'\n\
    \    >>> decimal_to_binary(115)\n    '11111111010101010101010101010101010101010101010101010'\n\
    \    >>> decimal_to_binary(120)\n    '111111110101010101010101010101010101010101010101010101010'\n\
    \    >>> decimal_to_binary(125)\n    '11111111010101010101010101010101010101010101010101010101010101010'\n\
    \    >>> decimal_to_binary(130)\n    '111111110101010101010101010101010101010101010101010101010101010101010'\n\
    \    >>> decimal_to_binary(135)\n    '1111111101010101010101010101010101010101010101010101010101010101010101010'\n\
    \    >>> decimal_to_binary(140)\n    '11111111010101010\ndef check(candidate):\n\
    \    assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n\
    \    assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0w4uk7vw.py\"\
    , line 66\n    '11111111010101010\n    ^\nSyntaxError: unterminated string literal\
    \ (detected at line 66)\n"
  exit_code: 1
  status: SyntaxError
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n    >>> decimal_to_binary(10)\n    '1100'\n \
    \   >>> decimal_to_binary(12)\n    '1100'\n    >>> decimal_to_binary(15)\n   \
    \ '1111'\n    >>> decimal_to_binary(16)\n    '1111'\n    >>> decimal_to_binary(17)\n\
    \    '1111'\n    >>> decimal_to_binary(18)\n    '1111'\n    >>> decimal_to_binary(19)\n\
    \    '1111'\n    >>> decimal_to_binary(20)\n    '1111'\n    >>> decimal_to_binary(21)\n\
    \    '1111'\n    >>> decimal_to_binary(22)\n    '1111'\n    >>> decimal_to_binary(23)\n\
    \    '1111'\n    >>> decimal_to_binary(24)\n    '1111'\n    >>> decimal_to_binary(25)\n\
    \    '1111'\n    >>> decimal_to_binary(26)\n    '1111'\n    >>> decimal_to_binary(27)\n\
    \    '1111'\n    >>> decimal_to_binary(28)\n    '1111'\n    >>> decimal_to_binary(29)\n\
    \    '1111'\n    >>> decimal_to_binary(30)\n    '1111'\n    >>> decimal_to_binary(31)\n\
    \    '1111'\n    >>> decimal_to_binary(32)\n    '1111'\n    >>> decimal_to_binary(33)\n\
    \    '1111'\n    >>> decimal_to_binary(34)\n    '1111'\n    >>> decimal_to_binary(35)\n\
    \    '1111'\n    >>> decimal_to_binary(36)\n    '1111'\n    >>> decimal_to_binary(37)\n\
    \    '1111'\n    >>> decimal_to_binary(38)\n    '1111'\n    >>> decimal_to_binary(39)\n\
    \    '1111'\n    >>> decimal_to_binary(40)\n    '1111'\n    >>> decimal_to_binary(41)\n\
    \    '1111'\n    >>> decimal_to_binary(42)\n    '1111'\n    >>> decimal_to_binary(43)\n\
    \    '1111'\n    >>> decimal_to_binary(44)\n    '1111'\n    >>> decimal_to_binary(45)\n\
    \    '1111'\n    >>> decimal_to_binary(46)\n    '1111'\n    >>> decimal_to_binary(47)\n\
    \    '1111'\n    >>> decimal_to_binary(48)\n    '1111'\n    >>> decimal_to_binary(49)\n\
    \    '1111'\n    >>> decimal_to_binary(50)\n    '1111'\n    >>> decimal_to_binary(51)\n\
    \    '1111'\n    >>> decimal_to_binary(52)\n    '1111'\n    >>> decimal_to_binary(53)\n\
    \    '1111'\n    >>> decimal_to_binary(54)\n    '1111'\n    >>> decimal_to_binary(55)\n\
    \    '1111'\n    >>> decimal_to_binary(56)\n    '1111'\n\ndef check(candidate):\n\
    \    assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n\
    \    assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd3qaqpv0.py\"\
    , line 11\n    >>> decimal_to_binary(10)\n    ^^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # Output: '1100'\n            \"\"\"\n            decimal = 12\n           \
    \ binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\ndef check(candidate):\n   \
    \ assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n \
    \   assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwb0vcz1s.py\"\
    , line 11\n    decimal = 12\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n    >>> decimal_to_binary(0)\n    '0'\n    >>>\
    \ decimal_to_binary(1)\n    '1'\n    >>> decimal_to_binary(10)\n    '1010'\n \
    \   >>> decimal_to_binary(11)\n    '111'\n    >>> decimal_to_binary(123)\n   \
    \ '1100011'\n    >>> decimal_to_binary(1234)\n    '110000110011'\n    >>> decimal_to_binary(12345)\n\
    \    '110000110011001111'\n    >>> decimal_to_binary(12345)\n    '110000110011001111'\n\
    \    >>> decimal_to_binary(12345)\n    '110000110011001111'\n    >>> decimal_to_binary(12345)\n\
    \    '110000110011001111'\n    >>> decimal_to_binary(12345)\n    '110000110011001111'\n\
    \    >>> decimal_to_binary(12345)\n    '110000110011001111'\n    >>> decimal_to_binary(12345)\n\
    \    '110000110011001111'\n    >>> decimal_to_binary(12345)\n    '110000110011001111'\n\
    \    >>> decimal_to_binary(12345)\n    '110000110011001111'\n    >>> decimal_to_binary(12345)\n\
    \    '110000110011001111'\n    >>> decimal_to_binary(12345)\n    '110000110011001111'\n\
    \    >>> decimal_to_binary(12345)\n    '110000110011001111'\n    >>> decimal_to_binary(12345)\n\
    \    '110000110011001111'\n    >>> decimal_to_binary(12345)\n    '110000110011001111'\n\
    \    >>> decimal_to_binary(12345)\n    '110000110011001111'\n    >>> decimal_to_binary(12345)\n\
    \    '110000110011001111'\n    >>> decimal_to_binary(12345)\n    '110000110011001111'\n\
    \    >>> decimal_to_binary(12345)\n    '110000110011001111'\n    >>> decimal_to_binary(12345)\n\
    \    '110000110011001111'\n    >>> decimal_to_binary(12345)\n    '110000110011001111'\n\
    \    >>> decimal_to_binary(12345)\n    '110000110011001111'\n    >>> decimal_to_binary(12345)\n\
    \    '110000110011001111'\n    >>> decimal_to_binary(12345)\n    '110000110011001111'\n\
    \    >>> decimal_to_binary(12345)\n    '110000110011001111'\n    >>> decimal_to_binary(12345)\n\
    \    '110000110011001111'\n    >>> decimal_to_binary(12345)\n    '110000110011001111'\n\
    def check(candidate):\n    assert candidate(0) == 'db0db'\n    assert candidate(32)\
    \ == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n    assert candidate(15)\
    \ == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcw_t1qj1.py\"\
    , line 11\n    >>> decimal_to_binary(0)\n    ^^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # Output: '1100'\n            \"\"\"\n            decimal = 12\n           \
    \ binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\ndef check(candidate):\n   \
    \ assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n \
    \   assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf5zelwfk.py\"\
    , line 11\n    decimal = 12\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n    >>> decimal_to_binary(12)\n    '1100'\n \
    \   >>> decimal_to_binary(13)\n    '1101'\n    >>> decimal_to_binary(14)\n   \
    \ '1110'\n    >>> decimal_to_binary(15)\n    '1111'\n    >>> decimal_to_binary(16)\n\
    \    '1110'\n    >>> decimal_to_binary(17)\n    '1111'\n    >>> decimal_to_binary(18)\n\
    \    '1110'\n    >>> decimal_to_binary(19)\n    '1111'\n    >>> decimal_to_binary(20)\n\
    \    '1110'\n    >>> decimal_to_binary(21)\n    '1111'\n    >>> decimal_to_binary(22)\n\
    \    '1110'\n    >>> decimal_to_binary(23)\n    '1111'\n    >>> decimal_to_binary(24)\n\
    \    '1110'\n    >>> decimal_to_binary(25)\n    '1111'\n    >>> decimal_to_binary(26)\n\
    \    '1110'\n    >>> decimal_to_binary(27)\n    '1111'\n    >>> decimal_to_binary(28)\n\
    \    '1110'\n    >>> decimal_to_binary(29)\n    '1111'\n    >>> decimal_to_binary(30)\n\
    \    '1110'\n    >>> decimal_to_binary(31)\n    '1111'\n    >>> decimal_to_binary(32)\n\
    \    '1110'\n    >>> decimal_to_binary(33)\n    '1111'\n    >>> decimal_to_binary(34)\n\
    \    '1110'\n    >>> decimal_to_binary(35)\n    '1111'\n    >>> decimal_to_binary(36)\n\
    \    '1110'\n    >>> decimal_to_binary(37)\n    '1111'\n    >>> decimal_to_binary(38)\n\
    \    '1110'\n    >>> decimal_to_binary(39)\n    '1111'\n    >>> decimal_to_binary(40)\n\
    \    '1110'\n    >>> decimal_to_binary(41)\n    '1111'\n    >>> decimal_to_binary(42)\n\
    \    '1110'\n    >>> decimal_to_binary(43)\n    '1111'\n    >>> decimal_to_binary(44)\n\
    \    '1110'\n    >>> decimal_to_binary(45)\n    '1111'\n    >>> decimal_to_binary(46)\n\
    \    '1110'\n    >>> decimal_to_binary(47)\n    '1111'\n    >>> decimal_to_binary(48)\n\
    \    '1110'\n    >>> decimal_to_binary(49)\n    '1111'\n    >>> decimal_to_binary(50)\n\
    \    '1110'\n    >>> decimal_to_binary(51)\n    '1111'\n    >>> decimal_to_binary(52)\n\
    \    '1110'\n    >>> decimal_to_binary(53)\n    '1111'\n    >>> decimal_to_binary(\n\
    def check(candidate):\n    assert candidate(0) == 'db0db'\n    assert candidate(32)\
    \ == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n    assert candidate(15)\
    \ == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpajdptw59.py\"\
    , line 11\n    >>> decimal_to_binary(12)\n    ^^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\ndef check(candidate):\n\
    \    assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n\
    \    assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8t69v91s.py\"\
    , line 11\n    decimal = 12\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n    >>> decimal_to_binary(5)\n    '111'\n   \
    \ >>> decimal_to_binary(10)\n    '1010'\n    >>> decimal_to_binary(15)\n    '1111'\n\
    \    >>> decimal_to_binary(20)\n    '111111'\n    >>> decimal_to_binary(25)\n\
    \    '11111111'\n    >>> decimal_to_binary(30)\n    '1111111111'\n    >>> decimal_to_binary(35)\n\
    \    '111111111111'\n    >>> decimal_to_binary(40)\n    '11111111111111'\n   \
    \ >>> decimal_to_binary(45)\n    '111111111111111'\n    >>> decimal_to_binary(50)\n\
    \    '1111111111111111'\n    >>> decimal_to_binary(55)\n    '11111111111111111'\n\
    \    >>> decimal_to_binary(60)\n    '111111111111111111'\n    >>> decimal_to_binary(65)\n\
    \    '11111111111111111111'\n    >>> decimal_to_binary(70)\n    '1111111111111111111111'\n\
    \    >>> decimal_to_binary(75)\n    '11111111111111111111111'\n    >>> decimal_to_binary(80)\n\
    \    '111111111111111111111111'\n    >>> decimal_to_binary(85)\n    '1111111111111111111111111'\n\
    \    >>> decimal_to_binary(90)\n    '11111111111111111111111111'\n    >>> decimal_to_binary(95)\n\
    \    '1111111111111111111111111111'\n    >>> decimal_to_binary(100)\n    '111111111111111111111111111111'\n\
    \    >>> decimal_to_binary(105)\n    '1111111111111111111111111111111'\n    >>>\
    \ decimal_to_binary(110)\n    '11111111111111111111111111111111'\n    >>> decimal_to_binary(115)\n\
    \    '111111111111111111111111111111111'\n    >>> decimal_to_binary(120)\n   \
    \ '1111111111111111111111111111111111'\n    >>> decimal_to_binary(125)\n    '111111111111111111111111111111111111'\n\
    \    >>> decimal_to_binary(130)\n    '11111111111111111111111111111111111111'\n\
    \    >>> decimal_to_binary(135)\n    '111111111111111111111111111111111111111'\n\
    \    >>> decimal_to_binary(140)\n    '1111111111111111111111111111111111111111'\n\
    \    >>> decimal_to_binary(145)\n    '11111111111111111111111111111111111111111'\n\
    \    >>> decimal_to_binary(150)\n    '111111111111111111111111111111111111111111'\n\
    \    >>> decimal_to_binary(155)\n    '11111111111111111111111111111111111111111111'\n\
    \    >>> decimal_to_binary(160)\n    '1111111111111111111111111111111111111111111111'\n\
    \    >>> decimal_to_binary(165)\n    '11111111111111111111111111111111111111111111111'\n\
    \    >>> decimal_to_binary(170)\n    '111111111111111111111111111111111111111111111111'\n\
    \    >>> decimal_to_binary(175)\n    '1111111111111111111111111111111111111111111111111'\n\
    \    >>> decimal_to_bin\ndef check(candidate):\n    assert candidate(0) == 'db0db'\n\
    \    assert candidate(32) == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n\
    \    assert candidate(15) == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2ecpvct8.py\"\
    , line 11\n    >>> decimal_to_binary(5)\n    ^^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # Output: '1100'\n            \"\"\"\n            decimal = 12\n           \
    \ binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\ndef check(candidate):\n   \
    \ assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n \
    \   assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1areisps.py\"\
    , line 11\n    decimal = 12\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # Output: '1100'\n            \"\"\"\n            decimal = 12\n           \
    \ binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\ndef check(candidate):\n   \
    \ assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n \
    \   assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphxajbedz.py\"\
    , line 11\n    decimal = 12\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # should print: '1100'\n            \"\"\"\n            decimal = 12\n     \
    \       binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # should print: '1100'\n            \"\"\"\n            decimal =\
    \ 12\n            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # should print: '1100'\n            \"\"\"\n            decimal =\
    \ 12\n            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # should print: '1100'\n            \"\"\"\n            decimal =\
    \ 12\n            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # should print: '1100'\n            \"\"\"\n            decimal =\
    \ 12\n            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # should print: '1100'\n            \"\"\"\n            decimal =\
    \ 12\n            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # should print: '1100'\n            \"\"\"\n            decimal =\
    \ 12\n            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # should print: '1100'\n            \"\"\"\n            decimal =\
    \ 12\n            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # should print: '1100'\n            \"\"\"\n            decimal =\
    \ 12\n            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # should print: '1100'\n            \"\"\"\n            decimal =\
    \ 12\n            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # should print: '1100'\n            \"\"\"\n            decimal =\
    \ 12\n            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # should print: '1100'\n            \"\"\"\n            decimal =\
    \ 12\n            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # should print: '1100'\n            \"\"\"\n            decimal =\
    \ 12\n            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # should print: '1100'\n            \"\"\"\n            decimal =\
    \ 12\n            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # should print: '1100'\n            \"\"\"\n            decimal =\
    \ 12\n            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # should print: '1100'\n            \"\"\"\n            decimal =\
    \ 12\n            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # should print: '1100'\n            \"\"\"\n            decimal =\
    \ 12\n            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # should print: '1100'\n            \"\"\"\n            decimal =\
    \ 12\n            binary_string = \ndef check(candidate):\n    assert candidate(0)\
    \ == 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvp3cv0et.py\"\
    , line 11\n    decimal = 12\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n    >>> decimal_to_binary(5)\n    '1100'\n  \
    \  >>> decimal_to_binary(8)\n    '1000'\n    >>> decimal_to_binary(10)\n    '1010'\n\
    \    >>> decimal_to_binary(15)\n    '1111'\n    >>> decimal_to_binary(16)\n  \
    \  '10000'\n    >>> decimal_to_binary(17)\n    '10001'\n    >>> decimal_to_binary(18)\n\
    \    '10010'\n    >>> decimal_to_binary(19)\n    '10011'\n    >>> decimal_to_binary(20)\n\
    \    '10100'\n    >>> decimal_to_binary(21)\n    '101011'\n    >>> decimal_to_binary(22)\n\
    \    '101101'\n    >>> decimal_to_binary(23)\n    '1010111'\n    >>> decimal_to_binary(24)\n\
    \    '1011001'\n    >>> decimal_to_binary(25)\n    '10111001'\n    >>> decimal_to_binary(26)\n\
    \    '101110101'\n    >>> decimal_to_binary(27)\n    '101110111'\n    >>> decimal_to_binary(28)\n\
    \    '11000001'\n    >>> decimal_to_binary(29)\n    '110000101'\n    >>> decimal_to_binary(30)\n\
    \    '110000111'\n    >>> decimal_to_binary(31)\n    '110001001'\n    >>> decimal_to_binary(32)\n\
    \    '1100010101'\n    >>> decimal_to_binary(33)\n    '1100010111'\n    >>> decimal_to_binary(34)\n\
    \    '110010001'\n    >>> decimal_to_binary(35)\n    '1100100101'\n    >>> decimal_to_binary(36)\n\
    \    '1100100111'\n    >>> decimal_to_binary(37)\n    '1100101001'\n    >>> decimal_to_binary(38)\n\
    \    '11001010101'\n    >>> decimal_to_binary(39)\n    '11001010111'\n    >>>\
    \ decimal_to_binary(40)\n    '11001011001'\n    >>> decimal_to_binary(41)\n  \
    \  '110010110101'\n    >>> decimal_to_binary(42)\n    '110010111001'\n    >>>\
    \ decimal_to_binary(43)\n    '1100101110101'\n    >>> decimal_to_binary(44)\n\
    \    '1100101110111'\n    >>> decimal_to_binary(45)\n    '110011001001'\n    >>>\
    \ decimal_to_binary(46)\n    '1100110010101'\n    >>> decimal_to_binary(47)\n\
    \    '1100110010111'\n    >>> decimal_to_binary(48)\n    '110011010001'\n    >>>\
    \ decimal_to_binary(49)\n    '1100110100101'\n    >>> decimal_to_binary(50)\n\
    \    '1100110100\ndef check(candidate):\n    assert candidate(0) == 'db0db'\n\
    \    assert candidate(32) == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n\
    \    assert candidate(15) == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpeu2mb_ei.py\"\
    , line 88\n    '1100110100\n    ^\nSyntaxError: unterminated string literal (detected\
    \ at line 88)\n"
  exit_code: 1
  status: SyntaxError
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # >>> '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # >>> '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # >>> '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # >>> '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # >>> '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # >>> '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # >>> '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # >>> '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # >>> '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # >>> '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # >>> '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # >>> '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # >>> '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # >>> '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # >>> '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # >>> '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # >>> '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # >>> '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # >>> '1100'\n            \"\"\"\ndef check(candidate):\n    assert candidate(0)\
    \ == 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn55xm8i_.py\"\
    , line 11\n    decimal = 12\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n    >>> decimal_to_binary(5)\n    '1111'\n  \
    \  >>> decimal_to_binary(10)\n    '1010'\n    >>> decimal_to_binary(15)\n    '1111'\n\
    \    >>> decimal_to_binary(20)\n    '1111'\n    >>> decimal_to_binary(25)\n  \
    \  '1111'\n    >>> decimal_to_binary(30)\n    '1111'\n    >>> decimal_to_binary(35)\n\
    \    '1111'\n    >>> decimal_to_binary(40)\n    '1111'\n    >>> decimal_to_binary(45)\n\
    \    '1111'\n    >>> decimal_to_binary(50)\n    '1111'\n    >>> decimal_to_binary(55)\n\
    \    '1111'\n    >>> decimal_to_binary(60)\n    '1111'\n    >>> decimal_to_binary(65)\n\
    \    '1111'\n    >>> decimal_to_binary(70)\n    '1111'\n    >>> decimal_to_binary(75)\n\
    \    '1111'\n    >>> decimal_to_binary(80)\n    '1111'\n    >>> decimal_to_binary(85)\n\
    \    '1111'\n    >>> decimal_to_binary(90)\n    '1111'\n    >>> decimal_to_binary(95)\n\
    \    '1111'\n    >>> decimal_to_binary(100)\n    '1111'\n    >>> decimal_to_binary(105)\n\
    \    '1111'\n    >>> decimal_to_binary(110)\n    '1111'\n    >>> decimal_to_binary(115)\n\
    \    '1111'\n    >>> decimal_to_binary(120)\n    '1111'\n    >>> decimal_to_binary(125)\n\
    \    '1111'\n    >>> decimal_to_binary(130)\n    '1111'\n    >>> decimal_to_binary(135)\n\
    \    '1111'\n    >>> decimal_to_binary(140)\n    '1111'\n    >>> decimal_to_binary(145)\n\
    \    '1111'\n    >>> decimal_to_binary(150)\n    '1111'\n    >>> decimal_to_binary(155)\n\
    \    '1111'\n    >>> decimal_to_binary(160)\n    '1111'\n    >>> decimal_to_binary(165)\n\
    \    '1111'\n    >>> decimal_to_binary(170)\n    '1111'\n    >>> decimal_to_binary(175)\n\
    \    '1111'\n    >>> decimal_to_binary(180)\n    '1111'\n    >>> decimal_to_binary(185)\n\
    \    '1111'\n    >>> decimal_to_binary(190)\n    '1111'\n    >>> decimal_to_binary(195)\n\
    \    '1111'\n    >>> decimal_to_binary(200)\n    '1111'\n    >>> decimal_to_binary(205)\n\
    \    '1111'\n    >>> decimal_to_binary(210)\n    '1111'\n    >>> decimal_to_binary(215)\n\
    \    '1111'\n    >>> decimal_to_binary(220)\n    '1111\ndef check(candidate):\n\
    \    assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n\
    \    assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppqsciyne.py\"\
    , line 98\n    '1111\n    ^\nSyntaxError: unterminated string literal (detected\
    \ at line 98)\n"
  exit_code: 1
  status: SyntaxError
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n            Input:\n            decimal = 12\n\
    \            Output:\n            1100\n            Explanation:\n           \
    \ Decimal: 12\n            Binary: 1100\n            \"\"\"\n    \"\"\"\n    decimal\
    \ = decimal\n    binary_string = \"\"\n    while decimal != 0:\n        binary_string\
    \ += \"0\"\n        decimal -= 1\n    while len(binary_string) < len(str(decimal)):\n\
    \        binary_string += \"0\"\n    return binary_string\n\n\ndef check(candidate):\n\
    \    assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n\
    \    assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp57dqa7mn.py\"\
    , line 11\n    Input:\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # Output: '1100'\n            \"\"\"\n            decimal = 12\n           \
    \ binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\ndef check(candidate):\n   \
    \ assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n \
    \   assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp8iz8eit.py\"\
    , line 11\n    decimal = 12\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # Output: '1100'\n            \"\"\"\n            decimal = 12\n           \
    \ binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\ndef check(candidate):\n   \
    \ assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n \
    \   assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2brumy2z.py\"\
    , line 11\n    decimal = 12\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n    >>> decimal_to_binary(10)\n    '1010'\n \
    \   >>> decimal_to_binary(16)\n    '10100'\n    >>> decimal_to_binary(32)\n  \
    \  '110000'\n    >>> decimal_to_binary(64)\n    '110001000000000000'\n    >>>\
    \ decimal_to_binary(128)\n    '110001000000000000000'\n    >>> decimal_to_binary(256)\n\
    \    '1100010000000000000000000000000000'\n    >>> decimal_to_binary(512)\n  \
    \  '1100010000000000000000000000000000000'\n    >>> decimal_to_binary(1024)\n\
    \    '1100010000000000000000000000000000001000000000000'\n    >>> decimal_to_binary(2048)\n\
    \    '1100010000000000000000000000000000001000000000000000'\n    >>> decimal_to_binary(4096)\n\
    \    '1100010000000000000000000000000000001000000000000001000000000000'\n    >>>\
    \ decimal_to_binary(8192)\n    '1100010000000000000000000000000000001000000000000001000000000000000'\n\
    \    >>> decimal_to_binary(16384)\n    '1100010000000000000000000000000000001000000000000001000000000000001000000000000'\n\
    \    >>> decimal_to_binary(32768)\n    '1100010000000000000000000000000000001000000000000001000000000000001000000000000001000000000000'\n\
    \    >>> decimal_to_binary(65536)\n    '1100010000000000000000000000000000001000000000000001000000000000001000000000000001000000000000001000000000000'\n\
    \    >>> decimal_to_binary(131072)\n    '1100010000000000000000000000000000001000000000000001000000000000001000000000000001000000000000001000000000000001000000000000'\n\
    \    >>> decimal_to_binary(262144)\n    '1100010000000000000000000000000000001000000000000001000000000000001000000000000001000000000000001000000000000001000000000000001000000000000'\n\
    \    >>> decimal_to_binary(524288)\n    '1100010000000000000000000000000000001000000000000001000000000000001000000000000001000000000000001000000000000001000000000000001000000000000001000000000000'\n\
    \    >>> decimal_to_binary(1048576)\n    '1100010000000000000000000000000000001000000000000001000000000000001000000000000001000000000000001000000000000001000000000000001000000000000001000000000000001000000000000'\n\
    \    >>> decimal_to_binary(2097152)\n    '1100010000000000000000000000000000001000000000000001000000000000001000000000000001000000000000001000000000000001000000000000001000000000000001000000000000001000000000000001000000000000'\n\
    \    >>> decimal_to_binary(4194304)\n    '110001000000000000000000000000000000100000000000000100000000000000100000000000000100\n\
    def check(candidate):\n    assert candidate(0) == 'db0db'\n    assert candidate(32)\
    \ == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n    assert candidate(15)\
    \ == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpb37ciqtb.py\"\
    , line 50\n    '110001000000000000000000000000000000100000000000000100000000000000100000000000000100\n\
    \    ^\nSyntaxError: unterminated string literal (detected at line 50)\n"
  exit_code: 1
  status: SyntaxError
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n            decimal = 15\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # Output: '1111'\n            \"\"\"\n            decimal = 15\n           \
    \ binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1111'\n            \"\"\"\n            decimal = 15\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1111'\n            \"\"\"\n            decimal = 15\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1111'\n            \"\"\"\n            decimal = 15\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1111'\n            \"\"\"\n            decimal = 15\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1111'\n            \"\"\"\n            decimal = 15\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1111'\n            \"\"\"\n            decimal = 15\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1111'\n            \"\"\"\n            decimal = 15\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1111'\n            \"\"\"\n            decimal = 15\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1111'\n            \"\"\"\n            decimal = 15\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1111'\n            \"\"\"\n            decimal = 15\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1111'\n            \"\"\"\n            decimal = 15\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1111'\n            \"\"\"\n            decimal = 15\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1111'\n            \"\"\"\n            decimal = 15\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1111'\n            \"\"\"\n            decimal = 15\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1111'\n            \"\"\"\n            decimal = 15\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1111'\n            \"\"\"\n            decimal = 15\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1111'\n            \"\"\"\n            decimal = 15\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1111'\n            \"\"\"\ndef check(candidate):\n   \
    \ assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n \
    \   assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz6fhzd59.py\"\
    , line 11\n    decimal = 15\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # Output: '1100'\n            \"\"\"\n            decimal = 12\n           \
    \ binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\ndef check(candidate):\n   \
    \ assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n \
    \   assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3gd7d56z.py\"\
    , line 11\n    decimal = 12\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n    >>> decimal_to_binary(8)\n    '100'\n   \
    \ >>> decimal_to_binary(16)\n    '10000'\n    >>> decimal_to_binary(32)\n    '10000000'\n\
    \    >>> decimal_to_binary(64)\n    '1000000000000'\n    >>> decimal_to_binary(128)\n\
    \    '1000000000000000'\n    >>> decimal_to_binary(256)\n    '10000000000000000000000000000'\n\
    \    >>> decimal_to_binary(512)\n    '1000000000000000000000000000000000000000000000000000000000000'\n\
    \    >>> decimal_to_binary(1024)\n    '1000000000000000000000000000000000000000000000000000000000000000'\n\
    \    >>> decimal_to_binary(2048)\n    '10000000000000000000000000000000000000000000000000000000000000000'\n\
    \    >>> decimal_to_binary(4096)\n    '100000000000000000000000000000000000000000000000000000000000000000'\n\
    \    >>> decimal_to_binary(8192)\n    '10000000000000000000000000000000000000000000000000000000000000000'\n\
    \    >>> decimal_to_binary(16384)\n    '10000000000000000000000000000000000000000000000000000000000000000'\n\
    \    >>> decimal_to_binary(32768)\n    '10000000000000000000000000000000000000000000000000000000000000000'\n\
    \    >>> decimal_to_binary(65536)\n    '10000000000000000000000000000000000000000000000000000000000000000'\n\
    \    >>> decimal_to_binary(131072)\n    '10000000000000000000000000000000000000000000000000000000000000000'\n\
    \    >>> decimal_to_binary(262144)\n    '10000000000000000000000000000000000000000000000000000000000000000'\n\
    \    >>> decimal_to_binary(524288)\n    '10000000000000000000000000000000000000000000000000000000000000000'\n\
    \    >>> decimal_to_binary(1048576)\n    '10000000000000000000000000000000000000000000000000000000000000000'\n\
    \    >>> decimal_to_binary(2097152)\n    '10000000000000000000000000000000000000000000000000000000000000000'\n\
    \    >>> decimal_to_binary(4194304)\n    '10000000000000000000000000000000000000000000000000000000000000000'\n\
    \    >>> decimal_to_binary(8388608)\n    '10000000000000000000000000000000000000000000000000000000000000000'\n\
    \    >>> decimal_to_binary(16777216)\n    '10000000000000000000000000000000000000000000000000000000000000000'\n\
    \    >>> decimal_to_binary(33554432)\n    '10000000000000000000000000000000000000000000000000000000000000000'\n\
    \    >>> decimal_to_binary(67108864)\n    '10000000000000000000000000000000000000000000000000000000000000000'\n\
    \    >>> decimal_to_binary(134217728)\n    '10000000000000000000000000000000000000000000000000000000000000000'\n\
    \    >>> decimal_to_binary(268435456)\n    '10000000000000000000000000000000000000000000000000000000000000000'\n\
    \    >>> decimal_to_binary(536870912)\n    '10000000000000000000000000000000000000000000000000000000000000000'\n\
    \    >>> decimal_to_binary(1073741824)\n    '10000000000000000000000000000000000000000000000000000000000000000'\n\
    \    >>> decimal_to_binary(2147483648)\n    '10000000000000000000000000000000000000000000000000000000000000000'\n\
    \    >>> decimal_to_binary(4294967296)\n    '10000000000000000000000000000000000000000000000000000000000000000'\n\
    \    >>> decimal_to_binary(8589934592)\n    '10000000000000000000000000000000000000000000000000000000000000000'\n\
    \    >>> \ndef check(candidate):\n    assert candidate(0) == 'db0db'\n    assert\
    \ candidate(32) == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n\
    \    assert candidate(15) == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph4u18m8o.py\"\
    , line 11\n    >>> decimal_to_binary(8)\n    ^^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\ndef check(candidate):\n\
    \    assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n\
    \    assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzl4_gs3h.py\"\
    , line 11\n    decimal = 12\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # Output: '1100'\n            \"\"\"\n            decimal = 12\n           \
    \ binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\ndef check(candidate):\n   \
    \ assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n \
    \   assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppbxza01o.py\"\
    , line 11\n    decimal = 12\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n    >>> decimal_to_binary(10)\n    '1010'\n \
    \   >>> decimal_to_binary(11)\n    '1110'\n    >>> decimal_to_binary(12)\n   \
    \ '1100'\n    >>> decimal_to_binary(13)\n    '1101'\n    >>> decimal_to_binary(14)\n\
    \    '1110'\n    >>> decimal_to_binary(15)\n    '1111'\n    >>> decimal_to_binary(16)\n\
    \    '1110'\n    >>> decimal_to_binary(17)\n    '1110'\n    >>> decimal_to_binary(18)\n\
    \    '1110'\n    >>> decimal_to_binary(19)\n    '1110'\n    >>> decimal_to_binary(20)\n\
    \    '1110'\n    >>> decimal_to_binary(21)\n    '1110'\n    >>> decimal_to_binary(22)\n\
    \    '1110'\n    >>> decimal_to_binary(23)\n    '1110'\n    >>> decimal_to_binary(24)\n\
    \    '1110'\n    >>> decimal_to_binary(25)\n    '1110'\n    >>> decimal_to_binary(26)\n\
    \    '1110'\n    >>> decimal_to_binary(27)\n    '1110'\n    >>> decimal_to_binary(28)\n\
    \    '1110'\n    >>> decimal_to_binary(29)\n    '1110'\n    >>> decimal_to_binary(30)\n\
    \    '1110'\n    >>> decimal_to_binary(31)\n    '1110'\n    >>> decimal_to_binary(32)\n\
    \    '1110'\n    >>> decimal_to_binary(33)\n    '1110'\n    >>> decimal_to_binary(34)\n\
    \    '1110'\n    >>> decimal_to_binary(35)\n    '1110'\n    >>> decimal_to_binary(36)\n\
    \    '1110'\n    >>> decimal_to_binary(37)\n    '1110'\n    >>> decimal_to_binary(38)\n\
    \    '1110'\n    >>> decimal_to_binary(39)\n    '1110'\n    >>> decimal_to_binary(40)\n\
    \    '1110'\n    >>> decimal_to_binary(41)\n    '1110'\n    >>> decimal_to_binary(42)\n\
    \    '1110'\n    >>> decimal_to_binary(43)\n    '1110'\n    >>> decimal_to_binary(44)\n\
    \    '1110'\n    >>> decimal_to_binary(45)\n    '1110'\n    >>> decimal_to_binary(46)\n\
    \    '1110'\n    >>> decimal_to_binary(47)\n    '1110'\n    >>> decimal_to_binary(48)\n\
    \    '1110'\n    >>> decimal_to_binary(49)\n    '1110'\n    >>> decimal_to_binary(50)\n\
    \    '1110'\n    >>> decimal_\ndef check(candidate):\n    assert candidate(0)\
    \ == 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3f6sp3mh.py\"\
    , line 11\n    >>> decimal_to_binary(10)\n    ^^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # Output: '1100'\n            \"\"\"\n            decimal = 12\n           \
    \ binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\ndef check(candidate):\n   \
    \ assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n \
    \   assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_2v7yccq.py\"\
    , line 11\n    decimal = 12\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n    >>> decimal_to_binary(1)\n    '1'\n    >>>\
    \ decimal_to_binary(10)\n    '1010'\n    >>> decimal_to_binary(16)\n    '10100'\n\
    \    >>> decimal_to_binary(17)\n    '101011'\n    >>> decimal_to_binary(18)\n\
    \    '1010100'\n    >>> decimal_to_binary(19)\n    '10101011'\n    >>> decimal_to_binary(20)\n\
    \    '101011010'\n    >>> decimal_to_binary(21)\n    '1010110110'\n    >>> decimal_to_binary(22)\n\
    \    '10101101011'\n    >>> decimal_to_binary(23)\n    '101011010100'\n    >>>\
    \ decimal_to_binary(24)\n    '1010110101011'\n    >>> decimal_to_binary(25)\n\
    \    '10101101011010'\n    >>> decimal_to_binary(26)\n    '101011010110110'\n\
    \    >>> decimal_to_binary(27)\n    '1010110101101011'\n    >>> decimal_to_binary(28)\n\
    \    '10101101011010100'\n    >>> decimal_to_binary(29)\n    '101011010110101011'\n\
    \    >>> decimal_to_binary(30)\n    '1010110101101011010'\n    >>> decimal_to_binary(31)\n\
    \    '10101101011010110110'\n    >>> decimal_to_binary(32)\n    '101011010110101101011'\n\
    \    >>> decimal_to_binary(33)\n    '1010110101101011010100'\n    >>> decimal_to_binary(34)\n\
    \    '10101101011010110101011'\n    >>> decimal_to_binary(35)\n    '101011010110101101011010'\n\
    \    >>> decimal_to_binary(36)\n    '1010110101101011010110110'\n    >>> decimal_to_binary(37)\n\
    \    '10101101011010110101101011'\n    >>> decimal_to_binary(38)\n    '101011010110101101011010100'\n\
    \    >>> decimal_to_binary(39)\n    '1010110101101011010110101011'\n    >>> decimal_to_binary(40)\n\
    \    '10101101011010110101101011010'\n    >>> decimal_to_binary(41)\n    '101011010110101101011010110110'\n\
    \    >>> decimal_to_binary(42)\n    '1010110101101011010110101101011'\n    >>>\
    \ decimal_to_binary(43)\n    '10101101011010110101101011010100'\n    >>> decimal_to_binary(44)\n\
    \    '10101101011010\ndef check(candidate):\n    assert candidate(0) == 'db0db'\n\
    \    assert candidate(32) == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n\
    \    assert candidate(15) == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuisr3bpg.py\"\
    , line 72\n    '10101101011010\n    ^\nSyntaxError: unterminated string literal\
    \ (detected at line 72)\n"
  exit_code: 1
  status: SyntaxError
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n    >>> decimal_to_binary(8)\n    '100'\n   \
    \ >>> decimal_to_binary(16)\n    '10000'\n    >>> decimal_to_binary(32)\n    '10000000'\n\
    \    >>> decimal_to_binary(64)\n    '1000000000000'\n    >>> decimal_to_binary(128)\n\
    \    '1000000000000000'\n    >>> decimal_to_binary(256)\n    '1000000000000000000000000000'\n\
    \    >>> decimal_to_binary(512)\n    '10000000000000000000000000000000'\n    >>>\
    \ decimal_to_binary(1024)\n    '100000000000000000000000000000000'\n    >>> decimal_to_binary(2048)\n\
    \    '1000000000000000000000000000000000'\n    >>> decimal_to_binary(4096)\n \
    \   '10000000000000000000000000000000000'\n    >>> decimal_to_binary(8192)\n \
    \   '1000000000000000000000000000000000'\n    >>> decimal_to_binary(16384)\n \
    \   '100000000000000000000000000000000'\n    >>> decimal_to_binary(32768)\n  \
    \  '1000000000000000000000000000000000'\n    >>> decimal_to_binary(65536)\n  \
    \  '100000000000000000000000000000000'\n    >>> decimal_to_binary(131072)\n  \
    \  '100000000000000000000000000000000'\n    >>> decimal_to_binary(262144)\n  \
    \  '100000000000000000000000000000000'\n    >>> decimal_to_binary(524288)\n  \
    \  '100000000000000000000000000000000'\n    >>> decimal_to_binary(1048576)\n \
    \   '100000000000000000000000000000000'\n    >>> decimal_to_binary(2097152)\n\
    \    '100000000000000000000000000000000'\n    >>> decimal_to_binary(4194304)\n\
    \    '100000000000000000000000000000000'\n    >>> decimal_to_binary(8388608)\n\
    \    '100000000000000000000000000000000'\n    >>> decimal_to_binary(16777216)\n\
    \    '100000000000000000000000000000000'\n    >>> decimal_to_binary(33554432)\n\
    \    '100000000000000000000000000000000'\n    >>> decimal_to_binary(67108864)\n\
    \    '100000000000000000000000000000000'\n    >>> decimal_to_binary(134217728)\n\
    \    '100000000000000000000000000000000'\n    >>> decimal_to_binary(268435456)\n\
    \    '100000000000000000000000000000000'\n    >>> decimal_to_binary(536870912)\n\
    \    '100000000000000000000000000000000'\n    >>> decimal_to_binary(1073741824)\n\
    \    '100000000000000000000000000000000'\n    >>> decimal_to_binary(2147483648)\n\
    \    '100000000000000000000000000000000'\n    >>> decimal_to_binary(4294967296)\n\
    \    '100000000000000000000000000000000'\n    >>> decimal_to_binary(8589934592)\n\
    \    '100000000000000000000000000000000'\n    >>> decimal_to_binary(17179869184)\n\
    \    '100000000000000000000000000000000'\n    >>> decimal_to_binary(343597\ndef\
    \ check(candidate):\n    assert candidate(0) == 'db0db'\n    assert candidate(32)\
    \ == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n    assert candidate(15)\
    \ == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpskhyg8v2.py\"\
    , line 11\n    >>> decimal_to_binary(8)\n    ^^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\ndef check(candidate):\n\
    \    assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n\
    \    assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu76ks7vn.py\"\
    , line 11\n    decimal = 12\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n    >>> decimal_to_binary(0)\n    '0'\n    >>>\
    \ decimal_to_binary(1)\n    '1'\n    >>> decimal_to_binary(2)\n    '10'\n    >>>\
    \ decimal_to_binary(3)\n    '111'\n    >>> decimal_to_binary(4)\n    '1010'\n\
    \    >>> decimal_to_binary(5)\n    '10111'\n    >>> decimal_to_binary(6)\n   \
    \ '111010'\n    >>> decimal_to_binary(7)\n    '11101111'\n    >>> decimal_to_binary(8)\n\
    \    '111011111'\n    >>> decimal_to_binary(9)\n    '1110111111'\n    >>> decimal_to_binary(10)\n\
    \    '11101111111'\n    >>> decimal_to_binary(11)\n    '111011111111'\n    >>>\
    \ decimal_to_binary(12)\n    '1110111111111'\n    >>> decimal_to_binary(13)\n\
    \    '11101111111110'\n    >>> decimal_to_binary(14)\n    '111011111111110'\n\
    \    >>> decimal_to_binary(15)\n    '1110111111111101'\n    >>> decimal_to_binary(16)\n\
    \    '11101111111111010'\n    >>> decimal_to_binary(17)\n    '111011111111110110'\n\
    \    >>> decimal_to_binary(18)\n    '1110111111111101101'\n    >>> decimal_to_binary(19)\n\
    \    '11101111111111011010'\n    >>> decimal_to_binary(20)\n    '11101111111111011011'\n\
    \    >>> decimal_to_binary(21)\n    '111011111111110110110'\n    >>> decimal_to_binary(22)\n\
    \    '1110111111111101101101'\n    >>> decimal_to_binary(23)\n    '11101111111111011011010'\n\
    \    >>> decimal_to_binary(24)\n    '1110111111111101101111'\n    >>> decimal_to_binary(25)\n\
    \    '111011111111110110110110'\n    >>> decimal_to_binary(26)\n    '1110111111111101101101101'\n\
    \    >>> decimal_to_binary(27)\n    '11101111111111011011011010'\n    >>> decimal_to_binary(28)\n\
    \    '111011111111110110111111'\n    >>> decimal_to_binary(29)\n    '111011111111110110110110110'\n\
    \    >>> decimal_to_binary(30)\n    '1110111111111101101111111'\n    >>> decimal_to_binary(31)\n\
    \    '1110111111111101101101101101'\n    >>> decimal_to_binary(32)\n    '11101111111111011011111111'\n\
    \    >>> decimal_to_bin\ndef check(candidate):\n    assert candidate(0) == 'db0db'\n\
    \    assert candidate(32) == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n\
    \    assert candidate(15) == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprcg0dpau.py\"\
    , line 11\n    >>> decimal_to_binary(0)\n    ^^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n            Input:\n            decimal = 12\n\
    \            Output: '1100'\n            \"\"\"\n            decimal = 12\n  \
    \          binary_string = '1100'\n            binary_string = 'db' + binary_string\n\
    \            binary_string = '0' + binary_string\n            binary_string =\
    \ '1' + binary_string\n            return binary_string\n\n    Time Complexity:\
    \ O(1)\n    Space Complexity: O(1)\n    \"\"\"\n    binary_string = ''\n    binary_string\
    \ = 'db' + binary_string\n    binary_string = '0' + binary_string\n    binary_string\
    \ = '1' + binary_string\n    return binary_string\n\n\ndef check(candidate):\n\
    \    assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n\
    \    assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsfshn28j.py\"\
    , line 11\n    Input:\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n    >>> decimal_to_binary(5)\n    '1100'\n  \
    \  >>> decimal_to_binary(10)\n    '1010'\n    >>> decimal_to_binary(15)\n    '1111'\n\
    \    >>> decimal_to_binary(16)\n    '1110'\n    >>> decimal_to_binary(17)\n  \
    \  '1111'\n    >>> decimal_to_binary(18)\n    '1110'\n    >>> decimal_to_binary(19)\n\
    \    '1111'\n    >>> decimal_to_binary(20)\n    '1110'\n    >>> decimal_to_binary(21)\n\
    \    '1111'\n    >>> decimal_to_binary(22)\n    '1110'\n    >>> decimal_to_binary(23)\n\
    \    '1111'\n    >>> decimal_to_binary(24)\n    '1110'\n    >>> decimal_to_binary(25)\n\
    \    '1111'\n    >>> decimal_to_binary(26)\n    '1110'\n    >>> decimal_to_binary(27)\n\
    \    '1111'\n    >>> decimal_to_binary(28)\n    '1110'\n    >>> decimal_to_binary(29)\n\
    \    '1111'\n    >>> decimal_to_binary(30)\n    '1110'\n    >>> decimal_to_binary(31)\n\
    \    '1111'\n    >>> decimal_to_binary(32)\n    '1110'\n    >>> decimal_to_binary(33)\n\
    \    '1111'\n    >>> decimal_to_binary(34)\n    '1110'\n    >>> decimal_to_binary(35)\n\
    \    '1111'\n    >>> decimal_to_binary(36)\n    '1110'\n    >>> decimal_to_binary(37)\n\
    \    '1111'\n    >>> decimal_to_binary(38)\n    '1110'\n    >>> decimal_to_binary(39)\n\
    \    '1111'\n    >>> decimal_to_binary(40)\n    '1110'\n    >>> decimal_to_binary(41)\n\
    \    '1111'\n    >>> decimal_to_binary(42)\n    '1110'\n    >>> decimal_to_binary(43)\n\
    \    '1111'\n    >>> decimal_to_binary(44)\n    '1110'\n    >>> decimal_to_binary(45)\n\
    \    '1111'\n    >>> decimal_to_binary(46)\n    '1110'\n    >>> decimal_to_binary(47)\n\
    \    '1111'\n    >>> decimal_to_binary(48)\n    '1110'\n    >>> decimal_to_binary(49)\n\
    \    '1111'\n    >>> decimal_to_binary(50)\n    '1110'\n    >>> decimal_to_binary(51)\n\
    \    '1111'\n    >>> decimal_to_binary(52)\n    '1110'\n    >>> decimal_to_binary(53)\n\
    \    '1111'\n    >>> decimal_to_binary(54)\n    '1110'\n    >>> decimal_to_bin\n\
    def check(candidate):\n    assert candidate(0) == 'db0db'\n    assert candidate(32)\
    \ == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n    assert candidate(15)\
    \ == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp58yf_etc.py\"\
    , line 11\n    >>> decimal_to_binary(5)\n    ^^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n    >>> decimal_to_binary(4)\n    '0000'\n  \
    \  >>> decimal_to_binary(5)\n    '0101'\n    >>> decimal_to_binary(6)\n    '0111'\n\
    \    >>> decimal_to_binary(7)\n    '1001'\n    >>> decimal_to_binary(8)\n    '1011'\n\
    \    >>> decimal_to_binary(9)\n    '1111'\n    >>> decimal_to_binary(10)\n   \
    \ '1010'\n    >>> decimal_to_binary(11)\n    '1011'\n    >>> decimal_to_binary(12)\n\
    \    '1100'\n    >>> decimal_to_binary(13)\n    '1101'\n    >>> decimal_to_binary(14)\n\
    \    '1110'\n    >>> decimal_to_binary(15)\n    '1111'\n    >>> decimal_to_binary(16)\n\
    \    '1110'\n    >>> decimal_to_binary(17)\n    '1111'\n    >>> decimal_to_binary(18)\n\
    \    '1110'\n    >>> decimal_to_binary(19)\n    '1111'\n    >>> decimal_to_binary(20)\n\
    \    '1110'\n    >>> decimal_to_binary(21)\n    '1111'\n    >>> decimal_to_binary(22)\n\
    \    '1110'\n    >>> decimal_to_binary(23)\n    '1111'\n    >>> decimal_to_binary(24)\n\
    \    '1110'\n    >>> decimal_to_binary(25)\n    '1111'\n    >>> decimal_to_binary(26)\n\
    \    '1110'\n    >>> decimal_to_binary(27)\n    '1111'\n    >>> decimal_to_binary(28)\n\
    \    '1110'\n    >>> decimal_to_binary(29)\n    '1111'\n    >>> decimal_to_binary(30)\n\
    \    '1110'\n    >>> decimal_to_binary(31)\n    '1111'\n    >>> decimal_to_binary(32)\n\
    \    '1110'\n    >>> decimal_to_binary(33)\n    '1111'\n    >>> decimal_to_binary(34)\n\
    \    '1110'\n    >>> decimal_to_binary(35)\n    '1111'\n    >>> decimal_to_binary(36)\n\
    \    '1110'\n    >>> decimal_to_binary(37)\n    '1111'\n    >>> decimal_to_binary(38)\n\
    \    '1110'\n    >>> decimal_to_binary(39)\n    '1111'\n    >>> decimal_to_binary(40)\n\
    \    '1110'\n    >>> decimal_to_binary(41)\n    '1111'\n    >>> decimal_to_binary(42)\n\
    \    '1110'\n    >>> decimal_to_binary(43)\n    '1111'\n    >>> decimal_to_binary(44)\n\
    \    '1110'\n    >>> decimal_to_binary(45)\n    '1111'\n    >>> decimal_to_binary(46)\n\
    \    '1110'\n    >>> \ndef check(candidate):\n    assert candidate(0) == 'db0db'\n\
    \    assert candidate(32) == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n\
    \    assert candidate(15) == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcbeltpeg.py\"\
    , line 11\n    >>> decimal_to_binary(4)\n    ^^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n    >>> decimal_to_binary(5)\n    '1111'\n  \
    \  >>> decimal_to_binary(6)\n    '11111'\n    >>> decimal_to_binary(7)\n    '111111'\n\
    \    >>> decimal_to_binary(8)\n    '1111111'\n    >>> decimal_to_binary(9)\n \
    \   '11111110'\n    >>> decimal_to_binary(10)\n    '111111110'\n    >>> decimal_to_binary(11)\n\
    \    '1111111101'\n    >>> decimal_to_binary(12)\n    '11111111010'\n    >>> decimal_to_binary(13)\n\
    \    '111111110100'\n    >>> decimal_to_binary(14)\n    '1111111101000'\n    >>>\
    \ decimal_to_binary(15)\n    '11111111010000'\n    >>> decimal_to_binary(16)\n\
    \    '111111110100000'\n    >>> decimal_to_binary(17)\n    '1111111101000001'\n\
    \    >>> decimal_to_binary(18)\n    '11111111010000010'\n    >>> decimal_to_binary(19)\n\
    \    '111111110100000110'\n    >>> decimal_to_binary(20)\n    '11111111010000011010'\n\
    \    >>> decimal_to_binary(21)\n    '111111110100000110101'\n    >>> decimal_to_binary(22)\n\
    \    '11111111010000011010100'\n    >>> decimal_to_binary(23)\n    '111111110100000110101000'\n\
    \    >>> decimal_to_binary(24)\n    '1111111101000001101010000'\n    >>> decimal_to_binary(25)\n\
    \    '11111111010000011010100000'\n    >>> decimal_to_binary(26)\n    '111111110100000110101000001'\n\
    \    >>> decimal_to_binary(27)\n    '11111111010000011010100000110'\n    >>> decimal_to_binary(28)\n\
    \    '1111111101000001101010000011010'\n    >>> decimal_to_binary(29)\n    '11111111010000011010100000110101'\n\
    \    >>> decimal_to_binary(30)\n    '1111111101000001101010000011010100'\n   \
    \ >>> decimal_to_binary(31)\n    '11111111010000011010100000110101000'\n    >>>\
    \ decimal_to_binary(32)\n    '111111110100000110101000001101010000'\n    >>> decimal_to_binary(33)\n\
    \    '1111111101000001101010000011010100000'\n    >>> decimal_to_binary(34)\n\
    \    '11111111010000011010100000110101000001'\n    >>> decimal_to_binary(35)\n\
    \    '1111111101000001101010000011010100000110'\n    >>> decimal_to_\ndef check(candidate):\n\
    \    assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n\
    \    assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp70ymyg4r.py\"\
    , line 11\n    >>> decimal_to_binary(5)\n    ^^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n            decimal = 15\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # Output: '1111'\n            \"\"\"\n            decimal = 15\n           \
    \ binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1111'\n            \"\"\"\n            decimal = 15\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1111'\n            \"\"\"\n            decimal = 15\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1111'\n            \"\"\"\n            decimal = 15\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1111'\n            \"\"\"\n            decimal = 15\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1111'\n            \"\"\"\n            decimal = 15\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1111'\n            \"\"\"\n            decimal = 15\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1111'\n            \"\"\"\n            decimal = 15\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1111'\n            \"\"\"\n            decimal = 15\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1111'\n            \"\"\"\n            decimal = 15\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1111'\n            \"\"\"\n            decimal = 15\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1111'\n            \"\"\"\n            decimal = 15\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1111'\n            \"\"\"\n            decimal = 15\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1111'\n            \"\"\"\n            decimal = 15\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1111'\n            \"\"\"\n            decimal = 15\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1111'\n            \"\"\"\n            decimal = 15\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1111'\n            \"\"\"\n            decimal = 15\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1111'\n            \"\"\"\n            decimal = 15\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1111'\n            \"\"\"\ndef check(candidate):\n   \
    \ assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n \
    \   assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0eerasu4.py\"\
    , line 11\n    decimal = 15\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n    >>> decimal_to_binary(10)\n    '1010'\n \
    \   >>> decimal_to_binary(5)\n    '101'\n    >>> decimal_to_binary(15)\n    '1100011'\n\
    \    >>> decimal_to_binary(30)\n    '110000001100011'\n    >>> decimal_to_binary(100)\n\
    \    '1000000000000'\n    >>> decimal_to_binary(200)\n    '1000000000000000'\n\
    \    >>> decimal_to_binary(-10)\n    '-10'\n    >>> decimal_to_binary(-15)\n \
    \   '-11'\n    >>> decimal_to_binary(-30)\n    '-1100'\n    >>> decimal_to_binary(-100)\n\
    \    '-100'\n    >>> decimal_to_binary(-200)\n    '-1000'\n    \"\"\"\n    binary_string\
    \ = \"\"\n    binary_string = \"{0:b}\".format(decimal)\n    binary_string = \"\
    db\" + binary_string\n    return binary_string\n\n\ndef check(candidate):\n  \
    \  assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n\
    \    assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp22xblard.py\"\
    , line 33\n    \"\"\"\n    ^\nSyntaxError: unterminated triple-quoted string literal\
    \ (detected at line 49)\n"
  exit_code: 1
  status: SyntaxError
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n            Input: decimal = 12\n           \
    \ Output: '1100'\n            Input: decimal = 12\n            Output: '1100'\n\
    \            Input: decimal = 12\n            Output: '1100'\n            Input:\
    \ decimal = 12\n            Output: '1100'\n            Input: decimal = 12\n\
    \            Output: '1100'\n            Input: decimal = 12\n            Output:\
    \ '1100'\n            Input: decimal = 12\n            Output: '1100'\n      \
    \      Input: decimal = 12\n            Output: '1100'\n            Input: decimal\
    \ = 12\n            Output: '1100'\n            Input: decimal = 12\n        \
    \    Output: '1100'\n            Input: decimal = 12\n            Output: '1100'\n\
    \            Input: decimal = 12\n            Output: '1100'\n            Input:\
    \ decimal = 12\n            Output: '1100'\n            Input: decimal = 12\n\
    \            Output: '1100'\n            Input: decimal = 12\n            Output:\
    \ '1100'\n            Input: decimal = 12\n            Output: '1100'\n      \
    \      Input: decimal = 12\n            Output: '1100'\n            Input: decimal\
    \ = 12\n            Output: '1100'\n            Input: decimal = 12\n        \
    \    Output: '1100'\n            Input: decimal = 12\n            Output: '1100'\n\
    \            Input: decimal = 12\n            Output: '1100'\n            Input:\
    \ decimal = 12\n            Output: '1100'\n            Input: decimal = 12\n\
    \            Output: '1100'\n            Input: decimal = 12\n            Output:\
    \ '1100'\n            Input: decimal = 12\n            Output: '1100'\n      \
    \      Input: decimal = 12\n            Output: '1100'\n            Input: decimal\
    \ = 12\n            Output: '1100'\n            Input: decimal = 12\n        \
    \    Output: '1100'\n            Input: decimal = 12\n            Output: '1100'\n\
    \            Input: decimal = 12\n            Output: '1100'\n            Input:\
    \ decimal = 12\n            Output: '1100'\n            Input: decimal = 12\n\
    \            Output: '1100'\n            Input: decimal = 12\n            Output:\
    \ '1100'\n            Input: decimal = 12\n            Output: '1100'\n      \
    \      Input: decimal = 12\n            Output: '1100'\n            Input: decimal\
    \ = 12\n            Output: '1100'\n            Input: decimal = 12\n        \
    \    Output: '1100'\n            Input: decimal = 12\n            Output: '1100'\n\
    \            Input: decimal = 12\n            Output: '1100'\n            Input:\
    \ decimal = \ndef check(candidate):\n    assert candidate(0) == 'db0db'\n    assert\
    \ candidate(32) == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n\
    \    assert candidate(15) == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptnnqv460.py\"\
    , line 11\n    Input: decimal = 12\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\ndef check(candidate):\n\
    \    assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n\
    \    assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbuu19hss.py\"\
    , line 11\n    decimal = 12\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\ndef check(candidate):\n\
    \    assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n\
    \    assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdyji1_71.py\"\
    , line 11\n    decimal = 12\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n    >>> decimal_to_binary(0)\n    '0'\n    >>>\
    \ decimal_to_binary(1)\n    '1'\n    >>> decimal_to_binary(10)\n    '1010'\n \
    \   >>> decimal_to_binary(11)\n    '111'\n    >>> decimal_to_binary(123)\n   \
    \ '1110011'\n    >>> decimal_to_binary(1234)\n    '111001110011'\n    >>> decimal_to_binary(12345)\n\
    \    '11100111001110011'\n    >>> decimal_to_binary(12345)\n    '11100111001110011'\n\
    \    >>> decimal_to_binary(-10)\n    '-10'\n    >>> decimal_to_binary(-20)\n \
    \   '-1000'\n    >>> decimal_to_binary(-30)\n    '-10010'\n    >>> decimal_to_binary(-40)\n\
    \    '-100110'\n    >>> decimal_to_binary(-50)\n    '-1001110'\n    >>> decimal_to_binary(-60)\n\
    \    '-10011110'\n    >>> decimal_to_binary(-70)\n    '-100111110'\n    >>> decimal_to_binary(-80)\n\
    \    '-1001111110'\n    >>> decimal_to_binary(-90)\n    '-10011111110'\n    >>>\
    \ decimal_to_binary(-100)\n    '-100111111110'\n    >>> decimal_to_binary(-1000)\n\
    \    '-1001111111110'\n    >>> decimal_to_binary(-10000)\n    '-10011111111110'\n\
    \    >>> decimal_to_binary(-100000)\n    '-100111111111110'\n    >>> decimal_to_binary(-1000000)\n\
    \    '-1001111111111110'\n    >>> decimal_to_binary(-10000000)\n    '-10011111111111110'\n\
    \    >>> decimal_to_binary(-100000000)\n    '-100111111111111110'\n    >>> decimal_to_binary(-1000000000)\n\
    \    '-10011111111111110'\n    >>> decimal_to_binary(-10000000000)\n    '-100111111111111110'\n\
    \    >>> decimal_to_binary(-100000000000)\n    '-10011111111111110'\n    >>> decimal_to_binary(-1000000000000)\n\
    \    '-100111111111111110'\n    >>> decimal_to_binary(-10000000000000)\n    '-10011111111111110'\n\
    \    >>> decimal_to_binary(-100000000000000)\n    '-100111111111111110'\n    >>>\
    \ decimal_to_binary(-1000000000000000)\n    '-10011111111111110'\n    >>> decimal_to_binary(-10000000000000000)\n\
    \    '-100111111111111110'\n    >>> decimal_to_binary(-100000000000000000)\n \
    \   '-10011111111111110'\n    >>> decimal_to_binary(-1000000000000000000)\n  \
    \  '\ndef check(candidate):\n    assert candidate(0) == 'db0db'\n    assert candidate(32)\
    \ == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n    assert candidate(15)\
    \ == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7fqow0p4.py\"\
    , line 78\n    '\n    ^\nSyntaxError: unterminated string literal (detected at\
    \ line 78)\n"
  exit_code: 1
  status: SyntaxError
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\ndef check(candidate):\n\
    \    assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n\
    \    assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp98jdbi_.py\"\
    , line 11\n    decimal = 12\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\ndef check(candidate):\n\
    \    assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n\
    \    assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq0u7uc1u.py\"\
    , line 11\n    decimal = 12\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n    >>> decimal_to_binary(1)\n    '1'\n    >>>\
    \ decimal_to_binary(2)\n    '10'\n    >>> decimal_to_binary(3)\n    '111'\n  \
    \  >>> decimal_to_binary(4)\n    '100'\n    >>> decimal_to_binary(5)\n    '1010'\n\
    \    >>> decimal_to_binary(6)\n    '10111'\n    >>> decimal_to_binary(7)\n   \
    \ '11100'\n    >>> decimal_to_binary(8)\n    '111010'\n    >>> decimal_to_binary(9)\n\
    \    '1110111'\n    >>> decimal_to_binary(10)\n    '11110100'\n    >>> decimal_to_binary(11)\n\
    \    '111101010'\n    >>> decimal_to_binary(12)\n    '1111010111'\n    >>> decimal_to_binary(13)\n\
    \    '1111100100'\n    >>> decimal_to_binary(14)\n    '11111001010'\n    >>> decimal_to_binary(15)\n\
    \    '111110010111'\n    >>> decimal_to_binary(16)\n    '111110100100'\n    >>>\
    \ decimal_to_binary(17)\n    '1111101001010'\n    >>> decimal_to_binary(18)\n\
    \    '11111010010111'\n    >>> decimal_to_binary(19)\n    '1111101100100'\n  \
    \  >>> decimal_to_binary(20)\n    '11111011001010'\n    >>> decimal_to_binary(21)\n\
    \    '111110110010111'\n    >>> decimal_to_binary(22)\n    '1111110100100'\n \
    \   >>> decimal_to_binary(23)\n    '11111101001010'\n    >>> decimal_to_binary(24)\n\
    \    '111111010010111'\n    >>> decimal_to_binary(25)\n    '111111010100100'\n\
    \    >>> decimal_to_binary(26)\n    '1111110101001010'\n    >>> decimal_to_binary(27)\n\
    \    '11111101010010111'\n    >>> decimal_to_binary(28)\n    '111111010110100'\n\
    \    >>> decimal_to_binary(29)\n    '1111110101101010'\n    >>> decimal_to_binary(30)\n\
    \    '11111101011010111'\n    >>> decimal_to_binary(31)\n    '11111101100100100'\n\
    \    >>> decimal_to_binary(32)\n    '111111011001001010'\n    >>> decimal_to_binary(33)\n\
    \    '1111110110010010111'\n    >>> decimal_to_binary(34)\n    '1111110110010100100'\n\
    \    >>> decimal_to_binary(35)\n    '11111101100101001010'\n    >>> decimal_to_binary(36)\n\
    \    '111111011001010010111'\n    >>> decimal_to_binary(37)\ndef check(candidate):\n\
    \    assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n\
    \    assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1gxqyuf1.py\"\
    , line 11\n    >>> decimal_to_binary(1)\n    ^^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n    >>> decimal_to_binary(12)\n    '1100'\n \
    \   >>> decimal_to_binary(-4)\n    '-1000'\n    >>> decimal_to_binary(0)\n   \
    \ '0'\n    >>> decimal_to_binary(1)\n    '1'\n    >>> decimal_to_binary(2)\n \
    \   '10'\n    >>> decimal_to_binary(3)\n    '11'\n    >>> decimal_to_binary(4)\n\
    \    '100'\n    >>> decimal_to_binary(5)\n    '101'\n    >>> decimal_to_binary(6)\n\
    \    '110'\n    >>> decimal_to_binary(7)\n    '111'\n    >>> decimal_to_binary(8)\n\
    \    '1000'\n    >>> decimal_to_binary(9)\n    '1001'\n    >>> decimal_to_binary(10)\n\
    \    '1010'\n    >>> decimal_to_binary(11)\n    '1011'\n    >>> decimal_to_binary(12)\n\
    \    '1100'\n    >>> decimal_to_binary(13)\n    '1101'\n    >>> decimal_to_binary(14)\n\
    \    '1110'\n    >>> decimal_to_binary(15)\n    '1111'\n    >>> decimal_to_binary(16)\n\
    \    '10000'\n    >>> decimal_to_binary(17)\n    '10001'\n    >>> decimal_to_binary(18)\n\
    \    '10010'\n    >>> decimal_to_binary(19)\n    '10011'\n    >>> decimal_to_binary(20)\n\
    \    '10100'\n    >>> decimal_to_binary(21)\n    '10101'\n    >>> decimal_to_binary(22)\n\
    \    '10110'\n    >>> decimal_to_binary(23)\n    '10111'\n    >>> decimal_to_binary(24)\n\
    \    '11000'\n    >>> decimal_to_binary(25)\n    '11001'\n    >>> decimal_to_binary(26)\n\
    \    '11010'\n    >>> decimal_to_binary(27)\n    '11011'\n    >>> decimal_to_binary(28)\n\
    \    '11100'\n    >>> decimal_to_binary(29)\n    '11101'\n    >>> decimal_to_binary(30)\n\
    \    '11110'\n    >>> decimal_to_binary(31)\n    '11111'\n    >>> decimal_to_binary(32)\n\
    \    '100000'\n    >>> decimal_to_binary(33)\n    '100001'\n    >>> decimal_to_binary(34)\n\
    \    '100010'\n    >>> decimal_to_binary(35)\n    '100011'\n    >>> decimal_to_binary(36)\n\
    \    '100100'\n    >>> decimal_to_binary(37)\n    '100101'\n    >>> decimal_to_binary(38)\n\
    \    '100110'\n    >>> decimal_to_binary(39)\n    '100111'\n    >>> decimal_to_binary(40)\n\
    \    '101000'\n    >>> decimal_to_binary(\ndef check(candidate):\n    assert candidate(0)\
    \ == 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps36qrwrh.py\"\
    , line 11\n    >>> decimal_to_binary(12)\n    ^^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n    >>> decimal_to_binary(1)\n    '1'\n    >>>\
    \ decimal_to_binary(2)\n    '10'\n    >>> decimal_to_binary(3)\n    '111'\n  \
    \  >>> decimal_to_binary(4)\n    '1010'\n    >>> decimal_to_binary(5)\n    '10111'\n\
    \    >>> decimal_to_binary(6)\n    '101010'\n    >>> decimal_to_binary(7)\n  \
    \  '1010110'\n    >>> decimal_to_binary(8)\n    '10101011'\n    >>> decimal_to_binary(9)\n\
    \    '101010111'\n    >>> decimal_to_binary(10)\n    '1010101111'\n    >>> decimal_to_binary(11)\n\
    \    '10101011111'\n    >>> decimal_to_binary(12)\n    '101010111111'\n    >>>\
    \ decimal_to_binary(13)\n    '1010101111111'\n    >>> decimal_to_binary(14)\n\
    \    '10101011111111'\n    >>> decimal_to_binary(15)\n    '101010111111111'\n\
    \    >>> decimal_to_binary(16)\n    '1010101111111110'\n    >>> decimal_to_binary(17)\n\
    \    '10101011111111110'\n    >>> decimal_to_binary(18)\n    '101010111111111101'\n\
    \    >>> decimal_to_binary(19)\n    '1010101111111111010'\n    >>> decimal_to_binary(20)\n\
    \    '10101011111111110100'\n    >>> decimal_to_binary(21)\n    '101010111111111101000'\n\
    \    >>> decimal_to_binary(22)\n    '1010101111111111010000'\n    >>> decimal_to_binary(23)\n\
    \    '10101011111111110100000'\n    >>> decimal_to_binary(24)\n    '101010111111111101000000'\n\
    \    >>> decimal_to_binary(25)\n    '1010101111111111010000000'\n    >>> decimal_to_binary(26)\n\
    \    '10101011111111110100000000'\n    >>> decimal_to_binary(27)\n    '101010111111111101000000000'\n\
    \    >>> decimal_to_binary(28)\n    '1010101111111111010000000000'\n    >>> decimal_to_binary(29)\n\
    \    '10101011111111110100000000000'\n    >>> decimal_to_binary(30)\n    '101010111111111101000000000000'\n\
    \    >>> decimal_to_binary(31)\n    '1010101111111111010000000000000'\n    >>>\
    \ decimal_to_binary(32)\n    '101010111111111101000000000000000'\n    >>> decimal_to_binary(33)\n\
    \    '1010101111111111010000000000000000'\n    >>> decimal_to_binary(34)\n   \
    \ '101010111111111101000000000000000000'\n    >>> decimal_to_binary(35\ndef check(candidate):\n\
    \    assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n\
    \    assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdtkvimwg.py\"\
    , line 11\n    >>> decimal_to_binary(1)\n    ^^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n    >>> decimal_to_binary(10)\n    '1010'\n \
    \   >>> decimal_to_binary(11)\n    '111'\n    >>> decimal_to_binary(12)\n    '110'\n\
    \    >>> decimal_to_binary(13)\n    '111'\n    >>> decimal_to_binary(14)\n   \
    \ '100'\n    >>> decimal_to_binary(15)\n    '111'\n    >>> decimal_to_binary(16)\n\
    \    '1000'\n    >>> decimal_to_binary(17)\n    '1111'\n    >>> decimal_to_binary(18)\n\
    \    '1001'\n    >>> decimal_to_binary(19)\n    '1011'\n    >>> decimal_to_binary(20)\n\
    \    '1111'\n    >>> decimal_to_binary(21)\n    '10011'\n    >>> decimal_to_binary(22)\n\
    \    '10100'\n    >>> decimal_to_binary(23)\n    '11110'\n    >>> decimal_to_binary(24)\n\
    \    '11100'\n    >>> decimal_to_binary(25)\n    '11111'\n    >>> decimal_to_binary(26)\n\
    \    '111011'\n    >>> decimal_to_binary(27)\n    '111101'\n    >>> decimal_to_binary(28)\n\
    \    '111011'\n    >>> decimal_to_binary(29)\n    '111101'\n    >>> decimal_to_binary(30)\n\
    \    '111011'\n    >>> decimal_to_binary(31)\n    '111101'\n    >>> decimal_to_binary(32)\n\
    \    '111011'\n    >>> decimal_to_binary(33)\n    '111101'\n    >>> decimal_to_binary(34)\n\
    \    '111011'\n    >>> decimal_to_binary(35)\n    '111101'\n    >>> decimal_to_binary(36)\n\
    \    '111011'\n    >>> decimal_to_binary(37)\n    '111101'\n    >>> decimal_to_binary(38)\n\
    \    '111011'\n    >>> decimal_to_binary(39)\n    '111101'\n    >>> decimal_to_binary(40)\n\
    \    '111011'\n    >>> decimal_to_binary(41)\n    '111101'\n    >>> decimal_to_binary(42)\n\
    \    '111011'\n    >>> decimal_to_binary(43)\n    '111101'\n    >>> decimal_to_binary(44)\n\
    \    '111011'\n    >>> decimal_to_binary(45)\n    '111101'\n    >>> decimal_to_binary(46)\n\
    \    '111011'\n    >>> decimal_to_binary(47)\n    '111101'\n    >>> decimal_to_binary(48)\n\
    \    '111011'\n    >>> decimal_to_binary(49)\n    '111101'\n    >>> decimal_to_binary(50)\n\
    \    '111011'\n    >>> decimal_to_binary(51)\n    '11\ndef check(candidate):\n\
    \    assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n\
    \    assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx9_o_p35.py\"\
    , line 94\n    '11\n    ^\nSyntaxError: unterminated string literal (detected\
    \ at line 94)\n"
  exit_code: 1
  status: SyntaxError
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n    >>> decimal_to_binary(5)\n    '1100'\n  \
    \  >>> decimal_to_binary(10)\n    '1010'\n    >>> decimal_to_binary(15)\n    '1111'\n\
    \    >>> decimal_to_binary(20)\n    '1111'\n    >>> decimal_to_binary(25)\n  \
    \  '111111'\n    >>> decimal_to_binary(30)\n    '111111'\n    >>> decimal_to_binary(35)\n\
    \    '1111111'\n    >>> decimal_to_binary(40)\n    '1111111'\n    >>> decimal_to_binary(45)\n\
    \    '11111110'\n    >>> decimal_to_binary(50)\n    '11111110'\n    >>> decimal_to_binary(55)\n\
    \    '111111100'\n    >>> decimal_to_binary(60)\n    '111111100'\n    >>> decimal_to_binary(65)\n\
    \    '1111111000'\n    >>> decimal_to_binary(70)\n    '1111111000'\n    >>> decimal_to_binary(75)\n\
    \    '11111110000'\n    >>> decimal_to_binary(80)\n    '11111110000'\n    >>>\
    \ decimal_to_binary(85)\n    '111111100000'\n    >>> decimal_to_binary(90)\n \
    \   '111111100000'\n    >>> decimal_to_binary(95)\n    '1111111000000'\n    >>>\
    \ decimal_to_binary(100)\n    '1111111000000'\n    >>> decimal_to_binary(105)\n\
    \    '11111110000000'\n    >>> decimal_to_binary(110)\n    '11111110000000'\n\
    \    >>> decimal_to_binary(115)\n    '111111100000000'\n    >>> decimal_to_binary(120)\n\
    \    '111111100000000'\n    >>> decimal_to_binary(125)\n    '1111111000000000'\n\
    \    >>> decimal_to_binary(130)\n    '1111111000000000'\n    >>> decimal_to_binary(135)\n\
    \    '11111110000000000'\n    >>> decimal_to_binary(140)\n    '11111110000000000'\n\
    \    >>> decimal_to_binary(145)\n    '111111100000000000'\n    >>> decimal_to_binary(150)\n\
    \    '111111100000000000'\n    >>> decimal_to_binary(155)\n    '1111111000000000000'\n\
    \    >>> decimal_to_binary(160)\n    '1111111000000000000'\n    >>> decimal_to_binary(165)\n\
    \    '11111110000000000000'\n    >>> decimal_to_binary(170)\n    '11111110000000000000'\n\
    \    >>> decimal_to_binary(175)\n    '111111100000000000000'\n    >>> decimal_to_binary(180)\n\
    \    '111111100000000000000'\n    >>> decimal_to_binary(185)\n    '111111\ndef\
    \ check(candidate):\n    assert candidate(0) == 'db0db'\n    assert candidate(32)\
    \ == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n    assert candidate(15)\
    \ == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpj4x31ina.py\"\
    , line 84\n    '111111\n    ^\nSyntaxError: unterminated string literal (detected\
    \ at line 84)\n"
  exit_code: 1
  status: SyntaxError
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n    >>> decimal_to_binary(10)\n    '1010'\n \
    \   >>> decimal_to_binary(12)\n    '1100'\n    >>> decimal_to_binary(15)\n   \
    \ '1111'\n    >>> decimal_to_binary(16)\n    '1111'\n    >>> decimal_to_binary(17)\n\
    \    '1111'\n    >>> decimal_to_binary(18)\n    '1111'\n    >>> decimal_to_binary(19)\n\
    \    '1111'\n    >>> decimal_to_binary(20)\n    '1111'\n    >>> decimal_to_binary(21)\n\
    \    '1111'\n    >>> decimal_to_binary(22)\n    '1111'\n    >>> decimal_to_binary(23)\n\
    \    '1111'\n    >>> decimal_to_binary(24)\n    '1111'\n    >>> decimal_to_binary(25)\n\
    \    '1111'\n    >>> decimal_to_binary(26)\n    '1111'\n    >>> decimal_to_binary(27)\n\
    \    '1111'\n    >>> decimal_to_binary(28)\n    '1111'\n    >>> decimal_to_binary(29)\n\
    \    '1111'\n    >>> decimal_to_binary(30)\n    '1111'\n    >>> decimal_to_binary(31)\n\
    \    '1111'\n    >>> decimal_to_binary(32)\n    '1111'\n    >>> decimal_to_binary(33)\n\
    \    '1111'\n    >>> decimal_to_binary(34)\n    '1111'\n    >>> decimal_to_binary(35)\n\
    \    '1111'\n    >>> decimal_to_binary(36)\n    '1111'\n    >>> decimal_to_binary(37)\n\
    \    '1111'\n    >>> decimal_to_binary(38)\n    '1111'\n    >>> decimal_to_binary(39)\n\
    \    '1111'\n    >>> decimal_to_binary(40)\n    '1111'\n    >>> decimal_to_binary(41)\n\
    \    '1111'\n    >>> decimal_to_binary(42)\n    '1111'\n    >>> decimal_to_binary(43)\n\
    \    '1111'\n    >>> decimal_to_binary(44)\n    '1111'\n    >>> decimal_to_binary(45)\n\
    \    '1111'\n    >>> decimal_to_binary(46)\n    '1111'\n    >>> decimal_to_binary(47)\n\
    \    '1111'\n    >>> decimal_to_binary(48)\n    '1111'\n    >>> decimal_to_binary(49)\n\
    \    '1111'\n    >>> decimal_to_binary(50)\n    '1111'\n    >>> decimal_to_binary(51)\n\
    \    '1111'\n    >>> decimal_to_binary(52)\n    '1111'\n    >>> decimal_to_binary(53)\n\
    \    '1111'\n    >>> decimal_to_binary(54)\n    '1111'\n    >>> decimal_to_binary(55)\n\
    \    '1111'\n    >>> decimal_to_binary(56)\n    '1111'\n\ndef check(candidate):\n\
    \    assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n\
    \    assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy8a3228i.py\"\
    , line 11\n    >>> decimal_to_binary(10)\n    ^^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n    >>> decimal_to_binary(0)\n    '0'\n    >>>\
    \ decimal_to_binary(1)\n    '1'\n    >>> decimal_to_binary(2)\n    '10'\n    >>>\
    \ decimal_to_binary(3)\n    '11'\n    >>> decimal_to_binary(4)\n    '100'\n  \
    \  >>> decimal_to_binary(5)\n    '101'\n    >>> decimal_to_binary(6)\n    '110'\n\
    \    >>> decimal_to_binary(7)\n    '111'\n    >>> decimal_to_binary(8)\n    '1000'\n\
    \    >>> decimal_to_binary(9)\n    '1001'\n    >>> decimal_to_binary(10)\n   \
    \ '1010'\n    >>> decimal_to_binary(11)\n    '1011'\n    >>> decimal_to_binary(12)\n\
    \    '1100'\n    >>> decimal_to_binary(13)\n    '1101'\n    >>> decimal_to_binary(14)\n\
    \    '1110'\n    >>> decimal_to_binary(15)\n    '1111'\n    >>> decimal_to_binary(16)\n\
    \    '10000'\n    >>> decimal_to_binary(17)\n    '10001'\n    >>> decimal_to_binary(18)\n\
    \    '10010'\n    >>> decimal_to_binary(19)\n    '10011'\n    >>> decimal_to_binary(20)\n\
    \    '10100'\n    >>> decimal_to_binary(21)\n    '10101'\n    >>> decimal_to_binary(22)\n\
    \    '10110'\n    >>> decimal_to_binary(23)\n    '10111'\n    >>> decimal_to_binary(24)\n\
    \    '11000'\n    >>> decimal_to_binary(25)\n    '11001'\n    >>> decimal_to_binary(26)\n\
    \    '11010'\n    >>> decimal_to_binary(27)\n    '11011'\n    >>> decimal_to_binary(28)\n\
    \    '11100'\n    >>> decimal_to_binary(29)\n    '11101'\n    >>> decimal_to_binary(30)\n\
    \    '11110'\n    >>> decimal_to_binary(31)\n    '11111'\n    >>> decimal_to_binary(32)\n\
    \    '100000'\n    >>> decimal_to_binary(33)\n    '100001'\n    >>> decimal_to_binary(34)\n\
    \    '100010'\n    >>> decimal_to_binary(35)\n    '100011'\n    >>> decimal_to_binary(36)\n\
    \    '100100'\n    >>> decimal_to_binary(37)\n    '100101'\n    >>> decimal_to_binary(38)\n\
    \    '100110'\n    >>> decimal_to_binary(39)\n    '100111'\n    >>> decimal_to_binary(40)\n\
    \    '101000'\n    >>> decimal_to_binary(41)\n    '101001'\n    >>> decimal_to_binary(42)\n\
    \    '101010'\n    >>> decimal_to_binary(\ndef check(candidate):\n    assert candidate(0)\
    \ == 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsqdgf6gn.py\"\
    , line 11\n    >>> decimal_to_binary(0)\n    ^^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n    >>> decimal_to_binary(5)\n    '1111'\n  \
    \  >>> decimal_to_binary(10)\n    '1010'\n    >>> decimal_to_binary(15)\n    '1111'\n\
    \    >>> decimal_to_binary(20)\n    '1010'\n    >>> decimal_to_binary(25)\n  \
    \  '1111'\n    >>> decimal_to_binary(30)\n    '1010'\n    >>> decimal_to_binary(35)\n\
    \    '1111'\n    >>> decimal_to_binary(40)\n    '1010'\n    >>> decimal_to_binary(45)\n\
    \    '1111'\n    >>> decimal_to_binary(50)\n    '1010'\n    >>> decimal_to_binary(55)\n\
    \    '1111'\n    >>> decimal_to_binary(60)\n    '1010'\n    >>> decimal_to_binary(65)\n\
    \    '1111'\n    >>> decimal_to_binary(70)\n    '1010'\n    >>> decimal_to_binary(75)\n\
    \    '1111'\n    >>> decimal_to_binary(80)\n    '1010'\n    >>> decimal_to_binary(85)\n\
    \    '1111'\n    >>> decimal_to_binary(90)\n    '1010'\n    >>> decimal_to_binary(95)\n\
    \    '1111'\n    >>> decimal_to_binary(100)\n    '1010'\n    >>> decimal_to_binary(105)\n\
    \    '1111'\n    >>> decimal_to_binary(110)\n    '1010'\n    >>> decimal_to_binary(115)\n\
    \    '1111'\n    >>> decimal_to_binary(120)\n    '1010'\n    >>> decimal_to_binary(125)\n\
    \    '1111'\n    >>> decimal_to_binary(130)\n    '1010'\n    >>> decimal_to_binary(135)\n\
    \    '1111'\n    >>> decimal_to_binary(140)\n    '1010'\n    >>> decimal_to_binary(145)\n\
    \    '1111'\n    >>> decimal_to_binary(150)\n    '1010'\n    >>> decimal_to_binary(155)\n\
    \    '1111'\n    >>> decimal_to_binary(160)\n    '1010'\n    >>> decimal_to_binary(165)\n\
    \    '1111'\n    >>> decimal_to_binary(170)\n    '1010'\n    >>> decimal_to_binary(175)\n\
    \    '1111'\n    >>> decimal_to_binary(180)\n    '1010'\n    >>> decimal_to_binary(185)\n\
    \    '1111'\n    >>> decimal_to_binary(190)\n    '1010'\n    >>> decimal_to_binary(195)\n\
    \    '1111'\n    >>> decimal_to_binary(200)\n    '1010'\n    >>> decimal_to_binary(205)\n\
    \    '1111'\n    >>> decimal_to_binary(210)\n    '1010'\n    >>> decimal_to_binary(215)\n\
    \    '1111'\n    >>> decimal_to_binary(220)\n    '1010\ndef check(candidate):\n\
    \    assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n\
    \    assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgi_ia34v.py\"\
    , line 98\n    '1010\n    ^\nSyntaxError: unterminated string literal (detected\
    \ at line 98)\n"
  exit_code: 1
  status: SyntaxError
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n    >>> decimal_to_binary(8)\n    '100'\n   \
    \ >>> decimal_to_binary(9)\n    '110'\n    >>> decimal_to_binary(10)\n    '1010'\n\
    \    >>> decimal_to_binary(11)\n    '1011'\n    >>> decimal_to_binary(12)\n  \
    \  '1100'\n    >>> decimal_to_binary(13)\n    '1101'\n    >>> decimal_to_binary(14)\n\
    \    '1110'\n    >>> decimal_to_binary(15)\n    '1111'\n    >>> decimal_to_binary(16)\n\
    \    '11101'\n    >>> decimal_to_binary(17)\n    '11110'\n    >>> decimal_to_binary(18)\n\
    \    '11111'\n    >>> decimal_to_binary(19)\n    '111101'\n    >>> decimal_to_binary(20)\n\
    \    '111110'\n    >>> decimal_to_binary(21)\n    '111111'\n    >>> decimal_to_binary(22)\n\
    \    '1111111'\n    >>> decimal_to_binary(23)\n    '11111110'\n    >>> decimal_to_binary(24)\n\
    \    '111111110'\n    >>> decimal_to_binary(25)\n    '11111111'\n    >>> decimal_to_binary(26)\n\
    \    '111111111'\n    >>> decimal_to_binary(27)\n    '1111111111'\n    >>> decimal_to_binary(28)\n\
    \    '11111111111'\n    >>> decimal_to_binary(29)\n    '111111111111'\n    >>>\
    \ decimal_to_binary(30)\n    '1111111111111'\n    >>> decimal_to_binary(31)\n\
    \    '11111111111111'\n    >>> decimal_to_binary(32)\n    '111111111111111'\n\
    \    >>> decimal_to_binary(33)\n    '1111111111111110'\n    >>> decimal_to_binary(34)\n\
    \    '11111111111111110'\n    >>> decimal_to_binary(35)\n    '111111111111111101'\n\
    \    >>> decimal_to_binary(36)\n    '1111111111111111010'\n    >>> decimal_to_binary(37)\n\
    \    '11111111111111110100'\n    >>> decimal_to_binary(38)\n    '111111111111111101000'\n\
    \    >>> decimal_to_binary(39)\n    '1111111111111111010000'\n    >>> decimal_to_binary(40)\n\
    \    '11111111111111110100000'\n    >>> decimal_to_binary(41)\n    '111111111111111101000000'\n\
    \    >>> decimal_to_binary(42)\n    '1111111111111111010000000'\n    >>> decimal_to_binary(43)\n\
    \    '11111111111111110100000000'\n    >>> decimal_to_binary(44)\n    '111111111111111101000000000'\n\
    \    >>> decimal_to_binary(45)\n    '1111111111111111010000000000'\n    >>> decimal_to_bin\n\
    def check(candidate):\n    assert candidate(0) == 'db0db'\n    assert candidate(32)\
    \ == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n    assert candidate(15)\
    \ == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps9ycmyvq.py\"\
    , line 11\n    >>> decimal_to_binary(8)\n    ^^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # Output: '1100'\n            \"\"\"\n            decimal = 12\n           \
    \ binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\ndef check(candidate):\n   \
    \ assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n \
    \   assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptpv5y9g0.py\"\
    , line 11\n    decimal = 12\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n    >>> decimal_to_binary(5)\n    '1100'\n  \
    \  >>> decimal_to_binary(10)\n    '1010'\n    >>> decimal_to_binary(15)\n    '1111'\n\
    \    >>> decimal_to_binary(20)\n    '1111'\n    >>> decimal_to_binary(25)\n  \
    \  '1111'\n    >>> decimal_to_binary(30)\n    '1111'\n    >>> decimal_to_binary(35)\n\
    \    '1111'\n    >>> decimal_to_binary(40)\n    '1111'\n    >>> decimal_to_binary(45)\n\
    \    '1111'\n    >>> decimal_to_binary(50)\n    '1111'\n    >>> decimal_to_binary(55)\n\
    \    '1111'\n    >>> decimal_to_binary(60)\n    '1111'\n    >>> decimal_to_binary(65)\n\
    \    '1111'\n    >>> decimal_to_binary(70)\n    '1111'\n    >>> decimal_to_binary(75)\n\
    \    '1111'\n    >>> decimal_to_binary(80)\n    '1111'\n    >>> decimal_to_binary(85)\n\
    \    '1111'\n    >>> decimal_to_binary(90)\n    '1111'\n    >>> decimal_to_binary(95)\n\
    \    '1111'\n    >>> decimal_to_binary(100)\n    '1111'\n    >>> decimal_to_binary(105)\n\
    \    '1111'\n    >>> decimal_to_binary(110)\n    '1111'\n    >>> decimal_to_binary(115)\n\
    \    '1111'\n    >>> decimal_to_binary(120)\n    '1111'\n    >>> decimal_to_binary(125)\n\
    \    '1111'\n    >>> decimal_to_binary(130)\n    '1111'\n    >>> decimal_to_binary(135)\n\
    \    '1111'\n    >>> decimal_to_binary(140)\n    '1111'\n    >>> decimal_to_binary(145)\n\
    \    '1111'\n    >>> decimal_to_binary(150)\n    '1111'\n    >>> decimal_to_binary(155)\n\
    \    '1111'\n    >>> decimal_to_binary(160)\n    '1111'\n    >>> decimal_to_binary(165)\n\
    \    '1111'\n    >>> decimal_to_binary(170)\n    '1111'\n    >>> decimal_to_binary(175)\n\
    \    '1111'\n    >>> decimal_to_binary(180)\n    '1111'\n    >>> decimal_to_binary(185)\n\
    \    '1111'\n    >>> decimal_to_binary(190)\n    '1111'\n    >>> decimal_to_binary(195)\n\
    \    '1111'\n    >>> decimal_to_binary(200)\n    '1111'\n    >>> decimal_to_binary(205)\n\
    \    '1111'\n    >>> decimal_to_binary(210)\n    '1111'\n    >>> decimal_to_binary(215)\n\
    \    '1111'\n    >>> decimal_to_binary(220)\n    '1111\ndef check(candidate):\n\
    \    assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n\
    \    assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt6w26s8n.py\"\
    , line 98\n    '1111\n    ^\nSyntaxError: unterminated string literal (detected\
    \ at line 98)\n"
  exit_code: 1
  status: SyntaxError
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\ndef check(candidate):\n\
    \    assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n\
    \    assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe6_srt72.py\"\
    , line 11\n    decimal = 12\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\ndef check(candidate):\n\
    \    assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n\
    \    assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp2lvo16i.py\"\
    , line 11\n    decimal = 12\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\ndef check(candidate):\n\
    \    assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n\
    \    assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbmh7e2hh.py\"\
    , line 11\n    decimal = 12\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n    >>> decimal_to_binary(10)\n    '1010'\n \
    \   >>> decimal_to_binary(11)\n    '111'\n    >>> decimal_to_binary(12)\n    '110'\n\
    \    >>> decimal_to_binary(13)\n    '111'\n    >>> decimal_to_binary(14)\n   \
    \ '100'\n    >>> decimal_to_binary(15)\n    '111'\n    >>> decimal_to_binary(16)\n\
    \    '1000'\n    >>> decimal_to_binary(17)\n    '1111'\n    >>> decimal_to_binary(18)\n\
    \    '1001'\n    >>> decimal_to_binary(19)\n    '1011'\n    >>> decimal_to_binary(20)\n\
    \    '1010'\n    >>> decimal_to_binary(21)\n    '1011'\n    >>> decimal_to_binary(22)\n\
    \    '1110'\n    >>> decimal_to_binary(23)\n    '1111'\n    >>> decimal_to_binary(24)\n\
    \    '1110'\n    >>> decimal_to_binary(25)\n    '1111'\n    >>> decimal_to_binary(26)\n\
    \    '1110'\n    >>> decimal_to_binary(27)\n    '1111'\n    >>> decimal_to_binary(28)\n\
    \    '1110'\n    >>> decimal_to_binary(29)\n    '1111'\n    >>> decimal_to_binary(30)\n\
    \    '1110'\n    >>> decimal_to_binary(31)\n    '1111'\n    >>> decimal_to_binary(32)\n\
    \    '1110'\n    >>> decimal_to_binary(33)\n    '1111'\n    >>> decimal_to_binary(34)\n\
    \    '1110'\n    >>> decimal_to_binary(35)\n    '1111'\n    >>> decimal_to_binary(36)\n\
    \    '1110'\n    >>> decimal_to_binary(37)\n    '1111'\n    >>> decimal_to_binary(38)\n\
    \    '1110'\n    >>> decimal_to_binary(39)\n    '1111'\n    >>> decimal_to_binary(40)\n\
    \    '1110'\n    >>> decimal_to_binary(41)\n    '1111'\n    >>> decimal_to_binary(42)\n\
    \    '1110'\n    >>> decimal_to_binary(43)\n    '1111'\n    >>> decimal_to_binary(44)\n\
    \    '1110'\n    >>> decimal_to_binary(45)\n    '1111'\n    >>> decimal_to_binary(46)\n\
    \    '1110'\n    >>> decimal_to_binary(47)\n    '1111'\n    >>> decimal_to_binary(48)\n\
    \    '1110'\n    >>> decimal_to_binary(49)\n    '1111'\n    >>> decimal_to_binary(50)\n\
    \    '1110'\n    >>> decimal_to_binary(51)\n    '1111'\n    >>> decimal_to_binary(52)\n\
    \    '1110'\ndef check(candidate):\n    assert candidate(0) == 'db0db'\n    assert\
    \ candidate(32) == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n\
    \    assert candidate(15) == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6ib38q11.py\"\
    , line 11\n    >>> decimal_to_binary(10)\n    ^^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # Output: '1100'\n            \"\"\"\n            decimal = 12\n           \
    \ binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\ndef check(candidate):\n   \
    \ assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n \
    \   assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpaca434w9.py\"\
    , line 11\n    decimal = 12\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n    >>> decimal_to_binary(10)\n    '1010'\n \
    \   >>> decimal_to_binary(11)\n    '1110'\n    >>> decimal_to_binary(12)\n   \
    \ '1100'\n    >>> decimal_to_binary(13)\n    '1110'\n    >>> decimal_to_binary(14)\n\
    \    '1111'\n    >>> decimal_to_binary(15)\n    '1111'\n    >>> decimal_to_binary(16)\n\
    \    '1111'\n    >>> decimal_to_binary(17)\n    '1111'\n    >>> decimal_to_binary(18)\n\
    \    '1111'\n    >>> decimal_to_binary(19)\n    '1111'\n    >>> decimal_to_binary(20)\n\
    \    '1111'\n    >>> decimal_to_binary(21)\n    '1111'\n    >>> decimal_to_binary(22)\n\
    \    '1111'\n    >>> decimal_to_binary(23)\n    '1111'\n    >>> decimal_to_binary(24)\n\
    \    '1111'\n    >>> decimal_to_binary(25)\n    '1111'\n    >>> decimal_to_binary(26)\n\
    \    '1111'\n    >>> decimal_to_binary(27)\n    '1111'\n    >>> decimal_to_binary(28)\n\
    \    '1111'\n    >>> decimal_to_binary(29)\n    '1111'\n    >>> decimal_to_binary(30)\n\
    \    '1111'\n    >>> decimal_to_binary(31)\n    '1111'\n    >>> decimal_to_binary(32)\n\
    \    '1111'\n    >>> decimal_to_binary(33)\n    '1111'\n    >>> decimal_to_binary(34)\n\
    \    '1111'\n    >>> decimal_to_binary(35)\n    '1111'\n    >>> decimal_to_binary(36)\n\
    \    '1111'\n    >>> decimal_to_binary(37)\n    '1111'\n    >>> decimal_to_binary(38)\n\
    \    '1111'\n    >>> decimal_to_binary(39)\n    '1111'\n    >>> decimal_to_binary(40)\n\
    \    '1111'\n    >>> decimal_to_binary(41)\n    '1111'\n    >>> decimal_to_binary(42)\n\
    \    '1111'\n    >>> decimal_to_binary(43)\n    '1111'\n    >>> decimal_to_binary(44)\n\
    \    '1111'\n    >>> decimal_to_binary(45)\n    '1111'\n    >>> decimal_to_binary(46)\n\
    \    '1111'\n    >>> decimal_to_binary(47)\n    '1111'\n    >>> decimal_to_binary(48)\n\
    \    '1111'\n    >>> decimal_to_binary(49)\n    '1111'\n    >>> decimal_to_binary(50)\n\
    \    '1111'\n    >>> decimal_to_binary(51)\n    '1111'\n    >>> decimal_to_binary(52)\n\
    \    '1111'\n    >>> decimal_to_binary(53)\n    '1111'\n    >>> \ndef check(candidate):\n\
    \    assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n\
    \    assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0cvvr09y.py\"\
    , line 11\n    >>> decimal_to_binary(10)\n    ^^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\ndef check(candidate):\n\
    \    assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n\
    \    assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpioo9mltx.py\"\
    , line 11\n    decimal = 12\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n            Input: decimal = 12\n           \
    \ Output: '1100'\n            \"\"\"\n            Input: decimal = 12\n      \
    \      Output: '1100'\n            \"\"\"\n            Input: decimal = 12\n \
    \           Output: '1100'\n            \"\"\"\n            Input: decimal = 12\n\
    \            Output: '1100'\n            \"\"\"\n            Input: decimal =\
    \ 12\n            Output: '1100'\n            \"\"\"\n            Input: decimal\
    \ = 12\n            Output: '1100'\n            \"\"\"\n            Input: decimal\
    \ = 12\n            Output: '1100'\n            \"\"\"\n            Input: decimal\
    \ = 12\n            Output: '1100'\n            \"\"\"\n            Input: decimal\
    \ = 12\n            Output: '1100'\n            \"\"\"\n            Input: decimal\
    \ = 12\n            Output: '1100'\n            \"\"\"\n            Input: decimal\
    \ = 12\n            Output: '1100'\n            \"\"\"\n            Input: decimal\
    \ = 12\n            Output: '1100'\n            \"\"\"\n            Input: decimal\
    \ = 12\n            Output: '1100'\n            \"\"\"\n            Input: decimal\
    \ = 12\n            Output: '1100'\n            \"\"\"\n            Input: decimal\
    \ = 12\n            Output: '1100'\n            \"\"\"\n            Input: decimal\
    \ = 12\n            Output: '1100'\n            \"\"\"\n            Input: decimal\
    \ = 12\n            Output: '1100'\n            \"\"\"\n            Input: decimal\
    \ = 12\n            Output: '1100'\n            \"\"\"\n            Input: decimal\
    \ = 12\n            Output: '1100'\n            \"\"\"\n            Input: decimal\
    \ = 12\n            Output: '1100'\n            \"\"\"\n            Input: decimal\
    \ = 12\n            Output: '1100'\n            \"\"\"\n            Input: decimal\
    \ = 12\n            Output: '1100'\n            \"\"\"\n            Input: decimal\
    \ = 12\n            Output: '1100'\n            \"\"\"\n            Input: decimal\
    \ = 12\n            Output: '1100'\n            \"\"\"\n            Input: decimal\
    \ = 12\n            Output: '1100'\n            \"\"\"\n            Input: decimal\
    \ = 12\n            Output: '1100'\n            \"\"\"\n            Input: decimal\
    \ = 12\n            Output: '1100'\n            \"\"\"\n            Input: decimal\
    \ = 12\n            Output: '1100'\n            \"\"\"\n            Input: decimal\
    \ = 12\n            Output: '1100'\n            \"\"\"\n            Input: decimal\
    \ = 12\n            Output: '1100'\n            \"\"\"\n            Input: decimal\
    \ = 12\n            Output: '1100'\n            \"\"\"\n            Input: decimal\
    \ = 12\n            Output: '1100'\n            \"\"\"\n            Input: decimal\
    \ = 12\n            Output: '1100'\n            \"\"\"\n            Input: decimal\
    \ = 12\n            Output: '1100'\n            \"\"\"\n            Input\ndef\
    \ check(candidate):\n    assert candidate(0) == 'db0db'\n    assert candidate(32)\
    \ == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n    assert candidate(15)\
    \ == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpun3o8k5y.py\"\
    , line 11\n    Input: decimal = 12\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # Output: '1100'\n            \"\"\"\n            decimal = 12\n           \
    \ binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\ndef check(candidate):\n   \
    \ assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n \
    \   assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp1x1g3kd.py\"\
    , line 11\n    decimal = 12\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\ndef check(candidate):\n\
    \    assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n\
    \    assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptb_r0n5v.py\"\
    , line 11\n    decimal = 12\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n    >>> decimal_to_binary(5)\n    '1100'\n  \
    \  >>> decimal_to_binary(10)\n    '1010'\n    >>> decimal_to_binary(15)\n    '1111'\n\
    \    >>> decimal_to_binary(20)\n    '11100'\n    >>> decimal_to_binary(25)\n \
    \   '111010'\n    >>> decimal_to_binary(30)\n    '11101100'\n    >>> decimal_to_binary(35)\n\
    \    '1110111010'\n    >>> decimal_to_binary(40)\n    '11101110111100'\n    >>>\
    \ decimal_to_binary(45)\n    '1110111011111010'\n    >>> decimal_to_binary(50)\n\
    \    '11101110111110111100'\n    >>> decimal_to_binary(55)\n    '1110111011111011111010'\n\
    \    >>> decimal_to_binary(60)\n    '11101110111110111110111100'\n    >>> decimal_to_binary(65)\n\
    \    '1110111011111011111011111010'\n    >>> decimal_to_binary(70)\n    '11101110111110111110111110111100'\n\
    \    >>> decimal_to_binary(75)\n    '1110111011111011111011111011111010'\n   \
    \ >>> decimal_to_binary(80)\n    '11101110111110111110111110111110111100'\n  \
    \  >>> decimal_to_binary(85)\n    '1110111011111011111011111011111011111010'\n\
    \    >>> decimal_to_binary(90)\n    '11101110111110111110111110111110111110111100'\n\
    \    >>> decimal_to_binary(95)\n    '1110111011111011111011111011111011111011111010'\n\
    \    >>> decimal_to_binary(100)\n    '11101110111110111110111110111110111110111110111100'\n\
    \    >>> decimal_to_binary(105)\n    '1110111011111011111011111011111011111011111011111010'\n\
    \    >>> decimal_to_binary(110)\n    '11101110111110111110111110111110111110111110111110111100'\n\
    \    >>> decimal_to_binary(115)\n    '1110111011111011111011111011111011111011111011111011111010'\n\
    \    >>> decimal_to_binary(120)\n    '11101110111110111110111110111110111110111110111110111110111100'\n\
    \    >>> decimal_to_binary(125)\n    '1110111011111011111011111011111011111011111011111011111011111010'\n\
    \    >>> decimal_to_binary(130)\n    '1110111011\ndef check(candidate):\n    assert\
    \ candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert\
    \ candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\n\
    def test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt70uou3f.py\"\
    , line 62\n    '1110111011\n    ^\nSyntaxError: unterminated string literal (detected\
    \ at line 62)\n"
  exit_code: 1
  status: SyntaxError
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\ndef check(candidate):\n\
    \    assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n\
    \    assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9lm8v9fc.py\"\
    , line 11\n    decimal = 12\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n    >>> decimal_to_binary(12)\n    '1100'\n \
    \   >>> decimal_to_binary(13)\n    '1101'\n    >>> decimal_to_binary(14)\n   \
    \ '1110'\n    >>> decimal_to_binary(15)\n    '1111'\n    >>> decimal_to_binary(16)\n\
    \    '1110'\n    >>> decimal_to_binary(17)\n    '1111'\n    >>> decimal_to_binary(18)\n\
    \    '1110'\n    >>> decimal_to_binary(19)\n    '1111'\n    >>> decimal_to_binary(20)\n\
    \    '1110'\n    >>> decimal_to_binary(21)\n    '1111'\n    >>> decimal_to_binary(22)\n\
    \    '1110'\n    >>> decimal_to_binary(23)\n    '1111'\n    >>> decimal_to_binary(24)\n\
    \    '1110'\n    >>> decimal_to_binary(25)\n    '1111'\n    >>> decimal_to_binary(26)\n\
    \    '1110'\n    >>> decimal_to_binary(27)\n    '1111'\n    >>> decimal_to_binary(28)\n\
    \    '1110'\n    >>> decimal_to_binary(29)\n    '1111'\n    >>> decimal_to_binary(30)\n\
    \    '1110'\n    >>> decimal_to_binary(31)\n    '1111'\n    >>> decimal_to_binary(32)\n\
    \    '1110'\n    >>> decimal_to_binary(33)\n    '1111'\n    >>> decimal_to_binary(34)\n\
    \    '1110'\n    >>> decimal_to_binary(35)\n    '1111'\n    >>> decimal_to_binary(36)\n\
    \    '1110'\n    >>> decimal_to_binary(37)\n    '1111'\n    >>> decimal_to_binary(38)\n\
    \    '1110'\n    >>> decimal_to_binary(39)\n    '1111'\n    >>> decimal_to_binary(40)\n\
    \    '1110'\n    >>> decimal_to_binary(41)\n    '1111'\n    >>> decimal_to_binary(42)\n\
    \    '1110'\n    >>> decimal_to_binary(43)\n    '1111'\n    >>> decimal_to_binary(44)\n\
    \    '1110'\n    >>> decimal_to_binary(45)\n    '1111'\n    >>> decimal_to_binary(46)\n\
    \    '1110'\n    >>> decimal_to_binary(47)\n    '1111'\n    >>> decimal_to_binary(48)\n\
    \    '1110'\n    >>> decimal_to_binary(49)\n    '1111'\n    >>> decimal_to_binary(50)\n\
    \    '1110'\n    >>> decimal_to_binary(51)\n    '1111'\n    >>> decimal_to_binary(52)\n\
    \    '1110'\n    >>> decimal_to_binary(53)\n    '1111'\n    >>> decimal_to_binary(\n\
    def check(candidate):\n    assert candidate(0) == 'db0db'\n    assert candidate(32)\
    \ == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n    assert candidate(15)\
    \ == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1o0kpsk1.py\"\
    , line 11\n    >>> decimal_to_binary(12)\n    ^^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n            Input: decimal = 15\n           \
    \ Output: '1111'\n            \"\"\"\n            Input: decimal = 17\n      \
    \      Output: '11101'\n            \"\"\"\n            Input: decimal = 18\n\
    \            Output: '11100'\n            \"\"\"\n            Input: decimal =\
    \ 19\n            Output: '11110'\n            \"\"\"\n            Input: decimal\
    \ = 20\n            Output: '11111'\n            \"\"\"\n            Input: decimal\
    \ = 21\n            Output: '111111'\n            \"\"\"\n            Input: decimal\
    \ = 22\n            Output: '1111111'\n            \"\"\"\n            Input:\
    \ decimal = 23\n            Output: '11111110'\n            \"\"\"\n         \
    \   Input: decimal = 24\n            Output: '111111100'\n            \"\"\"\n\
    \            Input: decimal = 25\n            Output: '1111111000'\n         \
    \   \"\"\"\n            Input: decimal = 26\n            Output: '11111110000'\n\
    \            \"\"\"\n            Input: decimal = 27\n            Output: '111111100000'\n\
    \            \"\"\"\n            Input: decimal = 28\n            Output: '1111111000000'\n\
    \            \"\"\"\n            Input: decimal = 29\n            Output: '11111110000000'\n\
    \            \"\"\"\n            Input: decimal = 30\n            Output: '111111100000000'\n\
    \            \"\"\"\n            Input: decimal = 31\n            Output: '1111111000000000'\n\
    \            \"\"\"\n            Input: decimal = 32\n            Output: '11111110000000000'\n\
    \            \"\"\"\n            Input: decimal = 33\n            Output: '111111100000000000'\n\
    \            \"\"\"\n            Input: decimal = 34\n            Output: '1111111000000000000'\n\
    \            \"\"\"\n            Input: decimal = 35\n            Output: '11111110000000000000'\n\
    \            \"\"\"\n            Input: decimal = 36\n            Output: '111111100000000000000'\n\
    \            \"\"\"\n            Input: decimal = 37\n            Output: '1111111000000000000000'\n\
    \            \"\"\"\n            Input: decimal = 38\n            Output: '11111110000000000000000'\n\
    \            \"\"\"\n            Input: decimal = 39\n            Output: '111111100000000000000000'\n\
    \            \"\"\"\n            Input: decimal = 40\n            Output: '1111111000000000000000000'\n\
    \            \"\"\"\n            Input: decimal = 42\n            Output: '11111110000000000000000000'\n\
    \            \"\"\"\n            Input: decimal = 43\n            Output: '111111100000000000000000000'\n\
    \            \"\"\"\n            Input: decimal = 44\n            Output: '1111111000000000000000000000'\n\
    \            \"\"\"\n            Input: decimal = 45\n            Output: '11111110000000000000000000000'\n\
    \            \"\"\"\n            Input: decimal = 46\n            Output\ndef\
    \ check(candidate):\n    assert candidate(0) == 'db0db'\n    assert candidate(32)\
    \ == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n    assert candidate(15)\
    \ == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1s68hfli.py\"\
    , line 11\n    Input: decimal = 15\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n    >>> decimal_to_binary(10)\n    '1100'\n \
    \   >>> decimal_to_binary(11)\n    '1110'\n    >>> decimal_to_binary(12)\n   \
    \ '11110'\n    >>> decimal_to_binary(13)\n    '111110'\n    >>> decimal_to_binary(14)\n\
    \    '1111110'\n    >>> decimal_to_binary(15)\n    '11111110'\n    >>> decimal_to_binary(16)\n\
    \    '111111110'\n    >>> decimal_to_binary(17)\n    '1111111101'\n    >>> decimal_to_binary(18)\n\
    \    '11111111010'\n    >>> decimal_to_binary(19)\n    '111111110100'\n    >>>\
    \ decimal_to_binary(20)\n    '1111111101000'\n    >>> decimal_to_binary(21)\n\
    \    '11111111010000'\n    >>> decimal_to_binary(22)\n    '111111110100000'\n\
    \    >>> decimal_to_binary(23)\n    '1111111101000000'\n    >>> decimal_to_binary(24)\n\
    \    '11111111010000000'\n    >>> decimal_to_binary(25)\n    '111111110100000000'\n\
    \    >>> decimal_to_binary(26)\n    '1111111101000000000'\n    >>> decimal_to_binary(27)\n\
    \    '11111111010000000000'\n    >>> decimal_to_binary(28)\n    '111111110100000000000'\n\
    \    >>> decimal_to_binary(29)\n    '1111111101000000000000'\n    >>> decimal_to_binary(30)\n\
    \    '11111111010000000000000'\n    >>> decimal_to_binary(31)\n    '111111110100000000000000'\n\
    \    >>> decimal_to_binary(32)\n    '11111111010000000000000000'\n    >>> decimal_to_binary(33)\n\
    \    '1111111101000000000000000000'\n    >>> decimal_to_binary(34)\n    '11111111010000000000000000000'\n\
    \    >>> decimal_to_binary(35)\n    '111111110100000000000000000000'\n    >>>\
    \ decimal_to_binary(36)\n    '1111111101000000000000000000000'\n    >>> decimal_to_binary(37)\n\
    \    '11111111010000000000000000000000'\n    >>> decimal_to_binary(38)\n    '1111111101000000000000000000000000'\n\
    \    >>> decimal_to_binary(39)\n    '11111111010000000000000000000000000'\n  \
    \  >>> decimal_to_binary(40)\n    '111111110100000000000000000000000000'\n   \
    \ >>> decimal_to_binary(41)\n    '1111111101000000000000000000000000000'\n   \
    \ >>> decimal_to_binary(42)\n    '11111111010000000000000000000000000000'\n  \
    \  >>> decimal_to_binary(43)\n    '111111110100000000000000000000000000000'\n\
    def check(candidate):\n    assert candidate(0) == 'db0db'\n    assert candidate(32)\
    \ == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n    assert candidate(15)\
    \ == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3g9bcjpx.py\"\
    , line 11\n    >>> decimal_to_binary(10)\n    ^^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n    >>> decimal_to_binary(4)\n    '0000'\n  \
    \  >>> decimal_to_binary(8)\n    '0100'\n    >>> decimal_to_binary(16)\n    '1000'\n\
    \    >>> decimal_to_binary(32)\n    '1110'\n    >>> decimal_to_binary(64)\n  \
    \  '11110'\n    >>> decimal_to_binary(128)\n    '111110'\n    >>> decimal_to_binary(256)\n\
    \    '1111110'\n    >>> decimal_to_binary(512)\n    '11111110'\n    >>> decimal_to_binary(1024)\n\
    \    '111111110'\n    >>> decimal_to_binary(2048)\n    '1111111110'\n    >>> decimal_to_binary(4096)\n\
    \    '11111111110'\n    >>> decimal_to_binary(8192)\n    '111111111110'\n    >>>\
    \ decimal_to_binary(16384)\n    '1111111111110'\n    >>> decimal_to_binary(32768)\n\
    \    '11111111111110'\n    >>> decimal_to_binary(65536)\n    '111111111111110'\n\
    \    >>> decimal_to_binary(131072)\n    '1111111111111110'\n    >>> decimal_to_binary(262144)\n\
    \    '11111111111111110'\n    >>> decimal_to_binary(524288)\n    '1111111111111111'\n\
    \    >>> decimal_to_binary(1048576)\n    '11111111111111110'\n    >>> decimal_to_binary(2097152)\n\
    \    '111111111111111110'\n    >>> decimal_to_binary(4194304)\n    '1111111111111111110'\n\
    \    >>> decimal_to_binary(8388608)\n    '11111111111111111110'\n    >>> decimal_to_binary(16777216)\n\
    \    '111111111111111111110'\n    >>> decimal_to_binary(33554432)\n    '11111111111111111111'\n\
    \    >>> decimal_to_binary(67108864)\n    '111111111111111111110'\n    >>> decimal_to_binary(134217728)\n\
    \    '1111111111111111111110'\n    >>> decimal_to_binary(268435456)\n    '11111111111111111111110'\n\
    \    >>> decimal_to_binary(536870912)\n    '111111111111111111111110'\n    >>>\
    \ decimal_to_binary(1073741824)\n    '1111111111111111111111110'\n    >>> decimal_to_binary(2147483648)\n\
    \    '111111111111111111111111'\n    >>> decimal_to_binary(4294967296)\n    '1111111111111111111111110'\n\
    \    >>> decimal_to_binary(8589934592)\n    '11111111111111111111111110'\n   \
    \ >>> decimal_to_binary(17179869184)\n    '111111111111111111111111110'\n    >>>\
    \ decimal_to_binary(34359738368)\n    '111111111111111111111111\ndef check(candidate):\n\
    \    assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n\
    \    assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjge8u7q2.py\"\
    , line 78\n    '111111111111111111111111\n    ^\nSyntaxError: unterminated string\
    \ literal (detected at line 78)\n"
  exit_code: 1
  status: SyntaxError
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\ndef check(candidate):\n\
    \    assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n\
    \    assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpinkyylwt.py\"\
    , line 11\n    decimal = 12\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n    >>> decimal_to_binary(10)\n    '1010'\n \
    \   >>> decimal_to_binary(11)\n    '111'\n    >>> decimal_to_binary(12)\n    '110'\n\
    \    >>> decimal_to_binary(13)\n    '111'\n    >>> decimal_to_binary(14)\n   \
    \ '100'\n    >>> decimal_to_binary(15)\n    '101'\n    >>> decimal_to_binary(16)\n\
    \    '110'\n    >>> decimal_to_binary(17)\n    '111'\n    >>> decimal_to_binary(18)\n\
    \    '100'\n    >>> decimal_to_binary(19)\n    '101'\n    >>> decimal_to_binary(20)\n\
    \    '110'\n    >>> decimal_to_binary(21)\n    '111'\n    >>> decimal_to_binary(22)\n\
    \    '100'\n    >>> decimal_to_binary(23)\n    '101'\n    >>> decimal_to_binary(24)\n\
    \    '110'\n    >>> decimal_to_binary(25)\n    '111'\n    >>> decimal_to_binary(26)\n\
    \    '100'\n    >>> decimal_to_binary(27)\n    '101'\n    >>> decimal_to_binary(28)\n\
    \    '110'\n    >>> decimal_to_binary(29)\n    '111'\n    >>> decimal_to_binary(30)\n\
    \    '100'\n    >>> decimal_to_binary(31)\n    '101'\n    >>> decimal_to_binary(32)\n\
    \    '110'\n    >>> decimal_to_binary(33)\n    '111'\n    >>> decimal_to_binary(34)\n\
    \    '100'\n    >>> decimal_to_binary(35)\n    '101'\n    >>> decimal_to_binary(36)\n\
    \    '110'\n    >>> decimal_to_binary(37)\n    '111'\n    >>> decimal_to_binary(38)\n\
    \    '100'\n    >>> decimal_to_binary(39)\n    '101'\n    >>> decimal_to_binary(40)\n\
    \    '110'\n    >>> decimal_to_binary(41)\n    '111'\n    >>> decimal_to_binary(42)\n\
    \    '100'\n    >>> decimal_to_binary(43)\n    '101'\n    >>> decimal_to_binary(44)\n\
    \    '110'\n    >>> decimal_to_binary(45)\n    '111'\n    >>> decimal_to_binary(46)\n\
    \    '100'\n    >>> decimal_to_binary(47)\n    '101'\n    >>> decimal_to_binary(48)\n\
    \    '110'\n    >>> decimal_to_binary(49)\n    '111'\n    >>> decimal_to_binary(50)\n\
    \    '100'\n    >>> decimal_to_binary(51)\n    '101'\n    >>> decimal_to_binary(52)\n\
    \    '110'\n    >>> decimal_to_binary(53)\n    '111'\n    >>> decimal_to_\ndef\
    \ check(candidate):\n    assert candidate(0) == 'db0db'\n    assert candidate(32)\
    \ == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n    assert candidate(15)\
    \ == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe3uc_dcv.py\"\
    , line 11\n    >>> decimal_to_binary(10)\n    ^^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n            Input: decimal = 15\n           \
    \ Output: '1111'\n            Input: decimal = 12\n            Output: '1100'\n\
    \            Input: decimal = 13\n            Output: '1101'\n            Input:\
    \ decimal = 18\n            Output: '1110'\n            Input: decimal = 19\n\
    \            Output: '1110'\n            Input: decimal = 20\n            Output:\
    \ '1111'\n            Input: decimal = 21\n            Output: '1111'\n      \
    \      Input: decimal = 25\n            Output: '1111'\n            Input: decimal\
    \ = 26\n            Output: '1111'\n            Input: decimal = 27\n        \
    \    Output: '1111'\n            Input: decimal = 28\n            Output: '1111'\n\
    \            Input: decimal = 29\n            Output: '1111'\n            Input:\
    \ decimal = 30\n            Output: '1111'\n            Input: decimal = 31\n\
    \            Output: '1111'\n            Input: decimal = 32\n            Output:\
    \ '1111'\n            Input: decimal = 33\n            Output: '1111'\n      \
    \      Input: decimal = 34\n            Output: '1111'\n            Input: decimal\
    \ = 35\n            Output: '1111'\n            Input: decimal = 36\n        \
    \    Output: '1111'\n            Input: decimal = 37\n            Output: '1111'\n\
    \            Input: decimal = 38\n            Output: '1111'\n            Input:\
    \ decimal = 39\n            Output: '1111'\n            Input: decimal = 40\n\
    \            Output: '1111'\n            Input: decimal = 42\n            Output:\
    \ '1111'\n            Input: decimal = 43\n            Output: '1111'\n      \
    \      Input: decimal = 44\n            Output: '1111'\n            Input: decimal\
    \ = 45\n            Output: '1111'\n            Input: decimal = 46\n        \
    \    Output: '1111'\n            Input: decimal = 47\n            Output: '1111'\n\
    \            Input: decimal = 48\n            Output: '1111'\n            Input:\
    \ decimal = 49\n            Output: '1111'\n            Input: decimal = 50\n\
    \            Output: '1111'\n            Input: decimal = 55\n            Output:\
    \ '1111'\n            Input: decimal = 56\n            Output: '1111'\n      \
    \      Input: decimal = 57\n            Output: '1111'\n            Input: decimal\
    \ = 58\n            Output: '1111'\n            Input: decimal = 59\n        \
    \    Output: '1111'\n            Input: decimal = 60\n            Output: '1111'\n\
    \            Input: decimal = 61\n            Output: '1111'\n            Input:\
    \ decimal = 62\n            Output\ndef check(candidate):\n    assert candidate(0)\
    \ == 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsufm42il.py\"\
    , line 11\n    Input: decimal = 15\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n    >>> decimal_to_binary(5)\n    '111'\n   \
    \ >>> decimal_to_binary(10)\n    '1010'\n    >>> decimal_to_binary(15)\n    '1111'\n\
    \    >>> decimal_to_binary(17)\n    '101111'\n    >>> decimal_to_binary(19)\n\
    \    '100111111'\n    >>> decimal_to_binary(20)\n    '1000000000000'\n    >>>\
    \ decimal_to_binary(21)\n    '1000000000000000'\n    >>> decimal_to_binary(22)\n\
    \    '1000000000000000000'\n    >>> decimal_to_binary(23)\n    '10000000000000000000'\n\
    \    >>> decimal_to_binary(24)\n    '100000000000000000000'\n    >>> decimal_to_binary(25)\n\
    \    '10000000000000000000000'\n    >>> decimal_to_binary(26)\n    '1000000000000000000000000'\n\
    \    >>> decimal_to_binary(27)\n    '100000000000000000000000000'\n    >>> decimal_to_binary(28)\n\
    \    '1000000000000000000000000000'\n    >>> decimal_to_binary(29)\n    '1000000000000000000000000000000'\n\
    \    >>> decimal_to_binary(30)\n    '100000000000000000000000000000000'\n    >>>\
    \ decimal_to_binary(31)\n    '1000000000000000000000000000000000'\n    >>> decimal_to_binary(32)\n\
    \    '10000000000000000000000000000000000'\n    >>> decimal_to_binary(33)\n  \
    \  '100000000000000000000000000000000000'\n    >>> decimal_to_binary(34)\n   \
    \ '100000000000000000000000000000000000000'\n    >>> decimal_to_binary(35)\n \
    \   '10000000000000000000000000000000000000000'\n    >>> decimal_to_binary(36)\n\
    \    '100000000000000000000000000000000000000000'\n    >>> decimal_to_binary(37)\n\
    \    '1000000000000000000000000000000000000000000'\n    >>> decimal_to_binary(38)\n\
    \    '10000000000000000000000000000000000000000000'\n    >>> decimal_to_binary(39)\n\
    \    '10000000000000000000000000000000000000000000000'\n    >>> decimal_to_binary(40)\n\
    \    '1000000000000000000000000000000000000000000000000'\n    >>> decimal_to_binary(41)\n\
    \    '10000000000000000000000000000000000000000000000000'\n    >>> decimal_to_binary(42)\n\
    \    '100000000000000000000000000000000000000000000000000'\n    >>> decimal_to_binary(43)\n\
    \    '10000000000000000000000000000000000000000000000000'\n    >>> decimal_to_binary(44)\n\
    \    '100000000000000000000000000000000000000000000000000'\n    >>> decimal_to_binary(45)\n\
    \    '1000000000000000000000000000000000000000000000000000'\n    >>> decimal_to_binary(46)\n\
    \    '1000000000000000000000000000000000000000000000000000000'\n    >>> decimal_to_binary(47)\n\
    \    '100000000000000000000000000000000000000000000000000000000'\n    >>> decimal_to_binary(48)\n\
    \    '1000000000000000000000000000000000000000000000000000000000'\n    >>> decimal_to_binary(49)\n\
    \    '100\ndef check(candidate):\n    assert candidate(0) == 'db0db'\n    assert\
    \ candidate(32) == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n\
    \    assert candidate(15) == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4tymwp2y.py\"\
    , line 80\n    '100\n    ^\nSyntaxError: unterminated string literal (detected\
    \ at line 80)\n"
  exit_code: 1
  status: SyntaxError
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\ndef check(candidate):\n\
    \    assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n\
    \    assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9xh0f0tm.py\"\
    , line 11\n    decimal = 12\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # Output: '1100'\n            \"\"\"\n            decimal = 12\n           \
    \ binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\ndef check(candidate):\n   \
    \ assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n \
    \   assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx0vl7zmp.py\"\
    , line 11\n    decimal = 12\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # Output: '1100'\n            \"\"\"\n            decimal = 12\n           \
    \ binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\ndef check(candidate):\n   \
    \ assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n \
    \   assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxvxxtp9h.py\"\
    , line 11\n    decimal = 12\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n    >>> decimal_to_binary(10)\n    '1010'\n \
    \   >>> decimal_to_binary(5)\n    '101'\n    >>> decimal_to_binary(-5)\n    '101b'\n\
    \    >>> decimal_to_binary(0)\n    '0'\n    >>> decimal_to_binary(1)\n    '1'\n\
    \    >>> decimal_to_binary(2)\n    '10'\n    >>> decimal_to_binary(3)\n    '11'\n\
    \    >>> decimal_to_binary(4)\n    '100'\n    >>> decimal_to_binary(5)\n    '101'\n\
    \    >>> decimal_to_binary(6)\n    '110'\n    >>> decimal_to_binary(7)\n    '111'\n\
    \    >>> decimal_to_binary(8)\n    '1000'\n    >>> decimal_to_binary(9)\n    '1001'\n\
    \    >>> decimal_to_binary(10)\n    '1010'\n    >>> decimal_to_binary(11)\n  \
    \  '1011'\n    >>> decimal_to_binary(12)\n    '1100'\n    >>> decimal_to_binary(13)\n\
    \    '1101'\n    >>> decimal_to_binary(14)\n    '1110'\n    >>> decimal_to_binary(15)\n\
    \    '1111'\n    >>> decimal_to_binary(16)\n    '10000'\n    >>> decimal_to_binary(17)\n\
    \    '10001'\n    >>> decimal_to_binary(18)\n    '10010'\n    >>> decimal_to_binary(19)\n\
    \    '10011'\n    >>> decimal_to_binary(20)\n    '10100'\n    >>> decimal_to_binary(21)\n\
    \    '10101'\n    >>> decimal_to_binary(22)\n    '10110'\n    >>> decimal_to_binary(23)\n\
    \    '10111'\n    >>> decimal_to_binary(24)\n    '11000'\n    >>> decimal_to_binary(25)\n\
    \    '11001'\n    >>> decimal_to_binary(26)\n    '11010'\n    >>> decimal_to_binary(27)\n\
    \    '11011'\n    >>> decimal_to_binary(28)\n    '11100'\n    >>> decimal_to_binary(29)\n\
    \    '11101'\n    >>> decimal_to_binary(30)\n    '11110'\n    >>> decimal_to_binary(31)\n\
    \    '11111'\n    >>> decimal_to_binary(32)\n    '100000'\n    >>> decimal_to_binary(33)\n\
    \    '100001'\n    >>> decimal_to_binary(34)\n    '100010'\n    >>> decimal_to_binary(35)\n\
    \    '100011'\n    >>> decimal_to_binary(36)\n    '100100'\n    >>> decimal_to_binary(37)\n\
    \    '100101'\n    >>> decimal_to_binary(38)\n    '100110'\n    >>> decimal_to_binary(39)\n\
    \    '100111'\n    >>> decimal_to_binary(40)\n\ndef check(candidate):\n    assert\
    \ candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert\
    \ candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\n\
    def test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7mamjqdl.py\"\
    , line 11\n    >>> decimal_to_binary(10)\n    ^^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n    >>> decimal_to_binary(10)\n    '1010'\n \
    \   >>> decimal_to_binary(12)\n    '1100'\n    >>> decimal_to_binary(15)\n   \
    \ '1111'\n    >>> decimal_to_binary(17)\n    '1111'\n    >>> decimal_to_binary(19)\n\
    \    '1111'\n    >>> decimal_to_binary(21)\n    '1111'\n    >>> decimal_to_binary(23)\n\
    \    '1111'\n    >>> decimal_to_binary(25)\n    '1111'\n    >>> decimal_to_binary(27)\n\
    \    '1111'\n    >>> decimal_to_binary(29)\n    '1111'\n    >>> decimal_to_binary(31)\n\
    \    '1111'\n    >>> decimal_to_binary(33)\n    '1111'\n    >>> decimal_to_binary(35)\n\
    \    '1111'\n    >>> decimal_to_binary(37)\n    '1111'\n    >>> decimal_to_binary(39)\n\
    \    '1111'\n    >>> decimal_to_binary(41)\n    '1111'\n    >>> decimal_to_binary(43)\n\
    \    '1111'\n    >>> decimal_to_binary(45)\n    '1111'\n    >>> decimal_to_binary(47)\n\
    \    '1111'\n    >>> decimal_to_binary(49)\n    '1111'\n    >>> decimal_to_binary(51)\n\
    \    '1111'\n    >>> decimal_to_binary(53)\n    '1111'\n    >>> decimal_to_binary(55)\n\
    \    '1111'\n    >>> decimal_to_binary(57)\n    '1111'\n    >>> decimal_to_binary(59)\n\
    \    '1111'\n    >>> decimal_to_binary(61)\n    '1111'\n    >>> decimal_to_binary(63)\n\
    \    '1111'\n    >>> decimal_to_binary(65)\n    '1111'\n    >>> decimal_to_binary(67)\n\
    \    '1111'\n    >>> decimal_to_binary(69)\n    '1111'\n    >>> decimal_to_binary(71)\n\
    \    '1111'\n    >>> decimal_to_binary(73)\n    '1111'\n    >>> decimal_to_binary(75)\n\
    \    '1111'\n    >>> decimal_to_binary(77)\n    '1111'\n    >>> decimal_to_binary(79)\n\
    \    '1111'\n    >>> decimal_to_binary(81)\n    '1111'\n    >>> decimal_to_binary(83)\n\
    \    '1111'\n    >>> decimal_to_binary(85)\n    '1111'\n    >>> decimal_to_binary(87)\n\
    \    '1111'\n    >>> decimal_to_binary(89)\n    '1111'\n    >>> decimal_to_binary(91)\n\
    \    '1111'\n    >>> decimal_to_binary(93)\n    '1111'\n    >>> decimal_to_binary(95)\n\
    \    '1111'\n    >>> decimal_to_bin\ndef check(candidate):\n    assert candidate(0)\
    \ == 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpak0my95w.py\"\
    , line 11\n    >>> decimal_to_binary(10)\n    ^^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # Output: '1100'\n            \"\"\"\n            decimal = 12\n           \
    \ binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\ndef check(candidate):\n   \
    \ assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n \
    \   assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0pem3xt_.py\"\
    , line 11\n    decimal = 12\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n    >>> decimal_to_binary(8)\n    '100'\n   \
    \ >>> decimal_to_binary(9)\n    '110'\n    >>> decimal_to_binary(10)\n    '111'\n\
    \    >>> decimal_to_binary(11)\n    '100'\n    >>> decimal_to_binary(12)\n   \
    \ '101'\n    >>> decimal_to_binary(13)\n    '110'\n    >>> decimal_to_binary(14)\n\
    \    '111'\n    >>> decimal_to_binary(15)\n    '1110'\n    >>> decimal_to_binary(16)\n\
    \    '1111'\n    >>> decimal_to_binary(17)\n    '1110'\n    >>> decimal_to_binary(18)\n\
    \    '1111'\n    >>> decimal_to_binary(19)\n    '1110'\n    >>> decimal_to_binary(20)\n\
    \    '1111'\n    >>> decimal_to_binary(21)\n    '1110'\n    >>> decimal_to_binary(22)\n\
    \    '1111'\n    >>> decimal_to_binary(23)\n    '1110'\n    >>> decimal_to_binary(24)\n\
    \    '1111'\n    >>> decimal_to_binary(25)\n    '1110'\n    >>> decimal_to_binary(26)\n\
    \    '1111'\n    >>> decimal_to_binary(27)\n    '1110'\n    >>> decimal_to_binary(28)\n\
    \    '1111'\n    >>> decimal_to_binary(29)\n    '1110'\n    >>> decimal_to_binary(30)\n\
    \    '1111'\n    >>> decimal_to_binary(31)\n    '1110'\n    >>> decimal_to_binary(32)\n\
    \    '1111'\n    >>> decimal_to_binary(33)\n    '1110'\n    >>> decimal_to_binary(34)\n\
    \    '1111'\n    >>> decimal_to_binary(35)\n    '1110'\n    >>> decimal_to_binary(36)\n\
    \    '1111'\n    >>> decimal_to_binary(37)\n    '1110'\n    >>> decimal_to_binary(38)\n\
    \    '1111'\n    >>> decimal_to_binary(39)\n    '1110'\n    >>> decimal_to_binary(40)\n\
    \    '1111'\n    >>> decimal_to_binary(41)\n    '1110'\n    >>> decimal_to_binary(42)\n\
    \    '1111'\n    >>> decimal_to_binary(43)\n    '1110'\n    >>> decimal_to_binary(44)\n\
    \    '1111'\n    >>> decimal_to_binary(45)\n    '1110'\n    >>> decimal_to_binary(46)\n\
    \    '1111'\n    >>> decimal_to_binary(47)\n    '1110'\n    >>> decimal_to_binary(48)\n\
    \    '1111'\n    >>> decimal_to_binary(49)\n    '1110'\n    >>> decimal_to_binary(50)\n\
    \    '1111'\ndef check(candidate):\n    assert candidate(0) == 'db0db'\n    assert\
    \ candidate(32) == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n\
    \    assert candidate(15) == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2slyev4h.py\"\
    , line 11\n    >>> decimal_to_binary(8)\n    ^^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # Output: '1100'\n            \"\"\"\n            decimal = 12\n           \
    \ binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\n            decimal = 12\n\
    \            binary_string = decimal_to_binary(decimal)\n            print(binary_string)\n\
    \            # Output: '1100'\n            \"\"\"\ndef check(candidate):\n   \
    \ assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n \
    \   assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc7ry98c1.py\"\
    , line 11\n    decimal = 12\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\n           \
    \ # '1100'\n            \"\"\"\n            decimal = 12\n            binary_string\
    \ = decimal_to_binary(decimal)\n            print(binary_string)\ndef check(candidate):\n\
    \    assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n\
    \    assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv1_fxjtt.py\"\
    , line 11\n    decimal = 12\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n            \"\"\"\n            Input: decimal = 12\n           \
    \ Output: '1100'\n            Explanation: 12 in binary is 1100\n            \"\
    \"\"\n            Input: decimal = 13\n            Output: '1101'\n          \
    \  Explanation: 13 in binary is 1101\n            \"\"\"\n            Input: decimal\
    \ = 15\n            Output: '1111'\n            Explanation: 15 in binary is 1111\n\
    \            \"\"\"\n            Input: decimal = 18\n            Output: '1110'\n\
    \            Explanation: 18 in binary is 1110\n            \"\"\"\n         \
    \   Input: decimal = 20\n            Output: '1111'\n            Explanation:\
    \ 20 in binary is 1111\n            \"\"\"\n            Input: decimal = 25\n\
    \            Output: '1111'\n            Explanation: 25 in binary is 1111\n \
    \           \"\"\"\n            Input: decimal = 26\n            Output: '1111'\n\
    \            Explanation: 26 in binary is 1111\n            \"\"\"\n         \
    \   Input: decimal = 27\n            Output: '1111'\n            Explanation:\
    \ 27 in binary is 1111\n            \"\"\"\n            Input: decimal = 28\n\
    \            Output: '1111'\n            Explanation: 28 in binary is 1111\n \
    \           \"\"\"\n            Input: decimal = 29\n            Output: '1111'\n\
    \            Explanation: 29 in binary is 1111\n            \"\"\"\n         \
    \   Input: decimal = 31\n            Output: '1111'\n            Explanation:\
    \ 31 in binary is 1111\n            \"\"\"\n            Input: decimal = 32\n\
    \            Output: '1111'\n            Explanation: 32 in binary is 1111\n \
    \           \"\"\"\n            Input: decimal = 33\n            Output: '1111'\n\
    \            Explanation: 33 in binary is 1111\n            \"\"\"\n         \
    \   Input: decimal = 34\n            Output: '1111'\n            Explanation:\
    \ 34 in binary is 1111\n            \"\"\"\n            Input: decimal = 35\n\
    \            Output: '1111'\n            Explanation: 35 in binary is 1111\n \
    \           \"\"\"\n            Input: decimal = 36\n            Output: '1111'\n\
    \            Explanation: 36 in binary is 1111\n            \"\"\"\n         \
    \   Input: decimal = 37\n            Output: '1111'\n            Explanation:\
    \ 37 in binary is 1111\n            \"\"\"\n            Input: decimal = 38\n\
    \            Output: '1111'\n            Explanation: 38 in binary is 1111\n \
    \           \"\"\"\n            Input: decimal = 39\n            Output: '1111'\n\
    \            Explanation: 39 in binary is 1111\n            \"\"\"\n         \
    \   Input: decimal = 40\n            Output: '1111'\n            Explanation:\
    \ 40 in \ndef check(candidate):\n    assert candidate(0) == 'db0db'\n    assert\
    \ candidate(32) == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n\
    \    assert candidate(15) == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpajlxqbo9.py\"\
    , line 11\n    Input: decimal = 12\nIndentationError: unexpected indent\n"
  exit_code: -1
  status: Exception
