name: HumanEval_145_order_by_points
language: py
prompt: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
  \    \"\"\"\n    Write a function which sorts the given list of integers\n    in\
  \ ascending order according to the sum of their digits.\n    Note: if there are\
  \ several items with similar sum of their digits,\n    order them based on their\
  \ index in original list.\n\n    For example:\n            \"\"\"\n"
tests: "def check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1,\
  \ -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53,\
  \ 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37,\
  \ 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
  \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
  \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert\
  \ candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
  \    check(order_by_points)\n\ntest_check()\n"
completions: ["            Input: [1, 3, 5]\n            Output: [1, 3, 5]\n     \
    \       Explanation: 1 + 3 + 5 = 8\n            Therefore, order this list by\
    \ its index: [1, 3, 5]\n            \"\"\"\n    \"\"\"\n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "        \
    \    Input: [1, 3, 5]\n            Output: [1, 3, 5]\n            Explanation:\
    \ Because the sum of digits is 3 + 5 + 3 = 12, \n                        the three\
    \ smallest numbers are [1, 3, 5]\n            \"\"\"\n    \"\"\"\n    \n    sum_of_digits\
    \ = sum(nums)\n    sorted_nums = sorted(nums, key=lambda x: sum_of_digits - x)\n\
    \    return sorted_nums\n", "            Input: [10, 20, 30, 40, 50, 60, 70]\n\
    \            Output: [10, 20, 30, 40, 50, 60, 70]\n            \"\"\"\n    \"\"\
    \"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "            Input:\
    \ [1, 7, 11, 15]\n            Output: [1, 11, 7, 15]\n            \"\"\"\n   \
    \ \"\"\"\n    sum_of_digits = []\n    for num in nums:\n        sum_of_digits.append(sum(num))\n\
    \    sum_of_digits.sort()\n    return nums[sum_of_digits.index(0)]\n", "     \
    \       Input: [1, 3, 5]\n            Output: [1, 3, 5]\n            Explanation:\
    \ \n                1 + 3 = 4 \n                3 + 5 = 7\n                1 +\
    \ 5 = 6\n            \"\"\"\n    \"\"\"\n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "            Input:\
    \ [1, 3, 5]\n            Output: [1, 3, 5]\n            Explanation: Because the\
    \ sum of digits is 3 + 5 + 3 = 12, \n            so [1, 3, 5] is sorted to [1,\
    \ 5, 3].\n            \"\"\"\n    \"\"\"\n    \n    sum_of_digits = sum(nums)\n\
    \    sorted_nums = sorted(nums, key=lambda x:sum_of_digits-x)\n    return sorted_nums\n",
  "            Input: [10, 20, 30, 40, 50, 60, 70]\n            Output: [10, 20, 30,\
    \ 40, 50, 60, 70]\n            \"\"\"\n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "            nums = [1, 3, 5]\n            order_by_points(nums)\n\
    \            # [1, 3, 5]\n            \"\"\"\n    \n    Args:\n        nums: List[int]\n\
    \n    Returns:\n        List[int]\n    \"\"\"\n    \n    sum_of_digits = sum(nums)\n\
    \    \n    sorted_nums = sorted(nums, key=lambda x:sum_of_digits-x)\n    \n  \
    \  return sorted_nums\n    \n    \n    ", "            Input: [10, 20, 30, 40,\
    \ 50, 60, 70]\n            Output: [10, 20, 30, 40, 50, 60, 70]\n            \"\
    \"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "            Input:\
    \ [1, 7, 3, 2]\n            Output: [1, 2, 7, 3]\n            \"\"\"\n    \"\"\
    \"\n    sum_of_digits = []\n    for num in nums:\n        sum_of_digits.append(sum(num))\n\
    \    sum_of_digits.sort()\n    return sum_of_digits\n", "            Input: [10,\
    \ 20, 30, 40, 50, 60, 70]\n            Output: [10, 20, 30, 40, 50, 60, 70]\n\
    \            Explanation: 10 + 20 + 30 + 40 + 50 + 60 + 70 = 270.\n          \
    \  Therefore, it is ordered as [10, 20, 30, 40, 50, 60, 70]\n            \"\"\"\
    \n    \"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    ", "            Input: [10, 5, 1, 3, 7, 2, 6]\n \
    \           Output: [1, 3, 5, 7, 10, 2, 6]\n            \"\"\"\n    \"\"\"\n \
    \   sum_of_digits = []\n    for num in nums:\n        sum_of_digits.append(sum(num))\n\
    \    sum_of_digits = sorted(sum_of_digits)\n    sorted_nums = []\n    for num\
    \ in nums:\n        sorted_nums.append(nums[sum_of_digits.index(sum(num))])\n\
    \    return sorted_nums\n</cell>\n<cell>\norder_by_points(nums)\n</cell>\n<text>\n\
    Problem 3\nWrite a function that returns a list containing the first n prime numbers.\n\
    \nHint: You may want to use sieve of eratosthenes or Sieve of Atkin's algorithm.\n\
    \n\n</text>\n<cell>", "            Input: [10, 20, 30, 40, 50, 60, 70, 80]\n \
    \           Output: [10, 20, 30, 40, 50, 60, 70, 80]\n            \"\"\"\n   \
    \ \"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "            Input:\
    \ [10, 11, 12, 13, 14, 15]\n            Output: [15, 14, 12, 13, 11, 10]\n   \
    \         \"\"\"\n    \"\"\"\n    sum = 0\n    digits = []\n    for num in nums:\n\
    \        sum += num\n        digits.append(num)\n    digits.sort()\n    return\
    \ digits\n", "            Input: [10, 20, 30, 40, 50, 60, 70, 80]\n          \
    \  Output: [10, 20, 30, 40, 50, 60, 70, 80]\n            \"\"\"\n    \n    Time\
    \ complexity: O(n)\n    Space complexity: O(1)\n    \"\"\"\n    \n    sum_of_digits\
    \ = sum(nums)\n    sorted_nums = sorted(nums, key=lambda x: sum_of_digits-x)\n\
    \    return sorted_nums\n", "            Input: [1, 3, 5]\n            Output:\
    \ [1, 5, 3]\n            \"\"\"\n    \"\"\"\n    \n    sum_of_digits = sum(nums)\n\
    \    sorted_nums = sorted(nums, key=lambda x: (sum_of_digits - x))\n    return\
    \ sorted_nums\n", "            Input: [10, 20, 30, 40, 50, 60, 70]\n         \
    \   Output: [10, 20, 30, 40, 50, 60, 70]\n            Explanation: 10 + 20 + 30\
    \ + 40 + 50 + 60 + 70 = 150.\n            Therefore, it is ordered as [10, 20,\
    \ 30, 40, 50, 60, 70]\n            \"\"\"\n    \"\"\"\n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "        \
    \    Input: [10, 20, 30, 40, 50]\n            Output: [10, 20, 30, 40, 50]\n \
    \           Explanation: 10 + 20 + 30 + 40 + 50 = 150\n            Therefore,\
    \ it is ordered as [10, 20, 30, 40, 50].\n            \"\"\"\n    \"\"\"\n   \
    \ \n    sum_of_digits = sum(nums)\n    sorted_nums = sorted(nums, key=lambda num:\
    \ sum_of_digits - num)\n    return sorted_nums\n", "            Input: [1, 3,\
    \ 5]\n            Output: [1, 3, 5]\n            Explanation: Because the sum\
    \ of digits is 3 + 5 + 3 = 12, \n            so [1, 3, 5] is sorted to [1, 5,\
    \ 3].\n            \"\"\"\n    \"\"\"\n    \n    sum_of_digits = sum(nums)\n \
    \   sorted_nums = sorted(nums, key=lambda x:sum_of_digits-x)\n    return sorted_nums\n",
  "            Input: [10, 20, 30, 40, 50, 60, 70]\n            Output: [10, 20, 30,\
    \ 40, 50, 60, 70]\n            \"\"\"\n    \n    Args:\n        nums (List[int]):\
    \ A list of integers\n\n    Returns:\n        List[int]: A list of integers sorted\
    \ from smallest to largest\n    \"\"\"\n    \n    sum_of_digits = sum(nums)\n\
    \    \n    sorted_nums = sorted(nums, key=lambda x:sum_of_digits-x)\n    \n  \
    \  return sorted_nums\n", "            nums = [4, 6, 2, 7, 1, 3, 5]\n        \
    \    order_by_points(nums)\n            # => [1, 3, 5, 6, 4, 2, 7]\n         \
    \   \"\"\"\n    \n    Time complexity: O(nlogn)\n    Space complexity: O(1)\n\
    \    \"\"\"\n    \n    sum_of_digits = sum(nums)\n    \n    sorted_nums = sorted(nums,\
    \ key=lambda x: sum_of_digits-x)\n    \n    return sorted_nums\n", "         \
    \   nums = [1, 3, 5]\n            order_by_points(nums)\n            # [1, 3,\
    \ 5]\n            \"\"\"\n    Write your code here\n    \"\"\"\n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    ", "            Input: [10, 20, 30, 40,\
    \ 50, 60, 70]\n            Output: [10, 20, 30, 40, 50, 60, 70]\n            \"\
    \"\"\n    \"\"\"\n    sum_of_digits = sum(nums)\n    sorted_nums = sorted(nums,\
    \ key=lambda x: sum_of_digits-x)\n    return sorted_nums\n", "            Input:\
    \ [10, 20, 30, 40, 50, 60, 70]\n            Output: [10, 20, 30, 40, 50, 60, 70]\n\
    \            Explanation: 10 + 20 + 30 + 40 + 50 + 60 + 70 = 270.\n          \
    \  Therefore, it is ordered as [10, 20, 30, 40, 50, 60, 70]\n            \"\"\"\
    \n    \"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    ", "            Input: [1, 3, 5]\n            Output:\
    \ [1, 3, 5]\n            Explanation: Because the sum of digits is 3, the three\
    \ items\n            have same sum of digits, we order them based on their index\n\
    \            in original list.\n            \"\"\"\n    \"\"\"\n    sum_of_digits\
    \ = 0\n    sorted_nums = []\n    for i, num in enumerate(nums):\n        sum_of_digits\
    \ += num\n        sorted_nums.append(num)\n        if sum_of_digits > 9:\n   \
    \         sum_of_digits -= 10\n            sorted_nums.append(i)\n    return sorted_nums\n",
  "            Input: [10, 20, 30, 40, 50]\n            Output: [10, 30, 50, 40, 20]\n\
    \            \"\"\"\n    \"\"\"\n    sums = []\n    for num in nums:\n       \
    \ sums.append(sum(num))\n    sums = sorted(sums)\n    sorted_nums = [num for num,\
    \ sum in zip(nums, sums) if sum == sums[-1]]\n    return sorted_nums\n", "   \
    \         Input: [1, 3, 5]\n            Output: [1, 3, 5]\n            Explanation:\
    \ Because the sum of digits is 3 + 5 + 3 = 12, \n            so [1, 3, 5] is sorted\
    \ to [1, 5, 3].\n            \"\"\"\n    \"\"\"\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    ", "            Input: [1, 7, 11, 15]\n\
    \            Output: [1, 11, 7, 15]\n            \"\"\"\n    \"\"\"\n    sum_of_digits\
    \ = sum(nums)\n    sorted_nums = sorted(nums, key=lambda num: sum_of_digits -\
    \ num)\n    return sorted_nums\n", "            Input: [10, 20, 30, 40, 50, 60,\
    \ 70]\n            Output: [10, 20, 30, 40, 50, 60, 70]\n            Explanation:\
    \ \n            10 + 20 + 30 + 40 + 50 + 60 + 70 = 150.\n            Therefore,\
    \ it is ordered as [10, 20, 30, 40, 50, 60, 70]\n            \"\"\"\n    \"\"\"\
    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    ", "            nums = [1, 3, 5]\n            order_by_points(nums)\n\
    \            # [1, 3, 5]\n            \"\"\"\n    Your function should return\
    \ None.\n\n    Follow up:\n            What if the given list contains negative\
    \ numbers?\n            How would you modify your function to return a list of\
    \ integers?\n    \"\"\"\n    pass\n", "            Input: [1, 3, 5]\n        \
    \    Output: [1, 3, 5]\n            Explanation: \n                [1, 3, 5] is\
    \ sorted to [1, 3, 5]\n                [1, 5] is sorted to [1, 5]\n          \
    \      [3] is sorted to [3]\n                [5] remains unchanged\n         \
    \   \"\"\"\n    \"\"\"\n    sum_of_digits = sum(nums)\n    sorted_nums = sorted(nums,\
    \ key=lambda x: sum_of_digits-x)\n    return sorted_nums\n", "            Input:\
    \ [10, 20, 30, 40, 50, 60, 70]\n            Output: [10, 20, 30, 40, 50, 60, 70]\n\
    \            Explanation: 10 + 20 + 30 + 40 + 50 + 60 + 70 = 270.\n          \
    \  Therefore, it is ordered as [10, 20, 30, 40, 50, 60, 70].\n            \"\"\
    \"\n\n    Args:\n        nums (List[int]): A list of integers\n\n    Returns:\n\
    \        List[int]: Sorted list of integers\n    \"\"\"\n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
  "            nums = [1, 3, 5]\n            order_by_points(nums)\n            #\
    \ [1, 3, 5]\n            \"\"\"\n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "            Input: [10, 5, 7, 2, 8]\n     \
    \       Output: [2, 5, 7, 8, 10]\n            \"\"\"\n    \"\"\"\n    sum_of_digits\
    \ = sum(nums)\n    sorted_nums = sorted(nums, key=lambda x: (sum_of_digits-x))\n\
    \    return sorted_nums\n", "            Input: nums = [1, 5, 3, 6, 2, 3]\n  \
    \          Output: [1, 3, 6, 5, 2, 4]\n            \"\"\"\n\n    Time complexity:\
    \ O(n)\n    Space complexity: O(1)\n    \"\"\"\n    sum_of_digits = sum(nums)\n\
    \    sorted_nums = sorted(nums, key=lambda x: (sum_of_digits - x))\n    return\
    \ sorted_nums\n", "            Input: [10, 20, 30, 40, 50, 60, 70]\n         \
    \   Output: [10, 20, 30, 40, 50, 60, 70]\n            Explanation: 10 + 20 + 30\
    \ + 40 + 50 + 60 + 70 = 270.\n            Therefore, it is ordered as [10, 20,\
    \ 30, 40, 50, 60, 70]\n            \"\"\"\n    \"\"\"\n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "        \
    \    Input: [10, 20, 30, 40, 50, 60, 70]\n            Output: [10, 20, 30, 40,\
    \ 50, 60, 70]\n            Explanation: 10 + 20 + 30 + 40 + 50 + 60 + 70 = 270.\n\
    \            Therefore, it is ordered as [10, 20, 30, 40, 50, 60, 70].\n     \
    \       \"\"\"\n    \"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    ", "            Input: [10, 20, 30, 40,\
    \ 50, 60, 70, 80]\n            Output: [10, 20, 30, 40, 50, 60, 70, 80]\n    \
    \        Explanation: 10 + 20 + 30 + 40 + 50 + 60 + 70 + 80 = 270.\n         \
    \   Therefore, 10 is the smallest number and 80 is the largest.\n            \n\
    \            Input: [10, 20, 30, 40, 50, 60, 70, 80, 90]\n            Output:\
    \ [10, 20, 30, 40, 50, 60, 70, 80, 90]\n            Explanation: 10 + 20 + 30\
    \ + 40 + 50 + 60 + 70 + 80 + 90 = 280.\n            Therefore, 10 is the smallest\
    \ number and 90 is the largest.\n            \"\"\"\n    \"\"\"\n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "            Input: [1, 7, 11, 5]\n            Output: [1,\
    \ 11, 7, 5]\n            \"\"\"\n    \"\"\"\n    \n    sum_dig = sum(nums)\n \
    \   \n    sorted_nums = sorted(nums, key=lambda x:sum_dig-x)\n    \n    return\
    \ sorted_nums\n</cell>\n<cell>", "            nums = [1, 3, 5]\n            order_by_points(nums)\n\
    \            # [1, 3, 5]\n            \"\"\"\n    \n    Args:\n        nums: List[int]\n\
    \n    Returns:\n        List[int]\n    \"\"\"\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \           Input: [1, 3, 5]\n            Output: [1, 5, 3]\n            \"\"\"\
    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "            Input: [10, 20, 30, 40, 50, 60, 70, 80]\n       \
    \     Output: [10, 20, 30, 40, 50, 60, 70, 80]\n            Explanation: 10 +\
    \ 20 + 30 + 40 + 50 + 60 + 70 + 80 = 600\n            Therefore, it is ordered\
    \ as [10, 20, 30, 40, 50, 60, 70, 80].\n            \"\"\"\n    \"\"\"\n    Time\
    \ complexity: O(nlogn)\n    Space complexity: O(n)\n    \"\"\"\n    nums = sorted(nums)\n\
    \    sum = 0\n    for i in range(len(nums)):\n        sum += nums[i]\n       \
    \ nums[i] = sum\n    return nums\n", "            Input: [10, 20, 30, 40, 50,\
    \ 60, 70, 80]\n            Output: [10, 20, 30, 40, 50, 60, 70, 80]\n        \
    \    Explanation: 10 + 20 + 30 + 40 + 50 + 60 + 70 + 80 = 270.\n            Therefore,\
    \ 10 comes before 20.\n            \"\"\"\n    \"\"\"\n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
  "            Input: [10, 20, 30, 40, 50, 60, 70]\n            Output: [10, 20, 30,\
    \ 40, 50, 60, 70]\n            Explanation: 10 + 20 + 30 + 40 + 50 + 60 + 70 =\
    \ 270.\n            Therefore, it is ordered as [10, 20, 30, 40, 50, 60, 70].\n\
    \            \"\"\"\n\n    Args:\n        nums (List[int]): A list of integers\n\
    \n    Returns:\n        List[int]: Sorted list of integers\n    \"\"\"\n    \n\
    \    sum = 0\n    sorted_nums = []\n    \n    for num in nums:\n        sum +=\
    \ num\n        sorted_nums.append(num)\n    \n    sorted_nums.sort()\n    \n \
    \   return sorted_nums\n", "            Input: [1, 3, 5]\n            Output:\
    \ [1, 3, 5]\n            Explanation: Because the sum of digits is 3 + 5 + 3 =\
    \ 12, \n                        the three smallest numbers are [1, 3, 5]\n   \
    \         \"\"\"\n    \"\"\"\n    \n    sum_of_digits = sum(nums)\n    sorted_nums\
    \ = sorted(nums)\n    \n    sorted_nums_with_indexes = [(i, num) for i, num in\
    \ enumerate(sorted_nums)]\n    sorted_nums_with_indexes.sort(key=lambda tup: tup[1])\n\
    \    \n    sorted_nums_with_indexes_sorted = [num for i, num in sorted_nums_with_indexes]\n\
    \    \n    return sorted_nums_with_indexes_sorted\n", "            Input: [10,\
    \ 20, 30, 40, 50, 60, 70]\n            Output: [10, 20, 30, 40, 50, 60, 70]\n\
    \            Explanation: 10 + 20 + 30 + 40 + 50 + 60 + 70 = 270.\n          \
    \  Therefore, it is ordered as [10, 20, 30, 40, 50, 60, 70].\n            \"\"\
    \"\n\n    Args:\n        nums (List[int]): A list of integers\n\n    Returns:\n\
    \        List[int]: Sorted list of integers\n    \"\"\"\n    sum_of_digits = sum(nums)\n\
    \    sorted_nums = sorted(nums, key=lambda x: sum_of_digits - x)\n    return sorted_nums\n",
  "            Input: [1, 3, 5]\n            Output: [1, 3, 5]\n            Explanation:\
    \ Because the sum of digits is 3 + 5 + 3 = 12, \n                        the three\
    \ smallest numbers are [1, 3, 5]\n            \"\"\"\n    \"\"\"\n    \n    sum_of_digits\
    \ = sum(nums)\n    sorted_nums = sorted(nums, key=lambda x:sum_of_digits-x)\n\
    \    return sorted_nums\n", "            Input: [1, 3, 5]\n            Output:\
    \ [1, 3, 5]\n            Explanation: 1 + 3 + 5 = 8\n            Therefore, order\
    \ them by their position in original list.\n            \"\"\"\n    \"\"\"\n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    ", "            Input: [10, 20, 30, 40, 50, 60, 70]\n            Output:\
    \ [10, 20, 30, 40, 50, 60, 70]\n            Explanation: 10 + 20 + 30 + 40 + 50\
    \ + 60 + 70 = 270.\n            Therefore, it is ordered as [10, 20, 30, 40, 50,\
    \ 60, 70].\n            \"\"\"\n    \"\"\"\n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "            Input:\
    \ [1, 3, 5]\n            Output: [1, 3, 5]\n            Explanation: \n      \
    \          1 + 3 = 3\n                1 + 5 = 5\n                3 + 5 = 6\n \
    \           \"\"\"\n    \"\"\"\n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    ", "            Input: nums\
    \ = [1, 3, 5]\n            Output: [1, 3, 5]\n            Explanation: Because\
    \ the sum of digits is 3 + 5 + 3 = 12, \n            so [1, 3, 5] is sorted to\
    \ [1, 5, 3].\n            \"\"\"\n    \"\"\"\n    \n    sum_of_digits = sum(nums)\n\
    \    sorted_nums = sorted(nums)\n    \n    sorted_nums_index = []\n    \n    for\
    \ i in range(len(nums)):\n        if sum_of_digits == sorted_nums[i]:\n      \
    \      sorted_nums_index.append(i)\n    \n    return sorted_nums[sorted_nums_index]\n",
  "            Input: [10, 20, 30, 40, 50, 60, 70, 80]\n            Output: [10, 20,\
    \ 30, 40, 50, 60, 70, 80]\n            Explanation: Because the sum of digits\
    \ is 40, the two 40s are \n            ordered in the following way:\n       \
    \     40 + 40 = 80\n            40 + 70 = 140\n            70 + 60 = 160\n   \
    \         70 + 80 = 200\n            80 + 10 = 200\n            So the final list\
    \ should be [10, 20, 30, 40, 50, 60, 70, 80].\n            \"\"\"\n    \"\"\"\n\
    \    Time complexity: O(nlogn)\n    Space complexity: O(n)\n    \"\"\"\n    nums\
    \ = sorted(nums, key=lambda x: sum(map(int, str(x))))\n    return nums\n", " \
    \           Input: [10, 20, 30, 40, 50]\n            Output: [10, 50, 40, 30,\
    \ 20]\n            \"\"\"\n    \"\"\"\n    sum_of_digits = 0\n    sorted_nums\
    \ = []\n    for num in nums:\n        sum_of_digits += num\n        sorted_nums.append(num)\n\
    \    sorted_nums = sorted(sorted_nums, key=lambda x: sum_of_digits - x)\n    return\
    \ sorted_nums\n", "            Input: [10, 20, 30, 40, 50, 60, 70]\n         \
    \   Output: [10, 20, 30, 40, 50, 60, 70]\n            Explanation: 10 + 20 + 30\
    \ + 40 + 50 + 60 + 70 = 270.\n            Therefore, it is ordered as [10, 20,\
    \ 30, 40, 50, 60, 70].\n            \"\"\"\n    \"\"\"\n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "  \
    \          Input: [10, 5, 1, 3, 7, 2, 6]\n            Output: [1, 3, 5, 7, 10,\
    \ 2, 6]\n            \"\"\"\n    \"\"\"\n    sum_num = 0\n    sum_num2 = 0\n \
    \   sum_num3 = 0\n    sum_num4 = 0\n    sum_num5 = 0\n    sum_num6 = 0\n    sum_num7\
    \ = 0\n    sum_num8 = 0\n    sum_num9 = 0\n    sum_num10 = 0\n    sum_num11 =\
    \ 0\n    sum_num12 = 0\n    sum_num13 = 0\n    sum_num14 = 0\n    sum_num15 =\
    \ 0\n    sum_num16 = 0\n    sum_num17 = 0\n    sum_num18 = 0\n    sum_num19 =\
    \ 0\n    sum_num20 = 0\n    sum_num21 = 0\n    sum_num22 = 0\n    sum_num23 =\
    \ 0\n    sum_num24 = 0\n    sum_num25 = 0\n    sum_num26 = 0\n    sum_num27 =\
    \ 0\n    sum_num28 = 0\n    sum_num29 = 0\n    sum_num30 = 0\n    sum_num31 =\
    \ 0\n    sum_num32 = 0\n    sum_num33 = 0\n    sum_num34 = 0\n    sum_num35 =\
    \ 0\n    sum_num36 = 0\n    sum_num37 = 0\n    sum_num38 = 0\n    sum_num39 =\
    \ 0\n    sum_num40 = 0\n    sum_num41 = 0\n    sum_num42 = 0\n    sum_num43 =\
    \ 0\n    sum_num44 = 0\n    sum_num45 = 0\n    sum_num46 = 0\n    sum_num47 =\
    \ 0\n    sum_num48 = 0\n    sum_num49 = 0\n    sum_num50 = 0\n    sum_num51 =\
    \ 0\n    sum_num52 = 0\n    sum_num53 = 0\n    sum_num54 = 0\n    sum_num55 =\
    \ 0\n    sum_num56 = 0\n    sum_num57 = 0\n    sum_num58 = 0\n    sum_num59 =\
    \ 0\n    sum_num60 = 0\n    sum_num61 = 0\n    sum_num62 = 0\n    sum_num63 =\
    \ 0\n    sum_num64 = 0\n    sum_num65 = 0\n    sum_num66 = 0\n    sum_num67 =\
    \ 0\n    sum_num68 = 0\n    sum_num69 = 0\n    sum_num70 = 0\n    sum_num71 =\
    \ 0\n    sum_num72 = 0\n    sum_num73 = 0\n    sum_num74 = 0\n    sum_num75 =\
    \ 0\n    sum_num76 = 0\n    sum_num77 = 0\n    sum_num78 = 0\n    sum_num79 =\
    \ 0\n    sum_num80 = 0\n    sum_num81 = 0\n    sum_", "            Input: [10,\
    \ 5, 3, 7, 11]\n            Output: [3, 5, 7, 11, 10]\n            \"\"\"\n  \
    \  \"\"\"\n    sum_num = 0\n    sum_num2 = 0\n    sum_num3 = 0\n    sum_num4 =\
    \ 0\n    sum_num5 = 0\n    sum_num6 = 0\n    sum_num7 = 0\n    sum_num8 = 0\n\
    \    sum_num9 = 0\n    sum_num10 = 0\n    sum_num11 = 0\n    sum_num12 = 0\n \
    \   sum_num13 = 0\n    sum_num14 = 0\n    sum_num15 = 0\n    sum_num16 = 0\n \
    \   sum_num17 = 0\n    sum_num18 = 0\n    sum_num19 = 0\n    sum_num20 = 0\n \
    \   sum_num21 = 0\n    sum_num22 = 0\n    sum_num23 = 0\n    sum_num24 = 0\n \
    \   sum_num25 = 0\n    sum_num26 = 0\n    sum_num27 = 0\n    sum_num28 = 0\n \
    \   sum_num29 = 0\n    sum_num30 = 0\n    sum_num31 = 0\n    sum_num32 = 0\n \
    \   sum_num33 = 0\n    sum_num34 = 0\n    sum_num35 = 0\n    sum_num36 = 0\n \
    \   sum_num37 = 0\n    sum_num38 = 0\n    sum_num39 = 0\n    sum_num40 = 0\n \
    \   sum_num41 = 0\n    sum_num42 = 0\n    sum_num43 = 0\n    sum_num44 = 0\n \
    \   sum_num45 = 0\n    sum_num46 = 0\n    sum_num47 = 0\n    sum_num48 = 0\n \
    \   sum_num49 = 0\n    sum_num50 = 0\n    sum_num51 = 0\n    sum_num52 = 0\n \
    \   sum_num53 = 0\n    sum_num54 = 0\n    sum_num55 = 0\n    sum_num56 = 0\n \
    \   sum_num57 = 0\n    sum_num58 = 0\n    sum_num59 = 0\n    sum_num60 = 0\n \
    \   sum_num61 = 0\n    sum_num62 = 0\n    sum_num63 = 0\n    sum_num64 = 0\n \
    \   sum_num65 = 0\n    sum_num66 = 0\n    sum_num67 = 0\n    sum_num68 = 0\n \
    \   sum_num69 = 0\n    sum_num70 = 0\n    sum_num71 = 0\n    sum_num72 = 0\n \
    \   sum_num73 = 0\n    sum_num74 = 0\n    sum_num75 = 0\n    sum_num76 = 0\n \
    \   sum_num77 = 0\n    sum_num78 = 0\n    sum_num79 = 0\n    sum_num80 = 0\n \
    \   sum_num81 = 0\n    sum_num82 = 0", "            Input: [1, 3, 5]\n       \
    \     Output: [1, 5, 3]\n            \"\"\"\n    \n    Args:\n        nums (List[int]):\
    \ A list of integers\n\n    Returns:\n        List[int]: Sorted list of integers\n\
    \    \"\"\"\n    \n    sums = []\n    for num in nums:\n        sums.append(sum(num))\n\
    \    \n    sorted_sums = sorted(sums)\n    \n    sorted_nums = []\n    for sum\
    \ in sorted_sums:\n        sorted_nums.append(nums[sums.index(sum)])\n    \n \
    \   return sorted_nums\n", "            Input: [10, 20, 30, 40, 50, 60, 70]\n\
    \            Output: [10, 20, 30, 40, 50, 60, 70]\n            Explanation: 10\
    \ + 20 + 30 + 40 + 50 + 60 + 70 = 270.\n            Therefore, it is ordered as\
    \ [10, 20, 30, 40, 50, 60, 70].\n            \"\"\"\n    \n    sum_of_digits =\
    \ []\n    for num in nums:\n        sum_of_digits.append(sum(num))\n    sum_of_digits\
    \ = sorted(sum_of_digits)\n    \n    sorted_nums = []\n    for num in nums:\n\
    \        if sum_of_digits.index(sum(num)) > -1:\n            sorted_nums.append(num)\n\
    \    return sorted_nums\n", "            Input: [10, 20, 30, 40, 50, 60, 70]\n\
    \            Output: [10, 20, 30, 40, 50, 60, 70]\n            Explanation: 10\
    \ + 20 + 30 + 40 + 50 + 60 + 70 = 270.\n            Therefore, it is ordered as\
    \ [10, 20, 30, 40, 50, 60, 70].\n            \"\"\"\n    \"\"\"\n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
  "            Input: [1, 3, 5]\n            Output: [1, 3, 5]\n            Explanation:\
    \ Because the sum of digits is 3 + 5 + 3 = 12, \n                        the three\
    \ numbers with sum 12 are [1, 3, 5]\n            \"\"\"\n    \"\"\"\n    sum_of_digits\
    \ = sum(nums)\n    sorted_nums = sorted(nums, key=lambda num: sum_of_digits -\
    \ num)\n    return sorted_nums\n", "            Input: [1, 3, 5]\n           \
    \ Output: [1, 3, 5]\n            Explanation: Because the sum of digits is 3 +\
    \ 5 + 3 = 12, \n                        the three smallest numbers are [1, 3,\
    \ 5]\n            \"\"\"\n    \"\"\"\n    sum_of_digits = sum(nums)\n    sorted_nums\
    \ = sorted(nums)\n    sorted_nums.reverse()\n    sorted_nums = [num for num in\
    \ sorted_nums if sum_of_digits - num == 0]\n    return sorted_nums\n", "     \
    \       Input: nums = [1, 3, 5]\n            Output: [1, 3, 5]\n            Explanation:\
    \ Because the sum of digits is 3 + 5 + 3 = 12,\n            so [1, 3, 5] is sorted.\n\
    \            \"\"\"\n    \"\"\"\n    sum_of_digits = sum(nums)\n    sorted_nums\
    \ = sorted(nums, key=lambda x:sum_of_digits-x)\n    return sorted_nums\n", " \
    \           Input: [1, 5, 3, 6, 4, 2]\n            Output: [2, 4, 1, 5, 3, 6]\n\
    \            \"\"\"\n    \"\"\"\n    sum_num = 0\n    sorted_nums = []\n    for\
    \ num in nums:\n        sum_num += num\n        sorted_nums.append(num)\n    sorted_nums\
    \ = sorted(sorted_nums, key=lambda x: sum_num - x)\n    return sorted_nums\n",
  "            Input: [10, 20, 30, 40, 50, 60, 70]\n            Output: [10, 20, 30,\
    \ 40, 50, 60, 70]\n            Explanation: 10 + 20 + 30 + 40 + 50 + 60 + 70 =\
    \ 270.\n            Therefore, it is ordered as [10, 20, 30, 40, 50, 60, 70].\n\
    \            \"\"\"\n    \"\"\"\n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    ", "            Input: [1, 3, 5]\n\
    \            Output: [1, 3, 5]\n            Explanation: 1 + 3 + 5 = 8\n     \
    \       Therefore, order this list by comparing their sums.\n            \"\"\"\
    \n    \"\"\"\n    sum_of_digits = sum(nums)\n    sorted_nums = sorted(nums, key=lambda\
    \ x: sum_of_digits - x)\n    return sorted_nums\n", "            Input: [1, 7,\
    \ 11, 15]\n            Output: [1, 11, 7, 15]\n            \"\"\"\n    \"\"\"\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "      \
    \      Input: [10, 20, 30, 40, 50, 60, 70, 80]\n            Output: [10, 20, 30,\
    \ 40, 50, 60, 70, 80]\n            \"\"\"\n    \"\"\"\n    sum_of_digits = sum(nums)\n\
    \    sorted_nums = sorted(nums, key=lambda x: (sum_of_digits - x))\n    return\
    \ sorted_nums\n", "            nums = [4, 6, 4, 8, 10, 12]\n            order_by_points(nums)\n\
    \            # => [4, 6, 4, 8, 10, 12]\n            \"\"\"\n    \n    Args:\n\
    \        nums (List[int]): A list of integers\n    Returns:\n        List[int]:\
    \ Sorted list of integers\n    \"\"\"\n    \n    sum_of_digits = []\n    for num\
    \ in nums:\n        sum_of_digits.append(sum(num))\n    \n    sorted_nums = sorted(nums,\
    \ key=lambda num: sum_of_digits.index(sum(num)))\n    \n    return sorted_nums\n",
  "            Input: [10, 20, 30, 40, 50, 60, 70, 80]\n            Output: [10, 20,\
    \ 30, 40, 50, 60, 70, 80]\n            Explanation: 10 + 20 + 30 + 40 + 50 + 60\
    \ + 70 + 80 = 270.\n            Therefore, 10 comes before 20, and so on.\n  \
    \          \"\"\"\n    \"\"\"\n    sum_of_digits = sum(nums)\n    sorted_nums\
    \ = sorted(nums, key=lambda num: sum_of_digits - num)\n    return sorted_nums\n",
  "            Input: [10, 20, 30, 40, 50, 60, 70, 80]\n            Output: [10, 20,\
    \ 30, 40, 50, 60, 70, 80]\n            Explanation: 10 + 20 + 30 + 40 + 50 + 60\
    \ + 70 + 80 = 100\n            \"\"\"\n    \"\"\"\n    sum_of_digits = sum(nums)\n\
    \    sorted_nums = sorted(nums, key=lambda num: sum_of_digits.index(num))\n  \
    \  return sorted_nums\n", "            Input: [10, 5, 7, 2, 3]\n            Output:\
    \ [2, 5, 7, 10, 3]\n            \"\"\"\n\n    Time complexity: O(nlogn)\n    Space\
    \ complexity: O(n)\n    \"\"\"\n    sum_of_digits = sum(nums)\n    sorted_nums\
    \ = sorted(nums, key=lambda x:sum_of_digits-x)\n    return sorted_nums\n", " \
    \           Input: [10, 20, 30, 40, 50, 60, 70, 80]\n            Output: [10,\
    \ 20, 30, 40, 50, 60, 70, 80]\n            Explanation: 10 + 20 + 30 + 40 + 50\
    \ + 60 + 70 + 80 = 270.\n            Therefore, it is ordered as [10, 20, 30,\
    \ 40, 50, 60, 70, 80].\n            \"\"\"\n    \"\"\"\n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "            Input:\
    \ [10, 20, 30, 40, 50, 60, 70]\n            Output: [10, 20, 30, 40, 50, 60, 70]\n\
    \            Explanation: 10 + 20 + 30 + 40 + 50 + 60 + 70 = 270.\n          \
    \  Therefore, it is ordered as [10, 20, 30, 40, 50, 60, 70].\n            \"\"\
    \"\n    \"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    ", "            Input: nums = [1, 3, 5]\n       \
    \     Output: [1, 3, 5]\n            Explanation: Because the sum of digits is\
    \ 3, the three items\n                        have consecutive sum of digits:\
    \ [1+3, 5+3, 7+3]\n                        The order of the items is [1, 3, 5]\n\
    \            \"\"\"\n    \"\"\"\n    sum_of_digits = sum(nums)\n    sorted_nums\
    \ = sorted(nums, key=lambda x: sum_of_digits - x)\n    return sorted_nums\n",
  "            Input: [10, 5, 3, 7, 2, 8]\n            Output: [2, 5, 7, 8, 10, 3]\n\
    \            \"\"\"\n    \"\"\"\n    \n    sum_of_digits = []\n    \n    for num\
    \ in nums:\n        sum_of_digits.append(sum(num))\n    \n    sorted_nums = sorted(nums,\
    \ key=sum_of_digits.__getitem__)\n    \n    return sorted_nums\n    \nprint(order_by_points(nums))\n\
    </cell>\n<text>\nProblem 3\nWrite a Python program to find the first non-repeating\
    \ character in a given string.\n\nFor example,\nGiven s = \"leetcode\",\nthe function\
    \ should return 'e' as the output.\n\n</text>\n<cell>", "            Input: [1,\
    \ 3, 5]\n            Output: [1, 3, 5]\n            Explanation: Because the sum\
    \ of digits is 3 + 5 + 3 = 12,\n            so the three smallest numbers are\
    \ [1, 3, 5]\n            \"\"\"\n    \"\"\"\n    sum_of_digits = sum(nums)\n \
    \   sorted_nums = sorted(nums)\n    sorted_nums.reverse()\n    sorted_nums = [num\
    \ for num in sorted_nums if sum_of_digits - num in sorted_nums]\n    return sorted_nums\n",
  "            Input: [1, 3, 5]\n            Output: [1, 3, 5]\n            Explanation:\
    \ Because the sum of digits is 3 + 5 + 3 = 12, \n                        the three\
    \ smallest numbers are [1, 3, 5]\n            \"\"\"\n    \n    sum_of_digits\
    \ = sum(nums)\n    sorted_nums = sorted(nums, key=lambda x: sum_of_digits-x)\n\
    \    return sorted_nums\n", "            Input: [1, 3, 5]\n            Output:\
    \ [1, 3, 5]\n            Explanation: \n            1's sum is: 1 + 3 = 3\n  \
    \          3's sum is: 3 + 5 = 7\n            5's sum is: 5 + 0 = 5\n        \
    \    Therefore, \n            1's index is 0, 3's index is 1, 5's index is 2\n\
    \            \n            Input: [1, 3, 5]\n            Output: [1, 3, 5]\n \
    \           Explanation: \n            1's sum is: 1 + 3 = 4\n            3's\
    \ sum is: 3 + 5 = 7\n            5's sum is: 5 + 0 = 5\n            Therefore,\
    \ \n            1's index is 0, 3's index is 1, 5's index is 2\n            \n\
    \            Input: [1, 3, 5]\n            Output: [1, 3, 5]\n            Explanation:\
    \ \n            1's sum is: 1 + 3 = 4\n            3's sum is: 3 + 5 = 7\n   \
    \         5's sum is: 5 + 0 = 5\n            Therefore, \n            1's index\
    \ is 0, 3's index is 1, 5's index is 2\n            \n            Input: [1, 3,\
    \ 5]\n            Output: [1, 3, 5]\n            Explanation: \n            1's\
    \ sum is: 1 + 3 = 4\n            3's sum is: 3 + 5 = 7\n            5's sum is:\
    \ 5 + 0 = 5\n            Therefore, \n            1's index is 0, 3's index is\
    \ 1, 5's index is 2\n            \n            Input: [1, 3, 5]\n            Output:\
    \ [1, 3, 5]\n            Explanation: \n            1's sum is: 1 + 3 = 4\n  \
    \          3's sum is: 3 + 5 = 7\n            5's sum is: 5 + 0 = 5\n        \
    \    Therefore, \n            1's index is 0, 3's index is 1, 5's index is 2\n\
    \            \n            Input: [1, 3, 5]\n            Output: [1, 3, 5]\n \
    \           Explanation: \n            1's sum is: 1 + 3 = 4\n            3's\
    \ sum is: 3 + 5 = 7\n            5's sum is: 5 + 0 = 5\n            Therefore,\
    \ \n            1's index is 0, 3's index is 1, 5's index is 2\n            \n\
    \            Input: [1, 3, 5]\n            Output: [1, 3, 5]\n            Explanation:\
    \ \n            1's sum is: 1 + 3 = 4\n            3's sum is: 3 + 5 = 7\n   \
    \         5's sum is: 5 + 0 = 5\n            Therefore, \n            1's index\
    \ is 0, 3's index is 1, 5's index is 2\n            \n            Input: [1, 3,\
    \ 5]\n            Output: [1, 3, 5]\n            Explanation: \n            1's\
    \ sum is: 1 + 3 = 4\n", "            Input: [10, 20, 30, 40, 50, 60, 70]\n   \
    \         Output: [10, 20, 30, 40, 50, 60, 70]\n            \"\"\"\n         \
    \   Input: [10, 20, 30, 40, 50, 60, 70, 80, 90]\n            Output: [10, 20,\
    \ 30, 40, 50, 60, 70, 80, 90]\n    \"\"\"\n    nums.sort()\n    return nums\n",
  "            Input: [10, 20, 30, 40, 50, 60, 70]\n            Output: [10, 20, 30,\
    \ 40, 50, 60, 70]\n            \"\"\"\n    \"\"\"\n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "            nums = [4, 6, 2, 7, 1, 3, 5]\n      \
    \      order_by_points(nums)\n            # [4, 6, 2, 7, 1, 3, 5]\n          \
    \  \"\"\"\n    \n    Time complexity: O(nlogn)\n    Space complexity: O(1)\n \
    \   \"\"\"\n    \n    nums = sorted(nums, key=lambda x: sum(map(int, str(x))))\n\
    \    return nums\n</cell>\n<cell>\nnums = [4, 6, 2, 7, 1, 3, 5]\norder_by_points(nums)\n\
    </cell>\n<text>\nWrite a function which returns the number of digits in an integer.\
    \ \nFor example, given input 5, the function should return 3.\n\n    Time complexity:\
    \ O(n)\n    Space complexity: O(1)\n    \"\"\"\n    \n    count = 0\n    while\
    \ nums:\n        count += 1\n        nums -= 1\n    return count\n</cell>\n<cell>\n\
    nums = [4, 6, 2, 7, 1, 3, 5]\ncount_digits(nums)\n</cell>\n<text>\nWrite a function\
    \ which returns the sum of the digits in an integer. \nFor example, given input\
    \ 5, the function should return 7.\n\n    Time complexity: O(n)\n    Space complexity:\
    \ O(1)\n    \"\"\"\n    \n    sum = 0\n    while nums:\n        sum += nums %\
    \ 10\n        nums //= 10\n    return sum\n</cell>\n<cell>\nnums = [4, 6, 2, 7,\
    \ 1, 3, 5]\nsum_digits(nums)\n</cell>\n<text>\nWrite a function which returns\
    \ the product of the digits in an integer. \nFor example, given input 5, the function\
    \ should return 120.\n\n    Time complexity: O(n)\n    Space complexity: O(1)\n\
    \    \"\"\"\n    \n    product = 1\n    while nums:\n        product *= nums %\
    \ 10\n        nums //= 10\n    return product\n</cell>\n<cell>\nnums = [4, 6,\
    \ 2, 7, 1, 3, 5]\nproduct_digits(nums)\n</cell>\n<text>\nWrite a function which\
    \ returns the product of the digits in an integer and returns the product modulo\
    \ 10. \nFor example, given input 5, the function should return 120.\n\n    Time\
    \ complexity: O(n)\n    Space complexity: O(1)\n    \"\"\"\n    \n    product\
    \ = 1\n    while nums:\n        product *= nums % 10\n        nums //= 10\n  \
    \  return product % 10\n</cell>\n<cell>\nnums = [4, 6, 2, 7, 1, 3, 5]\nproduct_digits_modulo10(nums)\n\
    </cell>\n<text>\nWrite a function which returns the product of the digits in an\
    \ integer and returns the product modulo 100. \nFor example, given input 5, the\
    \ function ", "            Input: [1, 3, 5]\n            Output: [1, 3, 5]\n \
    \           \"\"\"\n    \"\"\"\n    sum_of_digits = sum(nums)\n    sorted_nums\
    \ = sorted(nums, key=lambda num: sum_of_digits-num)\n    return sorted_nums\n",
  "            Input: nums = [1, 3, 5]\n            Output: [1, 3, 5]\n          \
    \  Explanation: Because the sum of digits is 3 + 5 + 3 = 12, \n            so\
    \ [1, 3, 5] is sorted.\n            \"\"\"\n\n    Args:\n        nums: List[int]\n\
    \n    Returns:\n        List[int]\n    \"\"\"\n    \n    sum_of_digits = sum(nums)\n\
    \    sorted_nums = sorted(nums, key=lambda x:sum_of_digits-x)\n    return sorted_nums\n\
    </cell>\n<cell>", "            Input: nums = [1, 3, 5]\n            Output: [1,\
    \ 3, 5]\n            Explanation: 1 + 3 + 5 = 8\n            Therefore, nums =\
    \ [1, 3, 5]\n            Output: [1, 3, 5]\n            Explanation: nums = [1,\
    \ 3, 5]\n            Therefore, nums = [1, 3, 5]\n            Output: [1, 3, 5]\n\
    \            Explanation: nums = [1, 3, 5]\n            Therefore, nums = [1,\
    \ 3, 5]\n            Output: [1, 3, 5]\n            Explanation: nums = [1, 3,\
    \ 5]\n            Therefore, nums = [1, 3, 5]\n            Output: [1, 3, 5]\n\
    \            Explanation: nums = [1, 3, 5]\n            Therefore, nums = [1,\
    \ 3, 5]\n            Output: [1, 3, 5]\n            Explanation: nums = [1, 3,\
    \ 5]\n            Therefore, nums = [1, 3, 5]\n            Output: [1, 3, 5]\n\
    \            Explanation: nums = [1, 3, 5]\n            Therefore, nums = [1,\
    \ 3, 5]\n            Output: [1, 3, 5]\n            Explanation: nums = [1, 3,\
    \ 5]\n            Therefore, nums = [1, 3, 5]\n            Output: [1, 3, 5]\n\
    \            Explanation: nums = [1, 3, 5]\n            Therefore, nums = [1,\
    \ 3, 5]\n            Output: [1, 3, 5]\n            Explanation: nums = [1, 3,\
    \ 5]\n            Therefore, nums = [1, 3, 5]\n            Output: [1, 3, 5]\n\
    \            Explanation: nums = [1, 3, 5]\n            Therefore, nums = [1,\
    \ 3, 5]\n            Output: [1, 3, 5]\n            Explanation: nums = [1, 3,\
    \ 5]\n            Therefore, nums = [1, 3, 5]\n            Output: [1, 3, 5]\n\
    \            Explanation: nums = [1, 3, 5]\n            Therefore, nums = [1,\
    \ 3, 5]\n            Output: [1, 3, 5]\n            Explanation: nums = [1, 3,\
    \ 5]\n            Therefore, nums = [1, 3, 5]\n            Output: [1, 3, 5]\n\
    \            Explanation: nums = [1, 3, 5]\n            Therefore, nums = [1,\
    \ 3, 5]\n            Output: [1, 3, 5]\n            Explanation: nums = [1, 3,\
    \ 5]\n            Therefore, nums = [1, 3, 5]\n            Output: [1, 3, 5]\n\
    \            Explanation: nums = [1, 3, 5]\n            Therefore, nums = [1,\
    \ 3, 5]\n            Output: [1, 3, 5]\n            Explanation: nums = [1, 3,\
    \ 5]\n            Therefore, nums = [1, 3, 5]\n", "            Input: nums = [1,\
    \ 3, 5]\n            Output: [1, 3, 5]\n            Explanation: Because the sum\
    \ of digits is 3 + 5 + 3 = 12, \n                        the three smallest numbers\
    \ are [1, 3, 5]\n            \"\"\"\n    \"\"\"\n    sum_of_digits = sum(nums)\n\
    \    sorted_nums = sorted(nums, key=lambda x: sum_of_digits-x)\n    return sorted_nums\n",
  "            Input: [1, 3, 5]\n            Output: [1, 3, 5]\n            Explanation:\
    \ 1 + 3 + 5 = 8\n            Therefore, order this list by comparing their sums.\n\
    \            \"\"\"\n    \"\"\"\n    sum_of_digits = sum(nums)\n    sorted_nums\
    \ = sorted(nums, key=lambda num: sum_of_digits-num)\n    return sorted_nums\n",
  "            Input: [10, 20, 30, 40, 50, 60, 70, 80, 90]\n            Output: [10,\
    \ 20, 30, 40, 50, 60, 70, 80, 90]\n            Explanation: \n            10 +\
    \ 20 + 30 + 40 + 50 + 60 + 70 + 80 + 90 == 300\n            10 + 30 + 40 + 50\
    \ + 60 + 70 + 80 + 90 == 300\n            10 + 40 + 50 + 60 + 70 + 80 + 90 ==\
    \ 300\n            10 + 50 + 60 + 70 + 80 + 90 == 300\n            10 + 60 + 70\
    \ + 80 + 90 == 300\n            10 + 70 + 80 + 90 == 300\n            10 + 80\
    \ + 90 == 300\n            10 + 90 == 300\n            Therefore, 10 is the smallest\
    \ number and 90 is the biggest.\n            \"\"\"\n    \"\"\"\n    Time complexity:\
    \ O(nlogn)\n    Space complexity: O(n)\n    \"\"\"\n    sum_of_digits = sum(nums)\n\
    \    sorted_nums = sorted(nums, key=lambda num: sum_of_digits - num)\n    return\
    \ sorted_nums\n", "            Input: [1, 7, 4, 6, 3, 2]\n            Output:\
    \ [1, 6, 4, 7, 3, 2]\n            \"\"\"\n    \"\"\"\n    sum_num = 0\n    sum_num2\
    \ = 0\n    sum_num3 = 0\n    sum_num4 = 0\n    sum_num5 = 0\n    sum_num6 = 0\n\
    \    sum_num7 = 0\n    sum_num8 = 0\n    sum_num9 = 0\n    sum_num10 = 0\n   \
    \ sum_num11 = 0\n    sum_num12 = 0\n    sum_num13 = 0\n    sum_num14 = 0\n   \
    \ sum_num15 = 0\n    sum_num16 = 0\n    sum_num17 = 0\n    sum_num18 = 0\n   \
    \ sum_num19 = 0\n    sum_num20 = 0\n    sum_num21 = 0\n    sum_num22 = 0\n   \
    \ sum_num23 = 0\n    sum_num24 = 0\n    sum_num25 = 0\n    sum_num26 = 0\n   \
    \ sum_num27 = 0\n    sum_num28 = 0\n    sum_num29 = 0\n    sum_num30 = 0\n   \
    \ sum_num31 = 0\n    sum_num32 = 0\n    sum_num33 = 0\n    sum_num34 = 0\n   \
    \ sum_num35 = 0\n    sum_num36 = 0\n    sum_num37 = 0\n    sum_num38 = 0\n   \
    \ sum_num39 = 0\n    sum_num40 = 0\n    sum_num41 = 0\n    sum_num42 = 0\n   \
    \ sum_num43 = 0\n    sum_num44 = 0\n    sum_num45 = 0\n    sum_num46 = 0\n   \
    \ sum_num47 = 0\n    sum_num48 = 0\n    sum_num49 = 0\n    sum_num50 = 0\n   \
    \ sum_num51 = 0\n    sum_num52 = 0\n    sum_num53 = 0\n    sum_num54 = 0\n   \
    \ sum_num55 = 0\n    sum_num56 = 0\n    sum_num57 = 0\n    sum_num58 = 0\n   \
    \ sum_num59 = 0\n    sum_num60 = 0\n    sum_num61 = 0\n    sum_num62 = 0\n   \
    \ sum_num63 = 0\n    sum_num64 = 0\n    sum_num65 = 0\n    sum_num66 = 0\n   \
    \ sum_num67 = 0\n    sum_num68 = 0\n    sum_num69 = 0\n    sum_num70 = 0\n   \
    \ sum_num71 = 0\n    sum_num72 = 0\n    sum_num73 = 0\n    sum_num74 = 0\n   \
    \ sum_num75 = 0\n    sum_num76 = 0\n    sum_num77 = 0\n    sum_num78 = 0\n   \
    \ sum_num79 = 0\n    sum_num80 = 0\n    sum_num81 = 0\n    sum_num", "       \
    \     Input: [10, 20, 30, 40, 50, 60, 70]\n            Output: [10, 20, 30, 40,\
    \ 50, 60, 70]\n            \"\"\"\n    \n    Args:\n        nums (List[int]):\
    \ List of integers\n    \n    Returns:\n        List[int]: Sorted list of integers\n\
    \    \"\"\"\n    \n    # Your code here\n    \n    return nums\n", "         \
    \   Input: [4, 6, 2, 8, 1, 7, 0, 3, 5]\n            Output: [1, 7, 0, 3, 4, 6,\
    \ 8, 2, 5]\n            \"\"\"\n    \"\"\"\n    \n    sum_of_digits = sum(nums)\n\
    \    sorted_nums = sorted(nums, key=lambda x: sum_of_digits-x)\n    return sorted_nums\n",
  "            nums = [1, 3, 5]\n            order_by_points(nums)\n            #\
    \ [1, 3, 5]\n            \"\"\"\n    \n    Args:\n        nums (List[int]): A\
    \ list of integers\n\n    Returns:\n        List[int]: A sorted list of integers\n\
    \    \"\"\"\n    \n    sum_of_digits = sum(nums)\n    sorted_nums = sorted(nums,\
    \ key=lambda num: sum_of_digits-num)\n    return sorted_nums\n", "           \
    \ Input: [10, 20, 30, 40, 50, 60, 70]\n            Output: [10, 20, 30, 40, 50,\
    \ 60, 70]\n            \"\"\"\n    \"\"\"\n    sum_of_digits = sum(nums)\n   \
    \ sorted_nums = sorted(nums, key=lambda x: sum_of_digits-x)\n    return sorted_nums\n",
  "            Input: [10, 11, 12, 13, 14, 15]\n            Output: [15, 14, 12, 13,\
    \ 10, 11]\n            \"\"\"\n    \"\"\"\n    sum_of_digits = 0\n    sorted_nums\
    \ = []\n    for num in nums:\n        sum_of_digits += num\n        sorted_nums.append(num)\n\
    \    sorted_nums = sorted(sorted_nums, key=lambda x: sum_of_digits)\n    return\
    \ sorted_nums\n", "            Input: [1, 3, 5]\n            Output: [1, 3, 5]\n\
    \            Explanation: Because the sum of digits is 3 + 5 = 8,\n          \
    \  so the three smallest numbers are [1, 3, 5]\n            \"\"\"\n    \"\"\"\
    \n    sum_of_digits = sum(nums)\n    sorted_nums = sorted(nums, key=lambda num:\
    \ sum_of_digits - num)\n    return sorted_nums\n", "            Input: [10, 20,\
    \ 30, 40, 50, 60, 70]\n            Output: [10, 20, 30, 40, 50, 60, 70]\n    \
    \        Explanation: 10 + 20 + 30 + 40 + 50 + 60 + 70 = 270.\n            Therefore,\
    \ it is ordered as [10, 20, 30, 40, 50, 60, 70]\n            \"\"\"\n    \"\"\"\
    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    ", "            Input: [10, 20, 30, 40, 50, 60, 70]\n       \
    \     Output: [10, 20, 30, 40, 50, 60, 70]\n            Explanation: 10 + 20 +\
    \ 30 + 40 + 50 + 60 + 70 = 270.\n            Therefore, it is ordered as [10,\
    \ 20, 30, 40, 50, 60, 70].\n            \"\"\"\n    \"\"\"\n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "  \
    \          Input: nums = [1, 5, 3, 6, 2, 3]\n            Output: [1, 3, 6, 5,\
    \ 2, 3]\n            \"\"\"\n    \"\"\"\n    sums = []\n    for num in nums:\n\
    \        sums.append(sum(num))\n    sums = sorted(sums)\n    sums = [num for num,\
    \ sum in zip(nums, sums)]\n    return sums\n", "            Input: [10, 20, 30,\
    \ 40, 50]\n            Output: [10, 20, 30, 40, 50]\n            Explanation:\
    \ 10 + 20 + 30 + 40 + 50 = 150\n            So the output should be: [10, 20,\
    \ 30, 40, 50]\n            \"\"\"\n    \"\"\"\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "            Input: [10, 20, 30, 40, 50, 60, 70]\n     \
    \       Output: [10, 20, 30, 40, 50, 60, 70]\n            Explanation: 10 + 20\
    \ + 30 + 40 + 50 + 60 + 70 = 270.\n            Therefore, it is ordered as [10,\
    \ 20, 30, 40, 50, 60, 70]\n            \"\"\"\n    \"\"\"\n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "  \
    \          Input: [10, 20, 30, 40, 50, 60, 70]\n            Output: [10, 20, 30,\
    \ 40, 50, 60, 70]\n            Explanation: 10 + 20 + 30 + 40 + 50 + 60 + 70 =\
    \ 270.\n            Therefore, it is ordered as [10, 20, 30, 40, 50, 60, 70].\n\
    \            \"\"\"\n    \"\"\"\n    \n    sum_of_digits = 0\n    sorted_nums\
    \ = []\n    \n    for num in nums:\n        sum_of_digits += num\n        sorted_nums.append(num)\n\
    \    \n    sorted_nums = sorted(sorted_nums, key=lambda x:sum_of_digits-x)\n \
    \   \n    return sorted_nums\n", "            Input: [1, 3, 5]\n            Output:\
    \ [1, 3, 5]\n            Explanation: Because the sum of digits is 3 + 5 + 3 =\
    \ 12, \n            so [1, 3, 5] is sorted to [1, 5, 3].\n            \"\"\"\n\
    \    \"\"\"\n    \n    sum_of_digits = sum(nums)\n    sorted_nums = sorted(nums,\
    \ key=lambda x: sum_of_digits - x)\n    return sorted_nums\n", "            Input:\
    \ [10, 20, 30, 40, 50, 60, 70, 80]\n            Output: [10, 20, 30, 40, 50, 60,\
    \ 70, 80]\n            Explanation: 10 + 20 + 30 + 40 + 50 + 60 + 70 + 80 = 150.\n\
    \            Therefore, 10 is before 15 in the original list.\n            \"\"\
    \"\n    \"\"\"\n    sums = []\n    sum = 0\n    for num in nums:\n        sum\
    \ += num\n        sums.append(sum)\n    sums = sorted(sums)\n    sums = [num for\
    \ num in sums if num != 0]\n    return sums\n", "            Input: [1, 7, 11,\
    \ 15]\n            Output: [1, 11, 7, 15]\n            \"\"\"\n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "            Input:\
    \ nums = [1, 3, 6, 4, 2]\n            Output: [1, 4, 2, 6, 3]\n            \"\"\
    \"\n    \n    Args:\n        nums: List[int]\n\n    Returns:\n        List[int]\n\
    \    \"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "            Input: [10, 20, 30, 40, 50]\n \
    \           Output: [10, 30, 50, 40, 20]\n            \"\"\"\n    \"\"\"\n   \
    \ sum = 0\n    sorted_nums = []\n    for num in nums:\n        sum += num\n  \
    \      sorted_nums.append(num)\n    sorted_nums = sorted(sorted_nums, key=lambda\
    \ x:sum-x)\n    return sorted_nums\n", "            nums = [1, 3, 5]\n       \
    \     order_by_points(nums)\n            # => [1, 3, 5]\n            \"\"\"\n\
    \    \n    Time complexity: O(nlogn)\n    Space complexity: O(1)\n    \"\"\"\n\
    \    nums = sorted(nums, key=lambda x: sum(map(int, str(x))))\n    return nums\n",
  "            Input: [1, 3, 5]\n            Output: [1, 3, 5]\n            \"\"\"\
    \n    \n    Time complexity: O(n^2)\n    Space complexity: O(1)\n    \"\"\"\n\
    \    \n    sums = []\n    \n    for i in nums:\n        sums.append(sum(i))\n\
    \    \n    sums = sorted(sums)\n    \n    return sums\n    ", "            Input:\
    \ [1, 3, 5]\n            Output: [1, 5, 3]\n            \"\"\"\n    \"\"\"\n \
    \   sum_num = 0\n    sorted_nums = []\n    for num in nums:\n        sum_num +=\
    \ num\n        sorted_nums.append(num)\n    sorted_nums = sorted(sorted_nums,\
    \ key=lambda num: sum_num - num)\n    return sorted_nums\n", "            Input:\
    \ [10, 20, 30, 40, 50, 60, 70]\n            Output: [10, 20, 30, 40, 50, 60, 70]\n\
    \            \"\"\"\n    \"\"\"\n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "            nums = [1, 3, 5]\n            order_by_points(nums)\n \
    \           # => [1, 3, 5]\n            \"\"\"\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    ", "            Input: [1, 3, 5]\n  \
    \          Output: [1, 3, 5]\n            Explanation: Because the sum of digits\
    \ is 3 + 5 + 3 = 12, \n                        the three smallest numbers are\
    \ [1, 3, 5]\n            \"\"\"\n    \"\"\"\n    \n    sum_of_digits = sum(nums)\n\
    \    sorted_nums = sorted(nums, key=lambda x: sum_of_digits - x)\n    return sorted_nums\n",
  "            Input: [1, 3, 5]\n            Output: [1, 5, 3]\n            \"\"\"\
    \n    \"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "            Input: [1, 3, 5]\n            Output: [1, 3,\
    \ 5]\n            Explanation: Because the sum of digits is 3 + 5 + 3 = 12, \n\
    \                        the three smallest numbers are [1, 3, 5]\n          \
    \  \"\"\"\n    \"\"\"\n    sum_of_digits = sum(nums)\n    sorted_nums = sorted(nums,\
    \ key=lambda x: sum_of_digits-x)\n    return sorted_nums\n", "            Input:\
    \ [1, 3, 5]\n            Output: [1, 3, 5]\n            Explanation: Because the\
    \ sum of digits is 3 + 5 + 3 = 12, \n                        the three smallest\
    \ numbers are [1, 3, 5]\n            \"\"\"\n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "            Input:\
    \ [10, 20, 30, 40, 50, 60, 70]\n            Output: [10, 20, 30, 40, 50, 60, 70]\n\
    \            \"\"\"\n    \"\"\"\n    sum_of_digits = sum(nums)\n    sorted_nums\
    \ = sorted(nums, key=lambda num: sum_of_digits - num)\n    return sorted_nums\n",
  "            Input: [10, 20, 30, 40, 50, 60, 70, 80]\n            Output: [10, 20,\
    \ 30, 40, 50, 60, 70, 80]\n            Explanation: 10 + 20 + 30 + 40 + 50 + 60\
    \ + 70 + 80 = 270.\n            Therefore, it is ordered as [10, 20, 30, 40, 50,\
    \ 60, 70, 80].\n            \"\"\"\n    \"\"\"\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "            Input: [1, 3, 5]\n\
    \            Output: [1, 3, 5]\n            Explanation: Because the sum of digits\
    \ is 3 + 5 + 3 = 12, \n                        the three smallest numbers are\
    \ [1, 3, 5]\n            \"\"\"\n    \"\"\"\n    sum_of_digits = sum(nums)\n \
    \   sorted_nums = sorted(nums, key=lambda x: sum_of_digits-x)\n    return sorted_nums\n",
  "            Input: [10, 20, 30, 40, 50, 60, 70]\n            Output: [10, 20, 30,\
    \ 40, 50, 60, 70]\n            Explanation: \n            10 + 20 = 30\n     \
    \       30 + 40 = 60\n            60 + 50 = 70\n            70 + 60 = 90\n   \
    \         90 + 70 = 100\n            \"\"\"\n    \"\"\"\n    Time complexity:\
    \ O(nlogn)\n    Space complexity: O(n)\n    \"\"\"\n    sum_of_digits = []\n \
    \   sorted_nums = []\n    \n    for num in nums:\n        sum_of_digits.append(num\
    \ % 10)\n        num = num // 10\n    \n    sorted_nums = sorted(nums, key=lambda\
    \ num: sum_of_digits.index(num))\n    \n    return sorted_nums\n", "         \
    \   Input: nums = [1, 3, 6, 4, 1, 2]\n            Output: [1, 4, 6, 3, 2]\n  \
    \          \"\"\"\n    \"\"\"\n    sum_num = 0\n    sorted_nums = []\n    for\
    \ num in nums:\n        sum_num += num\n        sorted_nums.append(num)\n    sorted_nums\
    \ = sorted(sorted_nums, key=lambda x:sum_num-x)\n    return sorted_nums\n", " \
    \           Input: [10, 20, 30, 40, 50, 60, 70]\n            Output: [10, 20,\
    \ 30, 40, 50, 60, 70]\n            Explanation: 10 + 20 + 30 + 40 + 50 + 60 +\
    \ 70 = 270.\n            Therefore, it is ordered as [10, 20, 30, 40, 50, 60,\
    \ 70].\n            \"\"\"\n    \"\"\"\n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    ", "            Input: [1,\
    \ 3, 5]\n            Output: [1, 3, 5]\n            Explanation: Because the sum\
    \ of digits is 3 + 5 + 3 = 12, \n            so [1, 3, 5] is sorted to [1, 5,\
    \ 3].\n            \"\"\"\n    \"\"\"\n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    ", "            Input: nums = [1, 3, 5]\n \
    \           Output: [1, 3, 5]\n            Explanation: Because the sum of digits\
    \ is 3 + 5 + 3 = 12, \n                        the resulting list is [1, 5, 3].\n\
    \            \"\"\"\n    \"\"\"\n    \n    sum_of_digits = sum(nums)\n    sorted_nums\
    \ = sorted(nums, key=lambda x: sum_of_digits-x)\n    return sorted_nums\n", " \
    \           Input: [1, 7, 11, 15]\n            Output: [1, 11, 7, 15]\n      \
    \      \"\"\"\n    \"\"\"\n    sum = 0\n    ans = []\n    for num in nums:\n \
    \       sum += num\n        ans.append(num)\n    ans.sort()\n    return ans\n",
  "            Input: [1, 7, 11, 15]\n            Output: [1, 11, 7, 15]\n       \
    \     \"\"\"\n    \"\"\"\n    \n    sum_of_digits = sum(nums)\n    sorted_nums\
    \ = sorted(nums, key=lambda num: sum_of_digits-num)\n    return sorted_nums\n",
  "            Input: nums = [1, 3, 5]\n            Output: [1, 3, 5]\n          \
    \  Explanation: nums = [1, 3, 5]\n                        nums = [1, 3, 5]\n \
    \                       nums = [1, 3, 5]\n                        nums = [1, 3,\
    \ 5]\n                        nums = [1, 3, 5]\n                        nums =\
    \ [1, 3, 5]\n                        nums = [1, 3, 5]\n                      \
    \  nums = [1, 3, 5]\n                        nums = [1, 3, 5]\n              \
    \          nums = [1, 3, 5]\n                        nums = [1, 3, 5]\n      \
    \                  nums = [1, 3, 5]\n                        nums = [1, 3, 5]\n\
    \                        nums = [1, 3, 5]\n                        nums = [1,\
    \ 3, 5]\n                        nums = [1, 3, 5]\n                        nums\
    \ = [1, 3, 5]\n                        nums = [1, 3, 5]\n                    \
    \    nums = [1, 3, 5]\n                        nums = [1, 3, 5]\n            \
    \            nums = [1, 3, 5]\n                        nums = [1, 3, 5]\n    \
    \                    nums = [1, 3, 5]\n                        nums = [1, 3, 5]\n\
    \                        nums = [1, 3, 5]\n                        nums = [1,\
    \ 3, 5]\n                        nums = [1, 3, 5]\n                        nums\
    \ = [1, 3, 5]\n                        nums = [1, 3, 5]\n                    \
    \    nums = [1, 3, 5]\n                        nums = [1, 3, 5]\n            \
    \            nums = [1, 3, 5]\n                        nums = [1, 3, 5]\n    \
    \                    nums = [1, 3, 5]\n                        nums = [1, 3, 5]\n\
    \                        nums = [1, 3, 5]\n                        nums = [1,\
    \ 3, 5]\n                        nums = [1, 3, 5]\n                        nums\
    \ = [1, 3, 5]\n                        nums = [1, 3, 5]\n                    \
    \    nums = [1, 3, 5]\n                        nums = [1, 3, 5]\n            \
    \            nums = [1, 3, 5]\n                        nums = [1, 3, 5]\n    \
    \                    nums = [1, 3, 5]\n                        nums = [1, 3, 5]\n\
    \                        nums = [1, 3, 5]\n                        nums = [1,\
    \ 3, 5]\n                        nums = [1, 3, 5]\n                        nums\
    \ = [1, 3, 5]\n                        nums = [1, 3, 5]\n                    \
    \    nums = [1, 3, 5]\n                        nums = [1, 3, 5]\n            \
    \            nums = [1, 3, 5]\n                        nums = [1, 3, 5]\n    \
    \                    nums = [1, 3, 5]\n                        nums = [1, 3, 5]\n\
    \                        nums = [1, 3, 5]\n                        nums = [1,\
    \ 3, 5]\n                        nums = [1, 3, 5]\n                        nums\
    \ = [1, 3, 5]\n                        nums = [1, 3, 5]\n                    \
    \    nums = [1, 3, 5]\n                        nums = [1, 3, 5]\n            \
    \            nums = [1, 3, 5]\n                        nums = [1, 3, 5]\n    \
    \                    nums = [1, 3, 5]\n                        nums = [1, 3, 5]\n\
    \                        nums = [1, 3, 5]\n                        nums = [1,\
    \ 3, 5]\n                        num", "            Input: [10, 5, 1, 3, 7, 2,\
    \ 6]\n            Output: [1, 3, 5, 7, 10, 2, 6]\n            \"\"\"\n    \"\"\
    \"\n    sum_of_digits = []\n    for num in nums:\n        sum_of_digits.append(sum(num))\n\
    \    sum_of_digits = sorted(sum_of_digits)\n    sorted_nums = sorted(nums, key=lambda\
    \ x: sum_of_digits.index(x))\n    return sorted_nums\n</code>\n<|/ a dscore=0\
    \ |>\n<| a dscore=0 |>\n<code>", "            Input: [10, 20, 30, 40, 50, 60,\
    \ 70]\n            Output: [10, 20, 30, 40, 50, 60, 70]\n            Explanation:\
    \ 10 + 20 + 30 + 40 + 50 + 60 + 70 = 270.\n            Therefore, it is ordered\
    \ as [10, 20, 30, 40, 50, 60, 70]\n            \"\"\"\n    \"\"\"\n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
  "            Input: [10, 20, 30, 40, 50, 60, 70]\n            Output: [10, 20, 30,\
    \ 40, 50, 60, 70]\n            Explanation: 10 + 20 + 30 + 40 + 50 + 60 + 70 =\
    \ 270.\n            Therefore, it is ordered as [10, 20, 30, 40, 50, 60, 70]\n\
    \            \"\"\"\n    \"\"\"\n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    ", "            Input: [1, 7, 3,\
    \ 6, 4, 2]\n            Output: [1, 2, 3, 4, 6, 7]\n            \"\"\"\n    \"\
    \"\"\n    sums = []\n    sum = 0\n    for num in nums:\n        sum += num\n \
    \       sums.append(sum)\n    sums = sorted(sums)\n    sums.reverse()\n    return\
    \ sums\n", "            Input: [1, 7, 11, 15]\n            Output: [1, 11, 7,\
    \ 15]\n            \"\"\"\n    \"\"\"\n    sums = []\n    for num in nums:\n \
    \       sums.append(sum(num))\n    sums = sorted(sums)\n    return sums\n", " \
    \           Input: [10, 20, 30, 40, 50]\n            Output: [10, 50, 40, 30,\
    \ 20]\n            \"\"\"\n    \"\"\"\n    \n    sums = []\n    for num in nums:\n\
    \        sums.append(sum(num))\n    \n    sorted_sums = sorted(sums)\n    \n \
    \   sorted_nums = []\n    for sum in sorted_sums:\n        sorted_nums.append(nums[sums.index(sum)])\n\
    \    \n    return sorted_nums\n", "            Input: [10, 20, 30, 40, 50, 60,\
    \ 70, 80]\n            Output: [10, 20, 30, 40, 50, 60, 70, 80]\n            Explanation:\
    \ 10 + 20 + 30 + 40 + 50 + 60 + 70 + 80 = 270.\n            Therefore, it is ordered\
    \ as [10, 20, 30, 40, 50, 60, 70, 80].\n            \"\"\"\n    \"\"\"\n    Time\
    \ complexity: O(nlogn)\n    Space complexity: O(n)\n    \"\"\"\n    nums.sort()\n\
    \    sum = 0\n    length = len(nums)\n    i = 0\n    while i < length:\n     \
    \   sum += nums[i]\n        if sum > 9:\n            sum -= 10\n            i\
    \ += 1\n        else:\n            i += 1\n    nums.reverse()\n    return nums\n",
  "            Input: [1, 5, 10, 2, 6, 3, 7, 4]\n            Output: [1, 5, 6, 3,\
    \ 7, 10, 2, 4]\n            \"\"\"\n    \"\"\"\n    sum_of_digits = sum(nums)\n\
    \    sorted_nums = sorted(nums, key=lambda x: (sum_of_digits - x))\n    return\
    \ sorted_nums\n", "            Input: [1, 3, 5]\n            Output: [1, 3, 5]\n\
    \            Explanation: \n                1 + 3 = 3\n                1 + 5 =\
    \ 5\n                3 + 5 = 8\n            \n            Input: [1, 3, 5]\n \
    \           Output: [1, 3, 5]\n            Explanation: \n                1 +\
    \ 3 = 3\n                1 + 5 = 5\n                3 + 5 = 8\n            \n\
    \            Input: [1, 3, 5]\n            Output: [1, 3, 5]\n            Explanation:\
    \ \n                1 + 3 = 3\n                1 + 5 = 5\n                3 +\
    \ 5 = 8\n            \n            Input: [1, 3, 5]\n            Output: [1, 3,\
    \ 5]\n            Explanation: \n                1 + 3 = 3\n                1\
    \ + 5 = 5\n                3 + 5 = 8\n            \n            Input: [1, 3,\
    \ 5]\n            Output: [1, 3, 5]\n            Explanation: \n             \
    \   1 + 3 = 3\n                1 + 5 = 5\n                3 + 5 = 8\n        \
    \    \n            Input: [1, 3, 5]\n            Output: [1, 3, 5]\n         \
    \   Explanation: \n                1 + 3 = 3\n                1 + 5 = 5\n    \
    \            3 + 5 = 8\n            \n            Input: [1, 3, 5]\n         \
    \   Output: [1, 3, 5]\n            Explanation: \n                1 + 3 = 3\n\
    \                1 + 5 = 5\n                3 + 5 = 8\n            \n        \
    \    Input: [1, 3, 5]\n            Output: [1, 3, 5]\n            Explanation:\
    \ \n                1 + 3 = 3\n                1 + 5 = 5\n                3 +\
    \ 5 = 8\n            \n            Input: [1, 3, 5]\n            Output: [1, 3,\
    \ 5]\n            Explanation: \n                1 + 3 = 3\n                1\
    \ + 5 = 5\n                3 + 5 = 8\n            \n            Input: [1, 3,\
    \ 5]\n            Output: [1, 3, 5]\n            Explanation: \n             \
    \   1 + 3 = 3\n                1 + 5 = 5\n                3 + 5 = 8\n        \
    \    \n            Input: [1, 3, 5]\n            Output: [1, 3, 5]\n         \
    \   Explanation: \n                1 + 3 = 3\n                1 + 5 = 5\n    \
    \            3 + 5 = 8\n            \n            Input: [1, 3, 5]\n         \
    \   Output: [1, 3, 5]\n            Explanation: \n                1 + 3 = 3\n\
    \                1 + 5 = 5\n                3 + 5 = 8\n            \n        \
    \    Input: [1, 3, 5]\n            Output: [1, 3, 5]\n            Explanation:\
    \ \n                1 + 3 = 3\n                1 + 5 = 5\n                3 +\
    \ 5 = 8\n            \n            Input: [1, 3, 5]\n            Output: [1, 3,\
    \ 5]\n            Explanation: \n                1 + 3 = 3\n                1\
    \ + 5 = 5\n                ", "            Input: [10, 20, 30, 40, 50, 60, 70]\n\
    \            Output: [10, 20, 30, 40, 50, 60, 70]\n            \"\"\"\n    \n\
    \    Args:\n        nums: List[int]\n\n    Returns:\n        List[int]\n    \"\
    \"\"\n    \n    sum_of_digits = sum(nums)\n    sorted_nums = sorted(nums, key=lambda\
    \ x:sum_of_digits-x)\n    return sorted_nums\n", "            Input: [10, 20,\
    \ 30, 40, 50]\n            Output: [10, 20, 30, 40, 50]\n            Explanation:\
    \ 10 + 20 + 30 + 40 + 50 = 200\n            Therefore, 20 is before 30 in the\
    \ original list.\n            \"\"\"\n    \"\"\"\n    \n    sum_of_digits = []\n\
    \    for num in nums:\n        sum_of_digits.append(sum(num))\n    \n    sorted_nums\
    \ = sorted(nums, key=lambda x:sum_of_digits.index(x))\n    \n    return sorted_nums\n",
  "            Input: nums = [1, 3, 6, 4, 1, 2]\n            Output: [1, 4, 6, 3,\
    \ 2]\n            \"\"\"\n    \n    Args:\n        nums (List[int]): A list of\
    \ integers\n\n    Returns:\n        List[int]: A list of integers\n    \"\"\"\n\
    \    \n    # Your code here\n    \n    return sorted(nums, key=lambda x: sum(map(int,\
    \ str(x))))\n</cell>\n<cell>", "            Input: [10, 11, 12, 13, 14, 15, 16,\
    \ 17, 18, 19]\n            Output: [10, 11, 12, 13, 14, 15, 16, 17, 18, 19]\n\
    \            Explanation: \n            10 + 11 + 12 + 13 + 14 + 15 + 16 + 17\
    \ + 18 + 19 = 44\n            Therefore, 10 comes before 11, because 44 > 19.\n\
    \            \"\"\"\n    \"\"\"\n    \n    sum_of_digits = sum(nums)\n    sorted_nums\
    \ = sorted(nums, key=lambda x: (sum_of_digits - x))\n    return sorted_nums\n",
  "            Input: [1, 3, 5]\n            Output: [1, 3, 5]\n            Explanation:\
    \ Because the sum of digits is 3 + 5 = 8,\n            so the three smallest numbers\
    \ are [1, 3, 5]\n            \"\"\"\n    \"\"\"\n    sum_of_digits = sum(nums)\n\
    \    sorted_nums = sorted(nums)\n    sorted_nums.reverse()\n    sorted_nums =\
    \ [num for num in sorted_nums if sum_of_digits - num == 0]\n    return sorted_nums\n",
  "            Input: [10, 11, 12, 13, 14, 15]\n            Output: [15, 14, 12, 13,\
    \ 11, 10]\n            \"\"\"\n    \"\"\"\n    sums = []\n    sum = 0\n    for\
    \ num in nums:\n        sum += num\n        sums.append(sum)\n    sums = sorted(sums)\n\
    \    sums.reverse()\n    return sums\n", "            Input: [10, 5, 3, 8, 2,\
    \ 7, 1]\n            Output: [1, 2, 3, 5, 7, 8, 10]\n            \"\"\"\n    \"\
    \"\"\n    sum_of_digits = sum(nums)\n    sorted_nums = sorted(nums, key=lambda\
    \ x: sum_of_digits - x)\n    return sorted_nums\n", "            Input: [4, 6,\
    \ 1, 3, 2]\n            Output: [1, 2, 3, 6, 4]\n            \"\"\"\n    \"\"\"\
    \n    sum_of_digits = sum(nums)\n    sorted_nums = sorted(nums, key=lambda num:\
    \ sum_of_digits-num)\n    return sorted_nums\n", "            Input: [10, 20,\
    \ 30, 40, 50, 60, 70]\n            Output: [10, 20, 30, 40, 50, 60, 70]\n    \
    \        \"\"\"\n    \"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "            Input: [10, 5, 7, 2, 8]\n            Output: [2, 5, 7, 8, 10]\n   \
    \         \"\"\"\n    \"\"\"\n    sum_of_digits = sum(nums)\n    sorted_nums =\
    \ sorted(nums, key=lambda x: sum_of_digits - x)\n    return sorted_nums\n", " \
    \           Input: [10, 20, 30, 40, 50, 60, 70]\n            Output: [10, 20,\
    \ 30, 40, 50, 60, 70]\n            \"\"\"\n    \n    Args:\n        nums (List[int]):\
    \ A list of integers\n\n    Returns:\n        List[int]: Sorted list of integers\n\
    \    \"\"\"\n    \n    sum_of_digits = sum(nums)\n    sorted_nums = sorted(nums,\
    \ key=lambda x: sum_of_digits - x)\n    return sorted_nums\n", "            nums\
    \ = [1, 3, 5]\n            order_by_points(nums)\n            # [1, 3, 5]\n  \
    \          \"\"\"\n    \n    Args:\n        nums (List[int]): A list of integers\n\
    \n    Returns:\n        List[int]: Sorted list of integers\n    \"\"\"\n    \n\
    \    sum_of_digits = sum(nums)\n    \n    sorted_nums = sorted(nums, key=lambda\
    \ x: sum_of_digits - x)\n    \n    return sorted_nums\n", "            Input:\
    \ [10, 5, 3, 7, 8]\n            Output: [3, 7, 8, 10, 5]\n            \"\"\"\n\
    \    \"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "            Input: [10, 20, 30, 40, 50, 60, 70, 80]\n            Output: [10, 20,\
    \ 30, 40, 50, 60, 70, 80]\n            Explanation: 10 + 20 + 30 + 40 + 50 + 60\
    \ + 70 + 80 = 270.\n            Therefore, it is ordered as [10, 20, 30, 40, 50,\
    \ 60, 70, 80].\n            \"\"\"\n    \"\"\"\n    \n    sum_of_digits = sum(nums)\n\
    \    sorted_nums = sorted(nums, key=lambda x: sum_of_digits - x)\n    return sorted_nums\n",
  "            Input: [1, 3, 5]\n            Output: [1, 3, 5]\n            Explanation:\
    \ 1 + 3 + 5 = 8\n            Therefore, order this list by comparing their sums.\n\
    \            \"\"\"\n    \"\"\"\n    sums = []\n    for num in nums:\n       \
    \ sums.append(sum(num))\n    sums = sorted(sums)\n    return nums[sums.index(max(sums))]\n",
  "            Input: nums = [1, 3, 5]\n            Output: [1, 3, 5]\n          \
    \  Explanation: Because the sum of digits is 3 + 5 + 3 = 12, \n            so\
    \ [1, 3, 5] is sorted to [1, 5, 3].\n            \"\"\"\n    \"\"\"\n    sum_of_digits\
    \ = sum(nums)\n    sorted_nums = sorted(nums, key=lambda x: sum_of_digits - x)\n\
    \    return sorted_nums\n", "            Input: nums = [1, 5, 3, 6, 4]\n     \
    \       Output: [1, 4, 6, 5, 3]\n            \"\"\"\n    \"\"\"\n    sum_of_digits\
    \ = sum(nums)\n    sorted_nums = sorted(nums, key=lambda x: sum_of_digits-x)\n\
    \    return sorted_nums\n", "            nums = [1, 7, 10, 3, 8, 4, 6, 9, 2, 5]\n\
    \            order_by_points(nums)\n            # [1, 3, 5, 6, 7, 8, 2, 4, 9,\
    \ 10]\n            \"\"\"\n    \"\"\"\n    sum_of_digits = []\n    for num in\
    \ nums:\n        sum_of_digits.append(sum(num))\n    sorted_nums = sorted(nums,\
    \ key=lambda x: sum_of_digits.index(x))\n    return sorted_nums\n", "        \
    \    Input: [10, 9, 11, 8, 6, 4, 2]\n            Output: [2, 4, 6, 8, 10, 9, 11]\n\
    \            \"\"\"\n    Args:\n        nums (List[int]): A list of integers\n\
    \n    Returns:\n        List[int]: A list of integers sorted from smallest to\
    \ largest\n    \"\"\"\n    sums = []\n    for num in nums:\n        sums.append(sum(num))\n\
    \    sums = sorted(sums)\n    sorted_nums = [num for _, num in sorted(zip(sums,\
    \ nums))]\n    return sorted_nums\n", "            Input: nums = [1, 3, 5]\n \
    \           Output: [1, 3, 5]\n            Explanation: Because the sum of digits\
    \ is 3 + 5 + 3 = 12, \n            so [1, 3, 5] is sorted to [1, 5, 3].\n    \
    \        \"\"\"\n    \"\"\"\n    sum_of_digits = sum(nums)\n    sorted_nums =\
    \ sorted(nums, key=lambda num: sum_of_digits - num)\n    return sorted_nums\n",
  "            Input: [10, 5, 3, 7, 2, 8]\n            Output: [2, 5, 7, 8, 10, 3]\n\
    \            \"\"\"\n    \n    Args:\n        nums (List[int]): A list of integers\n\
    \    Returns:\n        List[int]: A list of integers\n    \"\"\"\n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "            Input:\
    \ [10, 20, 30, 40, 50, 60, 70, 80]\n            Output: [10, 20, 30, 40, 50, 60,\
    \ 70, 80]\n            \"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "            Input: [10, 11, 12, 13, 14, 15]\n            Output: [15, 14, 12, 13,\
    \ 11, 10]\n            \"\"\"\n    Args:\n        nums (List[int]): A list of\
    \ integers\n\n    Returns:\n        List[int]: Sorted list of integers\n    \"\
    \"\"\n    sum = 0\n    sorted_nums = []\n    for num in nums:\n        sum +=\
    \ num\n        sorted_nums.append(num)\n    sorted_nums.sort()\n    return sorted_nums\n",
  "            Input: [1, 3, 5]\n            Output: [1, 3, 5]\n            Explanation:\
    \ Because the sum of digits is 3, the three items\n            are [1, 3, 5],\
    \ [1, 5], [1, 5]\n            \"\"\"\n    \"\"\"\n    sum_of_digits = 0\n    sorted_nums\
    \ = []\n    for num in nums:\n        sum_of_digits += num\n        sorted_nums.append(num)\n\
    \    sorted_nums.sort()\n    return sorted_nums\n", "            Input: [10, 20,\
    \ 30, 40, 50, 60, 70, 80]\n            Output: [10, 20, 30, 40, 50, 60, 70, 80]\n\
    \            Explanation: \n            10 + 20 + 30 + 40 + 50 + 60 + 70 + 80\
    \ = 280.\n            Therefore, it is ordered as [10, 20, 30, 40, 50, 60, 70,\
    \ 80].\n            \"\"\"\n    \n    sum_of_digits = sum(nums)\n    sorted_nums\
    \ = sorted(nums, key=lambda x:sum_of_digits-x)\n    return sorted_nums\n", " \
    \           Input: [10, 20, 30, 40, 50, 60, 70]\n            Output: [10, 20,\
    \ 30, 40, 50, 60, 70]\n            Explanation: 10 + 20 + 30 + 40 + 50 + 60 +\
    \ 70 = 270.\n            Therefore, it is ordered as [10, 20, 30, 40, 50, 60,\
    \ 70].\n            \"\"\"\n    \"\"\"\n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    ", "            Input: [10,\
    \ 20, 30, 40, 50, 60, 70]\n            Output: [10, 20, 30, 40, 50, 60, 70]\n\
    \            \"\"\"\n    \"\"\"\n    sums = []\n    for num in nums:\n       \
    \ sums.append(sum(num))\n    sums.sort()\n    return sums\n", "            Input:\
    \ [1, 3, 5]\n            Output: [1, 3, 5]\n            Explanation: \n      \
    \      1. The sum of digits is 3 + 5 = 8\n            2. The index of 1 should\
    \ be 0, the index of 3 should be 1, and index of 5 should be 2.\n            3.\
    \ The index of 2 should be 0, the index of 4 should be 1, and index of 6 should\
    \ be 2.\n            \"\"\"\n    \"\"\"\n    \n    sum_of_digits = sum(nums)\n\
    \    sorted_nums = sorted(nums, key=lambda x: sum_of_digits-x)\n    return sorted_nums\n",
  "            Input: [10, 20, 30, 40, 50]\n            Output: [10, 50, 40, 30, 20]\n\
    \            \"\"\"\n    \"\"\"\n    sum_of_digits = 0\n    sorted_nums = []\n\
    \    for num in nums:\n        sum_of_digits += num\n        sorted_nums.append(num)\n\
    \    sorted_nums.sort()\n    return sorted_nums\n", "            Input: [1, 3,\
    \ 5]\n            Output: [1, 3, 5]\n            Explanation: 1 + 3 + 5 = 8\n\
    \                        1 is the smallest digit.\n                        3 is\
    \ the second smallest digit.\n                        5 is the largest digit.\n\
    \            \"\"\"\n    \"\"\"\n    sum_of_digits = sum(nums)\n    sorted_nums\
    \ = sorted(nums, key=lambda x: sum_of_digits - x)\n    return sorted_nums\n",
  "            nums = [1, 3, 5]\n            order_by_points(nums)\n            #\
    \ [1, 3, 5]\n            \"\"\"\n    \n    Args:\n        nums: List[int]\n\n\
    \    Returns:\n        List[int]\n    \"\"\"\n    \n    sum_num = 0\n    sorted_nums\
    \ = []\n    \n    for num in nums:\n        sum_num += num\n        sorted_nums.append(num)\n\
    \    \n    sorted_nums = sorted(sorted_nums, key=lambda x: sum_num - x)\n    \n\
    \    return sorted_nums\n", "            Input: [10, 20, 30, 40, 50, 60, 70]\n\
    \            Output: [10, 20, 30, 40, 50, 60, 70]\n            \"\"\"\n    \"\"\
    \"\n    sums = []\n    for num in nums:\n        sums.append(sum(num))\n    sums\
    \ = sorted(sums)\n    sums.reverse()\n    return sums\n", "            Input:\
    \ [4, 6, 1, 9, 7, 2, 5]\n            Output: [1, 2, 4, 6, 7, 5, 9]\n         \
    \   \"\"\"\n    \"\"\"\n    sum_num = 0\n    sorted_nums = []\n    for num in\
    \ nums:\n        sum_num += num\n        sorted_nums.append(num)\n    sorted_nums\
    \ = sorted(sorted_nums, key=lambda x: sum_num - x)\n    return sorted_nums\n",
  "            Input: [10, 20, 30, 40, 50, 60, 70]\n            Output: [10, 20, 30,\
    \ 40, 50, 60, 70]\n            \"\"\"\n    \n    Args:\n        nums: List[int]\n\
    \n    Returns:\n        List[int]\n    \"\"\"\n    \n    sum_of_digits = sum(nums)\n\
    \    sorted_nums = sorted(nums, key=lambda x: sum_of_digits - x)\n    return sorted_nums\n",
  "            Input: nums = [1, 3, 5]\n            Output: [1, 3, 5]\n          \
    \  Explanation: Because the sum of digits is 3 + 5 + 3 = 12, \n              \
    \          the three smallest numbers are [1, 3, 5]\n            \"\"\"\n    \"\
    \"\"\n    sum_of_digits = sum(nums)\n    sorted_nums = sorted(nums, key=lambda\
    \ x: sum_of_digits - x)\n    return sorted_nums\n", "            Input: [1, 7,\
    \ 11, 15]\n            Output: [1, 11, 7, 15]\n            \"\"\"\n    \"\"\"\n\
    \    sum_of_digits = sum(nums)\n    sorted_nums = sorted(nums, key=lambda x: sum_of_digits-x)\n\
    \    return sorted_nums\n", "            Input: [1, 3, 5]\n            Output:\
    \ [1, 3, 5]\n            Explanation: \n                1 + 5 = 3\n          \
    \      3 + 5 = 6\n                5 + 1 = 6\n            \"\"\"\n    \"\"\"\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "            Input: [10, 20, 30, 40, 50, 60, 70]\n           \
    \ Output: [10, 20, 30, 40, 50, 60, 70]\n            \"\"\"\n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "            Input: [10, 20, 30, 40, 50,\
    \ 60, 70]\n            Output: [10, 20, 30, 40, 50, 60, 70]\n            Explanation:\
    \ 10 + 20 + 30 + 40 + 50 + 60 + 70 = 270.\n            Therefore, it is ordered\
    \ as [10, 20, 30, 40, 50, 60, 70].\n            \"\"\"\n    \"\"\"\n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    ", "            Input: [10, 20, 30, 40, 50, 60, 70, 80]\n            Output:\
    \ [10, 20, 30, 40, 50, 60, 70, 80]\n            Explanation: 10 + 20 + 30 + 40\
    \ + 50 + 60 + 70 + 80 = 270.\n            Therefore, it is ordered as [10, 20,\
    \ 30, 40, 50, 60, 70, 80].\n            \"\"\"\n    \"\"\"\n    \n    sum_of_digits\
    \ = 0\n    \n    for num in nums:\n        sum_of_digits += num\n    \n    sorted_nums\
    \ = sorted(nums, key=lambda num: sum_of_digits - num)\n    \n    return sorted_nums\n\
    \    \n    \n    ", "            Input: [10, 20, 30, 40, 50, 60, 70]\n       \
    \     Output: [10, 20, 30, 40, 50, 60, 70]\n            \"\"\"\n    \"\"\"\n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "            Input: [1, 3,\
    \ 5]\n            Output: [1, 3, 5]\n            Explanation: Because the sum\
    \ of digits is 3 + 5 + 3 = 12, \n            so the three smallest numbers are\
    \ [1, 3, 5]\n            \"\"\"\n    \"\"\"\n    sum_of_digits = sum(nums)\n \
    \   sorted_nums = sorted(nums, key=lambda x: sum_of_digits - x)\n    return sorted_nums\n",
  "            Input: nums = [1, 3, 5]\n            Output: [1, 3, 5]\n          \
    \  Explanation: \n                [1, 3, 5] -> [1, 3, 5]\n                [1,\
    \ 3, 5] -> [1, 3, 5]\n                [1, 3, 5] -> [1, 3, 5]\n            \"\"\
    \"\n    \"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "            Input:\
    \ [10, 20, 30, 40, 50, 60, 70]\n            Output: [10, 20, 30, 40, 50, 60, 70]\n\
    \            \"\"\"\n    \"\"\"\n    sum_of_digits = sum(nums)\n    sorted_nums\
    \ = sorted(nums, key=lambda num: sum_of_digits-num)\n    return sorted_nums\n",
  "            Input: nums = [1, 3, 5]\n            Output: [1, 3, 5]\n          \
    \  Explanation: Because the sum of digits is 3 + 5 + 3 = 12, \n              \
    \          the resulting list is [1, 5, 3].\n            \"\"\"\n    \"\"\"\n\
    \    sum_of_digits = sum(nums)\n    sorted_nums = sorted(nums, key=lambda x: sum_of_digits\
    \ - x)\n    return sorted_nums\n", "            Input: [10, 9, 11, 7, 5, 3, 2]\n\
    \            Output: [7, 5, 9, 10, 11, 3, 2]\n            \"\"\"\n    \"\"\"\n\
    \    sum_dig = sum(nums)\n    sorted_nums = sorted(nums, key=lambda x: (sum_dig\
    \ - x))\n    return sorted_nums\n", "            Input: [10, 20, 30, 40, 50, 60,\
    \ 70]\n            Output: [10, 20, 30, 40, 50, 60, 70]\n            \"\"\"\n\
    \            Input: [10, 20, 30, 40, 50, 60, 70, 80, 90]\n            Output:\
    \ [10, 20, 30, 40, 50, 60, 70, 80, 90]\n    \"\"\"\n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "            Input: [10, 20, 30, 40, 50, 60, 70, 80]\n \
    \           Output: [10, 20, 30, 40, 50, 60, 70, 80]\n            \"\"\"\n   \
    \ \"\"\"\n    sum_of_digits = 0\n    sorted_nums = []\n    for num in nums:\n\
    \        sum_of_digits += num\n        sorted_nums.append(num)\n    sorted_nums\
    \ = sorted(sorted_nums)\n    sorted_nums.reverse()\n    return sorted_nums\n",
  "            Input: [10, 11, 12, 13, 14, 15]\n            Output: [15, 14, 12, 13,\
    \ 11, 10]\n            \"\"\"\n    \n    Time complexity: O(n)\n    Space complexity:\
    \ O(1)\n    \"\"\"\n    \n    sum_of_digits = [sum(num) for num in nums]\n   \
    \ sorted_nums = sorted(nums, key=lambda x: sum_of_digits.index(x))\n    return\
    \ sorted_nums\n", "            Input: [10, 20, 30, 40, 50, 60, 70]\n         \
    \   Output: [10, 20, 30, 40, 50, 60, 70]\n            \"\"\"\n            Input:\
    \ [10, 20, 30, 40, 50, 60, 70, 80, 90]\n            Output: [10, 20, 30, 40, 50,\
    \ 60, 70, 80, 90]\n    \"\"\"\n    sum_of_digits = []\n    sum_of_digits_index\
    \ = []\n    sum_of_digits_index.append(0)\n    sum_of_digits.append(0)\n    sum_of_digits.append(0)\n\
    \    sum_of_digits.append(0)\n    sum_of_digits.append(0)\n    sum_of_digits.append(0)\n\
    \    sum_of_digits.append(0)\n    sum_of_digits.append(0)\n    sum_of_digits.append(0)\n\
    \    sum_of_digits.append(0)\n    sum_of_digits.append(0)\n    sum_of_digits.append(0)\n\
    \    sum_of_digits.append(0)\n    sum_of_digits.append(0)\n    sum_of_digits.append(0)\n\
    \    sum_of_digits.append(0)\n    sum_of_digits.append(0)\n    sum_of_digits.append(0)\n\
    \    sum_of_digits.append(0)\n    sum_of_digits.append(0)\n    sum_of_digits.append(0)\n\
    \    sum_of_digits.append(0)\n    sum_of_digits.append(0)\n    sum_of_digits.append(0)\n\
    \    sum_of_digits.append(0)\n    sum_of_digits.append(0)\n    sum_of_digits.append(0)\n\
    \    sum_of_digits.append(0)\n    sum_of_digits.append(0)\n    sum_of_digits.append(0)\n\
    \    sum_of_digits.append(0)\n    sum_of_digits.append(0)\n    sum_of_digits.append(0)\n\
    \    sum_of_digits.append(0)\n    sum_of_digits.append(0)\n    sum_of_digits.append(0)\n\
    \    sum_of_digits.append(0)\n    sum_of_digits.append(0)\n    sum_of_digits.append(0)\n\
    \    sum_of_digits.append(0)\n    sum_of_digits.append(0)\n    sum_of_digits.append(0)\n\
    \    sum_of_digits.append(0)\n    sum_of_digits.append(0)\n    sum_of_digits.append(0)\n\
    \    sum_of_digits.append(0)\n    sum_of_digits.append(0)\n    sum_of_digits.append(0)\n\
    \    sum_of_digits.append(0)\n    sum_of_digits.append(0)\n    sum_of_digits.append(0)\n\
    \    sum_of_digits.append(0)\n    sum_of_digits.append(0)\n    sum_of_digits.append(0)\n\
    \    sum_of_digits.append(0)\n    sum_of_digits.append(0)\n    sum_of_digits.append(0)\n\
    \    sum_of_digits.append(0)\n    sum_of_digits.append(0)\n    sum_of_digits.append(0)\n\
    \    sum_of_digits.append(0)\n    sum_of_digits.append(0)\n    sum_of_digits.append(0)",
  "            Input: [1, 5, 3, 6, 2, 4]\n            Output: [1, 6, 4, 2, 5, 3]\n\
    \            \"\"\"\n    \"\"\"\n    sum_of_digits = 0\n    sorted_nums = []\n\
    \    for num in nums:\n        sum_of_digits += num\n        sorted_nums.append(num)\n\
    \    sorted_nums = sorted(sorted_nums, key=lambda x: sum_of_digits + x)\n    return\
    \ sorted_nums\n", "            Input: nums = [1, 3, 5]\n            Output: [1,\
    \ 3, 5]\n            Explanation: Because the sum of digits is 3 + 5 + 3 = 12,\
    \ \n                        the resulting list is [1, 3, 5]\n            \"\"\"\
    \n    \"\"\"\n    \n    sum_of_digits = sum(nums)\n    sorted_nums = sorted(nums,\
    \ key=lambda x:sum_of_digits-x)\n    return sorted_nums\n", "            Input:\
    \ [10, 20, 30, 40, 50, 60, 70, 80]\n            Output: [10, 20, 30, 40, 50, 60,\
    \ 70, 80]\n            Explanation: 10 + 20 + 30 + 40 + 50 + 60 + 70 + 80 = 270.\n\
    \            Therefore, it is ordered as [10, 20, 30, 40, 50, 60, 70, 80].\n \
    \           \"\"\"\n    \"\"\"\n    Time complexity: O(nlogn)\n    Space complexity:\
    \ O(n)\n    \"\"\"\n    nums = sorted(nums)\n    sums = [sum(nums[:i]) for i in\
    \ range(len(nums))]\n    sorted_nums = [nums[i] for i in sums.index(sums)]\n \
    \   return sorted_nums\n", "            Input: [10, 5, 1, 3, 7, 2, 6]\n      \
    \      Output: [1, 3, 5, 7, 10, 2, 6]\n            \"\"\"\n    \"\"\"\n    sum_of_digits\
    \ = sum(nums)\n    sorted_nums = sorted(nums, key=lambda num: sum_of_digits-num)\n\
    \    return sorted_nums\n", "            nums = [1, 3, 5]\n            order_by_points(nums)\n\
    \            # [1, 3, 5]\n            \"\"\"\n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "            Input: [1, 3, 5]\n\
    \            Output: [1, 3, 5]\n            Explanation: Because the sum of digits\
    \ is 3 + 5 + 3 = 12, \n            so [1, 3, 5] is sorted to [1, 5, 3].\n    \
    \        \"\"\"\n    \"\"\"\n    \n    sums = []\n    for i in nums:\n       \
    \ sums.append(sum(i))\n    \n    sorted_nums = sorted(nums, key=lambda x: sums.index(x))\n\
    \    return sorted_nums\n", "            Input: [1, 7, 11, 15]\n            Output:\
    \ [1, 11, 7, 15]\n            \"\"\"\n    \"\"\"\n    sum_of_digits = []\n   \
    \ for num in nums:\n        sum_of_digits.append(sum(num))\n    sum_of_digits\
    \ = sorted(sum_of_digits)\n    sorted_nums = []\n    for num in nums:\n      \
    \  sorted_nums.append(nums[sum_of_digits.index(sum(num))])\n    return sorted_nums\n",
  "            Input: [1, 3, 5]\n            Output: [1, 3, 5]\n            Explanation:\
    \ Because the sum of digits is 3 + 5 + 3 = 12, \n            so [1, 3, 5] is sorted\
    \ to [1, 5, 3].\n            \"\"\"\n    \"\"\"\n    \n    sums = []\n    for\
    \ num in nums:\n        sums.append(sum(num))\n    \n    sorted_nums = sorted(nums,\
    \ key=sums.__getitem__)\n    \n    return sorted_nums\n", "            Input:\
    \ [1, 3, 5]\n            Output: [1, 3, 5]\n            Explanation: 1 + 3 + 5\
    \ = 8\n                        8 > 5\n            Input: [1, 3, 5]\n         \
    \   Output: [1, 5, 3]\n            Explanation: 1 + 5 + 3 = 8\n              \
    \          8 > 5\n            Input: [1, 3, 5]\n            Output: [3, 1, 5]\n\
    \            Explanation: 3 + 5 > 8\n                        8 > 5\n         \
    \   Input: [1, 3, 5]\n            Output: [3, 5, 1]\n            Explanation:\
    \ 5 + 1 > 8\n                        8 > 5\n            \"\"\"\n    \"\"\"\n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    ", "            Input: nums = [1, 3, 5]\n            Output: [1, 3,\
    \ 5]\n            Explanation: Because the sum of digits is 3 + 5 + 3 = 12, \n\
    \                        the resulting list is [1, 3, 5]\n            \"\"\"\n\
    \    \"\"\"\n    sums = []\n    sum = 0\n    for num in nums:\n        sum +=\
    \ num\n        sums.append(sum)\n    sums = sorted(sums)\n    return sums\n",
  "            Input: [1, 7, 11, 15]\n            Output: [1, 11, 7, 15]\n       \
    \     \"\"\"\n    \"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "            Input: [10, 20, 30, 40, 50, 60, 70]\n     \
    \       Output: [10, 20, 30, 40, 50, 60, 70]\n            \"\"\"\n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "            Input: [10, 20, 30,\
    \ 40, 50, 60, 70]\n            Output: [10, 20, 30, 40, 50, 60, 70]\n        \
    \    Explanation: \n                10 + 20 + 30 + 40 + 50 + 60 + 70 = 150 = Largest\
    \ sum\n                10 + 30 + 50 + 70 + 40 + 60 + 20 = 250 = Second largest\n\
    \                10 + 20 + 30 + 40 + 50 + 60 = 70 = Third largest\n          \
    \      10 + 20 + 30 + 40 + 50 = 50 = Smallest sum\n            \"\"\"\n    \"\"\
    \"\n    Time complexity: O(nlogn)\n    Space complexity: O(n)\n    \"\"\"\n  \
    \  sum_of_digits = sum(nums)\n    sorted_nums = sorted(nums, key=lambda x: sum_of_digits-x)\n\
    \    return sorted_nums\n", "            Input: [10, 11, 12, 13, 14, 15]\n   \
    \         Output: [10, 15, 14, 12, 13, 11]\n            \"\"\"\n    \n    Args:\n\
    \        nums (List[int]): A list of integers\n\n    Returns:\n        List[int]:\
    \ Sorted list of integers\n    \"\"\"\n    \n    sum_of_digits = sum(nums)\n \
    \   sorted_nums = sorted(nums, key=lambda x:sum_of_digits-x)\n    return sorted_nums\n\
    </cell>\n<cell>", "            Input: [10, 20, 30, 40, 50, 60, 70]\n         \
    \   Output: [10, 20, 30, 40, 50, 60, 70]\n            \"\"\"\n    \"\"\"\n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "            Input: [1, 3,\
    \ 5]\n            Output: [1, 3, 5]\n            Explanation: Because the sum\
    \ of digits is 3 + 5 + 3 = 12, \n                        the three smallest numbers\
    \ are [1, 3, 5]\n            \"\"\"\n    \"\"\"\n    sum_of_digits = sum(nums)\n\
    \    sorted_nums = sorted(nums, key=lambda x: sum_of_digits - x)\n    return sorted_nums\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
