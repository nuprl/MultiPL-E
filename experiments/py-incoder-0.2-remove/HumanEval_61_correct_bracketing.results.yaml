name: HumanEval_61_correct_bracketing
language: py
results:
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets =\
    \ brackets.strip()\n    opening_brackets = [x for x in brackets if x == \"(\"\
    ]\n    closing_brackets = [x for x in brackets if x == \")\"]\n    return len(opening_brackets)\
    \ == len(closing_brackets)\n\n\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd4fkmz84.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd4fkmz84.py\"\
    , line 27, in test_check\n    check(correct_bracketing)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd4fkmz84.py\"\
    , line 18, in check\n    assert candidate(')(()') == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for char in brackets:\n        if char == '(':\n            stack.append(char)\n\
    \        elif char == ')':\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == \"(\":\n            stack.append(c)\n\
    \        elif c == \")\":\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets =\
    \ brackets.replace(\"(\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"<\", \"\").replace(\">\", \"\")\n\
    \    brackets = brackets.replace(\",\", \"\").replace(\";\", \"\").replace(\"\
    :\", \"\")\n    brackets = brackets.replace(\"!\", \"\").replace(\"?\", \"\")\n\
    \    brackets = brackets.replace(\"'\", \"\").replace(\"\\\"\", \"\")\n    brackets\
    \ = brackets.replace(\"%\", \"\").replace(\"&\", \"\")\n    brackets = brackets.replace(\"\
    *\", \"\").replace(\"+\", \"\")\n    brackets = brackets.replace(\"?\", \"\").replace(\"\
    !\", \"\")\n    brackets = brackets.replace(\"(\", \"\").replace(\")\", \"\")\n\
    \    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    <\", \"\").replace(\">\", \"\")\n    brackets = brackets.replace(\",\", \"\").replace(\"\
    ;\", \"\").replace(\":\", \"\")\n    brackets = brackets.replace(\"!\", \"\").replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\"'\", \"\").replace(\"\\\"\", \"\"\
    )\n    brackets = brackets.replace(\"%\", \"\").replace(\"&\", \"\")\n    brackets\
    \ = brackets.replace(\"*\", \"\").replace(\"+\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\").replace(\"!\", \"\")\n    brackets = brackets.replace(\"(\", \"\").replace(\"\
    )\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"<\", \"\").replace(\">\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\").replace(\";\", \"\").replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\").replace(\"?\", \"\")\n    brackets = brackets.replace(\"'\", \"\").replace(\"\
    \\\"\", \"\")\n    brackets = brackets.replace(\"%\", \"\").replace(\"&\", \"\"\
    )\n    brackets = brackets.replace(\"*\", \"\").replace(\"+\", \"\")\n    brackets\
    \ = brackets.replace(\"?\", \"\").replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"<\", \"\").replace(\">\", \"\")\n    brackets\
    \ = brackets.replace(\",\", \"\").replace(\";\", \"\").replace(\":\", \"\")\n\
    \    brackets = brackets.replace(\"!\", \"\").replace(\"?\", \"\")\n    brackets\
    \ = brackets.replace(\"'\", \"\").replace(\"\\\"\", \"\")\n    brackets = brackets.replace(\"\
    %\", \"\").replace(\"&\", \"\")\n    brackets = brackets.replace(\"*\", \"\").replace(\"\
    +\", \"\")\n    brackets = brackets.replace(\"?\", \"\").replace(\"!\", \"\")\n\
    \    brackets = brackets.replace(\"(\", \ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpufk63d15.py\"\
    , line 46\n    brackets = brackets.replace(\"(\", \n                         \
    \      ^\nSyntaxError: '(' was never closed\n"
  exit_code: 1
  status: SyntaxError
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == \"(\":\n            stack.append(c)\n\
    \        elif c == \")\":\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets =\
    \ brackets.replace('(', '').replace(')', '')\n    brackets = brackets.replace('[',\
    \ '').replace(']', '')\n    brackets = brackets.replace('{', '').replace('}',\
    \ '')\n    brackets = brackets.replace(',', '')\n    brackets = brackets.replace('\
    \ ', '')\n    brackets = brackets.split(',')\n    brackets = [x.strip() for x\
    \ in brackets]\n    brackets = [x for x in brackets if x]\n    brackets = [x for\
    \ x in brackets if x != '']\n    brackets = [x for x in brackets if x != '{}']\n\
    \    brackets = [x for x in brackets if x != '[]']\n    brackets = [x for x in\
    \ brackets if x != '()']\n    brackets = [x for x in brackets if x != '{}()']\n\
    \    brackets = [x for x in brackets if x != '[]{}']\n    brackets = [x for x\
    \ in brackets if x != '()[]']\n    brackets = [x for x in brackets if x != '{}[]']\n\
    \    brackets = [x for x in brackets if x != '[]()']\n    brackets = [x for x\
    \ in brackets if x != '(){}']\n    brackets = [x for x in brackets if x != '{}()']\n\
    \    brackets = [x for x in brackets if x != '[]{}()']\n    brackets = [x for\
    \ x in brackets if x != '()[]{}']\n    brackets = [x for x in brackets if x !=\
    \ '{}[]()']\n    brackets = [x for x in brackets if x != '[](){}']\n    brackets\
    \ = [x for x in brackets if x != '(){}[]']\n    brackets = [x for x in brackets\
    \ if x != '{}()[]']\n    brackets = [x for x in brackets if x != '[]{}()[]']\n\
    \    brackets = [x for x in brackets if x != '()[]{}[]']\n    brackets = [x for\
    \ x in brackets if x != '{}[]()[]']\n    brackets = [x for x in brackets if x\
    \ != '[](){}[]']\n    brackets = [x for x in brackets if x != '(){}[]{}']\n  \
    \  brackets = [x for x in brackets if x != '{}()[]{}']\n    brackets = [x for\
    \ x in brackets if x != '[]{}()[]{}']\n    brackets = [x for x in brackets if\
    \ x != '()[]{}[]{}']\n    brackets = [x for x in brackets if x != '{}[]()[]{}']\n\
    \    brackets = [x for x in brackets if x != '[](){}[]{}']\n    brackets = [x\
    \ for x in brackets if x != '(){}[]{}[]']\n    brackets = [x for x in brackets\
    \ if x != '{}()[]{}[]']\n    brackets = [x for x in brackets if x != '[]{}()[]{}']\n\
    \    brackets = [x for x in brackets if x != '()[]{}[]{}']\n    brackets = [x\
    \ for x in brackets if x != '{}[]()[]{}[]']\n    brackets = [x for x in brackets\
    \ if x != '[]\ndef check(candidate):\n    assert candidate('()') == True\n   \
    \ assert candidate('(()())') == True\n    assert candidate('()()(()())()') ==\
    \ True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9mmjbdb5.py\"\
    , line 46\n    brackets = [x for x in brackets if x != '[]\n                 \
    \                           ^\nSyntaxError: unterminated string literal (detected\
    \ at line 46)\n"
  exit_code: 1
  status: SyntaxError
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == \"(\":\n            stack.append(c)\n\
    \        elif c == \")\":\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for char in brackets:\n        if char == \"(\":\n            stack.append(char)\n\
    \        elif char == \")\":\n            if len(stack) == 0:\n              \
    \  return False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == \"(\":\n            stack.append(c)\n\
    \        elif c == \")\":\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for char in brackets:\n        if char == '(':\n            stack.append(char)\n\
    \        elif char == ')':\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets =\
    \ brackets.strip()\n    opening_brackets = brackets.count('(')\n    closing_brackets\
    \ = brackets.count(')')\n    if opening_brackets != closing_brackets:\n      \
    \  return False\n    else:\n        return True\n\n\ndef check(candidate):\n \
    \   assert candidate('()') == True\n    assert candidate('(()())') == True\n \
    \   assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp55vlyxqv.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp55vlyxqv.py\"\
    , line 30, in test_check\n    check(correct_bracketing)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp55vlyxqv.py\"\
    , line 21, in check\n    assert candidate(')(()') == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == \"(\":\n            stack.append(c)\n\
    \        elif c == \")\":\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets =\
    \ brackets.replace('(', '')\n    brackets = brackets.replace(')', '')\n    brackets\
    \ = brackets.replace('[', '')\n    brackets = brackets.replace(']', '')\n    brackets\
    \ = brackets.split(',')\n    brackets = [bracket for bracket in brackets if bracket]\n\
    \    brackets = [bracket for bracket in brackets if bracket[0] != '(' and bracket[-1]\
    \ != ')']\n    return brackets\n\n\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpacw5bv2i.py\"\
    , line 33, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpacw5bv2i.py\"\
    , line 31, in test_check\n    check(correct_bracketing)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpacw5bv2i.py\"\
    , line 17, in check\n    assert candidate('()') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == '(':\n            stack.append(c)\n \
    \       elif c == ')':\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == \"(\":\n            stack.append(c)\n\
    \        elif c == \")\":\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == \"(\":\n            stack.append(c)\n\
    \        elif c == \")\":\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets_set\
    \ = set(brackets)\n    opening_brackets = brackets_set.difference(\"()\")\n  \
    \  closing_brackets = brackets_set.difference(\"[]\")\n    return len(opening_brackets)\
    \ == 0 and len(closing_brackets) == 0\n\n\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2rq1xdo0.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2rq1xdo0.py\"\
    , line 27, in test_check\n    check(correct_bracketing)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2rq1xdo0.py\"\
    , line 13, in check\n    assert candidate('()') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == '(':\n            stack.append(c)\n \
    \       elif c == ')':\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == '(':\n            stack.append(c)\n \
    \       elif c == ')':\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == '(':\n            stack.append(c)\n \
    \       elif c == ')':\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == \"(\":\n            stack.append(c)\n\
    \        elif c == \")\":\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for char in brackets:\n        if char == '(':\n            stack.append(char)\n\
    \        elif char == ')':\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for char in brackets:\n        if char == '(':\n            stack.append(char)\n\
    \        elif char == ')':\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == '(':\n            stack.append(c)\n \
    \       elif c == ')':\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets =\
    \ brackets.replace(\"(\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"<\", \"\").replace(\">\", \"\")\n\
    \    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\").replace(\":\", \"\")\n\
    \    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"<\", \"\").replace(\">\", \"\")\n    brackets\
    \ = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\";\", \"\"\
    )\n    brackets = brackets.replace(\":\", \"\").replace(\":\", \"\")\n    brackets\
    \ = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"?\", \"\"\
    )\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"<\", \"\").replace(\">\", \"\")\n    brackets\
    \ = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\";\", \"\"\
    )\n    brackets = brackets.replace(\":\", \"\").replace(\":\", \"\")\n    brackets\
    \ = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"?\", \"\"\
    )\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"<\", \"\").replace(\">\", \"\")\n    brackets\
    \ = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\";\", \"\"\
    )\n    brackets = brackets.replace(\":\", \"\").replace(\":\", \"\")\n    brackets\
    \ = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"?\", \"\"\
    )\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"<\", \"\").replace(\">\", \"\")\n    brackets\
    \ = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\";\", \"\"\
    )\n    brackets = brackets.replace(\":\", \"\").replace(\":\", \"\")\n    brackets\
    \ = bracket\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw9vhxhxx.py\"\
    , line 71, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw9vhxhxx.py\"\
    , line 69, in test_check\n    check(correct_bracketing)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw9vhxhxx.py\"\
    , line 55, in check\n    assert candidate('()') == True\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw9vhxhxx.py\"\
    , line 53, in correct_bracketing\n    brackets = bracket\nNameError: name 'bracket'\
    \ is not defined. Did you mean: 'brackets'?\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == \"(\":\n            stack.append(c)\n\
    \        elif c == \")\":\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets =\
    \ brackets.replace('(', '').replace(')', '')\n    brackets = brackets.split(',')\n\
    \    brackets = [bracket for bracket in brackets if bracket.strip()]\n    brackets\
    \ = [bracket for bracket in brackets if bracket.count('(') == bracket.count(')')]\n\
    \    return len(brackets) == 0\n\n\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpaolhx4wr.py\"\
    , line 30, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpaolhx4wr.py\"\
    , line 28, in test_check\n    check(correct_bracketing)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpaolhx4wr.py\"\
    , line 18, in check\n    assert candidate('((()())))') == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets =\
    \ brackets.replace(\"(\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"<\", \"\").replace(\">\", \"\")\n\
    \    brackets = brackets.replace(\",\", \"\").replace(\" \", \"\")\n    brackets\
    \ = brackets.replace(\";\", \"\").replace(\" \", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\").replace(\" \", \"\")\n    brackets = brackets.replace(\"!\", \"\").replace(\"\
    \ \", \"\")\n    brackets = brackets.replace(\"?\", \"\").replace(\" \", \"\"\
    )\n    brackets = brackets.replace(\",\", \"\").replace(\" \", \"\")\n    brackets\
    \ = brackets.replace(\";\", \"\").replace(\" \", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\").replace(\" \", \"\")\n    brackets = brackets.replace(\"!\", \"\").replace(\"\
    \ \", \"\")\n    brackets = brackets.replace(\"?\", \"\").replace(\" \", \"\"\
    )\n    brackets = brackets.replace(\",\", \"\").replace(\" \", \"\")\n    brackets\
    \ = brackets.replace(\";\", \"\").replace(\" \", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\").replace(\" \", \"\")\n    brackets = brackets.replace(\"!\", \"\").replace(\"\
    \ \", \"\")\n    brackets = brackets.replace(\"?\", \"\").replace(\" \", \"\"\
    )\n    brackets = brackets.replace(\",\", \"\").replace(\" \", \"\")\n    brackets\
    \ = brackets.replace(\";\", \"\").replace(\" \", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\").replace(\" \", \"\")\n    brackets = brackets.replace(\"!\", \"\").replace(\"\
    \ \", \"\")\n    brackets = brackets.replace(\"?\", \"\").replace(\" \", \"\"\
    )\n    brackets = brackets.replace(\",\", \"\").replace(\" \", \"\")\n    brackets\
    \ = brackets.replace(\";\", \"\").replace(\" \", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\").replace(\" \", \"\")\n    brackets = brackets.replace(\"!\", \"\").replace(\"\
    \ \", \"\")\n    brackets = brackets.replace(\"?\", \"\").replace(\" \", \"\"\
    )\n    brackets = brackets.replace(\",\", \"\").replace(\" \", \"\")\n    brackets\
    \ = brackets.replace(\";\", \"\").replace(\" \", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\").replace(\" \", \"\")\n    brackets = brackets.replace(\"!\", \"\").replace(\"\
    \ \", \"\")\n    brackets = brackets.replace(\"?\", \"\").replace(\" \", \"\"\
    )\n    brackets = brackets.replace(\",\", \"\").replace(\" \", \"\")\n    brackets\
    \ = brackets.replace(\";\", \"\").replace(\" \", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\").replace(\" \", \"\")\n    brackets = brackets.replace(\"!\", \"\").replace(\"\
    \ \", \"\")\n    brackets = brackets.replace(\"?\", \"\").replace(\" \", \"\"\
    )\n    brackets = brackets.replace(\",\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvrlfyeux.py\"\
    , line 45\n    brackets = brackets.replace(\",\n                             \
    \   ^\nSyntaxError: unterminated string literal (detected at line 45)\n"
  exit_code: 1
  status: SyntaxError
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets =\
    \ brackets.replace('(', ' ( ').replace(')', ' ) ')\n    brackets = brackets.replace('[',\
    \ ' [ ').replace(']', ' ] ')\n    brackets = brackets.replace('{', ' { ').replace('}',\
    \ ' } ')\n    brackets = brackets.replace('(', ' ( ').replace(')', ' ) ')\n  \
    \  brackets = brackets.replace('[', ' [ ').replace(']', ' ] ')\n    brackets =\
    \ brackets.replace('{', ' { ').replace('}', ' } ')\n    brackets = brackets.replace('(',\
    \ ' ( ').replace(')', ' ) ')\n    brackets = brackets.replace('[', ' [ ').replace(']',\
    \ ' ] ')\n    brackets = brackets.replace('{', ' { ').replace('}', ' } ')\n  \
    \  brackets = brackets.replace('(', ' ( ').replace(')', ' ) ')\n    brackets =\
    \ brackets.replace('[', ' [ ').replace(']', ' ] ')\n    brackets = brackets.replace('{',\
    \ ' { ').replace('}', ' } ')\n    brackets = brackets.replace('(', ' ( ').replace(')',\
    \ ' ) ')\n    brackets = brackets.replace('[', ' [ ').replace(']', ' ] ')\n  \
    \  brackets = brackets.replace('{', ' { ').replace('}', ' } ')\n    brackets =\
    \ brackets.replace('(', ' ( ').replace(')', ' ) ')\n    brackets = brackets.replace('[',\
    \ ' [ ').replace(']', ' ] ')\n    brackets = brackets.replace('{', ' { ').replace('}',\
    \ ' } ')\n    brackets = brackets.replace('(', ' ( ').replace(')', ' ) ')\n  \
    \  brackets = brackets.replace('[', ' [ ').replace(']', ' ] ')\n    brackets =\
    \ brackets.replace('{', ' { ').replace('}', ' } ')\n    brackets = brackets.replace('(',\
    \ ' ( ').replace(')', ' ) ')\n    brackets = brackets.replace('[', ' [ ').replace(']',\
    \ ' ] ')\n    brackets = brackets.replace('{', ' { ').replace('}', ' } ')\n  \
    \  brackets = brackets.replace('(', ' ( ').replace(')', ' ) ')\n    brackets =\
    \ brackets.replace('[', ' [ ').replace(']', ' ] ')\n    brackets = brackets.replace('{',\
    \ ' { ').replace('}', ' } ')\n    brackets = brackets.replace('(', ' ( ').replace(')',\
    \ ' ) ')\n    brackets = brackets.replace('[', ' [ ').replace(']', ' ] ')\n  \
    \  brackets = brackets.replace('{', ' { ').replace('}', ' } ')\n    brackets =\
    \ brackets.replace('(', ' ( ').replace(')', ' ) ')\n    brackets = brackets.replace('[',\
    \ ' [ ').replace(']', ' ] ')\n    brackets = brackets.replace('{', ' { ').replace('}',\
    \ ' } ')\n    brackets = brackets.replace('(', ' ( ').replace(')', ' ) ')\n  \
    \  bracket\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph9wcwe_a.py\"\
    , line 58, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph9wcwe_a.py\"\
    , line 56, in test_check\n    check(correct_bracketing)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph9wcwe_a.py\"\
    , line 42, in check\n    assert candidate('()') == True\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph9wcwe_a.py\"\
    , line 40, in correct_bracketing\n    bracket\nNameError: name 'bracket' is not\
    \ defined. Did you mean: 'brackets'?\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets =\
    \ brackets.replace(\"(\", \"\")\n    brackets = brackets.replace(\")\", \"\")\n\
    \    brackets = brackets.replace(\"[\", \"\")\n    brackets = brackets.replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    '\", \"\")\n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\"<\", \"\")\n    brackets = brackets.replace(\"\
    >\", \"\")\n    brackets = brackets.replace(\"~\", \"\")\n    brackets = brackets.replace(\"\
    ^\", \"\")\n    brackets = brackets.replace(\"%\", \"\")\n    brackets = brackets.replace(\"\
    $\", \"\")\n    brackets = brackets.replace(\"*\", \"\")\n    brackets = brackets.replace(\"\
    &\", \"\")\n    brackets = brackets.replace(\"%\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\")\n    brackets = brackets.replace(\")\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\")\n    brackets = brackets.replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\")\n    brackets = brackets.replace(\"'\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\")\n    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    <\", \"\")\n    brackets = brackets.replace(\">\", \"\")\n    brackets = brackets.replace(\"\
    ~\", \"\")\n    brackets = brackets.replace(\"^\", \"\")\n    brackets = brackets.replace(\"\
    %\", \"\")\n    brackets = brackets.replace(\"$\", \"\")\n    brackets = brackets.replace(\"\
    *\", \"\")\n    brackets = brackets.replace(\"&\", \"\")\n    brackets = brackets.replace(\"\
    %\", \"\")\n    brackets = brackets.replace(\"(\", \"\")\n    brackets = brackets.replace(\"\
    )\", \"\")\n    brackets = brackets.replace(\"[\", \"\")\n    brackets = brackets.replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    '\", \"\")\n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\"<\", \"\")\n    brackets = brackets.replace(\"\
    >\", \"\")\n    brackets = brackets.replace(\"~\", \"\")\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphs1tg88t.py\"\
    , line 80, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphs1tg88t.py\"\
    , line 78, in test_check\n    check(correct_bracketing)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphs1tg88t.py\"\
    , line 64, in check\n    assert candidate('()') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for char in brackets:\n        if char == '(':\n            stack.append(char)\n\
    \        elif char == ')':\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets =\
    \ brackets.replace(\"(\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"<\", \"\").replace(\">\", \"\")\n\
    \    brackets = brackets.replace(\",\", \"\").replace(\":\", \"\")\n    brackets\
    \ = brackets.replace(\";\", \"\").replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\").replace(\"?\", \"\")\n    brackets = brackets.replace(\"'\", \"\").replace(\"\
    \\\"\", \"\")\n    brackets = brackets.replace(\"\\\"\", \"\")\n    brackets =\
    \ brackets.replace(\"[\", \"\")\n    brackets = brackets.replace(\"]\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"<\", \"\")\n    brackets = brackets.replace(\"\
    >\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\")\n    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    '\", \"\")\n    brackets = brackets.replace(\"\\\"\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\")\n    brackets = brackets.replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    <\", \"\")\n    brackets = brackets.replace(\">\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\"'\", \"\")\n    brackets = brackets.replace(\"\
    \\\"\", \"\")\n    brackets = brackets.replace(\"[\", \"\")\n    brackets = brackets.replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"<\", \"\")\n    brackets = brackets.replace(\"\
    >\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\")\n    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    '\", \"\")\n    brackets = brackets.replace(\"\\\"\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\")\n    brackets = brackets.replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    <\", \"\")\n    brackets = bracket\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa_or27aj.py\"\
    , line 77, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa_or27aj.py\"\
    , line 75, in test_check\n    check(correct_bracketing)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa_or27aj.py\"\
    , line 61, in check\n    assert candidate('()') == True\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa_or27aj.py\"\
    , line 59, in correct_bracketing\n    brackets = bracket\nNameError: name 'bracket'\
    \ is not defined. Did you mean: 'brackets'?\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets =\
    \ brackets.replace(\"(\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets\
    \ = brackets.replace(\"(\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets\
    \ = brackets.replace(\"(\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets\
    \ = brackets.replace(\"(\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets\
    \ = brackets.replace(\"(\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets\
    \ = brackets.replace(\"(\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets\
    \ = brackets.replace(\"(\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets\
    \ = brackets.replace(\"(\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets\
    \ = brackets.replace(\"(\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0e1xoj12.py\"\
    , line 65, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0e1xoj12.py\"\
    , line 63, in test_check\n    check(correct_bracketing)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0e1xoj12.py\"\
    , line 49, in check\n    assert candidate('()') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for char in brackets:\n        if char == '(':\n            stack.append(char)\n\
    \        elif char == ')':\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for char in brackets:\n        if char == \"(\":\n            stack.append(char)\n\
    \        elif char == \")\":\n            if len(stack) == 0:\n              \
    \  return False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets =\
    \ brackets.replace(\"(\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\",\", \"\").replace(\";\", \"\")\n\
    \    brackets = brackets.replace(\":\", \"\").replace(\":\", \"\")\n    brackets\
    \ = brackets.replace(\"?\", \"\").replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\").replace(\"!\", \"\")\n    brackets = brackets.replace(\",\", \"\").replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\").replace(\":\", \"\")\n\
    \    brackets = brackets.replace(\"?\", \"\").replace(\"?\", \"\")\n    brackets\
    \ = brackets.replace(\"!\", \"\").replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\").replace(\";\", \"\")\n    brackets = brackets.replace(\":\", \"\").replace(\"\
    :\", \"\")\n    brackets = brackets.replace(\"?\", \"\").replace(\"?\", \"\")\n\
    \    brackets = brackets.replace(\"!\", \"\").replace(\"!\", \"\")\n    brackets\
    \ = brackets.replace(\",\", \"\").replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\").replace(\":\", \"\")\n    brackets = brackets.replace(\"?\", \"\").replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\"!\", \"\").replace(\"!\", \"\")\n\
    \    brackets = brackets.replace(\",\", \"\").replace(\";\", \"\")\n    brackets\
    \ = brackets.replace(\":\", \"\").replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\").replace(\"?\", \"\")\n    brackets = brackets.replace(\"!\", \"\").replace(\"\
    !\", \"\")\n    brackets = brackets.replace(\",\", \"\").replace(\";\", \"\")\n\
    \    brackets = brackets.replace(\":\", \"\").replace(\":\", \"\")\n    brackets\
    \ = brackets.replace(\"?\", \"\").replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\").replace(\"!\", \"\")\n    brackets = brackets.replace(\",\", \"\").replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\").replace(\":\", \"\")\n\
    \    brackets = brackets.replace(\"?\", \"\").replace(\"?\", \"\")\n    brackets\
    \ = brackets.replace(\"!\", \"\").replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\").replace(\";\", \"\")\n    brackets = brackets.replace(\":\", \"\").replace(\"\
    :\", \"\")\n    brackets = brackets.replace(\"?\", \"\").replace(\"?\", \"\")\n\
    \    brackets = brackets.replace(\"!\", \"\").replace(\"!\", \"\")\n    brackets\
    \ = brackets.replace(\",\", \"\").replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\").replace(\":\", \"\")\n    brackets = brackets.replace(\"?\", \"\").replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\"!\", \"\").replace(\"!\", \"\")\n\
    \    brackets = brackets.replace(\",\", \"\").replace(\";\", \"\")\n    brackets\
    \ = brackets.replace(\":\", \"\").replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\").replace(\"?\", \"\")\n    brackets = brackets.replace(\"!\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe6hy4i47.py\"\
    , line 48\n    brackets = brackets.replace(\"!\n                             \
    \   ^\nSyntaxError: unterminated string literal (detected at line 48)\n"
  exit_code: 1
  status: SyntaxError
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == \"(\":\n            stack.append(c)\n\
    \        elif c == \")\":\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets =\
    \ brackets.replace(\"(\", \"( \")\n    brackets = brackets.replace(\")\", \" )\"\
    )\n    brackets = brackets.replace(\"[\", \"[ \")\n    brackets = brackets.replace(\"\
    ]\", \" ]\")\n    brackets = brackets.replace(\"{\", \"{ \")\n    brackets = brackets.replace(\"\
    }\", \"} \")\n    brackets = brackets.replace(\"<\", \"< \")\n    brackets = brackets.replace(\"\
    >\", \" > \")\n    brackets = brackets.replace(\",\", \" , \")\n    brackets =\
    \ brackets.replace(\":\", \": \")\n    brackets = brackets.replace(\";\", \";\
    \ \")\n    brackets = brackets.replace(\"=\", \" = \")\n    brackets = brackets.replace(\"\
    !\", \"! \")\n    brackets = brackets.replace(\"?\", \"? \")\n    brackets = brackets.replace(\"\
    ,\", \" , \")\n    brackets = brackets.replace(\":\", \": \")\n    brackets =\
    \ brackets.replace(\";\", \"; \")\n    brackets = brackets.replace(\"=\", \" =\
    \ \")\n    brackets = brackets.replace(\"!\", \"! \")\n    brackets = brackets.replace(\"\
    ?\", \"? \")\n    brackets = brackets.replace(\",\", \" , \")\n    brackets =\
    \ brackets.replace(\":\", \": \")\n    brackets = brackets.replace(\";\", \";\
    \ \")\n    brackets = brackets.replace(\"=\", \" = \")\n    brackets = brackets.replace(\"\
    !\", \"! \")\n    brackets = brackets.replace(\"?\", \"? \")\n    brackets = brackets.replace(\"\
    ,\", \" , \")\n    brackets = brackets.replace(\":\", \": \")\n    brackets =\
    \ brackets.replace(\";\", \"; \")\n    brackets = brackets.replace(\"=\", \" =\
    \ \")\n    brackets = brackets.replace(\"!\", \"! \")\n    brackets = brackets.replace(\"\
    ?\", \"? \")\n    brackets = brackets.replace(\",\", \" , \")\n    brackets =\
    \ brackets.replace(\":\", \": \")\n    brackets = brackets.replace(\";\", \";\
    \ \")\n    brackets = brackets.replace(\"=\", \" = \")\n    brackets = brackets.replace(\"\
    !\", \"! \")\n    brackets = brackets.replace(\"?\", \"? \")\n    brackets = brackets.replace(\"\
    ,\", \" , \")\n    brackets = brackets.replace(\":\", \": \")\n    brackets =\
    \ brackets.replace(\";\", \"; \")\n    brackets = brackets.replace(\"=\", \" =\
    \ \")\n    brackets = brackets.replace(\"!\", \"! \")\n    brackets = brackets.replace(\"\
    ?\", \"? \")\n    brackets = brackets.replace(\",\", \" , \")\n    brackets =\
    \ brackets.replace(\":\", \": \")\n    brackets = brackets.replace(\"\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp43u34f5.py\"\
    , line 52\n    brackets = brackets.replace(\"\n                              \
    \  ^\nSyntaxError: unterminated string literal (detected at line 52)\n"
  exit_code: 1
  status: SyntaxError
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for char in brackets:\n        if char == \"(\":\n            stack.append(char)\n\
    \        elif char == \")\":\n            if len(stack) == 0:\n              \
    \  return False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for char in brackets:\n        if char == \"(\":\n            stack.append(char)\n\
    \        elif char == \")\":\n            if len(stack) == 0:\n              \
    \  return False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for char in brackets:\n        if char == '(':\n            stack.append(char)\n\
    \        elif char == ')':\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == \"(\":\n            stack.append(c)\n\
    \        elif c == \")\":\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == '(':\n            stack.append(c)\n \
    \       elif c == ')':\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == \"(\":\n            stack.append(c)\n\
    \        elif c == \")\":\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == \"(\":\n            stack.append(c)\n\
    \        elif c == \")\":\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets =\
    \ brackets.replace(\"(\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"<\", \"\").replace(\">\", \"\")\n\
    \    brackets = brackets.replace(\",\", \"\").replace(\";\", \"\")\n    brackets\
    \ = brackets.replace(\":\", \"\").replace(\"'\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\").replace(\"?\", \"\")\n    brackets = brackets.replace(\",\", \"\").replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\").replace(\"'\", \"\")\n\
    \    brackets = brackets.replace(\"!\", \"\").replace(\"?\", \"\")\n    brackets\
    \ = brackets.replace(\",\", \"\").replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\").replace(\"'\", \"\")\n    brackets = brackets.replace(\"!\", \"\").replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\",\", \"\").replace(\";\", \"\")\n\
    \    brackets = brackets.replace(\":\", \"\").replace(\"'\", \"\")\n    brackets\
    \ = brackets.replace(\"!\", \"\").replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\").replace(\";\", \"\")\n    brackets = brackets.replace(\":\", \"\").replace(\"\
    '\", \"\")\n    brackets = brackets.replace(\"!\", \"\").replace(\"?\", \"\")\n\
    \    brackets = brackets.replace(\",\", \"\").replace(\";\", \"\")\n    brackets\
    \ = brackets.replace(\":\", \"\").replace(\"'\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\").replace(\"?\", \"\")\n    brackets = brackets.replace(\",\", \"\").replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\").replace(\"'\", \"\")\n\
    \    brackets = brackets.replace(\"!\", \"\").replace(\"?\", \"\")\n    brackets\
    \ = brackets.replace(\",\", \"\").replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\").replace(\"'\", \"\")\n    brackets = brackets.replace(\"!\", \"\").replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\",\", \"\").replace(\";\", \"\")\n\
    \    brackets = brackets.replace(\":\", \"\").replace(\"'\", \"\")\n    brackets\
    \ = brackets.replace(\"!\", \"\").replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\").replace(\";\", \"\")\n    brackets = brackets.replace(\":\", \"\").replace(\"\
    '\", \"\")\n    brackets = brackets.replace(\"!\", \"\").replace(\"?\", \"\")\n\
    \    brackets = brackets.replace(\",\", \"\").replace(\";\", \"\")\n    brackets\
    \ = brackets.replace(\":\", \"\").replace(\"'\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\").replace(\"?\", \"\")\n    brackets = brackets.replace(\",\", \"\").replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\").replace(\"'\", \"\")\n\
    \    brackets = brackets.replace(\"!\", \"\").replace(\"?\", \"\")\n    brackets\
    \ = brackets.replace(\",\", \"\").replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\").replace(\"'\", \"\")\n    brackets = brackets.replace(\"\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpna1n2oso.py\"\
    , line 48\n    brackets = brackets.replace(\"\n                              \
    \  ^\nSyntaxError: unterminated string literal (detected at line 48)\n"
  exit_code: 1
  status: SyntaxError
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets =\
    \ brackets.replace(\"(\", \"( \")\n    brackets = brackets.replace(\")\", \" )\"\
    )\n    brackets = brackets.replace(\"[\", \"[ \")\n    brackets = brackets.replace(\"\
    ]\", \" ]\")\n    brackets = brackets.replace(\"{\", \"{ \")\n    brackets = brackets.replace(\"\
    }\", \"} \")\n    brackets = brackets.replace(\"<\", \"< \")\n    brackets = brackets.replace(\"\
    >\", \" > \")\n    brackets = brackets.replace(\",\", \" , \")\n    brackets =\
    \ brackets.replace(\";\", \" ; \")\n    brackets = brackets.replace(\":\", \"\
    : \")\n    brackets = brackets.replace(\"!\", \"! \")\n    brackets = brackets.replace(\"\
    ?\", \"? \")\n    brackets = brackets.replace(\"=\", \" = \")\n    brackets =\
    \ brackets.replace(\"+\", \" + \")\n    brackets = brackets.replace(\"-\", \"\
    \ - \")\n    brackets = brackets.replace(\"*\", \" * \")\n    brackets = brackets.replace(\"\
    &\", \"& \")\n    brackets = brackets.replace(\"%\", \"% \")\n    brackets = brackets.replace(\"\
    ^\", \"^ \")\n    brackets = brackets.replace(\"~\", \"~ \")\n    brackets = brackets.replace(\"\
    @\", \"@ \")\n    brackets = brackets.replace(\"|\", \"| \")\n    brackets = brackets.replace(\"\
    \\\\\", \"\\\\ \")\n    brackets = brackets.replace(\"~\", \"~ \")\n    brackets\
    \ = brackets.replace(\"(\", \"( \")\n    brackets = brackets.replace(\")\", \"\
    \ )\")\n    brackets = brackets.replace(\"[\", \"[ \")\n    brackets = brackets.replace(\"\
    ]\", \" ]\")\n    brackets = brackets.replace(\"{\", \"{ \")\n    brackets = brackets.replace(\"\
    }\", \"} \")\n    brackets = brackets.replace(\"<\", \"< \")\n    brackets = brackets.replace(\"\
    >\", \" > \")\n    brackets = brackets.replace(\",\", \" , \")\n    brackets =\
    \ brackets.replace(\";\", \" ; \")\n    brackets = brackets.replace(\":\", \"\
    : \")\n    brackets = brackets.replace(\"!\", \"! \")\n    brackets = brackets.replace(\"\
    ?\", \"? \")\n    brackets = brackets.replace(\"=\", \" = \")\n    brackets =\
    \ brackets.replace(\"+\", \" + \")\n    brackets = brackets.replace(\"-\", \"\
    \ - \")\n    brackets = brackets.replace(\"*\", \" * \")\n    brackets = brackets.replace(\"\
    &\", \"& \")\n    brackets = brackets.replace(\"%\", \"% \")\n    brackets = brackets.replace(\"\
    ^\", \"^ \")\n    brackets = brackets.replace(\"~\", \"~ \")\n    brackets = \n\
    def check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxz465umx.py\"\
    , line 52\n    brackets = \n               ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == \"(\":\n            stack.append(c)\n\
    \        elif c == \")\":\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for char in brackets:\n        if char == \"(\":\n            stack.append(char)\n\
    \        elif char == \")\":\n            if len(stack) == 0:\n              \
    \  return False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets =\
    \ brackets.replace('(', '').replace(')', '')\n    brackets = brackets.replace('[',\
    \ '').replace(']', '')\n    brackets = brackets.replace('{', '').replace('}',\
    \ '')\n    brackets = brackets.replace('(', '').replace(')', '')\n    brackets\
    \ = brackets.replace('[', '').replace(']', '')\n    brackets = brackets.replace('{',\
    \ '').replace('}', '')\n    brackets = brackets.replace('(', '').replace(')',\
    \ '')\n    brackets = brackets.replace('[', '').replace(']', '')\n    brackets\
    \ = brackets.replace('{', '').replace('}', '')\n    brackets = brackets.replace('(',\
    \ '').replace(')', '')\n    brackets = brackets.replace('[', '').replace(']',\
    \ '')\n    brackets = brackets.replace('{', '').replace('}', '')\n    brackets\
    \ = brackets.replace('(', '').replace(')', '')\n    brackets = brackets.replace('[',\
    \ '').replace(']', '')\n    brackets = brackets.replace('{', '').replace('}',\
    \ '')\n    brackets = brackets.replace('(', '').replace(')', '')\n    brackets\
    \ = brackets.replace('[', '').replace(']', '')\n    brackets = brackets.replace('{',\
    \ '').replace('}', '')\n    brackets = brackets.replace('(', '').replace(')',\
    \ '')\n    brackets = brackets.replace('[', '').replace(']', '')\n    brackets\
    \ = brackets.replace('{', '').replace('}', '')\n    brackets = brackets.replace('(',\
    \ '').replace(')', '')\n    brackets = brackets.replace('[', '').replace(']',\
    \ '')\n    brackets = brackets.replace('{', '').replace('}', '')\n    brackets\
    \ = brackets.replace('(', '').replace(')', '')\n    brackets = brackets.replace('[',\
    \ '').replace(']', '')\n    brackets = brackets.replace('{', '').replace('}',\
    \ '')\n    brackets = brackets.replace('(', '').replace(')', '')\n    brackets\
    \ = brackets.replace('[', '').replace(']', '')\n    brackets = brackets.replace('{',\
    \ '').replace('}', '')\n    brackets = brackets.replace('(', '').replace(')',\
    \ '')\n    brackets = brackets.replace('[', '').replace(']', '')\n    brackets\
    \ = brackets.replace('{', '').replace('}', '')\n    brackets = brackets.replace('(',\
    \ '').replace(')', '')\n    brackets = brackets.replace('[', '').replace(']',\
    \ '')\n    brackets = brackets.replace('{', '').replace('}', '')\n    brackets\
    \ = brackets.replace('(', '').replace(')', '')\n    brackets = brackets.replace('[',\
    \ '').replace(']', '')\n    brackets = brackets.replace('{', '').replace('}',\
    \ '')\n    brackets = brackets.replace('(', '').replace(')', '')\n    brackets\
    \ = brackets.replace('[', '').replace(']', '')\n    brackets = brackets.replace('{',\
    \ '').replace('}', '')\n    brackets = brackets.replace('(', '')\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw5mpw8ee.py\"\
    , line 66, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw5mpw8ee.py\"\
    , line 64, in test_check\n    check(correct_bracketing)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw5mpw8ee.py\"\
    , line 50, in check\n    assert candidate('()') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == \"(\":\n            stack.append(c)\n\
    \        elif c == \")\":\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets =\
    \ brackets.replace('(', ' ( ').replace(')', ' ) ')\n    brackets = brackets.replace('(',\
    \ ' ( ').replace(')', ' ) ')\n    brackets = brackets.replace('(', ' ( ').replace(')',\
    \ ' ) ')\n    brackets = brackets.replace('(', ' ( ').replace(')', ' ) ')\n  \
    \  brackets = brackets.replace('(', ' ( ').replace(')', ' ) ')\n    brackets =\
    \ brackets.replace('(', ' ( ').replace(')', ' ) ')\n    brackets = brackets.replace('(',\
    \ ' ( ').replace(')', ' ) ')\n    brackets = brackets.replace('(', ' ( ').replace(')',\
    \ ' ) ')\n    brackets = brackets.replace('(', ' ( ').replace(')', ' ) ')\n  \
    \  brackets = brackets.replace('(', ' ( ').replace(')', ' ) ')\n    brackets =\
    \ brackets.replace('(', ' ( ').replace(')', ' ) ')\n    brackets = brackets.replace('(',\
    \ ' ( ').replace(')', ' ) ')\n    brackets = brackets.replace('(', ' ( ').replace(')',\
    \ ' ) ')\n    brackets = brackets.replace('(', ' ( ').replace(')', ' ) ')\n  \
    \  brackets = brackets.replace('(', ' ( ').replace(')', ' ) ')\n    brackets =\
    \ brackets.replace('(', ' ( ').replace(')', ' ) ')\n    brackets = brackets.replace('(',\
    \ ' ( ').replace(')', ' ) ')\n    brackets = brackets.replace('(', ' ( ').replace(')',\
    \ ' ) ')\n    brackets = brackets.replace('(', ' ( ').replace(')', ' ) ')\n  \
    \  brackets = brackets.replace('(', ' ( ').replace(')', ' ) ')\n    brackets =\
    \ brackets.replace('(', ' ( ').replace(')', ' ) ')\n    brackets = brackets.replace('(',\
    \ ' ( ').replace(')', ' ) ')\n    brackets = brackets.replace('(', ' ( ').replace(')',\
    \ ' ) ')\n    brackets = brackets.replace('(', ' ( ').replace(')', ' ) ')\n  \
    \  brackets = brackets.replace('(', ' ( ').replace(')', ' ) ')\n    brackets =\
    \ brackets.replace('(', ' ( ').replace(')', ' ) ')\n    brackets = brackets.replace('(',\
    \ ' ( ').replace(')', ' ) ')\n    brackets = brackets.replace('(', ' ( ').replace(')',\
    \ ' ) ')\n    brackets = brackets.replace('(', ' ( ').replace(')', ' ) ')\n  \
    \  brackets = brackets.replace('(', ' ( ').replace(')', ' ) ')\n    brackets =\
    \ brackets.replace('(', ' ( ').replace(')', ' ) ')\n    brackets = brackets.replace('(',\
    \ ' ( ').replace(')', ' ) ')\n    brackets = brackets.replace('(', ' ( ').replace(')',\
    \ ' ) ')\n    brackets = brackets.replace('(', ' ( ').replace(')', ' ) ')\n  \
    \  bracket\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpskattjf3.py\"\
    , line 58, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpskattjf3.py\"\
    , line 56, in test_check\n    check(correct_bracketing)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpskattjf3.py\"\
    , line 42, in check\n    assert candidate('()') == True\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpskattjf3.py\"\
    , line 40, in correct_bracketing\n    bracket\nNameError: name 'bracket' is not\
    \ defined. Did you mean: 'brackets'?\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets =\
    \ brackets.replace(\"(\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets\
    \ = brackets.replace(\"(\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets\
    \ = brackets.replace(\"(\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets\
    \ = brackets.replace(\"(\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets\
    \ = brackets.replace(\"(\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets\
    \ = brackets.replace(\"(\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets\
    \ = brackets.replace(\"(\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets\
    \ = brackets.replace(\"(\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets\
    \ = brackets.replace(\"(\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkcl74g22.py\"\
    , line 65, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkcl74g22.py\"\
    , line 63, in test_check\n    check(correct_bracketing)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkcl74g22.py\"\
    , line 49, in check\n    assert candidate('()') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == \"(\":\n            stack.append(c)\n\
    \        elif c == \")\":\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets_set\
    \ = set(brackets)\n    stack = []\n    for char in brackets:\n        if char\
    \ in brackets_set:\n            stack.append(char)\n        else:\n          \
    \  if len(stack) == 0:\n                return False\n            open_bracket\
    \ = stack.pop()\n            if open_bracket != char:\n                return\
    \ False\n    return len(stack) == 0\n\n\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptlfzbnwa.py\"\
    , line 37, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptlfzbnwa.py\"\
    , line 35, in test_check\n    check(correct_bracketing)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptlfzbnwa.py\"\
    , line 21, in check\n    assert candidate('()') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for char in brackets:\n        if char == '(':\n            stack.append(char)\n\
    \        elif char == ')':\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == \"(\":\n            stack.append(c)\n\
    \        elif c == \")\":\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == \"(\":\n            stack.append(c)\n\
    \        elif c == \")\":\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets =\
    \ brackets.replace(\"(\", \"( \")\n    brackets = brackets.replace(\")\", \" )\"\
    )\n    brackets = brackets.replace(\"[\", \"[ \")\n    brackets = brackets.replace(\"\
    ]\", \" ]\")\n    brackets = brackets.replace(\"{\", \"{ \")\n    brackets = brackets.replace(\"\
    }\", \"} \")\n    brackets = brackets.replace(\"<\", \"< \")\n    brackets = brackets.replace(\"\
    >\", \" > \")\n    brackets = brackets.replace(\",\", \" , \")\n    brackets =\
    \ brackets.replace(\":\", \": \")\n    brackets = brackets.replace(\";\", \";\
    \ \")\n    brackets = brackets.replace(\"!\", \"! \")\n    brackets = brackets.replace(\"\
    ?\", \"? \")\n    brackets = brackets.replace(\"=\", \" = \")\n    brackets =\
    \ brackets.replace(\"+=\", \"+= \")\n    brackets = brackets.replace(\"-=\", \"\
    -= \")\n    brackets = brackets.replace(\"*=\", \"*= \")\n    brackets = brackets.replace(\"\
    /=\", \"/= \")\n    brackets = brackets.replace(\"%=\", \"%= \")\n    brackets\
    \ = brackets.replace(\"&=\", \"&= \")\n    brackets = brackets.replace(\"|=\"\
    , \"|= \")\n    brackets = brackets.replace(\"^=\", \"^= \")\n    brackets = brackets.replace(\"\
    ~=\", \"~= \")\n    brackets = brackets.replace(\"&=\", \"&= \")\n    brackets\
    \ = brackets.replace(\"|=\", \"|= \")\n    brackets = brackets.replace(\"^=\"\
    , \"^= \")\n    brackets = brackets.replace(\"~=\", \"~= \")\n    brackets = brackets.replace(\"\
    =\", \" = \")\n    brackets = brackets.replace(\"+=\", \"+= \")\n    brackets\
    \ = brackets.replace(\"-=\", \"-= \")\n    brackets = brackets.replace(\"*=\"\
    , \"*= \")\n    brackets = brackets.replace(\"/=\", \"/= \")\n    brackets = brackets.replace(\"\
    %=\", \"%= \")\n    brackets = brackets.replace(\"&=\", \"&= \")\n    brackets\
    \ = brackets.replace(\"|=\", \"|= \")\n    brackets = brackets.replace(\"^=\"\
    , \"^= \")\n    brackets = brackets.replace(\"~=\", \"~= \")\n    brackets = brackets.replace(\"\
    =\", \" = \")\n    brackets = brackets.replace(\"+=\", \"+= \")\n    brackets\
    \ = brackets.replace(\"-=\", \"-= \")\n    brackets = brackets.replace(\"*=\"\
    , \"*= \")\n    brackets = brackets.replace(\"/=\", \"/= \")\n    brackets = brackets.replace(\"\
    %=\", \"%= \")\n    brackets = brackets.replace(\"\ndef check(candidate):\n  \
    \  assert candidate('()') == True\n    assert candidate('(()())') == True\n  \
    \  assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe57ay0af.py\"\
    , line 49\n    brackets = brackets.replace(\"\n                              \
    \  ^\nSyntaxError: unterminated string literal (detected at line 49)\n"
  exit_code: 1
  status: SyntaxError
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == \"(\":\n            stack.append(c)\n\
    \        elif c == \")\":\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == \"(\":\n            stack.append(c)\n\
    \        elif c == \")\":\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets_set\
    \ = set(brackets)\n    stack = []\n    for c in brackets:\n        if c == '(':\n\
    \            stack.append(c)\n        elif c == ')':\n            if not stack:\n\
    \                return False\n            top = stack.pop()\n            if top\
    \ != c:\n                return False\n    return not stack\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc3o2r4v5.py\"\
    , line 37, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc3o2r4v5.py\"\
    , line 35, in test_check\n    check(correct_bracketing)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc3o2r4v5.py\"\
    , line 21, in check\n    assert candidate('()') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets =\
    \ brackets.replace('(', '').replace(')', '')\n    brackets = brackets.replace('[',\
    \ '').replace(']', '')\n    brackets = brackets.replace('{', '').replace('}',\
    \ '')\n    brackets = brackets.replace('(', '').replace(')', '')\n    brackets\
    \ = brackets.replace('[', '').replace(']', '')\n    brackets = brackets.replace('{',\
    \ '').replace('}', '')\n    brackets = brackets.replace('(', '').replace(')',\
    \ '')\n    brackets = brackets.replace('[', '').replace(']', '')\n    brackets\
    \ = brackets.replace('{', '').replace('}', '')\n    brackets = brackets.replace('(',\
    \ '').replace(')', '')\n    brackets = brackets.replace('[', '').replace(']',\
    \ '')\n    brackets = brackets.replace('{', '').replace('}', '')\n    brackets\
    \ = brackets.replace('(', '').replace(')', '')\n    brackets = brackets.replace('[',\
    \ '').replace(']', '')\n    brackets = brackets.replace('{', '').replace('}',\
    \ '')\n    brackets = brackets.replace('(', '').replace(')', '')\n    brackets\
    \ = brackets.replace('[', '').replace(']', '')\n    brackets = brackets.replace('{',\
    \ '').replace('}', '')\n    brackets = brackets.replace('(', '').replace(')',\
    \ '')\n    brackets = brackets.replace('[', '').replace(']', '')\n    brackets\
    \ = brackets.replace('{', '').replace('}', '')\n    brackets = brackets.replace('(',\
    \ '').replace(')', '')\n    brackets = brackets.replace('[', '').replace(']',\
    \ '')\n    brackets = brackets.replace('{', '').replace('}', '')\n    brackets\
    \ = brackets.replace('(', '').replace(')', '')\n    brackets = brackets.replace('[',\
    \ '').replace(']', '')\n    brackets = brackets.replace('{', '').replace('}',\
    \ '')\n    brackets = brackets.replace('(', '').replace(')', '')\n    brackets\
    \ = brackets.replace('[', '').replace(']', '')\n    brackets = brackets.replace('{',\
    \ '').replace('}', '')\n    brackets = brackets.replace('(', '').replace(')',\
    \ '')\n    brackets = brackets.replace('[', '').replace(']', '')\n    brackets\
    \ = brackets.replace('{', '').replace('}', '')\n    brackets = brackets.replace('(',\
    \ '').replace(')', '')\n    brackets = brackets.replace('[', '').replace(']',\
    \ '')\n    brackets = brackets.replace('{', '').replace('}', '')\n    brackets\
    \ = brackets.replace('(', '').replace(')', '')\n    brackets = brackets.replace('[',\
    \ '').replace(']', '')\n    brackets = brackets.replace('{', '').replace('}',\
    \ '')\n    brackets = brackets.replace('(', '').replace(')', '')\n    brackets\
    \ = brackets.replace('[', '').replace(']', '')\n    brackets = brackets.replace('{',\
    \ '').replace('}', '')\n    brackets = brackets.replace('(', '')\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8h858xaf.py\"\
    , line 66, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8h858xaf.py\"\
    , line 64, in test_check\n    check(correct_bracketing)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8h858xaf.py\"\
    , line 50, in check\n    assert candidate('()') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == \"(\":\n            stack.append(c)\n\
    \        elif c == \")\":\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets =\
    \ brackets.replace(\"(\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"<\", \"\").replace(\">\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"<\", \"\").replace(\">\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\"'\", \"\").replace(\"\\\"\", \"\"\
    )\n    brackets = brackets.replace(\"!\", \"\").replace(\"?\", \"\")\n    brackets\
    \ = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\";\", \"\"\
    )\n    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    <\", \"\").replace(\">\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n\
    \    brackets = brackets.replace(\"'\", \"\").replace(\"\\\"\", \"\")\n    brackets\
    \ = brackets.replace(\"!\", \"\").replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"<\", \"\").replace(\">\", \"\")\n\
    \    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    '\", \"\").replace(\"\\\"\", \"\")\n    brackets = brackets.replace(\"!\", \"\"\
    ).replace(\"?\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets\
    \ = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"[\", \"\"\
    ).replace(\"]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"<\", \"\").replace(\">\", \"\")\n\
    \    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    '\", \"\").replace(\"\\\"\", \"\")\n    brackets = brackets.replace(\"!\", \"\"\
    ).replace(\"?\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets\
    \ = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"[\", \"\"\
    ).replace(\"]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"<\", \"\").replace(\">\", \"\")\n\
    \    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    '\", \"\").replace(\"\\\"\", \"\")\n    brackets = brackets.replace(\"!\", \"\"\
    ).replace(\"?\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets\
    \ = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"[\", \"\"\
    ).replace(\"]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1xgqqmc1.py\"\
    , line 51\n    brackets = brackets.\n                        ^\nSyntaxError: invalid\
    \ syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets =\
    \ brackets.replace(\"(\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"<\", \"\").replace(\">\", \"\")\n\
    \    brackets = brackets.replace(\",\", \"\").replace(\":\", \"\").replace(\"\
    \ \", \"\")\n    brackets = brackets.replace(\"'\", \"\").replace(\"\\\"\", \"\
    \")\n    brackets = brackets.replace(\"!\", \"\").replace(\"?\", \"\")\n    brackets\
    \ = brackets.replace(\"*\", \"\").replace(\"+\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"<\", \"\").replace(\">\", \"\")\n    brackets\
    \ = brackets.replace(\",\", \"\").replace(\":\", \"\").replace(\" \", \"\")\n\
    \    brackets = brackets.replace(\"'\", \"\").replace(\"\\\"\", \"\")\n    brackets\
    \ = brackets.replace(\"!\", \"\").replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    *\", \"\").replace(\"+\", \"\")\n    brackets = brackets.replace(\"(\", \"\").replace(\"\
    )\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"<\", \"\").replace(\">\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\").replace(\":\", \"\").replace(\" \", \"\")\n    brackets = brackets.replace(\"\
    '\", \"\").replace(\"\\\"\", \"\")\n    brackets = brackets.replace(\"!\", \"\"\
    ).replace(\"?\", \"\")\n    brackets = brackets.replace(\"*\", \"\").replace(\"\
    +\", \"\")\n    brackets = brackets.replace(\"(\", \"\").replace(\")\", \"\")\n\
    \    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    <\", \"\").replace(\">\", \"\")\n    brackets = brackets.replace(\",\", \"\").replace(\"\
    :\", \"\").replace(\" \", \"\")\n    brackets = brackets.replace(\"'\", \"\").replace(\"\
    \\\"\", \"\")\n    brackets = brackets.replace(\"!\", \"\").replace(\"?\", \"\"\
    )\n    brackets = brackets.replace(\"*\", \"\").replace(\"+\", \"\")\n    brackets\
    \ = brackets.replace(\"(\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"<\", \"\").replace(\">\", \"\")\n\
    \    brackets = brackets.replace(\",\", \"\").replace(\":\", \"\").replace(\"\
    \ \", \"\")\n    brackets = brackets.replace(\"'\", \"\").replace(\"\\\"\", \"\
    \")\n    brackets = brackets.replace(\"!\", \"\").replace(\"?\", \"\")\n    brackets\
    \ = brackets.replace(\"*\", \"\").replace(\"\ndef check(candidate):\n    assert\
    \ candidate('()') == True\n    assert candidate('(()())') == True\n    assert\
    \ candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpla7buqxt.py\"\
    , line 45\n    brackets = brackets.replace(\"*\", \"\").replace(\"\n         \
    \                                        ^\nSyntaxError: unterminated string literal\
    \ (detected at line 45)\n"
  exit_code: 1
  status: SyntaxError
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets =\
    \ brackets.replace(\"(\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"<\", \"\").replace(\">\", \"\")\n\
    \    brackets = brackets.replace(\",\", \"\").replace(\":\", \"\").replace(\"\
    \ \", \"\")\n    brackets = brackets.replace(\";\", \"\").replace(\"\\n\", \"\"\
    )\n    brackets = brackets.replace(\"\\t\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\").replace(\"?\", \"\")\n    brackets = brackets.replace(\",\", \"\").replace(\"\
    :\", \"\").replace(\" \", \"\")\n    brackets = brackets.replace(\";\", \"\").replace(\"\
    \\n\", \"\")\n    brackets = brackets.replace(\"\\t\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\").replace(\"?\", \"\")\n    brackets = brackets.replace(\",\", \"\").replace(\"\
    :\", \"\").replace(\" \", \"\")\n    brackets = brackets.replace(\";\", \"\").replace(\"\
    \\n\", \"\")\n    brackets = brackets.replace(\"\\t\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\").replace(\"?\", \"\")\n    brackets = brackets.replace(\",\", \"\").replace(\"\
    :\", \"\").replace(\" \", \"\")\n    brackets = brackets.replace(\";\", \"\").replace(\"\
    \\n\", \"\")\n    brackets = brackets.replace(\"\\t\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\").replace(\"?\", \"\")\n    brackets = brackets.replace(\",\", \"\").replace(\"\
    :\", \"\").replace(\" \", \"\")\n    brackets = brackets.replace(\";\", \"\").replace(\"\
    \\n\", \"\")\n    brackets = brackets.replace(\"\\t\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\").replace(\"?\", \"\")\n    brackets = brackets.replace(\",\", \"\").replace(\"\
    :\", \"\").replace(\" \", \"\")\n    brackets = brackets.replace(\";\", \"\").replace(\"\
    \\n\", \"\")\n    brackets = brackets.replace(\"\\t\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\").replace(\"?\", \"\")\n    brackets = brackets.replace(\",\", \"\").replace(\"\
    :\", \"\").replace(\" \", \"\")\n    brackets = brackets.replace(\";\", \"\").replace(\"\
    \\n\", \"\")\n    brackets = brackets.replace(\"\\t\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\").replace(\"?\", \"\")\n    brackets = brackets.replace(\",\", \"\").replace(\"\
    :\", \"\").replace(\" \", \"\")\n    brackets = brackets.replace(\";\", \"\").replace(\"\
    \\n\", \"\")\n    brackets = brackets.replace(\"\\t\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\").replace(\"?\", \"\")\n    brackets = brackets.replace(\",\", \"\").replace(\"\
    :\", \"\").replace(\" \", \"\")\n    brackets = brackets.replace(\";\", \"\").replace(\"\
    \\n\", \"\")\n    brackets = brackets.replace(\"\\t\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\").replace(\"?\", \"\")\n    brackets = brackets.replace(\",\", \"\").replace(\"\
    :\", \"\").replace(\" \", \"\")\n    brackets = brackets.\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplrlf9_e5.py\"\
    , line 47\n    brackets = brackets.\n                        ^\nSyntaxError: invalid\
    \ syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets =\
    \ brackets.replace(\"(\", \"\")\n    brackets = brackets.replace(\")\", \"\")\n\
    \    brackets = brackets.replace(\"[\", \"\")\n    brackets = brackets.replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"'\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\")\n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\"<\", \"\")\n    brackets = brackets.replace(\"\
    >\", \"\")\n    brackets = brackets.replace(\"~\", \"\")\n    brackets = brackets.replace(\"\
    ^\", \"\")\n    brackets = brackets.replace(\"%\", \"\")\n    brackets = brackets.replace(\"\
    &\", \"\")\n    brackets = brackets.replace(\"*\", \"\")\n    brackets = brackets.replace(\"\
    +\", \"\")\n    brackets = brackets.replace(\"-\", \"\")\n    brackets = brackets.replace(\"\
    =\", \"\")\n    brackets = brackets.replace(\"|\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\")\n    brackets = brackets.replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\")\n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\"<\", \"\")\n    brackets = brackets.replace(\"\
    >\", \"\")\n    brackets = brackets.replace(\"~\", \"\")\n    brackets = brackets.replace(\"\
    ^\", \"\")\n    brackets = brackets.replace(\"%\", \"\")\n    brackets = brackets.replace(\"\
    &\", \"\")\n    brackets = brackets.replace(\"*\", \"\")\n    brackets = brackets.replace(\"\
    +\", \"\")\n    brackets = brackets.replace(\"-\", \"\")\n    brackets = brackets.replace(\"\
    =\", \"\")\n    brackets = brackets.replace(\"|\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\")\n    brackets = brackets.replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\")\n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\"<\", \"\")\n    brackets = brackets.replace(\"\
    >\", \"\")\n    brackets = brackets.replace(\"~\", \"\")\n    brackets = brackets.replace(\"\
    ^\", \"\")\n    brackets = brackets.replace(\"%\", \"\")\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4p2oav3e.py\"\
    , line 80, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4p2oav3e.py\"\
    , line 78, in test_check\n    check(correct_bracketing)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4p2oav3e.py\"\
    , line 64, in check\n    assert candidate('()') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == \"(\":\n            stack.append(c)\n\
    \        elif c == \")\":\n            if not stack:\n                return False\n\
    \            top = stack.pop()\n            if top != c:\n                return\
    \ False\n    return not stack\n\n\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1_d5yhxa.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1_d5yhxa.py\"\
    , line 34, in test_check\n    check(correct_bracketing)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1_d5yhxa.py\"\
    , line 20, in check\n    assert candidate('()') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == '(':\n            stack.append(c)\n \
    \       elif c == ')':\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == \"(\":\n            stack.append(c)\n\
    \        elif c == \")\":\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == '(':\n            stack.append(c)\n \
    \       elif c == ')':\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets =\
    \ brackets.replace('(', ' ( ').replace(')', ' ) ')\n    brackets = brackets.replace('(',\
    \ ' ( ').replace(')', ' ) ')\n    brackets = brackets.replace('(', ' ( ').replace(')',\
    \ ' ) ')\n    brackets = brackets.replace('(', ' ( ').replace(')', ' ) ')\n  \
    \  brackets = brackets.replace('(', ' ( ').replace(')', ' ) ')\n    brackets =\
    \ brackets.replace('(', ' ( ').replace(')', ' ) ')\n    brackets = brackets.replace('(',\
    \ ' ( ').replace(')', ' ) ')\n    brackets = brackets.replace('(', ' ( ').replace(')',\
    \ ' ) ')\n    brackets = brackets.replace('(', ' ( ').replace(')', ' ) ')\n  \
    \  brackets = brackets.replace('(', ' ( ').replace(')', ' ) ')\n    brackets =\
    \ brackets.replace('(', ' ( ').replace(')', ' ) ')\n    brackets = brackets.replace('(',\
    \ ' ( ').replace(')', ' ) ')\n    brackets = brackets.replace('(', ' ( ').replace(')',\
    \ ' ) ')\n    brackets = brackets.replace('(', ' ( ').replace(')', ' ) ')\n  \
    \  brackets = brackets.replace('(', ' ( ').replace(')', ' ) ')\n    brackets =\
    \ brackets.replace('(', ' ( ').replace(')', ' ) ')\n    brackets = brackets.replace('(',\
    \ ' ( ').replace(')', ' ) ')\n    brackets = brackets.replace('(', ' ( ').replace(')',\
    \ ' ) ')\n    brackets = brackets.replace('(', ' ( ').replace(')', ' ) ')\n  \
    \  brackets = brackets.replace('(', ' ( ').replace(')', ' ) ')\n    brackets =\
    \ brackets.replace('(', ' ( ').replace(')', ' ) ')\n    brackets = brackets.replace('(',\
    \ ' ( ').replace(')', ' ) ')\n    brackets = brackets.replace('(', ' ( ').replace(')',\
    \ ' ) ')\n    brackets = brackets.replace('(', ' ( ').replace(')', ' ) ')\n  \
    \  brackets = brackets.replace('(', ' ( ').replace(')', ' ) ')\n    brackets =\
    \ brackets.replace('(', ' ( ').replace(')', ' ) ')\n    brackets = brackets.replace('(',\
    \ ' ( ').replace(')', ' ) ')\n    brackets = brackets.replace('(', ' ( ').replace(')',\
    \ ' ) ')\n    brackets = brackets.replace('(', ' ( ').replace(')', ' ) ')\n  \
    \  brackets = brackets.replace('(', ' ( ').replace(')', ' ) ')\n    brackets =\
    \ brackets.replace('(', ' ( ').replace(')', ' ) ')\n    brackets = brackets.replace('(',\
    \ ' ( ').replace(')', ' ) ')\n    brackets = brackets.replace('(', ' ( ').replace(')',\
    \ ' ) ')\n    brackets = brackets.replace('(', ' ( ').replace(')', ' ) ')\n  \
    \  bracket\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxzuxyl24.py\"\
    , line 58, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxzuxyl24.py\"\
    , line 56, in test_check\n    check(correct_bracketing)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxzuxyl24.py\"\
    , line 42, in check\n    assert candidate('()') == True\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxzuxyl24.py\"\
    , line 40, in correct_bracketing\n    bracket\nNameError: name 'bracket' is not\
    \ defined. Did you mean: 'brackets'?\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == \"(\":\n            stack.append(c)\n\
    \        elif c == \")\":\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets =\
    \ brackets.replace(\"(\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets\
    \ = brackets.replace(\"(\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets\
    \ = brackets.replace(\"(\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets\
    \ = brackets.replace(\"(\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets\
    \ = brackets.replace(\"(\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets\
    \ = brackets.replace(\"(\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets\
    \ = brackets.replace(\"(\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets\
    \ = brackets.replace(\"(\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets\
    \ = brackets.replace(\"(\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsmh4g5nj.py\"\
    , line 65, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsmh4g5nj.py\"\
    , line 63, in test_check\n    check(correct_bracketing)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsmh4g5nj.py\"\
    , line 49, in check\n    assert candidate('()') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for char in brackets:\n        if char == \"(\":\n            stack.append(char)\n\
    \        elif char == \")\":\n            if not stack:\n                return\
    \ False\n            else:\n                stack.pop()\n    return not stack\n\
    \n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets =\
    \ brackets.replace(\"(\", \"( \")\n    brackets = brackets.replace(\")\", \" )\"\
    )\n    brackets = brackets.replace(\"[\", \"[ \")\n    brackets = brackets.replace(\"\
    ]\", \" ]\")\n    brackets = brackets.replace(\"{\", \"{ \")\n    brackets = brackets.replace(\"\
    }\", \"} \")\n    brackets = brackets.replace(\"<\", \"< \")\n    brackets = brackets.replace(\"\
    >\", \" > \")\n    brackets = brackets.replace(\",\", \" , \")\n    brackets =\
    \ brackets.replace(\":\", \": \")\n    brackets = brackets.replace(\";\", \";\
    \ \")\n    brackets = brackets.replace(\"!\", \"! \")\n    brackets = brackets.replace(\"\
    ?\", \"? \")\n    brackets = brackets.replace(\"=\", \" = \")\n    brackets =\
    \ brackets.replace(\"+=\", \"+= \")\n    brackets = brackets.replace(\"-=\", \"\
    -= \")\n    brackets = brackets.replace(\"*=\", \"*= \")\n    brackets = brackets.replace(\"\
    /=\", \"/= \")\n    brackets = brackets.replace(\"%=\", \"%= \")\n    brackets\
    \ = brackets.replace(\"&=\", \"&= \")\n    brackets = brackets.replace(\"|=\"\
    , \"|= \")\n    brackets = brackets.replace(\"^=\", \"^= \")\n    brackets = brackets.replace(\"\
    ~=\", \"~= \")\n    brackets = brackets.replace(\"=\", \" = \")\n    brackets\
    \ = brackets.replace(\"!=\", \"!= \")\n    brackets = brackets.replace(\"<=\"\
    , \"<= \")\n    brackets = brackets.replace(\">=\", \" >= \")\n    brackets =\
    \ brackets.replace(\"==\", \"== \")\n    brackets = brackets.replace(\"!=\", \"\
    != \")\n    brackets = brackets.replace(\"<\", \" < \")\n    brackets = brackets.replace(\"\
    >\", \" > \")\n    brackets = brackets.replace(\"<=\", \"<= \")\n    brackets\
    \ = brackets.replace(\">=\", \" >= \")\n    brackets = brackets.replace(\"!=\"\
    , \"!= \")\n    brackets = brackets.replace(\"==\", \"== \")\n    brackets = brackets.replace(\"\
    =\", \" = \")\n    brackets = brackets.replace(\"+=\", \"+= \")\n    brackets\
    \ = brackets.replace(\"-=\", \"-= \")\n    brackets = brackets.replace(\"*=\"\
    , \"*= \")\n    brackets = brackets.replace(\"/=\", \"/= \")\n    brackets = brackets.replace(\"\
    %=\", \"%= \")\n    brackets = brackets.replace(\"&=\", \"&= \")\n    brackets\
    \ = brackets.replace(\"|=\", \"|= \")\n    brackets = brackets.replace(\"^=\"\
    , \"^\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptws2ozsv.py\"\
    , line 49\n    brackets = brackets.replace(\"^=\", \"^\n                     \
    \                 ^\nSyntaxError: unterminated string literal (detected at line\
    \ 49)\n"
  exit_code: 1
  status: SyntaxError
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == \"(\":\n            stack.append(c)\n\
    \        elif c == \")\":\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets_set\
    \ = set(brackets)\n    open_brackets = brackets_set.difference({\"(\", \")\"})\n\
    \    close_brackets = brackets_set.difference({\"(\", \")\"})\n    return len(open_brackets)\
    \ == 0 and len(close_brackets) == 0\n\n\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6_jldm1e.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6_jldm1e.py\"\
    , line 27, in test_check\n    check(correct_bracketing)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6_jldm1e.py\"\
    , line 17, in check\n    assert candidate('((()())))') == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == \"(\":\n            stack.append(c)\n\
    \        elif c == \")\":\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == \"(\":\n            stack.append(c)\n\
    \        elif c == \")\":\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets =\
    \ brackets.replace(\"(\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"<\", \"\").replace(\">\", \"\")\n\
    \    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    '\", \"\")\n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\"%\", \"\")\n    brackets = brackets.replace(\"\
    $\", \"\")\n    brackets = brackets.replace(\"&\", \"\")\n    brackets = brackets.replace(\"\
    *\", \"\")\n    brackets = brackets.replace(\"+\", \"\")\n    brackets = brackets.replace(\"\
    -\", \"\")\n    brackets = brackets.replace(\"^\", \"\")\n    brackets = brackets.replace(\"\
    ~\", \"\")\n    brackets = brackets.replace(\"_\", \"\")\n    brackets = brackets.replace(\"\
    <\", \"\").replace(\">\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n\
    \    brackets = brackets.replace(\"<\", \"\").replace(\">\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"<\", \"\").replace(\"\
    >\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets\
    \ = brackets.replace(\"<\", \"\").replace(\">\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"<\", \"\").replace(\">\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    <\", \"\").replace(\">\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n\
    \    brackets = brackets.replace(\"<\", \"\").replace(\">\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"<\", \"\").replace(\"\
    >\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets\
    \ = brackets.replace(\"<\", \"\").replace(\">\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpltnft46g.py\"\
    , line 51\n    brackets = brackets.replace(\"\n                              \
    \  ^\nSyntaxError: unterminated string literal (detected at line 51)\n"
  exit_code: 1
  status: SyntaxError
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == \"(\":\n            stack.append(c)\n\
    \        elif c == \")\":\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == \"(\":\n            stack.append(c)\n\
    \        elif c == \")\":\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets =\
    \ brackets.replace(\"(\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"<\", \"\").replace(\">\", \"\")\n\
    \    brackets = brackets.replace(\",\", \"\").replace(\";\", \"\")\n    brackets\
    \ = brackets.replace(\":\", \"\").replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\").replace(\"!\", \"\")\n    brackets = brackets.replace(\"?\", \"\").replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\",\", \"\").replace(\";\", \"\")\n\
    \    brackets = brackets.replace(\":\", \"\").replace(\":\", \"\")\n    brackets\
    \ = brackets.replace(\"!\", \"\").replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\").replace(\"?\", \"\")\n    brackets = brackets.replace(\",\", \"\").replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\").replace(\":\", \"\")\n\
    \    brackets = brackets.replace(\"!\", \"\").replace(\"!\", \"\")\n    brackets\
    \ = brackets.replace(\"?\", \"\").replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\").replace(\";\", \"\")\n    brackets = brackets.replace(\":\", \"\").replace(\"\
    :\", \"\")\n    brackets = brackets.replace(\"!\", \"\").replace(\"!\", \"\")\n\
    \    brackets = brackets.replace(\"?\", \"\").replace(\"?\", \"\")\n    brackets\
    \ = brackets.replace(\",\", \"\").replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\").replace(\":\", \"\")\n    brackets = brackets.replace(\"!\", \"\").replace(\"\
    !\", \"\")\n    brackets = brackets.replace(\"?\", \"\").replace(\"?\", \"\")\n\
    \    brackets = brackets.replace(\",\", \"\").replace(\";\", \"\")\n    brackets\
    \ = brackets.replace(\":\", \"\").replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\").replace(\"!\", \"\")\n    brackets = brackets.replace(\"?\", \"\").replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\",\", \"\").replace(\";\", \"\")\n\
    \    brackets = brackets.replace(\":\", \"\").replace(\":\", \"\")\n    brackets\
    \ = brackets.replace(\"!\", \"\").replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\").replace(\"?\", \"\")\n    brackets = brackets.replace(\",\", \"\").replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\").replace(\":\", \"\")\n\
    \    brackets = brackets.replace(\"!\", \"\").replace(\"!\", \"\")\n    brackets\
    \ = brackets.replace(\"?\", \"\").replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\").replace(\";\", \"\")\n    brackets = brackets.replace(\":\", \"\").replace(\"\
    :\", \"\")\n    brackets = brackets.replace(\"!\", \"\").replace(\"!\", \"\")\n\
    \    brackets = brackets.replace(\"?\", \"\").replace(\"?\", \"\")\n    brackets\
    \ = brackets.replace(\",\", \"\").replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\").replace(\":\", \"\")\n    brackets = brackets.replace(\"\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpryenq34r.py\"\
    , line 48\n    brackets = brackets.replace(\"\n                              \
    \  ^\nSyntaxError: unterminated string literal (detected at line 48)\n"
  exit_code: 1
  status: SyntaxError
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets =\
    \ brackets.replace(\"(\", \"-LRB-\")\n    brackets = brackets.replace(\")\", \"\
    -RRB-\")\n    brackets = brackets.replace(\"[\", \"-LRB-\")\n    brackets = brackets.replace(\"\
    ]\", \"-RRB-\")\n    brackets = brackets.replace(\"{\", \"-LRB-\")\n    brackets\
    \ = brackets.replace(\"}\", \"-RRB-\")\n    brackets = brackets.replace(\"<\"\
    , \"-LRB-\")\n    brackets = brackets.replace(\">\", \"-RRB-\")\n    brackets\
    \ = brackets.replace(\",\", \"-COMMA-\")\n    brackets = brackets.replace(\":\"\
    , \"-COLON-\")\n    brackets = brackets.replace(\";\", \"-SEMICOLON-\")\n    brackets\
    \ = brackets.replace(\"!\", \"-EXCLAMATION-\")\n    brackets = brackets.replace(\"\
    ?\", \"-QUESTION-\")\n    brackets = brackets.replace(\"%\", \"-PERCENT-\")\n\
    \    brackets = brackets.replace(\"$\", \"-DOLLAR-\")\n    brackets = brackets.replace(\"\
    &\", \"-AMPERSAND-\")\n    brackets = brackets.replace(\"*\", \"-STAR-\")\n  \
    \  brackets = brackets.replace(\"(\", \"-LRB-\")\n    brackets = brackets.replace(\"\
    )\", \"-RRB-\")\n    brackets = brackets.replace(\"[\", \"-LRB-\")\n    brackets\
    \ = brackets.replace(\"]\", \"-RRB-\")\n    brackets = brackets.replace(\"{\"\
    , \"-LRB-\")\n    brackets = brackets.replace(\"}\", \"-RRB-\")\n    brackets\
    \ = brackets.replace(\"<\", \"-LRB-\")\n    brackets = brackets.replace(\">\"\
    , \"-RRB-\")\n    brackets = brackets.replace(\",\", \"-COMMA-\")\n    brackets\
    \ = brackets.replace(\":\", \"-COLON-\")\n    brackets = brackets.replace(\";\"\
    , \"-SEMICOLON-\")\n    brackets = brackets.replace(\"!\", \"-EXCLAMATION-\")\n\
    \    brackets = brackets.replace(\"?\", \"-QUESTION-\")\n    brackets = brackets.replace(\"\
    %\", \"-PERCENT-\")\n    brackets = brackets.replace(\"$\", \"-DOLLAR-\")\n  \
    \  brackets = brackets.replace(\"&\", \"-AMPERSAND-\")\n    brackets = brackets.replace(\"\
    *\", \"-STAR-\")\n    brackets = brackets.replace(\"(\", \"-LRB-\")\n    brackets\
    \ = brackets.replace(\")\", \"-RRB-\")\n    brackets = brackets.replace(\"[\"\
    , \"-LRB-\")\n    brackets = brackets.replace(\"]\", \"-RRB-\")\n    brackets\
    \ = brackets.replace(\"{\", \"-LRB-\")\n    brackets = brackets.replace(\"}\"\
    , \"-RRB-\")\n    brackets = brackets.replace(\"<\", \"-LRB-\")\n    brackets\
    \ = brackets.\ndef check(candidate):\n    assert candidate('()') == True\n   \
    \ assert candidate('(()())') == True\n    assert candidate('()()(()())()') ==\
    \ True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp94zpau59.py\"\
    , line 47\n    brackets = brackets.\n                        ^\nSyntaxError: invalid\
    \ syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == \"(\":\n            stack.append(c)\n\
    \        elif c == \")\":\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for char in brackets:\n        if char == '(':\n            stack.append(char)\n\
    \        elif char == ')':\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets =\
    \ brackets.replace(\"(\", \"\")\n    brackets = brackets.replace(\")\", \"\")\n\
    \    brackets = brackets.replace(\"[\", \"\")\n    brackets = brackets.replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\")\n    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    <\", \"\")\n    brackets = brackets.replace(\">\", \"\")\n    brackets = brackets.replace(\"\
    ~\", \"\")\n    brackets = brackets.replace(\"@\", \"\")\n    brackets = brackets.replace(\"\
    $\", \"\")\n    brackets = brackets.replace(\"%\", \"\")\n    brackets = brackets.replace(\"\
    ^\", \"\")\n    brackets = brackets.replace(\"&\", \"\")\n    brackets = brackets.replace(\"\
    *\", \"\")\n    brackets = brackets.replace(\"(\", \"\")\n    brackets = brackets.replace(\"\
    )\", \"\")\n    brackets = brackets.replace(\"[\", \"\")\n    brackets = brackets.replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\")\n    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    <\", \"\")\n    brackets = brackets.replace(\">\", \"\")\n    brackets = brackets.replace(\"\
    ~\", \"\")\n    brackets = brackets.replace(\"@\", \"\")\n    brackets = brackets.replace(\"\
    $\", \"\")\n    brackets = brackets.replace(\"%\", \"\")\n    brackets = brackets.replace(\"\
    ^\", \"\")\n    brackets = brackets.replace(\"&\", \"\")\n    brackets = brackets.replace(\"\
    *\", \"\")\n    brackets = brackets.replace(\"(\", \"\")\n    brackets = brackets.replace(\"\
    )\", \"\")\n    brackets = brackets.replace(\"[\", \"\")\n    brackets = brackets.replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\")\n    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    <\", \"\")\n    brackets = brackets.replace(\">\", \"\")\n    brackets = brackets.replace(\"\
    ~\", \"\")\n    brackets = brackets.replace(\"@\", \"\")\n    brackets = brackets.replace(\"\
    $\", \"\")\n    brackets = brackets.replace(\"%\", \"\")\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvv9_xuul.py\"\
    , line 80, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvv9_xuul.py\"\
    , line 78, in test_check\n    check(correct_bracketing)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvv9_xuul.py\"\
    , line 64, in check\n    assert candidate('()') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == \"(\":\n            stack.append(c)\n\
    \        elif c == \")\":\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for char in brackets:\n        if char == \"(\":\n            stack.append(char)\n\
    \        elif char == \")\":\n            if len(stack) == 0:\n              \
    \  return False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets =\
    \ brackets.replace(\"(\", \"( \")\n    brackets = brackets.replace(\")\", \" )\"\
    )\n    brackets = brackets.replace(\"[\", \"[ \")\n    brackets = brackets.replace(\"\
    ]\", \" ]\")\n    brackets = brackets.replace(\"{\", \"{ \")\n    brackets = brackets.replace(\"\
    }\", \"} \")\n    brackets = brackets.replace(\"<\", \"< \")\n    brackets = brackets.replace(\"\
    >\", \" > \")\n    brackets = brackets.replace(\",\", \" , \")\n    brackets =\
    \ brackets.replace(\":\", \": \")\n    brackets = brackets.replace(\";\", \";\
    \ \")\n    brackets = brackets.replace(\"?\", \"? \")\n    brackets = brackets.replace(\"\
    !\", \"! \")\n    brackets = brackets.replace(\"=\", \" = \")\n    brackets =\
    \ brackets.replace(\"+\", \"+ \")\n    brackets = brackets.replace(\"-\", \"-\
    \ \")\n    brackets = brackets.replace(\"*\", \"* \")\n    brackets = brackets.replace(\"\
    (\", \"( \")\n    brackets = brackets.replace(\")\", \" )\")\n    brackets = brackets.replace(\"\
    [\", \"[ \")\n    brackets = brackets.replace(\"]\", \" ]\")\n    brackets = brackets.replace(\"\
    {\", \"{ \")\n    brackets = brackets.replace(\"}\", \"} \")\n    brackets = brackets.replace(\"\
    <\", \"< \")\n    brackets = brackets.replace(\">\", \" > \")\n    brackets =\
    \ brackets.replace(\",\", \" , \")\n    brackets = brackets.replace(\":\", \"\
    : \")\n    brackets = brackets.replace(\";\", \"; \")\n    brackets = brackets.replace(\"\
    ?\", \"? \")\n    brackets = brackets.replace(\"!\", \"! \")\n    brackets = brackets.replace(\"\
    =\", \" = \")\n    brackets = brackets.replace(\"+\", \"+ \")\n    brackets =\
    \ brackets.replace(\"-\", \"- \")\n    brackets = brackets.replace(\"*\", \"*\
    \ \")\n    brackets = brackets.replace(\"(\", \"( \")\n    brackets = brackets.replace(\"\
    )\", \" )\")\n    brackets = brackets.replace(\"[\", \"[ \")\n    brackets = brackets.replace(\"\
    ]\", \" ]\")\n    brackets = brackets.replace(\"{\", \"{ \")\n    brackets = brackets.replace(\"\
    }\", \"} \")\n    brackets = brackets.replace(\"<\", \"< \")\n    brackets = brackets.replace(\"\
    >\", \" > \")\n    brackets = brackets.replace(\",\", \" , \")\n    brackets =\
    \ brackets.replace(\":\", \": \")\n    brackets = brackets.replace(\";\", \";\
    \ \")\n    brackets = brackets.replace(\"?\", \"? \")\n    brackets = brackets.replace(\"\
    \ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphx5gk0c2.py\"\
    , line 52\n    brackets = brackets.replace(\"\n                              \
    \  ^\nSyntaxError: unterminated string literal (detected at line 52)\n"
  exit_code: 1
  status: SyntaxError
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for char in brackets:\n        if char == \"(\":\n            stack.append(char)\n\
    \        elif char == \")\":\n            if len(stack) == 0:\n              \
    \  return False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == \"(\":\n            stack.append(c)\n\
    \        elif c == \")\":\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for char in brackets:\n        if char == '(':\n            stack.append(char)\n\
    \        elif char == ')':\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == \"(\":\n            stack.append(c)\n\
    \        elif c == \")\":\n            if not stack:\n                return False\n\
    \            top = stack.pop()\n            if top != c:\n                return\
    \ False\n    return not stack\n\n\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpspyzd5aq.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpspyzd5aq.py\"\
    , line 34, in test_check\n    check(correct_bracketing)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpspyzd5aq.py\"\
    , line 20, in check\n    assert candidate('()') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == '(':\n            stack.append(c)\n \
    \       elif c == ')':\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets =\
    \ brackets.replace(\"(\", \"( \")\n    brackets = brackets.replace(\")\", \" )\"\
    )\n    brackets = brackets.replace(\"[\", \"[ \")\n    brackets = brackets.replace(\"\
    ]\", \" ]\")\n    brackets = brackets.replace(\"{\", \"{ \")\n    brackets = brackets.replace(\"\
    }\", \"} \")\n    brackets = brackets.replace(\"<\", \"< \")\n    brackets = brackets.replace(\"\
    >\", \" > \")\n    brackets = brackets.replace(\"!\", \"! \")\n    brackets =\
    \ brackets.replace(\"?\", \"? \")\n    brackets = brackets.replace(\",\", \",\
    \ \")\n    brackets = brackets.replace(\":\", \": \")\n    brackets = brackets.replace(\"\
    ;\", \"; \")\n    brackets = brackets.replace(\":\", \": \")\n    brackets = brackets.replace(\"\
    =\", \" = \")\n    brackets = brackets.replace(\"+\", \"+ \")\n    brackets =\
    \ brackets.replace(\"-\", \"- \")\n    brackets = brackets.replace(\"*\", \"*\
    \ \")\n    brackets = brackets.replace(\"&\", \"& \")\n    brackets = brackets.replace(\"\
    ^\", \"^ \")\n    brackets = brackets.replace(\"~\", \"~ \")\n    brackets = brackets.replace(\"\
    @\", \"@ \")\n    brackets = brackets.replace(\"|\", \"| \")\n    brackets = brackets.replace(\"\
    ~\", \"~ \")\n    brackets = brackets.replace(\"!\", \"! \")\n    brackets = brackets.replace(\"\
    ?\", \"? \")\n    brackets = brackets.replace(\"=\", \" = \")\n    brackets =\
    \ brackets.replace(\"+\", \"+ \")\n    brackets = brackets.replace(\"-\", \"-\
    \ \")\n    brackets = brackets.replace(\"*\", \"* \")\n    brackets = brackets.replace(\"\
    &\", \"& \")\n    brackets = brackets.replace(\"^\", \"^ \")\n    brackets = brackets.replace(\"\
    ~\", \"~ \")\n    brackets = brackets.replace(\"@\", \"@ \")\n    brackets = brackets.replace(\"\
    |\", \"| \")\n    brackets = brackets.replace(\"~\", \"~ \")\n    brackets = brackets.replace(\"\
    !\", \"! \")\n    brackets = brackets.replace(\"?\", \"? \")\n    brackets = brackets.replace(\"\
    =\", \" = \")\n    brackets = brackets.replace(\"+\", \"+ \")\n    brackets =\
    \ brackets.replace(\"-\", \"- \")\n    brackets = brackets.replace(\"*\", \"*\
    \ \")\n    brackets = brackets.replace(\"&\", \"& \")\n    brackets = brackets.replace(\"\
    ^\", \"^ \")\n    brackets = brackets.replace(\"~\", \"~ \")\n    brackets = brackets.replace(\"\
    @\", \"@ \")\n    brackets = brackets.replace(\"|\", \"\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpk7c7f2rj.py\"\
    , line 52\n    brackets = brackets.replace(\"|\", \"\n                       \
    \              ^\nSyntaxError: unterminated string literal (detected at line 52)\n"
  exit_code: 1
  status: SyntaxError
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets =\
    \ brackets.replace('(', '')\n    brackets = brackets.replace(')', '')\n    brackets\
    \ = brackets.replace('[', '')\n    brackets = brackets.replace(']', '')\n    brackets\
    \ = brackets.split(',')\n    brackets = [x.strip() for x in brackets]\n    brackets\
    \ = [x for x in brackets if x]\n    brackets = [x for x in brackets if x != '']\n\
    \    brackets = [x for x in brackets if x != '()']\n    brackets = [x for x in\
    \ brackets if x != '[]']\n    brackets = [x for x in brackets if x != '{}']\n\
    \    brackets = [x for x in brackets if x != '{}[]']\n    brackets = [x for x\
    \ in brackets if x != '{}{}']\n    brackets = [x for x in brackets if x != '{}{}[]']\n\
    \    brackets = [x for x in brackets if x != '{}{}{}']\n    brackets = [x for\
    \ x in brackets if x != '{}{}{}[]']\n    brackets = [x for x in brackets if x\
    \ != '{}{}{}{}']\n    brackets = [x for x in brackets if x != '{}{}{}{}[]']\n\
    \    brackets = [x for x in brackets if x != '{}{}{}{}{}{}']\n    brackets = [x\
    \ for x in brackets if x != '{}{}{}{}{}{}[]']\n    brackets = [x for x in brackets\
    \ if x != '{}{}{}{}{}{}{}{}']\n    brackets = [x for x in brackets if x != '{}{}{}{}{}{}{}[]']\n\
    \    brackets = [x for x in brackets if x != '{}{}{}{}{}{}{}{}{}']\n    brackets\
    \ = [x for x in brackets if x != '{}{}{}{}{}{}{}{}{}[]']\n    brackets = [x for\
    \ x in brackets if x != '{}{}{}{}{}{}{}{}{}{}{}']\n    brackets = [x for x in\
    \ brackets if x != '{}{}{}{}{}{}{}{}{}{}{}[]']\n    brackets = [x for x in brackets\
    \ if x != '{}{}{}{}{}{}{}{}{}{}{}{}']\n    brackets = [x for x in brackets if\
    \ x != '{}{}{}{}{}{}{}{}{}{}{}{}[]']\n    brackets = [x for x in brackets if x\
    \ != '{}{}{}{}{}{}{}{}{}{}{}{}{}']\n    brackets = [x for x in brackets if x !=\
    \ '{}{}{}{}{}{}{}{}{}{}{}{}{}[]']\n    brackets = [x for x in brackets if x !=\
    \ '{}{}{}{}{}{}{}{}{}{}{}{}{}{}']\n    brackets = [x for x in brackets if x !=\
    \ '{}{}{}{}{}{}{}{}{}{}{}{}{}[]']\n    brackets = [x for x in brackets if x !=\
    \ '{}{}{}{}{}{}{}{}{}{}{}{}{}{}']\n    \ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsxyjbpe3.py\"\
    , line 57, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsxyjbpe3.py\"\
    , line 55, in test_check\n    check(correct_bracketing)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsxyjbpe3.py\"\
    , line 41, in check\n    assert candidate('()') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == '(':\n            stack.append(c)\n \
    \       elif c == ')':\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets_set\
    \ = set(brackets)\n    opening_brackets = {x for x in brackets_set if brackets.count(x)\
    \ > 1}\n    closing_brackets = {x for x in brackets_set if brackets.count(x) ==\
    \ 1}\n    return len(opening_brackets) == len(closing_brackets)\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpaim09s9b.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpaim09s9b.py\"\
    , line 27, in test_check\n    check(correct_bracketing)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpaim09s9b.py\"\
    , line 13, in check\n    assert candidate('()') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == '(':\n            stack.append(c)\n \
    \       elif c == ')':\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets_set\
    \ = set(brackets)\n    opening_brackets = set([\"(\"])\n    closing_brackets =\
    \ set([\")\"])\n    return brackets_set == opening_brackets and brackets_set ==\
    \ closing_brackets\n\n\ndef check(candidate):\n    assert candidate('()') == True\n\
    \    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsz4apdvq.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsz4apdvq.py\"\
    , line 27, in test_check\n    check(correct_bracketing)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsz4apdvq.py\"\
    , line 13, in check\n    assert candidate('()') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == \"(\":\n            stack.append(c)\n\
    \        elif c == \")\":\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets =\
    \ brackets.replace(\"(\", \"\").replace(\")\", \"\")\n    brackets = brackets.split(\"\
    ,\")\n    brackets = [bracket for bracket in brackets if bracket]\n    brackets\
    \ = [bracket for bracket in brackets if bracket[0] != \"(\" and bracket[-1] !=\
    \ \")\"]\n    return len(brackets) == 0\n\n\ndef check(candidate):\n    assert\
    \ candidate('()') == True\n    assert candidate('(()())') == True\n    assert\
    \ candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuddlrp4n.py\"\
    , line 30, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuddlrp4n.py\"\
    , line 28, in test_check\n    check(correct_bracketing)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuddlrp4n.py\"\
    , line 18, in check\n    assert candidate('((()())))') == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == \"(\":\n            stack.append(c)\n\
    \        elif c == \")\":\n            if not stack:\n                return False\n\
    \            else:\n                stack.pop()\n    return not stack\n\n\ndef\
    \ check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for char in brackets:\n        if char == \"(\":\n            stack.append(char)\n\
    \        elif char == \")\":\n            if len(stack) == 0:\n              \
    \  return False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == \"(\":\n            stack.append(c)\n\
    \        elif c == \")\":\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for char in brackets:\n        if char == '(':\n            stack.append(char)\n\
    \        elif char == ')':\n            if len(stack) == 0:\n                return\
    \ False\n            stack.pop()\n        else:\n            return False\n  \
    \  return len(stack) == 0\n\n\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets =\
    \ brackets.replace('(', ' ( ').replace(')', ' ) ')\n    brackets = brackets.replace('(',\
    \ ' ( ').replace(')', ' ) ')\n    brackets = brackets.replace('(', ' ( ').replace(')',\
    \ ' ) ')\n    brackets = brackets.replace('(', ' ( ').replace(')', ' ) ')\n  \
    \  brackets = brackets.replace('(', ' ( ').replace(')', ' ) ')\n    brackets =\
    \ brackets.replace('(', ' ( ').replace(')', ' ) ')\n    brackets = brackets.replace('(',\
    \ ' ( ').replace(')', ' ) ')\n    brackets = brackets.replace('(', ' ( ').replace(')',\
    \ ' ) ')\n    brackets = brackets.replace('(', ' ( ').replace(')', ' ) ')\n  \
    \  brackets = brackets.replace('(', ' ( ').replace(')', ' ) ')\n    brackets =\
    \ brackets.replace('(', ' ( ').replace(')', ' ) ')\n    brackets = brackets.replace('(',\
    \ ' ( ').replace(')', ' ) ')\n    brackets = brackets.replace('(', ' ( ').replace(')',\
    \ ' ) ')\n    brackets = brackets.replace('(', ' ( ').replace(')', ' ) ')\n  \
    \  brackets = brackets.replace('(', ' ( ').replace(')', ' ) ')\n    brackets =\
    \ brackets.replace('(', ' ( ').replace(')', ' ) ')\n    brackets = brackets.replace('(',\
    \ ' ( ').replace(')', ' ) ')\n    brackets = brackets.replace('(', ' ( ').replace(')',\
    \ ' ) ')\n    brackets = brackets.replace('(', ' ( ').replace(')', ' ) ')\n  \
    \  brackets = brackets.replace('(', ' ( ').replace(')', ' ) ')\n    brackets =\
    \ brackets.replace('(', ' ( ').replace(')', ' ) ')\n    brackets = brackets.replace('(',\
    \ ' ( ').replace(')', ' ) ')\n    brackets = brackets.replace('(', ' ( ').replace(')',\
    \ ' ) ')\n    brackets = brackets.replace('(', ' ( ').replace(')', ' ) ')\n  \
    \  brackets = brackets.replace('(', ' ( ').replace(')', ' ) ')\n    brackets =\
    \ brackets.replace('(', ' ( ').replace(')', ' ) ')\n    brackets = brackets.replace('(',\
    \ ' ( ').replace(')', ' ) ')\n    brackets = brackets.replace('(', ' ( ').replace(')',\
    \ ' ) ')\n    brackets = brackets.replace('(', ' ( ').replace(')', ' ) ')\n  \
    \  brackets = brackets.replace('(', ' ( ').replace(')', ' ) ')\n    brackets =\
    \ brackets.replace('(', ' ( ').replace(')', ' ) ')\n    brackets = brackets.replace('(',\
    \ ' ( ').replace(')', ' ) ')\n    brackets = brackets.replace('(', ' ( ').replace(')',\
    \ ' ) ')\n    brackets = brackets.replace('(', ' ( ').replace(')', ' ) ')\n  \
    \  bracket\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7astx9yx.py\"\
    , line 58, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7astx9yx.py\"\
    , line 56, in test_check\n    check(correct_bracketing)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7astx9yx.py\"\
    , line 42, in check\n    assert candidate('()') == True\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7astx9yx.py\"\
    , line 40, in correct_bracketing\n    bracket\nNameError: name 'bracket' is not\
    \ defined. Did you mean: 'brackets'?\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets =\
    \ brackets.replace(\"(\", \"\")\n    brackets = brackets.replace(\")\", \"\")\n\
    \    brackets = brackets.replace(\"[\", \"\")\n    brackets = brackets.replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    '\", \"\")\n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\"<\", \"\")\n    brackets = brackets.replace(\"\
    >\", \"\")\n    brackets = brackets.replace(\"~\", \"\")\n    brackets = brackets.replace(\"\
    ^\", \"\")\n    brackets = brackets.replace(\"%\", \"\")\n    brackets = brackets.replace(\"\
    $\", \"\")\n    brackets = brackets.replace(\"&\", \"\")\n    brackets = brackets.replace(\"\
    *\", \"\")\n    brackets = brackets.replace(\"(\", \"\")\n    brackets = brackets.replace(\"\
    )\", \"\")\n    brackets = brackets.replace(\"[\", \"\")\n    brackets = brackets.replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    '\", \"\")\n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\"<\", \"\")\n    brackets = brackets.replace(\"\
    >\", \"\")\n    brackets = brackets.replace(\"~\", \"\")\n    brackets = brackets.replace(\"\
    ^\", \"\")\n    brackets = brackets.replace(\"%\", \"\")\n    brackets = brackets.replace(\"\
    $\", \"\")\n    brackets = brackets.replace(\"&\", \"\")\n    brackets = brackets.replace(\"\
    *\", \"\")\n    brackets = brackets.replace(\"(\", \"\")\n    brackets = brackets.replace(\"\
    )\", \"\")\n    brackets = brackets.replace(\"[\", \"\")\n    brackets = brackets.replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    '\", \"\")\n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\"<\", \"\")\n    brackets = brackets.replace(\"\
    >\", \"\")\n    brackets = brackets.replace(\"~\", \"\")\n    brackets = brackets.replace(\"\
    ^\", \"\")\n    brackets = brackets.replace(\"%\", \"\")\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8ao18a5e.py\"\
    , line 80, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8ao18a5e.py\"\
    , line 78, in test_check\n    check(correct_bracketing)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8ao18a5e.py\"\
    , line 64, in check\n    assert candidate('()') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets =\
    \ brackets.strip()\n    stack = []\n    for char in brackets:\n        if char\
    \ == '(':\n            stack.append(char)\n        elif char == ')':\n       \
    \     if not stack:\n                return False\n            top = stack.pop()\n\
    \            if top != char:\n                return False\n    return not stack\n\
    \n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppbe15227.py\"\
    , line 37, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppbe15227.py\"\
    , line 35, in test_check\n    check(correct_bracketing)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppbe15227.py\"\
    , line 21, in check\n    assert candidate('()') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == \"(\":\n            stack.append(c)\n\
    \        elif c == \")\":\n            if not stack:\n                return False\n\
    \            else:\n                stack.pop()\n    return not stack\n\n\ndef\
    \ check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets =\
    \ brackets.replace(\"(\", \"\")\n    brackets = brackets.replace(\")\", \"\")\n\
    \    brackets = brackets.replace(\"[\", \"\")\n    brackets = brackets.replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    '\", \"\")\n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\"<\", \"\")\n    brackets = brackets.replace(\"\
    >\", \"\")\n    brackets = brackets.replace(\"~\", \"\")\n    brackets = brackets.replace(\"\
    ^\", \"\")\n    brackets = brackets.replace(\"%\", \"\")\n    brackets = brackets.replace(\"\
    $\", \"\")\n    brackets = brackets.replace(\"*\", \"\")\n    brackets = brackets.replace(\"\
    &\", \"\")\n    brackets = brackets.replace(\"%\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\")\n    brackets = brackets.replace(\")\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\")\n    brackets = brackets.replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\")\n    brackets = brackets.replace(\"'\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\")\n    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    <\", \"\")\n    brackets = brackets.replace(\">\", \"\")\n    brackets = brackets.replace(\"\
    ~\", \"\")\n    brackets = brackets.replace(\"^\", \"\")\n    brackets = brackets.replace(\"\
    %\", \"\")\n    brackets = brackets.replace(\"$\", \"\")\n    brackets = brackets.replace(\"\
    *\", \"\")\n    brackets = brackets.replace(\"&\", \"\")\n    brackets = brackets.replace(\"\
    %\", \"\")\n    brackets = brackets.replace(\"(\", \"\")\n    brackets = brackets.replace(\"\
    )\", \"\")\n    brackets = brackets.replace(\"[\", \"\")\n    brackets = brackets.replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    '\", \"\")\n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\"<\", \"\")\n    brackets = brackets.replace(\"\
    >\", \"\")\n    brackets = brackets.replace(\"~\", \"\")\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp96ksqnhw.py\"\
    , line 80, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp96ksqnhw.py\"\
    , line 78, in test_check\n    check(correct_bracketing)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp96ksqnhw.py\"\
    , line 64, in check\n    assert candidate('()') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == \"(\":\n            stack.append(c)\n\
    \        elif c == \")\":\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == \"(\":\n            stack.append(c)\n\
    \        elif c == \")\":\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == '(':\n            stack.append(c)\n \
    \       elif c == ')':\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets =\
    \ brackets.replace(\"(\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"<\", \"\").replace(\">\", \"\")\n\
    \    brackets = brackets.replace(\",\", \"\").replace(\":\", \"\").replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\"!\", \"\").replace(\"?\", \"\")\n\
    \    brackets = brackets.replace(\"'\", \"\").replace(\"\\\"\", \"\")\n    brackets\
    \ = brackets.replace(\"\\\"\", \"\")\n    brackets = brackets.replace(\"\\\\\"\
    , \"\")\n    brackets = brackets.replace(\"%\", \"\")\n    brackets = brackets.replace(\"\
    $\", \"\")\n    brackets = brackets.replace(\"&\", \"\")\n    brackets = brackets.replace(\"\
    *\", \"\")\n    brackets = brackets.replace(\"+\", \"\")\n    brackets = brackets.replace(\"\
    =\", \"\")\n    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\").replace(\";\", \"\")\n    brackets = brackets.replace(\"<\", \"\").replace(\"\
    >\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    <\", \"\").replace(\">\", \"\")\n    brackets = brackets.replace(\",\", \"\").replace(\"\
    :\", \"\").replace(\";\", \"\")\n    brackets = brackets.replace(\"!\", \"\").replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\"'\", \"\").replace(\"\\\"\", \"\"\
    )\n    brackets = brackets.replace(\"\\\"\", \"\")\n    brackets = brackets.replace(\"\
    \\\\\", \"\")\n    brackets = brackets.replace(\"%\", \"\")\n    brackets = brackets.replace(\"\
    $\", \"\")\n    brackets = brackets.replace(\"&\", \"\")\n    brackets = brackets.replace(\"\
    *\", \"\")\n    brackets = brackets.replace(\"+\", \"\")\n    brackets = brackets.replace(\"\
    =\", \"\")\n    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\").replace(\";\", \"\")\n    brackets = brackets.replace(\"<\", \"\").replace(\"\
    >\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    <\", \"\").replace(\">\", \"\")\n    brackets = brackets.replace(\",\", \"\").replace(\"\
    :\", \"\").replace(\";\", \"\")\n    brackets = brackets.replace(\"!\", \"\").replace(\"\
    ?\", \"\")\n    brackets = brackets.\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp77mq78cb.py\"\
    , line 52\n    brackets = brackets.\n                        ^\nSyntaxError: invalid\
    \ syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets =\
    \ brackets.replace('(', '').replace(')', '')\n    brackets = brackets.split(',')\n\
    \    brackets = [x for x in brackets if x]\n    brackets = [x for x in brackets\
    \ if x != '']\n    brackets = [x for x in brackets if x != '{}']\n    brackets\
    \ = [x for x in brackets if x != '[]']\n    brackets = [x for x in brackets if\
    \ x != '()']\n    brackets = [x for x in brackets if x != '[]{}']\n    brackets\
    \ = [x for x in brackets if x != '{}[]']\n    brackets = [x for x in brackets\
    \ if x != '()()']\n    brackets = [x for x in brackets if x != '[]{}()']\n   \
    \ brackets = [x for x in brackets if x != '{}[]()']\n    brackets = [x for x in\
    \ brackets if x != '(){}']\n    brackets = [x for x in brackets if x != '[]{}()']\n\
    \    brackets = [x for x in brackets if x != '{}[]()']\n    brackets = [x for\
    \ x in brackets if x != '(){}[]']\n    brackets = [x for x in brackets if x !=\
    \ '[]{}()[]']\n    brackets = [x for x in brackets if x != '{}[](){}']\n    brackets\
    \ = [x for x in brackets if x != '(){}[]{}']\n    brackets = [x for x in brackets\
    \ if x != '[]{}(){}[]']\n    brackets = [x for x in brackets if x != '{}[](){}[]']\n\
    \    brackets = [x for x in brackets if x != '(){}[]{}[]']\n    brackets = [x\
    \ for x in brackets if x != '[]{}(){}[]{}']\n    brackets = [x for x in brackets\
    \ if x != '{}[](){}[]{}']\n    brackets = [x for x in brackets if x != '(){}[]{}[]{}']\n\
    \    brackets = [x for x in brackets if x != '[]{}(){}[]{}{}']\n    brackets =\
    \ [x for x in brackets if x != '{}[](){}[]{}{}']\n    brackets = [x for x in brackets\
    \ if x != '(){}[]{}[]{}{}']\n    brackets = [x for x in brackets if x != '[]{}(){}[]{}{}{}']\n\
    \    brackets = [x for x in brackets if x != '{}[](){}[]{}{}{}']\n    brackets\
    \ = [x for x in brackets if x != '(){}[]{}[]{}{}{}']\n    brackets = [x for x\
    \ in brackets if x != '[]{}(){}[]{}{}{}{}']\n    brackets = [x for x in brackets\
    \ if x != '{}[](){}[]{}{}{}{}']\n    brackets = [x for x in brackets if x != '(){}[]{}[]{}{}{}{}']\n\
    \    brackets = [x for x in brackets if x != '[]{}(){}[]{}{}{}{}{}']\n    brackets\
    \ = [x for x in brackets if x != '{}[](){}\ndef check(candidate):\n    assert\
    \ candidate('()') == True\n    assert candidate('(()())') == True\n    assert\
    \ candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnh07ugw7.py\"\
    , line 41\n    brackets = [x for x in brackets if x != '{}[](){}\n           \
    \                                 ^\nSyntaxError: unterminated string literal\
    \ (detected at line 41)\n"
  exit_code: 1
  status: SyntaxError
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == \"(\":\n            stack.append(c)\n\
    \        elif c == \")\":\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == \"(\":\n            stack.append(c)\n\
    \        elif c == \")\":\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets_set\
    \ = set(brackets)\n    stack = []\n    for c in brackets:\n        if c == '(':\n\
    \            stack.append(c)\n        elif c == ')':\n            if len(stack)\
    \ == 0:\n                return False\n            else:\n                stack.pop()\n\
    \    return len(stack) == 0\n\n\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for char in brackets:\n        if char == '(':\n            stack.append(char)\n\
    \        elif char == ')':\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets =\
    \ brackets.replace(\"(\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"<\", \"\").replace(\">\", \"\")\n\
    \    brackets = brackets.replace(\",\", \"\").replace(\":\", \"\")\n    brackets\
    \ = brackets.replace(\";\", \"\").replace(\"'\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\").replace(\"?\", \"\")\n    brackets = brackets.replace(\"\\\"\", \"\"\
    )\n    brackets = brackets.replace(\"%\", \"\")\n    brackets = brackets.replace(\"\
    $\", \"\")\n    brackets = brackets.replace(\"&\", \"\")\n    brackets = brackets.replace(\"\
    *\", \"\")\n    brackets = brackets.replace(\"+\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\")\n    brackets = brackets.replace(\")\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\")\n    brackets = brackets.replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    <\", \"\")\n    brackets = brackets.replace(\">\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\"'\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\")\n    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    \\\"\", \"\")\n    brackets = brackets.replace(\"%\", \"\")\n    brackets = brackets.replace(\"\
    $\", \"\")\n    brackets = brackets.replace(\"&\", \"\")\n    brackets = brackets.replace(\"\
    *\", \"\")\n    brackets = brackets.replace(\"+\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\")\n    brackets = brackets.replace(\")\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\")\n    brackets = brackets.replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    <\", \"\")\n    brackets = brackets.replace(\">\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\"'\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\")\n    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    \\\"\", \"\")\n    brackets = brackets.replace(\"%\", \"\")\n    brackets = brackets.replace(\"\
    $\", \"\")\n    brackets = brackets.replace(\"&\", \"\")\n    brackets = brackets.replace(\"\
    *\", \"\")\n    brackets = brackets.replace(\"+\", \"\")\n    brackets = brackets.replace(\"\
    (\"\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_74py633.py\"\
    , line 59\n    brackets = brackets.replace(\"(\"\n                           \
    \    ^\nSyntaxError: '(' was never closed\n"
  exit_code: 1
  status: SyntaxError
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for char in brackets:\n        if char == \"(\":\n            stack.append(char)\n\
    \        elif char == \")\":\n            if not stack:\n                return\
    \ False\n            top = stack.pop()\n            if top != \")\":\n       \
    \         return False\n    return not stack\n\n\ndef check(candidate):\n    assert\
    \ candidate('()') == True\n    assert candidate('(()())') == True\n    assert\
    \ candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfpgvl2oh.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfpgvl2oh.py\"\
    , line 34, in test_check\n    check(correct_bracketing)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfpgvl2oh.py\"\
    , line 20, in check\n    assert candidate('()') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets =\
    \ brackets.replace(\"(\", \"-LRB-\")\n    brackets = brackets.replace(\")\", \"\
    -RRB-\")\n    brackets = brackets.replace(\"[\", \"-LRB-\")\n    brackets = brackets.replace(\"\
    ]\", \"-RRB-\")\n    brackets = brackets.replace(\"{\", \"-LRB-\")\n    brackets\
    \ = brackets.replace(\"}\", \"-RRB-\")\n    brackets = brackets.replace(\"<\"\
    , \"-LRB-\")\n    brackets = brackets.replace(\">\", \"-RRB-\")\n    brackets\
    \ = brackets.replace(\",\", \"-COMMA-\")\n    brackets = brackets.replace(\":\"\
    , \"-COLON-\")\n    brackets = brackets.replace(\";\", \"-SEMICOLON-\")\n    brackets\
    \ = brackets.replace(\"!\", \"-EXCLAMATION-\")\n    brackets = brackets.replace(\"\
    ?\", \"-QUESTION-\")\n    brackets = brackets.replace(\"'\", \"-APOSTROPHE-\"\
    )\n    brackets = brackets.replace(\"\\\"\", \"-QUOTATION-\")\n    brackets =\
    \ brackets.replace(\"`\", \"-BACKTICK-\")\n    brackets = brackets.replace(\"\
    ~\", \"-TILDE-\")\n    brackets = brackets.replace(\"\xB4\", \"-SINGLEQUOTE-\"\
    )\n    brackets = brackets.replace(\"\xA8\", \"-DOUBLEQUOTE-\")\n    brackets\
    \ = brackets.replace(\"\xB4\", \"'\")\n    brackets = brackets.replace(\"\xA8\"\
    , \"'\")\n    brackets = brackets.replace(\"\xB4\", \"'\")\n    brackets = brackets.replace(\"\
    \xA8\", \"'\")\n    brackets = brackets.replace(\"\xB4\", \"'\")\n    brackets\
    \ = brackets.replace(\"\xA8\", \"'\")\n    brackets = brackets.replace(\"\xB4\"\
    , \"'\")\n    brackets = brackets.replace(\"\xA8\", \"'\")\n    brackets = brackets.replace(\"\
    \xB4\", \"'\")\n    brackets = brackets.replace(\"\xA8\", \"'\")\n    brackets\
    \ = brackets.replace(\"\xB4\", \"'\")\n    brackets = brackets.replace(\"\xA8\"\
    , \"'\")\n    brackets = brackets.replace(\"\xB4\", \"'\")\n    brackets = brackets.replace(\"\
    \xA8\", \"'\")\n    brackets = brackets.replace(\"\xB4\", \"'\")\n    brackets\
    \ = brackets.replace(\"\xA8\", \"'\")\n    brackets = brackets.replace(\"\xB4\"\
    , \"'\")\n    brackets = brackets.replace(\"\xA8\", \"'\")\n    brackets = brackets.replace(\"\
    \xB4\", \"'\")\n    brackets = brackets.replace(\"\xA8\", \"'\")\n    brackets\
    \ = brackets.replace(\"\xB4\", \"'\")\n    brackets = brackets.replace(\"\xA8\"\
    , \"'\")\n    brackets = brackets.replace(\"\xB4\", \"'\")\n    brackets = brackets.replace(\"\
    \xA8\", \"'\")\n    bracket\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgbxg5i6w.py\"\
    , line 67, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgbxg5i6w.py\"\
    , line 65, in test_check\n    check(correct_bracketing)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgbxg5i6w.py\"\
    , line 51, in check\n    assert candidate('()') == True\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgbxg5i6w.py\"\
    , line 49, in correct_bracketing\n    bracket\nNameError: name 'bracket' is not\
    \ defined. Did you mean: 'brackets'?\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for char in brackets:\n        if char == \"(\":\n            stack.append(char)\n\
    \        elif char == \")\":\n            if len(stack) == 0:\n              \
    \  return False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == \"(\":\n            stack.append(c)\n\
    \        elif c == \")\":\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets =\
    \ brackets.replace(\"(\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"<\", \"\").replace(\">\", \"\")\n\
    \    brackets = brackets.replace(\",\", \"\").replace(\";\", \"\")\n    brackets\
    \ = brackets.replace(\":\", \"\").replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\").replace(\"!\", \"\")\n    brackets = brackets.replace(\"?\", \"\").replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\"%\", \"\").replace(\"%\", \"\")\n\
    \    brackets = brackets.replace(\"$\", \"\").replace(\"$\", \"\")\n    brackets\
    \ = brackets.replace(\"&\", \"\").replace(\"&\", \"\")\n    brackets = brackets.replace(\"\
    *\", \"\").replace(\"*\", \"\")\n    brackets = brackets.replace(\"+\", \"\").replace(\"\
    +\", \"\")\n    brackets = brackets.replace(\"(\", \"\").replace(\")\", \"\")\n\
    \    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    <\", \"\").replace(\">\", \"\")\n    brackets = brackets.replace(\",\", \"\").replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\").replace(\":\", \"\")\n\
    \    brackets = brackets.replace(\"!\", \"\").replace(\"!\", \"\")\n    brackets\
    \ = brackets.replace(\"?\", \"\").replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    %\", \"\").replace(\"%\", \"\")\n    brackets = brackets.replace(\"$\", \"\").replace(\"\
    $\", \"\")\n    brackets = brackets.replace(\"&\", \"\").replace(\"&\", \"\")\n\
    \    brackets = brackets.replace(\"*\", \"\").replace(\"*\", \"\")\n    brackets\
    \ = brackets.replace(\"+\", \"\").replace(\"+\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"<\", \"\").replace(\">\", \"\")\n    brackets\
    \ = brackets.replace(\",\", \"\").replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\").replace(\":\", \"\")\n    brackets = brackets.replace(\"!\", \"\").replace(\"\
    !\", \"\")\n    brackets = brackets.replace(\"?\", \"\").replace(\"?\", \"\")\n\
    \    brackets = brackets.replace(\"%\", \"\").replace(\"%\", \"\")\n    brackets\
    \ = brackets.replace(\"$\", \"\").replace(\"$\", \"\")\n    brackets = brackets.replace(\"\
    &\", \"\").replace(\"&\", \"\")\n    brackets = brackets.replace(\"*\", \"\").replace(\"\
    *\", \"\")\n    brackets = brackets.replace(\"+\", \"\").replace(\"+\", \"\")\n\
    \    brackets = brackets.replace(\"(\", \"\").replace(\")\", \"\")\n    brackets\
    \ = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    \ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpejorybwk.py\"\
    , line 66, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpejorybwk.py\"\
    , line 64, in test_check\n    check(correct_bracketing)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpejorybwk.py\"\
    , line 50, in check\n    assert candidate('()') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets_set\
    \ = set(brackets)\n    brackets_set.add('(')\n    brackets_set.add(')')\n    brackets_set.add('[')\n\
    \    brackets_set.add(']')\n    brackets_set.add('{')\n    brackets_set.add('}')\n\
    \    brackets_set.add('\"')\n    brackets_set.add(\"'\")\n    brackets_set.add('\
    \ ')\n    brackets_set.add(';')\n    brackets_set.add(',')\n    brackets_set.add('!')\n\
    \    brackets_set.add('?')\n    brackets_set.add(':')\n    brackets_set.add(';')\n\
    \    brackets_set.add(':')\n    brackets_set.add(';')\n    brackets_set.add(':')\n\
    \    brackets_set.add(';')\n    brackets_set.add(':')\n    brackets_set.add(';')\n\
    \    brackets_set.add(':')\n    brackets_set.add(';')\n    brackets_set.add(':')\n\
    \    brackets_set.add(';')\n    brackets_set.add(':')\n    brackets_set.add(';')\n\
    \    brackets_set.add(':')\n    brackets_set.add(';')\n    brackets_set.add(':')\n\
    \    brackets_set.add(';')\n    brackets_set.add(':')\n    brackets_set.add(';')\n\
    \    brackets_set.add(':')\n    brackets_set.add(';')\n    brackets_set.add(':')\n\
    \    brackets_set.add(';')\n    brackets_set.add(':')\n    brackets_set.add(';')\n\
    \    brackets_set.add(':')\n    brackets_set.add(';')\n    brackets_set.add(':')\n\
    \    brackets_set.add(';')\n    brackets_set.add(':')\n    brackets_set.add(';')\n\
    \    brackets_set.add(':')\n    brackets_set.add(';')\n    brackets_set.add(':')\n\
    \    brackets_set.add(';')\n    brackets_set.add(':')\n    brackets_set.add(';')\n\
    \    brackets_set.add(':')\n    brackets_set.add(';')\n    brackets_set.add(':')\n\
    \    brackets_set.add(';')\n    brackets_set.add(':')\n    brackets_set.add(';')\n\
    \    brackets_set.add(':')\n    brackets_set.add(';')\n    brackets_set.add\n\
    def check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6k8a50un.py\"\
    , line 84, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6k8a50un.py\"\
    , line 82, in test_check\n    check(correct_bracketing)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6k8a50un.py\"\
    , line 68, in check\n    assert candidate('()') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets =\
    \ brackets.replace(\"(\", \"( \")\n    brackets = brackets.replace(\")\", \" )\"\
    )\n    brackets = brackets.replace(\"[\", \"[ \")\n    brackets = brackets.replace(\"\
    ]\", \" ]\")\n    brackets = brackets.replace(\"{\", \"{ \")\n    brackets = brackets.replace(\"\
    }\", \"} \")\n    brackets = brackets.replace(\"<\", \"< \")\n    brackets = brackets.replace(\"\
    >\", \" > \")\n    brackets = brackets.replace(\",\", \" , \")\n    brackets =\
    \ brackets.replace(\":\", \": \")\n    brackets = brackets.replace(\";\", \";\
    \ \")\n    brackets = brackets.replace(\"!\", \"! \")\n    brackets = brackets.replace(\"\
    ?\", \"? \")\n    brackets = brackets.replace(\"=\", \" = \")\n    brackets =\
    \ brackets.replace(\"+\", \"+ \")\n    brackets = brackets.replace(\"-\", \"-\
    \ \")\n    brackets = brackets.replace(\"*\", \"* \")\n    brackets = brackets.replace(\"\
    &\", \"& \")\n    brackets = brackets.replace(\"^\", \"^ \")\n    brackets = brackets.replace(\"\
    ~\", \"~ \")\n    brackets = brackets.replace(\"|\", \"| \")\n    brackets = brackets.replace(\"\
    \\\\\", \"\\\\ \")\n    brackets = brackets.replace(\"_\", \"_ \")\n    brackets\
    \ = brackets.replace(\"~\", \"~ \")\n    brackets = brackets.replace(\"^\", \"\
    ^ \")\n    brackets = brackets.replace(\"|\", \"| \")\n    brackets = brackets.replace(\"\
    \\\\\", \"\\\\ \")\n    brackets = brackets.replace(\"_\", \"_ \")\n    brackets\
    \ = brackets.replace(\"~\", \"~ \")\n    brackets = brackets.replace(\"^\", \"\
    ^ \")\n    brackets = brackets.replace(\"|\", \"| \")\n    brackets = brackets.replace(\"\
    \\\\\", \"\\\\ \")\n    brackets = brackets.replace(\"_\", \"_ \")\n    brackets\
    \ = brackets.replace(\"~\", \"~ \")\n    brackets = brackets.replace(\"^\", \"\
    ^ \")\n    brackets = brackets.replace(\"|\", \"| \")\n    brackets = brackets.replace(\"\
    \\\\\", \"\\\\ \")\n    brackets = brackets.replace(\"_\", \"_ \")\n    brackets\
    \ = brackets.replace(\"~\", \"~ \")\n    brackets = brackets.replace(\"^\", \"\
    ^ \")\n    brackets = brackets.replace(\"|\", \"| \")\n    brackets = brackets.replace(\"\
    \\\\\", \"\\\\ \")\n    brackets = brackets.replace(\"_\", \"_ \")\n    brackets\
    \ = brackets.replace(\"~\", \"~ \")\n    brackets = brackets.replace(\"^\", \"\
    ^ \")\n    brackets = brackets.replace(\"|\", \"| \")\n    \ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1g5_ds8a.py\"\
    , line 70, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1g5_ds8a.py\"\
    , line 68, in test_check\n    check(correct_bracketing)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1g5_ds8a.py\"\
    , line 54, in check\n    assert candidate('()') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for char in brackets:\n        if char == '(':\n            stack.append(char)\n\
    \        elif char == ')':\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets =\
    \ brackets.replace(\"(\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"<\", \"\").replace(\">\", \"\")\n\
    \    brackets = brackets.replace(\",\", \"\").replace(\":\", \"\")\n    brackets\
    \ = brackets.replace(\";\", \"\").replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    +\", \"\").replace(\"*\", \"\")\n    brackets = brackets.replace(\"?\", \"\").replace(\"\
    !\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\")\n    brackets = brackets.replace(\")\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\")\n    brackets = brackets.replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    <\", \"\")\n    brackets = brackets.replace(\">\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\"+\", \"\")\n    brackets = brackets.replace(\"\
    *\", \"\")\n    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\")\n    brackets = brackets.replace(\")\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\")\n    brackets = brackets.replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    <\", \"\")\n    brackets = brackets.replace(\">\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\"+\", \"\")\n    brackets = brackets.replace(\"\
    *\", \"\")\n    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\")\n    brackets = brackets.replace(\")\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\")\n    brackets = brackets.replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    <\", \"\")\n    brackets = brackets.replace(\">\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\"+\", \"\")\n    brackets = brackets.replace(\"\
    \ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_cedg4gu.py\"\
    , line 59\n    brackets = brackets.replace(\"\n                              \
    \  ^\nSyntaxError: unterminated string literal (detected at line 59)\n"
  exit_code: 1
  status: SyntaxError
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets =\
    \ brackets.replace('(', '')\n    brackets = brackets.replace(')', '')\n    brackets\
    \ = brackets.split(',')\n    brackets = [bracket for bracket in brackets if bracket]\n\
    \    brackets = [bracket for bracket in brackets if bracket[0] == '(' and bracket[-1]\
    \ == ')']\n    return len(brackets) == 0\n\n\ndef check(candidate):\n    assert\
    \ candidate('()') == True\n    assert candidate('(()())') == True\n    assert\
    \ candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcliee_r7.py\"\
    , line 31, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcliee_r7.py\"\
    , line 29, in test_check\n    check(correct_bracketing)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcliee_r7.py\"\
    , line 19, in check\n    assert candidate('((()())))') == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets =\
    \ brackets.replace('(', '').replace(')', '')\n    brackets = brackets.replace('[',\
    \ '').replace(']', '')\n    brackets = brackets.replace('{', '').replace('}',\
    \ '')\n    brackets = brackets.replace('(', '').replace(')', '')\n    brackets\
    \ = brackets.replace('[', '').replace(']', '')\n    brackets = brackets.replace('{',\
    \ '').replace('}', '')\n    brackets = brackets.replace('(', '').replace(')',\
    \ '')\n    brackets = brackets.replace('[', '').replace(']', '')\n    brackets\
    \ = brackets.replace('{', '').replace('}', '')\n    brackets = brackets.replace('(',\
    \ '').replace(')', '')\n    brackets = brackets.replace('[', '').replace(']',\
    \ '')\n    brackets = brackets.replace('{', '').replace('}', '')\n    brackets\
    \ = brackets.replace('(', '').replace(')', '')\n    brackets = brackets.replace('[',\
    \ '').replace(']', '')\n    brackets = brackets.replace('{', '').replace('}',\
    \ '')\n    brackets = brackets.replace('(', '').replace(')', '')\n    brackets\
    \ = brackets.replace('[', '').replace(']', '')\n    brackets = brackets.replace('{',\
    \ '').replace('}', '')\n    brackets = brackets.replace('(', '').replace(')',\
    \ '')\n    brackets = brackets.replace('[', '').replace(']', '')\n    brackets\
    \ = brackets.replace('{', '').replace('}', '')\n    brackets = brackets.replace('(',\
    \ '').replace(')', '')\n    brackets = brackets.replace('[', '').replace(']',\
    \ '')\n    brackets = brackets.replace('{', '').replace('}', '')\n    brackets\
    \ = brackets.replace('(', '').replace(')', '')\n    brackets = brackets.replace('[',\
    \ '').replace(']', '')\n    brackets = brackets.replace('{', '').replace('}',\
    \ '')\n    brackets = brackets.replace('(', '').replace(')', '')\n    brackets\
    \ = brackets.replace('[', '').replace(']', '')\n    brackets = brackets.replace('{',\
    \ '').replace('}', '')\n    brackets = brackets.replace('(', '').replace(')',\
    \ '')\n    brackets = brackets.replace('[', '').replace(']', '')\n    brackets\
    \ = brackets.replace('{', '').replace('}', '')\n    brackets = brackets.replace('(',\
    \ '').replace(')', '')\n    brackets = brackets.replace('[', '').replace(']',\
    \ '')\n    brackets = brackets.replace('{', '').replace('}', '')\n    brackets\
    \ = brackets.replace('(', '').replace(')', '')\n    brackets = brackets.replace('[',\
    \ '').replace(']', '')\n    brackets = brackets.replace('{', '').replace('}',\
    \ '')\n    brackets = brackets.replace('(', '').replace(')', '')\n    brackets\
    \ = brackets.replace('[', '').replace(']', '')\n    brackets = brackets.replace('{',\
    \ '').replace('}', '')\n    brackets = brackets.replace('(', '')\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxtqs2mju.py\"\
    , line 66, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxtqs2mju.py\"\
    , line 64, in test_check\n    check(correct_bracketing)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxtqs2mju.py\"\
    , line 50, in check\n    assert candidate('()') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for char in brackets:\n        if char == \"(\":\n            stack.append(char)\n\
    \        elif char == \")\":\n            if len(stack) == 0:\n              \
    \  return False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == \"(\":\n            stack.append(c)\n\
    \        elif c == \")\":\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == \"(\":\n            stack.append(c)\n\
    \        elif c == \")\":\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == \"(\":\n            stack.append(c)\n\
    \        elif c == \")\":\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets =\
    \ brackets.replace('(', '').replace(')', '')\n    brackets = brackets.replace('[',\
    \ '').replace(']', '')\n    brackets = brackets.replace('{', '').replace('}',\
    \ '')\n    brackets = brackets.replace(',', '')\n    brackets = brackets.replace('\
    \ ', '')\n    brackets = brackets.split(',')\n    brackets = [bracket for bracket\
    \ in brackets if bracket]\n    brackets = [bracket for bracket in brackets if\
    \ bracket[0] != '(' and bracket[-1] != ')']\n    return len(brackets) == 0\n\n\
    \ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppnn52oao.py\"\
    , line 34, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppnn52oao.py\"\
    , line 32, in test_check\n    check(correct_bracketing)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppnn52oao.py\"\
    , line 22, in check\n    assert candidate('((()())))') == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for char in brackets:\n        if char == '(':\n            stack.append(char)\n\
    \        elif char == ')':\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for char in brackets:\n        if char == '(':\n            stack.append(char)\n\
    \        elif char == ')':\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets =\
    \ brackets.replace(\"(\", \"( \")\n    brackets = brackets.replace(\")\", \" )\"\
    )\n    brackets = brackets.replace(\"[\", \"[ \")\n    brackets = brackets.replace(\"\
    ]\", \" ]\")\n    brackets = brackets.replace(\"{\", \"{ \")\n    brackets = brackets.replace(\"\
    }\", \"} \")\n    brackets = brackets.replace(\"<\", \"< \")\n    brackets = brackets.replace(\"\
    >\", \" > \")\n    brackets = brackets.replace(\",\", \" , \")\n    brackets =\
    \ brackets.replace(\";\", \" ; \")\n    brackets = brackets.replace(\":\", \"\
    : \")\n    brackets = brackets.replace(\"!\", \"! \")\n    brackets = brackets.replace(\"\
    ?\", \"? \")\n    brackets = brackets.replace(\"=\", \" = \")\n    brackets =\
    \ brackets.replace(\"+\", \"+ \")\n    brackets = brackets.replace(\"-\", \"-\
    \ \")\n    brackets = brackets.replace(\"*\", \"* \")\n    brackets = brackets.replace(\"\
    (\", \"( \")\n    brackets = brackets.replace(\")\", \" )\")\n    brackets = brackets.replace(\"\
    [\", \"[ \")\n    brackets = brackets.replace(\"]\", \" ]\")\n    brackets = brackets.replace(\"\
    {\", \"{ \")\n    brackets = brackets.replace(\"}\", \"} \")\n    brackets = brackets.replace(\"\
    <\", \"< \")\n    brackets = brackets.replace(\">\", \" > \")\n    brackets =\
    \ brackets.replace(\",\", \" , \")\n    brackets = brackets.replace(\";\", \"\
    \ ; \")\n    brackets = brackets.replace(\":\", \": \")\n    brackets = brackets.replace(\"\
    !\", \"! \")\n    brackets = brackets.replace(\"?\", \"? \")\n    brackets = brackets.replace(\"\
    =\", \" = \")\n    brackets = brackets.replace(\"+\", \"+ \")\n    brackets =\
    \ brackets.replace(\"-\", \"- \")\n    brackets = brackets.replace(\"*\", \"*\
    \ \")\n    brackets = brackets.replace(\"(\", \"( \")\n    brackets = brackets.replace(\"\
    )\", \" )\")\n    brackets = brackets.replace(\"[\", \"[ \")\n    brackets = brackets.replace(\"\
    ]\", \" ]\")\n    brackets = brackets.replace(\"{\", \"{ \")\n    brackets = brackets.replace(\"\
    }\", \"} \")\n    brackets = brackets.replace(\"<\", \"< \")\n    brackets = brackets.replace(\"\
    >\", \" > \")\n    brackets = brackets.replace(\",\", \" , \")\n    brackets =\
    \ brackets.replace(\";\", \" ; \")\n    brackets = brackets.replace(\":\", \"\
    : \")\n    brackets = brackets.replace(\"!\", \"! \")\n    brackets = \ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpeedmqvso.py\"\
    , line 52\n    brackets = \n               ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets_set\
    \ = set(brackets)\n    open_brackets_set = set([\"(\"])\n    close_brackets_set\
    \ = set([\")\"])\n    return brackets_set.issubset(open_brackets_set) and brackets_set.issubset(close_brackets_set)\n\
    \n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd1rveu_4.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd1rveu_4.py\"\
    , line 27, in test_check\n    check(correct_bracketing)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd1rveu_4.py\"\
    , line 13, in check\n    assert candidate('()') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == '(':\n            stack.append(c)\n \
    \       elif c == ')':\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for char in brackets:\n        if char == \"(\":\n            stack.append(char)\n\
    \        elif char == \")\":\n            if len(stack) == 0:\n              \
    \  return False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets =\
    \ brackets.strip()\n    opening_brackets = [x for x in brackets if x == \"(\"\
    ]\n    closing_brackets = [x for x in brackets if x == \")\"]\n    return len(opening_brackets)\
    \ == len(closing_brackets)\n\n\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp397zh6_p.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp397zh6_p.py\"\
    , line 27, in test_check\n    check(correct_bracketing)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp397zh6_p.py\"\
    , line 18, in check\n    assert candidate(')(()') == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets =\
    \ brackets.replace(\"(\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"<\", \"\").replace(\">\", \"\")\n\
    \    brackets = brackets.replace(\",\", \"\").replace(\":\", \"\")\n    brackets\
    \ = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"!\", \"\"\
    )\n    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    %\", \"\")\n    brackets = brackets.replace(\"$\", \"\")\n    brackets = brackets.replace(\"\
    &\", \"\")\n    brackets = brackets.replace(\"*\", \"\")\n    brackets = brackets.replace(\"\
    +\", \"\")\n    brackets = brackets.replace(\"-\", \"\")\n    brackets = brackets.replace(\"\
    =\", \"\")\n    brackets = brackets.replace(\"[\", \"\")\n    brackets = brackets.replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"<\", \"\")\n    brackets = brackets.replace(\"\
    >\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\")\n    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    %\", \"\")\n    brackets = brackets.replace(\"$\", \"\")\n    brackets = brackets.replace(\"\
    &\", \"\")\n    brackets = brackets.replace(\"*\", \"\")\n    brackets = brackets.replace(\"\
    +\", \"\")\n    brackets = brackets.replace(\"-\", \"\")\n    brackets = brackets.replace(\"\
    =\", \"\")\n    brackets = brackets.replace(\"[\", \"\")\n    brackets = brackets.replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"<\", \"\")\n    brackets = brackets.replace(\"\
    >\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\")\n    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    %\", \"\")\n    brackets = brackets.replace(\"$\", \"\")\n    brackets = brackets.replace(\"\
    &\", \"\")\n    brackets = brackets.replace(\"*\", \"\")\n    brackets = brackets.replace(\"\
    +\", \"\")\n    brackets = brackets.replace(\"-\", \"\")\n    brackets = brackets.replace(\"\
    =\", \"\")\n    brackets = brackets.replace(\"[\", \"\")\n    brackets = brackets.replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    \ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp6hcivkh.py\"\
    , line 60\n    brackets = brackets.replace(\"\n                              \
    \  ^\nSyntaxError: unterminated string literal (detected at line 60)\n"
  exit_code: 1
  status: SyntaxError
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == '(':\n            stack.append(c)\n \
    \       elif c == ')':\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets =\
    \ brackets.replace(\"(\", \"\")\n    brackets = brackets.replace(\")\", \"\")\n\
    \    brackets = brackets.replace(\"[\", \"\")\n    brackets = brackets.replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\")\n    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    <\", \"\")\n    brackets = brackets.replace(\">\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\"'\", \"\").strip()\n    brackets\
    \ = brackets.replace(\"\\\"\", \"\")\n    brackets = brackets.replace(\"%\", \"\
    \")\n    brackets = brackets.replace(\"^\", \"\")\n    brackets = brackets.replace(\"\
    &\", \"\")\n    brackets = brackets.replace(\"*\", \"\")\n    brackets = brackets.replace(\"\
    +\", \"\")\n    brackets = brackets.replace(\"(\", \"\")\n    brackets = brackets.replace(\"\
    )\", \"\")\n    brackets = brackets.replace(\"[\", \"\")\n    brackets = brackets.replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\")\n    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    <\", \"\")\n    brackets = brackets.replace(\">\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\"'\", \"\").strip()\n    brackets\
    \ = brackets.replace(\"\\\"\", \"\")\n    brackets = brackets.replace(\"%\", \"\
    \")\n    brackets = brackets.replace(\"^\", \"\")\n    brackets = brackets.replace(\"\
    &\", \"\")\n    brackets = brackets.replace(\"*\", \"\")\n    brackets = brackets.replace(\"\
    +\", \"\")\n    brackets = brackets.replace(\"(\", \"\")\n    brackets = brackets.replace(\"\
    )\", \"\")\n    brackets = brackets.replace(\"[\", \"\")\n    brackets = brackets.replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\")\n    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    <\", \"\")\n    brackets = brackets.replace(\">\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    bracket\ndef check(candidate):\n    assert candidate('()') ==\
    \ True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkrhpcod9.py\"\
    , line 80, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkrhpcod9.py\"\
    , line 78, in test_check\n    check(correct_bracketing)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkrhpcod9.py\"\
    , line 64, in check\n    assert candidate('()') == True\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkrhpcod9.py\"\
    , line 62, in correct_bracketing\n    bracket\nNameError: name 'bracket' is not\
    \ defined. Did you mean: 'brackets'?\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for char in brackets:\n        if char == \"(\":\n            stack.append(char)\n\
    \        elif char == \")\":\n            if len(stack) == 0:\n              \
    \  return False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets =\
    \ brackets.replace(\"(\", \"\")\n    brackets = brackets.replace(\")\", \"\")\n\
    \    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\")\n    brackets = brackets.replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    '\", \"\")\n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\"%\", \"\")\n    brackets = brackets.replace(\"\
    $\", \"\")\n    brackets = brackets.replace(\"&\", \"\")\n    brackets = brackets.replace(\"\
    +\", \"\")\n    brackets = brackets.replace(\"*\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\"<\", \"\")\n    brackets = brackets.replace(\"\
    >\", \"\")\n    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\")\n    brackets = brackets.replace(\"(\", \"\")\n    brackets = brackets.replace(\"\
    )\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\")\n    brackets = brackets.replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    '\", \"\")\n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\"%\", \"\")\n    brackets = brackets.replace(\"\
    $\", \"\")\n    brackets = brackets.replace(\"&\", \"\")\n    brackets = brackets.replace(\"\
    +\", \"\")\n    brackets = brackets.replace(\"*\", \"\")\n    brackets = brackets.replace(\"\
    <\", \"\")\n    brackets = brackets.replace(\">\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\")\n    brackets = brackets.replace(\")\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\"[\", \"\")\n    brackets = brackets.replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"'\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\")\n    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    %\", \"\")\n    brackets = brackets.replace(\"$\ndef check(candidate):\n    assert\
    \ candidate('()') == True\n    assert candidate('(()())') == True\n    assert\
    \ candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfdiqv9xs.py\"\
    , line 62\n    brackets = brackets.replace(\"$\n                             \
    \   ^\nSyntaxError: unterminated string literal (detected at line 62)\n"
  exit_code: 1
  status: SyntaxError
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for char in brackets:\n        if char == \"(\":\n            stack.append(char)\n\
    \        elif char == \")\":\n            if len(stack) == 0:\n              \
    \  return False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == \"(\":\n            stack.append(c)\n\
    \        elif c == \")\":\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == \"(\":\n            stack.append(c)\n\
    \        elif c == \")\":\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == \"(\":\n            stack.append(c)\n\
    \        elif c == \")\":\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets =\
    \ brackets.replace(\"(\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"<\", \"\").replace(\">\", \"\")\n\
    \    brackets = brackets.replace(\",\", \"\").replace(\":\", \"\")\n    brackets\
    \ = brackets.replace(\";\", \"\").replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    +\", \"\")\n    brackets = brackets.replace(\"*\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    %\", \"\")\n    brackets = brackets.replace(\"$\", \"\")\n    brackets = brackets.replace(\"\
    ^\", \"\")\n    brackets = brackets.replace(\"&\", \"\")\n    brackets = brackets.replace(\"\
    *\", \"\")\n    brackets = brackets.replace(\"+\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"<\", \"\").replace(\">\", \"\")\n    brackets\
    \ = brackets.replace(\",\", \"\").replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\").replace(\",\", \"\")\n    brackets = brackets.replace(\"+\", \"\")\n\
    \    brackets = brackets.replace(\"*\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    %\", \"\")\n    brackets = brackets.replace(\"$\", \"\")\n    brackets = brackets.replace(\"\
    ^\", \"\")\n    brackets = brackets.replace(\"&\", \"\")\n    brackets = brackets.replace(\"\
    *\", \"\")\n    brackets = brackets.replace(\"+\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"<\", \"\").replace(\">\", \"\")\n    brackets\
    \ = brackets.replace(\",\", \"\").replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\").replace(\",\", \"\")\n    brackets = brackets.replace(\"+\", \"\")\n\
    \    brackets = brackets.replace(\"*\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    %\", \"\")\n    brackets = brackets.replace(\"$\", \"\")\n    brackets = brackets.replace(\"\
    ^\", \"\")\n    brackets = brackets.replace(\"&\", \"\")\n    brackets = brackets.replace(\"\
    *\", \"\")\n    brackets = brackets.replace(\"+\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"[\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp304arxpd.py\"\
    , line 55\n    brackets = brackets.replace(\"[\n                             \
    \   ^\nSyntaxError: unterminated string literal (detected at line 55)\n"
  exit_code: 1
  status: SyntaxError
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == '(':\n            stack.append(c)\n \
    \       elif c == ')':\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == \"(\":\n            stack.append(c)\n\
    \        elif c == \")\":\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets =\
    \ brackets.replace('(', ' ( ').replace(')', ' ) ')\n    brackets = brackets.replace('[',\
    \ ' [').replace(']', ' ] ')\n    brackets = brackets.replace('{', ' {').replace('}',\
    \ ' } ')\n    brackets = brackets.replace('(', ' ( ').replace(')', ' ) ')\n  \
    \  brackets = brackets.replace('[', ' [').replace(']', ' ] ')\n    brackets =\
    \ brackets.replace('{', ' {').replace('}', ' } ')\n    brackets = brackets.replace('(',\
    \ ' ( ').replace(')', ' ) ')\n    brackets = brackets.replace('[', ' [').replace(']',\
    \ ' ] ')\n    brackets = brackets.replace('{', ' {').replace('}', ' } ')\n   \
    \ brackets = brackets.replace('(', ' ( ').replace(')', ' ) ')\n    brackets =\
    \ brackets.replace('[', ' [').replace(']', ' ] ')\n    brackets = brackets.replace('{',\
    \ ' {').replace('}', ' } ')\n    brackets = brackets.replace('(', ' ( ').replace(')',\
    \ ' ) ')\n    brackets = brackets.replace('[', ' [').replace(']', ' ] ')\n   \
    \ brackets = brackets.replace('{', ' {').replace('}', ' } ')\n    brackets = brackets.replace('(',\
    \ ' ( ').replace(')', ' ) ')\n    brackets = brackets.replace('[', ' [').replace(']',\
    \ ' ] ')\n    brackets = brackets.replace('{', ' {').replace('}', ' } ')\n   \
    \ brackets = brackets.replace('(', ' ( ').replace(')', ' ) ')\n    brackets =\
    \ brackets.replace('[', ' [').replace(']', ' ] ')\n    brackets = brackets.replace('{',\
    \ ' {').replace('}', ' } ')\n    brackets = brackets.replace('(', ' ( ').replace(')',\
    \ ' ) ')\n    brackets = brackets.replace('[', ' [').replace(']', ' ] ')\n   \
    \ brackets = brackets.replace('{', ' {').replace('}', ' } ')\n    brackets = brackets.replace('(',\
    \ ' ( ').replace(')', ' ) ')\n    brackets = brackets.replace('[', ' [').replace(']',\
    \ ' ] ')\n    brackets = brackets.replace('{', ' {').replace('}', ' } ')\n   \
    \ brackets = brackets.replace('(', ' ( ').replace(')', ' ) ')\n    brackets =\
    \ brackets.replace('[', ' [').replace(']', ' ] ')\n    brackets = brackets.replace('{',\
    \ ' {').replace('}', ' } ')\n    brackets = brackets.replace('(', ' ( ').replace(')',\
    \ ' ) ')\n    brackets = brackets.replace('[', ' [').replace(']', ' ] ')\n   \
    \ brackets = brackets.replace('{', ' {').replace('}', ' } ')\n    brackets = brackets.replace('(',\
    \ ' ( ').replace(')', ' ) ')\n    bracket\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo7d0850p.py\"\
    , line 58, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo7d0850p.py\"\
    , line 56, in test_check\n    check(correct_bracketing)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo7d0850p.py\"\
    , line 42, in check\n    assert candidate('()') == True\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo7d0850p.py\"\
    , line 40, in correct_bracketing\n    bracket\nNameError: name 'bracket' is not\
    \ defined. Did you mean: 'brackets'?\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets =\
    \ brackets.replace('(', '').replace(')', '')\n    brackets = brackets.replace('{',\
    \ '').replace('}', '')\n    brackets = brackets.replace('[', '').replace(']',\
    \ '')\n    brackets = brackets.replace('{', '').replace('}', '')\n    brackets\
    \ = brackets.replace('[', '').replace(']', '')\n    brackets = brackets.replace('(',\
    \ '').replace(')', '')\n    brackets = brackets.replace('{', '').replace('}',\
    \ '')\n    brackets = brackets.replace('[', '').replace(']', '')\n    brackets\
    \ = brackets.replace('(', '').replace(')', '')\n    brackets = brackets.replace('{',\
    \ '').replace('}', '')\n    brackets = brackets.replace('[', '').replace(']',\
    \ '')\n    brackets = brackets.replace('(', '').replace(')', '')\n    brackets\
    \ = brackets.replace('{', '').replace('}', '')\n    brackets = brackets.replace('[',\
    \ '').replace(']', '')\n    brackets = brackets.replace('(', '').replace(')',\
    \ '')\n    brackets = brackets.replace('{', '').replace('}', '')\n    brackets\
    \ = brackets.replace('[', '').replace(']', '')\n    brackets = brackets.replace('(',\
    \ '').replace(')', '')\n    brackets = brackets.replace('{', '').replace('}',\
    \ '')\n    brackets = brackets.replace('[', '').replace(']', '')\n    brackets\
    \ = brackets.replace('(', '').replace(')', '')\n    brackets = brackets.replace('{',\
    \ '').replace('}', '')\n    brackets = brackets.replace('[', '').replace(']',\
    \ '')\n    brackets = brackets.replace('(', '').replace(')', '')\n    brackets\
    \ = brackets.replace('{', '').replace('}', '')\n    brackets = brackets.replace('[',\
    \ '').replace(']', '')\n    brackets = brackets.replace('(', '').replace(')',\
    \ '')\n    brackets = brackets.replace('{', '').replace('}', '')\n    brackets\
    \ = brackets.replace('[', '').replace(']', '')\n    brackets = brackets.replace('(',\
    \ '').replace(')', '')\n    brackets = brackets.replace('{', '').replace('}',\
    \ '')\n    brackets = brackets.replace('[', '').replace(']', '')\n    brackets\
    \ = brackets.replace('(', '').replace(')', '')\n    brackets = brackets.replace('{',\
    \ '').replace('}', '')\n    brackets = brackets.replace('[', '').replace(']',\
    \ '')\n    brackets = brackets.replace('(', '').replace(')', '')\n    brackets\
    \ = brackets.replace('{', '').replace('}', '')\n    brackets = brackets.replace('[',\
    \ '').replace(']', '')\n    brackets = brackets.replace('(', '').replace(')',\
    \ '')\n    brackets = brackets.replace('{', '').replace('}', '')\n    brackets\
    \ = brackets.replace('[', '').replace(']', '')\n    brackets = brackets.replace('(',\
    \ '').replace(')', '')\n    brackets = brackets.replace('{', '')\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdtatjelv.py\"\
    , line 66, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdtatjelv.py\"\
    , line 64, in test_check\n    check(correct_bracketing)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdtatjelv.py\"\
    , line 50, in check\n    assert candidate('()') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == '(':\n            stack.append(c)\n \
    \       elif c == ')':\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets_set\
    \ = set(brackets)\n    open_brackets = brackets_set.difference(\"()\")\n    close_brackets\
    \ = brackets_set.difference(\"[]\")\n    return len(open_brackets) == 0 and len(close_brackets)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpco7wfoxw.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpco7wfoxw.py\"\
    , line 27, in test_check\n    check(correct_bracketing)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpco7wfoxw.py\"\
    , line 13, in check\n    assert candidate('()') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets =\
    \ brackets.replace('(', '')\n    brackets = brackets.replace(')', '')\n    brackets\
    \ = brackets.split(',')\n    brackets = [x.strip() for x in brackets]\n    brackets\
    \ = [x for x in brackets if x]\n    brackets = [x for x in brackets if x != '']\n\
    \    brackets = [x for x in brackets if x != '()']\n    brackets = [x for x in\
    \ brackets if x != '[]']\n    brackets = [x for x in brackets if x != '{}']\n\
    \    brackets = [x for x in brackets if x != '<>']\n    brackets = [x for x in\
    \ brackets if x != '<>()']\n    brackets = [x for x in brackets if x != '<>[]']\n\
    \    brackets = [x for x in brackets if x != '<>{}']\n    brackets = [x for x\
    \ in brackets if x != '<>{}()']\n    brackets = [x for x in brackets if x != '<>{}[]']\n\
    \    brackets = [x for x in brackets if x != '<>{}[]()']\n    brackets = [x for\
    \ x in brackets if x != '<>{}[]()()']\n    brackets = [x for x in brackets if\
    \ x != '<>{}[]()()()']\n    brackets = [x for x in brackets if x != '<>{}[]()()()()']\n\
    \    brackets = [x for x in brackets if x != '<>{}[]()()()()()']\n    brackets\
    \ = [x for x in brackets if x != '<>{}[]()()()()()()']\n    brackets = [x for\
    \ x in brackets if x != '<>{}[]()()()()()()()']\n    brackets = [x for x in brackets\
    \ if x != '<>{}[]()()()()()()()()']\n    brackets = [x for x in brackets if x\
    \ != '<>{}[]()()()()()()()()()']\n    brackets = [x for x in brackets if x !=\
    \ '<>{}[]()()()()()()()()()()']\n    brackets = [x for x in brackets if x != '<>{}[]()()()()()()()()()()']\n\
    \    brackets = [x for x in brackets if x != '<>{}[]()()()()()()()()()()']\n \
    \   brackets = [x for x in brackets if x != '<>{}[]()()()()()()()()()()()']\n\
    \    brackets = [x for x in brackets if x != '<>{}[]()()()()()()()()()()()()']\n\
    \    brackets = [x for x in brackets if x != '<>{}[]()()()()()()()()()()()()']\n\
    \    brackets = [x for x in brackets if x != '<>{}[]()()()()()()()()()()()()']\n\
    \    brackets = [x for x in brackets if x != '<>{}[]()()()()()()()()()()()()']\n\
    def check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu61t8auv.py\"\
    , line 55, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu61t8auv.py\"\
    , line 53, in test_check\n    check(correct_bracketing)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu61t8auv.py\"\
    , line 39, in check\n    assert candidate('()') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == \"(\":\n            stack.append(c)\n\
    \        elif c == \")\":\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == \"(\":\n            stack.append(c)\n\
    \        elif c == \")\":\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for char in brackets:\n        if char == '(':\n            stack.append(char)\n\
    \        elif char == ')':\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets =\
    \ brackets.replace('(', '').replace(')', '')\n    brackets = brackets.replace('[',\
    \ '').replace(']', '')\n    brackets = brackets.replace('{', '').replace('}',\
    \ '')\n    brackets = brackets.replace('(', '').replace(')', '')\n    brackets\
    \ = brackets.replace('[', '').replace(']', '')\n    brackets = brackets.replace('{',\
    \ '').replace('}', '')\n    brackets = brackets.replace('(', '').replace(')',\
    \ '')\n    brackets = brackets.replace('[', '').replace(']', '')\n    brackets\
    \ = brackets.replace('{', '').replace('}', '')\n    brackets = brackets.replace('(',\
    \ '').replace(')', '')\n    brackets = brackets.replace('[', '').replace(']',\
    \ '')\n    brackets = brackets.replace('{', '').replace('}', '')\n    brackets\
    \ = brackets.replace('(', '').replace(')', '')\n    brackets = brackets.replace('[',\
    \ '').replace(']', '')\n    brackets = brackets.replace('{', '').replace('}',\
    \ '')\n    brackets = brackets.replace('(', '').replace(')', '')\n    brackets\
    \ = brackets.replace('[', '').replace(']', '')\n    brackets = brackets.replace('{',\
    \ '').replace('}', '')\n    brackets = brackets.replace('(', '').replace(')',\
    \ '')\n    brackets = brackets.replace('[', '').replace(']', '')\n    brackets\
    \ = brackets.replace('{', '').replace('}', '')\n    brackets = brackets.replace('(',\
    \ '').replace(')', '')\n    brackets = brackets.replace('[', '').replace(']',\
    \ '')\n    brackets = brackets.replace('{', '').replace('}', '')\n    brackets\
    \ = brackets.replace('(', '').replace(')', '')\n    brackets = brackets.replace('[',\
    \ '').replace(']', '')\n    brackets = brackets.replace('{', '').replace('}',\
    \ '')\n    brackets = brackets.replace('(', '').replace(')', '')\n    brackets\
    \ = brackets.replace('[', '').replace(']', '')\n    brackets = brackets.replace('{',\
    \ '').replace('}', '')\n    brackets = brackets.replace('(', '').replace(')',\
    \ '')\n    brackets = brackets.replace('[', '').replace(']', '')\n    brackets\
    \ = brackets.replace('{', '').replace('}', '')\n    brackets = brackets.replace('(',\
    \ '').replace(')', '')\n    brackets = brackets.replace('[', '').replace(']',\
    \ '')\n    brackets = brackets.replace('{', '').replace('}', '')\n    brackets\
    \ = brackets.replace('(', '').replace(')', '')\n    brackets = brackets.replace('[',\
    \ '').replace(']', '')\n    brackets = brackets.replace('{', '').replace('}',\
    \ '')\n    brackets = brackets.replace('(', '').replace(')', '')\n    brackets\
    \ = brackets.replace('[', '').replace(']', '')\n    brackets = brackets.replace('{',\
    \ '').replace('}', '')\n    brackets = brackets.replace('(', '')\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsaglcjc0.py\"\
    , line 66, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsaglcjc0.py\"\
    , line 64, in test_check\n    check(correct_bracketing)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsaglcjc0.py\"\
    , line 50, in check\n    assert candidate('()') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == \"(\":\n            stack.append(c)\n\
    \        elif c == \")\":\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets =\
    \ brackets.replace(\"(\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"<\", \"\").replace(\">\", \"\")\n\
    \    brackets = brackets.replace(\",\", \"\").replace(\":\", \"\")\n    brackets\
    \ = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"!\", \"\"\
    )\n    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    %\", \"\")\n    brackets = brackets.replace(\"$\", \"\")\n    brackets = brackets.replace(\"\
    &\", \"\")\n    brackets = brackets.replace(\"*\", \"\")\n    brackets = brackets.replace(\"\
    +\", \"\")\n    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\")\n    brackets = brackets.replace(\"(\", \"\").replace(\")\", \"\")\n\
    \    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    <\", \"\").replace(\">\", \"\")\n    brackets = brackets.replace(\",\", \"\").replace(\"\
    :\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\")\n    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    %\", \"\")\n    brackets = brackets.replace(\"$\", \"\")\n    brackets = brackets.replace(\"\
    &\", \"\")\n    brackets = brackets.replace(\"*\", \"\")\n    brackets = brackets.replace(\"\
    +\", \"\")\n    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\")\n    brackets = brackets.replace(\"(\", \"\").replace(\")\", \"\")\n\
    \    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    <\", \"\").replace(\">\", \"\")\n    brackets = brackets.replace(\",\", \"\").replace(\"\
    :\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\")\n    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    %\", \"\")\n    brackets = brackets.replace(\"$\", \"\")\n    brackets = brackets.replace(\"\
    &\", \"\")\n    brackets = brackets.replace(\"*\", \"\")\n    brackets = brackets.replace(\"\
    +\", \"\")\n    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\")\n    brackets = brackets.replace(\"(\", \"\").replace(\")\", \"\")\n\
    \    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    <\", \"\").replace(\">\", \"\")\n    brackets = brackets.replace(\"\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdgwosb1p.py\"\
    , line 55\n    brackets = brackets.replace(\"\n                              \
    \  ^\nSyntaxError: unterminated string literal (detected at line 55)\n"
  exit_code: 1
  status: SyntaxError
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for char in brackets:\n        if char == \"(\":\n            stack.append(char)\n\
    \        elif char == \")\":\n            if len(stack) == 0:\n              \
    \  return False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == \"(\":\n            stack.append(c)\n\
    \        elif c == \")\":\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets =\
    \ brackets.replace(\"(\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"<\", \"\").replace(\">\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\",\", \"\").replace(\" \", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\").replace(\" \", \"\")\n    brackets = brackets.replace(\";\", \"\").replace(\"\
    \ \", \"\")\n    brackets = brackets.replace(\"!\", \"\").replace(\" \", \"\"\
    )\n    brackets = brackets.replace(\"?\", \"\").replace(\" \", \"\")\n    brackets\
    \ = brackets.replace(\",\", \"\").replace(\" \", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\").replace(\" \", \"\")\n    brackets = brackets.replace(\";\", \"\").replace(\"\
    \ \", \"\")\n    brackets = brackets.replace(\"!\", \"\").replace(\" \", \"\"\
    )\n    brackets = brackets.replace(\"?\", \"\").replace(\" \", \"\")\n    brackets\
    \ = brackets.replace(\",\", \"\").replace(\" \", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\").replace(\" \", \"\")\n    brackets = brackets.replace(\";\", \"\").replace(\"\
    \ \", \"\")\n    brackets = brackets.replace(\"!\", \"\").replace(\" \", \"\"\
    )\n    brackets = brackets.replace(\"?\", \"\").replace(\" \", \"\")\n    brackets\
    \ = brackets.replace(\",\", \"\").replace(\" \", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\").replace(\" \", \"\")\n    brackets = brackets.replace(\";\", \"\").replace(\"\
    \ \", \"\")\n    brackets = brackets.replace(\"!\", \"\").replace(\" \", \"\"\
    )\n    brackets = brackets.replace(\"?\", \"\").replace(\" \", \"\")\n    brackets\
    \ = brackets.replace(\",\", \"\").replace(\" \", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\").replace(\" \", \"\")\n    brackets = brackets.replace(\";\", \"\").replace(\"\
    \ \", \"\")\n    brackets = brackets.replace(\"!\", \"\").replace(\" \", \"\"\
    )\n    brackets = brackets.replace(\"?\", \"\").replace(\" \", \"\")\n    brackets\
    \ = brackets.replace(\",\", \"\").replace(\" \", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\").replace(\" \", \"\")\n    brackets = brackets.replace(\";\", \"\").replace(\"\
    \ \", \"\")\n    brackets = brackets.replace(\"!\", \"\").replace(\" \", \"\"\
    )\n    brackets = brackets.replace(\"?\", \"\").replace(\" \", \"\")\n    brackets\
    \ = brackets.replace(\",\", \"\").replace(\" \", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\").replace(\" \", \"\")\n    brackets = brackets.replace(\";\", \"\").replace(\"\
    \ \", \"\")\n    brackets = brackets.replace(\"!\", \"\").replace(\" \", \"\"\
    )\n    brackets = brackets.replace(\"?\", \"\"\ndef check(candidate):\n    assert\
    \ candidate('()') == True\n    assert candidate('(()())') == True\n    assert\
    \ candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmilf16xk.py\"\
    , line 45\n    brackets = brackets.replace(\"?\", \"\"\n                     \
    \          ^\nSyntaxError: '(' was never closed\n"
  exit_code: 1
  status: SyntaxError
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == '(':\n            stack.append(c)\n \
    \       elif c == ')':\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets =\
    \ brackets.replace(\"(\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"<\", \"\").replace(\">\", \"\")\n\
    \    brackets = brackets.replace(\",\", \"\").replace(\":\", \"\")\n    brackets\
    \ = brackets.replace(\";\", \"\").replace(\"\\n\", \"\")\n    brackets = brackets.replace(\"\
    \\t\", \"\")\n    brackets = brackets.replace(\"!\", \"\").replace(\"?\", \"\"\
    )\n    brackets = brackets.replace(\"%\", \"\").replace(\"^\", \"\")\n    brackets\
    \ = brackets.replace(\"&\", \"\").replace(\"*\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"<\", \"\").replace(\">\", \"\")\n    brackets\
    \ = brackets.replace(\",\", \"\").replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\").replace(\"\\n\", \"\")\n    brackets = brackets.replace(\"\\t\", \"\
    \")\n    brackets = brackets.replace(\"!\", \"\").replace(\"?\", \"\")\n    brackets\
    \ = brackets.replace(\"%\", \"\").replace(\"^\", \"\")\n    brackets = brackets.replace(\"\
    &\", \"\").replace(\"*\", \"\")\n    brackets = brackets.replace(\"(\", \"\").replace(\"\
    )\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"<\", \"\").replace(\">\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\").replace(\":\", \"\")\n    brackets = brackets.replace(\";\", \"\").replace(\"\
    \\n\", \"\")\n    brackets = brackets.replace(\"\\t\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\").replace(\"?\", \"\")\n    brackets = brackets.replace(\"%\", \"\").replace(\"\
    ^\", \"\")\n    brackets = brackets.replace(\"&\", \"\").replace(\"*\", \"\")\n\
    \    brackets = brackets.replace(\"(\", \"\").replace(\")\", \"\")\n    brackets\
    \ = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"<\", \"\").replace(\"\
    >\", \"\")\n    brackets = brackets.replace(\",\", \"\").replace(\":\", \"\")\n\
    \    brackets = brackets.replace(\";\", \"\").replace(\"\\n\", \"\")\n    brackets\
    \ = brackets.replace(\"\\t\", \"\")\n    brackets = brackets.replace(\"!\", \"\
    \").replace(\"?\", \"\")\n    brackets = brackets.replace(\"%\", \"\").replace(\"\
    ^\", \"\")\n    brackets = brackets.replace(\"&\", \"\").replace(\"*\", \"\")\n\
    \    brackets = brackets.replace(\"(\", \"\").replace(\")\", \"\")\n    brackets\
    \ = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg43el4k4.py\"\
    , line 66, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg43el4k4.py\"\
    , line 64, in test_check\n    check(correct_bracketing)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg43el4k4.py\"\
    , line 50, in check\n    assert candidate('()') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for char in brackets:\n        if char == '(':\n            stack.append(char)\n\
    \        elif char == ')':\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets =\
    \ brackets.replace(\"(\", \"\")\n    brackets = brackets.replace(\")\", \"\")\n\
    \    brackets = brackets.replace(\"[\", \"\")\n    brackets = brackets.replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\")\n    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    <\", \"\")\n    brackets = brackets.replace(\">\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\")\n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\"<\", \"\")\n    brackets = brackets.replace(\"\
    >\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\")\n    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    <\", \"\")\n    brackets = brackets.replace(\">\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\")\n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\"<\", \"\")\n    brackets = brackets.replace(\"\
    >\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\")\n    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    <\", \"\")\n    brackets = brackets.replace(\">\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\")\n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\"<\", \"\")\n    brackets = brackets.replace(\"\
    >\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\")\n    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    <\", \"\")\n    brackets = brackets.replace(\">\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.\n\
    def check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpevkvb3qj.py\"\
    , line 63\n    brackets = brackets.\n                        ^\nSyntaxError: invalid\
    \ syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for char in brackets:\n        if char == \"(\":\n            stack.append(char)\n\
    \        elif char == \")\":\n            if not stack:\n                return\
    \ False\n            top = stack.pop()\n            if top != \")\":\n       \
    \         return False\n        else:\n            return False\n    return not\
    \ stack\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp30q5j86s.py\"\
    , line 38, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp30q5j86s.py\"\
    , line 36, in test_check\n    check(correct_bracketing)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp30q5j86s.py\"\
    , line 22, in check\n    assert candidate('()') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for char in brackets:\n        if char == \"(\":\n            stack.append(char)\n\
    \        elif char == \")\":\n            if not stack:\n                return\
    \ False\n            top = stack.pop()\n            if top != \")\":\n       \
    \         return False\n        else:\n            return False\n    return not\
    \ stack\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7ulx7zw3.py\"\
    , line 38, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7ulx7zw3.py\"\
    , line 36, in test_check\n    check(correct_bracketing)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7ulx7zw3.py\"\
    , line 22, in check\n    assert candidate('()') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets =\
    \ brackets.replace(\"(\", \"-LRB-\")\n    brackets = brackets.replace(\")\", \"\
    -RRB-\")\n    brackets = brackets.replace(\"[\", \"-LRB-\")\n    brackets = brackets.replace(\"\
    ]\", \"-RRB-\")\n    brackets = brackets.replace(\"{\", \"-LRB-\")\n    brackets\
    \ = brackets.replace(\"}\", \"-RRB-\")\n    brackets = brackets.replace(\"<\"\
    , \"-LRB-\")\n    brackets = brackets.replace(\">\", \"-RRB-\")\n    brackets\
    \ = brackets.replace(\"~\", \"-LRB-\")\n    brackets = brackets.replace(\"^\"\
    , \"-RRB-\")\n    brackets = brackets.replace(\"$\", \"-LRB-\")\n    brackets\
    \ = brackets.replace(\"*\", \"-LRB-\")\n    brackets = brackets.replace(\"_\"\
    , \"-RRB-\")\n    brackets = brackets.replace(\"!\", \"-LRB-\")\n    brackets\
    \ = brackets.replace(\"@\", \"-RRB-\")\n    brackets = brackets.replace(\"%\"\
    , \"-LRB-\")\n    brackets = brackets.replace(\"#\", \"-RRB-\")\n    brackets\
    \ = brackets.replace(\":\", \"-LRB-\")\n    brackets = brackets.replace(\";\"\
    , \"-RRB-\")\n    brackets = brackets.replace(\",\", \"-LRB-\")\n    brackets\
    \ = brackets.replace(\"/\", \"-RRB-\")\n    brackets = brackets.replace(\"?\"\
    , \"-LRB-\")\n    brackets = brackets.replace(\":\", \"-LRB-\")\n    brackets\
    \ = brackets.replace(\"=\", \"-RRB-\")\n    brackets = brackets.replace(\"+\"\
    , \"-LRB-\")\n    brackets = brackets.replace(\"-\", \"-RRB-\")\n    brackets\
    \ = brackets.replace(\"_\", \"-RRB-\")\n    brackets = brackets.replace(\"(\"\
    , \"-LRB-\")\n    brackets = brackets.replace(\")\", \"-RRB-\")\n    brackets\
    \ = brackets.replace(\"[\", \"-LRB-\")\n    brackets = brackets.replace(\"]\"\
    , \"-RRB-\")\n    brackets = brackets.replace(\"{\", \"-LRB-\")\n    brackets\
    \ = brackets.replace(\"}\", \"-RRB-\")\n    brackets = brackets.replace(\"<\"\
    , \"-LRB-\")\n    brackets = brackets.replace(\">\", \"-RRB-\")\n    brackets\
    \ = brackets.replace(\"~\", \"-LRB-\")\n    brackets = brackets.replace(\"^\"\
    , \"-RRB-\")\n    brackets = brackets.replace(\"$\", \"-LRB-\")\n    brackets\
    \ = brackets.replace(\"*\", \"-LRB-\")\n    brackets = brackets.replace(\"_\"\
    , \"-RRB-\")\n    brackets = brackets.replace(\"!\", \"-LRB-\")\n    brackets\
    \ = brackets.replace(\"@\", \"-RRB-\")\n    brackets = brackets.replace(\"%\n\
    def check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgzqrbe7k.py\"\
    , line 48\n    brackets = brackets.replace(\"%\n                             \
    \   ^\nSyntaxError: unterminated string literal (detected at line 48)\n"
  exit_code: 1
  status: SyntaxError
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets =\
    \ brackets.replace(\"(\", \"( \")\n    brackets = brackets.replace(\")\", \" )\"\
    )\n    brackets = brackets.replace(\"[\", \"[ \")\n    brackets = brackets.replace(\"\
    ]\", \" ]\")\n    brackets = brackets.replace(\"{\", \"{ \")\n    brackets = brackets.replace(\"\
    }\", \"} \")\n    brackets = brackets.replace(\"<\", \"< \")\n    brackets = brackets.replace(\"\
    >\", \" > \")\n    brackets = brackets.replace(\",\", \" , \")\n    brackets =\
    \ brackets.replace(\";\", \" ; \")\n    brackets = brackets.replace(\":\", \"\
    : \")\n    brackets = brackets.replace(\"=\", \" = \")\n    brackets = brackets.replace(\"\
    !\", \"! \")\n    brackets = brackets.replace(\"?\", \"? \")\n    brackets = brackets.replace(\"\
    ~\", \"~ \")\n    brackets = brackets.replace(\"|\", \"| \")\n    brackets = brackets.replace(\"\
    \\\"\", \"\\\" \")\n    brackets = brackets.replace(\"'\", \"\"\"\")\n    brackets\
    \ = brackets.replace(\"`\", \"\"\"\")\n    brackets = brackets.replace(\"!\",\
    \ \"\")\n    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    ~\", \"\")\n    brackets = brackets.replace(\"|\", \"\")\n    brackets = brackets.replace(\"\
    \\\"\", \"\\\"\")\n    brackets = brackets.replace(\"'\", \"\")\n    brackets\
    \ = brackets.replace(\"`\", \"\")\n    brackets = brackets.replace(\"!\", \"\"\
    )\n    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    ~\", \"\")\n    brackets = brackets.replace(\"|\", \"\")\n    brackets = brackets.replace(\"\
    \\\"\", \"\\\"\")\n    brackets = brackets.replace(\"'\", \"\")\n    brackets\
    \ = brackets.replace(\"`\", \"\")\n    brackets = brackets.replace(\"!\", \"\"\
    )\n    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    ~\", \"\")\n    brackets = brackets.replace(\"|\", \"\")\n    brackets = brackets.replace(\"\
    \\\"\", \"\\\"\")\n    brackets = brackets.replace(\"'\", \"\")\n    brackets\
    \ = brackets.replace(\"`\", \"\")\n    brackets = brackets.replace(\"!\", \"\"\
    )\n    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    ~\", \"\")\n    brackets = brackets.replace(\"|\", \"\")\n    brackets = brackets.replace(\"\
    \\\"\", \"\\\"\")\n    brackets = brackets.replace(\"'\", \"\")\n    brackets\
    \ = brackets.replace(\"`\", \"\")\n    brackets = brackets.replace(\"!\", \"\"\
    )\n    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    ~\", \"\")\n    brackets = brackets.replace(\"|\", \"\")\n    brackets = brackets.replace(\"\
    \\\"\", \"\\\"\")\n    bracket\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp41r49kvt.py\"\
    , line 24\n    brackets = brackets.replace(\"`\", \"\"\"\")\n                \
    \                        ^\nSyntaxError: unterminated string literal (detected\
    \ at line 24)\n"
  exit_code: 1
  status: SyntaxError
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == \"(\":\n            stack.append(c)\n\
    \        elif c == \")\":\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == \"(\":\n            stack.append(c)\n\
    \        elif c == \")\":\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for char in brackets:\n        if char == \"(\":\n            stack.append(char)\n\
    \        elif char == \")\":\n            if len(stack) == 0:\n              \
    \  return False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets =\
    \ brackets.replace(\"(\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"<\", \"\").replace(\">\", \"\")\n\
    \    brackets = brackets.replace(\",\", \"\").replace(\":\", \"\").replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\"!\", \"\").replace(\"?\", \"\")\n\
    \    brackets = brackets.replace(\"'\", \"\").replace(\"\\\"\", \"\")\n    brackets\
    \ = brackets.replace(\",\", \"\").replace(\":\", \"\").replace(\";\", \"\")\n\
    \    brackets = brackets.replace(\"!\", \"\").replace(\"?\", \"\")\n    brackets\
    \ = brackets.replace(\"'\", \"\").replace(\"\\\"\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\").replace(\":\", \"\").replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\").replace(\"?\", \"\")\n    brackets = brackets.replace(\"'\", \"\").replace(\"\
    \\\"\", \"\")\n    brackets = brackets.replace(\",\", \"\").replace(\":\", \"\"\
    ).replace(\";\", \"\")\n    brackets = brackets.replace(\"!\", \"\").replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\"'\", \"\").replace(\"\\\"\", \"\"\
    )\n    brackets = brackets.replace(\",\", \"\").replace(\":\", \"\").replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\"!\", \"\").replace(\"?\", \"\")\n\
    \    brackets = brackets.replace(\"'\", \"\").replace(\"\\\"\", \"\")\n    brackets\
    \ = brackets.replace(\",\", \"\").replace(\":\", \"\").replace(\";\", \"\")\n\
    \    brackets = brackets.replace(\"!\", \"\").replace(\"?\", \"\")\n    brackets\
    \ = brackets.replace(\"'\", \"\").replace(\"\\\"\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\").replace(\":\", \"\").replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\").replace(\"?\", \"\")\n    brackets = brackets.replace(\"'\", \"\").replace(\"\
    \\\"\", \"\")\n    brackets = brackets.replace(\",\", \"\").replace(\":\", \"\"\
    ).replace(\";\", \"\")\n    brackets = brackets.replace(\"!\", \"\").replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\"'\", \"\").replace(\"\\\"\", \"\"\
    )\n    brackets = brackets.replace(\",\", \"\").replace(\":\", \"\").replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\"!\", \"\").replace(\"?\", \"\")\n\
    \    brackets = brackets.replace(\"'\", \"\").replace(\"\\\"\", \"\")\n    brackets\
    \ = brackets.replace(\",\", \"\").replace(\":\", \"\").replace(\";\", \"\")\n\
    \    brackets = brackets.replace(\"!\", \"\").replace(\"?\", \"\")\n    brackets\
    \ = brackets.replace(\"'\", \"\").replace(\"\\\"\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\").replace(\":\", \"\").replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\").replace(\"?\", \"\")\n    brackets = brackets.replace(\"'\", \"\").replace(\"\
    \\\"\", \"\")\n    brackets = brackets.replace(\",\", \"\").replace(\":\", \"\"\
    ).replace(\";\", \"\")\n    brackets = brackets.replace(\"!\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt_mn8vhx.py\"\
    , line 44\n    brackets = brackets.replace(\"!\n                             \
    \   ^\nSyntaxError: unterminated string literal (detected at line 44)\n"
  exit_code: 1
  status: SyntaxError
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets =\
    \ brackets.replace(\"(\", \"\").replace(\")\", \"\")\n    brackets = brackets.split(\"\
    ,\")\n    brackets = [bracket for bracket in brackets if bracket]\n    brackets\
    \ = [bracket for bracket in brackets if bracket[0] != \"(\" and bracket[-1] !=\
    \ \")\"]\n    return brackets == brackets[:-1]\n\n\ndef check(candidate):\n  \
    \  assert candidate('()') == True\n    assert candidate('(()())') == True\n  \
    \  assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptix13iq4.py\"\
    , line 30, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptix13iq4.py\"\
    , line 28, in test_check\n    check(correct_bracketing)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptix13iq4.py\"\
    , line 18, in check\n    assert candidate('((()())))') == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets =\
    \ brackets.replace('(', ' ( ').replace(')', ' ) ')\n    brackets = brackets.replace('[',\
    \ ' [').replace(']', ' ] ')\n    brackets = brackets.replace('{', ' {').replace('}',\
    \ ' } ')\n    brackets = brackets.replace('(', ' ( ').replace(')', ' ) ')\n  \
    \  brackets = brackets.replace('[', ' [').replace(']', ' ] ')\n    brackets =\
    \ brackets.replace('{', ' {').replace('}', ' } ')\n    brackets = brackets.replace('(',\
    \ ' ( ').replace(')', ' ) ')\n    brackets = brackets.replace('[', ' [').replace(']',\
    \ ' ] ')\n    brackets = brackets.replace('{', ' {').replace('}', ' } ')\n   \
    \ brackets = brackets.replace('(', ' ( ').replace(')', ' ) ')\n    brackets =\
    \ brackets.replace('[', ' [').replace(']', ' ] ')\n    brackets = brackets.replace('{',\
    \ ' {').replace('}', ' } ')\n    brackets = brackets.replace('(', ' ( ').replace(')',\
    \ ' ) ')\n    brackets = brackets.replace('[', ' [').replace(']', ' ] ')\n   \
    \ brackets = brackets.replace('{', ' {').replace('}', ' } ')\n    brackets = brackets.replace('(',\
    \ ' ( ').replace(')', ' ) ')\n    brackets = brackets.replace('[', ' [').replace(']',\
    \ ' ] ')\n    brackets = brackets.replace('{', ' {').replace('}', ' } ')\n   \
    \ brackets = brackets.replace('(', ' ( ').replace(')', ' ) ')\n    brackets =\
    \ brackets.replace('[', ' [').replace(']', ' ] ')\n    brackets = brackets.replace('{',\
    \ ' {').replace('}', ' } ')\n    brackets = brackets.replace('(', ' ( ').replace(')',\
    \ ' ) ')\n    brackets = brackets.replace('[', ' [').replace(']', ' ] ')\n   \
    \ brackets = brackets.replace('{', ' {').replace('}', ' } ')\n    brackets = brackets.replace('(',\
    \ ' ( ').replace(')', ' ) ')\n    brackets = brackets.replace('[', ' [').replace(']',\
    \ ' ] ')\n    brackets = brackets.replace('{', ' {').replace('}', ' } ')\n   \
    \ brackets = brackets.replace('(', ' ( ').replace(')', ' ) ')\n    brackets =\
    \ brackets.replace('[', ' [').replace(']', ' ] ')\n    brackets = brackets.replace('{',\
    \ ' {').replace('}', ' } ')\n    brackets = brackets.replace('(', ' ( ').replace(')',\
    \ ' ) ')\n    brackets = brackets.replace('[', ' [').replace(']', ' ] ')\n   \
    \ brackets = brackets.replace('{', ' {').replace('}', ' } ')\n    brackets = brackets.replace('(',\
    \ ' ( ').replace(')', ' ) ')\n    bracket\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnkz75p8p.py\"\
    , line 58, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnkz75p8p.py\"\
    , line 56, in test_check\n    check(correct_bracketing)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnkz75p8p.py\"\
    , line 42, in check\n    assert candidate('()') == True\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnkz75p8p.py\"\
    , line 40, in correct_bracketing\n    bracket\nNameError: name 'bracket' is not\
    \ defined. Did you mean: 'brackets'?\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for char in brackets:\n        if char == '(':\n            stack.append(char)\n\
    \        elif char == ')':\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets =\
    \ brackets.replace(\"(\", \"\")\n    brackets = brackets.replace(\")\", \"\")\n\
    \    brackets = brackets.replace(\"[\", \"\")\n    brackets = brackets.replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    '\", \"\")\n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\"<\", \"\")\n    brackets = brackets.replace(\"\
    >\", \"\")\n    brackets = brackets.replace(\"~\", \"\")\n    brackets = brackets.replace(\"\
    %\", \"\")\n    brackets = brackets.replace(\"^\", \"\")\n    brackets = brackets.replace(\"\
    &\", \"\")\n    brackets = brackets.replace(\"*\", \"\")\n    brackets = brackets.replace(\"\
    +\", \"\")\n    brackets = brackets.replace(\"-\", \"\")\n    brackets = brackets.replace(\"\
    =\", \"\")\n    brackets = brackets.replace(\"[\", \"\")\n    brackets = brackets.replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    '\", \"\")\n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\"<\", \"\")\n    brackets = brackets.replace(\"\
    >\", \"\")\n    brackets = brackets.replace(\"~\", \"\")\n    brackets = brackets.replace(\"\
    %\", \"\")\n    brackets = brackets.replace(\"^\", \"\")\n    brackets = brackets.replace(\"\
    &\", \"\")\n    brackets = brackets.replace(\"*\", \"\")\n    brackets = brackets.replace(\"\
    +\", \"\")\n    brackets = brackets.replace(\"-\", \"\")\n    brackets = brackets.replace(\"\
    =\", \"\")\n    brackets = brackets.replace(\"[\", \"\")\n    brackets = brackets.replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    '\", \"\")\n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\"<\", \"\")\n    brackets = brackets.replace(\"\
    >\", \"\")\n    brackets = brackets.replace(\"~\", \"\")\n    brackets = brackets.replace(\"\
    %\", \"\")\n    brackets = brackets.replace(\"^\", \"\")\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpifkgo5oo.py\"\
    , line 80, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpifkgo5oo.py\"\
    , line 78, in test_check\n    check(correct_bracketing)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpifkgo5oo.py\"\
    , line 64, in check\n    assert candidate('()') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == '(':\n            stack.append(c)\n \
    \       elif c == ')':\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == '(':\n            stack.append(c)\n \
    \       elif c == ')':\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == \"(\":\n            stack.append(c)\n\
    \        elif c == \")\":\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == \"(\":\n            stack.append(c)\n\
    \        elif c == \")\":\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == \"(\":\n            stack.append(c)\n\
    \        elif c == \")\":\n            if not stack:\n                return False\n\
    \            top = stack.pop()\n            if top != \"(\":\n               \
    \ return False\n        else:\n            return False\n    return not stack\n\
    \n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == '(':\n            stack.append(c)\n \
    \       elif c == ')':\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets =\
    \ brackets.replace('(', ' ( ').replace(')', ' ) ')\n    brackets = brackets.replace('[',\
    \ ' [').replace(']', ' ] ')\n    brackets = brackets.replace('{', ' {').replace('}',\
    \ ' } ')\n    brackets = brackets.replace('(', ' ( ').replace(')', ' ) ')\n  \
    \  brackets = brackets.replace('[', ' [').replace(']', ' ] ')\n    brackets =\
    \ brackets.replace('{', ' {').replace('}', ' } ')\n    brackets = brackets.replace('(',\
    \ ' ( ').replace(')', ' ) ')\n    brackets = brackets.replace('[', ' [').replace(']',\
    \ ' ] ')\n    brackets = brackets.replace('{', ' {').replace('}', ' } ')\n   \
    \ brackets = brackets.replace('(', ' ( ').replace(')', ' ) ')\n    brackets =\
    \ brackets.replace('[', ' [').replace(']', ' ] ')\n    brackets = brackets.replace('{',\
    \ ' {').replace('}', ' } ')\n    brackets = brackets.replace('(', ' ( ').replace(')',\
    \ ' ) ')\n    brackets = brackets.replace('[', ' [').replace(']', ' ] ')\n   \
    \ brackets = brackets.replace('{', ' {').replace('}', ' } ')\n    brackets = brackets.replace('(',\
    \ ' ( ').replace(')', ' ) ')\n    brackets = brackets.replace('[', ' [').replace(']',\
    \ ' ] ')\n    brackets = brackets.replace('{', ' {').replace('}', ' } ')\n   \
    \ brackets = brackets.replace('(', ' ( ').replace(')', ' ) ')\n    brackets =\
    \ brackets.replace('[', ' [').replace(']', ' ] ')\n    brackets = brackets.replace('{',\
    \ ' {').replace('}', ' } ')\n    brackets = brackets.replace('(', ' ( ').replace(')',\
    \ ' ) ')\n    brackets = brackets.replace('[', ' [').replace(']', ' ] ')\n   \
    \ brackets = brackets.replace('{', ' {').replace('}', ' } ')\n    brackets = brackets.replace('(',\
    \ ' ( ').replace(')', ' ) ')\n    brackets = brackets.replace('[', ' [').replace(']',\
    \ ' ] ')\n    brackets = brackets.replace('{', ' {').replace('}', ' } ')\n   \
    \ brackets = brackets.replace('(', ' ( ').replace(')', ' ) ')\n    brackets =\
    \ brackets.replace('[', ' [').replace(']', ' ] ')\n    brackets = brackets.replace('{',\
    \ ' {').replace('}', ' } ')\n    brackets = brackets.replace('(', ' ( ').replace(')',\
    \ ' ) ')\n    brackets = brackets.replace('[', ' [').replace(']', ' ] ')\n   \
    \ brackets = brackets.replace('{', ' {').replace('}', ' } ')\n    brackets = brackets.replace('(',\
    \ ' ( ').replace(')', ' ) ')\n    bracket\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw9t68ty6.py\"\
    , line 58, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw9t68ty6.py\"\
    , line 56, in test_check\n    check(correct_bracketing)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw9t68ty6.py\"\
    , line 42, in check\n    assert candidate('()') == True\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw9t68ty6.py\"\
    , line 40, in correct_bracketing\n    bracket\nNameError: name 'bracket' is not\
    \ defined. Did you mean: 'brackets'?\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == \"(\":\n            stack.append(c)\n\
    \        elif c == \")\":\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == \"(\":\n            stack.append(c)\n\
    \        elif c == \")\":\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for char in brackets:\n        if char == '(':\n            stack.append(char)\n\
    \        elif char == ')':\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets =\
    \ brackets.replace(\"(\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"<\", \"\").replace(\">\", \"\")\n\
    \    brackets = brackets.replace(\",\", \"\").replace(\":\", \"\").replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\"!\", \"\").replace(\"?\", \"\")\n\
    \    brackets = brackets.replace(\"'\", \"\").replace(\"\\\"\", \"\")\n    brackets\
    \ = brackets.replace(\"%\", \"\").replace(\"^\", \"\")\n    brackets = brackets.replace(\"\
    &\", \"\").replace(\"*\", \"\")\n    brackets = brackets.replace(\"(\", \"\").replace(\"\
    )\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"<\", \"\").replace(\">\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\").replace(\":\", \"\").replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\").replace(\"?\", \"\")\n    brackets = brackets.replace(\"'\", \"\").replace(\"\
    \\\"\", \"\")\n    brackets = brackets.replace(\"%\", \"\").replace(\"^\", \"\"\
    )\n    brackets = brackets.replace(\"&\", \"\").replace(\"*\", \"\")\n    brackets\
    \ = brackets.replace(\"(\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"<\", \"\").replace(\">\", \"\")\n\
    \    brackets = brackets.replace(\",\", \"\").replace(\":\", \"\").replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\"!\", \"\").replace(\"?\", \"\")\n\
    \    brackets = brackets.replace(\"'\", \"\").replace(\"\\\"\", \"\")\n    brackets\
    \ = brackets.replace(\"%\", \"\").replace(\"^\", \"\")\n    brackets = brackets.replace(\"\
    &\", \"\").replace(\"*\", \"\")\n    brackets = brackets.replace(\"(\", \"\").replace(\"\
    )\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"<\", \"\").replace(\">\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\").replace(\":\", \"\").replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\").replace(\"?\", \"\")\n    brackets = brackets.replace(\"'\", \"\").replace(\"\
    \\\"\", \"\")\n    brackets = brackets.replace(\"%\", \"\").replace(\"^\", \"\"\
    )\n    brackets = brackets.replace(\"&\", \"\").replace(\"*\", \"\")\n    brackets\
    \ = brackets.replace(\"(\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"<\", \"\").replace(\">\", \"\")\n\
    \    brackets = brackets.replace(\"\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa5kqhh7l.py\"\
    , line 46\n    brackets = brackets.replace(\"\n                              \
    \  ^\nSyntaxError: unterminated string literal (detected at line 46)\n"
  exit_code: 1
  status: SyntaxError
