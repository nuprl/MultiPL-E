language: py
name: HumanEval_157_right_angle_triangle
results:
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input:\n            a =3\n    \
    \        b=4\n            c=6\n            Output:\n            True\n       \
    \     \"\"\"\n    \"\"\"\n    a, b, c = sorted([a, b, c])\n    if a + b > c and\
    \ b + c > a and c + a > b:\n        return True\n    return False\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpkdbtbmgg.py\", line 9\n    Input:\nIndentationError: unexpected\
    \ indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input: a = 5, b = 10, c = 15\n\
    \            Output: True\n            \"\"\"\n            Input: a = 5, b = 10,\
    \ c = 10\n            Output: False\n            \"\"\"\n            Input: a\
    \ = 5, b = 10, c = 5\n            Output: True\n            \"\"\"\n         \
    \   Input: a = 5, b = 10, c = 10\n            Output: True\n            \"\"\"\
    \n            Input: a = 5, b = 10, c = 5\n            Output: True\n        \
    \    \"\"\"\n            Input: a = 5, b = 10, c = 10\n            Output: True\n\
    \            \"\"\"\n            Input: a = 5, b = 10, c = 5\n            Output:\
    \ True\n            \"\"\"\n            Input: a = 5, b = 10, c = 10\n       \
    \     Output: True\n            \"\"\"\n            Input: a = 5, b = 10, c =\
    \ 5\n            Output: True\n            \"\"\"\n            Input: a = 5, b\
    \ = 10, c = 10\n            Output: True\n            \"\"\"\n            Input:\
    \ a = 5, b = 10, c = 5\n            Output: True\n            \"\"\"\n       \
    \     Input: a = 5, b = 10, c = 10\n            Output: True\n            \"\"\
    \"\n            Input: a = 5, b = 10, c = 5\n            Output: True\n      \
    \      \"\"\"\n            Input: a = 5, b = 10, c = 10\n            Output: True\n\
    \            \"\"\"\n            Input: a = 5, b = 10, c = 5\n            Output:\
    \ True\n            \"\"\"\n            Input: a = 5, b = 10, c = 10\n       \
    \     Output: True\n            \"\"\"\n            Input: a = 5, b = 10, c =\
    \ 5\n            Output: True\n            \"\"\"\n            Input: a = 5, b\
    \ = 10, c = 10\n            Output: True\n            \"\"\"\n            Input:\
    \ a = 5, b = 10, c = 5\n            Output: True\n            \"\"\"\n       \
    \     Input: a = 5, b = 10, c = 10\n            Output: True\n            \"\"\
    \"\n            Input: a = 5, b = 10, c = 5\n            Output: True\n      \
    \      \"\"\"\n            Input: a = 5, b = 10, c = 10\n            Output: True\n\
    \            \"\"\"\n            Input: a = 5, b = 10, c = 5\n            Output:\
    \ True\n            \"\"\"\n            Input: a = 5, b = 10, c = 10\n       \
    \     Output: True\n            \"\"\"\n            Input: a = 5, b = 10, c =\
    \ 5\n            Output: True\n            \"\"\"\n            Input: a = 5, b\
    \ = 10, c = 10\n            Output: True\n            \"\"\"\n            Input:\
    \ a = 5, b = 10, c = 5\n            Output: True\n            \"\"\"\n       \
    \     Input: a = 5, b = 10, c = 10\n            Output: True\n            \"\"\
    \"\n            Input: a = 5, b = 10, c = 5\n            Output: True\n      \
    \      \"\"\"\n            Input: a = 5, b = 10, c = 10\n            Output: True\n\
    \            \"\"\"\n            Input: a = 5, b = 10, c = 5\n            Output:\
    \ True\n            \"\"\"\n            Input: a = 5, b = 10, c = 10\n       \
    \     Output: True\n            \"\"\"\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpy9ig7f4s.py\", line 9\n    Input: a = 5, b = 10, c = 15\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input:\n            a =3\n    \
    \        b=4\n            c=6\n            Output:\n            True\n       \
    \     \"\"\"\n    \"\"\"\n    \n    if a == 0 and b == 0 and c == 0:\n       \
    \ return True\n    elif a == 0:\n        return False\n    elif b == 0:\n    \
    \    return False\n    elif c == 0:\n        return False\n    elif a > b and\
    \ a > c:\n        return True\n    elif b > c and b > a:\n        return True\n\
    \    elif c > a and c > b:\n        return True\n    else:\n        return False\n\
    \    \n    \ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n  \
    \  assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n\
    \    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n\
    \    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n\
    \    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) ==\
    \ True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10)\
    \ == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp6yzxxxzi.py\", line 9\n    Input:\nIndentationError: unexpected\
    \ indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input:\n            a =   3\n \
    \           b =   5\n            c =   4\n            Output:\n            True\n\
    \            \"\"\"\n    \"\"\"\n    a, b, c = sorted([a, b, c])\n    if a + b\
    \ > c and b + c > a and c + a > b:\n        return True\n    return False\n\n\n\
    def check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmplcf_jzex.py\", line 9\n    Input:\nIndentationError: unexpected\
    \ indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input: a = 4, b = 2, c = 6\n  \
    \          Output: True\n            \"\"\"\n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp0gbxnr0e.py\", line 9\n    Input: a = 4, b = 2, c = 6\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input:\n                    a =\
    \ 5\n                    b = 4\n                    c = 6\n            Output:\n\
    \                    True\n            \"\"\"\n            Input:\n          \
    \          a = 5\n                    b = 4\n                    c = 6\n     \
    \       Output:\n                    False\n    \"\"\"\n    if a + b > c and a\
    \ + c > b and b + c > a:\n        return True\n    else:\n        return False\n\
    \ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpzfx_dvrg.py\", line 9\n    Input:\nIndentationError: unexpected\
    \ indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input:\n                    a =\
    \ 5\n                    b = 4\n                    c = 6\n            Output:\n\
    \                    True\n            \"\"\"\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpranu6se8.py\", line 9\n    Input:\nIndentationError: unexpected\
    \ indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input:\n            a =   3\n \
    \           b =   2\n            c =   1\n            Output:\n            True\n\
    \            Input:\n            a =   3\n            b =   2\n            c =\
    \   4\n            Output:\n            False\n            Input:\n          \
    \  a =   3\n            b =   4\n            c =   1\n            Output:\n  \
    \          False\n            Input:\n            a =   3\n            b =   4\n\
    \            c =   5\n            Output:\n            False\n            Input:\n\
    \            a =   3\n            b =   4\n            c =   6\n            Output:\n\
    \            False\n            Input:\n            a =   3\n            b = \
    \  4\n            c =   7\n            Output:\n            False\n          \
    \  Input:\n            a =   3\n            b =   4\n            c =   8\n   \
    \         Output:\n            False\n            Input:\n            a =   3\n\
    \            b =   4\n            c =   9\n            Output:\n            False\n\
    \            Input:\n            a =   3\n            b =   4\n            c =\
    \   10\n            Output:\n            False\n            Input:\n         \
    \   a =   3\n            b =   4\n            c =   11\n            Output:\n\
    \            False\n            Input:\n            a =   3\n            b = \
    \  4\n            c =   12\n            Output:\n            False\n         \
    \   Input:\n            a =   3\n            b =   4\n            c =   13\n \
    \           Output:\n            False\n            Input:\n            a =  \
    \ 3\n            b =   4\n            c =   14\n            Output:\n        \
    \    False\n            Input:\n            a =   3\n            b =   4\n   \
    \         c =   15\n            Output:\n            False\n            Input:\n\
    \            a =   3\n            b =   4\n            c =   16\n            Output:\n\
    \            False\n            Input:\n            a =   3\n            b = \
    \  4\n            c =   17\n            Output:\n            False\n         \
    \   Input:\n            a =   3\n            b =   4\n            c =   18\n \
    \           Output:\n            False\n            Input:\n            a =  \
    \ 3\n            b =   4\n            c =   19\n            Output:\n        \
    \    False\n            Input:\n            a =   \ndef check(candidate):\n  \
    \  assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpccvfob3h.py\", line 9\n    Input:\nIndentationError: unexpected\
    \ indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input: a = 2, b = 2, c = 3\n  \
    \          Output: True\n            \"\"\"\n            Input: a = 2, b = 1,\
    \ c = 3\n            Output: False\n            \"\"\"\n            Input: a =\
    \ 2, b = 2, c = 1\n            Output: True\n            \"\"\"\n            Input:\
    \ a = 2, b = 2, c = 4\n            Output: False\n            \"\"\"\n       \
    \     Input: a = 2, b = 2, c = 5\n            Output: True\n            \"\"\"\
    \n            Input: a = 2, b = 2, c = 6\n            Output: False\n        \
    \    \"\"\"\n            Input: a = 2, b = 2, c = 7\n            Output: True\n\
    \            \"\"\"\n            Input: a = 2, b = 2, c = 8\n            Output:\
    \ False\n            \"\"\"\n            Input: a = 2, b = 2, c = 9\n        \
    \    Output: True\n            \"\"\"\n            Input: a = 2, b = 2, c = 10\n\
    \            Output: False\n            \"\"\"\n            Input: a = 2, b =\
    \ 2, c = 11\n            Output: True\n            \"\"\"\n            Input:\
    \ a = 2, b = 2, c = 12\n            Output: False\n            \"\"\"\n      \
    \      Input: a = 2, b = 2, c = 13\n            Output: True\n            \"\"\
    \"\n            Input: a = 2, b = 2, c = 14\n            Output: False\n     \
    \       \"\"\"\n            Input: a = 2, b = 2, c = 15\n            Output: True\n\
    \            \"\"\"\n            Input: a = 2, b = 2, c = 16\n            Output:\
    \ False\n            \"\"\"\n            Input: a = 2, b = 2, c = 17\n       \
    \     Output: True\n            \"\"\"\n            Input: a = 2, b = 2, c = 18\n\
    \            Output: False\n            \"\"\"\n            Input: a = 2, b =\
    \ 2, c = 19\n            Output: True\n            \"\"\"\n            Input:\
    \ a = 2, b = 2, c = 20\n            Output: False\n            \"\"\"\n      \
    \      Input: a = 2, b = 2, c = 21\n            Output: True\n            \"\"\
    \"\n            Input: a = 2, b = 2, c = 22\n            Output: False\n     \
    \       \"\"\"\n            Input: a = 2, b = 2, c = 23\n            Output: True\n\
    \            \"\"\"\n            Input: a = 2, b = 2, c = 24\n            Output:\
    \ False\n            \"\"\"\n            Input: a = 2, b = 2, c = 25\n       \
    \     Output: True\n            \"\"\"\n            Input: a = 2, b = 2, c = 26\n\
    \            Output: False\n            \"\"\"\n            Input: a = 2, b =\
    \ 2, c = 27\n            Output: True\n            \"\"\"\n            Input:\
    \ a = 2, b = 2, c = 28\n            Output: False\n            \"\"\"\n      \
    \      Input: a = 2, b = 2, c = 29\n            Output: True\n            \"\"\
    \"\n            Input: a = 2, b = 2, c = 30\n            Output: False\n     \
    \       \"\"\"\n            Input: a = 2, b = 2, c = 31\n            Output: True\n\
    \            \"\"\"\n            Input: a = 2, b = 2, c = 32\n            Output:\
    \ False\n            \"\"\"\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpuvr8zi3s.py\", line 9\n    Input: a = 2, b = 2, c = 3\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input:\n            a =3\n    \
    \        b=4\n            c=5\n            Output:\n            True\n       \
    \     \"\"\"\n    \"\"\"\n    a, b, c = sorted([a, b, c])\n    if a + b > c and\
    \ b + c > a and c + a > b:\n        return True\n    else:\n        return False\n\
    \n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpupmz20he.py\", line 9\n    Input:\nIndentationError: unexpected\
    \ indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input:\n            a =3\n    \
    \        b=4\n            c=5\n            Output:\n            True\n       \
    \     \"\"\"\n            \n    \"\"\"\n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n\
    \    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n\
    \    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n\
    \    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n\
    \    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) ==\
    \ True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10)\
    \ == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpzthegh6n.py\", line 9\n    Input:\nIndentationError: unexpected\
    \ indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input:\n            a =3\n    \
    \        b=4\n            c=5\n            Output:\n            True\n       \
    \     \"\"\"\n    \"\"\"\n    \n    if a==b and b==c:\n        return True\n \
    \   elif a==b or a==c or b==c:\n        return False\n    else:\n        angle1\
    \ = math.degrees(math.acos((a**2+b**2-c**2)/(2*a*b)))\n        angle2 = math.degrees(math.acos((a**2+c**2-b**2)/(2*a*c)))\n\
    \        angle3 = math.degrees(math.acos((b**2+c**2-a**2)/(2*b*c)))\n        if\
    \ angle1==angle2 and angle2==angle3:\n            return True\n        else:\n\
    \            return False\n        \ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpwvqbtpp4.py\", line 9\n    Input:\nIndentationError: unexpected\
    \ indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input:\n            a : 5\n   \
    \         b : 4\n            c : 3\n            Output:\n            True\n  \
    \          \"\"\"\n    \"\"\"\n    a, b, c = sorted([a, b, c])\n    if a + b >\
    \ c and b + c > a and c + a > b:\n        return True\n    else:\n        return\
    \ False\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n  \
    \  assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n\
    \    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n\
    \    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n\
    \    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) ==\
    \ True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10)\
    \ == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpwwrymdwr.py\", line 9\n    Input:\nIndentationError: unexpected\
    \ indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input: a = 2, b = 2, c = 3\n  \
    \          Output: True\n            \"\"\"\n            Input: a = 2, b = 1,\
    \ c = 3\n            Output: False\n            \"\"\"\n            Input: a =\
    \ 2, b = 2, c = 1\n            Output: True\n            \"\"\"\n            Input:\
    \ a = 2, b = 2, c = 4\n            Output: True\n            \"\"\"\n        \
    \    Input: a = 2, b = 2, c = 5\n            Output: False\n            \"\"\"\
    \n            Input: a = 2, b = 2, c = 6\n            Output: True\n         \
    \   \"\"\"\n            Input: a = 2, b = 2, c = 7\n            Output: True\n\
    \            \"\"\"\n            Input: a = 2, b = 2, c = 8\n            Output:\
    \ True\n            \"\"\"\n            Input: a = 2, b = 2, c = 9\n         \
    \   Output: True\n            \"\"\"\n            Input: a = 2, b = 2, c = 10\n\
    \            Output: True\n            \"\"\"\n            Input: a = 2, b = 2,\
    \ c = 11\n            Output: True\n            \"\"\"\n            Input: a =\
    \ 2, b = 2, c = 12\n            Output: True\n            \"\"\"\n           \
    \ Input: a = 2, b = 2, c = 13\n            Output: True\n            \"\"\"\n\
    \            Input: a = 2, b = 2, c = 14\n            Output: True\n         \
    \   \"\"\"\n            Input: a = 2, b = 2, c = 15\n            Output: True\n\
    \            \"\"\"\n            Input: a = 2, b = 2, c = 16\n            Output:\
    \ True\n            \"\"\"\n            Input: a = 2, b = 2, c = 17\n        \
    \    Output: True\n            \"\"\"\n            Input: a = 2, b = 2, c = 18\n\
    \            Output: True\n            \"\"\"\n            Input: a = 2, b = 2,\
    \ c = 19\n            Output: True\n            \"\"\"\n            Input: a =\
    \ 2, b = 2, c = 20\n            Output: True\n            \"\"\"\n           \
    \ Input: a = 2, b = 2, c = 21\n            Output: True\n            \"\"\"\n\
    \            Input: a = 2, b = 2, c = 22\n            Output: True\n         \
    \   \"\"\"\n            Input: a = 2, b = 2, c = 23\n            Output: True\n\
    \            \"\"\"\n            Input: a = 2, b = 2, c = 24\n            Output:\
    \ True\n            \"\"\"\n            Input: a = 2, b = 2, c = 25\n        \
    \    Output: True\n            \"\"\"\n            Input: a = 2, b = 2, c = 26\n\
    \            Output: True\n            \"\"\"\n            Input: a = 2, b = 2,\
    \ c = 27\n            Output: True\n            \"\"\"\n            Input: a =\
    \ 2, b = 2, c = 28\n            Output: True\n            \"\"\"\n           \
    \ Input: a = 2, b = 2, c = 29\n            Output: True\n            \"\"\"\n\
    \            Input: a = 2, b = 2, c = 30\n            Output: True\n         \
    \   \"\"\"\n            Input: a = 2, b = 2, c = 31\n            Output: True\n\
    \            \"\"\"\n            Input: a = 2, b = 2, c = 32\n            Output:\
    \ True\n            \"\"\"\n\ndef check(candidate):\n    assert candidate(3, 4,\
    \ 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpu53ai7al.py\", line 9\n    Input: a = 2, b = 2, c = 3\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input:\n            a =3\n    \
    \        b = 1\n            c = 2\n            Output:\n            True\n   \
    \         \"\"\"\n            \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n\
    \    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n\
    \    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n\
    \    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n\
    \    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) ==\
    \ True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10)\
    \ == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpysd2qqv0.py\", line 9\n    Input:\nIndentationError: unexpected\
    \ indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: 1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n    >>> right_angle_triangle(3, 4, 5)\n   \
    \ True\n    >>> right_angle_triangle(3, 4, 6)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 7)\n    False\n    >>> right_angle_triangle(3, 4, 8)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 9)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 10)\n    False\n    >>> right_angle_triangle(3, 4, 11)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 12)\n    False\n    >>> right_angle_triangle(3, 4, 13)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 14)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 15)\n    False\n    >>> right_angle_triangle(3, 4, 16)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 17)\n    False\n    >>> right_angle_triangle(3, 4, 18)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 19)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 20)\n    False\n    >>> right_angle_triangle(3, 4, 21)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 22)\n    False\n    >>> right_angle_triangle(3, 4, 23)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 24)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 25)\n    False\n    >>> right_angle_triangle(3, 4, 26)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 27)\n    False\n    >>> right_angle_triangle(3, 4, 28)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 29)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 30)\n    False\n    >>> right_angle_triangle(3, 4, 31)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 32)\n    False\n    >>> right_angle_triangle(3, 4, 33)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 34)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 35)\n    False\n    >>> right_angle_triangle(3, 4, 36)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 37)\n    False\n    >>> right_angle_triangle(3, 4, 38)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 39)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 40)\n    False\n    >>> right_angle_triangle(3, 4, 41)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 42)\n    False\n    >>> right_angle_triangle(3, 4, 43)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 44)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 45)\n    False\n    >>> right_angle_triangle(3, 4, 46)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 47)\n    False\n    >>> right_angle_triangle(3, 4, 48)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 49)\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp5qtlr982.py\", line 9\n    >>> right_angle_triangle(3,\
    \ 4, 5)\n    ^^\nSyntaxError: invalid syntax\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input: a = 2, b = 2, c = 3\n  \
    \          Output: True\n            \"\"\"\n            Input: a = 2, b = 1,\
    \ c = 1\n            Output: False\n            \"\"\"\n            Input: a =\
    \ 2, b = 1, c = 2\n            Output: True\n            \"\"\"\n            Input:\
    \ a = 2, b = 1, c = 4\n            Output: True\n            \"\"\"\n        \
    \    Input: a = 2, b = 1, c = 5\n            Output: False\n            \"\"\"\
    \n            Input: a = 2, b = 1, c = 6\n            Output: True\n         \
    \   \"\"\"\n            Input: a = 2, b = 1, c = 7\n            Output: True\n\
    \            \"\"\"\n            Input: a = 2, b = 1, c = 8\n            Output:\
    \ True\n            \"\"\"\n            Input: a = 2, b = 1, c = 9\n         \
    \   Output: True\n            \"\"\"\n            Input: a = 2, b = 1, c = 10\n\
    \            Output: True\n            \"\"\"\n            Input: a = 2, b = 1,\
    \ c = 11\n            Output: True\n            \"\"\"\n            Input: a =\
    \ 2, b = 1, c = 12\n            Output: True\n            \"\"\"\n           \
    \ Input: a = 2, b = 1, c = 13\n            Output: True\n            \"\"\"\n\
    \            Input: a = 2, b = 1, c = 14\n            Output: True\n         \
    \   \"\"\"\n            Input: a = 2, b = 1, c = 15\n            Output: True\n\
    \            \"\"\"\n            Input: a = 2, b = 1, c = 16\n            Output:\
    \ True\n            \"\"\"\n            Input: a = 2, b = 1, c = 17\n        \
    \    Output: True\n            \"\"\"\n            Input: a = 2, b = 1, c = 18\n\
    \            Output: True\n            \"\"\"\n            Input: a = 2, b = 1,\
    \ c = 19\n            Output: True\n            \"\"\"\n            Input: a =\
    \ 2, b = 1, c = 20\n            Output: True\n            \"\"\"\n           \
    \ Input: a = 2, b = 1, c = 21\n            Output: True\n            \"\"\"\n\
    \            Input: a = 2, b = 1, c = 22\n            Output: True\n         \
    \   \"\"\"\n            Input: a = 2, b = 1, c = 23\n            Output: True\n\
    \            \"\"\"\n            Input: a = 2, b = 1, c = 24\n            Output:\
    \ True\n            \"\"\"\n            Input: a = 2, b = 1, c = 25\n        \
    \    Output: True\n            \"\"\"\n            Input: a = 2, b = 1, c = 26\n\
    \            Output: True\n            \"\"\"\n            Input: a = 2, b = 1,\
    \ c = 27\n            Output: True\n            \"\"\"\n            Input: a =\
    \ 2, b = 1, c = 28\n            Output: True\n            \"\"\"\n           \
    \ Input: a = 2, b = 1, c = 29\n            Output: True\n            \"\"\"\n\
    \            Input: a = 2, b = 1, c = 30\n            Output: True\n         \
    \   \"\"\"\n            Input: a = 2, b = 1, c = 31\n            Output: True\n\
    \            \"\"\"\n            Input: a = 2, b = 1, c = 32\n            Output:\
    \ True\n            \"\"\"\ndef check(candidate):\n    assert candidate(3, 4,\
    \ 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpbqjlccx3.py\", line 9\n    Input: a = 2, b = 2, c = 3\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input:\n            a =3\n    \
    \        b=4\n            c=6\n            Output:\n            True\n       \
    \     \"\"\"\n    \"\"\"\n    a, b, c = sorted([a, b, c])\n    if a + b > c and\
    \ b + c > a and c + a > b:\n        return True\n    else:\n        return False\n\
    \n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpkt7ykloe.py\", line 9\n    Input:\nIndentationError: unexpected\
    \ indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: 1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n    >>> right_angle_triangle(3, 5, 7)\n   \
    \ True\n    >>> right_angle_triangle(3, 5, 6)\n    False\n    >>> right_angle_triangle(3,\
    \ 5, 4)\n    False\n    >>> right_angle_triangle(3, 5, 1)\n    False\n    >>>\
    \ right_angle_triangle(3, 5, 0)\n    False\n    >>> right_angle_triangle(3, 5,\
    \ -1)\n    False\n    >>> right_angle_triangle(3, 5, -4)\n    False\n    >>> right_angle_triangle(3,\
    \ 5, -6)\n    False\n    >>> right_angle_triangle(3, 5, -7)\n    False\n    >>>\
    \ right_angle_triangle(3, 5, -5)\n    False\n    >>> right_angle_triangle(3, 5,\
    \ -3)\n    False\n    >>> right_angle_triangle(3, 5, -2)\n    False\n    >>> right_angle_triangle(3,\
    \ 5, -1)\n    False\n    >>> right_angle_triangle(3, 5, -2)\n    False\n    >>>\
    \ right_angle_triangle(3, 5, -3)\n    False\n    >>> right_angle_triangle(3, 5,\
    \ -4)\n    False\n    >>> right_angle_triangle(3, 5, -5)\n    False\n    >>> right_angle_triangle(3,\
    \ 5, -6)\n    False\n    >>> right_angle_triangle(3, 5, -7)\n    False\n    >>>\
    \ right_angle_triangle(3, 5, -7)\n    False\n    >>> right_angle_triangle(3, 5,\
    \ -7)\n    False\n    >>> right_angle_triangle(3, 5, -7)\n    False\n    >>> right_angle_triangle(3,\
    \ 5, -7)\n    False\n    >>> right_angle_triangle(3, 5, -7)\n    False\n    >>>\
    \ right_angle_triangle(3, 5, -7)\n    False\n    >>> right_angle_triangle(3, 5,\
    \ -7)\n    False\n    >>> right_angle_triangle(3, 5, -7)\n    False\n    >>> right_angle_triangle(3,\
    \ 5, -7)\n    False\n    >>> right_angle_triangle(3, 5, -7)\n    False\n    >>>\
    \ right_angle_triangle(3, 5, -7)\n    False\n    >>> right_angle_triangle(3, 5,\
    \ -7)\n    False\n    >>> right_angle_triangle(3, 5, -7)\n    False\n    >>> right_angle_triangle(3,\
    \ 5, -7)\n    False\n    >>> right_angle_triangle(3, 5, -7)\n    False\n    >>>\
    \ right_angle_triangle(3, 5, -7)\n    False\n    >>> right_angle_triangle(3, 5,\
    \ -7)\n    False\n    >>> right_angle_triangle(3, 5, -7)\n    False\n    >>> right_angle_triangle(3,\
    \ 5, -7)\n    False\n    >>> right_angle_triangle(3, 5, -7)\n    False\n    >>>\
    \ right_angle_triangle(3, 5, -7)\n    False\n    >>> right_angle_triangle(3, 5,\
    \ -7)\n    False\n    >>> right_angle_triangle(3, 5, -7)\n    False\n    >>> right_angle_triangle(3,\
    \ 5, -7)\n    False\n    >>> right_angle_triangle\ndef check(candidate):\n   \
    \ assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp8s6ryxv0.py\", line 9\n    >>> right_angle_triangle(3,\
    \ 5, 7)\n    ^^\nSyntaxError: invalid syntax\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input:\n            a =3\n    \
    \        b=4\n            c=5\n            Output:\n            True\n       \
    \     \"\"\"\n    \"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert\
    \ candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert\
    \ candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert\
    \ candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert\
    \ candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n   \
    \ assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\
    \ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpw7xxzlfj.py\", line 9\n    Input:\nIndentationError: unexpected\
    \ indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input:\n            a : 5\n   \
    \         b : 3\n            c : 4\n            Output:\n            True\n  \
    \          \"\"\"\n    \"\"\"\n    a, b, c = sorted([a, b, c])\n    if a + b >\
    \ c and b + c > a and c + a > b:\n        return True\n    else:\n        return\
    \ False\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n  \
    \  assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n\
    \    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n\
    \    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n\
    \    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) ==\
    \ True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10)\
    \ == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp92jq6sr_.py\", line 9\n    Input:\nIndentationError: unexpected\
    \ indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input:\n                    a =\
    \ 5\n                    b = 4\n                    c = 6\n            Output:\n\
    \                    True\n            \"\"\"\n            Input:\n          \
    \          a = 5\n                    b = 4\n                    c = 6\n     \
    \       Output:\n                    False\n    \"\"\"\n    if a == b and b ==\
    \ c:\n        return True\n    elif a == b or a == c:\n        return True\n \
    \   elif b == c or b == a:\n        return True\n    else:\n        return False\n\
    \n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpbhwinm2o.py\", line 9\n    Input:\nIndentationError: unexpected\
    \ indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: 1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n    >>> right_angle_triangle(3, 4, 5)\n   \
    \ True\n    >>> right_angle_triangle(3, 5, 4)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 6)\n    True\n    >>> right_angle_triangle(3, 4, 7)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 8)\n    False\n    >>> right_angle_triangle(3, 4, 9)\n    True\n    >>> right_angle_triangle(3,\
    \ 4, 10)\n    False\n    >>> right_angle_triangle(3, 4, 11)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 12)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 13)\n    False\n    >>> right_angle_triangle(3, 4, 14)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 15)\n    False\n    >>> right_angle_triangle(3, 4, 16)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 17)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 18)\n    False\n    >>> right_angle_triangle(3, 4, 19)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 20)\n    False\n    >>> right_angle_triangle(3, 4, 21)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 22)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 23)\n    False\n    >>> right_angle_triangle(3, 4, 24)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 25)\n    False\n    >>> right_angle_triangle(3, 4, 26)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 27)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 28)\n    False\n    >>> right_angle_triangle(3, 4, 29)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 30)\n    False\n    >>> right_angle_triangle(3, 4, 31)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 32)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 33)\n    False\n    >>> right_angle_triangle(3, 4, 34)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 35)\n    False\n    >>> right_angle_triangle(3, 4, 36)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 37)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 38)\n    False\n    >>> right_angle_triangle(3, 4, 39)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 40)\n    False\n    >>> right_angle_triangle(3, 4, 41)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 42)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 43)\n    False\n    >>> right_angle_triangle(3, 4, 44)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 45)\n    False\n    >>> right_angle_triangle(3, 4, 46)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 47)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 48)\n    False\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n\
    \    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n\
    \    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n\
    \    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n\
    \    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) ==\
    \ True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10)\
    \ == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpntwim0gl.py\", line 9\n    >>> right_angle_triangle(3,\
    \ 4, 5)\n    ^^\nSyntaxError: invalid syntax\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: 1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n    >>> right_angle_triangle(3, 4, 5)\n   \
    \ True\n    >>> right_angle_triangle(3, 4, 6)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 7)\n    True\n    >>> right_angle_triangle(3, 4, 8)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 9)\n    True\n    >>> right_angle_triangle(3, 4, 10)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 11)\n    True\n    >>> right_angle_triangle(3, 4,\
    \ 12)\n    False\n    >>> right_angle_triangle(3, 4, 13)\n    True\n    >>> right_angle_triangle(3,\
    \ 4, 14)\n    False\n    >>> right_angle_triangle(3, 4, 15)\n    True\n    >>>\
    \ right_angle_triangle(3, 4, 16)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 17)\n    True\n    >>> right_angle_triangle(3, 4, 18)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 19)\n    True\n    >>> right_angle_triangle(3, 4, 20)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 21)\n    True\n    >>> right_angle_triangle(3, 4,\
    \ 22)\n    False\n    >>> right_angle_triangle(3, 4, 23)\n    True\n    >>> right_angle_triangle(3,\
    \ 4, 24)\n    False\n    >>> right_angle_triangle(3, 4, 25)\n    True\n    >>>\
    \ right_angle_triangle(3, 4, 26)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 27)\n    True\n    >>> right_angle_triangle(3, 4, 28)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 29)\n    True\n    >>> right_angle_triangle(3, 4, 30)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 31)\n    True\n    >>> right_angle_triangle(3, 4,\
    \ 32)\n    False\n    >>> right_angle_triangle(3, 4, 33)\n    True\n    >>> right_angle_triangle(3,\
    \ 4, 34)\n    False\n    >>> right_angle_triangle(3, 4, 35)\n    True\n    >>>\
    \ right_angle_triangle(3, 4, 36)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 37)\n    True\n    >>> right_angle_triangle(3, 4, 38)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 39)\n    True\n    >>> right_angle_triangle(3, 4, 40)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 41)\n    True\n    >>> right_angle_triangle(3, 4,\
    \ 42)\n    False\n    >>> right_angle_triangle(3, 4, 43)\n    True\n    >>> right_angle_triangle(3,\
    \ 4, 44)\n    False\n    >>> right_angle_triangle(3, 4, 45)\n    True\n    >>>\
    \ right_angle_triangle(3, 4, 46)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 47)\n    True\n    >>> right_angle_triangle(3, 4, 48)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 49)\n    True\n    >>> right_angle_triangle(3, 4, 50)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 5\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp_hugl6p5.py\", line 9\n    >>> right_angle_triangle(3,\
    \ 4, 5)\n    ^^\nSyntaxError: invalid syntax\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input: a = 1, b = 2, c = 3\n  \
    \          Output: True\n            Input: a = 1, b = 2, c = 4\n            Output:\
    \ False\n            Input: a = 1, b = 2, c = 5\n            Output: False\n \
    \           Input: a = 1, b = 2, c = 6\n            Output: True\n           \
    \ Input: a = 1, b = 2, c = 7\n            Output: True\n            Input: a =\
    \ 1, b = 2, c = 8\n            Output: False\n            Input: a = 1, b = 2,\
    \ c = 9\n            Output: False\n            Input: a = 1, b = 2, c = 10\n\
    \            Output: True\n            Input: a = 1, b = 2, c = 11\n         \
    \   Output: True\n            Input: a = 1, b = 2, c = 12\n            Output:\
    \ True\n            Input: a = 1, b = 2, c = 13\n            Output: True\n  \
    \          Input: a = 1, b = 2, c = 14\n            Output: True\n           \
    \ Input: a = 1, b = 2, c = 15\n            Output: True\n            Input: a\
    \ = 1, b = 2, c = 16\n            Output: True\n            Input: a = 1, b =\
    \ 2, c = 17\n            Output: True\n            Input: a = 1, b = 2, c = 18\n\
    \            Output: True\n            Input: a = 1, b = 2, c = 19\n         \
    \   Output: True\n            Input: a = 1, b = 2, c = 20\n            Output:\
    \ True\n            Input: a = 1, b = 2, c = 21\n            Output: True\n  \
    \          Input: a = 1, b = 2, c = 22\n            Output: True\n           \
    \ Input: a = 1, b = 2, c = 23\n            Output: True\n            Input: a\
    \ = 1, b = 2, c = 24\n            Output: True\n            Input: a = 1, b =\
    \ 2, c = 25\n            Output: True\n            Input: a = 1, b = 2, c = 26\n\
    \            Output: True\n            Input: a = 1, b = 2, c = 27\n         \
    \   Output: True\n            Input: a = 1, b = 2, c = 28\n            Output:\
    \ True\n            Input: a = 1, b = 2, c = 29\n            Output: True\n  \
    \          Input: a = 1, b = 2, c = 30\n            Output: True\n           \
    \ Input: a = 1, b = 2, c = 31\n            Output: True\n            Input: a\
    \ = 1, b = 2, c = 32\n            Output: True\n            Input: a = 1, b =\
    \ 2, c = 33\n            Output: True\n            Input: a = 1, b = 2, c = 34\n\
    \            Output: True\n            Input: a = 1, b = 2, c = 35\n         \
    \   Output: True\n            Input: a = 1, b = 2, c = 36\n            Output:\
    \ True\n            Input: a = 1, b = 2, c = 37\n            Output: True\n  \
    \          Input: a = 1, b = 2, c = 38\n            Output: True\n           \
    \ Input: a = 1, \ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n\
    \    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n\
    \    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n\
    \    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n\
    \    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) ==\
    \ True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10)\
    \ == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpguaor4_2.py\", line 9\n    Input: a = 1, b = 2, c = 3\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input: a = 1, b = 2, c = 3\n  \
    \          Output: True\n            \"\"\"\n            Input: a = 1, b = 2,\
    \ c = 4\n            Output: False\n            \"\"\"\n            Input: a =\
    \ 1, b = 2, c = 5\n            Output: False\n            \"\"\"\n           \
    \ Input: a = 1, b = 2, c = 6\n            Output: True\n            \"\"\"\n \
    \           Input: a = 1, b = 2, c = 7\n            Output: True\n           \
    \ \"\"\"\n            Input: a = 1, b = 2, c = 8\n            Output: True\n \
    \           \"\"\"\n            Input: a = 1, b = 2, c = 9\n            Output:\
    \ True\n            \"\"\"\n            Input: a = 1, b = 2, c = 10\n        \
    \    Output: True\n            \"\"\"\n            Input: a = 1, b = 2, c = 11\n\
    \            Output: True\n            \"\"\"\n            Input: a = 1, b = 2,\
    \ c = 12\n            Output: True\n            \"\"\"\n            Input: a =\
    \ 1, b = 2, c = 13\n            Output: True\n            \"\"\"\n           \
    \ Input: a = 1, b = 2, c = 14\n            Output: True\n            \"\"\"\n\
    \            Input: a = 1, b = 2, c = 15\n            Output: True\n         \
    \   \"\"\"\n            Input: a = 1, b = 2, c = 16\n            Output: True\n\
    \            \"\"\"\n            Input: a = 1, b = 2, c = 17\n            Output:\
    \ True\n            \"\"\"\n            Input: a = 1, b = 2, c = 18\n        \
    \    Output: True\n            \"\"\"\n            Input: a = 1, b = 2, c = 19\n\
    \            Output: True\n            \"\"\"\n            Input: a = 1, b = 2,\
    \ c = 20\n            Output: True\n            \"\"\"\n            Input: a =\
    \ 1, b = 2, c = 21\n            Output: True\n            \"\"\"\n           \
    \ Input: a = 1, b = 2, c = 22\n            Output: True\n            \"\"\"\n\
    \            Input: a = 1, b = 2, c = 23\n            Output: True\n         \
    \   \"\"\"\n            Input: a = 1, b = 2, c = 24\n            Output: True\n\
    \            \"\"\"\n            Input: a = 1, b = 2, c = 25\n            Output:\
    \ True\n            \"\"\"\n            Input: a = 1, b = 2, c = 26\n        \
    \    Output: True\n            \"\"\"\n            Input: a = 1, b = 2, c = 27\n\
    \            Output: True\n            \"\"\"\n            Input: a = 1, b = 2,\
    \ c = 28\n            Output: True\n            \"\"\"\n            Input: a =\
    \ 1, b = 2, c = 29\n            Output: True\n            \"\"\"\n           \
    \ Input: a = 1, b = 2, c = 30\n            Output: True\n            \"\"\"\n\
    \            Input: a = 1, b = 2, c = 31\n            Output: True\n         \
    \   \"\"\"\n            Input: a = 1, b = 2, c = 32\n            Output: True\n\
    \            \"\"\"\n            Input: a = 1, b = 2, c = 33\n            Output:\
    \ True\n            \"\"\"\n            Input: a = 1, b = 2, c = 34\n        \
    \    Output: True\n            \"\"\"\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp8gk8l9nr.py\", line 9\n    Input: a = 1, b = 2, c = 3\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input: a = 1, b = 2, c = 3\n  \
    \          Output: True\n            Input: a = 2, b = 1, c = 3\n            Output:\
    \ True\n            Input: a = 1, b = 2, c = 3\n            Output: False\n  \
    \          Input: a = 2, b = 2, c = 1\n            Output: True\n            Input:\
    \ a = 2, b = 2, c = 2\n            Output: False\n            Input: a = 2, b\
    \ = 2, c = 3\n            Output: True\n            Input: a = 2, b = 2, c = 4\n\
    \            Output: False\n            Input: a = 2, b = 2, c = 5\n         \
    \   Output: True\n            Input: a = 2, b = 2, c = 6\n            Output:\
    \ False\n            Input: a = 2, b = 2, c = 7\n            Output: True\n  \
    \          Input: a = 2, b = 2, c = 8\n            Output: False\n           \
    \ Input: a = 2, b = 2, c = 9\n            Output: True\n            Input: a =\
    \ 2, b = 2, c = 10\n            Output: False\n            Input: a = 2, b = 2,\
    \ c = 11\n            Output: True\n            Input: a = 2, b = 2, c = 12\n\
    \            Output: False\n            Input: a = 2, b = 2, c = 13\n        \
    \    Output: True\n            Input: a = 2, b = 2, c = 14\n            Output:\
    \ False\n            Input: a = 2, b = 2, c = 15\n            Output: True\n \
    \           Input: a = 2, b = 2, c = 16\n            Output: False\n         \
    \   Input: a = 2, b = 2, c = 17\n            Output: True\n            Input:\
    \ a = 2, b = 2, c = 18\n            Output: False\n            Input: a = 2, b\
    \ = 2, c = 19\n            Output: True\n            Input: a = 2, b = 2, c =\
    \ 20\n            Output: False\n            Input: a = 2, b = 2, c = 21\n   \
    \         Output: True\n            Input: a = 2, b = 2, c = 22\n            Output:\
    \ False\n            Input: a = 2, b = 2, c = 23\n            Output: True\n \
    \           Input: a = 2, b = 2, c = 24\n            Output: False\n         \
    \   Input: a = 2, b = 2, c = 25\n            Output: True\n            Input:\
    \ a = 2, b = 2, c = 26\n            Output: False\n            Input: a = 2, b\
    \ = 2, c = 27\n            Output: True\n            Input: a = 2, b = 2, c =\
    \ 28\n            Output: False\n            Input: a = 2, b = 2, c = 29\n   \
    \         Output: True\n            Input: a = 2, b = 2, c = 30\n            Output:\
    \ False\n            Input: a = 2, b = 2, c = 31\n            Output: True\n \
    \           Input: a = 2, b = 2, c = 32\n            Output: False\n         \
    \   Input: a = 2, b = 2, c = 33\n            Output: True\n            Input:\
    \ a = 2, b = 2, c\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n\
    \    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n\
    \    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n\
    \    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n\
    \    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) ==\
    \ True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10)\
    \ == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp3jtm33c9.py\", line 9\n    Input: a = 1, b = 2, c = 3\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input:\n                    a =\
    \ 5\n                    b = 6\n                    c = 7\n            Output:\n\
    \                    True\n            \"\"\"\n            Input:\n          \
    \          a = 5\n                    b = 6\n                    c = 7\n     \
    \       Output:\n                    False\n    \"\"\"\n    \n    \n    if a ==\
    \ b and b == c:\n        return True\n    elif a == b or a == c or b == c:\n \
    \       return False\n    else:\n        if b > c:\n            if a > c:\n  \
    \              return True\n            else:\n                return False\n\
    \        else:\n            if a > c:\n                return False\n        \
    \    else:\n                return True\n    \n    \ndef check(candidate):\n \
    \   assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpe4okiyx_.py\", line 9\n    Input:\nIndentationError: unexpected\
    \ indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input:\n            a =3\n    \
    \        b=2\n            c=1\n            Output:\n            True\n       \
    \     \"\"\"\n    \"\"\"\n    a, b, c = sorted([a, b, c])\n    if a + b > c and\
    \ b + c > a and c + a > b:\n        return True\n    else:\n        return False\n\
    \n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpmhqqo1f2.py\", line 9\n    Input:\nIndentationError: unexpected\
    \ indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input: a = 2, b = 3, c = 3\n  \
    \          Output: True\n            \"\"\"\n            Input: a = 2, b = 3,\
    \ c = 0\n            Output: False\n            \"\"\"\n            Input: a =\
    \ 2, b = 3, c = 0\n            Output: False\n            \"\"\"\n           \
    \ Input: a = 2, b = 3, c = 0\n            Output: False\n            \"\"\"\n\
    \            Input: a = 2, b = 3, c = 0\n            Output: False\n         \
    \   \"\"\"\n            Input: a = 2, b = 3, c = 0\n            Output: False\n\
    \            \"\"\"\n            Input: a = 2, b = 3, c = 0\n            Output:\
    \ False\n            \"\"\"\n            Input: a = 2, b = 3, c = 0\n        \
    \    Output: False\n            \"\"\"\n            Input: a = 2, b = 3, c = 0\n\
    \            Output: False\n            \"\"\"\n            Input: a = 2, b =\
    \ 3, c = 0\n            Output: False\n            \"\"\"\n            Input:\
    \ a = 2, b = 3, c = 0\n            Output: False\n            \"\"\"\n       \
    \     Input: a = 2, b = 3, c = 0\n            Output: False\n            \"\"\"\
    \n            Input: a = 2, b = 3, c = 0\n            Output: False\n        \
    \    \"\"\"\n            Input: a = 2, b = 3, c = 0\n            Output: False\n\
    \            \"\"\"\n            Input: a = 2, b = 3, c = 0\n            Output:\
    \ False\n            \"\"\"\n            Input: a = 2, b = 3, c = 0\n        \
    \    Output: False\n            \"\"\"\n            Input: a = 2, b = 3, c = 0\n\
    \            Output: False\n            \"\"\"\n            Input: a = 2, b =\
    \ 3, c = 0\n            Output: False\n            \"\"\"\n            Input:\
    \ a = 2, b = 3, c = 0\n            Output: False\n            \"\"\"\n       \
    \     Input: a = 2, b = 3, c = 0\n            Output: False\n            \"\"\"\
    \n            Input: a = 2, b = 3, c = 0\n            Output: False\n        \
    \    \"\"\"\n            Input: a = 2, b = 3, c = 0\n            Output: False\n\
    \            \"\"\"\n            Input: a = 2, b = 3, c = 0\n            Output:\
    \ False\n            \"\"\"\n            Input: a = 2, b = 3, c = 0\n        \
    \    Output: False\n            \"\"\"\n            Input: a = 2, b = 3, c = 0\n\
    \            Output: False\n            \"\"\"\n            Input: a = 2, b =\
    \ 3, c = 0\n            Output: False\n            \"\"\"\n            Input:\
    \ a = 2, b = 3, c = 0\n            Output: False\n            \"\"\"\n       \
    \     Input: a = 2, b = 3, c = 0\n            Output: False\n            \"\"\"\
    \n            Input: a = 2, b = 3, c = 0\n            Output: False\n        \
    \    \"\"\"\n            Input: a = 2, b = 3, c = 0\n            Output: False\n\
    \            \"\"\"\n            Input: a = 2, b = 3, c = 0\n            Output:\
    \ False\n            \"\"\"\n            Input: a = 2, b = 3, c = 0\n        \
    \    Output: False\n            \"\"\"\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp9ck9r3sc.py\", line 9\n    Input: a = 2, b = 3, c = 3\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: 1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n    >>> right_angle_triangle(3, 4, 5)\n   \
    \ True\n    >>> right_angle_triangle(3, 4, 6)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 7)\n    True\n    >>> right_angle_triangle(3, 4, 8)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 9)\n    True\n    >>> right_angle_triangle(3, 4, 10)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 11)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 12)\n    False\n    >>> right_angle_triangle(3, 4, 13)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 14)\n    False\n    >>> right_angle_triangle(3, 4, 15)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 16)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 17)\n    False\n    >>> right_angle_triangle(3, 4, 18)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 19)\n    False\n    >>> right_angle_triangle(3, 4, 20)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 21)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 22)\n    False\n    >>> right_angle_triangle(3, 4, 23)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 24)\n    False\n    >>> right_angle_triangle(3, 4, 25)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 26)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 27)\n    False\n    >>> right_angle_triangle(3, 4, 28)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 29)\n    False\n    >>> right_angle_triangle(3, 4, 30)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 31)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 32)\n    False\n    >>> right_angle_triangle(3, 4, 33)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 34)\n    False\n    >>> right_angle_triangle(3, 4, 35)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 36)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 37)\n    False\n    >>> right_angle_triangle(3, 4, 38)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 39)\n    False\n    >>> right_angle_triangle(3, 4, 40)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 41)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 42)\n    False\n    >>> right_angle_triangle(3, 4, 43)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 44)\n    False\n    >>> right_angle_triangle(3, 4, 45)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 46)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 47)\n    False\n    >>> right_angle_triangle(3, 4, 48)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 49)\n    \ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n\
    \    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n\
    \    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n\
    \    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n\
    \    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) ==\
    \ True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10)\
    \ == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmplv1ly745.py\", line 9\n    >>> right_angle_triangle(3,\
    \ 4, 5)\n    ^^\nSyntaxError: invalid syntax\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input:\n            a =3\n    \
    \        b=4\n            c=5\n            Output:\n            True\n       \
    \     \"\"\"\n    \"\"\"\n    a, b, c = sorted([a, b, c])\n    if a + b > c and\
    \ b + c > a and c + a > b:\n        return True\n    else:\n        return False\n\
    \n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpupmz20he.py\", line 9\n    Input:\nIndentationError: unexpected\
    \ indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input:\n                    a =\
    \ 3\n                    b = 4\n                    c = 5\n            Output:\n\
    \                    True\n            \"\"\"\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpu7t0istw.py\", line 9\n    Input:\nIndentationError: unexpected\
    \ indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input:\n            a =3\n    \
    \        b = 2\n            c = 1\n            Output:\n            True\n   \
    \         \"\"\"\n            \n    \"\"\"\n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \ndef check(candidate):\n    assert candidate(3, 4, 5)\
    \ == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6,\
    \ 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmptv6__f15.py\", line 9\n    Input:\nIndentationError: unexpected\
    \ indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input:\n            a =3\n    \
    \        b=2\n            c=1\n            Output:\n            True\n       \
    \     \"\"\"\n    \"\"\"\n    a, b, c = sorted([a, b, c])\n    if a + b > c and\
    \ b + c > a and c + a > b:\n        return True\n    else:\n        return False\n\
    \n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpmhqqo1f2.py\", line 9\n    Input:\nIndentationError: unexpected\
    \ indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input:\n            a =   5\n \
    \           b =   3\n            c =   2\n            Output:\n            True\n\
    \            \"\"\"\n    \"\"\"\n    a, b, c = sorted([a, b, c])\n    if a + b\
    \ > c and b + c > a and c + a > b:\n        return True\n    else:\n        return\
    \ False\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n  \
    \  assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n\
    \    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n\
    \    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n\
    \    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) ==\
    \ True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10)\
    \ == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpu5djfnb1.py\", line 9\n    Input:\nIndentationError: unexpected\
    \ indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input: a = 2, b = 3, c = 3\n  \
    \          Output: True\n            \"\"\"\n            Input: a = 2, b = 3,\
    \ c = 0\n            Output: False\n            \"\"\"\n            Input: a =\
    \ 2, b = 1, c = 0\n            Output: False\n            \"\"\"\n           \
    \ Input: a = 2, b = 1, c = 3\n            Output: True\n            \"\"\"\n \
    \           Input: a = 2, b = 1, c = 0\n            Output: False\n          \
    \  \"\"\"\n            Input: a = 2, b = 0, c = 3\n            Output: True\n\
    \            \"\"\"\n            Input: a = 2, b = 0, c = 0\n            Output:\
    \ False\n            \"\"\"\n            Input: a = 0, b = 2, c = 3\n        \
    \    Output: True\n            \"\"\"\n            Input: a = 0, b = 2, c = 0\n\
    \            Output: False\n            \"\"\"\n            Input: a = 0, b =\
    \ 1, c = 3\n            Output: True\n            \"\"\"\n            Input: a\
    \ = 0, b = 1, c = 0\n            Output: False\n            \"\"\"\n         \
    \   Input: a = 0, b = 0, c = 3\n            Output: True\n            \"\"\"\n\
    \            Input: a = 0, b = 0, c = 0\n            Output: False\n         \
    \   \"\"\"\n            Input: a = 0, b = 2, c = 3\n            Output: True\n\
    \            \"\"\"\n            Input: a = 0, b = 2, c = 0\n            Output:\
    \ False\n            \"\"\"\n            Input: a = 0, b = 1, c = 3\n        \
    \    Output: True\n            \"\"\"\n            Input: a = 0, b = 1, c = 0\n\
    \            Output: False\n            \"\"\"\n            Input: a = 0, b =\
    \ 0, c = 3\n            Output: True\n            \"\"\"\n            Input: a\
    \ = 0, b = 0, c = 0\n            Output: False\n            \"\"\"\n         \
    \   Input: a = 0, b = 2, c = 3\n            Output: True\n            \"\"\"\n\
    \            Input: a = 0, b = 2, c = 0\n            Output: False\n         \
    \   \"\"\"\n            Input: a = 0, b = 1, c = 3\n            Output: True\n\
    \            \"\"\"\n            Input: a = 0, b = 1, c = 0\n            Output:\
    \ False\n            \"\"\"\n            Input: a = 0, b = 0, c = 3\n        \
    \    Output: True\n            \"\"\"\n            Input: a = 0, b = 0, c = 0\n\
    \            Output: False\n            \"\"\"\n            Input: a = 0, b =\
    \ 2, c = 3\n            Output: True\n            \"\"\"\n            Input: a\
    \ = 0, b = 2, c = 0\n            Output: False\n            \"\"\"\n         \
    \   Input: a = 0, b = 1, c = 3\n            Output: True\n            \"\"\"\n\
    \            Input: a = 0, b = 1, c = 0\n            Output: False\n         \
    \   \"\"\"\n            Input: a = 0, b = 0, c = 3\n            Output: True\n\
    \            \"\"\"\n            Input: a = 0, b = 0, c = 0\n            Output:\
    \ False\n            \"\"\"\n            Input: a = 0, b = 2, c = 3\n        \
    \    Output: True\n            \"\"\"\n            Input: a = 0, b = 2, c = 0\n\
    \            \ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n\
    \    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n\
    \    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n\
    \    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n\
    \    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) ==\
    \ True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10)\
    \ == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp7x1vntb3.py\", line 9\n    Input: a = 2, b = 3, c = 3\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: 1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n    >>> right_angle_triangle(3, 4, 5)\n   \
    \ True\n    >>> right_angle_triangle(3, 4, 6)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 7)\n    False\n    >>> right_angle_triangle(3, 4, 8)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 9)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 10)\n    False\n    >>> right_angle_triangle(3, 4, 11)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 12)\n    False\n    >>> right_angle_triangle(3, 4, 13)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 14)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 15)\n    False\n    >>> right_angle_triangle(3, 4, 16)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 17)\n    False\n    >>> right_angle_triangle(3, 4, 18)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 19)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 20)\n    False\n    >>> right_angle_triangle(3, 4, 21)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 22)\n    False\n    >>> right_angle_triangle(3, 4, 23)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 24)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 25)\n    False\n    >>> right_angle_triangle(3, 4, 26)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 27)\n    False\n    >>> right_angle_triangle(3, 4, 28)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 29)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 30)\n    False\n    >>> right_angle_triangle(3, 4, 31)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 32)\n    False\n    >>> right_angle_triangle(3, 4, 33)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 34)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 35)\n    False\n    >>> right_angle_triangle(3, 4, 36)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 37)\n    False\n    >>> right_angle_triangle(3, 4, 38)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 39)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 40)\n    False\n    >>> right_angle_triangle(3, 4, 41)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 42)\n    False\n    >>> right_angle_triangle(3, 4, 43)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 44)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 45)\n    False\n    >>> right_angle_triangle(3, 4, 46)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 47)\n    False\n    >>> right_angle_triangle(3, 4, 48)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 49)\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp5qtlr982.py\", line 9\n    >>> right_angle_triangle(3,\
    \ 4, 5)\n    ^^\nSyntaxError: invalid syntax\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input:\n            a =3\n    \
    \        b=4\n            c=5\n            Output:\n            True\n       \
    \     \"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpziseho95.py\", line 9\n    Input:\nIndentationError: unexpected\
    \ indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input: a = 2, b = 3, c = 3\n  \
    \          Output: True\n            \"\"\"\n            Input: a = 2, b = 3,\
    \ c = 0\n            Output: False\n            \"\"\"\n            Input: a =\
    \ 2, b = 3, c = 1\n            Output: False\n            \"\"\"\n           \
    \ Input: a = 2, b = 3, c = 4\n            Output: True\n            \"\"\"\n \
    \           Input: a = 2, b = 3, c = 5\n            Output: True\n           \
    \ \"\"\"\n            Input: a = 2, b = 0, c = 4\n            Output: True\n \
    \           \"\"\"\n            Input: a = 2, b = 0, c = 5\n            Output:\
    \ True\n            \"\"\"\n            Input: a = 2, b = 0, c = 6\n         \
    \   Output: True\n            \"\"\"\n            Input: a = 2, b = 0, c = 7\n\
    \            Output: True\n            \"\"\"\n            Input: a = 2, b = 0,\
    \ c = 8\n            Output: True\n            \"\"\"\n            Input: a =\
    \ 2, b = 0, c = 9\n            Output: True\n            \"\"\"\n            Input:\
    \ a = 2, b = 0, c = 10\n            Output: True\n            \"\"\"\n       \
    \     Input: a = 2, b = 0, c = 11\n            Output: True\n            \"\"\"\
    \n            Input: a = 2, b = 0, c = 12\n            Output: True\n        \
    \    \"\"\"\n            Input: a = 2, b = 0, c = 13\n            Output: True\n\
    \            \"\"\"\n            Input: a = 2, b = 0, c = 14\n            Output:\
    \ True\n            \"\"\"\n            Input: a = 2, b = 0, c = 15\n        \
    \    Output: True\n            \"\"\"\n            Input: a = 2, b = 0, c = 16\n\
    \            Output: True\n            \"\"\"\n            Input: a = 2, b = 0,\
    \ c = 17\n            Output: True\n            \"\"\"\n            Input: a =\
    \ 2, b = 0, c = 18\n            Output: True\n            \"\"\"\n           \
    \ Input: a = 2, b = 0, c = 19\n            Output: True\n            \"\"\"\n\
    \            Input: a = 2, b = 0, c = 20\n            Output: True\n         \
    \   \"\"\"\n            Input: a = 2, b = 0, c = 21\n            Output: True\n\
    \            \"\"\"\n            Input: a = 2, b = 0, c = 22\n            Output:\
    \ True\n            \"\"\"\n            Input: a = 2, b = 0, c = 23\n        \
    \    Output: True\n            \"\"\"\n            Input: a = 2, b = 0, c = 24\n\
    \            Output: True\n            \"\"\"\n            Input: a = 2, b = 0,\
    \ c = 25\n            Output: True\n            \"\"\"\n            Input: a =\
    \ 2, b = 0, c = 26\n            Output: True\n            \"\"\"\n           \
    \ Input: a = 2, b = 0, c = 27\n            Output: True\n            \"\"\"\n\
    \            Input: a = 2, b = 0, c = 28\n            Output: True\n         \
    \   \"\"\"\n            Input: a = 2, b = 0, c = 29\n            Output: True\n\
    \            \"\"\"\n            Input: a = 2, b = 0, c = 30\n            Output:\
    \ True\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert\
    \ candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert\
    \ candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert\
    \ candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert\
    \ candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n   \
    \ assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\
    \ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp6s6dj5kx.py\", line 9\n    Input: a = 2, b = 3, c = 3\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input:\n            a =3\n    \
    \        b=4\n            c=5\n            Output:\n            True\n       \
    \     Explanation:\n            Triangle is right angled.\n            \"\"\"\n\
    \    \"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpgf86gcuo.py\", line 9\n    Input:\nIndentationError: unexpected\
    \ indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input:\n            a =   1\n \
    \           b =   2\n            c =   3\n            Output:\n            True\n\
    \            \"\"\"\n    \"\"\"\n    if a == b and b == c:\n        return True\n\
    \    elif a == b or a == c:\n        return False\n    elif b == c or b == a:\n\
    \        return False\n    else:\n        return True\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpoo8wmm_n.py\", line 9\n    Input:\nIndentationError: unexpected\
    \ indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: 1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n    >>> right_angle_triangle(3, 4, 5)\n   \
    \ True\n    >>> right_angle_triangle(3, 4, 6)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 7)\n    True\n    >>> right_angle_triangle(3, 4, 8)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 9)\n    True\n    >>> right_angle_triangle(3, 4, 10)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 11)\n    True\n    >>> right_angle_triangle(3, 4,\
    \ 12)\n    False\n    >>> right_angle_triangle(3, 4, 13)\n    True\n    >>> right_angle_triangle(3,\
    \ 4, 14)\n    False\n    >>> right_angle_triangle(3, 4, 15)\n    True\n    >>>\
    \ right_angle_triangle(3, 4, 16)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 17)\n    True\n    >>> right_angle_triangle(3, 4, 18)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 19)\n    True\n    >>> right_angle_triangle(3, 4, 20)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 21)\n    True\n    >>> right_angle_triangle(3, 4,\
    \ 22)\n    False\n    >>> right_angle_triangle(3, 4, 23)\n    True\n    >>> right_angle_triangle(3,\
    \ 4, 24)\n    False\n    >>> right_angle_triangle(3, 4, 25)\n    True\n    >>>\
    \ right_angle_triangle(3, 4, 26)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 27)\n    True\n    >>> right_angle_triangle(3, 4, 28)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 29)\n    True\n    >>> right_angle_triangle(3, 4, 30)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 31)\n    True\n    >>> right_angle_triangle(3, 4,\
    \ 32)\n    False\n    >>> right_angle_triangle(3, 4, 33)\n    True\n    >>> right_angle_triangle(3,\
    \ 4, 34)\n    False\n    >>> right_angle_triangle(3, 4, 35)\n    True\n    >>>\
    \ right_angle_triangle(3, 4, 36)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 37)\n    True\n    >>> right_angle_triangle(3, 4, 38)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 39)\n    True\n    >>> right_angle_triangle(3, 4, 40)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 41)\n    True\n    >>> right_angle_triangle(3, 4,\
    \ 42)\n    False\n    >>> right_angle_triangle(3, 4, 43)\n    True\n    >>> right_angle_triangle(3,\
    \ 4, 44)\n    False\n    >>> right_angle_triangle(3, 4, 45)\n    True\n    >>>\
    \ right_angle_triangle(3, 4, 46)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 47)\n    True\n    >>> right_angle_triangle(3, 4, 48)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 49)\n    True\n    >>> right_angle_triangle(3, 4, 50)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 5\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp_hugl6p5.py\", line 9\n    >>> right_angle_triangle(3,\
    \ 4, 5)\n    ^^\nSyntaxError: invalid syntax\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input: a = 2, b = 2, c = 3\n  \
    \          Output: True\n            \"\"\"\n            Input: a = 2, b = 1,\
    \ c = 1\n            Output: False\n            \"\"\"\n            Input: a =\
    \ 2, b = 2, c = 1\n            Output: True\n            \"\"\"\n            Input:\
    \ a = 2, b = 1, c = 2\n            Output: True\n            \"\"\"\n        \
    \    Input: a = 2, b = 2, c = 2\n            Output: True\n            \"\"\"\n\
    \            Input: a = 2, b = 2, c = 1\n            Output: True\n          \
    \  \"\"\"\n            Input: a = 2, b = 1, c = 1\n            Output: True\n\
    \            \"\"\"\n            Input: a = 2, b = 1, c = 2\n            Output:\
    \ True\n            \"\"\"\n            Input: a = 2, b = 1, c = 2\n         \
    \   Output: True\n            \"\"\"\n            Input: a = 2, b = 1, c = 1\n\
    \            Output: True\n            \"\"\"\n            Input: a = 2, b = 1,\
    \ c = 1\n            Output: True\n            \"\"\"\n            Input: a =\
    \ 2, b = 1, c = 2\n            Output: True\n            \"\"\"\n            Input:\
    \ a = 2, b = 1, c = 2\n            Output: True\n            \"\"\"\n        \
    \    Input: a = 2, b = 1, c = 1\n            Output: True\n            \"\"\"\n\
    \            Input: a = 2, b = 1, c = 1\n            Output: True\n          \
    \  \"\"\"\n            Input: a = 2, b = 1, c = 2\n            Output: True\n\
    \            \"\"\"\n            Input: a = 2, b = 1, c = 2\n            Output:\
    \ True\n            \"\"\"\n            Input: a = 2, b = 1, c = 1\n         \
    \   Output: True\n            \"\"\"\n            Input: a = 2, b = 1, c = 1\n\
    \            Output: True\n            \"\"\"\n            Input: a = 2, b = 1,\
    \ c = 2\n            Output: True\n            \"\"\"\n            Input: a =\
    \ 2, b = 1, c = 2\n            Output: True\n            \"\"\"\n            Input:\
    \ a = 2, b = 1, c = 1\n            Output: True\n            \"\"\"\n        \
    \    Input: a = 2, b = 1, c = 1\n            Output: True\n            \"\"\"\n\
    \            Input: a = 2, b = 1, c = 2\n            Output: True\n          \
    \  \"\"\"\n            Input: a = 2, b = 1, c = 2\n            Output: True\n\
    \            \"\"\"\n            Input: a = 2, b = 1, c = 1\n            Output:\
    \ True\n            \"\"\"\n            Input: a = 2, b = 1, c = 1\n         \
    \   Output: True\n            \"\"\"\n            Input: a = 2, b = 1, c = 2\n\
    \            Output: True\n            \"\"\"\n            Input: a = 2, b = 1,\
    \ c = 2\n            Output: True\n            \"\"\"\n            Input: a =\
    \ 2, b = 1, c = 1\n            Output: True\n            \"\"\"\n            Input:\
    \ a = 2, b = 1, c = 1\n            Output: True\n            \"\"\"\n        \
    \    Input: a = 2, b = 1, c = 2\n            Output: True\n            \"\"\"\n\
    \ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpgefe1iz6.py\", line 9\n    Input: a = 2, b = 2, c = 3\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input:\n            a =   3\n \
    \           b = 1\n            c = 2\n            Output:\n            True\n\
    \            \"\"\"\n    \"\"\"\n    a, b, c = sorted([a, b, c])\n    if a + b\
    \ > c and b + c > a and c + a > b:\n        return True\n    else:\n        return\
    \ False\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n  \
    \  assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n\
    \    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n\
    \    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n\
    \    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) ==\
    \ True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10)\
    \ == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp7h56wnrw.py\", line 9\n    Input:\nIndentationError: unexpected\
    \ indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input:\n            a =3\n    \
    \        b=2\n            c=4\n            Output:\n            True\n       \
    \     \"\"\"\n    \"\"\"\n    a, b, c = sorted([a, b, c])\n    if a == b == c:\n\
    \        return True\n    elif a == b or a == c or b == c:\n        return False\n\
    \    else:\n        angle = (a + b + c) / 2\n        if angle == a or angle ==\
    \ b or angle == c:\n            return True\n        else:\n            return\
    \ False\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n  \
    \  assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n\
    \    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n\
    \    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n\
    \    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) ==\
    \ True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10)\
    \ == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpdhog5oxj.py\", line 9\n    Input:\nIndentationError: unexpected\
    \ indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input:\n            a =3\n    \
    \        b=4\n            c=5\n            Output:\n            True\n       \
    \     Explanation:\n            Triangle is right angled.\n            \"\"\"\n\
    \    \"\"\"\n    a, b, c = sorted([a, b, c])\n    if a + b > c and b + c > a and\
    \ c + a > b:\n        return True\n    else:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp_sgvki3_.py\", line 9\n    Input:\nIndentationError: unexpected\
    \ indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input:\n            a =   3\n \
    \           b =   2\n            c =   1\n            Output:\n            True\n\
    \            Explanation:\n            Triangle with sides (a,b,c) is a right-angled\
    \ triangle\n            \"\"\"\n    \"\"\"\n    a, b, c = sorted([a, b, c])\n\
    \    if a + b > c and b + c > a and c + a > b:\n        return True\n    else:\n\
    \        return False\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5)\
    \ == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6,\
    \ 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpg1p2dtnl.py\", line 9\n    Input:\nIndentationError: unexpected\
    \ indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input:\n            a =3\n    \
    \        b=2\n            c=1\n            Output:\n            True\n       \
    \     \"\"\"\n    \"\"\"\n    a, b, c = sorted([a, b, c])\n    if a + b > c and\
    \ b + c > a and c + a > b:\n        return True\n    else:\n        return False\n\
    \n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpmhqqo1f2.py\", line 9\n    Input:\nIndentationError: unexpected\
    \ indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: 1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n    >>> right_angle_triangle(3, 4, 5)\n   \
    \ True\n    >>> right_angle_triangle(3, 4, 6)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 7)\n    False\n    >>> right_angle_triangle(3, 4, 8)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 9)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 10)\n    False\n    >>> right_angle_triangle(3, 4, 11)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 12)\n    False\n    >>> right_angle_triangle(3, 4, 13)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 14)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 15)\n    False\n    >>> right_angle_triangle(3, 4, 16)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 17)\n    False\n    >>> right_angle_triangle(3, 4, 18)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 19)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 20)\n    False\n    >>> right_angle_triangle(3, 4, 21)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 22)\n    False\n    >>> right_angle_triangle(3, 4, 23)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 24)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 25)\n    False\n    >>> right_angle_triangle(3, 4, 26)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 27)\n    False\n    >>> right_angle_triangle(3, 4, 28)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 29)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 30)\n    False\n    >>> right_angle_triangle(3, 4, 31)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 32)\n    False\n    >>> right_angle_triangle(3, 4, 33)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 34)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 35)\n    False\n    >>> right_angle_triangle(3, 4, 36)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 37)\n    False\n    >>> right_angle_triangle(3, 4, 38)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 39)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 40)\n    False\n    >>> right_angle_triangle(3, 4, 41)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 42)\n    False\n    >>> right_angle_triangle(3, 4, 43)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 44)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 45)\n    False\n    >>> right_angle_triangle(3, 4, 46)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 47)\n    False\n    >>> right_angle_triangle(3, 4, 48)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 49)\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp5qtlr982.py\", line 9\n    >>> right_angle_triangle(3,\
    \ 4, 5)\n    ^^\nSyntaxError: invalid syntax\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input: a = 1, b = 2, c = 3\n  \
    \          Output: True\n            \"\"\"\n            Input: a = 1, b = 2,\
    \ c = 4\n            Output: False\n            \"\"\"\n            Input: a =\
    \ 1, b = 2, c = 5\n            Output: False\n            \"\"\"\n           \
    \ Input: a = 1, b = 2, c = 6\n            Output: True\n            \"\"\"\n \
    \           Input: a = 1, b = 2, c = 7\n            Output: False\n          \
    \  \"\"\"\n            Input: a = 1, b = 2, c = 8\n            Output: False\n\
    \            \"\"\"\n            Input: a = 1, b = 2, c = 9\n            Output:\
    \ True\n            \"\"\"\n            Input: a = 1, b = 2, c = 10\n        \
    \    Output: False\n            \"\"\"\n            Input: a = 1, b = 2, c = 11\n\
    \            Output: True\n            \"\"\"\n            Input: a = 1, b = 2,\
    \ c = 12\n            Output: False\n            \"\"\"\n            Input: a\
    \ = 1, b = 2, c = 13\n            Output: True\n            \"\"\"\n         \
    \   Input: a = 1, b = 2, c = 14\n            Output: False\n            \"\"\"\
    \n            Input: a = 1, b = 2, c = 15\n            Output: True\n        \
    \    \"\"\"\n            Input: a = 1, b = 2, c = 16\n            Output: False\n\
    \            \"\"\"\n            Input: a = 1, b = 2, c = 17\n            Output:\
    \ True\n            \"\"\"\n            Input: a = 1, b = 2, c = 18\n        \
    \    Output: False\n            \"\"\"\n            Input: a = 1, b = 2, c = 19\n\
    \            Output: True\n            \"\"\"\n            Input: a = 1, b = 2,\
    \ c = 20\n            Output: False\n            \"\"\"\n            Input: a\
    \ = 1, b = 2, c = 21\n            Output: True\n            \"\"\"\n         \
    \   Input: a = 1, b = 2, c = 22\n            Output: False\n            \"\"\"\
    \n            Input: a = 1, b = 2, c = 23\n            Output: True\n        \
    \    \"\"\"\n            Input: a = 1, b = 2, c = 24\n            Output: False\n\
    \            \"\"\"\n            Input: a = 1, b = 2, c = 25\n            Output:\
    \ True\n            \"\"\"\n            Input: a = 1, b = 2, c = 26\n        \
    \    Output: False\n            \"\"\"\n            Input: a = 1, b = 2, c = 27\n\
    \            Output: True\n            \"\"\"\n            Input: a = 1, b = 2,\
    \ c = 28\n            Output: False\n            \"\"\"\n            Input: a\
    \ = 1, b = 2, c = 29\n            Output: True\n            \"\"\"\n         \
    \   Input: a = 1, b = 2, c = 30\n            Output: False\n            \"\"\"\
    \n            Input: a = 1, b = 2, c = 31\n            Output: True\n        \
    \    \"\"\"\n            Input: a = 1, b = 2, c = 32\n            Output: False\n\
    \            \"\"\"\n            Input: a = 1, b = 2, c = 33\n            Output:\
    \ True\n            \"\"\"\n            Input: a = 1, b = 2, c = 34\n        \
    \    Output: False\n            \"\"\"\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpprb_ciea.py\", line 9\n    Input: a = 1, b = 2, c = 3\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input:\n            a =3\n    \
    \        b=4\n            c=6\n            Output:\n            True\n       \
    \     \"\"\"\n            \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert\
    \ candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert\
    \ candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert\
    \ candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert\
    \ candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n   \
    \ assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\
    \ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpayvya0lr.py\", line 9\n    Input:\nIndentationError: unexpected\
    \ indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input:\n            a =3\n    \
    \        b=4\n            c=6\n            Output:\n            True\n       \
    \     \"\"\"\n    \"\"\"\n    a, b, c = sorted([a, b, c])\n    if a == b and b\
    \ == c:\n        return True\n    elif a == b or a == c:\n        return False\n\
    \    elif b == c or b == a:\n        return False\n    else:\n        return True\n\
    \n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpgesme39u.py\", line 9\n    Input:\nIndentationError: unexpected\
    \ indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input:\n            a =3\n    \
    \        b=4\n            c=6\n            Output:\n            True\n       \
    \     \"\"\"\n    \"\"\"\n    a, b, c = sorted([a, b, c])\n    if a + b > c and\
    \ b + c > a and c + a > b:\n        return True\n    else:\n        return False\n\
    \n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpkt7ykloe.py\", line 9\n    Input:\nIndentationError: unexpected\
    \ indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: 1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n    >>> right_angle_triangle(3, 5, 7)\n   \
    \ True\n    >>> right_angle_triangle(3, 5, 6)\n    False\n    >>> right_angle_triangle(3,\
    \ 5, 4)\n    False\n    >>> right_angle_triangle(3, 5, 1)\n    False\n    >>>\
    \ right_angle_triangle(3, 5, 2)\n    False\n    >>> right_angle_triangle(3, 5,\
    \ 3)\n    False\n    >>> right_angle_triangle(3, 5, 8)\n    False\n    >>> right_angle_triangle(3,\
    \ 5, 9)\n    False\n    >>> right_angle_triangle(3, 5, 10)\n    False\n    >>>\
    \ right_angle_triangle(3, 5, 11)\n    False\n    >>> right_angle_triangle(3, 5,\
    \ 12)\n    False\n    >>> right_angle_triangle(3, 5, 13)\n    False\n    >>> right_angle_triangle(3,\
    \ 5, 14)\n    False\n    >>> right_angle_triangle(3, 5, 15)\n    False\n    >>>\
    \ right_angle_triangle(3, 5, 16)\n    False\n    >>> right_angle_triangle(3, 5,\
    \ 17)\n    False\n    >>> right_angle_triangle(3, 5, 18)\n    False\n    >>> right_angle_triangle(3,\
    \ 5, 19)\n    False\n    >>> right_angle_triangle(3, 5, 20)\n    False\n    >>>\
    \ right_angle_triangle(3, 5, 21)\n    False\n    >>> right_angle_triangle(3, 5,\
    \ 22)\n    False\n    >>> right_angle_triangle(3, 5, 23)\n    False\n    >>> right_angle_triangle(3,\
    \ 5, 24)\n    False\n    >>> right_angle_triangle(3, 5, 25)\n    False\n    >>>\
    \ right_angle_triangle(3, 5, 26)\n    False\n    >>> right_angle_triangle(3, 5,\
    \ 27)\n    False\n    >>> right_angle_triangle(3, 5, 28)\n    False\n    >>> right_angle_triangle(3,\
    \ 5, 29)\n    False\n    >>> right_angle_triangle(3, 5, 30)\n    False\n    >>>\
    \ right_angle_triangle(3, 5, 31)\n    False\n    >>> right_angle_triangle(3, 5,\
    \ 32)\n    False\n    >>> right_angle_triangle(3, 5, 33)\n    False\n    >>> right_angle_triangle(3,\
    \ 5, 34)\n    False\n    >>> right_angle_triangle(3, 5, 35)\n    False\n    >>>\
    \ right_angle_triangle(3, 5, 36)\n    False\n    >>> right_angle_triangle(3, 5,\
    \ 37)\n    False\n    >>> right_angle_triangle(3, 5, 38)\n    False\n    >>> right_angle_triangle(3,\
    \ 5, 39)\n    False\n    >>> right_angle_triangle(3, 5, 40)\n    False\n    >>>\
    \ right_angle_triangle(3, 5, 41)\n    False\n    >>> right_angle_triangle(3, 5,\
    \ 42)\n    False\n    >>> right_angle_triangle(3, 5, 43)\n    False\n    >>> right_angle_triangle(3,\
    \ 5, 44)\n    False\n    >>> right_angle_triangle(3, 5, 45)\n    False\n    >>>\
    \ right_angle_triangle(3, 5, 46)\n    False\ndef check(candidate):\n    assert\
    \ candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert\
    \ candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert\
    \ candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert\
    \ candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert\
    \ candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert\
    \ candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp91m3b862.py\", line 9\n    >>> right_angle_triangle(3,\
    \ 5, 7)\n    ^^\nSyntaxError: invalid syntax\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input: a = 2, b = 2, c = 2\n  \
    \          Output: True\n            \"\"\"\n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpx_ko4p3n.py\", line 9\n    Input: a = 2, b = 2, c = 2\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input:\n                    a =\
    \ 3\n                    b = 2\n                    c = 4\n            Output:\n\
    \                    True\n            \"\"\"\n    \"\"\"\n    a, b, c = sorted([a,\
    \ b, c])\n    if a + b > c and b + c > a and c + a > b:\n        return True\n\
    \    else:\n        return False\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpe26sfk11.py\", line 9\n    Input:\nIndentationError: unexpected\
    \ indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input:\n            a =   3\n \
    \           b =   4\n            c =   5\n            Output:\n            True\n\
    \            Input:\n            a =   3\n            b =   5\n            c =\
    \   4\n            Output:\n            False\n            Input:\n          \
    \  a =   3\n            b =   4\n            c =   5\n            Output:\n  \
    \          False\n            Input:\n            a =   3\n            b =   5\n\
    \            c =   4\n            Output:\n            True\n            Input:\n\
    \            a =   3\n            b =   4\n            c =   5\n            Output:\n\
    \            False\n            Input:\n            a =   3\n            b = \
    \  5\n            c =   4\n            Output:\n            False\n          \
    \  Input:\n            a =   3\n            b =   4\n            c =   5\n   \
    \         Output:\n            False\n            Input:\n            a =   3\n\
    \            b =   5\n            c =   4\n            Output:\n            False\n\
    \            Input:\n            a =   3\n            b =   5\n            c =\
    \   4\n            Output:\n            False\n            Input:\n          \
    \  a =   3\n            b =   5\n            c =   4\n            Output:\n  \
    \          False\n            Input:\n            a =   3\n            b =   5\n\
    \            c =   4\n            Output:\n            False\n            Input:\n\
    \            a =   3\n            b =   5\n            c =   4\n            Output:\n\
    \            False\n            Input:\n            a =   3\n            b = \
    \  5\n            c =   4\n            Output:\n            False\n          \
    \  Input:\n            a =   3\n            b =   5\n            c =   4\n   \
    \         Output:\n            False\n            Input:\n            a =   3\n\
    \            b =   5\n            c =   4\n            Output:\n            False\n\
    \            Input:\n            a =   3\n            b =   5\n            c =\
    \   4\n            Output:\n            False\n            Input:\n          \
    \  a =   3\n            b =   5\n            c =   4\n            Output:\n  \
    \          False\n            Input:\n            a =   3\n            b =   5\n\
    \            c =   4\n            Output:\n            False\n            Input:\n\
    \            a =   \ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n\
    \    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n\
    \    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n\
    \    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n\
    \    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) ==\
    \ True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10)\
    \ == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpjeu8sd45.py\", line 9\n    Input:\nIndentationError: unexpected\
    \ indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input:\n            a =   5\n \
    \           b =   3\n            c =   1\n            Output:\n            True\n\
    \            \"\"\"\n    \"\"\"\n    a, b, c = sorted([a, b, c])\n    if a + b\
    \ > c and b + c > a and c + a > b:\n        return True\n    else:\n        return\
    \ False\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n  \
    \  assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n\
    \    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n\
    \    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n\
    \    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) ==\
    \ True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10)\
    \ == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpnw23s58b.py\", line 9\n    Input:\nIndentationError: unexpected\
    \ indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input:\n            a =   5\n \
    \           b = 3\n            c = 2\n            Output:\n            True\n\
    \            \"\"\"\n    \"\"\"\n    a, b, c = sorted([a, b, c])\n    if a + b\
    \ > c and b + c > a and c + a > b:\n        return True\n    else:\n        return\
    \ False\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n  \
    \  assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n\
    \    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n\
    \    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n\
    \    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) ==\
    \ True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10)\
    \ == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpwxep2xs0.py\", line 9\n    Input:\nIndentationError: unexpected\
    \ indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input:\n            a =3\n    \
    \        b=4\n            c=5\n            Output:\n            True\n       \
    \     \"\"\"\n    \"\"\"\n    \n    \n    if a==b and b==c:\n        return True\n\
    \    elif a==b or a==c:\n        return False\n    elif b==c or b==a:\n      \
    \  return False\n    else:\n        return True\n    \n    \ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpxd6alglp.py\", line 9\n    Input:\nIndentationError: unexpected\
    \ indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input:\n            a =3\n    \
    \        b = 2\n            c = 3\n            Output:\n            True\n   \
    \         \"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert\
    \ candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert\
    \ candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert\
    \ candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert\
    \ candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n   \
    \ assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\
    \ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpnsqcjklk.py\", line 9\n    Input:\nIndentationError: unexpected\
    \ indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: 1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n    >>> right_angle_triangle(3, 5, 7)\n   \
    \ True\n    >>> right_angle_triangle(3, 5, 4)\n    False\n    >>> right_angle_triangle(3,\
    \ 5, 6)\n    False\n    >>> right_angle_triangle(3, 5, 2)\n    False\n    >>>\
    \ right_angle_triangle(3, 5, 1)\n    False\n    >>> right_angle_triangle(3, 5,\
    \ 0)\n    False\n    >>> right_angle_triangle(3, 5, -1)\n    False\n    >>> right_angle_triangle(3,\
    \ 5, -2)\n    False\n    >>> right_angle_triangle(3, 5, -3)\n    False\n    >>>\
    \ right_angle_triangle(3, 5, -4)\n    False\n    >>> right_angle_triangle(3, 5,\
    \ -5)\n    False\n    >>> right_angle_triangle(3, 5, -6)\n    False\n    >>> right_angle_triangle(3,\
    \ 5, -7)\n    False\n    >>> right_angle_triangle(3, 5, -8)\n    False\n    >>>\
    \ right_angle_triangle(3, 5, -9)\n    False\n    >>> right_angle_triangle(3, 5,\
    \ -10)\n    False\n    >>> right_angle_triangle(3, 5, -11)\n    False\n    >>>\
    \ right_angle_triangle(3, 5, -12)\n    False\n    >>> right_angle_triangle(3,\
    \ 5, -13)\n    False\n    >>> right_angle_triangle(3, 5, -14)\n    False\n   \
    \ >>> right_angle_triangle(3, 5, -15)\n    False\n    >>> right_angle_triangle(3,\
    \ 5, -16)\n    False\n    >>> right_angle_triangle(3, 5, -17)\n    False\n   \
    \ >>> right_angle_triangle(3, 5, -18)\n    False\n    >>> right_angle_triangle(3,\
    \ 5, -19)\n    False\n    >>> right_angle_triangle(3, 5, -20)\n    False\n   \
    \ >>> right_angle_triangle(3, 5, -21)\n    False\n    >>> right_angle_triangle(3,\
    \ 5, -22)\n    False\n    >>> right_angle_triangle(3, 5, -23)\n    False\n   \
    \ >>> right_angle_triangle(3, 5, -24)\n    False\n    >>> right_angle_triangle(3,\
    \ 5, -25)\n    False\n    >>> right_angle_triangle(3, 5, -26)\n    False\n   \
    \ >>> right_angle_triangle(3, 5, -27)\n    False\n    >>> right_angle_triangle(3,\
    \ 5, -28)\n    False\n    >>> right_angle_triangle(3, 5, -29)\n    False\n   \
    \ >>> right_angle_triangle(3, 5, -30)\n    False\n    >>> right_angle_triangle(3,\
    \ 5, -31)\n    False\n    >>> right_angle_triangle(3, 5, -32)\n    False\n   \
    \ >>> right_angle_triangle(3, 5, -33)\n    False\n    >>> right_angle_triangle(3,\
    \ 5, -34)\n    False\n    >>> right_angle_triangle(3, 5, -35)\n    False\n   \
    \ >>> right_angle_triangle(3, 5, -36)\n    False\n    >>> right_angle_triangle(3,\
    \ 5, -\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert\
    \ candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert\
    \ candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert\
    \ candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert\
    \ candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n   \
    \ assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\
    \ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmphx5f6eca.py\", line 9\n    >>> right_angle_triangle(3,\
    \ 5, 7)\n    ^^\nSyntaxError: invalid syntax\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input:\n            a =3\n    \
    \        b = 2\n            c = 3\n            Output:\n            True\n   \
    \         \"\"\"\n    \"\"\"\n    a, b, c = sorted([a, b, c])\n    if a + b >\
    \ c and b + c > a and c + a > b:\n        return True\n    else:\n        return\
    \ False\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n  \
    \  assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n\
    \    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n\
    \    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n\
    \    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) ==\
    \ True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10)\
    \ == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpoli2107s.py\", line 9\n    Input:\nIndentationError: unexpected\
    \ indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input: a = 2, b = 2, c = 2\n  \
    \          Output: True\n            Input: a = 2, b = 2, c = 3\n            Output:\
    \ False\n            Input: a = 2, b = 2, c = 1\n            Output: True\n  \
    \          Input: a = 2, b = 2, c = 4\n            Output: False\n           \
    \ Input: a = 2, b = 2, c = 5\n            Output: True\n            Input: a =\
    \ 2, b = 2, c = 6\n            Output: False\n            Input: a = 2, b = 2,\
    \ c = 7\n            Output: True\n            Input: a = 2, b = 2, c = 8\n  \
    \          Output: False\n            Input: a = 2, b = 2, c = 9\n           \
    \ Output: True\n            Input: a = 2, b = 2, c = 10\n            Output: False\n\
    \            Input: a = 2, b = 2, c = 11\n            Output: True\n         \
    \   Input: a = 2, b = 2, c = 12\n            Output: False\n            Input:\
    \ a = 2, b = 2, c = 13\n            Output: True\n            Input: a = 2, b\
    \ = 2, c = 14\n            Output: False\n            Input: a = 2, b = 2, c =\
    \ 15\n            Output: True\n            Input: a = 2, b = 2, c = 16\n    \
    \        Output: False\n            Input: a = 2, b = 2, c = 17\n            Output:\
    \ True\n            Input: a = 2, b = 2, c = 18\n            Output: False\n \
    \           Input: a = 2, b = 2, c = 19\n            Output: True\n          \
    \  Input: a = 2, b = 2, c = 20\n            Output: False\n            Input:\
    \ a = 2, b = 2, c = 21\n            Output: True\n            Input: a = 2, b\
    \ = 2, c = 22\n            Output: False\n            Input: a = 2, b = 2, c =\
    \ 23\n            Output: True\n            Input: a = 2, b = 2, c = 24\n    \
    \        Output: False\n            Input: a = 2, b = 2, c = 25\n            Output:\
    \ True\n            Input: a = 2, b = 2, c = 26\n            Output: False\n \
    \           Input: a = 2, b = 2, c = 27\n            Output: True\n          \
    \  Input: a = 2, b = 2, c = 28\n            Output: False\n            Input:\
    \ a = 2, b = 2, c = 29\n            Output: True\n            Input: a = 2, b\
    \ = 2, c = 30\n            Output: False\n            Input: a = 2, b = 2, c =\
    \ 31\n            Output: True\n            Input: a = 2, b = 2, c = 32\n    \
    \        Output: False\n            Input: a = 2, b = 2, c = 33\n            Output:\
    \ True\n            Input: a = 2, b = 2, c = 34\n            Output: False\n \
    \           Input: a = 2, b = 2, c = 35\n            Output: True\n          \
    \  Input: a = 2, b = 2, c = 36\n            Output: False\n            Input:\
    \ a = 2, b = 2, \ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n\
    \    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n\
    \    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n\
    \    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n\
    \    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) ==\
    \ True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10)\
    \ == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpiiwwahlh.py\", line 9\n    Input: a = 2, b = 2, c = 2\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: 1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n    >>> right_angle_triangle(3, 4, 5)\n   \
    \ True\n    >>> right_angle_triangle(3, 5, 4)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 6)\n    True\n    >>> right_angle_triangle(3, 5, 6)\n    False\n    >>> right_angle_triangle(3,\
    \ 6, 4)\n    True\n    >>> right_angle_triangle(3, 6, 5)\n    False\n    >>> right_angle_triangle(3,\
    \ 6, 6)\n    True\n    \"\"\"\n    if a == b == c:\n        return True\n    elif\
    \ a > b and a > c:\n        return True\n    elif b > a and b > c:\n        return\
    \ True\n    elif c > a and c > b:\n        return True\n    else:\n        return\
    \ False\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert\
    \ candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert\
    \ candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert\
    \ candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert\
    \ candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n   \
    \ assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\
    \ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpal7mbxdj.py\", line 23\n    \"\"\"\n    ^\nSyntaxError:\
    \ unterminated triple-quoted string literal (detected at line 51)\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input:\n            a =3\n    \
    \        b = 2\n            c = 1\n            Output:\n            True\n   \
    \         \"\"\"\n    \"\"\"\n    a, b, c = sorted([a, b, c])\n    if a + b >\
    \ c and b + c > a and c + a > b:\n        return True\n    else:\n        return\
    \ False\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n  \
    \  assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n\
    \    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n\
    \    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n\
    \    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) ==\
    \ True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10)\
    \ == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpsvkk_9wn.py\", line 9\n    Input:\nIndentationError: unexpected\
    \ indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input:\n            a =3\n    \
    \        b=4\n            c=5\n            Output:\n            True\n       \
    \     \"\"\"\n    \"\"\"\n    a, b, c = sorted([a, b, c])\n    if a == b and b\
    \ == c:\n        return True\n    elif a == b or a == c:\n        return True\n\
    \    elif b == c or b == a:\n        return True\n    else:\n        return False\n\
    \n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpypmhp993.py\", line 9\n    Input:\nIndentationError: unexpected\
    \ indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input:\n            a =3\n    \
    \        b=4\n            c=5\n            Output:\n            True\n       \
    \     \"\"\"\n    \"\"\"\n    a, b, c = sorted([a, b, c])\n    if a + b > c and\
    \ b + c > a and c + a > b:\n        return True\n    else:\n        return False\n\
    \n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpupmz20he.py\", line 9\n    Input:\nIndentationError: unexpected\
    \ indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input:\n            a =3\n    \
    \        b=4\n            c=6\n            Output:\n            True\n       \
    \     \"\"\"\n            \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert\
    \ candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert\
    \ candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert\
    \ candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert\
    \ candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n   \
    \ assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\
    \ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpayvya0lr.py\", line 9\n    Input:\nIndentationError: unexpected\
    \ indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input: a = 4, b = 2, c = 6\n  \
    \          Output: True\n            Explanation: \n            We have the following\
    \ triangle:\n            \n            4\n            |\\\n            | \\\n\
    \            |  \\\n            |   \\\n            |    \\\n            |   \
    \  \\\n            |      \\\n            |        \\\n            |         \\\
    \n            |          \\\n            |           \\\n            |       \
    \     \\\n            |             \\\n            |              \\\n      \
    \      |               \\\n            |                \\\n            |    \
    \             \\\n            |                  \\\n            |           \
    \        \\\n            |                    \\\n            |              \
    \       \\\n            |                      \\\n            |             \
    \          \\\n            |                        \\\n            |        \
    \                 \\\n            |                          \\\n            |\
    \                           \\\n            |                            \\\n\
    \            |                             \\\n            |                 \
    \             \\\n            |                               \\\n           \
    \ |                                \\\n            |                         \
    \        \\\n            |                                \\\n            |  \
    \                               \\\n            |                            \
    \     \\\n            |                                 \\\n            |    \
    \                             \\\n            |                              \
    \   \\\n            |                                 \\\n            |      \
    \                           \\\n            |                                \
    \ \\\n            |                                 \\\n            |        \
    \                         \\\n            |                                 \\\
    \n            |                                 \\\n            |            \
    \                     \\\n            |                                 \\\n \
    \           |                                 \\\n            |              \
    \                   \\\n            |                                 \\\n   \
    \         |                                 \\\n            |                \
    \                 \\\n            |                                 \\\n     \
    \       |                                 \\\n            |                  \
    \               \\\n            |                                 \\\n       \
    \     |                                 \\\n            |                    \
    \             \\\n            |                                 \\\n         \
    \   |                                 \\\n            |                      \
    \           \\\n            |                                 \\\n           \
    \ |                                 \\\n            |                        \
    \         \\\n            |                                 \\\n            |\
    \                                 \\\n            |                          \
    \       \\\n            |                                 \\\n            |  \
    \                               \\\n            |                            \
    \     \\\n            |                                 \\\n            |    \
    \                             \\\n            |                              \
    \   \\\n            |                                 \\\n            |      \
    \                           \\\n            |                                \
    \ \\\n            |                                 \\\n            |        \
    \                         \\\n            |                                 \\\
    \n            |                                 \\\n            |            \
    \                     \\\n            |                                 \\\n \
    \           |                                 \\\n            |              \
    \                   \\\n            |                                 \\\n   \
    \         |                                 \\\n            |                \
    \                 \\\n            |                                 \\\n     \
    \       |                                 \\\n            |                  \
    \               \\\n            |                                 \\\n       \
    \     |                                 \\\n            |                    \
    \             \\\n            |                                 \\\n         \
    \   |                                 \\\n            |                      \
    \           \\\n            |                                 \\\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpk314gcp0.py\", line 9\n    Input: a = 4, b = 2, c = 6\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input:\n                    a =\
    \ 5\n                    b = 4\n                    c = 6\n            Output:\n\
    \                    True\n            \"\"\"\n            \n    \n    \"\"\"\n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n\ndef check(candidate):\n   \
    \ assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpcrhns3m0.py\", line 9\n    Input:\nIndentationError: unexpected\
    \ indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: 1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n    >>> right_angle_triangle(3, 4, 5)\n   \
    \ True\n    >>> right_angle_triangle(3, 4, 6)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 7)\n    False\n    >>> right_angle_triangle(3, 4, 8)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 9)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 10)\n    False\n    >>> right_angle_triangle(3, 4, 11)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 12)\n    False\n    >>> right_angle_triangle(3, 4, 13)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 14)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 15)\n    False\n    >>> right_angle_triangle(3, 4, 16)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 17)\n    False\n    >>> right_angle_triangle(3, 4, 18)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 19)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 20)\n    False\n    >>> right_angle_triangle(3, 4, 21)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 22)\n    False\n    >>> right_angle_triangle(3, 4, 23)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 24)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 25)\n    False\n    >>> right_angle_triangle(3, 4, 26)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 27)\n    False\n    >>> right_angle_triangle(3, 4, 28)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 29)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 30)\n    False\n    >>> right_angle_triangle(3, 4, 31)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 32)\n    False\n    >>> right_angle_triangle(3, 4, 33)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 34)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 35)\n    False\n    >>> right_angle_triangle(3, 4, 36)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 37)\n    False\n    >>> right_angle_triangle(3, 4, 38)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 39)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 40)\n    False\n    >>> right_angle_triangle(3, 4, 41)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 42)\n    False\n    >>> right_angle_triangle(3, 4, 43)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 44)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 45)\n    False\n    >>> right_angle_triangle(3, 4, 46)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 47)\n    False\n    >>> right_angle_triangle(3, 4, 48)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 49)\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp5qtlr982.py\", line 9\n    >>> right_angle_triangle(3,\
    \ 4, 5)\n    ^^\nSyntaxError: invalid syntax\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: 1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n    >>> right_angle_triangle(3, 4, 5)\n   \
    \ True\n    >>> right_angle_triangle(3, 5, 4)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 6)\n    False\n    >>> right_angle_triangle(3, 5, 6)\n    True\n    >>> right_angle_triangle(3,\
    \ 6, 4)\n    False\n    >>> right_angle_triangle(3, 6, 5)\n    True\n    >>> right_angle_triangle(3,\
    \ 6, 6)\n    True\n    \"\"\"\n    \n    if a < b and a < c and b < c:\n     \
    \   return True\n    else:\n        return False\n\ndef check(candidate):\n  \
    \  assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpycm7khkg.py\", line 23\n    \"\"\"\n    ^\nSyntaxError:\
    \ unterminated triple-quoted string literal (detected at line 46)\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input:\n            a =3\n    \
    \        b=4\n            c=6\n            Output:\n            True\n       \
    \     \"\"\"\n    \"\"\"\n    a, b, c = sorted([a, b, c])\n    if a + b > c and\
    \ b + c > a and c + a > b:\n        return True\n    else:\n        return False\n\
    \n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpkt7ykloe.py\", line 9\n    Input:\nIndentationError: unexpected\
    \ indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input:\n            a =3\n    \
    \        b=4\n            c=5\n            Output:\n            True\n       \
    \     \"\"\"\n    \"\"\"\n    if a == b and b == c:\n        return True\n   \
    \ elif a == b or a == c:\n        return False\n    elif b == c:\n        return\
    \ True\n    else:\n        return False\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert\
    \ candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert\
    \ candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert\
    \ candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert\
    \ candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert\
    \ candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp1ct8j9vn.py\", line 9\n    Input:\nIndentationError: unexpected\
    \ indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input:\n            a =3\n    \
    \        b=2\n            c=1\n            Output:\n            True\n       \
    \     \"\"\"\n    \"\"\"\n    if a == 0 and b == 0 and c == 0:\n        return\
    \ True\n    elif a == 0 and b == 0 and c != 0:\n        return False\n    elif\
    \ a == 0 and b != 0 and c != 0:\n        return True\n    elif a != 0 and b ==\
    \ 0 and c == 0:\n        return False\n    elif a != 0 and b == 0 and c != 0:\n\
    \        return True\n    elif a != 0 and b != 0 and c == 0:\n        return False\n\
    \    elif a != 0 and b != 0 and c != 0:\n        if b > c:\n            return\
    \ False\n        elif b < c:\n            return True\n        else:\n       \
    \     if a > c:\n                return True\n            elif a < c:\n      \
    \          return False\n            else:\n                return True\n\n\n\
    def check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpgup76cgk.py\", line 9\n    Input:\nIndentationError: unexpected\
    \ indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: 1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n    >>> right_angle_triangle(3, 4, 5)\n   \
    \ True\n    >>> right_angle_triangle(3, 4, 6)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 7)\n    False\n    >>> right_angle_triangle(3, 4, 8)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 9)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 10)\n    False\n    >>> right_angle_triangle(3, 4, 11)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 12)\n    False\n    >>> right_angle_triangle(3, 4, 13)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 14)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 15)\n    False\n    >>> right_angle_triangle(3, 4, 16)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 17)\n    False\n    >>> right_angle_triangle(3, 4, 18)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 19)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 20)\n    False\n    >>> right_angle_triangle(3, 4, 21)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 22)\n    False\n    >>> right_angle_triangle(3, 4, 23)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 24)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 25)\n    False\n    >>> right_angle_triangle(3, 4, 26)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 27)\n    False\n    >>> right_angle_triangle(3, 4, 28)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 29)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 30)\n    False\n    >>> right_angle_triangle(3, 4, 31)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 32)\n    False\n    >>> right_angle_triangle(3, 4, 33)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 34)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 35)\n    False\n    >>> right_angle_triangle(3, 4, 36)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 37)\n    False\n    >>> right_angle_triangle(3, 4, 38)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 39)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 40)\n    False\n    >>> right_angle_triangle(3, 4, 41)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 42)\n    False\n    >>> right_angle_triangle(3, 4, 43)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 44)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 45)\n    False\n    >>> right_angle_triangle(3, 4, 46)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 47)\n    False\n    >>> right_angle_triangle(3, 4, 48)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 49)\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp5qtlr982.py\", line 9\n    >>> right_angle_triangle(3,\
    \ 4, 5)\n    ^^\nSyntaxError: invalid syntax\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input:\n            a =3\n    \
    \        b = 2\n            c = 3\n            Output:\n            True\n   \
    \         \"\"\"\n            \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n\
    \    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n\
    \    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n\
    \    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n\
    \    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) ==\
    \ True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10)\
    \ == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp5zixva7q.py\", line 9\n    Input:\nIndentationError: unexpected\
    \ indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input:\n            a =3\n    \
    \        b=4\n            c=6\n            Output:\n            True\n       \
    \     \"\"\"\n    \"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert\
    \ candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert\
    \ candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert\
    \ candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert\
    \ candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n   \
    \ assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\
    \ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpe91qwdqj.py\", line 9\n    Input:\nIndentationError: unexpected\
    \ indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input:\n            a =3\n    \
    \        b=2\n            c=4\n            Output:\n            True\n       \
    \     Input:\n            a =3\n            b=2\n            c=3\n           \
    \ Output:\n            False\n            Input:\n            a =3\n         \
    \   b=2\n            c=4\n            Output:\n            False\n           \
    \ Input:\n            a =3\n            b=2\n            c=3\n            Output:\n\
    \            False\n            Input:\n            a =3\n            b=2\n  \
    \          c=4\n            Output:\n            False\n            Input:\n \
    \           a =3\n            b=2\n            c=3\n            Output:\n    \
    \        False\n            Input:\n            a =3\n            b=2\n      \
    \      c=4\n            Output:\n            False\n            Input:\n     \
    \       a =3\n            b=2\n            c=3\n            Output:\n        \
    \    False\n            Input:\n            a =3\n            b=2\n          \
    \  c=4\n            Output:\n            False\n            Input:\n         \
    \   a =3\n            b=2\n            c=3\n            Output:\n            False\n\
    \            Input:\n            a =3\n            b=2\n            c=4\n    \
    \        Output:\n            False\n            Input:\n            a =3\n  \
    \          b=2\n            c=3\n            Output:\n            False\n    \
    \        Input:\n            a =3\n            b=2\n            c=4\n        \
    \    Output:\n            False\n            Input:\n            a =3\n      \
    \      b=2\n            c=3\n            Output:\n            False\n        \
    \    Input:\n            a =3\n            b=2\n            c=4\n            Output:\n\
    \            False\n            Input:\n            a =3\n            b=2\n  \
    \          c=3\n            Output:\n            False\n            Input:\n \
    \           a =3\n            b=2\n            c=4\n            Output:\n    \
    \        False\n            Input:\n            a =3\n            b=2\n      \
    \      c=3\n            Output:\n            False\n            Input:\n     \
    \       a =3\n            b=2\n            c=4\n            Output:\n        \
    \    False\n            Input:\n            a =3\n            b=2\n          \
    \  c=3\n            Output:\n            False\n            Input:\n         \
    \   a =3\n            b=2\n            c=4\n            Output:\n            False\n\
    \            Input:\n            a =3\n            b=2\n            c=3\n    \
    \        Output:\n            False\n            Input:\n            a =3\n  \
    \          b=2\n            c=4\n            Output:\n            False\n    \
    \        Input:\n            a \ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpd11go2fe.py\", line 9\n    Input:\nIndentationError: unexpected\
    \ indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: 1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n    >>> right_angle_triangle(3, 4, 5)\n   \
    \ True\n    >>> right_angle_triangle(3, 4, 6)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 7)\n    False\n    >>> right_angle_triangle(3, 4, 8)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 9)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 10)\n    False\n    >>> right_angle_triangle(3, 4, 11)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 12)\n    False\n    >>> right_angle_triangle(3, 4, 13)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 14)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 15)\n    False\n    >>> right_angle_triangle(3, 4, 16)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 17)\n    False\n    >>> right_angle_triangle(3, 4, 18)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 19)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 20)\n    False\n    >>> right_angle_triangle(3, 4, 21)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 22)\n    False\n    >>> right_angle_triangle(3, 4, 23)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 24)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 25)\n    False\n    >>> right_angle_triangle(3, 4, 26)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 27)\n    False\n    >>> right_angle_triangle(3, 4, 28)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 29)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 30)\n    False\n    >>> right_angle_triangle(3, 4, 31)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 32)\n    False\n    >>> right_angle_triangle(3, 4, 33)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 34)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 35)\n    False\n    >>> right_angle_triangle(3, 4, 36)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 37)\n    False\n    >>> right_angle_triangle(3, 4, 38)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 39)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 40)\n    False\n    >>> right_angle_triangle(3, 4, 41)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 42)\n    False\n    >>> right_angle_triangle(3, 4, 43)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 44)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 45)\n    False\n    >>> right_angle_triangle(3, 4, 46)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 47)\n    False\n    >>> right_angle_triangle(3, 4, 48)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 49)\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp5qtlr982.py\", line 9\n    >>> right_angle_triangle(3,\
    \ 4, 5)\n    ^^\nSyntaxError: invalid syntax\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input: a = 2, b = 2, c = 3\n  \
    \          Output: True\n            \"\"\"\n            Input: a = 2, b = 1,\
    \ c = 3\n            Output: False\n            \"\"\"\n            Input: a =\
    \ 2, b = 2, c = 1\n            Output: True\n            \"\"\"\n            Input:\
    \ a = 2, b = 1, c = 2\n            Output: False\n            \"\"\"\n       \
    \     Input: a = 2, b = 1, c = 1\n            Output: True\n            \"\"\"\
    \n            Input: a = 1, b = 2, c = 1\n            Output: True\n         \
    \   \"\"\"\n            Input: a = 1, b = 2, c = 2\n            Output: True\n\
    \            \"\"\"\n            Input: a = 1, b = 1, c = 2\n            Output:\
    \ True\n            \"\"\"\n            Input: a = 1, b = 1, c = 1\n         \
    \   Output: True\n            \"\"\"\n            Input: a = 0, b = 1, c = 1\n\
    \            Output: True\n            \"\"\"\n            Input: a = 0, b = 1,\
    \ c = 2\n            Output: True\n            \"\"\"\n            Input: a =\
    \ 0, b = 2, c = 1\n            Output: True\n            \"\"\"\n            Input:\
    \ a = 0, b = 2, c = 2\n            Output: True\n            \"\"\"\n        \
    \    Input: a = 0, b = 2, c = 3\n            Output: True\n            \"\"\"\n\
    \            Input: a = 0, b = 1, c = 3\n            Output: True\n          \
    \  \"\"\"\n            Input: a = 0, b = 1, c = 1\n            Output: True\n\
    \            \"\"\"\n            Input: a = 0, b = 1, c = 2\n            Output:\
    \ True\n            \"\"\"\n            Input: a = 0, b = 1, c = 4\n         \
    \   Output: True\n            \"\"\"\n            Input: a = 0, b = 2, c = 4\n\
    \            Output: True\n            \"\"\"\n            Input: a = 0, b = 2,\
    \ c = 1\n            Output: True\n            \"\"\"\n            Input: a =\
    \ 0, b = 2, c = 2\n            Output: True\n            \"\"\"\n            Input:\
    \ a = 0, b = 2, c = 3\n            Output: True\n            \"\"\"\n        \
    \    Input: a = 0, b = 1, c = 3\n            Output: True\n            \"\"\"\n\
    \            Input: a = 0, b = 1, c = 1\n            Output: True\n          \
    \  \"\"\"\n            Input: a = 0, b = 1, c = 2\n            Output: True\n\
    \            \"\"\"\n            Input: a = 0, b = 1, c = 4\n            Output:\
    \ True\n            \"\"\"\n            Input: a = 0, b = 2, c = 4\n         \
    \   Output: True\n            \"\"\"\n            Input: a = 0, b = 2, c = 1\n\
    \            Output: True\n            \"\"\"\n            Input: a = 0, b = 2,\
    \ c = 2\n            Output: True\n            \"\"\"\n            Input: a =\
    \ 0, b = 2, c = 3\n            Output: True\n            \"\"\"\n            Input:\
    \ a = 0, b = 1, c = 3\n            Output: True\n            \"\"\"\n        \
    \    Input: a = 0, b = 1, c = 1\n            Output: True\n            \"\"\"\n\
    \            Input: a = \ndef check(candidate):\n    assert candidate(3, 4, 5)\
    \ == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6,\
    \ 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp0y28i856.py\", line 9\n    Input: a = 2, b = 2, c = 3\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input:\n            a =3\n    \
    \        b=4\n            c=5\n            Output:\n            True\n       \
    \     \"\"\"\n            \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert\
    \ candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert\
    \ candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert\
    \ candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert\
    \ candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n   \
    \ assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\
    \ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpkx7j1bav.py\", line 9\n    Input:\nIndentationError: unexpected\
    \ indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input:\n                    a =\
    \ 5\n                    b = 4\n                    c = 6\n            Output:\n\
    \                    True\n            \"\"\"\n    Args:\n        a (float): Length\
    \ of side a\n        b (float): Length of side b\n        c (float): Length of\
    \ side c\n    Returns:\n        bool: Return True if the three sides form a right-angled\
    \ triangle, False\n            otherwise.\n    \"\"\"\n    if a + b > c and a\
    \ + c > b and b + c > a:\n        return True\n    else:\n        return False\n\
    \n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpx157w1ru.py\", line 9\n    Input:\nIndentationError: unexpected\
    \ indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input: a = 4, b = 2, c = 3\n  \
    \          Output: True\n            \"\"\"\n            \n            \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpkvh0dw2r.py\", line 9\n    Input: a = 4, b = 2, c = 3\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input:\n            a =3\n    \
    \        b=2\n            c=4\n            Output:\n            True\n       \
    \     \"\"\"\n    \"\"\"\n    a, b, c = sorted([a, b, c])\n    if a + b > c and\
    \ b + c > a and c + a > b:\n        return True\n    else:\n        return False\n\
    \n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmphx76muo5.py\", line 9\n    Input:\nIndentationError: unexpected\
    \ indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: 1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n    >>> right_angle_triangle(3, 4, 5)\n   \
    \ True\n    >>> right_angle_triangle(3, 4, 6)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 7)\n    False\n    >>> right_angle_triangle(3, 4, 8)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 9)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 10)\n    False\n    >>> right_angle_triangle(3, 4, 11)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 12)\n    False\n    >>> right_angle_triangle(3, 4, 13)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 14)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 15)\n    False\n    >>> right_angle_triangle(3, 4, 16)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 17)\n    False\n    >>> right_angle_triangle(3, 4, 18)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 19)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 20)\n    False\n    >>> right_angle_triangle(3, 4, 21)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 22)\n    False\n    >>> right_angle_triangle(3, 4, 23)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 24)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 25)\n    False\n    >>> right_angle_triangle(3, 4, 26)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 27)\n    False\n    >>> right_angle_triangle(3, 4, 28)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 29)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 30)\n    False\n    >>> right_angle_triangle(3, 4, 31)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 32)\n    False\n    >>> right_angle_triangle(3, 4, 33)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 34)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 35)\n    False\n    >>> right_angle_triangle(3, 4, 36)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 37)\n    False\n    >>> right_angle_triangle(3, 4, 38)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 39)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 40)\n    False\n    >>> right_angle_triangle(3, 4, 41)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 42)\n    False\n    >>> right_angle_triangle(3, 4, 43)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 44)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 45)\n    False\n    >>> right_angle_triangle(3, 4, 46)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 47)\n    False\n    >>> right_angle_triangle(3, 4, 48)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 49)\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp5qtlr982.py\", line 9\n    >>> right_angle_triangle(3,\
    \ 4, 5)\n    ^^\nSyntaxError: invalid syntax\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input:\n            a =3\n    \
    \        b=4\n            c=6\n            Output:\n            True\n       \
    \     \"\"\"\n    \"\"\"\n    if a == b and b == c:\n        return True\n   \
    \ elif a == b or a == c:\n        return True\n    elif b == c or b == a:\n  \
    \      return True\n    else:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpfpxi0c5g.py\", line 9\n    Input:\nIndentationError: unexpected\
    \ indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input:\n            a =   3\n \
    \           b =   5\n            c =   7\n            Output:\n            True\n\
    \            \"\"\"\n    \"\"\"\n    if a == b and b == c:\n        return True\n\
    \    elif a == b or a == c or b == c:\n        return False\n    else:\n     \
    \   angle1 = (a + b + c) / 2\n        angle2 = (a - b - c) / 2\n        angle3\
    \ = (a - b + c) / 2\n        if angle1 == angle2 and angle2 == angle3:\n     \
    \       return True\n        else:\n            return False\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpfayrvuaz.py\", line 9\n    Input:\nIndentationError: unexpected\
    \ indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input:\n            a =3\n    \
    \        b=4\n            c=6\n            Output:\n            True\n       \
    \     \"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    def check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp7z8epkxx.py\", line 9\n    Input:\nIndentationError: unexpected\
    \ indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: 1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n    >>> right_angle_triangle(3, 5, 7)\n   \
    \ True\n    >>> right_angle_triangle(3, 4, 7)\n    False\n    >>> right_angle_triangle(3,\
    \ 5, 4)\n    False\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(3,\
    \ 5, 6)\n    False\n    >>> right_angle_triangle(3, 5, 8)\n    False\n    >>>\
    \ right_angle_triangle(3, 5, 10)\n    False\n    >>> right_angle_triangle(3, 5,\
    \ 11)\n    False\n    >>> right_angle_triangle(3, 5, 12)\n    False\n    >>> right_angle_triangle(3,\
    \ 5, 13)\n    False\n    >>> right_angle_triangle(3, 5, 14)\n    False\n    >>>\
    \ right_angle_triangle(3, 5, 15)\n    False\n    >>> right_angle_triangle(3, 5,\
    \ 16)\n    False\n    >>> right_angle_triangle(3, 5, 17)\n    False\n    >>> right_angle_triangle(3,\
    \ 5, 18)\n    False\n    >>> right_angle_triangle(3, 5, 19)\n    False\n    >>>\
    \ right_angle_triangle(3, 5, 20)\n    False\n    >>> right_angle_triangle(3, 5,\
    \ 21)\n    False\n    >>> right_angle_triangle(3, 5, 22)\n    False\n    >>> right_angle_triangle(3,\
    \ 5, 23)\n    False\n    >>> right_angle_triangle(3, 5, 24)\n    False\n    >>>\
    \ right_angle_triangle(3, 5, 25)\n    False\n    >>> right_angle_triangle(3, 5,\
    \ 26)\n    False\n    >>> right_angle_triangle(3, 5, 27)\n    False\n    >>> right_angle_triangle(3,\
    \ 5, 28)\n    False\n    >>> right_angle_triangle(3, 5, 29)\n    False\n    >>>\
    \ right_angle_triangle(3, 5, 30)\n    False\n    >>> right_angle_triangle(3, 5,\
    \ 31)\n    False\n    >>> right_angle_triangle(3, 5, 32)\n    False\n    >>> right_angle_triangle(3,\
    \ 5, 33)\n    False\n    >>> right_angle_triangle(3, 5, 34)\n    False\n    >>>\
    \ right_angle_triangle(3, 5, 35)\n    False\n    >>> right_angle_triangle(3, 5,\
    \ 36)\n    False\n    >>> right_angle_triangle(3, 5, 37)\n    False\n    >>> right_angle_triangle(3,\
    \ 5, 38)\n    False\n    >>> right_angle_triangle(3, 5, 39)\n    False\n    >>>\
    \ right_angle_triangle(3, 5, 40)\n    False\n    >>> right_angle_triangle(3, 5,\
    \ 41)\n    False\n    >>> right_angle_triangle(3, 5, 42)\n    False\n    >>> right_angle_triangle(3,\
    \ 5, 43)\n    False\n    >>> right_angle_triangle(3, 5, 44)\n    False\n    >>>\
    \ right_angle_triangle(3, 5, 45)\n    False\n    >>> right_angle_triangle(3, 5,\
    \ 46)\n    False\n    >>> right_angle_triangle(3, 5, 47)\n    False\n    >>> right_angle_triangle(3,\
    \ 5, 48)\n    \ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n\
    \    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n\
    \    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n\
    \    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n\
    \    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) ==\
    \ True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10)\
    \ == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp16kobibz.py\", line 9\n    >>> right_angle_triangle(3,\
    \ 5, 7)\n    ^^\nSyntaxError: invalid syntax\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input:\n            a =3\n    \
    \        b=4\n            c=5\n            Output:\n            True\n       \
    \     \"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpziseho95.py\", line 9\n    Input:\nIndentationError: unexpected\
    \ indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: 1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n    >>> right_angle_triangle(3, 4, 5)\n   \
    \ True\n    >>> right_angle_triangle(3, 4, 6)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 7)\n    False\n    >>> right_angle_triangle(3, 4, 8)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 9)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 10)\n    False\n    >>> right_angle_triangle(3, 4, 11)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 12)\n    False\n    >>> right_angle_triangle(3, 4, 13)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 14)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 15)\n    False\n    >>> right_angle_triangle(3, 4, 16)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 17)\n    False\n    >>> right_angle_triangle(3, 4, 18)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 19)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 20)\n    False\n    >>> right_angle_triangle(3, 4, 21)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 22)\n    False\n    >>> right_angle_triangle(3, 4, 23)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 24)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 25)\n    False\n    >>> right_angle_triangle(3, 4, 26)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 27)\n    False\n    >>> right_angle_triangle(3, 4, 28)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 29)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 30)\n    False\n    >>> right_angle_triangle(3, 4, 31)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 32)\n    False\n    >>> right_angle_triangle(3, 4, 33)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 34)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 35)\n    False\n    >>> right_angle_triangle(3, 4, 36)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 37)\n    False\n    >>> right_angle_triangle(3, 4, 38)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 39)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 40)\n    False\n    >>> right_angle_triangle(3, 4, 41)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 42)\n    False\n    >>> right_angle_triangle(3, 4, 43)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 44)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 45)\n    False\n    >>> right_angle_triangle(3, 4, 46)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 47)\n    False\n    >>> right_angle_triangle(3, 4, 48)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 49)\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp5qtlr982.py\", line 9\n    >>> right_angle_triangle(3,\
    \ 4, 5)\n    ^^\nSyntaxError: invalid syntax\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input:\n            a =   5\n \
    \           b =   4\n            c =   3\n            Output:\n            True\n\
    \            \"\"\"\n    \"\"\"\n    a, b, c = sorted([a, b, c])\n    if a + b\
    \ > c and b + c > a and c + a > b:\n        return True\n    else:\n        return\
    \ False\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n  \
    \  assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n\
    \    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n\
    \    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n\
    \    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) ==\
    \ True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10)\
    \ == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp48ovkrxm.py\", line 9\n    Input:\nIndentationError: unexpected\
    \ indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input:\n            a =3\n    \
    \        b=4\n            c=5\n            Output:\n            True\n       \
    \     \"\"\"\n    \"\"\"\n    if a == b and b == c:\n        return True\n   \
    \ elif a == b or a == c:\n        return True\n    elif b == c or b == a:\n  \
    \      return True\n    else:\n        return False\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp_tw6slzx.py\", line 9\n    Input:\nIndentationError: unexpected\
    \ indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input: a = 2, b = 2, c = 2\n  \
    \          Output: True\n            \"\"\"\n            Input: a = 2, b = 1,\
    \ c = 1\n            Output: True\n            \"\"\"\n            Input: a =\
    \ 2, b = 1, c = 2\n            Output: False\n            \"\"\"\n           \
    \ Input: a = 2, b = 2, c = 1\n            Output: False\n            \"\"\"\n\
    \            Input: a = 2, b = 2, c = 2\n            Output: True\n          \
    \  \"\"\"\n            Input: a = 1, b = 2, c = 2\n            Output: True\n\
    \            \"\"\"\n            Input: a = 2, b = 2, c = 1\n            Output:\
    \ True\n            \"\"\"\n            Input: a = 2, b = 1, c = 1\n         \
    \   Output: True\n            \"\"\"\n            Input: a = 2, b = 1, c = 2\n\
    \            Output: True\n            \"\"\"\n            Input: a = 1, b = 2,\
    \ c = 2\n            Output: True\n            \"\"\"\n            Input: a =\
    \ 2, b = 2, c = 1\n            Output: True\n            \"\"\"\n            Input:\
    \ a = 2, b = 1, c = 1\n            Output: True\n            \"\"\"\n        \
    \    Input: a = 2, b = 1, c = 2\n            Output: True\n            \"\"\"\n\
    \            Input: a = 1, b = 2, c = 2\n            Output: True\n          \
    \  \"\"\"\n            Input: a = 2, b = 2, c = 1\n            Output: True\n\
    \            \"\"\"\n            Input: a = 2, b = 1, c = 1\n            Output:\
    \ True\n            \"\"\"\n            Input: a = 2, b = 1, c = 2\n         \
    \   Output: True\n            \"\"\"\n            Input: a = 1, b = 2, c = 2\n\
    \            Output: True\n            \"\"\"\n            Input: a = 2, b = 2,\
    \ c = 1\n            Output: True\n            \"\"\"\n            Input: a =\
    \ 2, b = 1, c = 1\n            Output: True\n            \"\"\"\n            Input:\
    \ a = 2, b = 1, c = 2\n            Output: True\n            \"\"\"\n        \
    \    Input: a = 1, b = 2, c = 2\n            Output: True\n            \"\"\"\n\
    \            Input: a = 2, b = 2, c = 1\n            Output: True\n          \
    \  \"\"\"\n            Input: a = 2, b = 1, c = 1\n            Output: True\n\
    \            \"\"\"\n            Input: a = 2, b = 1, c = 2\n            Output:\
    \ True\n            \"\"\"\n            Input: a = 1, b = 2, c = 2\n         \
    \   Output: True\n            \"\"\"\n            Input: a = 2, b = 2, c = 1\n\
    \            Output: True\n            \"\"\"\n            Input: a = 2, b = 1,\
    \ c = 1\n            Output: True\n            \"\"\"\n            Input: a =\
    \ 2, b = 1, c = 2\n            Output: True\n            \"\"\"\n            Input:\
    \ a = 1, b = 2, c = 2\n            Output: True\n            \"\"\"\n        \
    \    Input: a = 2, b = 2, c = 1\n            Output: True\n            \"\"\"\n\
    \            Input: a = 2, b = 1, c = 1\n            Output: True\n          \
    \  \"\"\"\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n  \
    \  assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n\
    \    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n\
    \    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n\
    \    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) ==\
    \ True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10)\
    \ == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpeakjm6i8.py\", line 9\n    Input: a = 2, b = 2, c = 2\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input:\n            a : 5\n   \
    \         b : 4\n            c : 3\n            Output:\n            True\n  \
    \          \"\"\"\n    \"\"\"\n    a, b, c = sorted([a, b, c])\n    if a + b >\
    \ c and b + c > a and c + a > b:\n        return True\n    else:\n        return\
    \ False\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n  \
    \  assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n\
    \    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n\
    \    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n\
    \    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) ==\
    \ True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10)\
    \ == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpwwrymdwr.py\", line 9\n    Input:\nIndentationError: unexpected\
    \ indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input:\n                    a =\
    \ 3\n                    b = 4\n                    c = 5\n            Output:\n\
    \                    True\n            \"\"\"\n    Args:\n        a (float): Length\
    \ of side a\n        b (float): Length of side b\n        c (float): Length of\
    \ side c\n    Returns:\n        bool: True if a right angle triangle, False otherwise\n\
    \    \"\"\"\n    if a + b > c and b + c > a and c + a > b:\n        return True\n\
    \    else:\n        return False\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp3g6d_04h.py\", line 9\n    Input:\nIndentationError: unexpected\
    \ indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: 1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n    >>> right_angle_triangle(3, 4, 5)\n   \
    \ True\n    >>> right_angle_triangle(3, 4, 6)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 7)\n    True\n    >>> right_angle_triangle(3, 4, 8)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 9)\n    True\n    >>> right_angle_triangle(3, 4, 10)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 11)\n    True\n    >>> right_angle_triangle(3, 4,\
    \ 12)\n    False\n    >>> right_angle_triangle(3, 4, 13)\n    True\n    >>> right_angle_triangle(3,\
    \ 4, 14)\n    False\n    >>> right_angle_triangle(3, 4, 15)\n    True\n    >>>\
    \ right_angle_triangle(3, 4, 16)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 17)\n    True\n    >>> right_angle_triangle(3, 4, 18)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 19)\n    True\n    >>> right_angle_triangle(3, 4, 20)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 21)\n    True\n    >>> right_angle_triangle(3, 4,\
    \ 22)\n    False\n    >>> right_angle_triangle(3, 4, 23)\n    True\n    >>> right_angle_triangle(3,\
    \ 4, 24)\n    False\n    >>> right_angle_triangle(3, 4, 25)\n    True\n    >>>\
    \ right_angle_triangle(3, 4, 26)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 27)\n    True\n    >>> right_angle_triangle(3, 4, 28)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 29)\n    True\n    >>> right_angle_triangle(3, 4, 30)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 31)\n    True\n    >>> right_angle_triangle(3, 4,\
    \ 32)\n    False\n    >>> right_angle_triangle(3, 4, 33)\n    True\n    >>> right_angle_triangle(3,\
    \ 4, 34)\n    False\n    >>> right_angle_triangle(3, 4, 35)\n    True\n    >>>\
    \ right_angle_triangle(3, 4, 36)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 37)\n    True\n    >>> right_angle_triangle(3, 4, 38)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 39)\n    True\n    >>> right_angle_triangle(3, 4, 40)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 41)\n    True\n    >>> right_angle_triangle(3, 4,\
    \ 42)\n    False\n    >>> right_angle_triangle(3, 4, 43)\n    True\n    >>> right_angle_triangle(3,\
    \ 4, 44)\n    False\n    >>> right_angle_triangle(3, 4, 45)\n    True\n    >>>\
    \ right_angle_triangle(3, 4, 46)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 47)\n    True\n    >>> right_angle_triangle(3, 4, 48)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 49)\n    True\n    >>> right_angle_triangle(3, 4, 50)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 5\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp_hugl6p5.py\", line 9\n    >>> right_angle_triangle(3,\
    \ 4, 5)\n    ^^\nSyntaxError: invalid syntax\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input: a = 2, b = 2, c = 3\n  \
    \          Output: True\n            \"\"\"\n            Input: a = 2, b = 1,\
    \ c = 3\n            Output: False\n            \"\"\"\n            Input: a =\
    \ 2, b = 2, c = 1\n            Output: True\n            \"\"\"\n            Input:\
    \ a = 2, b = 1, c = 1\n            Output: True\n            \"\"\"\n        \
    \    Input: a = 2, b = 1, c = 2\n            Output: False\n            \"\"\"\
    \n            Input: a = 2, b = 1, c = 4\n            Output: True\n         \
    \   \"\"\"\n            Input: a = 2, b = 1, c = 5\n            Output: True\n\
    \            \"\"\"\n            Input: a = 2, b = 1, c = 6\n            Output:\
    \ True\n            \"\"\"\n            Input: a = 2, b = 1, c = 7\n         \
    \   Output: True\n            \"\"\"\n            Input: a = 2, b = 1, c = 8\n\
    \            Output: True\n            \"\"\"\n            Input: a = 2, b = 1,\
    \ c = 9\n            Output: True\n            \"\"\"\n            Input: a =\
    \ 2, b = 1, c = 10\n            Output: True\n            \"\"\"\n           \
    \ Input: a = 2, b = 1, c = 11\n            Output: True\n            \"\"\"\n\
    \            Input: a = 2, b = 1, c = 12\n            Output: True\n         \
    \   \"\"\"\n            Input: a = 2, b = 1, c = 13\n            Output: True\n\
    \            \"\"\"\n            Input: a = 2, b = 1, c = 14\n            Output:\
    \ True\n            \"\"\"\n            Input: a = 2, b = 1, c = 15\n        \
    \    Output: True\n            \"\"\"\n            Input: a = 2, b = 1, c = 16\n\
    \            Output: True\n            \"\"\"\n            Input: a = 2, b = 1,\
    \ c = 17\n            Output: True\n            \"\"\"\n            Input: a =\
    \ 2, b = 1, c = 18\n            Output: True\n            \"\"\"\n           \
    \ Input: a = 2, b = 1, c = 19\n            Output: True\n            \"\"\"\n\
    \            Input: a = 2, b = 1, c = 20\n            Output: True\n         \
    \   \"\"\"\n            Input: a = 2, b = 1, c = 21\n            Output: True\n\
    \            \"\"\"\n            Input: a = 2, b = 1, c = 22\n            Output:\
    \ True\n            \"\"\"\n            Input: a = 2, b = 1, c = 23\n        \
    \    Output: True\n            \"\"\"\n            Input: a = 2, b = 1, c = 24\n\
    \            Output: True\n            \"\"\"\n            Input: a = 2, b = 1,\
    \ c = 25\n            Output: True\n            \"\"\"\n            Input: a =\
    \ 2, b = 1, c = 26\n            Output: True\n            \"\"\"\n           \
    \ Input: a = 2, b = 1, c = 27\n            Output: True\n            \"\"\"\n\
    \            Input: a = 2, b = 1, c = 28\n            Output: True\n         \
    \   \"\"\"\n            Input: a = 2, b = 1, c = 29\n            Output: True\n\
    \            \"\"\"\n            Input: a = 2, b = 1, c = 30\n            Output:\
    \ True\n            \"\"\"\n            \ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpbxyibaz5.py\", line 9\n    Input: a = 2, b = 2, c = 3\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input:\n            a =3\n    \
    \        b=2\n            c=1\n            Output:\n            True\n       \
    \     \"\"\"\n    \"\"\"\n    a, b, c = sorted([a, b, c])\n    if a + b > c and\
    \ b + c > a and c + a > b:\n        return True\n    else:\n        return False\n\
    \n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpmhqqo1f2.py\", line 9\n    Input:\nIndentationError: unexpected\
    \ indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input:\n            a =3\n    \
    \        b=4\n            c=5\n            Output:\n            True\n       \
    \     \"\"\"\n    \"\"\"\n    a, b, c = sorted([a, b, c])\n    if a + b > c and\
    \ b + c > a and c + a > b:\n        return True\n    else:\n        return False\n\
    \n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpupmz20he.py\", line 9\n    Input:\nIndentationError: unexpected\
    \ indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input:\n            a =3\n    \
    \        b=4\n            c=5\n            Output:\n            True\n       \
    \     \"\"\"\n            \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert\
    \ candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert\
    \ candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert\
    \ candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert\
    \ candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n   \
    \ assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\
    \ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpkx7j1bav.py\", line 9\n    Input:\nIndentationError: unexpected\
    \ indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input:\n            a =3\n    \
    \        b=4\n            c=6\n            Output:\n            True\n       \
    \     \"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    def check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp7z8epkxx.py\", line 9\n    Input:\nIndentationError: unexpected\
    \ indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input:\n            a : 5\n   \
    \         b : 4\n            c : 3\n            Output:\n            True\n  \
    \          \"\"\"\n            Input:\n            a : 5\n            b : 4\n\
    \            c : 6\n            Output:\n            False\n            \"\"\"\
    \n            Input:\n            a : 5\n            b : 4\n            c : 5\n\
    \            Output:\n            True\n    \"\"\"\n    if a + b > c and b + c\
    \ > a and c + a > b:\n        return True\n    else:\n        return False\n\n\
    \ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpav3weyet.py\", line 9\n    Input:\nIndentationError: unexpected\
    \ indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input:\n            a =3\n    \
    \        b = 1\n            c = 2\n            Output:\n            True\n   \
    \         \"\"\"\n    \"\"\"\n    a, b, c = sorted([a, b, c])\n    if a + b >\
    \ c and b + c > a and c + a > b:\n        return True\n    else:\n        return\
    \ False\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n  \
    \  assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n\
    \    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n\
    \    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n\
    \    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) ==\
    \ True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10)\
    \ == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpo98qekq7.py\", line 9\n    Input:\nIndentationError: unexpected\
    \ indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: 1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n    >>> right_angle_triangle(3, 4, 5)\n   \
    \ True\n    >>> right_angle_triangle(3, 4, 6)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 7)\n    False\n    >>> right_angle_triangle(3, 4, 8)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 9)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 10)\n    False\n    >>> right_angle_triangle(3, 4, 11)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 12)\n    False\n    >>> right_angle_triangle(3, 4, 13)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 14)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 15)\n    False\n    >>> right_angle_triangle(3, 4, 16)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 17)\n    False\n    >>> right_angle_triangle(3, 4, 18)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 19)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 20)\n    False\n    >>> right_angle_triangle(3, 4, 21)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 22)\n    False\n    >>> right_angle_triangle(3, 4, 23)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 24)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 25)\n    False\n    >>> right_angle_triangle(3, 4, 26)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 27)\n    False\n    >>> right_angle_triangle(3, 4, 28)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 29)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 30)\n    False\n    >>> right_angle_triangle(3, 4, 31)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 32)\n    False\n    >>> right_angle_triangle(3, 4, 33)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 34)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 35)\n    False\n    >>> right_angle_triangle(3, 4, 36)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 37)\n    False\n    >>> right_angle_triangle(3, 4, 38)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 39)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 40)\n    False\n    >>> right_angle_triangle(3, 4, 41)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 42)\n    False\n    >>> right_angle_triangle(3, 4, 43)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 44)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 45)\n    False\n    >>> right_angle_triangle(3, 4, 46)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 47)\n    False\n    >>> right_angle_triangle(3, 4, 48)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 49)\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp5qtlr982.py\", line 9\n    >>> right_angle_triangle(3,\
    \ 4, 5)\n    ^^\nSyntaxError: invalid syntax\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input:\n            a =3\n    \
    \        b=4\n            c=5\n            Output:\n            True\n       \
    \     \"\"\"\n            \n    \"\"\"\n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n\
    \    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n\
    \    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n\
    \    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n\
    \    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) ==\
    \ True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10)\
    \ == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpzthegh6n.py\", line 9\n    Input:\nIndentationError: unexpected\
    \ indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input:\n                    a =\
    \ 3\n                    b = 4\n                    c = 5\n            Output:\n\
    \                    True\n            \"\"\"\n    \"\"\"\n    a, b, c = sorted([a,\
    \ b, c])\n    if a + b > c and b + c > a and c + a > b:\n        return True\n\
    \    else:\n        return False\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpn525s3r2.py\", line 9\n    Input:\nIndentationError: unexpected\
    \ indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input:\n            a =3\n    \
    \        b=4\n            c=6\n            Output:\n            True\n       \
    \     \"\"\"\n            \n    \"\"\"\n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n  \
    \  assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n\
    \    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n\
    \    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n\
    \    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) ==\
    \ True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10)\
    \ == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpt_nyhnwy.py\", line 9\n    Input:\nIndentationError: unexpected\
    \ indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input:\n                    a =\
    \ 5\n                    b = 4\n                    c = 6\n            Output:\n\
    \                    True\n            \"\"\"\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpranu6se8.py\", line 9\n    Input:\nIndentationError: unexpected\
    \ indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input: a = 1, b = 2, c = 3\n  \
    \          Output: True\n            Explanation: Triangle is right angled.\n\
    \            \"\"\"\n            Input: a = 1, b = 2, c = 4\n            Output:\
    \ False\n            Explanation: Triangle is not right angled.\n            \"\
    \"\"\n            Input: a = 1, b = 2, c = 5\n            Output: True\n     \
    \       Explanation: Triangle is right angled.\n            \"\"\"\n         \
    \   Input: a = 1, b = 2, c = 6\n            Output: True\n            Explanation:\
    \ Triangle is right angled.\n            \"\"\"\n            Input: a = 1, b =\
    \ 2, c = 7\n            Output: True\n            Explanation: Triangle is right\
    \ angled.\n            \"\"\"\n            Input: a = 1, b = 2, c = 8\n      \
    \      Output: True\n            Explanation: Triangle is right angled.\n    \
    \        \"\"\"\n            Input: a = 1, b = 2, c = 9\n            Output: True\n\
    \            Explanation: Triangle is right angled.\n            \"\"\"\n    \
    \        Input: a = 1, b = 2, c = 10\n            Output: True\n            Explanation:\
    \ Triangle is right angled.\n            \"\"\"\n            Input: a = 1, b =\
    \ 2, c = 11\n            Output: True\n            Explanation: Triangle is right\
    \ angled.\n            \"\"\"\n            Input: a = 1, b = 2, c = 12\n     \
    \       Output: True\n            Explanation: Triangle is right angled.\n   \
    \         \"\"\"\n            Input: a = 1, b = 2, c = 13\n            Output:\
    \ True\n            Explanation: Triangle is right angled.\n            \"\"\"\
    \n            Input: a = 1, b = 2, c = 14\n            Output: True\n        \
    \    Explanation: Triangle is right angled.\n            \"\"\"\n            Input:\
    \ a = 1, b = 2, c = 15\n            Output: True\n            Explanation: Triangle\
    \ is right angled.\n            \"\"\"\n            Input: a = 1, b = 2, c = 16\n\
    \            Output: True\n            Explanation: Triangle is right angled.\n\
    \            \"\"\"\n            Input: a = 1, b = 2, c = 17\n            Output:\
    \ True\n            Explanation: Triangle is right angled.\n            \"\"\"\
    \n            Input: a = 1, b = 2, c = 18\n            Output: True\n        \
    \    Explanation: Triangle is right angled.\n            \"\"\"\n            Input:\
    \ a = 1, b = 2, c = 19\n            Output: True\n            Explanation: Triangle\
    \ is right angled.\n            \"\"\"\n            Input: a = 1, b = 2, c = 20\n\
    \            Output: True\n            Explanation: Triangle is right angled.\n\
    \            \"\"\"\n            Input: a = 1, b = 2, c = \ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpsg4ploxt.py\", line 9\n    Input: a = 1, b = 2, c = 3\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input:\n            a =3\n    \
    \        b=4\n            c=6\n            Output:\n            True\n       \
    \     \"\"\"\n    \"\"\"\n    \n    if a>b and a>c:\n        if b>c:\n       \
    \     return True\n        else:\n            return False\n    elif b>a and b>c:\n\
    \        if a>c:\n            return True\n        else:\n            return False\n\
    \    elif c>a and c>b:\n        if a>b:\n            return True\n        else:\n\
    \            return False\n    else:\n        return False\n    \n    \ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp0_col2tk.py\", line 9\n    Input:\nIndentationError: unexpected\
    \ indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input: a = 5, b = 10, c = 15\n\
    \            Output: True\n            \"\"\"\n            Input: a = 5, b = 10,\
    \ c = 10\n            Output: False\n            \"\"\"\n            Input: a\
    \ = 5, b = 10, c = 5\n            Output: True\n            \"\"\"\n         \
    \   Input: a = 5, b = 10, c = 10\n            Output: True\n            \"\"\"\
    \n            Input: a = 5, b = 10, c = 15\n            Output: True\n       \
    \     \"\"\"\n            Input: a = 5, b = 10, c = 20\n            Output: False\n\
    \            \"\"\"\n            Input: a = 5, b = 10, c = 15\n            Output:\
    \ True\n            \"\"\"\n            Input: a = 5, b = 10, c = 10\n       \
    \     Output: True\n            \"\"\"\n            Input: a = 5, b = 10, c =\
    \ 5\n            Output: True\n            \"\"\"\n            Input: a = 5, b\
    \ = 10, c = 10\n            Output: True\n            \"\"\"\n            Input:\
    \ a = 5, b = 10, c = 15\n            Output: True\n            \"\"\"\n      \
    \      Input: a = 5, b = 10, c = 20\n            Output: False\n            \"\
    \"\"\n            Input: a = 5, b = 10, c = 15\n            Output: True\n   \
    \         \"\"\"\n            Input: a = 5, b = 10, c = 10\n            Output:\
    \ True\n            \"\"\"\n            Input: a = 5, b = 10, c = 5\n        \
    \    Output: True\n            \"\"\"\n            Input: a = 5, b = 10, c = 10\n\
    \            Output: True\n            \"\"\"\n            Input: a = 5, b = 10,\
    \ c = 15\n            Output: True\n            \"\"\"\n            Input: a =\
    \ 5, b = 10, c = 20\n            Output: False\n            \"\"\"\n         \
    \   Input: a = 5, b = 10, c = 15\n            Output: True\n            \"\"\"\
    \n            Input: a = 5, b = 10, c = 10\n            Output: True\n       \
    \     \"\"\"\n            Input: a = 5, b = 10, c = 5\n            Output: True\n\
    \            \"\"\"\n            Input: a = 5, b = 10, c = 10\n            Output:\
    \ True\n            \"\"\"\n            Input: a = 5, b = 10, c = 15\n       \
    \     Output: True\n            \"\"\"\n            Input: a = 5, b = 10, c =\
    \ 20\n            Output: False\n            \"\"\"\n            Input: a = 5,\
    \ b = 10, c = 15\n            Output: True\n            \"\"\"\n            Input:\
    \ a = 5, b = 10, c = 10\n            Output: True\n            \"\"\"\n      \
    \      Input: a = 5, b = 10, c = 5\n            Output: True\n            \"\"\
    \"\n            Input: a = 5, b = 10, c = 10\n            Output: True\n     \
    \       \"\"\"\n            Input: a = 5, b = 10, c = 15\n            Output:\
    \ True\n            \"\"\"\n            Input: a = 5, b = 10, c = 20\n       \
    \     Output: False\n            \"\"\"\n            Input: a = 5, b = 10, c =\
    \ 15\n            Output: True\n            \"\"\"\n            Input: a = 5,\
    \ b = 10, c = 10\n            Output: True\n            \"\"\"\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpzdc7kz4c.py\", line 9\n    Input: a = 5, b = 10, c = 15\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input:\n            a =3\n    \
    \        b=4\n            c=6\n            Output:\n            True\n       \
    \     \"\"\"\n    \"\"\"\n    a, b, c = sorted([a, b, c])\n    if a + b > c and\
    \ b + c > a and c + a > b:\n        return True\n    else:\n        return False\n\
    \n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpkt7ykloe.py\", line 9\n    Input:\nIndentationError: unexpected\
    \ indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input: a = 5, b = 10, c = 15\n\
    \            Output: True\n            Input: a = 5, b = 10, c = 5\n         \
    \   Output: False\n            Input: a = 5, b = 10, c = 10\n            Output:\
    \ True\n            Input: a = 5, b = 10, c = 15\n            Output: False\n\
    \            Input: a = 5, b = 10, c = 10\n            Output: True\n        \
    \    Input: a = 5, b = 10, c = 5\n            Output: True\n            Input:\
    \ a = 5, b = 10, c = 10\n            Output: True\n            Input: a = 5, b\
    \ = 10, c = 15\n            Output: True\n            Input: a = 5, b = 10, c\
    \ = 10\n            Output: True\n            Input: a = 5, b = 10, c = 5\n  \
    \          Output: True\n            Input: a = 5, b = 10, c = 10\n          \
    \  Output: True\n            Input: a = 5, b = 10, c = 15\n            Output:\
    \ True\n            Input: a = 5, b = 10, c = 10\n            Output: True\n \
    \           Input: a = 5, b = 10, c = 5\n            Output: True\n          \
    \  Input: a = 5, b = 10, c = 10\n            Output: True\n            Input:\
    \ a = 5, b = 10, c = 15\n            Output: True\n            Input: a = 5, b\
    \ = 10, c = 10\n            Output: True\n            Input: a = 5, b = 10, c\
    \ = 5\n            Output: True\n            Input: a = 5, b = 10, c = 10\n  \
    \          Output: True\n            Input: a = 5, b = 10, c = 15\n          \
    \  Output: True\n            Input: a = 5, b = 10, c = 10\n            Output:\
    \ True\n            Input: a = 5, b = 10, c = 5\n            Output: True\n  \
    \          Input: a = 5, b = 10, c = 10\n            Output: True\n          \
    \  Input: a = 5, b = 10, c = 15\n            Output: True\n            Input:\
    \ a = 5, b = 10, c = 10\n            Output: True\n            Input: a = 5, b\
    \ = 10, c = 5\n            Output: True\n            Input: a = 5, b = 10, c =\
    \ 10\n            Output: True\n            Input: a = 5, b = 10, c = 15\n   \
    \         Output: True\n            Input: a = 5, b = 10, c = 10\n           \
    \ Output: True\n            Input: a = 5, b = 10, c = 5\n            Output: True\n\
    \            Input: a = 5, b = 10, c = 10\n            Output: True\n        \
    \    Input: a = 5, b = 10, c = 15\n            Output: True\n            Input:\
    \ a = 5, b = 10, c = 10\n            Output: True\n            Input: a = 5, b\
    \ = 10, c = 5\n            Output: True\n            Input: a = 5, b = 10, c =\
    \ 10\n            Output: True\n            Input: a = 5, b = 10, c = 15\n   \
    \         Output: True\n            Input: a = 5, b = 10, c = \ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpgml8mgtm.py\", line 9\n    Input: a = 5, b = 10, c = 15\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: 1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n    >>> right_angle_triangle(3, 4, 5)\n   \
    \ True\n    >>> right_angle_triangle(3, 4, 6)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 7)\n    False\n    >>> right_angle_triangle(3, 4, 8)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 9)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 10)\n    False\n    >>> right_angle_triangle(3, 4, 11)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 12)\n    False\n    >>> right_angle_triangle(3, 4, 13)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 14)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 15)\n    False\n    >>> right_angle_triangle(3, 4, 16)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 17)\n    False\n    >>> right_angle_triangle(3, 4, 18)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 19)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 20)\n    False\n    >>> right_angle_triangle(3, 4, 21)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 22)\n    False\n    >>> right_angle_triangle(3, 4, 23)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 24)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 25)\n    False\n    >>> right_angle_triangle(3, 4, 26)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 27)\n    False\n    >>> right_angle_triangle(3, 4, 28)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 29)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 30)\n    False\n    >>> right_angle_triangle(3, 4, 31)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 32)\n    False\n    >>> right_angle_triangle(3, 4, 33)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 34)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 35)\n    False\n    >>> right_angle_triangle(3, 4, 36)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 37)\n    False\n    >>> right_angle_triangle(3, 4, 38)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 39)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 40)\n    False\n    >>> right_angle_triangle(3, 4, 41)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 42)\n    False\n    >>> right_angle_triangle(3, 4, 43)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 44)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 45)\n    False\n    >>> right_angle_triangle(3, 4, 46)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 47)\n    False\n    >>> right_angle_triangle(3, 4, 48)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 49)\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp5qtlr982.py\", line 9\n    >>> right_angle_triangle(3,\
    \ 4, 5)\n    ^^\nSyntaxError: invalid syntax\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: 1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n    >>> right_angle_triangle(3, 5, 7)\n   \
    \ True\n    >>> right_angle_triangle(3, 5, 6)\n    False\n    >>> right_angle_triangle(3,\
    \ 5, 4)\n    False\n    >>> right_angle_triangle(3, 5, 1)\n    False\n    >>>\
    \ right_angle_triangle(3, 5, 0)\n    False\n    >>> right_angle_triangle(3, 5,\
    \ -1)\n    False\n    >>> right_angle_triangle(3, 5, -4)\n    False\n    >>> right_angle_triangle(3,\
    \ 5, -7)\n    False\n    >>> right_angle_triangle(3, 5, -6)\n    False\n    >>>\
    \ right_angle_triangle(3, 5, -5)\n    False\n    >>> right_angle_triangle(3, 5,\
    \ -2)\n    False\n    >>> right_angle_triangle(3, 5, -3)\n    False\n    >>> right_angle_triangle(3,\
    \ 5, -10)\n    False\n    >>> right_angle_triangle(3, 5, -9)\n    False\n    >>>\
    \ right_angle_triangle(3, 5, -8)\n    False\n    >>> right_angle_triangle(3, 5,\
    \ -5)\n    False\n    >>> right_angle_triangle(3, 5, -4)\n    False\n    >>> right_angle_triangle(3,\
    \ 5, -3)\n    False\n    >>> right_angle_triangle(3, 5, -2)\n    False\n    >>>\
    \ right_angle_triangle(3, 5, -1)\n    False\n    >>> right_angle_triangle(3, 5,\
    \ 0)\n    False\n    >>> right_angle_triangle(3, 5, 1)\n    False\n    >>> right_angle_triangle(3,\
    \ 5, 2)\n    False\n    >>> right_angle_triangle(3, 5, 3)\n    False\n    >>>\
    \ right_angle_triangle(3, 5, 4)\n    False\n    >>> right_angle_triangle(3, 5,\
    \ 5)\n    False\n    >>> right_angle_triangle(3, 5, 6)\n    False\n    >>> right_angle_triangle(3,\
    \ 5, 7)\n    False\n    >>> right_angle_triangle(3, 5, 8)\n    False\n    >>>\
    \ right_angle_triangle(3, 5, 9)\n    False\n    >>> right_angle_triangle(3, 5,\
    \ 10)\n    False\n    >>> right_angle_triangle(3, 5, 11)\n    False\n    >>> right_angle_triangle(3,\
    \ 5, 12)\n    False\n    >>> right_angle_triangle(3, 5, 13)\n    False\n    >>>\
    \ right_angle_triangle(3, 5, 14)\n    False\n    >>> right_angle_triangle(3, 5,\
    \ 15)\n    False\n    >>> right_angle_triangle(3, 5, 16)\n    False\n    >>> right_angle_triangle(3,\
    \ 5, 17)\n    False\n    >>> right_angle_triangle(3, 5, 18)\n    False\n    >>>\
    \ right_angle_triangle(3, 5, 19)\n    False\n    >>> right_angle_triangle(3, 5,\
    \ 20)\n    False\n    >>> right_angle_triangle(3, 5, 21)\n    False\n    >>> right_angle_triangle(3,\
    \ 5, 22)\n    False\n    >>> right_angle_triangle(3, 5, 23)\n    False\n    >>>\
    \ right_angle_triangle(3, 5, 24)\n    False\n    >>> right_angle_\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpi2hf7kao.py\", line 9\n    >>> right_angle_triangle(3,\
    \ 5, 7)\n    ^^\nSyntaxError: invalid syntax\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input:\n            a =3\n    \
    \        b=4\n            c=5\n            Output:\n            True\n       \
    \     \"\"\"\n    \"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert\
    \ candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert\
    \ candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert\
    \ candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert\
    \ candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n   \
    \ assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\
    \ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpw7xxzlfj.py\", line 9\n    Input:\nIndentationError: unexpected\
    \ indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input:\n            a =3\n    \
    \        b=2\n            c=4\n            Output:\n            True\n       \
    \     \"\"\"\n    \"\"\"\n    if a == b and b == c:\n        return True\n   \
    \ elif a == b or a == c:\n        return True\n    elif b == c or b == a:\n  \
    \      return True\n    else:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpw_7lzzee.py\", line 9\n    Input:\nIndentationError: unexpected\
    \ indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input:\n            a =3\n    \
    \        b = 1\n            c = 2\n            Output:\n            True\n   \
    \         \"\"\"\n    \"\"\"\n    a, b, c = sorted([a, b, c])\n    if a + b >\
    \ c and b + c > a and c + a > b:\n        return True\n    return False\n\n\n\
    def check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpcfot6hw2.py\", line 9\n    Input:\nIndentationError: unexpected\
    \ indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input:\n            a =   5\n \
    \           b =   3\n            c =   1\n            Output:\n            True\n\
    \            \"\"\"\n    \"\"\"\n    a, b, c = sorted([a, b, c])\n    if a ==\
    \ b == c:\n        return True\n    elif a == b or a == c or b == c:\n       \
    \ return False\n    else:\n        angle_a = math.degrees(math.acos((a / b) *\
    \ (b / c)))\n        angle_b = math.degrees(math.acos((b / c) * (a / b)))\n  \
    \      angle_c = math.degrees(math.acos((c / a) * (c / b)))\n        if angle_a\
    \ > angle_b and angle_a > angle_c:\n            return True\n        elif angle_b\
    \ > angle_a and angle_b > angle_c:\n            return True\n        elif angle_c\
    \ > angle_a and angle_c > angle_b:\n            return True\n        else:\n \
    \           return False\n\n\ndef check(candidate):\n    assert candidate(3, 4,\
    \ 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmptlj6u5e0.py\", line 9\n    Input:\nIndentationError: unexpected\
    \ indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input: a = 2, b = 3, c = 3\n  \
    \          Output: True\n            Explanation: a^2 + b^2 = c^2\n          \
    \  \"\"\"\n            Input: a = 2, b = 1, c = 3\n            Output: False\n\
    \            Explanation: a^2 + b^2 = c^2\n            \"\"\"\n            Input:\
    \ a = 2, b = 1, c = 3\n            Output: True\n            Explanation: a^2\
    \ + b^2 = c^2\n            \"\"\"\n            Input: a = 2, b = 1, c = 3\n  \
    \          Output: True\n            Explanation: a^2 + b^2 = c^2\n          \
    \  \"\"\"\n            Input: a = 2, b = 1, c = 3\n            Output: True\n\
    \            Explanation: a^2 + b^2 = c^2\n            \"\"\"\n            Input:\
    \ a = 2, b = 1, c = 3\n            Output: True\n            Explanation: a^2\
    \ + b^2 = c^2\n            \"\"\"\n            Input: a = 2, b = 1, c = 3\n  \
    \          Output: True\n            Explanation: a^2 + b^2 = c^2\n          \
    \  \"\"\"\n            Input: a = 2, b = 1, c = 3\n            Output: True\n\
    \            Explanation: a^2 + b^2 = c^2\n            \"\"\"\n            Input:\
    \ a = 2, b = 1, c = 3\n            Output: True\n            Explanation: a^2\
    \ + b^2 = c^2\n            \"\"\"\n            Input: a = 2, b = 1, c = 3\n  \
    \          Output: True\n            Explanation: a^2 + b^2 = c^2\n          \
    \  \"\"\"\n            Input: a = 2, b = 1, c = 3\n            Output: True\n\
    \            Explanation: a^2 + b^2 = c^2\n            \"\"\"\n            Input:\
    \ a = 2, b = 1, c = 3\n            Output: True\n            Explanation: a^2\
    \ + b^2 = c^2\n            \"\"\"\n            Input: a = 2, b = 1, c = 3\n  \
    \          Output: True\n            Explanation: a^2 + b^2 = c^2\n          \
    \  \"\"\"\n            Input: a = 2, b = 1, c = 3\n            Output: True\n\
    \            Explanation: a^2 + b^2 = c^2\n            \"\"\"\n            Input:\
    \ a = 2, b = 1, c = 3\n            Output: True\n            Explanation: a^2\
    \ + b^2 = c^2\n            \"\"\"\n            Input: a = 2, b = 1, c = 3\n  \
    \          Output: True\n            Explanation: a^2 + b^2 = c^2\n          \
    \  \"\"\"\n            Input: a = 2, b = 1, c = 3\n            Output: True\n\
    \            Explanation: a^2 + b^2 = c^2\n            \"\"\"\n            Input:\
    \ a = 2, b = 1, c = 3\n            Output: True\n            Explanation: \ndef\
    \ check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmprtqo0nmd.py\", line 9\n    Input: a = 2, b = 3, c = 3\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: 1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n    >>> right_angle_triangle(3, 4, 5)\n   \
    \ True\n    >>> right_angle_triangle(3, 4, 6)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 7)\n    False\n    >>> right_angle_triangle(3, 4, 8)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 9)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 10)\n    False\n    >>> right_angle_triangle(3, 4, 11)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 12)\n    False\n    >>> right_angle_triangle(3, 4, 13)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 14)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 15)\n    False\n    >>> right_angle_triangle(3, 4, 16)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 17)\n    False\n    >>> right_angle_triangle(3, 4, 18)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 19)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 20)\n    False\n    >>> right_angle_triangle(3, 4, 21)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 22)\n    False\n    >>> right_angle_triangle(3, 4, 23)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 24)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 25)\n    False\n    >>> right_angle_triangle(3, 4, 26)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 27)\n    False\n    >>> right_angle_triangle(3, 4, 28)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 29)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 30)\n    False\n    >>> right_angle_triangle(3, 4, 31)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 32)\n    False\n    >>> right_angle_triangle(3, 4, 33)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 34)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 35)\n    False\n    >>> right_angle_triangle(3, 4, 36)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 37)\n    False\n    >>> right_angle_triangle(3, 4, 38)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 39)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 40)\n    False\n    >>> right_angle_triangle(3, 4, 41)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 42)\n    False\n    >>> right_angle_triangle(3, 4, 43)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 44)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 45)\n    False\n    >>> right_angle_triangle(3, 4, 46)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 47)\n    False\n    >>> right_angle_triangle(3, 4, 48)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 49)\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp5qtlr982.py\", line 9\n    >>> right_angle_triangle(3,\
    \ 4, 5)\n    ^^\nSyntaxError: invalid syntax\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input:\n            a : 5\n   \
    \         b : 3\n            c : 7\n            Output:\n            True\n  \
    \          Explanation:\n            Triangle ABC is right-angled.\n         \
    \   \"\"\"\n    \"\"\"\n    a, b, c = sorted([a, b, c])\n    if a + b > c and\
    \ b + c > a and c + a > b:\n        return True\n    else:\n        return False\n\
    \n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp4mp_5m4k.py\", line 9\n    Input:\nIndentationError: unexpected\
    \ indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input:\n            a =3\n    \
    \        b=2\n            c=4\n            Output:\n            True\n       \
    \     \"\"\"\n    \"\"\"\n    a, b, c = sorted([a, b, c])\n    if a + b > c and\
    \ b + c > a and c + a > b:\n        return True\n    else:\n        return False\n\
    \n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmphx76muo5.py\", line 9\n    Input:\nIndentationError: unexpected\
    \ indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input:\n            a =3\n    \
    \        b=4\n            c=6\n            Output:\n            True\n       \
    \     \"\"\"\n    \"\"\"\n    a, b, c = sorted([a, b, c])\n    if a + b > c and\
    \ b + c > a and c + a > b:\n        return True\n    else:\n        return False\n\
    \n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpkt7ykloe.py\", line 9\n    Input:\nIndentationError: unexpected\
    \ indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input:\n            a =   5\n \
    \           b =   3\n            c =   2\n            Output:\n            True\n\
    \            \"\"\"\n    \"\"\"\n    a, b, c = sorted([a, b, c])\n    if a + b\
    \ > c and b + c > a and c + a > b:\n        return True\n    else:\n        return\
    \ False\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n  \
    \  assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n\
    \    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n\
    \    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n\
    \    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) ==\
    \ True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10)\
    \ == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpu5djfnb1.py\", line 9\n    Input:\nIndentationError: unexpected\
    \ indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input:\n            a =3\n    \
    \        b = 2\n            c = 3\n            Output:\n            True\n   \
    \         \"\"\"\n    \"\"\"\n    a, b, c = sorted([a, b, c])\n    if a == b ==\
    \ c:\n        return True\n    elif a > b > c:\n        return False\n    else:\n\
    \        angle = (b * b - c * c) / (2 * a)\n        if angle < 0:\n          \
    \  return False\n        else:\n            return True\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp1anqln8y.py\", line 9\n    Input:\nIndentationError: unexpected\
    \ indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input:\n            a =3\n    \
    \        b = 2\n            c = 3\n            Output:\n            True\n   \
    \         \"\"\"\n    \"\"\"\n    a, b, c = sorted([a, b, c])\n    if a + b >\
    \ c and b + c > a and c + a > b:\n        return True\n    else:\n        return\
    \ False\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n  \
    \  assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n\
    \    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n\
    \    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n\
    \    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) ==\
    \ True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10)\
    \ == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpoli2107s.py\", line 9\n    Input:\nIndentationError: unexpected\
    \ indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input:\n            a =   4\n \
    \           b =   5\n            c =   6\n            Output:\n            True\n\
    \            Explanation:\n            Triangle ABC is right-angled.\n       \
    \     \"\"\"\n    \"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\ndef check(candidate):\n    assert candidate(3, 4, 5)\
    \ == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6,\
    \ 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpk44vulc_.py\", line 9\n    Input:\nIndentationError: unexpected\
    \ indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input: a = 4, b = 2, c = 1\n  \
    \          Output: True\n            \"\"\"\n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp070x_exg.py\", line 9\n    Input: a = 4, b = 2, c = 1\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input:\n            a =3\n    \
    \        b=4\n            c=6\n            Output:\n            True\n       \
    \     \"\"\"\n    \"\"\"\n    a, b, c = sorted([a, b, c])\n    if a + b > c and\
    \ b + c > a and c + a > b:\n        return True\n    else:\n        return False\n\
    \n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpkt7ykloe.py\", line 9\n    Input:\nIndentationError: unexpected\
    \ indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input:\n            a =3\n    \
    \        b=4\n            c=6\n            Output:\n            True\n       \
    \     \"\"\"\n    \"\"\"\n    a, b, c = sorted([a, b, c])\n    if a + b > c and\
    \ b + c > a and c + a > b:\n        return True\n    else:\n        return False\n\
    \ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpyowkxx2r.py\", line 9\n    Input:\nIndentationError: unexpected\
    \ indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input: a = 5, b = 10, c = 15\n\
    \            Output: True\n            \"\"\"\n            \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpr7skek2v.py\", line 9\n    Input: a = 5, b = 10, c = 15\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input:\n            a =   3\n \
    \           b =   2\n            c =   1\n            Output:\n            True\n\
    \            Input:\n            a =   3\n            b =   2\n            c =\
    \   3\n            Output:\n            False\n            Input:\n          \
    \  a =   3\n            b =   2\n            c =   4\n            Output:\n  \
    \          False\n            Input:\n            a =   3\n            b =   2\n\
    \            c =   5\n            Output:\n            False\n            Input:\n\
    \            a =   3\n            b =   2\n            c =   6\n            Output:\n\
    \            False\n            Input:\n            a =   3\n            b = \
    \  2\n            c =   7\n            Output:\n            False\n          \
    \  Input:\n            a =   3\n            b =   2\n            c =   8\n   \
    \         Output:\n            False\n            Input:\n            a =   3\n\
    \            b =   2\n            c =   9\n            Output:\n            False\n\
    \            Input:\n            a =   3\n            b =   2\n            c =\
    \   10\n            Output:\n            False\n            Input:\n         \
    \   a =   3\n            b =   2\n            c =   11\n            Output:\n\
    \            False\n            Input:\n            a =   3\n            b = \
    \  2\n            c =   12\n            Output:\n            False\n         \
    \   Input:\n            a =   3\n            b =   2\n            c =   13\n \
    \           Output:\n            False\n            Input:\n            a =  \
    \ 3\n            b =   2\n            c =   14\n            Output:\n        \
    \    False\n            Input:\n            a =   3\n            b =   2\n   \
    \         c =   15\n            Output:\n            False\n            Input:\n\
    \            a =   3\n            b =   2\n            c =   16\n            Output:\n\
    \            False\n            Input:\n            a =   3\n            b = \
    \  2\n            c =   17\n            Output:\n            False\n         \
    \   Input:\n            a =   3\n            b =   2\n            c =   18\n \
    \           Output:\n            False\n            Input:\n            a =  \
    \ 3\n            b =   2\n            c =   19\n            Output:\n        \
    \    False\n            Input:\n            a =   \ndef check(candidate):\n  \
    \  assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp_bk1j3zj.py\", line 9\n    Input:\nIndentationError: unexpected\
    \ indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: 1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n    >>> right_angle_triangle(3, 4, 5)\n   \
    \ True\n    >>> right_angle_triangle(3, 4, 6)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 7)\n    False\n    >>> right_angle_triangle(3, 4, 8)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 9)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 10)\n    False\n    >>> right_angle_triangle(3, 4, 11)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 12)\n    False\n    >>> right_angle_triangle(3, 4, 13)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 14)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 15)\n    False\n    >>> right_angle_triangle(3, 4, 16)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 17)\n    False\n    >>> right_angle_triangle(3, 4, 18)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 19)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 20)\n    False\n    >>> right_angle_triangle(3, 4, 21)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 22)\n    False\n    >>> right_angle_triangle(3, 4, 23)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 24)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 25)\n    False\n    >>> right_angle_triangle(3, 4, 26)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 27)\n    False\n    >>> right_angle_triangle(3, 4, 28)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 29)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 30)\n    False\n    >>> right_angle_triangle(3, 4, 31)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 32)\n    False\n    >>> right_angle_triangle(3, 4, 33)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 34)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 35)\n    False\n    >>> right_angle_triangle(3, 4, 36)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 37)\n    False\n    >>> right_angle_triangle(3, 4, 38)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 39)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 40)\n    False\n    >>> right_angle_triangle(3, 4, 41)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 42)\n    False\n    >>> right_angle_triangle(3, 4, 43)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 44)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 45)\n    False\n    >>> right_angle_triangle(3, 4, 46)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 47)\n    False\n    >>> right_angle_triangle(3, 4, 48)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 49)\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp5qtlr982.py\", line 9\n    >>> right_angle_triangle(3,\
    \ 4, 5)\n    ^^\nSyntaxError: invalid syntax\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: 1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n    >>> right_angle_triangle(3, 4, 5)\n   \
    \ True\n    >>> right_angle_triangle(3, 5, 4)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 6)\n    False\n    >>> right_angle_triangle(3, 4, 7)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 8)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 9)\n    False\n    >>> right_angle_triangle(3, 4, 10)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 11)\n    False\n    >>> right_angle_triangle(3, 4, 12)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 13)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 14)\n    False\n    >>> right_angle_triangle(3, 4, 15)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 16)\n    False\n    >>> right_angle_triangle(3, 4, 17)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 18)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 19)\n    False\n    >>> right_angle_triangle(3, 4, 20)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 21)\n    False\n    >>> right_angle_triangle(3, 4, 22)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 23)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 24)\n    False\n    >>> right_angle_triangle(3, 4, 25)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 26)\n    False\n    >>> right_angle_triangle(3, 4, 27)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 28)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 29)\n    False\n    >>> right_angle_triangle(3, 4, 30)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 31)\n    False\n    >>> right_angle_triangle(3, 4, 32)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 33)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 34)\n    False\n    >>> right_angle_triangle(3, 4, 35)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 36)\n    False\n    >>> right_angle_triangle(3, 4, 37)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 38)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 39)\n    False\n    >>> right_angle_triangle(3, 4, 40)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 41)\n    False\n    >>> right_angle_triangle(3, 4, 42)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 43)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 44)\n    False\n    >>> right_angle_triangle(3, 4, 45)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 46)\n    False\n    >>> right_angle_triangle(3, 4, 47)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 48)\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpzkf1zjq7.py\", line 9\n    >>> right_angle_triangle(3,\
    \ 4, 5)\n    ^^\nSyntaxError: invalid syntax\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input:\n            a =3\n    \
    \        b=4\n            c=6\n            Output:\n            True\n       \
    \     \"\"\"\n    \"\"\"\n    a, b, c = sorted([a, b, c])\n    if a + b > c and\
    \ b + c > a and c + a > b:\n        return True\n    else:\n        return False\n\
    \n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpkt7ykloe.py\", line 9\n    Input:\nIndentationError: unexpected\
    \ indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input:\n            a =3\n    \
    \        b=4\n            c=5\n            Output:\n            True\n       \
    \     Input:\n            a=4\n            b=3\n            c=6\n            Output:\n\
    \            False\n            Input:\n            a=4\n            b=3\n   \
    \         c=4\n            Output:\n            False\n            Input:\n  \
    \          a=4\n            b=3\n            c=6\n            Output:\n      \
    \      True\n            Input:\n            a=4\n            b=3\n          \
    \  c=4\n            Output:\n            False\n            Input:\n         \
    \   a=4\n            b=3\n            c=6\n            Output:\n            True\n\
    \            Input:\n            a=4\n            b=3\n            c=4\n     \
    \       Output:\n            False\n            Input:\n            a=4\n    \
    \        b=3\n            c=6\n            Output:\n            True\n       \
    \     Input:\n            a=4\n            b=3\n            c=4\n            Output:\n\
    \            False\n            Input:\n            a=4\n            b=3\n   \
    \         c=6\n            Output:\n            True\n            Input:\n   \
    \         a=4\n            b=3\n            c=4\n            Output:\n       \
    \     False\n            Input:\n            a=4\n            b=3\n          \
    \  c=6\n            Output:\n            True\n            Input:\n          \
    \  a=4\n            b=3\n            c=4\n            Output:\n            False\n\
    \            Input:\n            a=4\n            b=3\n            c=6\n     \
    \       Output:\n            True\n            Input:\n            a=4\n     \
    \       b=3\n            c=4\n            Output:\n            False\n       \
    \     Input:\n            a=4\n            b=3\n            c=6\n            Output:\n\
    \            True\n            Input:\n            a=4\n            b=3\n    \
    \        c=4\n            Output:\n            False\n            Input:\n   \
    \         a=4\n            b=3\n            c=6\n            Output:\n       \
    \     True\n            Input:\n            a=4\n            b=3\n           \
    \ c=4\n            Output:\n            False\n            Input:\n          \
    \  a=4\n            b=3\n            c=6\n            Output:\n            True\n\
    \            Input:\n            a=4\n            b=3\n            c=4\n     \
    \       Output:\n            False\n            Input:\n            a=4\n    \
    \        b=3\n            c=6\n            Output:\n            True\n       \
    \     Input:\n            a=4\n            b=3\n            c=4\n            Output:\n\
    \            False\n            Input:\n            a=\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp5t_wrlop.py\", line 9\n    Input:\nIndentationError: unexpected\
    \ indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input:\n            a =3\n    \
    \        b=4\n            c=6\n            Output:\n            True\n       \
    \     \"\"\"\n    \"\"\"\n    a, b, c = sorted([a, b, c])\n    if a + b > c and\
    \ b + c > a and c + a > b:\n        return True\n    else:\n        return False\n\
    \n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpkt7ykloe.py\", line 9\n    Input:\nIndentationError: unexpected\
    \ indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input:\n            a =3\n    \
    \        b=2\n            c=4\n            Output:\n            True\n       \
    \     \"\"\"\n    \"\"\"\n    a, b, c = sorted([a, b, c])\n    if a + b > c and\
    \ b + c > a and c + a > b:\n        return True\n    else:\n        return False\n\
    \n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmphx76muo5.py\", line 9\n    Input:\nIndentationError: unexpected\
    \ indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input:\n            a =3\n    \
    \        b=4\n            c=6\n            Output:\n            True\n       \
    \     \"\"\"\n    \"\"\"\n    a, b, c = sorted([a, b, c])\n    if a == b == c:\n\
    \        return True\n    elif a == b or a == c or b == c:\n        return False\n\
    \    else:\n        angle1 = (a + b + c) / 2\n        angle2 = (a - b - c) / 2\n\
    \        angle3 = (a + b - c) / 2\n        if angle1 == angle2 == angle3:\n  \
    \          return True\n        else:\n            return False\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpu_1ftmyu.py\", line 9\n    Input:\nIndentationError: unexpected\
    \ indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input:\n            a =3\n    \
    \        b=4\n            c=5\n            Output:\n            True\n       \
    \     \"\"\"\n    \"\"\"\n    a, b, c = sorted([a, b, c])\n    if a + b > c and\
    \ b + c > a and c + a > b:\n        return True\n    else:\n        return False\n\
    \n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpupmz20he.py\", line 9\n    Input:\nIndentationError: unexpected\
    \ indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input:\n            a =3\n    \
    \        b=2\n            c=1\n            Output:\n            True\n       \
    \     \"\"\"\n    \"\"\"\n    a, b, c = sorted([a, b, c])\n    if a == b and b\
    \ == c:\n        return True\n    elif a == b or a == c:\n        return False\n\
    \    elif b == c or b == a:\n        return False\n    else:\n        return True\n\
    \n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpxhg8ct4a.py\", line 9\n    Input:\nIndentationError: unexpected\
    \ indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input:\n            a =3\n    \
    \        b=2\n            c=1\n            Output:\n            True\n       \
    \     \"\"\"\n    \"\"\"\n    a, b, c = sorted([a, b, c])\n    if a == b and b\
    \ == c:\n        return True\n    elif a == b or a == c or b == c:\n        return\
    \ False\n    else:\n        angle = (a + b + c) / 2\n        if angle >= 180:\n\
    \            return True\n        else:\n            return False\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpib2phbwc.py\", line 9\n    Input:\nIndentationError: unexpected\
    \ indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input: a = 1, b = 2, c = 3\n  \
    \          Output: True\n            Explanation: Triangle is right angled.\n\
    \            \"\"\"\n    \n    # Write your code here\n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert\
    \ candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert\
    \ candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert\
    \ candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert\
    \ candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n   \
    \ assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\
    \ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp3myr8e_a.py\", line 9\n    Input: a = 1, b = 2, c = 3\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input:\n            a =3\n    \
    \        b = 2\n            c = 3\n            Output:\n            True\n   \
    \         \"\"\"\n    \"\"\"\n    a, b, c = sorted([a, b, c])\n    if a + b >\
    \ c and b + c > a and c + a > b:\n        return True\n    else:\n        return\
    \ False\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n  \
    \  assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n\
    \    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n\
    \    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n\
    \    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) ==\
    \ True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10)\
    \ == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpoli2107s.py\", line 9\n    Input:\nIndentationError: unexpected\
    \ indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input:\n            a =3\n    \
    \        b=4\n            c=6\n            Output:\n            True\n       \
    \     \"\"\"\n    \"\"\"\n    if a == b and b == c:\n        return True\n   \
    \ elif a == b or a == c:\n        return True\n    elif b == c or b == a:\n  \
    \      return True\n    else:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpfpxi0c5g.py\", line 9\n    Input:\nIndentationError: unexpected\
    \ indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input:\n            a =3\n    \
    \        b=4\n            c=5\n            Output:\n            True\n       \
    \     \"\"\"\n    \"\"\"\n    a, b, c = sorted([a, b, c])\n    if a + b > c and\
    \ b + c > a and c + a > b:\n        return True\n    else:\n        return False\n\
    \n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpupmz20he.py\", line 9\n    Input:\nIndentationError: unexpected\
    \ indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input: a = 2, b = 2, c = 3\n  \
    \          Output: True\n            \"\"\"\n            Input: a = 2, b = 1,\
    \ c = 3\n            Output: False\n            \"\"\"\n            Input: a =\
    \ 2, b = 2, c = 1\n            Output: True\n            \"\"\"\n            Input:\
    \ a = 2, b = 1, c = 1\n            Output: True\n            \"\"\"\n        \
    \    Input: a = 2, b = 1, c = 2\n            Output: True\n            \"\"\"\n\
    \            Input: a = 2, b = 1, c = 4\n            Output: True\n          \
    \  \"\"\"\n            Input: a = 2, b = 1, c = 5\n            Output: True\n\
    \            \"\"\"\n            Input: a = 2, b = 1, c = 6\n            Output:\
    \ True\n            \"\"\"\n            Input: a = 2, b = 1, c = 7\n         \
    \   Output: True\n            \"\"\"\n            Input: a = 2, b = 1, c = 8\n\
    \            Output: True\n            \"\"\"\n            Input: a = 2, b = 1,\
    \ c = 9\n            Output: True\n            \"\"\"\n            Input: a =\
    \ 2, b = 1, c = 10\n            Output: True\n            \"\"\"\n           \
    \ Input: a = 2, b = 1, c = 11\n            Output: True\n            \"\"\"\n\
    \            Input: a = 2, b = 1, c = 12\n            Output: True\n         \
    \   \"\"\"\n            Input: a = 2, b = 1, c = 13\n            Output: True\n\
    \            \"\"\"\n            Input: a = 2, b = 1, c = 14\n            Output:\
    \ True\n            \"\"\"\n            Input: a = 2, b = 1, c = 15\n        \
    \    Output: True\n            \"\"\"\n            Input: a = 2, b = 1, c = 16\n\
    \            Output: True\n            \"\"\"\n            Input: a = 2, b = 1,\
    \ c = 17\n            Output: True\n            \"\"\"\n            Input: a =\
    \ 2, b = 1, c = 18\n            Output: True\n            \"\"\"\n           \
    \ Input: a = 2, b = 1, c = 19\n            Output: True\n            \"\"\"\n\
    \            Input: a = 2, b = 1, c = 20\n            Output: True\n         \
    \   \"\"\"\n            Input: a = 2, b = 1, c = 21\n            Output: True\n\
    \            \"\"\"\n            Input: a = 2, b = 1, c = 22\n            Output:\
    \ True\n            \"\"\"\n            Input: a = 2, b = 1, c = 23\n        \
    \    Output: True\n            \"\"\"\n            Input: a = 2, b = 1, c = 24\n\
    \            Output: True\n            \"\"\"\n            Input: a = 2, b = 1,\
    \ c = 25\n            Output: True\n            \"\"\"\n            Input: a =\
    \ 2, b = 1, c = 26\n            Output: True\n            \"\"\"\n           \
    \ Input: a = 2, b = 1, c = 27\n            Output: True\n            \"\"\"\n\
    \            Input: a = 2, b = 1, c = 28\n            Output: True\n         \
    \   \"\"\"\n            Input: a = 2, b = 1, c = 29\n            Output: True\n\
    \            \"\"\"\n            Input: a = 2, b = 1, c = 30\n            Output:\
    \ True\n            \"\"\"\n            \ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpo5s3hmga.py\", line 9\n    Input: a = 2, b = 2, c = 3\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: 1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n    >>> right_angle_triangle(3, 5, 7)\n   \
    \ True\n    >>> right_angle_triangle(3, 5, 6)\n    False\n    >>> right_angle_triangle(3,\
    \ 5, 4)\n    False\n    >>> right_angle_triangle(3, 5, 1)\n    False\n    >>>\
    \ right_angle_triangle(3, 5, 0)\n    False\n    >>> right_angle_triangle(3, 5,\
    \ -1)\n    False\n    >>> right_angle_triangle(3, 5, -2)\n    False\n    >>> right_angle_triangle(3,\
    \ 5, -3)\n    False\n    >>> right_angle_triangle(3, 5, -4)\n    False\n    >>>\
    \ right_angle_triangle(3, 5, -5)\n    False\n    >>> right_angle_triangle(3, 5,\
    \ -6)\n    False\n    >>> right_angle_triangle(3, 5, -7)\n    False\n    >>> right_angle_triangle(3,\
    \ 5, -8)\n    False\n    >>> right_angle_triangle(3, 5, -9)\n    False\n    >>>\
    \ right_angle_triangle(3, 5, -10)\n    False\n    >>> right_angle_triangle(3,\
    \ 5, -11)\n    False\n    >>> right_angle_triangle(3, 5, -12)\n    False\n   \
    \ >>> right_angle_triangle(3, 5, -13)\n    False\n    >>> right_angle_triangle(3,\
    \ 5, -14)\n    False\n    >>> right_angle_triangle(3, 5, -15)\n    False\n   \
    \ >>> right_angle_triangle(3, 5, -16)\n    False\n    >>> right_angle_triangle(3,\
    \ 5, -17)\n    False\n    >>> right_angle_triangle(3, 5, -18)\n    False\n   \
    \ >>> right_angle_triangle(3, 5, -19)\n    False\n    >>> right_angle_triangle(3,\
    \ 5, -20)\n    False\n    >>> right_angle_triangle(3, 5, -21)\n    False\n   \
    \ >>> right_angle_triangle(3, 5, -22)\n    False\n    >>> right_angle_triangle(3,\
    \ 5, -23)\n    False\n    >>> right_angle_triangle(3, 5, -24)\n    False\n   \
    \ >>> right_angle_triangle(3, 5, -25)\n    False\n    >>> right_angle_triangle(3,\
    \ 5, -26)\n    False\n    >>> right_angle_triangle(3, 5, -27)\n    False\n   \
    \ >>> right_angle_triangle(3, 5, -28)\n    False\n    >>> right_angle_triangle(3,\
    \ 5, -29)\n    False\n    >>> right_angle_triangle(3, 5, -30)\n    False\n   \
    \ >>> right_angle_triangle(3, 5, -31)\n    False\n    >>> right_angle_triangle(3,\
    \ 5, -32)\n    False\n    >>> right_angle_triangle(3, 5, -33)\n    False\n   \
    \ >>> right_angle_triangle(3, 5, -34)\n    False\n    >>> right_angle_triangle(3,\
    \ 5, -35)\n    False\n    >>> right_angle_triangle(3, 5, -36)\n    False\n   \
    \ >>> right_angle_triangle(3, 5, -37)\n    False\n    >>> right_angle_triangle(3,\
    \ \ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpzf2dbumu.py\", line 9\n    >>> right_angle_triangle(3,\
    \ 5, 7)\n    ^^\nSyntaxError: invalid syntax\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input: a = 1, b = 2, c = 3\n  \
    \          Output: True\n            \"\"\"\n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmphpi5z8k6.py\", line 9\n    Input: a = 1, b = 2, c = 3\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: 1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n    >>> right_angle_triangle(3, 4, 5)\n   \
    \ True\n    >>> right_angle_triangle(3, 4, 6)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 7)\n    True\n    >>> right_angle_triangle(3, 4, 8)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 9)\n    True\n    >>> right_angle_triangle(3, 4, 10)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 11)\n    True\n    >>> right_angle_triangle(3, 4,\
    \ 12)\n    False\n    >>> right_angle_triangle(3, 4, 13)\n    True\n    >>> right_angle_triangle(3,\
    \ 4, 14)\n    False\n    >>> right_angle_triangle(3, 4, 15)\n    True\n    >>>\
    \ right_angle_triangle(3, 4, 16)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 17)\n    True\n    >>> right_angle_triangle(3, 4, 18)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 19)\n    True\n    >>> right_angle_triangle(3, 4, 20)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 21)\n    True\n    >>> right_angle_triangle(3, 4,\
    \ 22)\n    False\n    >>> right_angle_triangle(3, 4, 23)\n    True\n    >>> right_angle_triangle(3,\
    \ 4, 24)\n    False\n    >>> right_angle_triangle(3, 4, 25)\n    True\n    >>>\
    \ right_angle_triangle(3, 4, 26)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 27)\n    True\n    >>> right_angle_triangle(3, 4, 28)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 29)\n    True\n    >>> right_angle_triangle(3, 4, 30)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 31)\n    True\n    >>> right_angle_triangle(3, 4,\
    \ 32)\n    False\n    >>> right_angle_triangle(3, 4, 33)\n    True\n    >>> right_angle_triangle(3,\
    \ 4, 34)\n    False\n    >>> right_angle_triangle(3, 4, 35)\n    True\n    >>>\
    \ right_angle_triangle(3, 4, 36)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 37)\n    True\n    >>> right_angle_triangle(3, 4, 38)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 39)\n    True\n    >>> right_angle_triangle(3, 4, 40)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 41)\n    True\n    >>> right_angle_triangle(3, 4,\
    \ 42)\n    False\n    >>> right_angle_triangle(3, 4, 43)\n    True\n    >>> right_angle_triangle(3,\
    \ 4, 44)\n    False\n    >>> right_angle_triangle(3, 4, 45)\n    True\n    >>>\
    \ right_angle_triangle(3, 4, 46)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 47)\n    True\n    >>> right_angle_triangle(3, 4, 48)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 49)\n    True\n    >>> right_angle_triangle(3, 4, 50)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 5\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp_hugl6p5.py\", line 9\n    >>> right_angle_triangle(3,\
    \ 4, 5)\n    ^^\nSyntaxError: invalid syntax\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: 1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n    >>> right_angle_triangle(3, 4, 5)\n   \
    \ True\n    >>> right_angle_triangle(3, 4, 6)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 7)\n    False\n    >>> right_angle_triangle(3, 4, 8)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 9)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 10)\n    False\n    >>> right_angle_triangle(3, 4, 11)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 12)\n    False\n    >>> right_angle_triangle(3, 4, 13)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 14)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 15)\n    False\n    >>> right_angle_triangle(3, 4, 16)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 17)\n    False\n    >>> right_angle_triangle(3, 4, 18)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 19)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 20)\n    False\n    >>> right_angle_triangle(3, 4, 21)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 22)\n    False\n    >>> right_angle_triangle(3, 4, 23)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 24)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 25)\n    False\n    >>> right_angle_triangle(3, 4, 26)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 27)\n    False\n    >>> right_angle_triangle(3, 4, 28)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 29)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 30)\n    False\n    >>> right_angle_triangle(3, 4, 31)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 32)\n    False\n    >>> right_angle_triangle(3, 4, 33)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 34)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 35)\n    False\n    >>> right_angle_triangle(3, 4, 36)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 37)\n    False\n    >>> right_angle_triangle(3, 4, 38)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 39)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 40)\n    False\n    >>> right_angle_triangle(3, 4, 41)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 42)\n    False\n    >>> right_angle_triangle(3, 4, 43)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 44)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 45)\n    False\n    >>> right_angle_triangle(3, 4, 46)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 47)\n    False\n    >>> right_angle_triangle(3, 4, 48)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 49)\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp5qtlr982.py\", line 9\n    >>> right_angle_triangle(3,\
    \ 4, 5)\n    ^^\nSyntaxError: invalid syntax\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input:\n            a =3\n    \
    \        b=2\n            c=4\n            Output:\n            True\n       \
    \     \"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpt7yl4u6x.py\", line 9\n    Input:\nIndentationError: unexpected\
    \ indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input:\n            a =3\n    \
    \        b = 2\n            c = 3\n            Output:\n            True\n   \
    \         \"\"\"\n    \"\"\"\n    \n    if a == b and b == c:\n        return\
    \ True\n    elif a == b or a == c:\n        return True\n    elif b == c or b\
    \ == a:\n        return True\n    else:\n        return False\n    \ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp_gaki8fo.py\", line 9\n    Input:\nIndentationError: unexpected\
    \ indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: 1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n    >>> right_angle_triangle(3, 4, 5)\n   \
    \ True\n    >>> right_angle_triangle(3, 5, 4)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 6)\n    False\n    >>> right_angle_triangle(3, 5, 6)\n    False\n    >>>\
    \ right_angle_triangle(3, 6, 4)\n    False\n    >>> right_angle_triangle(3, 6,\
    \ 5)\n    False\n    >>> right_angle_triangle(3, 6, 6)\n    True\n    >>> right_angle_triangle(6,\
    \ 4, 3)\n    False\n    >>> right_angle_triangle(6, 5, 3)\n    False\n    >>>\
    \ right_angle_triangle(6, 4, 4)\n    True\n    >>> right_angle_triangle(6, 5,\
    \ 4)\n    True\n    >>> right_angle_triangle(6, 4, 5)\n    True\n    >>> right_angle_triangle(6,\
    \ 5, 5)\n    True\n    >>> right_angle_triangle(6, 6, 4)\n    True\n    >>> right_angle_triangle(6,\
    \ 6, 5)\n    True\n    >>> right_angle_triangle(6, 6, 6)\n    True\n    >>> right_angle_triangle(6,\
    \ 6, 7)\n    True\n    >>> right_angle_triangle(6, 6, 8)\n    True\n    >>> right_angle_triangle(6,\
    \ 6, 9)\n    True\n    >>> right_angle_triangle(6, 6, 10)\n    True\n    >>> right_angle_triangle(6,\
    \ 6, 11)\n    True\n    >>> right_angle_triangle(6, 6, 12)\n    True\n    >>>\
    \ right_angle_triangle(6, 6, 13)\n    True\n    >>> right_angle_triangle(6, 6,\
    \ 14)\n    True\n    >>> right_angle_triangle(6, 6, 15)\n    True\n    >>> right_angle_triangle(6,\
    \ 6, 16)\n    True\n    >>> right_angle_triangle(6, 6, 17)\n    True\n    >>>\
    \ right_angle_triangle(6, 6, 18)\n    True\n    >>> right_angle_triangle(6, 6,\
    \ 19)\n    True\n    >>> right_angle_triangle(6, 6, 20)\n    True\n    >>> right_angle_triangle(6,\
    \ 6, 21)\n    True\n    >>> right_angle_triangle(6, 6, 22)\n    True\n    >>>\
    \ right_angle_triangle(6, 6, 23)\n    True\n    >>> right_angle_triangle(6, 6,\
    \ 24)\n    True\n    >>> right_angle_triangle(6, 6, 25)\n    True\n    >>> right_angle_triangle(6,\
    \ 6, 26)\n    True\n    >>> right_angle_triangle(6, 6, 27)\n    True\n    >>>\
    \ right_angle_triangle(6, 6, 28)\n    True\n    >>> right_angle_triangle(6, 6,\
    \ 29)\n    True\n    >>> right_angle_triangle(6, 6, 30)\n    True\n    >>> right_angle_triangle(6,\
    \ 6, 31)\n    True\n    >>> right_angle_triangle(6, 6, 32)\n    True\n    >>>\
    \ right_angle_triangle(6, 6, 33)\n    True\n    >>> right_angle_triangle(6, 6,\
    \ 34)\n    True\n    >>> right_angle_triangle(6, 6, 35)\n    True\n    >>> right_angle_triangle(6,\
    \ 6, \ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert\
    \ candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert\
    \ candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert\
    \ candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert\
    \ candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n   \
    \ assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\
    \ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpenakhu0d.py\", line 9\n    >>> right_angle_triangle(3,\
    \ 4, 5)\n    ^^\nSyntaxError: invalid syntax\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input:\n            a =3\n    \
    \        b=4\n            c=6\n            Output:\n            True\n       \
    \     \"\"\"\n    \"\"\"\n    a, b, c = sorted([a, b, c])\n    if a == b and b\
    \ == c:\n        return True\n    elif a == b or a == c:\n        return False\n\
    \    elif b == c or b == a:\n        return False\n    else:\n        return True\n\
    \n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpgesme39u.py\", line 9\n    Input:\nIndentationError: unexpected\
    \ indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input:\n            a =3\n    \
    \        b = 1\n            c = 2\n            Output:\n            True\n   \
    \         \"\"\"\n    \"\"\"\n    a, b, c = sorted([a, b, c])\n    if a + b >\
    \ c and b + c > a and c + a > b:\n        return True\n    return False\n\n\n\
    def check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpcfot6hw2.py\", line 9\n    Input:\nIndentationError: unexpected\
    \ indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: 1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n    >>> right_angle_triangle(3, 4, 5)\n   \
    \ True\n    >>> right_angle_triangle(3, 4, 6)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 7)\n    False\n    >>> right_angle_triangle(3, 4, 8)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 9)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 10)\n    False\n    >>> right_angle_triangle(3, 4, 11)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 12)\n    False\n    >>> right_angle_triangle(3, 4, 13)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 14)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 15)\n    False\n    >>> right_angle_triangle(3, 4, 16)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 17)\n    False\n    >>> right_angle_triangle(3, 4, 18)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 19)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 20)\n    False\n    >>> right_angle_triangle(3, 4, 21)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 22)\n    False\n    >>> right_angle_triangle(3, 4, 23)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 24)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 25)\n    False\n    >>> right_angle_triangle(3, 4, 26)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 27)\n    False\n    >>> right_angle_triangle(3, 4, 28)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 29)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 30)\n    False\n    >>> right_angle_triangle(3, 4, 31)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 32)\n    False\n    >>> right_angle_triangle(3, 4, 33)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 34)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 35)\n    False\n    >>> right_angle_triangle(3, 4, 36)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 37)\n    False\n    >>> right_angle_triangle(3, 4, 38)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 39)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 40)\n    False\n    >>> right_angle_triangle(3, 4, 41)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 42)\n    False\n    >>> right_angle_triangle(3, 4, 43)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 44)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 45)\n    False\n    >>> right_angle_triangle(3, 4, 46)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 47)\n    False\n    >>> right_angle_triangle(3, 4, 48)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 49)\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp5qtlr982.py\", line 9\n    >>> right_angle_triangle(3,\
    \ 4, 5)\n    ^^\nSyntaxError: invalid syntax\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input: a = 4, b = 2, c = 3\n  \
    \          Output: True\n            \"\"\"\n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmppu6w2fjv.py\", line 9\n    Input: a = 4, b = 2, c = 3\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input:\n            a =3\n    \
    \        b=4\n            c=5\n            Output:\n            True\n       \
    \     \"\"\"\n            \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert\
    \ candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert\
    \ candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert\
    \ candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert\
    \ candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n   \
    \ assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\
    \ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpkx7j1bav.py\", line 9\n    Input:\nIndentationError: unexpected\
    \ indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: 1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n    >>> right_angle_triangle(3, 5, 7)\n   \
    \ True\n    >>> right_angle_triangle(3, 4, 5)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 6)\n    True\n    >>> right_angle_triangle(3, 4, 7)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 8)\n    True\n    >>> right_angle_triangle(3, 4, 9)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 10)\n    True\n    >>> right_angle_triangle(3, 4, 11)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 12)\n    True\n    >>> right_angle_triangle(3, 4,\
    \ 13)\n    False\n    >>> right_angle_triangle(3, 4, 14)\n    True\n    >>> right_angle_triangle(3,\
    \ 4, 15)\n    False\n    >>> right_angle_triangle(3, 4, 16)\n    True\n    >>>\
    \ right_angle_triangle(3, 4, 17)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 18)\n    True\n    >>> right_angle_triangle(3, 4, 19)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 20)\n    True\n    >>> right_angle_triangle(3, 4, 21)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 22)\n    True\n    >>> right_angle_triangle(3, 4,\
    \ 23)\n    False\n    >>> right_angle_triangle(3, 4, 24)\n    True\n    >>> right_angle_triangle(3,\
    \ 4, 25)\n    False\n    >>> right_angle_triangle(3, 4, 26)\n    True\n    >>>\
    \ right_angle_triangle(3, 4, 27)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 28)\n    True\n    >>> right_angle_triangle(3, 4, 29)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 30)\n    True\n    >>> right_angle_triangle(3, 4, 31)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 32)\n    True\n    >>> right_angle_triangle(3, 4,\
    \ 33)\n    False\n    >>> right_angle_triangle(3, 4, 34)\n    True\n    >>> right_angle_triangle(3,\
    \ 4, 35)\n    False\n    >>> right_angle_triangle(3, 4, 36)\n    True\n    >>>\
    \ right_angle_triangle(3, 4, 37)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 38)\n    True\n    >>> right_angle_triangle(3, 4, 39)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 40)\n    True\n    >>> right_angle_triangle(3, 4, 41)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 42)\n    True\n    >>> right_angle_triangle(3, 4,\
    \ 43)\n    False\n    >>> right_angle_triangle(3, 4, 44)\n    True\n    >>> right_angle_triangle(3,\
    \ 4, 45)\n    False\n    >>> right_angle_triangle(3, 4, 46)\n    True\n    >>>\
    \ right_angle_triangle(3, 4, 47)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 48)\n    True\n    >>> right_angle_triangle(3, 4, 49)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 50)\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert\
    \ candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert\
    \ candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert\
    \ candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert\
    \ candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n   \
    \ assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\
    \ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpcqr3v2ok.py\", line 9\n    >>> right_angle_triangle(3,\
    \ 5, 7)\n    ^^\nSyntaxError: invalid syntax\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input:\n            a =   4\n \
    \           b = 3\n            c = 2\n            Output:\n            True\n\
    \            \"\"\"\n    \"\"\"\n    a, b, c = sorted([a, b, c])\n    if a + b\
    \ > c and b + c > a and c + a > b:\n        return True\n    else:\n        return\
    \ False\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n  \
    \  assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n\
    \    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n\
    \    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n\
    \    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) ==\
    \ True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10)\
    \ == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp2xfzx1hi.py\", line 9\n    Input:\nIndentationError: unexpected\
    \ indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: 1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n    >>> right_angle_triangle(3, 4, 5)\n   \
    \ True\n    >>> right_angle_triangle(3, 4, 6)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 7)\n    False\n    >>> right_angle_triangle(3, 4, 8)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 9)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 10)\n    False\n    >>> right_angle_triangle(3, 4, 11)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 12)\n    False\n    >>> right_angle_triangle(3, 4, 13)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 14)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 15)\n    False\n    >>> right_angle_triangle(3, 4, 16)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 17)\n    False\n    >>> right_angle_triangle(3, 4, 18)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 19)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 20)\n    False\n    >>> right_angle_triangle(3, 4, 21)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 22)\n    False\n    >>> right_angle_triangle(3, 4, 23)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 24)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 25)\n    False\n    >>> right_angle_triangle(3, 4, 26)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 27)\n    False\n    >>> right_angle_triangle(3, 4, 28)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 29)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 30)\n    False\n    >>> right_angle_triangle(3, 4, 31)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 32)\n    False\n    >>> right_angle_triangle(3, 4, 33)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 34)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 35)\n    False\n    >>> right_angle_triangle(3, 4, 36)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 37)\n    False\n    >>> right_angle_triangle(3, 4, 38)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 39)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 40)\n    False\n    >>> right_angle_triangle(3, 4, 41)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 42)\n    False\n    >>> right_angle_triangle(3, 4, 43)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 44)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 45)\n    False\n    >>> right_angle_triangle(3, 4, 46)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 47)\n    False\n    >>> right_angle_triangle(3, 4, 48)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 49)\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp5qtlr982.py\", line 9\n    >>> right_angle_triangle(3,\
    \ 4, 5)\n    ^^\nSyntaxError: invalid syntax\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input: a = 1, b = 2, c = 3\n  \
    \          Output: True\n            \"\"\"\n            Input: a = 1, b = 2,\
    \ c = 3\n            Output: False\n            \"\"\"\n    \"\"\"\n    if a ==\
    \ b and b == c:\n        return True\n    elif a == b or a == c:\n        return\
    \ True\n    elif b == c or b == a:\n        return True\n    else:\n        return\
    \ False\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n  \
    \  assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n\
    \    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n\
    \    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n\
    \    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) ==\
    \ True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10)\
    \ == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpph_xy515.py\", line 9\n    Input: a = 1, b = 2, c = 3\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input:\n            a =3\n    \
    \        b=2\n            c=4\n            Output:\n            True\n       \
    \     Input:\n            a=3\n            b=4\n            c=2\n            Output:\n\
    \            False\n            Input:\n            a=3\n            b=2\n   \
    \         c=4\n            Output:\n            False\n            Input:\n  \
    \          a=3\n            b=2\n            c=3\n            Output:\n      \
    \      False\n            Input:\n            a=3\n            b=2\n         \
    \   c=4\n            Output:\n            False\n            Input:\n        \
    \    a=3\n            b=4\n            c=2\n            Output:\n            False\n\
    \            Input:\n            a=3\n            b=4\n            c=3\n     \
    \       Output:\n            False\n            Input:\n            a=3\n    \
    \        b=4\n            c=4\n            Output:\n            False\n      \
    \      Input:\n            a=3\n            b=4\n            c=3\n           \
    \ Output:\n            False\n            Input:\n            a=3\n          \
    \  b=4\n            c=4\n            Output:\n            False\n            Input:\n\
    \            a=3\n            b=4\n            c=3\n            Output:\n    \
    \        False\n            Input:\n            a=3\n            b=4\n       \
    \     c=4\n            Output:\n            False\n            Input:\n      \
    \      a=3\n            b=4\n            c=3\n            Output:\n          \
    \  False\n            Input:\n            a=3\n            b=4\n            c=4\n\
    \            Output:\n            False\n            Input:\n            a=3\n\
    \            b=4\n            c=3\n            Output:\n            False\n  \
    \          Input:\n            a=3\n            b=4\n            c=4\n       \
    \     Output:\n            False\n            Input:\n            a=3\n      \
    \      b=4\n            c=3\n            Output:\n            False\n        \
    \    Input:\n            a=3\n            b=4\n            c=4\n            Output:\n\
    \            False\n            Input:\n            a=3\n            b=4\n   \
    \         c=3\n            Output:\n            False\n            Input:\n  \
    \          a=3\n            b=4\n            c=4\n            Output:\n      \
    \      False\n            Input:\n            a=3\n            b=4\n         \
    \   c=3\n            Output:\n            False\n            Input:\n        \
    \    a=3\n            b=4\n            c=4\n            Output:\n            False\n\
    \            Input:\n            a=3\n            b=4\n            c=3\n     \
    \       Output:\n            False\n            Input:\n            a=3\n    \
    \        b=4\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n \
    \   assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n\
    \    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n\
    \    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n\
    \    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) ==\
    \ True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10)\
    \ == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpl4q5p3ws.py\", line 9\n    Input:\nIndentationError: unexpected\
    \ indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input:\n            a =3\n    \
    \        b=4\n            c=5\n            Output:\n            True\n       \
    \     \"\"\"\n            \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert\
    \ candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert\
    \ candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert\
    \ candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert\
    \ candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n   \
    \ assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\
    \ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpkx7j1bav.py\", line 9\n    Input:\nIndentationError: unexpected\
    \ indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input:\n            a =3\n    \
    \        b=4\n            c=5\n            Output:\n            True\n       \
    \     \"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpziseho95.py\", line 9\n    Input:\nIndentationError: unexpected\
    \ indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input: a = 2, b = 4, c = 6\n  \
    \          Output: True\n            \"\"\"\n            Input: a = 2, b = 4,\
    \ c = 6\n            Output: False\n            \"\"\"\n            Input: a =\
    \ 2, b = 4, c = 6\n            Output: True\n            \"\"\"\n            Input:\
    \ a = 2, b = 4, c = 6\n            Output: True\n            \"\"\"\n        \
    \    Input: a = 2, b = 4, c = 6\n            Output: True\n            \"\"\"\n\
    \            Input: a = 2, b = 4, c = 6\n            Output: True\n          \
    \  \"\"\"\n            Input: a = 2, b = 4, c = 6\n            Output: True\n\
    \            \"\"\"\n            Input: a = 2, b = 4, c = 6\n            Output:\
    \ True\n            \"\"\"\n            Input: a = 2, b = 4, c = 6\n         \
    \   Output: True\n            \"\"\"\n            Input: a = 2, b = 4, c = 6\n\
    \            Output: True\n            \"\"\"\n            Input: a = 2, b = 4,\
    \ c = 6\n            Output: True\n            \"\"\"\n            Input: a =\
    \ 2, b = 4, c = 6\n            Output: True\n            \"\"\"\n            Input:\
    \ a = 2, b = 4, c = 6\n            Output: True\n            \"\"\"\n        \
    \    Input: a = 2, b = 4, c = 6\n            Output: True\n            \"\"\"\n\
    \            Input: a = 2, b = 4, c = 6\n            Output: True\n          \
    \  \"\"\"\n            Input: a = 2, b = 4, c = 6\n            Output: True\n\
    \            \"\"\"\n            Input: a = 2, b = 4, c = 6\n            Output:\
    \ True\n            \"\"\"\n            Input: a = 2, b = 4, c = 6\n         \
    \   Output: True\n            \"\"\"\n            Input: a = 2, b = 4, c = 6\n\
    \            Output: True\n            \"\"\"\n            Input: a = 2, b = 4,\
    \ c = 6\n            Output: True\n            \"\"\"\n            Input: a =\
    \ 2, b = 4, c = 6\n            Output: True\n            \"\"\"\n            Input:\
    \ a = 2, b = 4, c = 6\n            Output: True\n            \"\"\"\n        \
    \    Input: a = 2, b = 4, c = 6\n            Output: True\n            \"\"\"\n\
    \            Input: a = 2, b = 4, c = 6\n            Output: True\n          \
    \  \"\"\"\n            Input: a = 2, b = 4, c = 6\n            Output: True\n\
    \            \"\"\"\n            Input: a = 2, b = 4, c = 6\n            Output:\
    \ True\n            \"\"\"\n            Input: a = 2, b = 4, c = 6\n         \
    \   Output: True\n            \"\"\"\n            Input: a = 2, b = 4, c = 6\n\
    \            Output: True\n            \"\"\"\n            Input: a = 2, b = 4,\
    \ c = 6\n            Output: True\n            \"\"\"\n            Input: a =\
    \ 2, b = 4, c = 6\n            Output: True\n            \"\"\"\n            Input:\
    \ a = 2, b = 4, c = 6\n            Output: True\n            \"\"\"\n        \
    \    Input: a = 2, b = 4, c = 6\n            Output: True\n            \"\"\"\n\
    \ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpqn6zjq9i.py\", line 9\n    Input: a = 2, b = 4, c = 6\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input:\n            a =3\n    \
    \        b=4\n            c=5\n            Output:\n            True\n       \
    \     \"\"\"\n    \"\"\"\n    a, b, c = sorted([a, b, c])\n    if a + b > c and\
    \ b + c > a and c + a > b:\n        return True\n    else:\n        return False\n\
    \n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpupmz20he.py\", line 9\n    Input:\nIndentationError: unexpected\
    \ indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: 1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n    >>> right_angle_triangle(3, 4, 5)\n   \
    \ True\n    >>> right_angle_triangle(3, 4, 6)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 7)\n    False\n    >>> right_angle_triangle(3, 4, 8)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 9)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 10)\n    False\n    >>> right_angle_triangle(3, 4, 11)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 12)\n    False\n    >>> right_angle_triangle(3, 4, 13)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 14)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 15)\n    False\n    >>> right_angle_triangle(3, 4, 16)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 17)\n    False\n    >>> right_angle_triangle(3, 4, 18)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 19)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 20)\n    False\n    >>> right_angle_triangle(3, 4, 21)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 22)\n    False\n    >>> right_angle_triangle(3, 4, 23)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 24)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 25)\n    False\n    >>> right_angle_triangle(3, 4, 26)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 27)\n    False\n    >>> right_angle_triangle(3, 4, 28)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 29)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 30)\n    False\n    >>> right_angle_triangle(3, 4, 31)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 32)\n    False\n    >>> right_angle_triangle(3, 4, 33)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 34)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 35)\n    False\n    >>> right_angle_triangle(3, 4, 36)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 37)\n    False\n    >>> right_angle_triangle(3, 4, 38)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 39)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 40)\n    False\n    >>> right_angle_triangle(3, 4, 41)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 42)\n    False\n    >>> right_angle_triangle(3, 4, 43)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 44)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 45)\n    False\n    >>> right_angle_triangle(3, 4, 46)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 47)\n    False\n    >>> right_angle_triangle(3, 4, 48)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 49)\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp5qtlr982.py\", line 9\n    >>> right_angle_triangle(3,\
    \ 4, 5)\n    ^^\nSyntaxError: invalid syntax\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input:\n            a =3\n    \
    \        b = 2\n            c = 3\n            Output:\n            True\n   \
    \         \"\"\"\n    \"\"\"\n    a, b, c = sorted([a, b, c])\n    if a + b >\
    \ c and b + c > a and c + a > b:\n        return True\n    else:\n        return\
    \ False\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n  \
    \  assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n\
    \    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n\
    \    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n\
    \    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) ==\
    \ True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10)\
    \ == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpoli2107s.py\", line 9\n    Input:\nIndentationError: unexpected\
    \ indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input:\n            a =3\n    \
    \        b=4\n            c=5\n            Output:\n            True\n       \
    \     \"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpziseho95.py\", line 9\n    Input:\nIndentationError: unexpected\
    \ indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input:\n            a =3\n    \
    \        b=2\n            c=1\n            Output:\n            True\n       \
    \     \"\"\"\n    \"\"\"\n    a, b, c = sorted([a, b, c])\n    if a + b > c and\
    \ b + c > a and c + a > b:\n        return True\n    else:\n        return False\n\
    \n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpmhqqo1f2.py\", line 9\n    Input:\nIndentationError: unexpected\
    \ indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input:\n            a =3\n    \
    \        b=4\n            c=6\n            Output:\n            True\n       \
    \     \"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    def check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp7z8epkxx.py\", line 9\n    Input:\nIndentationError: unexpected\
    \ indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input:\n            a =3\n    \
    \        b = 2\n            c = 3\n            Output:\n            True\n   \
    \         \"\"\"\n    \"\"\"\n    a, b, c = sorted([a, b, c])\n    if a + b >\
    \ c and a + c > b and b + c > a:\n        return True\n    else:\n        return\
    \ False\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n  \
    \  assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n\
    \    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n\
    \    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n\
    \    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) ==\
    \ True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10)\
    \ == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpqfpg9i1h.py\", line 9\n    Input:\nIndentationError: unexpected\
    \ indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input:\n                    a =\
    \ 3\n                    b = 4\n                    c = 5\n            Output:\n\
    \                    True\n            \"\"\"\n    Args:\n        a (int, optional):\
    \ The length of the side a. Defaults to 3.\n        b (int, optional): The length\
    \ of the side b. Defaults to 4.\n        c (int, optional): The length of the\
    \ side c. Defaults to 5.\n\n    Returns:\n        bool: True if the triangle is\
    \ a right-angled triangle, False otherwise.\n    \"\"\"\n    if a + b > c and\
    \ b + c > a and c + a > b:\n        return True\n    else:\n        return False\n\
    \n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpbqqazyd2.py\", line 9\n    Input:\nIndentationError: unexpected\
    \ indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input:\n            a =3\n    \
    \        b=4\n            c=6\n            Output:\n            True\n       \
    \     Input:\n            a=4\n            b=3\n            c=6\n            Output:\n\
    \            False\n            Input:\n            a=6\n            b=3\n   \
    \         c=4\n            Output:\n            False\n            Input:\n  \
    \          a=6\n            b=4\n            c=3\n            Output:\n      \
    \      False\n            Input:\n            a=6\n            b=4\n         \
    \   c=6\n            Output:\n            True\n            \"\"\"\n    \"\"\"\
    \n    a, b, c = sorted([a, b, c])\n    if a + b > c and b + c > a and c + a >\
    \ b:\n        return True\n    else:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp2zqzsy2l.py\", line 9\n    Input:\nIndentationError: unexpected\
    \ indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input:\n            a =3\n    \
    \        b=4\n            c=5\n            Output:\n            True\n       \
    \     \"\"\"\n            \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert\
    \ candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert\
    \ candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert\
    \ candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert\
    \ candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n   \
    \ assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\
    \ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpkx7j1bav.py\", line 9\n    Input:\nIndentationError: unexpected\
    \ indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input:\n            a =3\n    \
    \        b=4\n            c=6\n            Output:\n            True\n       \
    \     Explanation:\n            Triangle ABC is right-angled.\n            \"\"\
    \"\n    \"\"\"\n    a, b, c = sorted([a, b, c])\n    if a + b > c and b + c >\
    \ a and c + a > b:\n        return True\n    else:\n        return False\n\n\n\
    def check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpc9gnhc0e.py\", line 9\n    Input:\nIndentationError: unexpected\
    \ indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input: a = 2, b = 2, c = 3\n  \
    \          Output: True\n            \"\"\"\n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpruz9trru.py\", line 9\n    Input: a = 2, b = 2, c = 3\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input:\n            a =3\n    \
    \        b = 2\n            c = 3\n            Output:\n            True\n   \
    \         \"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert\
    \ candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert\
    \ candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert\
    \ candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert\
    \ candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n   \
    \ assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\
    \ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpnsqcjklk.py\", line 9\n    Input:\nIndentationError: unexpected\
    \ indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input:\n            a : 3\n   \
    \         b : 4\n            c : 5\n            Output:\n            True\n  \
    \          \"\"\"\n    \"\"\"\n    a, b, c = sorted([a, b, c])\n    if a + b >\
    \ c and b + c > a and c + a > b:\n        return True\n    else:\n        return\
    \ False\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n  \
    \  assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n\
    \    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n\
    \    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n\
    \    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) ==\
    \ True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10)\
    \ == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpw90mwqvw.py\", line 9\n    Input:\nIndentationError: unexpected\
    \ indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input:\n            a =3\n    \
    \        b=4\n            c=5\n            Output:\n            True\n       \
    \     \"\"\"\n            \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert\
    \ candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert\
    \ candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert\
    \ candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert\
    \ candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n   \
    \ assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\
    \ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpkx7j1bav.py\", line 9\n    Input:\nIndentationError: unexpected\
    \ indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input: a = 2, b = 3, c = 3\n  \
    \          Output: True\n            Input: a = 2, b = 3, c = 0\n            Output:\
    \ False\n            Input: a = 2, b = 3, c = 1\n            Output: False\n \
    \           Input: a = 2, b = 3, c = 4\n            Output: True\n           \
    \ Input: a = 2, b = 3, c = 5\n            Output: True\n            Input: a =\
    \ 2, b = 3, c = 6\n            Output: True\n            Input: a = 2, b = 3,\
    \ c = 7\n            Output: True\n            Input: a = 2, b = 3, c = 8\n  \
    \          Output: True\n            Input: a = 2, b = 3, c = 9\n            Output:\
    \ True\n            Input: a = 2, b = 3, c = 10\n            Output: True\n  \
    \          Input: a = 2, b = 3, c = 11\n            Output: True\n           \
    \ Input: a = 2, b = 3, c = 12\n            Output: True\n            Input: a\
    \ = 2, b = 3, c = 13\n            Output: True\n            Input: a = 2, b =\
    \ 3, c = 14\n            Output: True\n            Input: a = 2, b = 3, c = 15\n\
    \            Output: True\n            Input: a = 2, b = 3, c = 16\n         \
    \   Output: True\n            Input: a = 2, b = 3, c = 17\n            Output:\
    \ True\n            Input: a = 2, b = 3, c = 18\n            Output: True\n  \
    \          Input: a = 2, b = 3, c = 19\n            Output: True\n           \
    \ Input: a = 2, b = 3, c = 20\n            Output: True\n            Input: a\
    \ = 2, b = 3, c = 21\n            Output: True\n            Input: a = 2, b =\
    \ 3, c = 22\n            Output: True\n            Input: a = 2, b = 3, c = 23\n\
    \            Output: True\n            Input: a = 2, b = 3, c = 24\n         \
    \   Output: True\n            Input: a = 2, b = 3, c = 25\n            Output:\
    \ True\n            Input: a = 2, b = 3, c = 26\n            Output: True\n  \
    \          Input: a = 2, b = 3, c = 27\n            Output: True\n           \
    \ Input: a = 2, b = 3, c = 28\n            Output: True\n            Input: a\
    \ = 2, b = 3, c = 29\n            Output: True\n            Input: a = 2, b =\
    \ 3, c = 30\n            Output: True\n            Input: a = 2, b = 3, c = 31\n\
    \            Output: True\n            Input: a = 2, b = 3, c = 32\n         \
    \   Output: True\n            Input: a = 2, b = 3, c = 33\n            Output:\
    \ True\n            Input: a = 2, b = 3, c = 34\n            Output: True\n  \
    \          Input: a = \ndef check(candidate):\n    assert candidate(3, 4, 5) ==\
    \ True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8)\
    \ == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24,\
    \ 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp1dbtv8pv.py\", line 9\n    Input: a = 2, b = 3, c = 3\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: 1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n    >>> right_angle_triangle(3, 4, 5)\n   \
    \ True\n    >>> right_angle_triangle(3, 4, 6)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 7)\n    False\n    >>> right_angle_triangle(3, 4, 8)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 9)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 10)\n    False\n    >>> right_angle_triangle(3, 4, 11)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 12)\n    False\n    >>> right_angle_triangle(3, 4, 13)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 14)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 15)\n    False\n    >>> right_angle_triangle(3, 4, 16)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 17)\n    False\n    >>> right_angle_triangle(3, 4, 18)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 19)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 20)\n    False\n    >>> right_angle_triangle(3, 4, 21)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 22)\n    False\n    >>> right_angle_triangle(3, 4, 23)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 24)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 25)\n    False\n    >>> right_angle_triangle(3, 4, 26)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 27)\n    False\n    >>> right_angle_triangle(3, 4, 28)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 29)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 30)\n    False\n    >>> right_angle_triangle(3, 4, 31)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 32)\n    False\n    >>> right_angle_triangle(3, 4, 33)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 34)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 35)\n    False\n    >>> right_angle_triangle(3, 4, 36)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 37)\n    False\n    >>> right_angle_triangle(3, 4, 38)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 39)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 40)\n    False\n    >>> right_angle_triangle(3, 4, 41)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 42)\n    False\n    >>> right_angle_triangle(3, 4, 43)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 44)\n    False\n    >>> right_angle_triangle(3, 4,\
    \ 45)\n    False\n    >>> right_angle_triangle(3, 4, 46)\n    False\n    >>> right_angle_triangle(3,\
    \ 4, 47)\n    False\n    >>> right_angle_triangle(3, 4, 48)\n    False\n    >>>\
    \ right_angle_triangle(3, 4, 49)\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp5qtlr982.py\", line 9\n    >>> right_angle_triangle(3,\
    \ 4, 5)\n    ^^\nSyntaxError: invalid syntax\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input:\n            a =3\n    \
    \        b=4\n            c=6\n            Output:\n            True\n       \
    \     \"\"\"\n    \"\"\"\n    a, b, c = sorted([a, b, c])\n    if a + b > c and\
    \ b + c > a and c + a > b:\n        return True\n    return False\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpkdbtbmgg.py\", line 9\n    Input:\nIndentationError: unexpected\
    \ indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input: a = 2, b = 3, c = 3\n  \
    \          Output: True\n            \"\"\"\n            Input: a = 2, b = 1,\
    \ c = 3\n            Output: False\n            \"\"\"\n            Input: a =\
    \ 2, b = 2, c = 3\n            Output: True\n            \"\"\"\n            Input:\
    \ a = 2, b = 2, c = 1\n            Output: False\n            \"\"\"\n       \
    \     Input: a = 2, b = 2, c = 2\n            Output: True\n            \"\"\"\
    \n            Input: a = 2, b = 2, c = 3\n            Output: True\n         \
    \   \"\"\"\n            Input: a = 2, b = 2, c = 4\n            Output: True\n\
    \            \"\"\"\n            Input: a = 2, b = 2, c = 5\n            Output:\
    \ True\n            \"\"\"\n            Input: a = 2, b = 2, c = 6\n         \
    \   Output: True\n            \"\"\"\n            Input: a = 2, b = 2, c = 7\n\
    \            Output: True\n            \"\"\"\n            Input: a = 2, b = 2,\
    \ c = 8\n            Output: True\n            \"\"\"\n            Input: a =\
    \ 2, b = 2, c = 9\n            Output: True\n            \"\"\"\n            Input:\
    \ a = 2, b = 2, c = 10\n            Output: True\n            \"\"\"\n       \
    \     Input: a = 2, b = 2, c = 11\n            Output: True\n            \"\"\"\
    \n            Input: a = 2, b = 2, c = 12\n            Output: True\n        \
    \    \"\"\"\n            Input: a = 2, b = 2, c = 13\n            Output: True\n\
    \            \"\"\"\n            Input: a = 2, b = 2, c = 14\n            Output:\
    \ True\n            \"\"\"\n            Input: a = 2, b = 2, c = 15\n        \
    \    Output: True\n            \"\"\"\n            Input: a = 2, b = 2, c = 16\n\
    \            Output: True\n            \"\"\"\n            Input: a = 2, b = 2,\
    \ c = 17\n            Output: True\n            \"\"\"\n            Input: a =\
    \ 2, b = 2, c = 18\n            Output: True\n            \"\"\"\n           \
    \ Input: a = 2, b = 2, c = 19\n            Output: True\n            \"\"\"\n\
    \            Input: a = 2, b = 2, c = 20\n            Output: True\n         \
    \   \"\"\"\n            Input: a = 2, b = 2, c = 21\n            Output: True\n\
    \            \"\"\"\n            Input: a = 2, b = 2, c = 22\n            Output:\
    \ True\n            \"\"\"\n            Input: a = 2, b = 2, c = 23\n        \
    \    Output: True\n            \"\"\"\n            Input: a = 2, b = 2, c = 24\n\
    \            Output: True\n            \"\"\"\n            Input: a = 2, b = 2,\
    \ c = 25\n            Output: True\n            \"\"\"\n            Input: a =\
    \ 2, b = 2, c = 26\n            Output: True\n            \"\"\"\n           \
    \ Input: a = 2, b = 2, c = 27\n            Output: True\n            \"\"\"\n\
    \            Input: a = 2, b = 2, c = 28\n            Output: True\n         \
    \   \"\"\"\n            Input: a = 2, b = 2, c = 29\n            Output: True\n\
    \            \"\"\"\n            \ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp0swv0b4n.py\", line 9\n    Input: a = 2, b = 3, c = 3\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input:\n            a =3\n    \
    \        b=4\n            c=6\n            Output:\n            True\n       \
    \     \"\"\"\n    \"\"\"\n    a, b, c = sorted([a, b, c])\n    if a == b and b\
    \ == c:\n        return True\n    elif a == b or a == c or b == c:\n        return\
    \ False\n    else:\n        angle = (a + b + c) / 2\n        if angle > 180:\n\
    \            angle = angle - 360\n        elif angle < -180:\n            angle\
    \ = angle + 360\n        if angle > 90:\n            angle = angle - 180\n   \
    \     elif angle < -90:\n            angle = angle + 180\n        if angle > 180:\n\
    \            angle = angle - 360\n        elif angle < -180:\n            angle\
    \ = angle + 360\n        if angle > 90:\n            angle = angle - 180\n   \
    \     elif angle < -90:\n            angle = angle + 180\n        if angle > 180:\n\
    \            angle = angle - 360\n        elif angle < -180:\n            angle\
    \ = angle + 360\n        if angle > 90:\n            angle = angle - 180\n   \
    \     elif angle < -90:\n            angle = angle + 180\n        if angle > 180:\n\
    \            angle = angle - 360\n        elif angle < -180:\n            angle\
    \ = angle + 360\n        if angle > 90:\n            angle = angle - 180\n   \
    \     elif angle < -90:\n            angle = angle + 180\n        if angle > 180:\n\
    \            angle = angle - 360\n        elif angle < -180:\n            angle\
    \ = angle + 360\n        if angle > 90:\n            angle = angle - 180\n   \
    \     elif angle < -90:\n            angle = angle + 180\n        if angle > 180:\n\
    \            angle = angle - 360\n        elif angle < -180:\n            angle\
    \ = angle + 360\n        if angle > 90:\n            angle = angle - 180\n   \
    \     elif angle < -90:\n            angle = angle + 180\n        if angle > 180:\n\
    \            angle = angle - 360\n        elif angle < -180:\n            angle\
    \ = angle + 360\n        if angle > 90:\n            angle = angle - 180\n   \
    \     elif angle < -90:\n            angle = angle + 180\n        if angle > 180:\n\
    \            angle = angle - 360\n        elif angle < -180:\n            angle\
    \ = angle + 360\n        if angle > 90:\n            angle = angle - 180\n   \
    \     elif angle < -90:\n            angle = angle + 180\n        if angle > 180:\n\
    \            angle = angle - 360\n        elif angle < -180:\n            angle\
    \ = angle + 360\n        if angle > 90:\n            angle = angle - 180\n   \
    \     elif angle < -90:\n            angle = angle + 180\n        if angle > 180:\n\
    \            angle = angle - \ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpmc9o1lah.py\", line 9\n    Input:\nIndentationError: unexpected\
    \ indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input:\n            a : 5\n   \
    \         b : 3\n            c : 4\n            Output:\n            True\n  \
    \          \"\"\"\n    \"\"\"\n    \n    if a == b == c:\n        return True\n\
    \    elif a > b > c:\n        return False\n    elif a > c > b:\n        return\
    \ False\n    else:\n        return True\n    \ndef check(candidate):\n    assert\
    \ candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert\
    \ candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert\
    \ candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert\
    \ candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert\
    \ candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert\
    \ candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp7p9isi7k.py\", line 9\n    Input:\nIndentationError: unexpected\
    \ indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input:\n            a =3\n    \
    \        b=4\n            c=5\n            Output:\n            True\n       \
    \     \"\"\"\n            \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n \
    \   \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n\
    \    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\
    \"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n\
    \    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n\
    \    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n\
    \    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\
    \"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n\
    \    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n\
    \    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n\
    \    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\
    \"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n\
    \    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n\
    \    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n\
    \    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\
    \"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n\
    \    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n\
    \    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n\
    \    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\
    \"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n\
    \    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n\
    \    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n\
    \    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\
    \"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n\
    \    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n\
    \    \n    \"\"\"\n    \n\ndef check(candidate):\n    assert candidate(3, 4, 5)\
    \ == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6,\
    \ 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpucfrp1kv.py\", line 9\n    Input:\nIndentationError: unexpected\
    \ indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input:\n                    a =\
    \ 3\n                    b = 1\n                    c = 2\n            Output:\n\
    \                    True\n            \"\"\"\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp83buczok.py\", line 9\n    Input:\nIndentationError: unexpected\
    \ indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input:\n            a =3\n    \
    \        b=4\n            c=5\n            Output:\n            True\n       \
    \     \"\"\"\n    \"\"\"\n    a, b, c = sorted([a, b, c])\n    if a == b and b\
    \ == c:\n        return True\n    elif a == b or a == c:\n        return False\n\
    \    elif b == c or b == a:\n        return False\n    else:\n        return True\n\
    \n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpc6j4smle.py\", line 9\n    Input:\nIndentationError: unexpected\
    \ indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input:\n            a =3\n    \
    \        b=4\n            c=5\n            Output:\n            True\n       \
    \     \"\"\"\n    \"\"\"\n    if a == b and b == c:\n        return True\n   \
    \ elif a == b or a == c:\n        return True\n    elif b == c or b == a:\n  \
    \      return True\n    else:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpzo7drqwx.py\", line 9\n    Input:\nIndentationError: unexpected\
    \ indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input:\n            a =3\n    \
    \        b=4\n            c=5\n            Output:\n            True\n       \
    \     \"\"\"\n            \n    \"\"\"\n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n\
    \    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n\
    \    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n\
    \    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n\
    \    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) ==\
    \ True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10)\
    \ == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpzthegh6n.py\", line 9\n    Input:\nIndentationError: unexpected\
    \ indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input:\n            a =3\n    \
    \        b=4\n            c=6\n            Output:\n            True\n       \
    \     \"\"\"\n    \"\"\"\n    a, b, c = sorted([a, b, c])\n    if a + b > c and\
    \ b + c > a and c + a > b:\n        return True\n    else:\n        return False\n\
    \n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpkt7ykloe.py\", line 9\n    Input:\nIndentationError: unexpected\
    \ indent\n"
  stdout: ''
  timestamp: 1659976866
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n            \"\"\"\n            Input: a = 1, b = 2, c = 3\n  \
    \          Output: True\n            \"\"\"\n            Input: a = 1, b = 2,\
    \ c = 0\n            Output: False\n            \"\"\"\n            Input: a =\
    \ 0, b = 3, c = 2\n            Output: False\n            \"\"\"\n           \
    \ Input: a = 0, b = 0, c = 0\n            Output: True\n            \"\"\"\n \
    \           Input: a = 0, b = 0, c = 1\n            Output: True\n           \
    \ \"\"\"\n            Input: a = 0, b = 0, c = 2\n            Output: True\n \
    \           \"\"\"\n            Input: a = 0, b = 0, c = 3\n            Output:\
    \ True\n            \"\"\"\n            Input: a = 0, b = 1, c = 2\n         \
    \   Output: True\n            \"\"\"\n            Input: a = 0, b = 1, c = 3\n\
    \            Output: True\n            \"\"\"\n            Input: a = 0, b = 2,\
    \ c = 3\n            Output: True\n            \"\"\"\n            Input: a =\
    \ 0, b = 2, c = 1\n            Output: True\n            \"\"\"\n            Input:\
    \ a = 0, b = 2, c = 2\n            Output: True\n            \"\"\"\n        \
    \    Input: a = 0, b = 2, c = 3\n            Output: True\n            \"\"\"\n\
    \            Input: a = 0, b = 3, c = 2\n            Output: True\n          \
    \  \"\"\"\n            Input: a = 0, b = 3, c = 1\n            Output: True\n\
    \            \"\"\"\n            Input: a = 0, b = 3, c = 2\n            Output:\
    \ True\n            \"\"\"\n            Input: a = 0, b = 3, c = 3\n         \
    \   Output: True\n            \"\"\"\n            Input: a = 1, b = 2, c = 3\n\
    \            Output: True\n            \"\"\"\n            Input: a = 1, b = 2,\
    \ c = 1\n            Output: True\n            \"\"\"\n            Input: a =\
    \ 1, b = 2, c = 2\n            Output: True\n            \"\"\"\n            Input:\
    \ a = 1, b = 2, c = 3\n            Output: True\n            \"\"\"\n        \
    \    Input: a = 1, b = 3, c = 2\n            Output: True\n            \"\"\"\n\
    \            Input: a = 1, b = 3, c = 1\n            Output: True\n          \
    \  \"\"\"\n            Input: a = 1, b = 3, c = 2\n            Output: True\n\
    \            \"\"\"\n            Input: a = 1, b = 3, c = 3\n            Output:\
    \ True\n            \"\"\"\n            Input: a = 2, b = 1, c = 3\n         \
    \   Output: True\n            \"\"\"\n            Input: a = 2, b = 1, c = 2\n\
    \            Output: True\n            \"\"\"\n            Input: a = 2, b = 1,\
    \ c = 3\n            Output: True\n            \"\"\"\n            Input: a =\
    \ 2, b = 2, c = 3\n            Output: True\n            \"\"\"\n            Input:\
    \ a = 2, b = 2, c = 1\n            Output: True\n            \"\"\"\n        \
    \    Input: a = 2, b = 2, c = 2\n            Output: True\n            \"\"\"\n\
    \            Input: a = 2, b = 2, c = 3\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp4bh1jk6m.py\", line 9\n    Input: a = 1, b = 2, c = 3\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659976866
