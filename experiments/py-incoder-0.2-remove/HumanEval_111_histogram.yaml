name: HumanEval_111_histogram
language: py
prompt: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
  \    \"\"\"Given a string representing a space separated lowercase letters, return\
  \ a dictionary\n    of the letter with the most repetition and containing the corresponding\
  \ count.\n    If several letters have the same occurrence, return all of them.\n\
  \    \n    Example:\n                    \n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate('a b b a') == { 'a': 2, 'b': 2\
  \ }\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
  \ b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r\
  \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b':\
  \ 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('')\
  \ == {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
  \ntest_check()\n"
completions: ["    \n    histogram = {}\n    \n    for letter in test:\n        if\
    \ letter in histogram:\n            histogram[letter] += 1\n        else:\n  \
    \          histogram[letter] = 1\n    \n    return histogram\n    ", "    \n \
    \   letters = test.split()\n    counts = {}\n    for letter in letters:\n    \
    \    if letter in counts:\n            counts[letter] += 1\n        else:\n  \
    \          counts[letter] = 1\n    return counts\n</cell>\n<cell>\nhistogram(\"\
    a b c d e f g h i j k l m n o p q r s t u v w x y z\")\n</cell>\n<cell>\nhistogram(\"\
    a b c d e f g h i j k l m n o p q r s t u v w x y z a\")\n</cell>\n<cell>\nhistogram(\"\
    a b c d e f g h i j k l m n o p q r s t u v w x y z b a\")\n</cell>\n<cell>\n\
    histogram(\"a b c d e f g h i j k l m n o p q r s t u v w x y z b c a\")\n</cell>\n\
    <cell>\nhistogram(\"a b c d e f g h i j k l m n o p q r s t u v w x y z b c d\
    \ a\")\n</cell>\n<cell>\nhistogram(\"a b c d e f g h i j k l m n o p q r s t u\
    \ v w x y z b c d e a\")\n</cell>\n<cell>\nhistogram(\"a b c d e f g h i j k l\
    \ m n o p q r s t u v w x y z b c d e f a\")\n</cell>\n<cell>\nhistogram(\"a b\
    \ c d e f g h i j k l m n o p q r s t u v w x y z b c d e f g a\")\n</cell>\n\
    <cell>\nhistogram(\"a b c d e f g h i j k l m n o p q r s t u v w x y z b c d\
    \ e f g h a\")\n</cell>\n<cell>\nhistogram(\"a b c d e f g h i j k l m n o p q\
    \ r s t u v w x y z b c d e f g h i a\")\n</cell>\n<cell>\nhistogram(\"a b c d\
    \ e f g h i j k l m n o p q r s t u v w x y z b c d e f g h i j a\")\n</cell>\n\
    <cell>", "    \n    letters = test.split()\n    counts = {}\n    for letter in\
    \ letters:\n        if letter in counts:\n            counts[letter] += 1\n  \
    \      else:\n            counts[letter] = 1\n    return counts\n", "    \n  \
    \  histogram = {}\n    \n    for letter in test:\n        if letter in histogram:\n\
    \            histogram[letter] += 1\n        else:\n            histogram[letter]\
    \ = 1\n    \n    return histogram\n</cell>\n<cell>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<cell>\nhistogram(\"abracadabra\")\n</cell>\n<cell>\nhistogram(\"\
    abracadabra\")\n</cell>\n<cell>\nhistogram(\"abracadabra\")\n</cell>\n<cell>\n\
    histogram(\"abracadabra\")\n</cell>\n<cell>\nhistogram(\"abracadabra\")\n</cell>\n\
    <cell>\nhistogram(\"abracadabra\")\n</cell>\n<cell>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<cell>\nhistogram(\"abracadabra\")\n</cell>\n<cell>\nhistogram(\"\
    abracadabra\")\n</cell>\n<cell>\nhistogram(\"abracadabra\")\n</cell>\n<cell>\n\
    histogram(\"abracadabra\")\n</cell>\n<cell>\nhistogram(\"abracadabra\")\n</cell>\n\
    <cell>\nhistogram(\"abracadabra\")\n</cell>\n<cell>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<cell>\nhistogram(\"abracadabra\")\n</cell>\n<cell>\nhistogram(\"\
    abracadabra\")\n</cell>\n<cell>\nhistogram(\"abracadabra\")\n</cell>\n<cell>\n\
    histogram(\"abracadabra\")\n</cell>\n<cell>\nhistogram(\"abracadabra\")\n</cell>\n\
    <cell>\nhistogram(\"abracadabra\")\n</cell>\n<cell>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<cell>\nhistogram(\"abracadabra\")\n</cell>\n<cell>\nhistogram(\"\
    abracadabra\")\n</cell>\n<cell>\nhistogram(\"abracadabra\")\n</cell>\n<cell>\n\
    histogram(\"abracadabra\")\n</cell>\n<cell>\nhistogram(\"abracadabra\")\n</cell>\n\
    <cell>\nhistogram(\"abracadabra", "    \n    letters = test.split()\n    \n  \
    \  letters_count = {}\n    \n    for letter in letters:\n        if letter in\
    \ letters_count:\n            letters_count[letter] += 1\n        else:\n    \
    \        letters_count[letter] = 1\n    \n    return letters_count\n</cell>\n\
    <cell>\nhistogram(\"a b c d e f g h i j k l m n o p q r s t u v w x y z\")\n</cell>\n\
    <cell>\nhistogram(\"a b c d e f g h i j k l m n o p q r s t u v w x y z\")\n</cell>\n\
    <cell>\nhistogram(\"a b c d e f g h i j k l m n o p q r s t u v w x y z\")\n</cell>\n\
    <cell>\nhistogram(\"a b c d e f g h i j k l m n o p q r s t u v w x y z\")\n</cell>\n\
    <cell>\nhistogram(\"a b c d e f g h i j k l m n o p q r s t u v w x y z\")\n</cell>\n\
    <cell>\nhistogram(\"a b c d e f g h i j k l m n o p q r s t u v w x y z\")\n</cell>\n\
    <cell>\nhistogram(\"a b c d e f g h i j k l m n o p q r s t u v w x y z\")\n</cell>\n\
    <cell>\nhistogram(\"a b c d e f g h i j k l m n o p q r s t u v w x y z\")\n</cell>\n\
    <cell>\nhistogram(\"a b c d e f g h i j k l m n o p q r s t u v w x y z\")\n</cell>\n\
    <cell>\nhistogram(\"a b c d e f g h i j k l m n o p q r s t u v w x y z\")\n</cell>\n\
    <cell>\nhistogram(\"a b c d e f g h i j k l m n o p q r s t u v w x y z\")\n</cell>\n\
    <cell>\nhistogram(\"a b c d e f g h i j k l m n o p q r s t u v w x y z\")\n",
  "    \n    histogram = {}\n    \n    for letter in test:\n        if letter in histogram:\n\
    \            histogram[letter] += 1\n        else:\n            histogram[letter]\
    \ = 1\n    \n    return histogram\n", "    \n    letters = {}\n    \n    for letter\
    \ in test:\n        if letter in letters:\n            letters[letter] += 1\n\
    \        else:\n            letters[letter] = 1\n    \n    return letters\n</cell>\n\
    <cell>\nhistogram(\"abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc ", "    letters = test.split()\n    letters\
    \ = list(map(lambda x: x.lower(), letters))\n    letters = list(set(letters))\n\
    \    letters.sort()\n    letters = list(map(lambda x: letters.count(x), letters))\n\
    \    letters.sort(reverse=True)\n    letters = list(map(lambda x: letters.count(x),\
    \ letters))\n    letters.sort(reverse=True)\n    letters = list(map(lambda x:\
    \ letters.count(x), letters))\n    letters.sort(reverse=True)\n    letters = list(map(lambda\
    \ x: letters.count(x), letters))\n    letters.sort(reverse=True)\n    letters\
    \ = list(map(lambda x: letters.count(x), letters))\n    letters.sort(reverse=True)\n\
    \    letters = list(map(lambda x: letters.count(x), letters))\n    letters.sort(reverse=True)\n\
    \    letters = list(map(lambda x: letters.count(x), letters))\n    letters.sort(reverse=True)\n\
    \    letters = list(map(lambda x: letters.count(x), letters))\n    letters.sort(reverse=True)\n\
    \    letters = list(map(lambda x: letters.count(x), letters))\n    letters.sort(reverse=True)\n\
    \    letters = list(map(lambda x: letters.count(x), letters))\n    letters.sort(reverse=True)\n\
    \    letters = list(map(lambda x: letters.count(x), letters))\n    letters.sort(reverse=True)\n\
    \    letters = list(map(lambda x: letters.count(x), letters))\n    letters.sort(reverse=True)\n\
    \    letters = list(map(lambda x: letters.count(x), letters))\n    letters.sort(reverse=True)\n\
    \    letters = list(map(lambda x: letters.count(x), letters))\n    letters.sort(reverse=True)\n\
    \    letters = list(map(lambda x: letters.count(x), letters))\n    letters.sort(reverse=True)\n\
    \    letters = list(map(lambda x: letters.count(x), letters))\n    letters.sort(reverse=True)\n\
    \    letters = list(map(lambda x: letters.count(x), letters))\n    letters.sort(reverse=True)\n\
    \    letters = list(map(lambda x: letters.count(x), letters))\n    letters.sort(reverse=True)\n\
    \    letters = list(map(lambda x: letters.count(x), letters))\n    letters.sort(reverse=True)\n\
    \    letters = list(map(lambda x: letters.count(x), letters))\n    letters.sort(reverse=True)\n\
    \    letters = list(map(lambda x: letters.count(x), letters))\n    letters.sort(reverse=True)\n\
    \    letters = list(map(lambda x: letters.count(x), letters))\n    letters.sort(reverse=True)\n\
    \    letters = list(map(lambda x: letters.count(x), letters))\n    letters.sort(reverse=True)\n\
    \    letters = list(map(lambda x: letters.count(x), letters))\n    letters.sort(reverse=True)\n\
    \    letters = list(map(lambda x: letters.count(x), letters))\n    letters.sort(reverse=True)\n\
    \    letters = list(map(lambda x: letters.count(x), letters))\n    letters.sort(reverse=True)\n\
    \    letters = list(map(lambda x: letters.count(x), letters))\n    letters.sort(reverse=True)\n\
    \    letters = list(map(lambda x: letters.count(x), letters))\n    letters.sort(reverse=True)\n\
    \    letters = list(map(lambda x: letters.count(x), ", "    \n    letters = test.split()\n\
    \    letters_count = Counter(letters)\n    \n    return letters_count\n</cell>\n\
    <cell>\nhistogram(\"a b c a b c a b c\")\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that takes a string and returns the number of words in the string.\n\
    \n\n</text>\n<cell>", "    \n    letters = test.split()\n    letters_count = dict()\n\
    \    for letter in letters:\n        if letter in letters_count:\n           \
    \ letters_count[letter] += 1\n        else:\n            letters_count[letter]\
    \ = 1\n    return letters_count\n", "    \n    letters = test.split()\n    counts\
    \ = {}\n    for letter in letters:\n        if letter in counts:\n           \
    \ counts[letter] += 1\n        else:\n            counts[letter] = 1\n    return\
    \ counts\n</cell>\n<cell>\nhistogram(\"a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a ", "    \n    letters = test.lower().split()\n\
    \    letters_count = {}\n    \n    for letter in letters:\n        if letter in\
    \ letters_count:\n            letters_count[letter] += 1\n        else:\n    \
    \        letters_count[letter] = 1\n    \n    return letters_count\n</cell>\n\
    <cell>\nhistogram('a b c d e f g h i j k l m n o p q r s t u v w x y z')\n</cell>\n\
    <cell>", "    \n    histogram = {}\n    \n    for letter in test:\n        if\
    \ letter in histogram:\n            histogram[letter] += 1\n        else:\n  \
    \          histogram[letter] = 1\n            \n    return histogram\n", "   \
    \ \n    histogram = {}\n    \n    letters = test.split()\n    \n    for letter\
    \ in letters:\n        if letter in histogram:\n            histogram[letter]\
    \ += 1\n        else:\n            histogram[letter] = 1\n    \n    return histogram\n",
  "    \n    letters = test.split()\n    letters = list(set(letters))\n    letters.sort()\n\
    \    \n    counts = {}\n    for letter in letters:\n        counts[letter] = 0\n\
    \    \n    for letter in letters:\n        counts[letter] += 1\n    \n    return\
    \ counts\n", "    \n    histogram = {}\n    \n    for letter in test:\n      \
    \  if letter in histogram:\n            histogram[letter] += 1\n        else:\n\
    \            histogram[letter] = 1\n    \n    return histogram\n</cell>\n<cell>\n\
    histogram(\"abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc ", "    letters = test.split()\n    letters_count =\
    \ {}\n    for letter in letters:\n        if letter in letters_count:\n      \
    \      letters_count[letter] += 1\n        else:\n            letters_count[letter]\
    \ = 1\n    return letters_count\n", "    \n    letters = test.split()\n    letters\
    \ = list(map(lambda x: x.lower(), letters))\n    \n    counts = {}\n    for letter\
    \ in letters:\n        if letter in counts:\n            counts[letter] += 1\n\
    \        else:\n            counts[letter] = 1\n    \n    return counts\n</cell>\n\
    <cell>\nhistogram(\"a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b ",
  "    \n    histogram = {}\n    \n    for letter in test:\n        if letter in histogram:\n\
    \            histogram[letter] += 1\n        else:\n            histogram[letter]\
    \ = 1\n    \n    return histogram\n", "    \n    letters = test.lower().split()\n\
    \    letter_dict = {}\n    \n    for letter in letters:\n        if letter in\
    \ letter_dict:\n            letter_dict[letter] += 1\n        else:\n        \
    \    letter_dict[letter] = 1\n    \n    return letter_dict\n</cell>\n<cell>\n\
    histogram(\"a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c ", "    \n    letters = test.split()\n    \n    counts = {}\n    \n    for\
    \ letter in letters:\n        if letter in counts:\n            counts[letter]\
    \ += 1\n        else:\n            counts[letter] = 1\n    \n    return counts\n",
  "    \n    letters = test.lower().split()\n    counts = {}\n    for letter in letters:\n\
    \        if letter in counts:\n            counts[letter] += 1\n        else:\n\
    \            counts[letter] = 1\n    return counts\n</cell>\n<cell>\nhistogram(\"\
    a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c ", "    letters = test.split()\n    counts = {}\n    for letter in letters:\n\
    \        if letter in counts:\n            counts[letter] += 1\n        else:\n\
    \            counts[letter] = 1\n    return counts\n", "    letters = test.split()\n\
    \    counts = {}\n    for letter in letters:\n        if letter in counts:\n \
    \           counts[letter] += 1\n        else:\n            counts[letter] = 1\n\
    \    return counts\n", "    \n    histogram = {}\n    \n    letters = test.split()\n\
    \    \n    for letter in letters:\n        if letter in histogram:\n         \
    \   histogram[letter] += 1\n        else:\n            histogram[letter] = 1\n\
    \    \n    return histogram\n", "    \n    letters = test.split()\n    letters_count\
    \ = {}\n    \n    for letter in letters:\n        if letter in letters_count:\n\
    \            letters_count[letter] += 1\n        else:\n            letters_count[letter]\
    \ = 1\n    \n    return letters_count\n</cell>\n<cell>\nhistogram('a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a ", "    \n    letters = test.split()\n\
    \    letters_count = Counter(letters)\n    letters_count.most_common()\n    \n\
    \    return letters_count\n", "    letters = test.split()\n    letters_count =\
    \ Counter(letters)\n    most_frequent_letter = letters_count.most_common(1)[0][0]\n\
    \    most_frequent_count = letters_count[most_frequent_letter]\n    \n    return\
    \ {\"most_frequent_letter\": most_frequent_letter, \"most_frequent_count\": most_frequent_count}\n\
    </cell>\n<cell>\nhistogram(\"a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c ", "    \n    letters\
    \ = test.lower().split()\n    \n    counts = {}\n    \n    for letter in letters:\n\
    \        if letter in counts:\n            counts[letter] += 1\n        else:\n\
    \            counts[letter] = 1\n    \n    return counts\n</cell>\n<cell>\nhistogram(\"\
    a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c ", "   \
    \ \n    histogram = {}\n    \n    for letter in test:\n        if letter in histogram:\n\
    \            histogram[letter] += 1\n        else:\n            histogram[letter]\
    \ = 1\n    \n    return histogram\n", "    letters = test.split()\n    counts\
    \ = {}\n    for letter in letters:\n        if letter in counts:\n           \
    \ counts[letter] += 1\n        else:\n            counts[letter] = 1\n    return\
    \ counts\n", "    \n    histogram = {}\n    \n    for letter in test:\n      \
    \  if letter in histogram:\n            histogram[letter] += 1\n        else:\n\
    \            histogram[letter] = 1\n    \n    return histogram\n</cell>\n<cell>\n\
    histogram(\"abracadabra\")\n</cell>\n<cell>\nhistogram(\"abracadabra\")\n</cell>\n\
    <cell>\nhistogram(\"abracadabra\")\n</cell>\n<cell>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<cell>\nhistogram(\"abracadabra\")\n</cell>\n<cell>\nhistogram(\"\
    abracadabra\")\n</cell>\n<cell>\nhistogram(\"abracadabra\")\n</cell>\n<cell>\n\
    histogram(\"abracadabra\")\n</cell>\n<cell>\nhistogram(\"abracadabra\")\n</cell>\n\
    <cell>\nhistogram(\"abracadabra\")\n</cell>\n<cell>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<cell>\nhistogram(\"abracadabra\")\n</cell>\n<cell>\nhistogram(\"\
    abracadabra\")\n</cell>\n<cell>\nhistogram(\"abracadabra\")\n</cell>\n<cell>\n\
    histogram(\"abracadabra\")\n</cell>\n<cell>\nhistogram(\"abracadabra\")\n</cell>\n\
    <cell>\nhistogram(\"abracadabra\")\n</cell>\n<cell>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<cell>\nhistogram(\"abracadabra\")\n</cell>\n<cell>\nhistogram(\"\
    abracadabra\")\n</cell>\n<cell>\nhistogram(\"abracadabra\")\n</cell>\n<cell>\n\
    histogram(\"abracadabra\")\n</cell>\n<cell>\nhistogram(\"abracadabra\")\n</cell>\n\
    <cell>\nhistogram(\"abracadabra\")\n</cell>\n<cell>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<cell>\nhistogram(\"abracadabra\")\n</cell>\n<cell>\nhistogram(\"\
    abracadabra\")\n</cell>\n<cell>\nhistogram(\"abracadabra", "    \n    histogram\
    \ = {}\n    \n    for letter in test:\n        if letter in histogram:\n     \
    \       histogram[letter] += 1\n        else:\n            histogram[letter] =\
    \ 1\n    \n    return histogram\n", "    \n    letters = test.split()\n    letters\
    \ = list(set(letters))\n    letters.sort()\n    \n    counts = {}\n    for letter\
    \ in letters:\n        counts[letter] = letters.count(letter)\n    \n    return\
    \ counts\n</cell>\n<cell>\nhistogram(\"a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b ", "    \n    letters = test.split()\n   \
    \ letters = list(map(lambda x: x.lower(), letters))\n    letters = list(set(letters))\n\
    \    letters.sort()\n    letters = list(map(lambda x: x.lower(), letters))\n \
    \   letters = list(map(lambda x: x.lower(), letters))\n    letters = list(map(lambda\
    \ x: x.lower(), letters))\n    letters = list(map(lambda x: x.lower(), letters))\n\
    \    letters = list(map(lambda x: x.lower(), letters))\n    letters = list(map(lambda\
    \ x: x.lower(), letters))\n    letters = list(map(lambda x: x.lower(), letters))\n\
    \    letters = list(map(lambda x: x.lower(), letters))\n    letters = list(map(lambda\
    \ x: x.lower(), letters))\n    letters = list(map(lambda x: x.lower(), letters))\n\
    \    letters = list(map(lambda x: x.lower(), letters))\n    letters = list(map(lambda\
    \ x: x.lower(), letters))\n    letters = list(map(lambda x: x.lower(), letters))\n\
    \    letters = list(map(lambda x: x.lower(), letters))\n    letters = list(map(lambda\
    \ x: x.lower(), letters))\n    letters = list(map(lambda x: x.lower(), letters))\n\
    \    letters = list(map(lambda x: x.lower(), letters))\n    letters = list(map(lambda\
    \ x: x.lower(), letters))\n    letters = list(map(lambda x: x.lower(), letters))\n\
    \    letters = list(map(lambda x: x.lower(), letters))\n    letters = list(map(lambda\
    \ x: x.lower(), letters))\n    letters = list(map(lambda x: x.lower(), letters))\n\
    \    letters = list(map(lambda x: x.lower(), letters))\n    letters = list(map(lambda\
    \ x: x.lower(), letters))\n    letters = list(map(lambda x: x.lower(), letters))\n\
    \    letters = list(map(lambda x: x.lower(), letters))\n    letters = list(map(lambda\
    \ x: x.lower(), letters))\n    letters = list(map(lambda x: x.lower(), letters))\n\
    \    letters = list(map(lambda x: x.lower(), letters))\n    letters = list(map(lambda\
    \ x: x.lower(), letters))\n    letters = list(map(lambda x: x.lower(), letters))\n\
    \    letters = list(map(lambda x: x.lower(), letters))\n    letters = list(map(lambda\
    \ x: x.lower(), letters))\n    letters = list(map(lambda x: x.lower(), letters))\n\
    \    letters = list(map(lambda x: x.lower(), letters))\n    letters = list(map(lambda\
    \ x: x.lower(), letters))\n    letters = list(map(lambda x: x.lower(), letters))\n\
    \    letters = list(map(lambda x: x.lower(), letters))\n    letters = list(map(lambda\
    \ x: x.lower(), letters))\n    letters = list(map(lambda x: x.lower(), letters))\n\
    \    letters = list(map(lambda x: x.lower(), letters))\n    letters = list(map(lambda\
    \ x: x.lower(), letters))\n    letters = list(map(lambda x: x.lower(), letters))\n\
    \    letters = list(map(lambda x: x.lower(), letters))\n    letters = list(map(lambda\
    \ x: x.lower(), letters))\n    letters = list(map(lambda x: x.lower(), letters))\n\
    \    letters = list(map(lambda x: x.lower(), letters))\n    letters = list(map(lambda\
    \ x: x.lower(), letters))\n    letters = list(", "    \n    letters = test.split()\n\
    \    \n    histogram = {}\n    \n    for letter in letters:\n        if letter\
    \ in histogram:\n            histogram[letter] += 1\n        else:\n         \
    \   histogram[letter] = 1\n    \n    return histogram\n", "    \n    histogram\
    \ = {}\n    \n    for letter in test:\n        if letter in histogram:\n     \
    \       histogram[letter] += 1\n        else:\n            histogram[letter] =\
    \ 1\n    \n    return histogram\n", "    \n    letters = test.split()\n    letters\
    \ = list(letters)\n    letters.sort(key=lambda x: len(x), reverse=True)\n    letters\
    \ = list(letters)\n    letters.sort(key=lambda x: letters.count(x), reverse=True)\n\
    \    letters = list(letters)\n    letters.sort(key=lambda x: letters.count(x),\
    \ reverse=True)\n    letters = list(letters)\n    letters.sort(key=lambda x: letters.count(x),\
    \ reverse=True)\n    letters = list(letters)\n    letters.sort(key=lambda x: letters.count(x),\
    \ reverse=True)\n    letters = list(letters)\n    letters.sort(key=lambda x: letters.count(x),\
    \ reverse=True)\n    letters = list(letters)\n    letters.sort(key=lambda x: letters.count(x),\
    \ reverse=True)\n    letters = list(letters)\n    letters.sort(key=lambda x: letters.count(x),\
    \ reverse=True)\n    letters = list(letters)\n    letters.sort(key=lambda x: letters.count(x),\
    \ reverse=True)\n    letters = list(letters)\n    letters.sort(key=lambda x: letters.count(x),\
    \ reverse=True)\n    letters = list(letters)\n    letters.sort(key=lambda x: letters.count(x),\
    \ reverse=True)\n    letters = list(letters)\n    letters.sort(key=lambda x: letters.count(x),\
    \ reverse=True)\n    letters = list(letters)\n    letters.sort(key=lambda x: letters.count(x),\
    \ reverse=True)\n    letters = list(letters)\n    letters.sort(key=lambda x: letters.count(x),\
    \ reverse=True)\n    letters = list(letters)\n    letters.sort(key=lambda x: letters.count(x),\
    \ reverse=True)\n    letters = list(letters)\n    letters.sort(key=lambda x: letters.count(x),\
    \ reverse=True)\n    letters = list(letters)\n    letters.sort(key=lambda x: letters.count(x),\
    \ reverse=True)\n    letters = list(letters)\n    letters.sort(key=lambda x: letters.count(x),\
    \ reverse=True)\n    letters = list(letters)\n    letters.sort(key=lambda x: letters.count(x),\
    \ reverse=True)\n    letters = list(letters)\n    letters.sort(key=lambda x: letters.count(x),\
    \ reverse=True)\n    letters = list(letters)\n    letters.sort(key=lambda x: letters.count(x),\
    \ reverse=True)\n    letters = list(letters)\n    letters.sort(key=lambda x: letters.count(x),\
    \ reverse=True)\n    letters = list(letters)\n    letters.sort(key=lambda x: letters.count(x),\
    \ reverse=True)\n    letters = list(letters)\n    letters.sort(key=lambda x: letters.count(x),\
    \ reverse=True)\n    letters = list(letters)\n    letters.sort(key=lambda x: letters.count(x),\
    \ reverse=True)\n    letters = list(letters)\n    letters.sort(key=lambda x: letters.count(x),\
    \ reverse=True)\n    letters = list(letters)\n    letters.sort(key=lambda x: letters.count(x),\
    \ reverse=True)\n    letters = list(letters)\n    letters.sort(key=lambda x: letters.count(x),\
    \ reverse=True)\n    letters = list(letters)\n    letters.sort(key=lambda x: letters.count(x),\
    \ reverse=True)\n    letters = list(letters)\n    letters.sort(key=lambda x: letters.",
  "    \n    letters = test.split()\n    counts = {}\n    for letter in letters:\n\
    \        if letter in counts:\n            counts[letter] += 1\n        else:\n\
    \            counts[letter] = 1\n    \n    return counts\n", "    \n    letters\
    \ = test.split()\n    letters.sort()\n    \n    counts = {}\n    for letter in\
    \ letters:\n        if letter in counts:\n            counts[letter] += 1\n  \
    \      else:\n            counts[letter] = 1\n    \n    return counts\n</cell>\n\
    <cell>\nhistogram(\"a b c a b c a b c a b c\")\n</cell>\n<cell>\nhistogram(\"\
    a b c a b c a b c a b c a b c\")\n</cell>\n<cell>\nhistogram(\"a b c a b c a b\
    \ c a b c a b c\")\n</cell>\n<cell>\nhistogram(\"a b c a b c a b c a b c a b c\"\
    )\n</cell>\n<cell>\nhistogram(\"a b c a b c a b c a b c a b c\")\n</cell>\n<cell>\n\
    histogram(\"a b c a b c a b c a b c a b c\")\n</cell>\n<cell>\nhistogram(\"a b\
    \ c a b c a b c a b c a b c\")\n</cell>\n<cell>\nhistogram(\"a b c a b c a b c\
    \ a b c a b c\")\n</cell>\n<cell>\nhistogram(\"a b c a b c a b c a b c a b c\"\
    )\n</cell>\n<cell>\nhistogram(\"a b c a b c a b c a b c a b c\")\n</cell>\n<cell>\n\
    histogram(\"a b c a b c a b c a b c a b c\")\n</cell>\n<cell>\nhistogram(\"a b\
    \ c a b c a b c a b c a b c\")\n</cell>\n<cell>\nhistogram(\"a b c a b c a b c\
    \ a b c a b c\")\n</cell>\n<cell>\nhistogram(\"a b c a b c a b c a b c a b c\"\
    )\n</cell>\n<cell>\nhistogram(\"a b c a b c a b c a b c a b c\")\n</cell>\n<cell>\n\
    histogram(\"a b c a b c a b c a b c a b c\")\n</cell>\n<cell>\nhistogram(\"a b\
    \ c a b c a b c a b c a b c\")\n</cell>\n<cell>\nhistogram(\"a b c a b c a b c\
    \ a b c a ", "    \n    letters = test.split()\n    counts = {}\n    for letter\
    \ in letters:\n        if letter in counts:\n            counts[letter] += 1\n\
    \        else:\n            counts[letter] = 1\n    return counts\n", "    letters\
    \ = test.split()\n    letters_count = Counter(letters)\n    most_common = letters_count.most_common(1)[0]\n\
    \    most_common_count = letters_count[most_common]\n    return most_common, most_common_count\n\
    </cell>\n<cell>\nhistogram(\"a b c d e f g h i j k l m n o p q r s t u v w x y\
    \ z\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string and\
    \ returns the number of words in the string.\nThe function should ignore all punctuation\
    \ and only count the letters a-z.\nThe function should ignore all numbers and\
    \ only count the letters a-z.\nThe function should ignore all special characters\
    \ and only count the letters a-z.\nThe function should ignore all non-alphabetic\
    \ characters and only count the letters a-z.\nThe function should ignore all spaces\
    \ and only count the letters a-z.\nThe function should ignore all uppercase letters\
    \ and only count the letters a-z.\nThe function should ignore all lowercase letters\
    \ and only count the letters a-z.\nThe function should ignore all numbers and\
    \ only count the letters a-z.\nThe function should ignore all special characters\
    \ and only count the letters a-z.\nThe function should ignore all non-alphabetic\
    \ characters and only count the letters a-z.\nThe function should ignore all spaces\
    \ and only count the letters a-z.\nThe function should ignore all uppercase letters\
    \ and only count the letters a-z.\nThe function should ignore all lowercase letters\
    \ and only count the letters a-z.\nThe function should ignore all numbers and\
    \ only count the letters a-z.\nThe function should ignore all special characters\
    \ and only count the letters a-z.\nThe function should ignore all non-alphabetic\
    \ characters and only count the letters a-z.\nThe function should ignore all spaces\
    \ and only count the letters a-z.\nThe function should ignore all uppercase letters\
    \ and only count the letters a-z.\nThe function should ignore all lowercase letters\
    \ and only count the letters a-z.\nThe function should ignore all numbers and\
    \ only count the letters a-z.\nThe function should ignore all special characters\
    \ and only count the letters a-z.\nThe function should ignore all non-alphabetic\
    \ characters and only count the letters a-z.\nThe function should ignore all spaces\
    \ and only count the letters a-z.\nThe function should ignore all uppercase letters\
    \ and only count the letters a-z.\nThe function should ignore all lowercase letters\
    \ and only count the ", "    \n    histogram = {}\n    \n    for letter in test:\n\
    \        if letter in histogram:\n            histogram[letter] += 1\n       \
    \ else:\n            histogram[letter] = 1\n    \n    return histogram\n", " \
    \   \n    histogram = {}\n    \n    for letter in test:\n        if letter in\
    \ histogram:\n            histogram[letter] += 1\n        else:\n            histogram[letter]\
    \ = 1\n    \n    return histogram\n", "    \n    letters = test.split()\n    letter_dict\
    \ = {}\n    \n    for letter in letters:\n        if letter in letter_dict:\n\
    \            letter_dict[letter] += 1\n        else:\n            letter_dict[letter]\
    \ = 1\n    \n    return letter_dict\n", "    letters = test.split()\n    letters_dict\
    \ = {}\n    for letter in letters:\n        if letter in letters_dict:\n     \
    \       letters_dict[letter] += 1\n        else:\n            letters_dict[letter]\
    \ = 1\n    return letters_dict\n", "    \n    letters = test.split()\n    counts\
    \ = {}\n    for letter in letters:\n        if letter in counts:\n           \
    \ counts[letter] += 1\n        else:\n            counts[letter] = 1\n    return\
    \ counts\n</cell>\n<cell>\nhistogram(\"abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc ", "    \n    letters = test.split()\n\
    \    letter_dict = {}\n    for letter in letters:\n        if letter in letter_dict:\n\
    \            letter_dict[letter] += 1\n        else:\n            letter_dict[letter]\
    \ = 1\n    return letter_dict\n</cell>\n<cell>\nhistogram(\"a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b ", "    \n   \
    \ letters = test.split()\n    letter_dict = {}\n    \n    for letter in letters:\n\
    \        if letter in letter_dict.keys():\n            letter_dict[letter] +=\
    \ 1\n        else:\n            letter_dict[letter] = 1\n    \n    return letter_dict\n",
  "    \n    letters = test.split()\n    letters_count = Counter(letters)\n    \n\
    \    most_frequent_letter = letters_count.most_common(1)[0][0]\n    most_frequent_count\
    \ = letters_count.most_common(1)[0][1]\n    \n    letters_count_sorted = sorted(letters_count.items(),\
    \ key=lambda kv: kv[1], reverse=True)\n    \n    letters_count_sorted_with_most_frequent_letter\
    \ = [(kv[0], kv[1]) for kv in letters_count_sorted if kv[0] == most_frequent_letter]\n\
    \    \n    letters_count_sorted_with_most_frequent_letter = sorted(letters_count_sorted_with_most_frequent_letter,\
    \ key=lambda kv: kv[1], reverse=True)\n    \n    letters_count_sorted_with_most_frequent_letter\
    \ = letters_count_sorted_with_most_frequent_letter[:10]\n    \n    letters_count_sorted_with_most_frequent_letter\
    \ = sorted(letters_count_sorted_with_most_frequent_letter, key=lambda kv: kv[0])\n\
    \    \n    letters_count_sorted_with_most_frequent_letter = letters_count_sorted_with_most_frequent_letter[:10]\n\
    \    \n    letters_count_sorted_with_most_frequent_letter = sorted(letters_count_sorted_with_most_frequent_letter,\
    \ key=lambda kv: kv[1])\n    \n    letters_count_sorted_with_most_frequent_letter\
    \ = letters_count_sorted_with_most_frequent_letter[:10]\n    \n    letters_count_sorted_with_most_frequent_letter\
    \ = sorted(letters_count_sorted_with_most_frequent_letter, key=lambda kv: kv[0])\n\
    \    \n    letters_count_sorted_with_most_frequent_letter = letters_count_sorted_with_most_frequent_letter[:10]\n\
    \    \n    letters_count_sorted_with_most_frequent_letter = letters_count_sorted_with_most_frequent_letter[:10]\n\
    \    \n    letters_count_sorted_with_most_frequent_letter = letters_count_sorted_with_most_frequent_letter[:10]\n\
    \    \n    letters_count_sorted_with_most_frequent_letter = letters_count_sorted_with_most_frequent_letter[:10]\n\
    \    \n    letters_count_sorted_with_most_frequent_letter = letters_count_sorted_with_most_frequent_letter[:10]\n\
    \    \n    letters_count_sorted_with_most_frequent_letter = letters_count_sorted_with_most_frequent_letter[:10]\n\
    \    \n    letters_count_sorted_with_most_frequent_letter = letters_count_sorted_with_most_frequent_letter[:10]\n\
    \    \n    letters_count_sorted_with_most_frequent_letter = letters_count_sorted_with_most_frequent_letter[:10]\n\
    \    \n    letters_count_sorted_with_most_frequent_letter = letter", "    letters\
    \ = test.split()\n    letters_count = Counter(letters)\n    most_common = letters_count.most_common(1)\n\
    \    most_common = most_common[0]\n    most_common = most_common[0]\n    most_common\
    \ = most_common[0]\n    most_common = most_common[0]\n    most_common = most_common[0]\n\
    \    most_common = most_common[0]\n    most_common = most_common[0]\n    most_common\
    \ = most_common[0]\n    most_common = most_common[0]\n    most_common = most_common[0]\n\
    \    most_common = most_common[0]\n    most_common = most_common[0]\n    most_common\
    \ = most_common[0]\n    most_common = most_common[0]\n    most_common = most_common[0]\n\
    \    most_common = most_common[0]\n    most_common = most_common[0]\n    most_common\
    \ = most_common[0]\n    most_common = most_common[0]\n    most_common = most_common[0]\n\
    \    most_common = most_common[0]\n    most_common = most_common[0]\n    most_common\
    \ = most_common[0]\n    most_common = most_common[0]\n    most_common = most_common[0]\n\
    \    most_common = most_common[0]\n    most_common = most_common[0]\n    most_common\
    \ = most_common[0]\n    most_common = most_common[0]\n    most_common = most_common[0]\n\
    \    most_common = most_common[0]\n    most_common = most_common[0]\n    most_common\
    \ = most_common[0]\n    most_common = most_common[0]\n    most_common = most_common[0]\n\
    \    most_common = most_common[0]\n    most_common = most_common[0]\n    most_common\
    \ = most_common[0]\n    most_common = most_common[0]\n    most_common = most_common[0]\n\
    \    most_common = most_common[0]\n    most_common = most_common[0]\n    most_common\
    \ = most_common[0]\n    most_common = most_common[0]\n    most_common = most_common[0]\n\
    \    most_common = most_common[0]\n    most_common = most_common[0]\n    most_common\
    \ = most_common[0]\n    most_common = most_common[0]\n    most_common = most_common[0]\n\
    \    most_common = most_common[0]\n    most_common = most_common[0]\n    most_common\
    \ = most_common[0]\n    most_common = most_common[0]\n    most_common = most_common[0]\n\
    \    most_common = most_common[0]\n    most_common = most_common[0]\n    most_common\
    \ = most_common[0]\n    most_common = most_common[0]\n    most_common = most_common[0]\n\
    \    most_common = most_common[0]", "    letters = test.split()\n    letters_count\
    \ = Counter(letters)\n    most_common = letters_count.most_common(1)\n    most_common\
    \ = most_common[0]\n    most_common = most_common[0]\n    most_common = most_common[0]\n\
    \    most_common = most_common[0]\n    most_common = most_common[0]\n    most_common\
    \ = most_common[0]\n    most_common = most_common[0]\n    most_common = most_common[0]\n\
    \    most_common = most_common[0]\n    most_common = most_common[0]\n    most_common\
    \ = most_common[0]\n    most_common = most_common[0]\n    most_common = most_common[0]\n\
    \    most_common = most_common[0]\n    most_common = most_common[0]\n    most_common\
    \ = most_common[0]\n    most_common = most_common[0]\n    most_common = most_common[0]\n\
    \    most_common = most_common[0]\n    most_common = most_common[0]\n    most_common\
    \ = most_common[0]\n    most_common = most_common[0]\n    most_common = most_common[0]\n\
    \    most_common = most_common[0]\n    most_common = most_common[0]\n    most_common\
    \ = most_common[0]\n    most_common = most_common[0]\n    most_common = most_common[0]\n\
    \    most_common = most_common[0]\n    most_common = most_common[0]\n    most_common\
    \ = most_common[0]\n    most_common = most_common[0]\n    most_common = most_common[0]\n\
    \    most_common = most_common[0]\n    most_common = most_common[0]\n    most_common\
    \ = most_common[0]\n    most_common = most_common[0]\n    most_common = most_common[0]\n\
    \    most_common = most_common[0]\n    most_common = most_common[0]\n    most_common\
    \ = most_common[0]\n    most_common = most_common[0]\n    most_common = most_common[0]\n\
    \    most_common = most_common[0]\n    most_common = most_common[0]\n    most_common\
    \ = most_common[0]\n    most_common = most_common[0]\n    most_common = most_common[0]\n\
    \    most_common = most_common[0]\n    most_common = most_common[0]\n    most_common\
    \ = most_common[0]\n    most_common = most_common[0]\n    most_common = most_common[0]\n\
    \    most_common = most_common[0]\n    most_common = most_common[0]\n    most_common\
    \ = most_common[0]\n    most_common = most_common[0]\n    most_common = most_common[0]\n\
    \    most_common = most_common[0]\n    most_common = most_common[0]\n    most_common\
    \ = most_common[0]", "    \n    letters = test.split()\n    letters_count = Counter(letters)\n\
    \    \n    return letters_count\n", "    \n    letters = test.split()\n    counts\
    \ = {}\n    for letter in letters:\n        if letter in counts:\n           \
    \ counts[letter] += 1\n        else:\n            counts[letter] = 1\n    return\
    \ counts\n", "    \n    letters = test.lower().split()\n    \n    counts = {}\n\
    \    \n    for letter in letters:\n        if letter in counts:\n            counts[letter]\
    \ += 1\n        else:\n            counts[letter] = 1\n    \n    return counts\n",
  "    \n    letters = test.split()\n    letters.sort()\n    \n    counts = {}\n \
    \   \n    for letter in letters:\n        if letter in counts:\n            counts[letter]\
    \ += 1\n        else:\n            counts[letter] = 1\n    \n    return counts\n",
  "    \n    histogram = {}\n    \n    for letter in test:\n        if letter in histogram:\n\
    \            histogram[letter] += 1\n        else:\n            histogram[letter]\
    \ = 1\n    \n    return histogram\n", "    \n    histogram = {}\n    \n    for\
    \ letter in test:\n        if letter in histogram:\n            histogram[letter]\
    \ += 1\n        else:\n            histogram[letter] = 1\n    \n    return histogram\n",
  "    letters = test.split()\n    counts = {}\n    for letter in letters:\n     \
    \   if letter in counts:\n            counts[letter] += 1\n        else:\n   \
    \         counts[letter] = 1\n    return counts\n", "    \n    letters = test.split()\n\
    \    counts = {}\n    for letter in letters:\n        if letter in counts:\n \
    \           counts[letter] += 1\n        else:\n            counts[letter] = 1\n\
    \    return counts\n", "    \n    letters = test.split()\n    letter_dict = {}\n\
    \    for letter in letters:\n        if letter in letter_dict:\n            letter_dict[letter]\
    \ += 1\n        else:\n            letter_dict[letter] = 1\n    return letter_dict\n\
    </cell>\n<cell>\nhistogram(\"a b c a b c a b c a b c\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string as input and returns a dictionary of\
    \ the letter with the most repetition and containing the corresponding count.\n\
    If several letters have the same occurrence, return all of them.\nThe function\
    \ should work for any string that consists of lowercase letters.\n\n\n</text>\n\
    <cell>", "    \n    letters = test.split()\n    letters_count = {}\n    for letter\
    \ in letters:\n        if letter in letters_count:\n            letters_count[letter]\
    \ += 1\n        else:\n            letters_count[letter] = 1\n    return letters_count\n\
    </cell>\n<cell>\nhistogram('abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc ", "    \n    histogram = {}\n    \n    for letter in test:\n\
    \        if letter in histogram:\n            histogram[letter] += 1\n       \
    \ else:\n            histogram[letter] = 1\n    \n    return histogram\n</cell>\n\
    <cell>\nhistogram(\"abracadabra\")\n</cell>\n<cell>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<cell>\nhistogram(\"abracadabra\")\n</cell>\n<cell>\nhistogram(\"\
    abracadabra\")\n</cell>\n<cell>\nhistogram(\"abracadabra\")\n</cell>\n<cell>\n\
    histogram(\"abracadabra\")\n</cell>\n<cell>\nhistogram(\"abracadabra\")\n</cell>\n\
    <cell>\nhistogram(\"abracadabra\")\n</cell>\n<cell>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<cell>\nhistogram(\"abracadabra\")\n</cell>\n<cell>\nhistogram(\"\
    abracadabra\")\n</cell>\n<cell>\nhistogram(\"abracadabra\")\n</cell>\n<cell>\n\
    histogram(\"abracadabra\")\n</cell>\n<cell>\nhistogram(\"abracadabra\")\n</cell>\n\
    <cell>\nhistogram(\"abracadabra\")\n</cell>\n<cell>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<cell>\nhistogram(\"abracadabra\")\n</cell>\n<cell>\nhistogram(\"\
    abracadabra\")\n</cell>\n<cell>\nhistogram(\"abracadabra\")\n</cell>\n<cell>\n\
    histogram(\"abracadabra\")\n</cell>\n<cell>\nhistogram(\"abracadabra\")\n</cell>\n\
    <cell>\nhistogram(\"abracadabra\")\n</cell>\n<cell>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<cell>\nhistogram(\"abracadabra\")\n</cell>\n<cell>\nhistogram(\"\
    abracadabra\")\n</cell>\n<cell>\nhistogram(\"abracadabra\")\n</cell>\n<cell>\n\
    histogram(\"abracadabra\")\n</cell>\n<cell>\nhistogram(\"abracadabra", "    \n\
    \    histogram = {}\n    \n    for letter in test:\n        if letter in histogram:\n\
    \            histogram[letter] += 1\n        else:\n            histogram[letter]\
    \ = 1\n    \n    return histogram\n</cell>\n<cell>\nhistogram('abracadabra')\n\
    </cell>\n<cell>\nhistogram('abracadabra')\n</cell>\n<cell>\nhistogram('abracadabra')\n\
    </cell>\n<cell>\nhistogram('abracadabra')\n</cell>\n<cell>\nhistogram('abracadabra')\n\
    </cell>\n<cell>\nhistogram('abracadabra')\n</cell>\n<cell>\nhistogram('abracadabra')\n\
    </cell>\n<cell>\nhistogram('abracadabra')\n</cell>\n<cell>\nhistogram('abracadabra')\n\
    </cell>\n<cell>\nhistogram('abracadabra')\n</cell>\n<cell>\nhistogram('abracadabra')\n\
    </cell>\n<cell>\nhistogram('abracadabra')\n</cell>\n<cell>\nhistogram('abracadabra')\n\
    </cell>\n<cell>\nhistogram('abracadabra')\n</cell>\n<cell>\nhistogram('abracadabra')\n\
    </cell>\n<cell>\nhistogram('abracadabra')\n</cell>\n<cell>\nhistogram('abracadabra')\n\
    </cell>\n<cell>\nhistogram('abracadabra')\n</cell>\n<cell>\nhistogram('abracadabra')\n\
    </cell>\n<cell>\nhistogram('abracadabra')\n</cell>\n<cell>\nhistogram('abracadabra')\n\
    </cell>\n<cell>\nhistogram('abracadabra')\n</cell>\n<cell>\nhistogram('abracadabra')\n\
    </cell>\n<cell>\nhistogram('abracadabra')\n</cell>\n<cell>\nhistogram('abracadabra')\n\
    </cell>\n<cell>\nhistogram('abracadabra')\n</cell>\n<cell>\nhistogram('abracadabra')\n\
    </cell>\n<cell>\nhistogram('abracadabra", "    \n    letters = {}\n    \n    for\
    \ letter in test:\n        if letter in letters:\n            letters[letter]\
    \ += 1\n        else:\n            letters[letter] = 1\n    \n    return letters\n\
    </cell>\n<cell>\nhistogram('abracadabra')\n</cell>\n<text>\nExercise\nWrite a\
    \ function that takes a string and returns a dictionary of the letter with the\
    \ most repetition and containing the corresponding count.\nIf several letters\
    \ have the same occurrence, return all of them.\nThe function should take a string\
    \ as an argument and return a dictionary of the letter with the most repetition\
    \ and containing the corresponding count.\nThe function should raise a ValueError\
    \ if the input string is not in the form of a space separated lowercase letters.\n\
    The function should raise a TypeError if the input string is not a string.\nThe\
    \ function should raise a ValueError if the input string contains any character\
    \ that is not lowercase letters.\n\n\n</text>\n<cell>", "    \n    letters = {}\n\
    \    \n    for letter in test:\n        if letter in letters:\n            letters[letter]\
    \ += 1\n        else:\n            letters[letter] = 1\n    \n    return letters\n\
    </cell>\n<cell>\nhistogram(\"abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc ", "    \n    letters = test.lower().split()\n\
    \    counts = {}\n    for letter in letters:\n        if letter in counts:\n \
    \           counts[letter] += 1\n        else:\n            counts[letter] = 1\n\
    \    return counts\n</cell>\n<cell>\nhistogram(\"a b c d e f g h i j k l m n o\
    \ p q r s t u v w x y z\")\n</cell>\n<cell>\nhistogram(\"a b c d e f g h i j k\
    \ l m n o p q r s t u v w x y z 1 2 3 4 5 6 7 8 9 0 \")\n</cell>\n<cell>\nhistogram(\"\
    a b c d e f g h i j k l m n o p q r s t u v w x y z 1 2 3 4 5 6 7 8 9 0 1 2 3\
    \ 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\
    \ 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9\
    \ 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7\
    \ 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\
    \ 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3\
    \ 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\
    \ 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9\
    \ 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7\
    \ 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 ", "    \n    letters\
    \ = test.lower().split()\n    \n    counts = {}\n    for letter in letters:\n\
    \        if letter in counts:\n            counts[letter] += 1\n        else:\n\
    \            counts[letter] = 1\n    \n    return counts\n", "    \n    letters\
    \ = test.lower().split()\n    letter_dict = {}\n    \n    for letter in letters:\n\
    \        if letter in letter_dict:\n            letter_dict[letter] += 1\n   \
    \     else:\n            letter_dict[letter] = 1\n    \n    return letter_dict\n",
  "    \n    letters = test.split()\n    counts = {}\n    for letter in letters:\n\
    \        if letter in counts:\n            counts[letter] += 1\n        else:\n\
    \            counts[letter] = 1\n    return counts\n</cell>\n<cell>\nhistogram(\"\
    a b c a b c a b c a b c\")\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a string and returns the number of words in it.\n\n\n</text>\n<cell>",
  "    \n    histogram = {}\n    \n    for letter in test:\n        if letter in histogram:\n\
    \            histogram[letter] += 1\n        else:\n            histogram[letter]\
    \ = 1\n    \n    return histogram\n", "    \n    histogram = {}\n    \n    for\
    \ letter in test:\n        if letter in histogram:\n            histogram[letter]\
    \ += 1\n        else:\n            histogram[letter] = 1\n    \n    return histogram\n",
  "    \n    letters = test.split()\n    letters_count = Counter(letters)\n    \n\
    \    letters_count_sorted = sorted(letters_count.items(), key=operator.itemgetter(1),\
    \ reverse=True)\n    \n    return letters_count_sorted\n</cell>\n<cell>\nhistogram(\"\
    a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c ",
  "    \n    letters = test.lower().split()\n    letters_count = {}\n    \n    for\
    \ letter in letters:\n        if letter in letters_count:\n            letters_count[letter]\
    \ += 1\n        else:\n            letters_count[letter] = 1\n    \n    return\
    \ letters_count\n</cell>\n<cell>\nhistogram('abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc ab", "    \n    letters = test.split()\n    letters_count\
    \ = dict()\n    for letter in letters:\n        if letter in letters_count:\n\
    \            letters_count[letter] += 1\n        else:\n            letters_count[letter]\
    \ = 1\n    return letters_count\n", "    \n    letters = test.split()\n    \n\
    \    letter_dict = {}\n    \n    for letter in letters:\n        if letter in\
    \ letter_dict:\n            letter_dict[letter] += 1\n        else:\n        \
    \    letter_dict[letter] = 1\n    \n    return letter_dict\n", "    letters =\
    \ test.split()\n    letters_count = {}\n    for letter in letters:\n        if\
    \ letter in letters_count:\n            letters_count[letter] += 1\n        else:\n\
    \            letters_count[letter] = 1\n    return letters_count\n", "    \n \
    \   histogram = {}\n    \n    for letter in test:\n        if letter in histogram:\n\
    \            histogram[letter] += 1\n        else:\n            histogram[letter]\
    \ = 1\n    \n    return histogram\n</cell>\n<cell>\nhistogram(\"abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc ",
  "    \n    letters = test.split()\n    letter_dict = {}\n    \n    for letter in\
    \ letters:\n        if letter in letter_dict:\n            letter_dict[letter]\
    \ += 1\n        else:\n            letter_dict[letter] = 1\n    \n    return letter_dict\n",
  "    letters = test.split()\n    letters_count = Counter(letters)\n    most_frequent_letter\
    \ = letters_count.most_common(1)[0][0]\n    most_frequent_count = letters_count[most_frequent_letter]\n\
    \    \n    return {\"most_frequent_letter\": most_frequent_letter, \"most_frequent_count\"\
    : most_frequent_count}\n</cell>\n<cell>\nhistogram(\"a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c ", "    \n    letters = test.split()\n    letters_count = Counter(letters)\n\
    \    \n    return letters_count\n", "    letters = test.split()\n    letters_count\
    \ = Counter(letters)\n    most_frequent_letter = letters_count.most_common(1)[0][0]\n\
    \    most_frequent_count = letters_count[most_frequent_letter]\n    \n    return\
    \ {\"most_frequent_letter\": most_frequent_letter, \"most_frequent_count\": most_frequent_count}\n\
    </cell>\n<cell>\nhistogram(\"a b c d e f g h i j k l m n o p q r s t u v w x y\
    \ z\")\n</cell>\n<text>\nExercise\nWrite a function that takes a string as input\
    \ and returns the string with all letters capitalized.\n\n\n</text>\n<cell>",
  "    letters = test.split()\n    letters_count = Counter(letters)\n    most_frequent_letter\
    \ = letters_count.most_common(1)[0][0]\n    most_frequent_count = letters_count.most_common(1)[0][1]\n\
    \    \n    letters_count_dict = dict(letters_count)\n    \n    letters_count_dict[most_frequent_letter]\
    \ = most_frequent_count\n    \n    return letters_count_dict\n</cell>\n<cell>\n\
    histogram(\"a b c d e f g h i j k l m n o p q r s t u v w x y z\")\n</cell>\n\
    <text>\nExercise\nWrite a function that takes a string and returns the number\
    \ of words in the string.\nWrite a function that takes a string and returns the\
    \ number of characters in the string.\nWrite a function that takes a string and\
    \ returns the number of uppercase letters in the string.\nWrite a function that\
    \ takes a string and returns the number of lowercase letters in the string.\n\
    Write a function that takes a string and returns the number of digits (0-9) in\
    \ the string.\nWrite a function that takes a string and returns the number of\
    \ punctuation marks in the string.\nWrite a function that takes a string and returns\
    \ the number of spaces in the string.\nWrite a function that takes a string and\
    \ returns the number of words in the string that start with a capital letter.\n\
    Write a function that takes a string and returns the number of words in the string\
    \ that start with a lowercase letter.\nWrite a function that takes a string and\
    \ returns the number of words in the string that start with a digit.\nWrite a\
    \ function that takes a string and returns the number of words in the string that\
    \ start with a punctuation mark.\nWrite a function that takes a string and returns\
    \ the number of words in the string that start with a space.\nWrite a function\
    \ that takes a string and returns the number of words in the string that start\
    \ with a uppercase letter.\nWrite a function that takes a string and returns the\
    \ number of words in the string that start with a lowercase letter.\nWrite a function\
    \ that takes a string and returns the number of words in the string that start\
    \ with a digit.\nWrite a function that takes a string and returns the number of\
    \ words in the string that start with a punctuation mark.\nWrite a function that\
    \ takes a string and returns the number of words in the string that start with\
    \ a space.\nWrite a function that takes a string and returns the number of words\
    \ in the string that start with a uppercase letter.\nWrite a function that takes\
    \ a string and returns the number of words in the string that start with a lowercase\
    \ letter.\nWrite a function that takes a string and returns the number of words\
    \ in the string that start with a digit.\nWrite a function that takes a string\
    \ and returns the number of words in the string that start with a punctuation\
    \ mark.\nWrite a function that takes a string and returns the number of words\
    \ in the string that start with a space.\nWrite a function that takes a string\
    \ and returns the number of words in the string that start with a uppercase letter.\n\
    Write a function that takes a string and returns the number of ", "    letters\
    \ = test.split()\n    letters_count = Counter(letters)\n    most_frequent_letter\
    \ = letters_count.most_common(1)[0][0]\n    most_frequent_count = letters_count[most_frequent_letter]\n\
    \    \n    return most_frequent_letter, most_frequent_count\n", "    \n    letters\
    \ = test.lower().split()\n    letters_count = Counter(letters)\n    \n    most_common\
    \ = letters_count.most_common(1)\n    \n    if len(most_common) == 1:\n      \
    \  return {most_common[0][0]: most_common[0][1]}\n    else:\n        return {letter:\
    \ count for letter, count in most_common}\n    \n    ", "    \n    histogram =\
    \ {}\n    \n    for letter in test:\n        if letter in histogram:\n       \
    \     histogram[letter] += 1\n        else:\n            histogram[letter] = 1\n\
    \    \n    return histogram\n", "    \n    letters = test.lower().split()\n  \
    \  \n    histogram = {}\n    \n    for letter in letters:\n        if letter in\
    \ histogram:\n            histogram[letter] += 1\n        else:\n            histogram[letter]\
    \ = 1\n    \n    return histogram\n", "    \n    letters = test.lower().split()\n\
    \    letter_dict = {}\n    for letter in letters:\n        if letter in letter_dict:\n\
    \            letter_dict[letter] += 1\n        else:\n            letter_dict[letter]\
    \ = 1\n    return letter_dict\n", "    \n    histogram = {}\n    \n    for letter\
    \ in test:\n        if letter in histogram:\n            histogram[letter] +=\
    \ 1\n        else:\n            histogram[letter] = 1\n    \n    return histogram\n",
  "    letters = test.lower().split()\n    letter_dict = {}\n    for letter in letters:\n\
    \        if letter in letter_dict:\n            letter_dict[letter] += 1\n   \
    \     else:\n            letter_dict[letter] = 1\n    return letter_dict\n", " \
    \   \n    letters = test.split()\n    letters_count = Counter(letters)\n    \n\
    \    most_frequent_letter = letters_count.most_common(1)[0][0]\n    \n    most_frequent_count\
    \ = letters_count[most_frequent_letter]\n    \n    letters_count_sorted = sorted(letters_count.items(),\
    \ key=lambda kv: kv[1])\n    \n    letters_count_sorted_reverse = sorted(letters_count_sorted,\
    \ key=lambda kv: kv[0], reverse=True)\n    \n    letters_count_sorted_reverse.reverse()\n\
    \    \n    letters_count_sorted_reverse.reverse()\n    \n    letters_count_sorted_reverse.reverse()\n\
    \    \n    letters_count_sorted_reverse.reverse()\n    \n    letters_count_sorted_reverse.reverse()\n\
    \    \n    letters_count_sorted_reverse.reverse()\n    \n    letters_count_sorted_reverse.reverse()\n\
    \    \n    letters_count_sorted_reverse.reverse()\n    \n    letters_count_sorted_reverse.reverse()\n\
    \    \n    letters_count_sorted_reverse.reverse()\n    \n    letters_count_sorted_reverse.reverse()\n\
    \    \n    letters_count_sorted_reverse.reverse()\n    \n    letters_count_sorted_reverse.reverse()\n\
    \    \n    letters_count_sorted_reverse.reverse()\n    \n    letters_count_sorted_reverse.reverse()\n\
    \    \n    letters_count_sorted_reverse.reverse()\n    \n    letters_count_sorted_reverse.reverse()\n\
    \    \n    letters_count_sorted_reverse.reverse()\n    \n    letters_count_sorted_reverse.reverse()\n\
    \    \n    letters_count_sorted_reverse.reverse()\n    \n    letters_count_sorted_reverse.reverse()\n\
    \    \n    letters_count_sorted_reverse.reverse()\n    \n    letters_count_sorted_reverse.reverse()\n\
    \    \n    letters_count_sorted_reverse.reverse()\n    \n    letters_count_sorted_reverse.reverse()\n\
    \    \n    letters_count_sorted_reverse.reverse()\n    \n    letters_count_sorted_reverse.reverse()\n\
    \    \n    letters_count_sorted_reverse.reverse()\n    \n    letters_count_sorted_reverse.reverse()\n\
    \    \n    letters_count_sorted_reverse.reverse()\n    \n    letters_count_sorted_reverse.reverse()\n\
    \    \n    letters_count_sorted_reverse.reverse()\n    \n    letters_count_sorted_reverse.reverse()\n\
    \    \n    letters_count_sorted_reverse.reverse()\n    \n    letters_count_sorted_reverse.reverse()\n\
    \    \n    letters_count_sorted_reverse.reverse()\n    \n    letters_count_sorted_reverse.reverse()\n\
    \    \n    letters_count_sorted_reverse.reverse()\n    \n    letter", "    \n\
    \    letters = test.lower().split()\n    letters_count = Counter(letters)\n  \
    \  \n    letters_count_sorted = sorted(letters_count.items(), key=lambda x: x[1],\
    \ reverse=True)\n    \n    letters_count_sorted_dict = dict(letters_count_sorted)\n\
    \    \n    return letters_count_sorted_dict\n</cell>\n<cell>\nhistogram(\"a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c ", "    \n    letters = test.split()\n\
    \    letters_count = Counter(letters)\n    \n    most_common = letters_count.most_common(1)\n\
    \    \n    if most_common:\n        return most_common[0]\n    else:\n       \
    \ return most_common\n    \n    ", "    \n    letters = test.split()\n    letters_count\
    \ = dict()\n    for letter in letters:\n        if letter in letters_count:\n\
    \            letters_count[letter] += 1\n        else:\n            letters_count[letter]\
    \ = 1\n    \n    return letters_count\n", "    letters = test.split()\n    letters_count\
    \ = {}\n    for letter in letters:\n        if letter in letters_count:\n    \
    \        letters_count[letter] += 1\n        else:\n            letters_count[letter]\
    \ = 1\n    return letters_count\n", "    \n    histogram = {}\n    \n    letters\
    \ = test.split()\n    \n    for letter in letters:\n        if letter in histogram:\n\
    \            histogram[letter] += 1\n        else:\n            histogram[letter]\
    \ = 1\n    \n    return histogram\n", "    \n    histogram = {}\n    \n    letters\
    \ = test.split()\n    \n    for letter in letters:\n        if letter in histogram:\n\
    \            histogram[letter] += 1\n        else:\n            histogram[letter]\
    \ = 1\n    \n    return histogram\n", "    \n    letters = test.lower().split()\n\
    \    counts = {}\n    for letter in letters:\n        if letter in counts:\n \
    \           counts[letter] += 1\n        else:\n            counts[letter] = 1\n\
    \    return counts\n", "    letters = test.split()\n    letters_count = Counter(letters)\n\
    \    most_common = letters_count.most_common(1)[0]\n    letters_count.pop(most_common)\n\
    \    return letters_count\n", "    \n    letters = test.split()\n    letters =\
    \ list(letters)\n    letters.sort(key=lambda x: len(x), reverse=True)\n    \n\
    \    counts = {}\n    for letter in letters:\n        if letter in counts:\n \
    \           counts[letter] += 1\n        else:\n            counts[letter] = 1\n\
    \    \n    return counts\n</cell>\n<cell>\nhistogram('a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c ", "    \n    letters = test.split()\n    letters = list(letters)\n\
    \    letters.sort()\n    \n    counts = {}\n    for letter in letters:\n     \
    \   if letter in counts:\n            counts[letter] += 1\n        else:\n   \
    \         counts[letter] = 1\n    \n    return counts\n</cell>\n<cell>\nhistogram(\"\
    a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b ", "    letters = test.lower().split()\n\
    \    counts = {}\n    for letter in letters:\n        if letter in counts:\n \
    \           counts[letter] += 1\n        else:\n            counts[letter] = 1\n\
    \    return counts\n", "    \n    letters = test.split()\n    letters = list(map(lambda\
    \ x: x.lower(), letters))\n    letters = list(set(letters))\n    letters.sort()\n\
    \    \n    counts = {}\n    for letter in letters:\n        if letter in counts:\n\
    \            counts[letter] += 1\n        else:\n            counts[letter] =\
    \ 1\n    \n    return counts\n", "    \n    histogram = {}\n    \n    for letter\
    \ in test:\n        if letter in histogram:\n            histogram[letter] +=\
    \ 1\n        else:\n            histogram[letter] = 1\n    \n    return histogram\n",
  "    \n    letters = test.split()\n    letters_count = Counter(letters)\n    \n\
    \    return letters_count\n", "    \n    letters = test.split()\n    letters_count\
    \ = Counter(letters)\n    \n    return letters_count\n</cell>\n<cell>\nhistogram(\"\
    a b c d e f g h i j k l m n o p q r s t u v w x y z\")\n</cell>\n<text>\nExercise\n\
    Write a function that takes a string and returns the number of words in the string.\n\
    Write a function that takes a string and returns the number of characters in the\
    \ string.\nWrite a function that takes a string and returns the number of uppercase\
    \ letters in the string.\nWrite a function that takes a string and returns the\
    \ number of lowercase letters in the string.\nWrite a function that takes a string\
    \ and returns the number of digits (0-9) in the string.\nWrite a function that\
    \ takes a string and returns the number of punctuation characters (!,@,#,$,%,^,&,*,?,_,~)\
    \ in the string.\nWrite a function that takes a string and returns the number\
    \ of words in the string that start with a capital letter.\nWrite a function that\
    \ takes a string and returns the number of words in the string that start with\
    \ a lowercase letter.\nWrite a function that takes a string and returns the number\
    \ of words in the string that start with a digit.\nWrite a function that takes\
    \ a string and returns the number of words in the string that start with a punctuation\
    \ character.\nWrite a function that takes a string and returns the number of words\
    \ in the string that start with a word that has at least two letters.\nWrite a\
    \ function that takes a string and returns the number of words in the string that\
    \ start with a word that has at least three letters.\nWrite a function that takes\
    \ a string and returns the number of words in the string that start with a word\
    \ that has at least four letters.\nWrite a function that takes a string and returns\
    \ the number of words in the string that start with a word that has at least five\
    \ letters.\nWrite a function that takes a string and returns the number of words\
    \ in the string that start with a word that has at least six letters.\nWrite a\
    \ function that takes a string and returns the number of words in the string that\
    \ start with a word that has at least seven letters.\nWrite a function that takes\
    \ a string and returns the number of words in the string that start with a word\
    \ that has at least eight letters.\nWrite a function that takes a string and returns\
    \ the number of words in the string that start with a word that has at least nine\
    \ letters.\nWrite a function that takes a string and returns the number of words\
    \ in the string that start with a word that has at least ten letters.\nWrite a\
    \ function that takes a string and returns the number of words in the string that\
    \ start with a word that has at least eleven letters.\nWrite a function that takes\
    \ a string and returns the number of words in the string that start with a word\
    \ that has at least twelve letters.\nWrite a function that takes a string and\
    \ returns the number of words in the string that start with a word that ", " \
    \   \n    histogram = {}\n    \n    for letter in test:\n        if letter in\
    \ histogram:\n            histogram[letter] += 1\n        else:\n            histogram[letter]\
    \ = 1\n            \n    return histogram\n", "    letters = test.split()\n  \
    \  counts = {}\n    for letter in letters:\n        if letter in counts:\n   \
    \         counts[letter] += 1\n        else:\n            counts[letter] = 1\n\
    \    return counts\n", "    \n    histogram = {}\n    \n    letters = test.split()\n\
    \    \n    for letter in letters:\n        if letter in histogram:\n         \
    \   histogram[letter] += 1\n        else:\n            histogram[letter] = 1\n\
    \    \n    return histogram\n</cell>\n<cell>\nhistogram(\"a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b ", "    \n    letters\
    \ = test.split()\n    letters_count = Counter(letters)\n    letters_count.most_common()\n\
    \    \n    return letters_count\n", "    \n    letters = test.split()\n    letter_dict\
    \ = {}\n    for letter in letters:\n        if letter in letter_dict:\n      \
    \      letter_dict[letter] += 1\n        else:\n            letter_dict[letter]\
    \ = 1\n    return letter_dict\n</cell>\n<cell>\nhistogram('abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc ", "    letters\
    \ = test.lower().split()\n    counts = {}\n    for letter in letters:\n      \
    \  if letter in counts:\n            counts[letter] += 1\n        else:\n    \
    \        counts[letter] = 1\n    return counts\n", "    \n    letters = test.split()\n\
    \    letters_count = Counter(letters)\n    \n    most_frequent_letter = letters_count.most_common(1)[0][0]\n\
    \    most_frequent_count = letters_count.most_common(1)[0][1]\n    \n    return\
    \ most_frequent_letter, most_frequent_count\n</cell>\n<cell>\nhistogram(\"a b\
    \ c a b c a b c a b c\")\n</cell>\n<text>\nExercise\nWrite a function that takes\
    \ a string and returns the number of words in that string.\n\n\n</text>\n<cell>",
  "    \n    letters = test.split()\n    letters = list(letters)\n    letters.sort()\n\
    \    letters = list(letters)\n    letters.reverse()\n    \n    count = {}\n  \
    \  \n    for letter in letters:\n        if letter in count:\n            count[letter]\
    \ += 1\n        else:\n            count[letter] = 1\n    \n    return count\n",
  "    letters = test.split()\n    counts = {}\n    for letter in letters:\n     \
    \   if letter in counts:\n            counts[letter] += 1\n        else:\n   \
    \         counts[letter] = 1\n    return counts\n", "    \n    letters = test.split()\n\
    \    \n    counts = {}\n    \n    for letter in letters:\n        if letter in\
    \ counts:\n            counts[letter] += 1\n        else:\n            counts[letter]\
    \ = 1\n    \n    return counts\n", "    \n    histogram = {}\n    \n    for letter\
    \ in test:\n        if letter in histogram:\n            histogram[letter] +=\
    \ 1\n        else:\n            histogram[letter] = 1\n    \n    return histogram\n",
  "    \n    letters = test.split()\n    letters = list(map(lambda x: x.lower(), letters))\n\
    \    letters = list(set(letters))\n    letters.sort()\n    \n    count = {}\n\
    \    for letter in letters:\n        if letter in count:\n            count[letter]\
    \ += 1\n        else:\n            count[letter] = 1\n    \n    return count\n",
  "    \n    letters = test.split()\n    \n    counts = {}\n    \n    for letter in\
    \ letters:\n        if letter in counts:\n            counts[letter] += 1\n  \
    \      else:\n            counts[letter] = 1\n    \n    return counts\n", "  \
    \  \n    histogram = {}\n    \n    for letter in test:\n        if letter in histogram:\n\
    \            histogram[letter] += 1\n        else:\n            histogram[letter]\
    \ = 1\n    \n    return histogram\n", "    \n    letters = test.split()\n    letters.sort()\n\
    \    letters = list(letters)\n    \n    counts = {}\n    for letter in letters:\n\
    \        if letter in counts:\n            counts[letter] += 1\n        else:\n\
    \            counts[letter] = 1\n    \n    return counts\n</cell>\n<cell>\nhistogram(\"\
    a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b ", "    \n    letters\
    \ = test.split()\n    letters_count = Counter(letters)\n    \n    most_common\
    \ = letters_count.most_common(1)\n    \n    if len(most_common) > 1:\n       \
    \ most_common = most_common[0]\n        \n        letters_count.pop(most_common[0])\n\
    \        \n        letters_count.update(most_common)\n        \n    return letters_count\n",
  "    \n    letters = test.split()\n    \n    counts = {}\n    for letter in letters:\n\
    \        if letter in counts:\n            counts[letter] += 1\n        else:\n\
    \            counts[letter] = 1\n    \n    return counts\n", "    \n    letters\
    \ = test.split()\n    letters_count = Counter(letters)\n    letters_count.most_common()\n\
    \    \n    return letters_count\n</cell>\n<cell>\nhistogram(\"abc def ghi jkl\
    \ mno pqr stu vwx yza\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns the number of words in the string.\nThe function should\
    \ ignore all punctuation and only count the letters a-z.\nThe function should\
    \ ignore all numbers and only count the letters a-z.\nThe function should ignore\
    \ all special characters and only count the letters a-z.\nThe function should\
    \ ignore all whitespace and only count the letters a-z.\nThe function should ignore\
    \ all non-alphabetic characters and only count the letters a-z.\nThe function\
    \ should ignore all non-alphabetic characters and only count the letters a-z.\n\
    The function should ignore all non-alphabetic characters and only count the letters\
    \ a-z.\nThe function should ignore all non-alphabetic characters and only count\
    \ the letters a-z.\nThe function should ignore all non-alphabetic characters and\
    \ only count the letters a-z.\nThe function should ignore all non-alphabetic characters\
    \ and only count the letters a-z.\nThe function should ignore all non-alphabetic\
    \ characters and only count the letters a-z.\nThe function should ignore all non-alphabetic\
    \ characters and only count the letters a-z.\nThe function should ignore all non-alphabetic\
    \ characters and only count the letters a-z.\nThe function should ignore all non-alphabetic\
    \ characters and only count the letters a-z.\nThe function should ignore all non-alphabetic\
    \ characters and only count the letters a-z.\nThe function should ignore all non-alphabetic\
    \ characters and only count the letters a-z.\nThe function should ignore all non-alphabetic\
    \ characters and only count the letters a-z.\nThe function should ignore all non-alphabetic\
    \ characters and only count the letters a-z.\nThe function should ignore all non-alphabetic\
    \ characters and only count the letters a-z.\nThe function should ignore all non-alphabetic\
    \ characters and only count the letters a-z.\nThe function should ignore all non-alphabetic\
    \ characters and only count the letters a-z.\nThe function should ignore all non-alphabetic\
    \ characters and only count the letters a-z.\nThe function should ignore all non-alphabetic\
    \ characters and only count the letters a-z.\nThe function should ignore all non-alphabetic ",
  "    \n    letters = test.split()\n    letters_count = {}\n    for letter in letters:\n\
    \        if letter in letters_count:\n            letters_count[letter] += 1\n\
    \        else:\n            letters_count[letter] = 1\n    return letters_count\n",
  "    \n    letters = test.split()\n    \n    letters_occurrences = {}\n    \n  \
    \  for letter in letters:\n        if letter in letters_occurrences:\n       \
    \     letters_occurrences[letter] += 1\n        else:\n            letters_occurrences[letter]\
    \ = 1\n    \n    return letters_occurrences\n", "    letters = test.split()\n\
    \    letters_dict = {}\n    for letter in letters:\n        if letter in letters_dict:\n\
    \            letters_dict[letter] += 1\n        else:\n            letters_dict[letter]\
    \ = 1\n    return letters_dict\n", "    \n    histogram = {}\n    \n    for letter\
    \ in test:\n        if letter in histogram:\n            histogram[letter] +=\
    \ 1\n        else:\n            histogram[letter] = 1\n    \n    return histogram\n",
  "    letters = test.split()\n    letter_dict = {}\n    for letter in letters:\n\
    \        if letter in letter_dict:\n            letter_dict[letter] += 1\n   \
    \     else:\n            letter_dict[letter] = 1\n    return letter_dict\n", " \
    \   \n    letters = test.split()\n    letters = list(letters)\n    letters.sort()\n\
    \    letters = list(letters)\n    letters.reverse()\n    letters = list(letters)\n\
    \    letters.reverse()\n    letters = list(letters)\n    letters.reverse()\n \
    \   letters = list(letters)\n    letters.reverse()\n    letters = list(letters)\n\
    \    letters.reverse()\n    letters = list(letters)\n    letters.reverse()\n \
    \   letters = list(letters)\n    letters.reverse()\n    letters = list(letters)\n\
    \    letters.reverse()\n    letters = list(letters)\n    letters.reverse()\n \
    \   letters = list(letters)\n    letters.reverse()\n    letters = list(letters)\n\
    \    letters.reverse()\n    letters = list(letters)\n    letters.reverse()\n \
    \   letters = list(letters)\n    letters.reverse()\n    letters = list(letters)\n\
    \    letters.reverse()\n    letters = list(letters)\n    letters.reverse()\n \
    \   letters = list(letters)\n    letters.reverse()\n    letters = list(letters)\n\
    \    letters.reverse()\n    letters = list(letters)\n    letters.reverse()\n \
    \   letters = list(letters)\n    letters.reverse()\n    letters = list(letters)\n\
    \    letters.reverse()\n    letters = list(letters)\n    letters.reverse()\n \
    \   letters = list(letters)\n    letters.reverse()\n    letters = list(letters)\n\
    \    letters.reverse()\n    letters = list(letters)\n    letters.reverse()\n \
    \   letters = list(letters)\n    letters.reverse()\n    letters = list(letters)\n\
    \    letters.reverse()\n    letters = list(letters)\n    letters.reverse()\n \
    \   letters = list(letters)\n    letters.reverse()\n    letters = list(letters)\n\
    \    letters.reverse()\n    letters = list(letters)\n    letters.reverse()\n \
    \   letters = list(letters)\n    letters.reverse()\n    letters = list(letters)\n\
    \    letters.reverse()\n    letters = list(letters)\n    letters.reverse()\n \
    \   letters = list(letters)\n    letters.reverse()\n    letters = list(letters)\n\
    \    letters.reverse()\n    letters = list(letters)\n    letters.reverse()\n \
    \   letters = list(letters)\n    letters.reverse()\n    letters = list(letters)\n\
    \    letters.reverse()\n    letters = list(letters)\n    letters.reverse()\n \
    \   letters = list(letters)\n    letters.reverse()\n    letters = list(letters)\n\
    \    letters.reverse()\n    letter", "    \n    letters = test.split()\n    letters\
    \ = list(set(letters))\n    letters.sort()\n    \n    counts = {}\n    for letter\
    \ in letters:\n        counts[letter] = 0\n    \n    for letter in letters:\n\
    \        counts[letter] += 1\n    \n    return counts\n", "    \n    histogram\
    \ = {}\n    \n    for letter in test:\n        if letter in histogram:\n     \
    \       histogram[letter] += 1\n        else:\n            histogram[letter] =\
    \ 1\n    \n    return histogram\n", "    letters = test.split()\n    letters_count\
    \ = Counter(letters)\n    return letters_count\n", "    \n    histogram = {}\n\
    \    \n    for letter in test:\n        if letter in histogram:\n            histogram[letter]\
    \ += 1\n        else:\n            histogram[letter] = 1\n    \n    return histogram\n",
  "    letters = test.split()\n    letter_dict = {}\n    for letter in letters:\n\
    \        if letter in letter_dict:\n            letter_dict[letter] += 1\n   \
    \     else:\n            letter_dict[letter] = 1\n    return letter_dict\n", " \
    \   letters = test.lower().split()\n    letters_count = Counter(letters)\n   \
    \ return letters_count\n", "    \n    histogram = {}\n    \n    letters = test.split()\n\
    \    \n    for letter in letters:\n        if letter in histogram:\n         \
    \   histogram[letter] += 1\n        else:\n            histogram[letter] = 1\n\
    \    \n    return histogram\n", "    \n    letters = test.split()\n    counts\
    \ = {}\n    for letter in letters:\n        if letter in counts:\n           \
    \ counts[letter] += 1\n        else:\n            counts[letter] = 1\n    return\
    \ counts\n", "    \n    letters = test.lower().split()\n    counts = {}\n    for\
    \ letter in letters:\n        if letter in counts:\n            counts[letter]\
    \ += 1\n        else:\n            counts[letter] = 1\n    return counts\n", " \
    \   \n    letters = test.split()\n    letters_count = Counter(letters)\n    \n\
    \    letters_count_sorted = sorted(letters_count.items(), key=lambda x: x[1],\
    \ reverse=True)\n    \n    return letters_count_sorted\n</cell>\n<cell>\nhistogram(\"\
    a b c d e f g h i j k l m n o p q r s t u v w x y z\")\n</cell>\n<text>\nExercise\n\
    Write a function that takes a string as input and returns a list of all words\
    \ in the string that have length greater than or equal to 3.\n\n\n</text>\n<cell>",
  "    \n    letters = test.split()\n    \n    histogram = {}\n    \n    for letter\
    \ in letters:\n        if letter in histogram:\n            histogram[letter]\
    \ += 1\n        else:\n            histogram[letter] = 1\n    \n    return histogram\n\
    </cell>\n<cell>\nhistogram('a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b ", "    \n    histogram = {}\n    \n    for letter in\
    \ test:\n        if letter in histogram:\n            histogram[letter] += 1\n\
    \        else:\n            histogram[letter] = 1\n    \n    return histogram\n\
    </cell>\n<cell>\nhistogram(\"abracadabra\")\n</cell>\n<cell>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<cell>\nhistogram(\"abracadabra\")\n</cell>\n<cell>\nhistogram(\"\
    abracadabra\")\n</cell>\n<cell>\nhistogram(\"abracadabra\")\n</cell>\n<cell>\n\
    histogram(\"abracadabra\")\n</cell>\n<cell>\nhistogram(\"abracadabra\")\n</cell>\n\
    <cell>\nhistogram(\"abracadabra\")\n</cell>\n<cell>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<cell>\nhistogram(\"abracadabra\")\n</cell>\n<cell>\nhistogram(\"\
    abracadabra\")\n</cell>\n<cell>\nhistogram(\"abracadabra\")\n</cell>\n<cell>\n\
    histogram(\"abracadabra\")\n</cell>\n<cell>\nhistogram(\"abracadabra\")\n</cell>\n\
    <cell>\nhistogram(\"abracadabra\")\n</cell>\n<cell>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<cell>\nhistogram(\"abracadabra\")\n</cell>\n<cell>\nhistogram(\"\
    abracadabra\")\n</cell>\n<cell>\nhistogram(\"abracadabra\")\n</cell>\n<cell>\n\
    histogram(\"abracadabra\")\n</cell>\n<cell>\nhistogram(\"abracadabra\")\n</cell>\n\
    <cell>\nhistogram(\"abracadabra\")\n</cell>\n<cell>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<cell>\nhistogram(\"abracadabra\")\n</cell>\n<cell>\nhistogram(\"\
    abracadabra\")\n</cell>\n<cell>\nhistogram(\"abracadabra\")\n</cell>\n<cell>\n\
    histogram(\"abracadabra\")\n</cell>\n<cell>\nhistogram(\"abracadabra", "    \n\
    \    histogram = {}\n    \n    for letter in test:\n        if letter in histogram:\n\
    \            histogram[letter] += 1\n        else:\n            histogram[letter]\
    \ = 1\n    \n    return histogram\n", "    \n    histogram = {}\n    \n    letters\
    \ = test.split()\n    \n    for letter in letters:\n        if letter in histogram:\n\
    \            histogram[letter] += 1\n        else:\n            histogram[letter]\
    \ = 1\n    \n    return histogram\n", "    \n    histogram = {}\n    \n    for\
    \ letter in test:\n        if letter in histogram:\n            histogram[letter]\
    \ += 1\n        else:\n            histogram[letter] = 1\n    \n    return histogram\n",
  "    \n    histogram = {}\n    \n    for letter in test:\n        if letter in histogram:\n\
    \            histogram[letter] += 1\n        else:\n            histogram[letter]\
    \ = 1\n    \n    return histogram\n", "    \n    histogram = {}\n    \n    for\
    \ letter in test:\n        if letter in histogram:\n            histogram[letter]\
    \ += 1\n        else:\n            histogram[letter] = 1\n    \n    return histogram\n\
    </cell>\n<cell>\nhistogram(\"abba\")\n</cell>\n<cell>\nhistogram(\"abba\")\n</cell>\n\
    <cell>\nhistogram(\"abba\")\n</cell>\n<cell>\nhistogram(\"abba\")\n</cell>\n<cell>\n\
    histogram(\"abba\")\n</cell>\n<cell>\nhistogram(\"abba\")\n</cell>\n<cell>\nhistogram(\"\
    abba\")\n</cell>\n<cell>\nhistogram(\"abba\")\n</cell>\n<cell>\nhistogram(\"abba\"\
    )\n</cell>\n<cell>\nhistogram(\"abba\")\n</cell>\n<cell>\nhistogram(\"abba\")\n\
    </cell>\n<cell>\nhistogram(\"abba\")\n</cell>\n<cell>\nhistogram(\"abba\")\n</cell>\n\
    <cell>\nhistogram(\"abba\")\n</cell>\n<cell>\nhistogram(\"abba\")\n</cell>\n<cell>\n\
    histogram(\"abba\")\n</cell>\n<cell>\nhistogram(\"abba\")\n</cell>\n<cell>\nhistogram(\"\
    abba\")\n</cell>\n<cell>\nhistogram(\"abba\")\n</cell>\n<cell>\nhistogram(\"abba\"\
    )\n</cell>\n<cell>\nhistogram(\"abba\")\n</cell>\n<cell>\nhistogram(\"abba\")\n\
    </cell>\n<cell>\nhistogram(\"abba\")\n</cell>\n<cell>\nhistogram(\"abba\")\n</cell>\n\
    <cell>\nhistogram(\"abba\")\n</cell>\n<cell>\nhistogram(\"abba\")\n</cell>\n<cell>\n\
    histogram(\"abba\")\n</cell>\n<cell>\nhistogram(\"abba\")\n</cell>\n<cell>\nhistogram(\"\
    abba\")\n</cell>\n<cell>\nhistogram(\"abba\")\n</cell>\n<cell>\nhistogram(\"abba\"\
    )\n</cell>\n<cell>\nhistogram(\"abba\")\n</cell>\n<cell>\nhistogram(\"abba\")\n\
    </cell>\n<cell>\nhistogram(\"abba", "    \n    letters = test.split()\n    letter_dict\
    \ = {}\n    for letter in letters:\n        if letter in letter_dict:\n      \
    \      letter_dict[letter] += 1\n        else:\n            letter_dict[letter]\
    \ = 1\n    return letter_dict\n", "    letters = test.lower().split()\n    counts\
    \ = {}\n    for letter in letters:\n        if letter in counts:\n           \
    \ counts[letter] += 1\n        else:\n            counts[letter] = 1\n    return\
    \ counts\n", "    letters = test.split()\n    counts = {}\n    for letter in letters:\n\
    \        if letter in counts:\n            counts[letter] += 1\n        else:\n\
    \            counts[letter] = 1\n    return counts\n", "    \n    histogram =\
    \ {}\n    \n    letters = test.split()\n    \n    for letter in letters:\n   \
    \     if letter in histogram:\n            histogram[letter] += 1\n        else:\n\
    \            histogram[letter] = 1\n    \n    return histogram\n", "    \n   \
    \ letters = test.split()\n    letters = list(map(lambda x: x.lower(), letters))\n\
    \    letters = list(set(letters))\n    letters.sort()\n    letters = list(map(lambda\
    \ x: x.lower(), letters))\n    letters = list(map(lambda x: letters.count(x),\
    \ letters))\n    letters = list(map(lambda x: x/len(letters), letters))\n    letters\
    \ = list(map(lambda x: round(x, 2), letters))\n    letters = list(map(lambda x:\
    \ round(x, 2), letters))\n    letters = list(map(lambda x: round(x, 2), letters))\n\
    \    letters = list(map(lambda x: round(x, 2), letters))\n    letters = list(map(lambda\
    \ x: round(x, 2), letters))\n    letters = list(map(lambda x: round(x, 2), letters))\n\
    \    letters = list(map(lambda x: round(x, 2), letters))\n    letters = list(map(lambda\
    \ x: round(x, 2), letters))\n    letters = list(map(lambda x: round(x, 2), letters))\n\
    \    letters = list(map(lambda x: round(x, 2), letters))\n    letters = list(map(lambda\
    \ x: round(x, 2), letters))\n    letters = list(map(lambda x: round(x, 2), letters))\n\
    \    letters = list(map(lambda x: round(x, 2), letters))\n    letters = list(map(lambda\
    \ x: round(x, 2), letters))\n    letters = list(map(lambda x: round(x, 2), letters))\n\
    \    letters = list(map(lambda x: round(x, 2), letters))\n    letters = list(map(lambda\
    \ x: round(x, 2), letters))\n    letters = list(map(lambda x: round(x, 2), letters))\n\
    \    letters = list(map(lambda x: round(x, 2), letters))\n    letters = list(map(lambda\
    \ x: round(x, 2), letters))\n    letters = list(map(lambda x: round(x, 2), letters))\n\
    \    letters = list(map(lambda x: round(x, 2), letters))\n    letters = list(map(lambda\
    \ x: round(x, 2), letters))\n    letters = list(map(lambda x: round(x, 2), letters))\n\
    \    letters = list(map(lambda x: round(x, 2), letters))\n    letters = list(map(lambda\
    \ x: round(x, 2), letters))\n    letters = list(map(lambda x: round(x, 2), letters))\n\
    \    letters = list(map(lambda x: round(x, 2), letters))\n    letters = list(map(lambda\
    \ x: round(x, 2), letters))\n    letters = list(map(lambda x: round(x, 2), letters))\n\
    \    letters = list(map(lambda x: round(x, 2), letters))\n    letters = list(map(lambda\
    \ x: round(x, 2), letters))\n    letters = list(map(lambda x: round(x, 2), letters))\n\
    \    letters = list(map(lambda x: round(x, 2), letters))\n    letters = list(map(lambda\
    \ x: round(x, 2), letters))\n    letters = list(map(lambda x: round(x, 2), letters))\n\
    \    letters = list(map(lambda x: round(x, 2), letters))\n    letters = list(map(lambda\
    \ x: round(x, 2), letters))\n    letters = list(map(lambda x: round(x, 2), letters))\n\
    \    letters = list(map(lambda x: round(x, 2), letters))\n    letters = list(map(lambda\
    \ x: round(x, 2), letter", "    \n    histogram = {}\n    \n    letters = test.split()\n\
    \    \n    for letter in letters:\n        if letter in histogram:\n         \
    \   histogram[letter] += 1\n        else:\n            histogram[letter] = 1\n\
    \    \n    return histogram\n", "    \n    histogram = {}\n    \n    letters =\
    \ test.split()\n    \n    for letter in letters:\n        if letter in histogram:\n\
    \            histogram[letter] += 1\n        else:\n            histogram[letter]\
    \ = 1\n    \n    return histogram\n", "    \n    histogram = {}\n    \n    for\
    \ letter in test:\n        if letter in histogram:\n            histogram[letter]\
    \ += 1\n        else:\n            histogram[letter] = 1\n    \n    return histogram\n",
  "    \n    letters = test.lower().split()\n    \n    counts = {}\n    \n    for\
    \ letter in letters:\n        if letter in counts:\n            counts[letter]\
    \ += 1\n        else:\n            counts[letter] = 1\n    \n    return counts\n",
  "    \n    letters = test.split()\n    letter_dict = {}\n    \n    for letter in\
    \ letters:\n        if letter in letter_dict:\n            letter_dict[letter]\
    \ += 1\n        else:\n            letter_dict[letter] = 1\n    \n    return letter_dict\n",
  "    letters = test.lower().split()\n    letter_dict = {}\n    for letter in letters:\n\
    \        if letter in letter_dict:\n            letter_dict[letter] += 1\n   \
    \     else:\n            letter_dict[letter] = 1\n    return letter_dict\n", " \
    \   \n    letters = test.split()\n    letters_count = Counter(letters)\n    letters_count.most_common()\n\
    \    \n    return letters_count\n", "    \n    letters = test.split()\n    letter_dict\
    \ = {}\n    for letter in letters:\n        if letter in letter_dict:\n      \
    \      letter_dict[letter] += 1\n        else:\n            letter_dict[letter]\
    \ = 1\n    return letter_dict\n", "    \n    letters = test.split()\n    letters\
    \ = list(set(letters))\n    letters.sort()\n    letters = list(dict.fromkeys(letters))\n\
    \    letters.sort()\n    letters = list(dict.fromkeys(letters))\n    letters.sort()\n\
    \    letters = list(dict.fromkeys(letters))\n    letters.sort()\n    letters =\
    \ list(dict.fromkeys(letters))\n    letters.sort()\n    letters = list(dict.fromkeys(letters))\n\
    \    letters.sort()\n    letters = list(dict.fromkeys(letters))\n    letters.sort()\n\
    \    letters = list(dict.fromkeys(letters))\n    letters.sort()\n    letters =\
    \ list(dict.fromkeys(letters))\n    letters.sort()\n    letters = list(dict.fromkeys(letters))\n\
    \    letters.sort()\n    letters = list(dict.fromkeys(letters))\n    letters.sort()\n\
    \    letters = list(dict.fromkeys(letters))\n    letters.sort()\n    letters =\
    \ list(dict.fromkeys(letters))\n    letters.sort()\n    letters = list(dict.fromkeys(letters))\n\
    \    letters.sort()\n    letters = list(dict.fromkeys(letters))\n    letters.sort()\n\
    \    letters = list(dict.fromkeys(letters))\n    letters.sort()\n    letters =\
    \ list(dict.fromkeys(letters))\n    letters.sort()\n    letters = list(dict.fromkeys(letters))\n\
    \    letters.sort()\n    letters = list(dict.fromkeys(letters))\n    letters.sort()\n\
    \    letters = list(dict.fromkeys(letters))\n    letters.sort()\n    letters =\
    \ list(dict.fromkeys(letters))\n    letters.sort()\n    letters = list(dict.fromkeys(letters))\n\
    \    letters.sort()\n    letters = list(dict.fromkeys(letters))\n    letters.sort()\n\
    \    letters = list(dict.fromkeys(letters))\n    letters.sort()\n    letters =\
    \ list(dict.fromkeys(letters))\n    letters.sort()\n    letters = list(dict.fromkeys(letters))\n\
    \    letters.sort()\n    letters = list(dict.fromkeys(letters))\n    letters.sort()\n\
    \    letters = list(dict.fromkeys(letters))\n    letters.sort()\n    letters =\
    \ list(dict.fromkeys(letters))\n    letters.sort()\n    letters = list(dict.fromkeys(letters))\n\
    \    letters.sort()\n    letters = list(dict.fromkeys(letters))\n    letters.sort()\n\
    \    letters = list(dict.fromkeys(letters))\n    letters.sort()\n    letters =\
    \ list(dict.fromkeys(letters))\n    letters.sort()\n    letters = list(dict.fromkeys(letters))\n\
    \    letters.sort()\n    letters = list(dict.fromkeys(letters))\n    letters.sort()\n\
    \    letters = list(dict.fromkeys(letters))\n    letters.sort()\n    letters =\
    \ list(dict.fromkeys(letters))\n    letters.sort()\n    letters = list(dict.fromkeys(letters))\n\
    \    letters.sort()\n    letters = list(dict.fromkeys(letters))\n    letters.sort()",
  "    \n    letters = test.split()\n    counts = {}\n    for letter in letters:\n\
    \        if letter in counts:\n            counts[letter] += 1\n        else:\n\
    \            counts[letter] = 1\n    return counts\n</cell>\n<cell>\nhistogram(\"\
    a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a ", "    \n    histogram = {}\n    \n    for letter in test:\n        if\
    \ letter in histogram:\n            histogram[letter] += 1\n        else:\n  \
    \          histogram[letter] = 1\n    \n    return histogram\n", "    \n    letters\
    \ = test.split()\n    letters_count = dict()\n    for letter in letters:\n   \
    \     if letter in letters_count:\n            letters_count[letter] += 1\n  \
    \      else:\n            letters_count[letter] = 1\n    return letters_count\n",
  "    letters = test.split()\n    letters_count = {}\n    for letter in letters:\n\
    \        if letter in letters_count:\n            letters_count[letter] += 1\n\
    \        else:\n            letters_count[letter] = 1\n    return letters_count\n\
    </cell>\n<cell>\nhistogram(\"a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a ", "    \n    histogram = {}\n    \n    for letter in\
    \ test:\n        if letter in histogram:\n            histogram[letter] += 1\n\
    \        else:\n            histogram[letter] = 1\n    \n    return histogram\n",
  "    \n    letters = test.split()\n    letters_count = {}\n    for letter in letters:\n\
    \        if letter in letters_count:\n            letters_count[letter] += 1\n\
    \        else:\n            letters_count[letter] = 1\n    return letters_count\n",
  "    \n    letters = test.split()\n    letters_count = Counter(letters)\n    letters_count.most_common()\n\
    \    \n    return letters_count\n</cell>\n<cell>\nhistogram(\"a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a ", "    \n    letters = test.split()\n    counts = {}\n    for\
    \ letter in letters:\n        if letter in counts:\n            counts[letter]\
    \ += 1\n        else:\n            counts[letter] = 1\n    return counts\n", " \
    \   \n    letters = test.split()\n    letters_count = Counter(letters)\n    \n\
    \    return letters_count\n</cell>\n<cell>\nhistogram(\"a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c ", "    \n    letters = test.split()\n    \n    counts\
    \ = {}\n    \n    for letter in letters:\n        if letter in counts:\n     \
    \       counts[letter] += 1\n        else:\n            counts[letter] = 1\n \
    \   \n    return counts\n    ", "    \n    letters = test.split()\n    letters_count\
    \ = {}\n    \n    for letter in letters:\n        if letter in letters_count:\n\
    \            letters_count[letter] += 1\n        else:\n            letters_count[letter]\
    \ = 1\n    \n    return letters_count\n</cell>\n<cell>\nhistogram(\"a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a ", "    \n    histogram =\
    \ {}\n    \n    for letter in test:\n        if letter in histogram:\n       \
    \     histogram[letter] += 1\n        else:\n            histogram[letter] = 1\n\
    \    \n    return histogram\n", "    \n    histogram = {}\n    \n    letters =\
    \ test.split()\n    \n    for letter in letters:\n        if letter in histogram:\n\
    \            histogram[letter] += 1\n        else:\n            histogram[letter]\
    \ = 1\n    \n    return histogram\n</cell>\n<cell>\nhistogram('a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b ", "    \n    letters\
    \ = test.split()\n    letters_count = Counter(letters)\n    \n    return letters_count\n",
  "    \n    letters = test.split()\n    letters_count = {}\n    \n    for letter\
    \ in letters:\n        if letter in letters_count:\n            letters_count[letter]\
    \ += 1\n        else:\n            letters_count[letter] = 1\n    \n    return\
    \ letters_count\n</cell>\n<cell>\nhistogram(\"a b c d e f g h i j k l m n o p\
    \ q r s t u v w x y z\")\n</cell>\n<text>\nExercise\nWrite a function that takes\
    \ a string and returns the number of words in the string. \nThe function should\
    \ ignore all punctuation and only count the letters a-z.\nThe function should\
    \ ignore all spaces and only count the letters a-z.\nThe function should ignore\
    \ all special characters and only count the letters a-z.\nThe function should\
    \ ignore all numbers and only count the letters a-z.\nThe function should ignore\
    \ all special characters and only count the letters a-z.\nThe function should\
    \ ignore all punctuation and only count the letters a-z.\nThe function should\
    \ ignore all spaces and only count the letters a-z.\nThe function should ignore\
    \ all special characters and only count the letters a-z.\nThe function should\
    \ ignore all numbers and only count the letters a-z.\nThe function should ignore\
    \ all special characters and only count the letters a-z.\nThe function should\
    \ ignore all punctuation and only count the letters a-z.\nThe function should\
    \ ignore all spaces and only count the letters a-z.\nThe function should ignore\
    \ all special characters and only count the letters a-z.\nThe function should\
    \ ignore all numbers and only count the letters a-z.\nThe function should ignore\
    \ all special characters and only count the letters a-z.\nThe function should\
    \ ignore all punctuation and only count the letters a-z.\nThe function should\
    \ ignore all spaces and only count the letters a-z.\nThe function should ignore\
    \ all special characters and only count the letters a-z.\nThe function should\
    \ ignore all numbers and only count the letters a-z.\nThe function should ignore\
    \ all special characters and only count the letters a-z.\nThe function should\
    \ ignore all punctuation and only count the letters a-z.\nThe function should\
    \ ignore all spaces and only count the letters a-z.\nThe function should ignore\
    \ all special characters and only count the letters a-z.\nThe function should\
    \ ignore all numbers and only count the letters a-z.\nThe function should ignore\
    \ all special characters and only count the letters a-z.\nThe function should\
    \ ignore all punctuation and only count the letters a-z", "    \n    histogram\
    \ = {}\n    \n    for letter in test:\n        if letter in histogram:\n     \
    \       histogram[letter] += 1\n        else:\n            histogram[letter] =\
    \ 1\n            \n    return histogram\n", "    \n    letters = test.split()\n\
    \    \n    letters_count = {}\n    \n    for letter in letters:\n        if letter\
    \ in letters_count:\n            letters_count[letter] += 1\n        else:\n \
    \           letters_count[letter] = 1\n    \n    return letters_count\n", "  \
    \  letters = test.lower().split()\n    letter_dict = {}\n    for letter in letters:\n\
    \        if letter in letter_dict:\n            letter_dict[letter] += 1\n   \
    \     else:\n            letter_dict[letter] = 1\n    return letter_dict\n", " \
    \   \n    letters = test.split()\n    letters_count = {}\n    for letter in letters:\n\
    \        if letter in letters_count:\n            letters_count[letter] += 1\n\
    \        else:\n            letters_count[letter] = 1\n    return letters_count\n",
  "    \n    letters = test.lower().split()\n    letters_count = Counter(letters)\n\
    \    \n    letters_count_sorted = sorted(letters_count.items(), key=lambda x:\
    \ x[1], reverse=True)\n    \n    letters_count_sorted_list = list(letters_count_sorted)\n\
    \    \n    letters_count_sorted_list_sorted = sorted(letters_count_sorted_list,\
    \ key=lambda x: x[0])\n    \n    letters_count_sorted_list_sorted_dict = dict(letters_count_sorted_list_sorted)\n\
    \    \n    return letters_count_sorted_list_sorted_dict\n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    \n    histogram = {}\n    \n\
    \    for letter in test:\n        if letter in histogram:\n            histogram[letter]\
    \ += 1\n        else:\n            histogram[letter] = 1\n    \n    return histogram\n\
    </cell>\n<cell>\nhistogram(\"abc def ghi jkl mno pqr\")\n</cell>\n<cell>\nhistogram(\"\
    abc def ghi jkl mno pqr\")\n</cell>\n<cell>\nhistogram(\"abc def ghi jkl mno pqr\"\
    )\n</cell>\n<cell>\nhistogram(\"abc def ghi jkl mno pqr\")\n</cell>\n<cell>\n\
    histogram(\"abc def ghi jkl mno pqr\")\n</cell>\n<cell>\nhistogram(\"abc def ghi\
    \ jkl mno pqr\")\n</cell>\n<cell>\nhistogram(\"abc def ghi jkl mno pqr\")\n</cell>\n\
    <cell>\nhistogram(\"abc def ghi jkl mno pqr\")\n</cell>\n<cell>\nhistogram(\"\
    abc def ghi jkl mno pqr\")\n</cell>\n<cell>\nhistogram(\"abc def ghi jkl mno pqr\"\
    )\n</cell>\n<cell>\nhistogram(\"abc def ghi jkl mno pqr\")\n</cell>\n<cell>\n\
    histogram(\"abc def ghi jkl mno pqr\")\n</cell>\n<cell>\nhistogram(\"abc def ghi\
    \ jkl mno pqr\")\n</cell>\n<cell>\nhistogram(\"abc def ghi jkl mno pqr\")\n</cell>\n\
    <cell>\nhistogram(\"abc def ghi jkl mno pqr\")\n</cell>\n<cell>\nhistogram(\"\
    abc def ghi jkl mno pqr\")\n</cell>\n<cell>\nhistogram(\"abc def ghi jkl mno pqr\"\
    )\n</cell>\n<cell>\nhistogram(\"abc def ghi jkl mno pqr\")\n</cell>\n<cell>\n\
    histogram(\"abc def ghi jkl mno pqr\")\n</cell>\n<cell>\nhistogram(\"abc def ghi\
    \ jkl mno pqr\")\n</cell>\n<cell>\nhistogram(\"abc def gh", "    \n    histogram\
    \ = {}\n    \n    for letter in test:\n        if letter in histogram:\n     \
    \       histogram[letter] += 1\n        else:\n            histogram[letter] =\
    \ 1\n    \n    return histogram\n", "    letters = test.split()\n    counts =\
    \ {}\n    for letter in letters:\n        if letter in counts:\n            counts[letter]\
    \ += 1\n        else:\n            counts[letter] = 1\n    return counts\n", " \
    \   letters = test.split()\n    letters_count = {}\n    for letter in letters:\n\
    \        if letter in letters_count:\n            letters_count[letter] += 1\n\
    \        else:\n            letters_count[letter] = 1\n    return letters_count\n",
  "    \n    histogram = {}\n    \n    letters = test.split()\n    \n    for letter\
    \ in letters:\n        if letter in histogram:\n            histogram[letter]\
    \ += 1\n        else:\n            histogram[letter] = 1\n    \n    return histogram\n",
  "    letters = test.split()\n    letters_count = Counter(letters)\n    return letters_count\n",
  "    \n    histogram = {}\n    \n    for letter in test:\n        if letter in histogram:\n\
    \            histogram[letter] += 1\n        else:\n            histogram[letter]\
    \ = 1\n    \n    return histogram\n</cell>\n<cell>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<cell>\nhistogram(\"abracadabra\")\n</cell>\n<cell>\nhistogram(\"\
    abracadabra\")\n</cell>\n<cell>\nhistogram(\"abracadabra\")\n</cell>\n<cell>\n\
    histogram(\"abracadabra\")\n</cell>\n<cell>\nhistogram(\"abracadabra\")\n</cell>\n\
    <cell>\nhistogram(\"abracadabra\")\n</cell>\n<cell>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<cell>\nhistogram(\"abracadabra\")\n</cell>\n<cell>\nhistogram(\"\
    abracadabra\")\n</cell>\n<cell>\nhistogram(\"abracadabra\")\n</cell>\n<cell>\n\
    histogram(\"abracadabra\")\n</cell>\n<cell>\nhistogram(\"abracadabra\")\n</cell>\n\
    <cell>\nhistogram(\"abracadabra\")\n</cell>\n<cell>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<cell>\nhistogram(\"abracadabra\")\n</cell>\n<cell>\nhistogram(\"\
    abracadabra\")\n</cell>\n<cell>\nhistogram(\"abracadabra\")\n</cell>\n<cell>\n\
    histogram(\"abracadabra\")\n</cell>\n<cell>\nhistogram(\"abracadabra\")\n</cell>\n\
    <cell>\nhistogram(\"abracadabra\")\n</cell>\n<cell>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<cell>\nhistogram(\"abracadabra\")\n</cell>\n<cell>\nhistogram(\"\
    abracadabra\")\n</cell>\n<cell>\nhistogram(\"abracadabra\")\n</cell>\n<cell>\n\
    histogram(\"abracadabra\")\n</cell>\n<cell>\nhistogram(\"abracadabra\")\n</cell>\n\
    <cell>\nhistogram(\"abracadabra", "    letters = test.lower().split()\n    counts\
    \ = {}\n    for letter in letters:\n        if letter in counts:\n           \
    \ counts[letter] += 1\n        else:\n            counts[letter] = 1\n    return\
    \ counts\n", "    letters = test.split()\n    counts = {}\n    for letter in letters:\n\
    \        if letter in counts:\n            counts[letter] += 1\n        else:\n\
    \            counts[letter] = 1\n    return counts\n", "    letters = test.split()\n\
    \    letters_count = Counter(letters)\n    most_common = letters_count.most_common(1)[0][0]\n\
    \    most_common_count = letters_count[most_common]\n    \n    return {\"most_common\"\
    : most_common, \"count\": most_common_count}\n</cell>\n<cell>\nhistogram(\"a b\
    \ c a b c a b c a b c\")\n</cell>\n<cell>\nhistogram(\"a b c a b c a b c a b c\
    \ a b c\")\n</cell>\n<cell>\nhistogram(\"a b c a b c a b c a b c a b c\")\n</cell>\n\
    <cell>\nhistogram(\"a b c a b c a b c a b c a b c\")\n</cell>\n<cell>\nhistogram(\"\
    a b c a b c a b c a b c a b c\")\n</cell>\n<cell>\nhistogram(\"a b c a b c a b\
    \ c a b c a b c\")\n</cell>\n<cell>\nhistogram(\"a b c a b c a b c a b c a b c\"\
    )\n</cell>\n<cell>\nhistogram(\"a b c a b c a b c a b c a b c\")\n</cell>\n<cell>\n\
    histogram(\"a b c a b c a b c a b c a b c\")\n</cell>\n<cell>\nhistogram(\"a b\
    \ c a b c a b c a b c a b c\")\n</cell>\n<cell>\nhistogram(\"a b c a b c a b c\
    \ a b c a b c\")\n</cell>\n<cell>\nhistogram(\"a b c a b c a b c a b c a b c\"\
    )\n</cell>\n<cell>\nhistogram(\"a b c a b c a b c a b c a b c\")\n</cell>\n<cell>\n\
    histogram(\"a b c a b c a b c a b c a b c\")\n</cell>\n<cell>\nhistogram(\"a b\
    \ c a b c a b c a b c a b c\")\n</cell>\n<cell>\nhistogram(\"a b c a b c a b c\
    \ a b c a b c\")\n</cell>\n<cell>\nhistogram(\"a b c a b c a b c a b c a b c\"\
    )\n</cell>\n<cell>\nhistogram(\"a b c a b c a b ", "    \n    letters = test.split()\n\
    \    letter_dict = {}\n    \n    for letter in letters:\n        if letter in\
    \ letter_dict:\n            letter_dict[letter] += 1\n        else:\n        \
    \    letter_dict[letter] = 1\n    \n    return letter_dict\n", "    \n    letters\
    \ = test.split()\n    letters_count = {}\n    \n    for letter in letters:\n \
    \       if letter in letters_count:\n            letters_count[letter] += 1\n\
    \        else:\n            letters_count[letter] = 1\n    \n    return letters_count\n\
    </cell>\n<cell>\nhistogram(\"a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a ", "    letters = test.split()\n    counts = {}\n    for letter in\
    \ letters:\n        if letter in counts:\n            counts[letter] += 1\n  \
    \      else:\n            counts[letter] = 1\n    return counts\n", "    letters\
    \ = test.split()\n    letters_count = Counter(letters)\n    most_frequent_letter\
    \ = letters_count.most_common(1)[0][0]\n    most_frequent_count = letters_count.most_common(1)[0][1]\n\
    \    \n    return {\"most_frequent_letter\": most_frequent_letter, \"most_frequent_count\"\
    : most_frequent_count}\n</cell>\n<cell>\nhistogram(\"a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a ", "    \n    letters = test.split()\n    letters_count = {}\n   \
    \ \n    for letter in letters:\n        if letter in letters_count:\n        \
    \    letters_count[letter] += 1\n        else:\n            letters_count[letter]\
    \ = 1\n    \n    return letters_count\n    \n    ", "    \n    letters = test.split()\n\
    \    \n    counts = {}\n    \n    for letter in letters:\n        if letter in\
    \ counts:\n            counts[letter] += 1\n        else:\n            counts[letter]\
    \ = 1\n    \n    return counts\n</cell>\n<cell>\nhistogram(\"a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a ", "    letters = test.split()\n\
    \    letters_count = Counter(letters)\n    most_frequent_letter = letters_count.most_common(1)[0][0]\n\
    \    most_frequent_count = letters_count[most_frequent_letter]\n    \n    return\
    \ most_frequent_letter, most_frequent_count\n</cell>\n<cell>\nhistogram(\"a b\
    \ c a b c a b c a b c a b c\")\n</cell>\n<cell>\nhistogram(\"a b c a b c a b c\
    \ a b c a b c a b c\")\n</cell>\n<cell>\nhistogram(\"a b c a b c a b c a b c a\
    \ b c a b c\")\n</cell>\n<cell>\nhistogram(\"a b c a b c a b c a b c a b c a b\
    \ c\")\n</cell>\n<cell>\nhistogram(\"a b c a b c a b c a b c a b c a b c\")\n\
    </cell>\n<cell>\nhistogram(\"a b c a b c a b c a b c a b c a b c\")\n</cell>\n\
    <cell>\nhistogram(\"a b c a b c a b c a b c a b c a b c\")\n</cell>\n<cell>\n\
    histogram(\"a b c a b c a b c a b c a b c a b c\")\n</cell>\n<cell>\nhistogram(\"\
    a b c a b c a b c a b c a b c a b c\")\n</cell>\n<cell>\nhistogram(\"a b c a b\
    \ c a b c a b c a b c a b c\")\n</cell>\n<cell>\nhistogram(\"a b c a b c a b c\
    \ a b c a b c a b c\")\n</cell>\n<cell>\nhistogram(\"a b c a b c a b c a b c a\
    \ b c a b c\")\n</cell>\n<cell>\nhistogram(\"a b c a b c a b c a b c a b c a b\
    \ c\")\n</cell>\n<cell>\nhistogram(\"a b c a b c a b c a b c a b c a b c\")\n\
    </cell>\n<cell>\nhistogram(\"a b c a b c a b c a b c a b c a b c\")\n</cell>\n\
    <cell>\nhistogram(\"a b c a b c a b c a b c a b c ", "    \n    letters = test.split()\n\
    \    \n    letter_dict = {}\n    \n    for letter in letters:\n        if letter\
    \ in letter_dict:\n            letter_dict[letter] += 1\n        else:\n     \
    \       letter_dict[letter] = 1\n    \n    return letter_dict\n</cell>\n<cell>\n\
    histogram(\"a b c d e f g h i j k l m n o p q r s t u v w x y z\")\n</cell>\n\
    <cell>\nhistogram(\"a b c d e f g h i j k l m n o p q r s t u v w x y z A B C\
    \ D E F G H I J K L M N O P Q R S T U V W X Y Z\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns the number of characters\
    \ in the string that are not alphabetic characters. \nFor example \"a!\" would\
    \ return 1.\n\n\n</text>\n<cell>", "    \n    letters = test.split()\n    \n \
    \   letters_count = dict()\n    \n    for letter in letters:\n        if letter\
    \ in letters_count:\n            letters_count[letter] += 1\n        else:\n \
    \           letters_count[letter] = 1\n    \n    return letters_count\n</cell>\n\
    <cell>\nhistogram(\"a b c d e f g h i j k l m n o p q r s t u v w x y z\")\n</cell>\n\
    <cell>\nhistogram(\"a b c d e f g h i j k l m n o p q r s t u v w x y z A B C\
    \ D E F G H I J K L M N O P Q R S T U V W X Y Z\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns the number of words in it.\n\
    \nExample: \n\"Hello World\" -> 2\n\n\"Hello World\" -> 1\n\n\"Hello World\" ->\
    \ 0\n\n\"Hello World\" -> 0\n\n\"Hello World\" -> 0\n\n\"Hello World\" -> 0\n\n\
    \"Hello World\" -> 0\n\n\"Hello World\" -> 0\n\n\"Hello World\" -> 0\n\n\"Hello\
    \ World\" -> 0\n\n\"Hello World\" -> 0\n\n\"Hello World\" -> 0\n\n\"Hello World\"\
    \ -> 0\n\n\"Hello World\" -> 0\n\n\"Hello World\" -> 0\n\n\"Hello World\" -> 0\n\
    \n\"Hello World\" -> 0\n\n\"Hello World\" -> 0\n\n\"Hello World\" -> 0\n\n\"Hello\
    \ World\" -> 0\n\n\"Hello World\" -> 0\n\n\"Hello World\" -> 0\n\n\"Hello World\"\
    \ -> 0\n\n\"Hello World\" -> 0\n\n\"Hello World\" -> 0\n\n\"Hello World\" -> 0\n\
    \n\"Hello World\" -> 0\n\n\"Hello World\" -> 0\n\n\"Hello World\" -> 0\n\n\"Hello\
    \ World\" -> 0\n\n\"Hello World\" -> 0\n\n\"Hello World\" -> 0\n\n\"Hello World\"\
    \ -> 0\n\n\"Hello World\" -> 0\n\n\"Hello World\" -> 0\n\n\"Hello World\" -> 0\n\
    \n\"Hello World\" -> 0\n\n\"Hello World\" -> 0\n\n\"Hello World\" -> 0\n\n\"Hello\
    \ World\" -> 0\n\n\"Hello World\" -> 0\n\n\"Hello World\" -> 0\n\n\"Hello World\"\
    \ -> 0\n\n\"Hello World\" -> 0\n\n\"Hello World\" -> 0\n\n\"Hello World\" -> 0\n\
    \n\"Hello World\" -> 0\n\n\"Hello "]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
