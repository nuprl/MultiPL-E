language: py
name: HumanEval_117_select_words
results:
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    assert select_words(\"abc\
    \ def ghi\", 3) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc\
    \ def ghi\", 2) == [\"abc\", \"def\"]\n    assert select_words(\"abc def ghi\"\
    , 1) == [\"abc\"]\n    assert select_words(\"abc def ghi\", 0) == []\n    assert\
    \ select_words(\"abc def ghi\", 5) == []\n    assert select_words(\"abc def ghi\"\
    , 4) == []\n    assert select_words(\"abc def ghi\", 6) == []\n    assert select_words(\"\
    abc def ghi\", 7) == []\n    assert select_words(\"abc def ghi\", 8) == []\n \
    \   assert select_words(\"abc def ghi\", 9) == []\n    assert select_words(\"\
    abc def ghi\", 10) == []\n    assert select_words(\"abc def ghi\", 11) == []\n\
    \    assert select_words(\"abc def ghi\", 12) == []\n    assert select_words(\"\
    abc def ghi\", 13) == []\n    assert select_words(\"abc def ghi\", 14) == []\n\
    \    assert select_words(\"abc def ghi\", 15) == []\n    assert select_words(\"\
    abc def ghi\", 16) == []\n    assert select_words(\"abc def ghi\", 17) == []\n\
    \    assert select_words(\"abc def ghi\", 18) == []\n    assert select_words(\"\
    abc def ghi\", 19) == []\n    assert select_words(\"abc def ghi\", 20) == []\n\
    \    assert select_words(\"abc def ghi\", 21) == []\n    assert select_words(\"\
    abc def ghi\", 22) == []\n    assert select_words(\"abc def ghi\", 23) == []\n\
    \    assert select_words(\"abc def ghi\", 24) == []\n    assert select_words(\"\
    abc def ghi\", 25) == []\n    assert select_words(\"abc def ghi\", 26) == []\n\
    \    assert select_words(\"abc def ghi\", 27) == []\n    assert select_words(\"\
    abc def ghi\", 28) == []\n    assert select_words(\"abc def ghi\", 29) == []\n\
    \    assert select_words(\"abc def ghi\", 30) == []\n    assert select_words(\"\
    abc def ghi\", 31) == []\n    assert select_words(\"abc def ghi\", 32) == []\n\
    \    assert select_words(\"abc def ghi\", 33) == []\n    assert select_words(\"\
    abc def ghi\", 34) == []\n    assert select_words(\"abc def ghi\", \ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpr0o3ssmn.py\", line 46\n    assert select_words(\"abc\
    \ def ghi\", \n                       ^\nSyntaxError: '(' was never closed\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    assert select_words(\"abc\
    \ def ghi\", 2) == [\"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\"\
    , 3) == []\n    assert select_words(\"abc def ghi\", 4) == []\n    assert select_words(\"\
    abc def ghi\", 5) == []\n    assert select_words(\"abc def ghi\", 6) == []\n \
    \   assert select_words(\"abc def ghi\", 7) == []\n    assert select_words(\"\
    abc def ghi\", 8) == []\n    assert select_words(\"abc def ghi\", 9) == []\n \
    \   assert select_words(\"abc def ghi\", 10) == []\n    assert select_words(\"\
    abc def ghi\", 11) == []\n    assert select_words(\"abc def ghi\", 12) == []\n\
    \    assert select_words(\"abc def ghi\", 13) == []\n    assert select_words(\"\
    abc def ghi\", 14) == []\n    assert select_words(\"abc def ghi\", 15) == []\n\
    \    assert select_words(\"abc def ghi\", 16) == []\n    assert select_words(\"\
    abc def ghi\", 17) == []\n    assert select_words(\"abc def ghi\", 18) == []\n\
    \    assert select_words(\"abc def ghi\", 19) == []\n    assert select_words(\"\
    abc def ghi\", 20) == []\n    assert select_words(\"abc def ghi\", 21) == []\n\
    \    assert select_words(\"abc def ghi\", 22) == []\n    assert select_words(\"\
    abc def ghi\", 23) == []\n    assert select_words(\"abc def ghi\", 24) == []\n\
    \    assert select_words(\"abc def ghi\", 25) == []\n    assert select_words(\"\
    abc def ghi\", 26) == []\n    assert select_words(\"abc def ghi\", 27) == []\n\
    \    assert select_words(\"abc def ghi\", 28) == []\n    assert select_words(\"\
    abc def ghi\", 29) == []\n    assert select_words(\"abc def ghi\", 30) == []\n\
    \    assert select_words(\"abc def ghi\", 31) == []\n    assert select_words(\"\
    abc def ghi\", 32) == []\n    assert select_words(\"abc def ghi\", 33) == []\n\
    \    assert select_words(\"abc def ghi\", 34) == []\n    assert select_words(\"\
    abc def ghi\", 35) == []\n    assert select_words(\"abc def ghi\", 36) == []\n\
    \    assert select_words(\"abc def ghi\", 37) == []\n    assert select_word\n\
    def check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert\
    \ candidate('simple white space', 2) == []\n    assert candidate('Hello world',\
    \ 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert\
    \ candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c',\
    \ 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwu8fs2ip.py\", line\
    \ 60, in <module>\n    test_check()\n  File \"/tmp/tmpwu8fs2ip.py\", line 58,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpwu8fs2ip.py\", line\
    \ 49, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmpwu8fs2ip.py\", line 11, in select_words\n    assert select_words(\"\
    abc def ghi\", 2) == [\"def\", \"ghi\"]\n  File \"/tmp/tmpwu8fs2ip.py\", line\
    \ 11, in select_words\n    assert select_words(\"abc def ghi\", 2) == [\"def\"\
    , \"ghi\"]\n  File \"/tmp/tmpwu8fs2ip.py\", line 11, in select_words\n    assert\
    \ select_words(\"abc def ghi\", 2) == [\"def\", \"ghi\"]\n  [Previous line repeated\
    \ 994 more times]\nRecursionError: maximum recursion depth exceeded\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 280, in <module>\n    test_check()\n  File \"/tmp/tmpyxd40gft.py\", line 278,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 269, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 280, in <module>\n    test_check()\n  File \"/tmp/tmpyxd40gft.py\", line 278,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 269, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 280, in <module>\n    test_check()\n  File \"/tmp/tmpyxd40gft.py\", line 278,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 269, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 280, in <module>\n    test_check()\n  File \"/tmp/tmpyxd40gft.py\", line 278,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 269, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    assert select_words(\"abc\
    \ def ghi\", 3) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc\
    \ def ghi\", 2) == [\"abc\", \"def\"]\n    assert select_words(\"abc def ghi\"\
    , 4) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\",\
    \ 0) == []\n    assert select_words(\"abc def ghi\", 5) == []\n    assert select_words(\"\
    abc def ghi\", 6) == []\n    assert select_words(\"abc def ghi\", 7) == []\n \
    \   assert select_words(\"abc def ghi\", 8) == []\n    assert select_words(\"\
    abc def ghi\", 9) == []\n    assert select_words(\"abc def ghi\", 10) == []\n\
    \    assert select_words(\"abc def ghi\", 11) == []\n    assert select_words(\"\
    abc def ghi\", 12) == []\n    assert select_words(\"abc def ghi\", 13) == []\n\
    \    assert select_words(\"abc def ghi\", 14) == []\n    assert select_words(\"\
    abc def ghi\", 15) == []\n    assert select_words(\"abc def ghi\", 16) == []\n\
    \    assert select_words(\"abc def ghi\", 17) == []\n    assert select_words(\"\
    abc def ghi\", 18) == []\n    assert select_words(\"abc def ghi\", 19) == []\n\
    \    assert select_words(\"abc def ghi\", 20) == []\n    assert select_words(\"\
    abc def ghi\", 21) == []\n    assert select_words(\"abc def ghi\", 22) == []\n\
    \    assert select_words(\"abc def ghi\", 23) == []\n    assert select_words(\"\
    abc def ghi\", 24) == []\n    assert select_words(\"abc def ghi\", 25) == []\n\
    \    assert select_words(\"abc def ghi\", 26) == []\n    assert select_words(\"\
    abc def ghi\", 27) == []\n    assert select_words(\"abc def ghi\", 28) == []\n\
    \    assert select_words(\"abc def ghi\", 29) == []\n    assert select_words(\"\
    abc def ghi\", 30) == []\n    assert select_words(\"abc def ghi\", 31) == []\n\
    \    assert select_words(\"abc def ghi\", 32) == []\n    assert select_words(\"\
    abc def ghi\", 33) == []\n    assert select_words(\"abc def ghi\", 34) == []\n\
    \    assert select_words(\"abc def ghi\", 35) == []\n    assert select_words(\"\
    \ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) ==\
    \ ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n\
    \    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpuha0jzzf.py\", line 46\n    assert select_words(\"\n \
    \                       ^\nSyntaxError: unterminated string literal (detected\
    \ at line 46)\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 280, in <module>\n    test_check()\n  File \"/tmp/tmpyxd40gft.py\", line 278,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 269, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 280, in <module>\n    test_check()\n  File \"/tmp/tmpyxd40gft.py\", line 278,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 269, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 280, in <module>\n    test_check()\n  File \"/tmp/tmpyxd40gft.py\", line 278,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 269, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    assert select_words(\"abc\
    \ def ghi\", 2) == [\"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\"\
    , 3) == []\n    assert select_words(\"abc def ghi\", 4) == []\n    assert select_words(\"\
    abc def ghi\", 5) == []\n    assert select_words(\"abc def ghi\", 6) == []\n \
    \   assert select_words(\"abc def ghi\", 7) == []\n    assert select_words(\"\
    abc def ghi\", 8) == []\n    assert select_words(\"abc def ghi\", 9) == []\n \
    \   assert select_words(\"abc def ghi\", 10) == []\n    assert select_words(\"\
    abc def ghi\", 11) == []\n    assert select_words(\"abc def ghi\", 12) == []\n\
    \    assert select_words(\"abc def ghi\", 13) == []\n    assert select_words(\"\
    abc def ghi\", 14) == []\n    assert select_words(\"abc def ghi\", 15) == []\n\
    \    assert select_words(\"abc def ghi\", 16) == []\n    assert select_words(\"\
    abc def ghi\", 17) == []\n    assert select_words(\"abc def ghi\", 18) == []\n\
    \    assert select_words(\"abc def ghi\", 19) == []\n    assert select_words(\"\
    abc def ghi\", 20) == []\n    assert select_words(\"abc def ghi\", 21) == []\n\
    \    assert select_words(\"abc def ghi\", 22) == []\n    assert select_words(\"\
    abc def ghi\", 23) == []\n    assert select_words(\"abc def ghi\", 24) == []\n\
    \    assert select_words(\"abc def ghi\", 25) == []\n    assert select_words(\"\
    abc def ghi\", 26) == []\n    assert select_words(\"abc def ghi\", 27) == []\n\
    \    assert select_words(\"abc def ghi\", 28) == []\n    assert select_words(\"\
    abc def ghi\", 29) == []\n    assert select_words(\"abc def ghi\", 30) == []\n\
    \    assert select_words(\"abc def ghi\", 31) == []\n    assert select_words(\"\
    abc def ghi\", 32) == []\n    assert select_words(\"abc def ghi\", 33) == []\n\
    \    assert select_words(\"abc def ghi\", 34) == []\n    assert select_words(\"\
    abc def ghi\", 35) == []\n    assert select_words(\"abc def ghi\", 36) == []\n\
    \    assert select_words(\"abc def ghi\", 37) == []\n    assert select_word\n\
    def check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert\
    \ candidate('simple white space', 2) == []\n    assert candidate('Hello world',\
    \ 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert\
    \ candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c',\
    \ 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwu8fs2ip.py\", line\
    \ 60, in <module>\n    test_check()\n  File \"/tmp/tmpwu8fs2ip.py\", line 58,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpwu8fs2ip.py\", line\
    \ 49, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmpwu8fs2ip.py\", line 11, in select_words\n    assert select_words(\"\
    abc def ghi\", 2) == [\"def\", \"ghi\"]\n  File \"/tmp/tmpwu8fs2ip.py\", line\
    \ 11, in select_words\n    assert select_words(\"abc def ghi\", 2) == [\"def\"\
    , \"ghi\"]\n  File \"/tmp/tmpwu8fs2ip.py\", line 11, in select_words\n    assert\
    \ select_words(\"abc def ghi\", 2) == [\"def\", \"ghi\"]\n  [Previous line repeated\
    \ 994 more times]\nRecursionError: maximum recursion depth exceeded\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 280, in <module>\n    test_check()\n  File \"/tmp/tmpyxd40gft.py\", line 278,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 269, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    assert select_words(\"abc\
    \ def\", 2) == [\"abc\", \"def\"]\n    assert select_words(\"abc def\", 3) ==\
    \ [\"abc\", \"def\"]\n    assert select_words(\"abc def\", 4) == [\"abc\", \"\
    def\"]\n    assert select_words(\"abc def\", 5) == []\n    assert select_words(\"\
    abc def\", 6) == []\n    assert select_words(\"abc def\", 7) == []\n    assert\
    \ select_words(\"abc def\", 8) == []\n    assert select_words(\"abc def\", 9)\
    \ == []\n    assert select_words(\"abc def\", 10) == []\n    assert select_words(\"\
    abc def\", 11) == []\n    assert select_words(\"abc def\", 12) == []\n    assert\
    \ select_words(\"abc def\", 13) == []\n    assert select_words(\"abc def\", 14)\
    \ == []\n    assert select_words(\"abc def\", 15) == []\n    assert select_words(\"\
    abc def\", 16) == []\n    assert select_words(\"abc def\", 17) == []\n    assert\
    \ select_words(\"abc def\", 18) == []\n    assert select_words(\"abc def\", 19)\
    \ == []\n    assert select_words(\"abc def\", 20) == []\n    assert select_words(\"\
    abc def\", 21) == []\n    assert select_words(\"abc def\", 22) == []\n    assert\
    \ select_words(\"abc def\", 23) == []\n    assert select_words(\"abc def\", 24)\
    \ == []\n    assert select_words(\"abc def\", 25) == []\n    assert select_words(\"\
    abc def\", 26) == []\n    assert select_words(\"abc def\", 27) == []\n    assert\
    \ select_words(\"abc def\", 28) == []\n    assert select_words(\"abc def\", 29)\
    \ == []\n    assert select_words(\"abc def\", 30) == []\n    assert select_words(\"\
    abc def\", 31) == []\n    assert select_words(\"abc def\", 32) == []\n    assert\
    \ select_words(\"abc def\", 33) == []\n    assert select_words(\"abc def\", 34)\
    \ == []\n    assert select_words(\"abc def\", 35) == []\n    assert select_words(\"\
    abc def\", 36) == []\n    assert select_words(\"abc def\", 37) == []\n    assert\
    \ select_words(\"abc def\", 38) == []\n    assert select_words(\"abc def\", 39)\
    \ == []\n    assert select_words(\"abc def\", 40) == []\n    assert select_words(\"\
    abc def\", 41) == []\n    assert select_words(\"abc def\", 42) == []\n    assert\
    \ select_words(\"abc def\", \ndef check(candidate):\n    assert candidate('Mary\
    \ had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little\
    \ lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2)\
    \ == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp9nuely0c.py\", line 52\n    assert select_words(\"abc\
    \ def\", \n                       ^\nSyntaxError: '(' was never closed\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    assert select_words(\"abc\
    \ def\", 2) == [\"abc\", \"def\"]\n    assert select_words(\"abc def\", 3) ==\
    \ []\n    assert select_words(\"abc def\", 4) == []\n    assert select_words(\"\
    abc def\", 5) == []\n    assert select_words(\"abc def\", 6) == []\n    assert\
    \ select_words(\"abc def\", 7) == []\n    assert select_words(\"abc def\", 8)\
    \ == []\n    assert select_words(\"abc def\", 9) == []\n    assert select_words(\"\
    abc def\", 10) == []\n    assert select_words(\"abc def\", 11) == []\n    assert\
    \ select_words(\"abc def\", 12) == []\n    assert select_words(\"abc def\", 13)\
    \ == []\n    assert select_words(\"abc def\", 14) == []\n    assert select_words(\"\
    abc def\", 15) == []\n    assert select_words(\"abc def\", 16) == []\n    assert\
    \ select_words(\"abc def\", 17) == []\n    assert select_words(\"abc def\", 18)\
    \ == []\n    assert select_words(\"abc def\", 19) == []\n    assert select_words(\"\
    abc def\", 20) == []\n    assert select_words(\"abc def\", 21) == []\n    assert\
    \ select_words(\"abc def\", 22) == []\n    assert select_words(\"abc def\", 23)\
    \ == []\n    assert select_words(\"abc def\", 24) == []\n    assert select_words(\"\
    abc def\", 25) == []\n    assert select_words(\"abc def\", 26) == []\n    assert\
    \ select_words(\"abc def\", 27) == []\n    assert select_words(\"abc def\", 28)\
    \ == []\n    assert select_words(\"abc def\", 29) == []\n    assert select_words(\"\
    abc def\", 30) == []\n    assert select_words(\"abc def\", 31) == []\n    assert\
    \ select_words(\"abc def\", 32) == []\n    assert select_words(\"abc def\", 33)\
    \ == []\n    assert select_words(\"abc def\", 34) == []\n    assert select_words(\"\
    abc def\", 35) == []\n    assert select_words(\"abc def\", 36) == []\n    assert\
    \ select_words(\"abc def\", 37) == []\n    assert select_words(\"abc def\", 38)\
    \ == []\n    assert select_words(\"abc def\", 39) == []\n    assert select_words(\"\
    abc def\", 40) == []\n    assert select_words(\"abc def\", 41) == []\n    assert\
    \ select_words(\"abc def\", 42) == []\n    assert select_words(\"abc def\", 43)\
    \ == []\n    assert select_words(\"\ndef check(candidate):\n    assert candidate('Mary\
    \ had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little\
    \ lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2)\
    \ == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpk6ke3iuz.py\", line 53\n    assert select_words(\"\n \
    \                       ^\nSyntaxError: unterminated string literal (detected\
    \ at line 53)\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    assert select_words(\"abc\
    \ def ghi\", 3) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc\
    \ def ghi\", 5) == []\n    assert select_words(\"abc def ghi\", 0) == []\n   \
    \ assert select_words(\"abc def ghi\", 2) == []\n    assert select_words(\"abc\
    \ def ghi\", 4) == []\n    assert select_words(\"abc def ghi\", 6) == []\n   \
    \ assert select_words(\"abc def ghi\", 7) == []\n    assert select_words(\"abc\
    \ def ghi\", 8) == []\n    assert select_words(\"abc def ghi\", 9) == []\n   \
    \ assert select_words(\"abc def ghi\", 10) == []\n    assert select_words(\"abc\
    \ def ghi\", 11) == []\n    assert select_words(\"abc def ghi\", 12) == []\n \
    \   assert select_words(\"abc def ghi\", 13) == []\n    assert select_words(\"\
    abc def ghi\", 14) == []\n    assert select_words(\"abc def ghi\", 15) == []\n\
    \    assert select_words(\"abc def ghi\", 16) == []\n    assert select_words(\"\
    abc def ghi\", 17) == []\n    assert select_words(\"abc def ghi\", 18) == []\n\
    \    assert select_words(\"abc def ghi\", 19) == []\n    assert select_words(\"\
    abc def ghi\", 20) == []\n    assert select_words(\"abc def ghi\", 21) == []\n\
    \    assert select_words(\"abc def ghi\", 22) == []\n    assert select_words(\"\
    abc def ghi\", 23) == []\n    assert select_words(\"abc def ghi\", 24) == []\n\
    \    assert select_words(\"abc def ghi\", 25) == []\n    assert select_words(\"\
    abc def ghi\", 26) == []\n    assert select_words(\"abc def ghi\", 27) == []\n\
    \    assert select_words(\"abc def ghi\", 28) == []\n    assert select_words(\"\
    abc def ghi\", 29) == []\n    assert select_words(\"abc def ghi\", 30) == []\n\
    \    assert select_words(\"abc def ghi\", 31) == []\n    assert select_words(\"\
    abc def ghi\", 32) == []\n    assert select_words(\"abc def ghi\", 33) == []\n\
    \    assert select_words(\"abc def ghi\", 34) == []\n    assert select_words(\"\
    abc def ghi\", 35) == []\n    assert select_words(\"abc def ghi\", 36) == []\n\
    \    assert \ndef check(candidate):\n    assert candidate('Mary had a little lamb',\
    \ 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary',\
    \ 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp7f65v7su.py\", line 47\n    assert \n           ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    assert select_words(\"abc\
    \ def ghi\", 3) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc\
    \ def ghi\", 2) == [\"abc\", \"def\"]\n    assert select_words(\"abc def ghi\"\
    , 1) == [\"abc\"]\n    assert select_words(\"abc def ghi\", 0) == []\n    assert\
    \ select_words(\"abc def ghi\", 5) == []\n    assert select_words(\"abc def ghi\"\
    , 4) == []\n    assert select_words(\"abc def ghi\", 6) == []\n    assert select_words(\"\
    abc def ghi\", 7) == []\n    assert select_words(\"abc def ghi\", 8) == []\n \
    \   assert select_words(\"abc def ghi\", 9) == []\n    assert select_words(\"\
    abc def ghi\", 10) == []\n    assert select_words(\"abc def ghi\", 11) == []\n\
    \    assert select_words(\"abc def ghi\", 12) == []\n    assert select_words(\"\
    abc def ghi\", 13) == []\n    assert select_words(\"abc def ghi\", 14) == []\n\
    \    assert select_words(\"abc def ghi\", 15) == []\n    assert select_words(\"\
    abc def ghi\", 16) == []\n    assert select_words(\"abc def ghi\", 17) == []\n\
    \    assert select_words(\"abc def ghi\", 18) == []\n    assert select_words(\"\
    abc def ghi\", 19) == []\n    assert select_words(\"abc def ghi\", 20) == []\n\
    \    assert select_words(\"abc def ghi\", 21) == []\n    assert select_words(\"\
    abc def ghi\", 22) == []\n    assert select_words(\"abc def ghi\", 23) == []\n\
    \    assert select_words(\"abc def ghi\", 24) == []\n    assert select_words(\"\
    abc def ghi\", 25) == []\n    assert select_words(\"abc def ghi\", 26) == []\n\
    \    assert select_words(\"abc def ghi\", 27) == []\n    assert select_words(\"\
    abc def ghi\", 28) == []\n    assert select_words(\"abc def ghi\", 29) == []\n\
    \    assert select_words(\"abc def ghi\", 30) == []\n    assert select_words(\"\
    abc def ghi\", 31) == []\n    assert select_words(\"abc def ghi\", 32) == []\n\
    \    assert select_words(\"abc def ghi\", 33) == []\n    assert select_words(\"\
    abc def ghi\", 34) == []\n    assert select_words(\"abc def ghi\", \ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpr0o3ssmn.py\", line 46\n    assert select_words(\"abc\
    \ def ghi\", \n                       ^\nSyntaxError: '(' was never closed\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 280, in <module>\n    test_check()\n  File \"/tmp/tmpyxd40gft.py\", line 278,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 269, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 280, in <module>\n    test_check()\n  File \"/tmp/tmpyxd40gft.py\", line 278,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 269, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    assert select_words(\"abc\
    \ def ghi\", 2) == [\"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\"\
    , 3) == []\n    assert select_words(\"abc def ghi\", 4) == []\n    assert select_words(\"\
    abc def ghi\", 5) == []\n    assert select_words(\"abc def ghi\", 6) == []\n \
    \   assert select_words(\"abc def ghi\", 7) == []\n    assert select_words(\"\
    abc def ghi\", 8) == []\n    assert select_words(\"abc def ghi\", 9) == []\n \
    \   assert select_words(\"abc def ghi\", 10) == []\n    assert select_words(\"\
    abc def ghi\", 11) == []\n    assert select_words(\"abc def ghi\", 12) == []\n\
    \    assert select_words(\"abc def ghi\", 13) == []\n    assert select_words(\"\
    abc def ghi\", 14) == []\n    assert select_words(\"abc def ghi\", 15) == []\n\
    \    assert select_words(\"abc def ghi\", 16) == []\n    assert select_words(\"\
    abc def ghi\", 17) == []\n    assert select_words(\"abc def ghi\", 18) == []\n\
    \    assert select_words(\"abc def ghi\", 19) == []\n    assert select_words(\"\
    abc def ghi\", 20) == []\n    assert select_words(\"abc def ghi\", 21) == []\n\
    \    assert select_words(\"abc def ghi\", 22) == []\n    assert select_words(\"\
    abc def ghi\", 23) == []\n    assert select_words(\"abc def ghi\", 24) == []\n\
    \    assert select_words(\"abc def ghi\", 25) == []\n    assert select_words(\"\
    abc def ghi\", 26) == []\n    assert select_words(\"abc def ghi\", 27) == []\n\
    \    assert select_words(\"abc def ghi\", 28) == []\n    assert select_words(\"\
    abc def ghi\", 29) == []\n    assert select_words(\"abc def ghi\", 30) == []\n\
    \    assert select_words(\"abc def ghi\", 31) == []\n    assert select_words(\"\
    abc def ghi\", 32) == []\n    assert select_words(\"abc def ghi\", 33) == []\n\
    \    assert select_words(\"abc def ghi\", 34) == []\n    assert select_words(\"\
    abc def ghi\", 35) == []\n    assert select_words(\"abc def ghi\", 36) == []\n\
    \    assert select_words(\"abc def ghi\", 37) == []\n    assert select_word\n\
    def check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert\
    \ candidate('simple white space', 2) == []\n    assert candidate('Hello world',\
    \ 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert\
    \ candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c',\
    \ 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwu8fs2ip.py\", line\
    \ 60, in <module>\n    test_check()\n  File \"/tmp/tmpwu8fs2ip.py\", line 58,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpwu8fs2ip.py\", line\
    \ 49, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmpwu8fs2ip.py\", line 11, in select_words\n    assert select_words(\"\
    abc def ghi\", 2) == [\"def\", \"ghi\"]\n  File \"/tmp/tmpwu8fs2ip.py\", line\
    \ 11, in select_words\n    assert select_words(\"abc def ghi\", 2) == [\"def\"\
    , \"ghi\"]\n  File \"/tmp/tmpwu8fs2ip.py\", line 11, in select_words\n    assert\
    \ select_words(\"abc def ghi\", 2) == [\"def\", \"ghi\"]\n  [Previous line repeated\
    \ 994 more times]\nRecursionError: maximum recursion depth exceeded\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    assert select_words(\"abc\
    \ def ghi\", 2) == [\"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\"\
    , 3) == []\n    assert select_words(\"abc def ghi\", 4) == []\n    assert select_words(\"\
    abc def ghi\", 5) == []\n    assert select_words(\"abc def ghi\", 6) == []\n \
    \   assert select_words(\"abc def ghi\", 7) == []\n    assert select_words(\"\
    abc def ghi\", 8) == []\n    assert select_words(\"abc def ghi\", 9) == []\n \
    \   assert select_words(\"abc def ghi\", 10) == []\n    assert select_words(\"\
    abc def ghi\", 11) == []\n    assert select_words(\"abc def ghi\", 12) == []\n\
    \    assert select_words(\"abc def ghi\", 13) == []\n    assert select_words(\"\
    abc def ghi\", 14) == []\n    assert select_words(\"abc def ghi\", 15) == []\n\
    \    assert select_words(\"abc def ghi\", 16) == []\n    assert select_words(\"\
    abc def ghi\", 17) == []\n    assert select_words(\"abc def ghi\", 18) == []\n\
    \    assert select_words(\"abc def ghi\", 19) == []\n    assert select_words(\"\
    abc def ghi\", 20) == []\n    assert select_words(\"abc def ghi\", 21) == []\n\
    \    assert select_words(\"abc def ghi\", 22) == []\n    assert select_words(\"\
    abc def ghi\", 23) == []\n    assert select_words(\"abc def ghi\", 24) == []\n\
    \    assert select_words(\"abc def ghi\", 25) == []\n    assert select_words(\"\
    abc def ghi\", 26) == []\n    assert select_words(\"abc def ghi\", 27) == []\n\
    \    assert select_words(\"abc def ghi\", 28) == []\n    assert select_words(\"\
    abc def ghi\", 29) == []\n    assert select_words(\"abc def ghi\", 30) == []\n\
    \    assert select_words(\"abc def ghi\", 31) == []\n    assert select_words(\"\
    abc def ghi\", 32) == []\n    assert select_words(\"abc def ghi\", 33) == []\n\
    \    assert select_words(\"abc def ghi\", 34) == []\n    assert select_words(\"\
    abc def ghi\", 35) == []\n    assert select_words(\"abc def ghi\", 36) == []\n\
    \    assert select_words(\"abc def ghi\", 37) == []\n    assert select_word\n\
    def check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert\
    \ candidate('simple white space', 2) == []\n    assert candidate('Hello world',\
    \ 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert\
    \ candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c',\
    \ 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwu8fs2ip.py\", line\
    \ 60, in <module>\n    test_check()\n  File \"/tmp/tmpwu8fs2ip.py\", line 58,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpwu8fs2ip.py\", line\
    \ 49, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmpwu8fs2ip.py\", line 11, in select_words\n    assert select_words(\"\
    abc def ghi\", 2) == [\"def\", \"ghi\"]\n  File \"/tmp/tmpwu8fs2ip.py\", line\
    \ 11, in select_words\n    assert select_words(\"abc def ghi\", 2) == [\"def\"\
    , \"ghi\"]\n  File \"/tmp/tmpwu8fs2ip.py\", line 11, in select_words\n    assert\
    \ select_words(\"abc def ghi\", 2) == [\"def\", \"ghi\"]\n  [Previous line repeated\
    \ 994 more times]\nRecursionError: maximum recursion depth exceeded\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 280, in <module>\n    test_check()\n  File \"/tmp/tmpyxd40gft.py\", line 278,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 269, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    assert select_words(\"abc\
    \ def ghi\", 2) == [\"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\"\
    , 3) == []\n    assert select_words(\"abc def ghi\", 4) == []\n    assert select_words(\"\
    abc def ghi\", 5) == []\n    assert select_words(\"abc def ghi\", 6) == []\n \
    \   assert select_words(\"abc def ghi\", 7) == []\n    assert select_words(\"\
    abc def ghi\", 8) == []\n    assert select_words(\"abc def ghi\", 9) == []\n \
    \   assert select_words(\"abc def ghi\", 10) == []\n    assert select_words(\"\
    abc def ghi\", 11) == []\n    assert select_words(\"abc def ghi\", 12) == []\n\
    \    assert select_words(\"abc def ghi\", 13) == []\n    assert select_words(\"\
    abc def ghi\", 14) == []\n    assert select_words(\"abc def ghi\", 15) == []\n\
    \    assert select_words(\"abc def ghi\", 16) == []\n    assert select_words(\"\
    abc def ghi\", 17) == []\n    assert select_words(\"abc def ghi\", 18) == []\n\
    \    assert select_words(\"abc def ghi\", 19) == []\n    assert select_words(\"\
    abc def ghi\", 20) == []\n    assert select_words(\"abc def ghi\", 21) == []\n\
    \    assert select_words(\"abc def ghi\", 22) == []\n    assert select_words(\"\
    abc def ghi\", 23) == []\n    assert select_words(\"abc def ghi\", 24) == []\n\
    \    assert select_words(\"abc def ghi\", 25) == []\n    assert select_words(\"\
    abc def ghi\", 26) == []\n    assert select_words(\"abc def ghi\", 27) == []\n\
    \    assert select_words(\"abc def ghi\", 28) == []\n    assert select_words(\"\
    abc def ghi\", 29) == []\n    assert select_words(\"abc def ghi\", 30) == []\n\
    \    assert select_words(\"abc def ghi\", 31) == []\n    assert select_words(\"\
    abc def ghi\", 32) == []\n    assert select_words(\"abc def ghi\", 33) == []\n\
    \    assert select_words(\"abc def ghi\", 34) == []\n    assert select_words(\"\
    abc def ghi\", 35) == []\n    assert select_words(\"abc def ghi\", 36) == []\n\
    \    assert select_words(\"abc def ghi\", 37) == []\n    assert select_word\n\
    def check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert\
    \ candidate('simple white space', 2) == []\n    assert candidate('Hello world',\
    \ 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert\
    \ candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c',\
    \ 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwu8fs2ip.py\", line\
    \ 60, in <module>\n    test_check()\n  File \"/tmp/tmpwu8fs2ip.py\", line 58,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpwu8fs2ip.py\", line\
    \ 49, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmpwu8fs2ip.py\", line 11, in select_words\n    assert select_words(\"\
    abc def ghi\", 2) == [\"def\", \"ghi\"]\n  File \"/tmp/tmpwu8fs2ip.py\", line\
    \ 11, in select_words\n    assert select_words(\"abc def ghi\", 2) == [\"def\"\
    , \"ghi\"]\n  File \"/tmp/tmpwu8fs2ip.py\", line 11, in select_words\n    assert\
    \ select_words(\"abc def ghi\", 2) == [\"def\", \"ghi\"]\n  [Previous line repeated\
    \ 994 more times]\nRecursionError: maximum recursion depth exceeded\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 280, in <module>\n    test_check()\n  File \"/tmp/tmpyxd40gft.py\", line 278,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 269, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 280, in <module>\n    test_check()\n  File \"/tmp/tmpyxd40gft.py\", line 278,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 269, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 280, in <module>\n    test_check()\n  File \"/tmp/tmpyxd40gft.py\", line 278,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 269, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 280, in <module>\n    test_check()\n  File \"/tmp/tmpyxd40gft.py\", line 278,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 269, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    assert select_words(\"abc\
    \ def ghi\", 2) == [\"ab\", \"ghi\"]\n    assert select_words(\"abc def ghi\"\
    , 3) == []\n    assert select_words(\"abc def ghi\", 4) == []\n    assert select_words(\"\
    abc def ghi\", 5) == []\n    assert select_words(\"abc def ghi\", 6) == []\n \
    \   assert select_words(\"abc def ghi\", 7) == []\n    assert select_words(\"\
    abc def ghi\", 8) == []\n    assert select_words(\"abc def ghi\", 9) == []\n \
    \   assert select_words(\"abc def ghi\", 10) == []\n    assert select_words(\"\
    abc def ghi\", 11) == []\n    assert select_words(\"abc def ghi\", 12) == []\n\
    \    assert select_words(\"abc def ghi\", 13) == []\n    assert select_words(\"\
    abc def ghi\", 14) == []\n    assert select_words(\"abc def ghi\", 15) == []\n\
    \    assert select_words(\"abc def ghi\", 16) == []\n    assert select_words(\"\
    abc def ghi\", 17) == []\n    assert select_words(\"abc def ghi\", 18) == []\n\
    \    assert select_words(\"abc def ghi\", 19) == []\n    assert select_words(\"\
    abc def ghi\", 20) == []\n    assert select_words(\"abc def ghi\", 21) == []\n\
    \    assert select_words(\"abc def ghi\", 22) == []\n    assert select_words(\"\
    abc def ghi\", 23) == []\n    assert select_words(\"abc def ghi\", 24) == []\n\
    \    assert select_words(\"abc def ghi\", 25) == []\n    assert select_words(\"\
    abc def ghi\", 26) == []\n    assert select_words(\"abc def ghi\", 27) == []\n\
    \    assert select_words(\"abc def ghi\", 28) == []\n    assert select_words(\"\
    abc def ghi\", 29) == []\n    assert select_words(\"abc def ghi\", 30) == []\n\
    \    assert select_words(\"abc def ghi\", 31) == []\n    assert select_words(\"\
    abc def ghi\", 32) == []\n    assert select_words(\"abc def ghi\", 33) == []\n\
    \    assert select_words(\"abc def ghi\", 34) == []\n    assert select_words(\"\
    abc def ghi\", 35) == []\n    assert select_words(\"abc def ghi\", 36) == []\n\
    \    assert select_words(\"abc def ghi\", 37) == []\n    assert select_word\n\
    def check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert\
    \ candidate('simple white space', 2) == []\n    assert candidate('Hello world',\
    \ 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert\
    \ candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c',\
    \ 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8p8fyew2.py\", line\
    \ 60, in <module>\n    test_check()\n  File \"/tmp/tmp8p8fyew2.py\", line 58,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp8p8fyew2.py\", line\
    \ 49, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmp8p8fyew2.py\", line 11, in select_words\n    assert select_words(\"\
    abc def ghi\", 2) == [\"ab\", \"ghi\"]\n  File \"/tmp/tmp8p8fyew2.py\", line 11,\
    \ in select_words\n    assert select_words(\"abc def ghi\", 2) == [\"ab\", \"\
    ghi\"]\n  File \"/tmp/tmp8p8fyew2.py\", line 11, in select_words\n    assert select_words(\"\
    abc def ghi\", 2) == [\"ab\", \"ghi\"]\n  [Previous line repeated 994 more times]\n\
    RecursionError: maximum recursion depth exceeded\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 280, in <module>\n    test_check()\n  File \"/tmp/tmpyxd40gft.py\", line 278,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 269, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 280, in <module>\n    test_check()\n  File \"/tmp/tmpyxd40gft.py\", line 278,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 269, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 280, in <module>\n    test_check()\n  File \"/tmp/tmpyxd40gft.py\", line 278,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 269, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 280, in <module>\n    test_check()\n  File \"/tmp/tmpyxd40gft.py\", line 278,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 269, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    assert select_words(\"abc\
    \ def ghi\", 2) == [\"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\"\
    , 3) == []\n    assert select_words(\"abc def ghi\", 4) == []\n    assert select_words(\"\
    abc def ghi\", 5) == []\n    assert select_words(\"abc def ghi\", 6) == []\n \
    \   assert select_words(\"abc def ghi\", 7) == []\n    assert select_words(\"\
    abc def ghi\", 8) == []\n    assert select_words(\"abc def ghi\", 9) == []\n \
    \   assert select_words(\"abc def ghi\", 10) == []\n    assert select_words(\"\
    abc def ghi\", 11) == []\n    assert select_words(\"abc def ghi\", 12) == []\n\
    \    assert select_words(\"abc def ghi\", 13) == []\n    assert select_words(\"\
    abc def ghi\", 14) == []\n    assert select_words(\"abc def ghi\", 15) == []\n\
    \    assert select_words(\"abc def ghi\", 16) == []\n    assert select_words(\"\
    abc def ghi\", 17) == []\n    assert select_words(\"abc def ghi\", 18) == []\n\
    \    assert select_words(\"abc def ghi\", 19) == []\n    assert select_words(\"\
    abc def ghi\", 20) == []\n    assert select_words(\"abc def ghi\", 21) == []\n\
    \    assert select_words(\"abc def ghi\", 22) == []\n    assert select_words(\"\
    abc def ghi\", 23) == []\n    assert select_words(\"abc def ghi\", 24) == []\n\
    \    assert select_words(\"abc def ghi\", 25) == []\n    assert select_words(\"\
    abc def ghi\", 26) == []\n    assert select_words(\"abc def ghi\", 27) == []\n\
    \    assert select_words(\"abc def ghi\", 28) == []\n    assert select_words(\"\
    abc def ghi\", 29) == []\n    assert select_words(\"abc def ghi\", 30) == []\n\
    \    assert select_words(\"abc def ghi\", 31) == []\n    assert select_words(\"\
    abc def ghi\", 32) == []\n    assert select_words(\"abc def ghi\", 33) == []\n\
    \    assert select_words(\"abc def ghi\", 34) == []\n    assert select_words(\"\
    abc def ghi\", 35) == []\n    assert select_words(\"abc def ghi\", 36) == []\n\
    \    assert select_words(\"abc def ghi\", 37) == []\n    assert select_word\n\
    def check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert\
    \ candidate('simple white space', 2) == []\n    assert candidate('Hello world',\
    \ 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert\
    \ candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c',\
    \ 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwu8fs2ip.py\", line\
    \ 60, in <module>\n    test_check()\n  File \"/tmp/tmpwu8fs2ip.py\", line 58,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpwu8fs2ip.py\", line\
    \ 49, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmpwu8fs2ip.py\", line 11, in select_words\n    assert select_words(\"\
    abc def ghi\", 2) == [\"def\", \"ghi\"]\n  File \"/tmp/tmpwu8fs2ip.py\", line\
    \ 11, in select_words\n    assert select_words(\"abc def ghi\", 2) == [\"def\"\
    , \"ghi\"]\n  File \"/tmp/tmpwu8fs2ip.py\", line 11, in select_words\n    assert\
    \ select_words(\"abc def ghi\", 2) == [\"def\", \"ghi\"]\n  [Previous line repeated\
    \ 994 more times]\nRecursionError: maximum recursion depth exceeded\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 280, in <module>\n    test_check()\n  File \"/tmp/tmpyxd40gft.py\", line 278,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 269, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 280, in <module>\n    test_check()\n  File \"/tmp/tmpyxd40gft.py\", line 278,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 269, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    assert select_words(\"abc\
    \ def ghi\", 3) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc\
    \ def ghi\", 4) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc\
    \ def ghi\", 5) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc\
    \ def ghi\", 6) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc\
    \ def ghi\", 7) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc\
    \ def ghi\", 8) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc\
    \ def ghi\", 9) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc\
    \ def ghi\", 10) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc\
    \ def ghi\", 11) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc\
    \ def ghi\", 12) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc\
    \ def ghi\", 13) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc\
    \ def ghi\", 14) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc\
    \ def ghi\", 15) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc\
    \ def ghi\", 16) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc\
    \ def ghi\", 17) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc\
    \ def ghi\", 18) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc\
    \ def ghi\", 19) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc\
    \ def ghi\", 20) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc\
    \ def ghi\", 21) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc\
    \ def ghi\", 22) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc\
    \ def ghi\", 23) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc\
    \ def ghi\", 24) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc\
    \ def ghi\", 25) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc\
    \ def ghi\", 26) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc\
    \ def gh\ndef check(candidate):\n    assert candidate('Mary had a little lamb',\
    \ 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary',\
    \ 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp4kj66k1l.py\", line 35\n    assert select_words(\"abc\
    \ def gh\n                        ^\nSyntaxError: unterminated string literal\
    \ (detected at line 35)\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 280, in <module>\n    test_check()\n  File \"/tmp/tmpyxd40gft.py\", line 278,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 269, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 280, in <module>\n    test_check()\n  File \"/tmp/tmpyxd40gft.py\", line 278,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 269, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    assert select_words(\"abc\
    \ def ghi\", 2) == [\"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\"\
    , 3) == []\n    assert select_words(\"abc def ghi\", 4) == []\n    assert select_words(\"\
    abc def ghi\", 5) == []\n    assert select_words(\"abc def ghi\", 6) == []\n \
    \   assert select_words(\"abc def ghi\", 7) == []\n    assert select_words(\"\
    abc def ghi\", 8) == []\n    assert select_words(\"abc def ghi\", 9) == []\n \
    \   assert select_words(\"abc def ghi\", 10) == []\n    assert select_words(\"\
    abc def ghi\", 11) == []\n    assert select_words(\"abc def ghi\", 12) == []\n\
    \    assert select_words(\"abc def ghi\", 13) == []\n    assert select_words(\"\
    abc def ghi\", 14) == []\n    assert select_words(\"abc def ghi\", 15) == []\n\
    \    assert select_words(\"abc def ghi\", 16) == []\n    assert select_words(\"\
    abc def ghi\", 17) == []\n    assert select_words(\"abc def ghi\", 18) == []\n\
    \    assert select_words(\"abc def ghi\", 19) == []\n    assert select_words(\"\
    abc def ghi\", 20) == []\n    assert select_words(\"abc def ghi\", 21) == []\n\
    \    assert select_words(\"abc def ghi\", 22) == []\n    assert select_words(\"\
    abc def ghi\", 23) == []\n    assert select_words(\"abc def ghi\", 24) == []\n\
    \    assert select_words(\"abc def ghi\", 25) == []\n    assert select_words(\"\
    abc def ghi\", 26) == []\n    assert select_words(\"abc def ghi\", 27) == []\n\
    \    assert select_words(\"abc def ghi\", 28) == []\n    assert select_words(\"\
    abc def ghi\", 29) == []\n    assert select_words(\"abc def ghi\", 30) == []\n\
    \    assert select_words(\"abc def ghi\", 31) == []\n    assert select_words(\"\
    abc def ghi\", 32) == []\n    assert select_words(\"abc def ghi\", 33) == []\n\
    \    assert select_words(\"abc def ghi\", 34) == []\n    assert select_words(\"\
    abc def ghi\", 35) == []\n    assert select_words(\"abc def ghi\", 36) == []\n\
    \    assert select_words(\"abc def ghi\", 37) == []\n    assert select_word\n\
    def check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert\
    \ candidate('simple white space', 2) == []\n    assert candidate('Hello world',\
    \ 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert\
    \ candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c',\
    \ 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwu8fs2ip.py\", line\
    \ 60, in <module>\n    test_check()\n  File \"/tmp/tmpwu8fs2ip.py\", line 58,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpwu8fs2ip.py\", line\
    \ 49, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmpwu8fs2ip.py\", line 11, in select_words\n    assert select_words(\"\
    abc def ghi\", 2) == [\"def\", \"ghi\"]\n  File \"/tmp/tmpwu8fs2ip.py\", line\
    \ 11, in select_words\n    assert select_words(\"abc def ghi\", 2) == [\"def\"\
    , \"ghi\"]\n  File \"/tmp/tmpwu8fs2ip.py\", line 11, in select_words\n    assert\
    \ select_words(\"abc def ghi\", 2) == [\"def\", \"ghi\"]\n  [Previous line repeated\
    \ 994 more times]\nRecursionError: maximum recursion depth exceeded\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 280, in <module>\n    test_check()\n  File \"/tmp/tmpyxd40gft.py\", line 278,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 269, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 280, in <module>\n    test_check()\n  File \"/tmp/tmpyxd40gft.py\", line 278,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 269, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    assert select_words(\"abc\
    \ def ghi\", 2) == [\"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\"\
    , 3) == []\n    assert select_words(\"abc def ghi\", 4) == []\n    assert select_words(\"\
    abc def ghi\", 5) == []\n    assert select_words(\"abc def ghi\", 6) == []\n \
    \   assert select_words(\"abc def ghi\", 7) == []\n    assert select_words(\"\
    abc def ghi\", 8) == []\n    assert select_words(\"abc def ghi\", 9) == []\n \
    \   assert select_words(\"abc def ghi\", 10) == []\n    assert select_words(\"\
    abc def ghi\", 11) == []\n    assert select_words(\"abc def ghi\", 12) == []\n\
    \    assert select_words(\"abc def ghi\", 13) == []\n    assert select_words(\"\
    abc def ghi\", 14) == []\n    assert select_words(\"abc def ghi\", 15) == []\n\
    \    assert select_words(\"abc def ghi\", 16) == []\n    assert select_words(\"\
    abc def ghi\", 17) == []\n    assert select_words(\"abc def ghi\", 18) == []\n\
    \    assert select_words(\"abc def ghi\", 19) == []\n    assert select_words(\"\
    abc def ghi\", 20) == []\n    assert select_words(\"abc def ghi\", 21) == []\n\
    \    assert select_words(\"abc def ghi\", 22) == []\n    assert select_words(\"\
    abc def ghi\", 23) == []\n    assert select_words(\"abc def ghi\", 24) == []\n\
    \    assert select_words(\"abc def ghi\", 25) == []\n    assert select_words(\"\
    abc def ghi\", 26) == []\n    assert select_words(\"abc def ghi\", 27) == []\n\
    \    assert select_words(\"abc def ghi\", 28) == []\n    assert select_words(\"\
    abc def ghi\", 29) == []\n    assert select_words(\"abc def ghi\", 30) == []\n\
    \    assert select_words(\"abc def ghi\", 31) == []\n    assert select_words(\"\
    abc def ghi\", 32) == []\n    assert select_words(\"abc def ghi\", 33) == []\n\
    \    assert select_words(\"abc def ghi\", 34) == []\n    assert select_words(\"\
    abc def ghi\", 35) == []\n    assert select_words(\"abc def ghi\", 36) == []\n\
    \    assert select_words(\"abc def ghi\", 37) == []\n    assert select_word\n\
    def check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert\
    \ candidate('simple white space', 2) == []\n    assert candidate('Hello world',\
    \ 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert\
    \ candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c',\
    \ 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwu8fs2ip.py\", line\
    \ 60, in <module>\n    test_check()\n  File \"/tmp/tmpwu8fs2ip.py\", line 58,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpwu8fs2ip.py\", line\
    \ 49, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmpwu8fs2ip.py\", line 11, in select_words\n    assert select_words(\"\
    abc def ghi\", 2) == [\"def\", \"ghi\"]\n  File \"/tmp/tmpwu8fs2ip.py\", line\
    \ 11, in select_words\n    assert select_words(\"abc def ghi\", 2) == [\"def\"\
    , \"ghi\"]\n  File \"/tmp/tmpwu8fs2ip.py\", line 11, in select_words\n    assert\
    \ select_words(\"abc def ghi\", 2) == [\"def\", \"ghi\"]\n  [Previous line repeated\
    \ 994 more times]\nRecursionError: maximum recursion depth exceeded\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 280, in <module>\n    test_check()\n  File \"/tmp/tmpyxd40gft.py\", line 278,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 269, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 280, in <module>\n    test_check()\n  File \"/tmp/tmpyxd40gft.py\", line 278,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 269, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 280, in <module>\n    test_check()\n  File \"/tmp/tmpyxd40gft.py\", line 278,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 269, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    assert select_words(\"abc\
    \ def ghi\", 2) == [\"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\"\
    , 3) == []\n    assert select_words(\"abc def ghi\", 4) == []\n    assert select_words(\"\
    abc def ghi\", 5) == []\n    assert select_words(\"abc def ghi\", 6) == []\n \
    \   assert select_words(\"abc def ghi\", 7) == []\n    assert select_words(\"\
    abc def ghi\", 8) == []\n    assert select_words(\"abc def ghi\", 9) == []\n \
    \   assert select_words(\"abc def ghi\", 10) == []\n    assert select_words(\"\
    abc def ghi\", 11) == []\n    assert select_words(\"abc def ghi\", 12) == []\n\
    \    assert select_words(\"abc def ghi\", 13) == []\n    assert select_words(\"\
    abc def ghi\", 14) == []\n    assert select_words(\"abc def ghi\", 15) == []\n\
    \    assert select_words(\"abc def ghi\", 16) == []\n    assert select_words(\"\
    abc def ghi\", 17) == []\n    assert select_words(\"abc def ghi\", 18) == []\n\
    \    assert select_words(\"abc def ghi\", 19) == []\n    assert select_words(\"\
    abc def ghi\", 20) == []\n    assert select_words(\"abc def ghi\", 21) == []\n\
    \    assert select_words(\"abc def ghi\", 22) == []\n    assert select_words(\"\
    abc def ghi\", 23) == []\n    assert select_words(\"abc def ghi\", 24) == []\n\
    \    assert select_words(\"abc def ghi\", 25) == []\n    assert select_words(\"\
    abc def ghi\", 26) == []\n    assert select_words(\"abc def ghi\", 27) == []\n\
    \    assert select_words(\"abc def ghi\", 28) == []\n    assert select_words(\"\
    abc def ghi\", 29) == []\n    assert select_words(\"abc def ghi\", 30) == []\n\
    \    assert select_words(\"abc def ghi\", 31) == []\n    assert select_words(\"\
    abc def ghi\", 32) == []\n    assert select_words(\"abc def ghi\", 33) == []\n\
    \    assert select_words(\"abc def ghi\", 34) == []\n    assert select_words(\"\
    abc def ghi\", 35) == []\n    assert select_words(\"abc def ghi\", 36) == []\n\
    \    assert select_words(\"abc def ghi\", 37) == []\n    assert select_word\n\
    def check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert\
    \ candidate('simple white space', 2) == []\n    assert candidate('Hello world',\
    \ 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert\
    \ candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c',\
    \ 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwu8fs2ip.py\", line\
    \ 60, in <module>\n    test_check()\n  File \"/tmp/tmpwu8fs2ip.py\", line 58,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpwu8fs2ip.py\", line\
    \ 49, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmpwu8fs2ip.py\", line 11, in select_words\n    assert select_words(\"\
    abc def ghi\", 2) == [\"def\", \"ghi\"]\n  File \"/tmp/tmpwu8fs2ip.py\", line\
    \ 11, in select_words\n    assert select_words(\"abc def ghi\", 2) == [\"def\"\
    , \"ghi\"]\n  File \"/tmp/tmpwu8fs2ip.py\", line 11, in select_words\n    assert\
    \ select_words(\"abc def ghi\", 2) == [\"def\", \"ghi\"]\n  [Previous line repeated\
    \ 994 more times]\nRecursionError: maximum recursion depth exceeded\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    assert select_words(\"abc\
    \ def ghi\", 2) == [\"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\"\
    , 3) == []\n    assert select_words(\"abc def ghi\", 4) == []\n    assert select_words(\"\
    abc def ghi\", 5) == []\n    assert select_words(\"abc def ghi\", 6) == []\n \
    \   assert select_words(\"abc def ghi\", 7) == []\n    assert select_words(\"\
    abc def ghi\", 8) == []\n    assert select_words(\"abc def ghi\", 9) == []\n \
    \   assert select_words(\"abc def ghi\", 10) == []\n    assert select_words(\"\
    abc def ghi\", 11) == []\n    assert select_words(\"abc def ghi\", 12) == []\n\
    \    assert select_words(\"abc def ghi\", 13) == []\n    assert select_words(\"\
    abc def ghi\", 14) == []\n    assert select_words(\"abc def ghi\", 15) == []\n\
    \    assert select_words(\"abc def ghi\", 16) == []\n    assert select_words(\"\
    abc def ghi\", 17) == []\n    assert select_words(\"abc def ghi\", 18) == []\n\
    \    assert select_words(\"abc def ghi\", 19) == []\n    assert select_words(\"\
    abc def ghi\", 20) == []\n    assert select_words(\"abc def ghi\", 21) == []\n\
    \    assert select_words(\"abc def ghi\", 22) == []\n    assert select_words(\"\
    abc def ghi\", 23) == []\n    assert select_words(\"abc def ghi\", 24) == []\n\
    \    assert select_words(\"abc def ghi\", 25) == []\n    assert select_words(\"\
    abc def ghi\", 26) == []\n    assert select_words(\"abc def ghi\", 27) == []\n\
    \    assert select_words(\"abc def ghi\", 28) == []\n    assert select_words(\"\
    abc def ghi\", 29) == []\n    assert select_words(\"abc def ghi\", 30) == []\n\
    \    assert select_words(\"abc def ghi\", 31) == []\n    assert select_words(\"\
    abc def ghi\", 32) == []\n    assert select_words(\"abc def ghi\", 33) == []\n\
    \    assert select_words(\"abc def ghi\", 34) == []\n    assert select_words(\"\
    abc def ghi\", 35) == []\n    assert select_words(\"abc def ghi\", 36) == []\n\
    \    assert select_words(\"abc def ghi\", 37) == []\n    assert select_word\n\
    def check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert\
    \ candidate('simple white space', 2) == []\n    assert candidate('Hello world',\
    \ 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert\
    \ candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c',\
    \ 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwu8fs2ip.py\", line\
    \ 60, in <module>\n    test_check()\n  File \"/tmp/tmpwu8fs2ip.py\", line 58,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpwu8fs2ip.py\", line\
    \ 49, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmpwu8fs2ip.py\", line 11, in select_words\n    assert select_words(\"\
    abc def ghi\", 2) == [\"def\", \"ghi\"]\n  File \"/tmp/tmpwu8fs2ip.py\", line\
    \ 11, in select_words\n    assert select_words(\"abc def ghi\", 2) == [\"def\"\
    , \"ghi\"]\n  File \"/tmp/tmpwu8fs2ip.py\", line 11, in select_words\n    assert\
    \ select_words(\"abc def ghi\", 2) == [\"def\", \"ghi\"]\n  [Previous line repeated\
    \ 994 more times]\nRecursionError: maximum recursion depth exceeded\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    assert select_words(\"abc\
    \ def ghi\", 3) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc\
    \ def ghi\", 4) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc\
    \ def ghi\", 5) == []\n    assert select_words(\"abc def ghi\", 6) == []\n   \
    \ assert select_words(\"abc def ghi\", 7) == []\n    assert select_words(\"abc\
    \ def ghi\", 8) == []\n    assert select_words(\"abc def ghi\", 9) == []\n   \
    \ assert select_words(\"abc def ghi\", 10) == []\n    assert select_words(\"abc\
    \ def ghi\", 11) == []\n    assert select_words(\"abc def ghi\", 12) == []\n \
    \   assert select_words(\"abc def ghi\", 13) == []\n    assert select_words(\"\
    abc def ghi\", 14) == []\n    assert select_words(\"abc def ghi\", 15) == []\n\
    \    assert select_words(\"abc def ghi\", 16) == []\n    assert select_words(\"\
    abc def ghi\", 17) == []\n    assert select_words(\"abc def ghi\", 18) == []\n\
    \    assert select_words(\"abc def ghi\", 19) == []\n    assert select_words(\"\
    abc def ghi\", 20) == []\n    assert select_words(\"abc def ghi\", 21) == []\n\
    \    assert select_words(\"abc def ghi\", 22) == []\n    assert select_words(\"\
    abc def ghi\", 23) == []\n    assert select_words(\"abc def ghi\", 24) == []\n\
    \    assert select_words(\"abc def ghi\", 25) == []\n    assert select_words(\"\
    abc def ghi\", 26) == []\n    assert select_words(\"abc def ghi\", 27) == []\n\
    \    assert select_words(\"abc def ghi\", 28) == []\n    assert select_words(\"\
    abc def ghi\", 29) == []\n    assert select_words(\"abc def ghi\", 30) == []\n\
    \    assert select_words(\"abc def ghi\", 31) == []\n    assert select_words(\"\
    abc def ghi\", 32) == []\n    assert select_words(\"abc def ghi\", 33) == []\n\
    \    assert select_words(\"abc def ghi\", 34) == []\n    assert select_words(\"\
    abc def ghi\", 35) == []\n    assert select_words(\"abc def ghi\", 36) == []\n\
    \    assert select_words(\"abc def ghi\", 37) == []\n    assert select_words(\"\
    abc def gh\ndef check(candidate):\n    assert candidate('Mary had a little lamb',\
    \ 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary',\
    \ 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmparnq_e8y.py\", line 46\n    assert select_words(\"abc\
    \ def gh\n                        ^\nSyntaxError: unterminated string literal\
    \ (detected at line 46)\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    assert select_words(\"abc\
    \ def ghi\", 2) == [\"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\"\
    , 3) == []\n    assert select_words(\"abc def ghi\", 4) == []\n    assert select_words(\"\
    abc def ghi\", 5) == []\n    assert select_words(\"abc def ghi\", 6) == []\n \
    \   assert select_words(\"abc def ghi\", 7) == []\n    assert select_words(\"\
    abc def ghi\", 8) == []\n    assert select_words(\"abc def ghi\", 9) == []\n \
    \   assert select_words(\"abc def ghi\", 10) == []\n    assert select_words(\"\
    abc def ghi\", 11) == []\n    assert select_words(\"abc def ghi\", 12) == []\n\
    \    assert select_words(\"abc def ghi\", 13) == []\n    assert select_words(\"\
    abc def ghi\", 14) == []\n    assert select_words(\"abc def ghi\", 15) == []\n\
    \    assert select_words(\"abc def ghi\", 16) == []\n    assert select_words(\"\
    abc def ghi\", 17) == []\n    assert select_words(\"abc def ghi\", 18) == []\n\
    \    assert select_words(\"abc def ghi\", 19) == []\n    assert select_words(\"\
    abc def ghi\", 20) == []\n    assert select_words(\"abc def ghi\", 21) == []\n\
    \    assert select_words(\"abc def ghi\", 22) == []\n    assert select_words(\"\
    abc def ghi\", 23) == []\n    assert select_words(\"abc def ghi\", 24) == []\n\
    \    assert select_words(\"abc def ghi\", 25) == []\n    assert select_words(\"\
    abc def ghi\", 26) == []\n    assert select_words(\"abc def ghi\", 27) == []\n\
    \    assert select_words(\"abc def ghi\", 28) == []\n    assert select_words(\"\
    abc def ghi\", 29) == []\n    assert select_words(\"abc def ghi\", 30) == []\n\
    \    assert select_words(\"abc def ghi\", 31) == []\n    assert select_words(\"\
    abc def ghi\", 32) == []\n    assert select_words(\"abc def ghi\", 33) == []\n\
    \    assert select_words(\"abc def ghi\", 34) == []\n    assert select_words(\"\
    abc def ghi\", 35) == []\n    assert select_words(\"abc def ghi\", 36) == []\n\
    \    assert select_words(\"abc def ghi\", 37) == []\n    assert select_word\n\
    def check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert\
    \ candidate('simple white space', 2) == []\n    assert candidate('Hello world',\
    \ 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert\
    \ candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c',\
    \ 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwu8fs2ip.py\", line\
    \ 60, in <module>\n    test_check()\n  File \"/tmp/tmpwu8fs2ip.py\", line 58,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpwu8fs2ip.py\", line\
    \ 49, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmpwu8fs2ip.py\", line 11, in select_words\n    assert select_words(\"\
    abc def ghi\", 2) == [\"def\", \"ghi\"]\n  File \"/tmp/tmpwu8fs2ip.py\", line\
    \ 11, in select_words\n    assert select_words(\"abc def ghi\", 2) == [\"def\"\
    , \"ghi\"]\n  File \"/tmp/tmpwu8fs2ip.py\", line 11, in select_words\n    assert\
    \ select_words(\"abc def ghi\", 2) == [\"def\", \"ghi\"]\n  [Previous line repeated\
    \ 994 more times]\nRecursionError: maximum recursion depth exceeded\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 280, in <module>\n    test_check()\n  File \"/tmp/tmpyxd40gft.py\", line 278,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 269, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 280, in <module>\n    test_check()\n  File \"/tmp/tmpyxd40gft.py\", line 278,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 269, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 280, in <module>\n    test_check()\n  File \"/tmp/tmpyxd40gft.py\", line 278,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 269, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 280, in <module>\n    test_check()\n  File \"/tmp/tmpyxd40gft.py\", line 278,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 269, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    assert select_words(\"abc\
    \ def ghi\", 2) == [\"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\"\
    , 3) == []\n    assert select_words(\"abc def ghi\", 0) == []\n    assert select_words(\"\
    abc def ghi\", 5) == []\n    assert select_words(\"abc def ghi\", 6) == []\n \
    \   assert select_words(\"abc def ghi\", 7) == []\n    assert select_words(\"\
    abc def ghi\", 8) == []\n    assert select_words(\"abc def ghi\", 9) == []\n \
    \   assert select_words(\"abc def ghi\", 10) == []\n    assert select_words(\"\
    abc def ghi\", 11) == []\n    assert select_words(\"abc def ghi\", 12) == []\n\
    \    assert select_words(\"abc def ghi\", 13) == []\n    assert select_words(\"\
    abc def ghi\", 14) == []\n    assert select_words(\"abc def ghi\", 15) == []\n\
    \    assert select_words(\"abc def ghi\", 16) == []\n    assert select_words(\"\
    abc def ghi\", 17) == []\n    assert select_words(\"abc def ghi\", 18) == []\n\
    \    assert select_words(\"abc def ghi\", 19) == []\n    assert select_words(\"\
    abc def ghi\", 20) == []\n    assert select_words(\"abc def ghi\", 21) == []\n\
    \    assert select_words(\"abc def ghi\", 22) == []\n    assert select_words(\"\
    abc def ghi\", 23) == []\n    assert select_words(\"abc def ghi\", 24) == []\n\
    \    assert select_words(\"abc def ghi\", 25) == []\n    assert select_words(\"\
    abc def ghi\", 26) == []\n    assert select_words(\"abc def ghi\", 27) == []\n\
    \    assert select_words(\"abc def ghi\", 28) == []\n    assert select_words(\"\
    abc def ghi\", 29) == []\n    assert select_words(\"abc def ghi\", 30) == []\n\
    \    assert select_words(\"abc def ghi\", 31) == []\n    assert select_words(\"\
    abc def ghi\", 32) == []\n    assert select_words(\"abc def ghi\", 33) == []\n\
    \    assert select_words(\"abc def ghi\", 34) == []\n    assert select_words(\"\
    abc def ghi\", 35) == []\n    assert select_words(\"abc def ghi\", 36) == []\n\
    \    assert select_words(\"abc def ghi\", 37) == []\n    assert select_word\n\
    def check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert\
    \ candidate('simple white space', 2) == []\n    assert candidate('Hello world',\
    \ 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert\
    \ candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c',\
    \ 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3vj47x28.py\", line\
    \ 60, in <module>\n    test_check()\n  File \"/tmp/tmp3vj47x28.py\", line 58,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp3vj47x28.py\", line\
    \ 49, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmp3vj47x28.py\", line 11, in select_words\n    assert select_words(\"\
    abc def ghi\", 2) == [\"def\", \"ghi\"]\n  File \"/tmp/tmp3vj47x28.py\", line\
    \ 11, in select_words\n    assert select_words(\"abc def ghi\", 2) == [\"def\"\
    , \"ghi\"]\n  File \"/tmp/tmp3vj47x28.py\", line 11, in select_words\n    assert\
    \ select_words(\"abc def ghi\", 2) == [\"def\", \"ghi\"]\n  [Previous line repeated\
    \ 994 more times]\nRecursionError: maximum recursion depth exceeded\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    assert select_words(\"abc\
    \ def ghi\", 2) == [\"abc\", \"def\"]\n    assert select_words(\"abc def ghi\"\
    , 3) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\",\
    \ 4) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\",\
    \ 5) == []\n    assert select_words(\"abc def ghi\", 0) == []\n    assert select_words(\"\
    abc def ghi\", -1) == []\n    assert select_words(\"abc def ghi\", -2) == []\n\
    \    assert select_words(\"abc def ghi\", -3) == []\n    assert select_words(\"\
    abc def ghi\", -4) == []\n    assert select_words(\"abc def ghi\", -5) == []\n\
    \    assert select_words(\"abc def ghi\", -6) == []\n    assert select_words(\"\
    abc def ghi\", -7) == []\n    assert select_words(\"abc def ghi\", -8) == []\n\
    \    assert select_words(\"abc def ghi\", -9) == []\n    assert select_words(\"\
    abc def ghi\", -10) == []\n    assert select_words(\"abc def ghi\", -11) == []\n\
    \    assert select_words(\"abc def ghi\", -12) == []\n    assert select_words(\"\
    abc def ghi\", -13) == []\n    assert select_words(\"abc def ghi\", -14) == []\n\
    \    assert select_words(\"abc def ghi\", -15) == []\n    assert select_words(\"\
    abc def ghi\", -16) == []\n    assert select_words(\"abc def ghi\", -17) == []\n\
    \    assert select_words(\"abc def ghi\", -18) == []\n    assert select_words(\"\
    abc def ghi\", -19) == []\n    assert select_words(\"abc def ghi\", -20) == []\n\
    \    assert select_words(\"abc def ghi\", -21) == []\n    assert select_words(\"\
    abc def ghi\", -22) == []\n    assert select_words(\"abc def ghi\", -23) == []\n\
    \    assert select_words(\"abc def ghi\", -24) == []\n    assert select_words(\"\
    abc def ghi\", -25) == []\n    assert select_words(\"abc def ghi\", -26) == []\n\
    \    assert select_words(\"abc def ghi\", -27) == []\n    assert select_words(\"\
    abc def ghi\", -28) == []\n    assert select_words(\"abc def ghi\", -29) == []\n\
    \    assert select_words(\"abc def ghi\", \ndef check(candidate):\n    assert\
    \ candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp4dhqhugd.py\", line 45\n    assert select_words(\"abc\
    \ def ghi\", \n                       ^\nSyntaxError: '(' was never closed\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 280, in <module>\n    test_check()\n  File \"/tmp/tmpyxd40gft.py\", line 278,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 269, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    assert select_words(\"abc\
    \ def ghi\", 2) == [\"abc\", \"ghi\"]\n    assert select_words(\"abc def ghi\"\
    , 3) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\",\
    \ 4) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\",\
    \ 5) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\",\
    \ 6) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\",\
    \ 7) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\",\
    \ 8) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\",\
    \ 9) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\",\
    \ 10) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\"\
    , 11) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\"\
    , 12) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\"\
    , 13) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\"\
    , 14) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\"\
    , 15) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\"\
    , 16) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\"\
    , 17) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\"\
    , 18) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\"\
    , 19) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\"\
    , 20) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\"\
    , 21) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\"\
    , 22) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\"\
    , 23) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\"\
    , 24) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\"\
    , 25) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\"\
    , \ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) ==\
    \ ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n\
    \    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp7crp2gxh.py\", line 35\n    assert select_words(\"abc\
    \ def ghi\", \n                       ^\nSyntaxError: '(' was never closed\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 280, in <module>\n    test_check()\n  File \"/tmp/tmpyxd40gft.py\", line 278,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 269, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 280, in <module>\n    test_check()\n  File \"/tmp/tmpyxd40gft.py\", line 278,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 269, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 280, in <module>\n    test_check()\n  File \"/tmp/tmpyxd40gft.py\", line 278,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 269, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    assert select_words(\"abc\
    \ def ghi\", 2) == [\"abc\", \"ghi\"]\n    assert select_words(\"abc def ghi\"\
    , 3) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\",\
    \ 4) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\",\
    \ 5) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\",\
    \ 6) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\",\
    \ 7) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\",\
    \ 8) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\",\
    \ 9) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\",\
    \ 10) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\"\
    , 11) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\"\
    , 12) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\"\
    , 13) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\"\
    , 14) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\"\
    , 15) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\"\
    , 16) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\"\
    , 17) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\"\
    , 18) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\"\
    , 19) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\"\
    , 20) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\"\
    , 21) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\"\
    , 22) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\"\
    , 23) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\"\
    , 24) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\"\
    , 25) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\"\
    , \ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) ==\
    \ ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n\
    \    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp7crp2gxh.py\", line 35\n    assert select_words(\"abc\
    \ def ghi\", \n                       ^\nSyntaxError: '(' was never closed\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 280, in <module>\n    test_check()\n  File \"/tmp/tmpyxd40gft.py\", line 278,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 269, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 280, in <module>\n    test_check()\n  File \"/tmp/tmpyxd40gft.py\", line 278,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 269, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 280, in <module>\n    test_check()\n  File \"/tmp/tmpyxd40gft.py\", line 278,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 269, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 280, in <module>\n    test_check()\n  File \"/tmp/tmpyxd40gft.py\", line 278,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 269, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 280, in <module>\n    test_check()\n  File \"/tmp/tmpyxd40gft.py\", line 278,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 269, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 280, in <module>\n    test_check()\n  File \"/tmp/tmpyxd40gft.py\", line 278,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 269, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 280, in <module>\n    test_check()\n  File \"/tmp/tmpyxd40gft.py\", line 278,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 269, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    assert select_words(\"abc\
    \ def ghi\", 2) == [\"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\"\
    , 3) == []\n    assert select_words(\"abc def ghi\", 4) == []\n    assert select_words(\"\
    abc def ghi\", 5) == []\n    assert select_words(\"abc def ghi\", 6) == []\n \
    \   assert select_words(\"abc def ghi\", 7) == []\n    assert select_words(\"\
    abc def ghi\", 8) == []\n    assert select_words(\"abc def ghi\", 9) == []\n \
    \   assert select_words(\"abc def ghi\", 10) == []\n    assert select_words(\"\
    abc def ghi\", 11) == []\n    assert select_words(\"abc def ghi\", 12) == []\n\
    \    assert select_words(\"abc def ghi\", 13) == []\n    assert select_words(\"\
    abc def ghi\", 14) == []\n    assert select_words(\"abc def ghi\", 15) == []\n\
    \    assert select_words(\"abc def ghi\", 16) == []\n    assert select_words(\"\
    abc def ghi\", 17) == []\n    assert select_words(\"abc def ghi\", 18) == []\n\
    \    assert select_words(\"abc def ghi\", 19) == []\n    assert select_words(\"\
    abc def ghi\", 20) == []\n    assert select_words(\"abc def ghi\", 21) == []\n\
    \    assert select_words(\"abc def ghi\", 22) == []\n    assert select_words(\"\
    abc def ghi\", 23) == []\n    assert select_words(\"abc def ghi\", 24) == []\n\
    \    assert select_words(\"abc def ghi\", 25) == []\n    assert select_words(\"\
    abc def ghi\", 26) == []\n    assert select_words(\"abc def ghi\", 27) == []\n\
    \    assert select_words(\"abc def ghi\", 28) == []\n    assert select_words(\"\
    abc def ghi\", 29) == []\n    assert select_words(\"abc def ghi\", 30) == []\n\
    \    assert select_words(\"abc def ghi\", 31) == []\n    assert select_words(\"\
    abc def ghi\", 32) == []\n    assert select_words(\"abc def ghi\", 33) == []\n\
    \    assert select_words(\"abc def ghi\", 34) == []\n    assert select_words(\"\
    abc def ghi\", 35) == []\n    assert select_words(\"abc def ghi\", 36) == []\n\
    \    assert select_words(\"abc def ghi\", 37) == []\n    assert select_word\n\
    def check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert\
    \ candidate('simple white space', 2) == []\n    assert candidate('Hello world',\
    \ 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert\
    \ candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c',\
    \ 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwu8fs2ip.py\", line\
    \ 60, in <module>\n    test_check()\n  File \"/tmp/tmpwu8fs2ip.py\", line 58,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpwu8fs2ip.py\", line\
    \ 49, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmpwu8fs2ip.py\", line 11, in select_words\n    assert select_words(\"\
    abc def ghi\", 2) == [\"def\", \"ghi\"]\n  File \"/tmp/tmpwu8fs2ip.py\", line\
    \ 11, in select_words\n    assert select_words(\"abc def ghi\", 2) == [\"def\"\
    , \"ghi\"]\n  File \"/tmp/tmpwu8fs2ip.py\", line 11, in select_words\n    assert\
    \ select_words(\"abc def ghi\", 2) == [\"def\", \"ghi\"]\n  [Previous line repeated\
    \ 994 more times]\nRecursionError: maximum recursion depth exceeded\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    assert select_words(\"abc\
    \ def ghi\", 3) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc\
    \ def ghi\", 4) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc\
    \ def ghi\", 5) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc\
    \ def ghi\", 6) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc\
    \ def ghi\", 7) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc\
    \ def ghi\", 8) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc\
    \ def ghi\", 9) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc\
    \ def ghi\", 10) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc\
    \ def ghi\", 11) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc\
    \ def ghi\", 12) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc\
    \ def ghi\", 13) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc\
    \ def ghi\", 14) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc\
    \ def ghi\", 15) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc\
    \ def ghi\", 16) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc\
    \ def ghi\", 17) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc\
    \ def ghi\", 18) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc\
    \ def ghi\", 19) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc\
    \ def ghi\", 20) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc\
    \ def ghi\", 21) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc\
    \ def ghi\", 22) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc\
    \ def ghi\", 23) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc\
    \ def ghi\", 24) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc\
    \ def ghi\", 25) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc\
    \ def ghi\", 26) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc\
    \ def gh\ndef check(candidate):\n    assert candidate('Mary had a little lamb',\
    \ 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary',\
    \ 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp4kj66k1l.py\", line 35\n    assert select_words(\"abc\
    \ def gh\n                        ^\nSyntaxError: unterminated string literal\
    \ (detected at line 35)\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    assert select_words(\"abc\
    \ def ghi\", 3) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc\
    \ def ghi\", 4) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc\
    \ def ghi\", 5) == []\n    assert select_words(\"abc def ghi\", 0) == []\n   \
    \ assert select_words(\"abc def ghi\", -1) == []\n    assert select_words(\"abc\
    \ def ghi\", -2) == []\n    assert select_words(\"abc def ghi\", -3) == []\n \
    \   assert select_words(\"abc def ghi\", -4) == []\n    assert select_words(\"\
    abc def ghi\", -5) == []\n    assert select_words(\"abc def ghi\", -6) == []\n\
    \    assert select_words(\"abc def ghi\", -7) == []\n    assert select_words(\"\
    abc def ghi\", -8) == []\n    assert select_words(\"abc def ghi\", -9) == []\n\
    \    assert select_words(\"abc def ghi\", -10) == []\n    assert select_words(\"\
    abc def ghi\", -11) == []\n    assert select_words(\"abc def ghi\", -12) == []\n\
    \    assert select_words(\"abc def ghi\", -13) == []\n    assert select_words(\"\
    abc def ghi\", -14) == []\n    assert select_words(\"abc def ghi\", -15) == []\n\
    \    assert select_words(\"abc def ghi\", -16) == []\n    assert select_words(\"\
    abc def ghi\", -17) == []\n    assert select_words(\"abc def ghi\", -18) == []\n\
    \    assert select_words(\"abc def ghi\", -19) == []\n    assert select_words(\"\
    abc def ghi\", -20) == []\n    assert select_words(\"abc def ghi\", -21) == []\n\
    \    assert select_words(\"abc def ghi\", -22) == []\n    assert select_words(\"\
    abc def ghi\", -23) == []\n    assert select_words(\"abc def ghi\", -24) == []\n\
    \    assert select_words(\"abc def ghi\", -25) == []\n    assert select_words(\"\
    abc def ghi\", -26) == []\n    assert select_words(\"abc def ghi\", -27) == []\n\
    \    assert select_words(\"abc def ghi\", -28) == []\n    assert select_words(\"\
    abc def ghi\", -29) == []\n    assert select_words(\"abc def ghi\", -30) == []\n\
    \    assert select_words(\"abc def ghi\", -31) == []\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpc7kx2h47.py\", line\
    \ 58, in <module>\n    test_check()\n  File \"/tmp/tmpc7kx2h47.py\", line 56,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpc7kx2h47.py\", line\
    \ 47, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmpc7kx2h47.py\", line 11, in select_words\n    assert select_words(\"\
    abc def ghi\", 3) == [\"abc\", \"def\", \"ghi\"]\n  File \"/tmp/tmpc7kx2h47.py\"\
    , line 11, in select_words\n    assert select_words(\"abc def ghi\", 3) == [\"\
    abc\", \"def\", \"ghi\"]\n  File \"/tmp/tmpc7kx2h47.py\", line 11, in select_words\n\
    \    assert select_words(\"abc def ghi\", 3) == [\"abc\", \"def\", \"ghi\"]\n\
    \  [Previous line repeated 994 more times]\nRecursionError: maximum recursion\
    \ depth exceeded\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    assert select_words(\"abc\
    \ def ghi\", 3) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc\
    \ def ghi\", 0) == []\n    assert select_words(\"abc def ghi\", 5) == []\n   \
    \ assert select_words(\"abc def ghi\", 6) == []\n    assert select_words(\"abc\
    \ def ghi\", 7) == []\n    assert select_words(\"abc def ghi\", 8) == []\n   \
    \ assert select_words(\"abc def ghi\", 9) == []\n    assert select_words(\"abc\
    \ def ghi\", 10) == []\n    assert select_words(\"abc def ghi\", 11) == []\n \
    \   assert select_words(\"abc def ghi\", 12) == []\n    assert select_words(\"\
    abc def ghi\", 13) == []\n    assert select_words(\"abc def ghi\", 14) == []\n\
    \    assert select_words(\"abc def ghi\", 15) == []\n    assert select_words(\"\
    abc def ghi\", 16) == []\n    assert select_words(\"abc def ghi\", 17) == []\n\
    \    assert select_words(\"abc def ghi\", 18) == []\n    assert select_words(\"\
    abc def ghi\", 19) == []\n    assert select_words(\"abc def ghi\", 20) == []\n\
    \    assert select_words(\"abc def ghi\", 21) == []\n    assert select_words(\"\
    abc def ghi\", 22) == []\n    assert select_words(\"abc def ghi\", 23) == []\n\
    \    assert select_words(\"abc def ghi\", 24) == []\n    assert select_words(\"\
    abc def ghi\", 25) == []\n    assert select_words(\"abc def ghi\", 26) == []\n\
    \    assert select_words(\"abc def ghi\", 27) == []\n    assert select_words(\"\
    abc def ghi\", 28) == []\n    assert select_words(\"abc def ghi\", 29) == []\n\
    \    assert select_words(\"abc def ghi\", 30) == []\n    assert select_words(\"\
    abc def ghi\", 31) == []\n    assert select_words(\"abc def ghi\", 32) == []\n\
    \    assert select_words(\"abc def ghi\", 33) == []\n    assert select_words(\"\
    abc def ghi\", 34) == []\n    assert select_words(\"abc def ghi\", 35) == []\n\
    \    assert select_words(\"abc def ghi\", 36) == []\n    assert select_words(\"\
    abc def ghi\", 37) == []\n    assert select_words(\"abc def ghi\", 38) == []\n\
    \    assert \ndef check(candidate):\n    assert candidate('Mary had a little lamb',\
    \ 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary',\
    \ 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp5x258kuj.py\", line 47\n    assert \n           ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    assert select_words(\"abc\
    \ def ghi\", 2) == [\"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\"\
    , 3) == []\n    assert select_words(\"abc def ghi\", 4) == []\n    assert select_words(\"\
    abc def ghi\", 5) == []\n    assert select_words(\"abc def ghi\", 6) == []\n \
    \   assert select_words(\"abc def ghi\", 7) == []\n    assert select_words(\"\
    abc def ghi\", 8) == []\n    assert select_words(\"abc def ghi\", 9) == []\n \
    \   assert select_words(\"abc def ghi\", 10) == []\n    assert select_words(\"\
    abc def ghi\", 11) == []\n    assert select_words(\"abc def ghi\", 12) == []\n\
    \    assert select_words(\"abc def ghi\", 13) == []\n    assert select_words(\"\
    abc def ghi\", 14) == []\n    assert select_words(\"abc def ghi\", 15) == []\n\
    \    assert select_words(\"abc def ghi\", 16) == []\n    assert select_words(\"\
    abc def ghi\", 17) == []\n    assert select_words(\"abc def ghi\", 18) == []\n\
    \    assert select_words(\"abc def ghi\", 19) == []\n    assert select_words(\"\
    abc def ghi\", 20) == []\n    assert select_words(\"abc def ghi\", 21) == []\n\
    \    assert select_words(\"abc def ghi\", 22) == []\n    assert select_words(\"\
    abc def ghi\", 23) == []\n    assert select_words(\"abc def ghi\", 24) == []\n\
    \    assert select_words(\"abc def ghi\", 25) == []\n    assert select_words(\"\
    abc def ghi\", 26) == []\n    assert select_words(\"abc def ghi\", 27) == []\n\
    \    assert select_words(\"abc def ghi\", 28) == []\n    assert select_words(\"\
    abc def ghi\", 29) == []\n    assert select_words(\"abc def ghi\", 30) == []\n\
    \    assert select_words(\"abc def ghi\", 31) == []\n    assert select_words(\"\
    abc def ghi\", 32) == []\n    assert select_words(\"abc def ghi\", 33) == []\n\
    \    assert select_words(\"abc def ghi\", 34) == []\n    assert select_words(\"\
    abc def ghi\", 35) == []\n    assert select_words(\"abc def ghi\", 36) == []\n\
    \    assert select_words(\"abc def ghi\", 37) == []\n    assert select_word\n\
    def check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert\
    \ candidate('simple white space', 2) == []\n    assert candidate('Hello world',\
    \ 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert\
    \ candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c',\
    \ 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwu8fs2ip.py\", line\
    \ 60, in <module>\n    test_check()\n  File \"/tmp/tmpwu8fs2ip.py\", line 58,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpwu8fs2ip.py\", line\
    \ 49, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmpwu8fs2ip.py\", line 11, in select_words\n    assert select_words(\"\
    abc def ghi\", 2) == [\"def\", \"ghi\"]\n  File \"/tmp/tmpwu8fs2ip.py\", line\
    \ 11, in select_words\n    assert select_words(\"abc def ghi\", 2) == [\"def\"\
    , \"ghi\"]\n  File \"/tmp/tmpwu8fs2ip.py\", line 11, in select_words\n    assert\
    \ select_words(\"abc def ghi\", 2) == [\"def\", \"ghi\"]\n  [Previous line repeated\
    \ 994 more times]\nRecursionError: maximum recursion depth exceeded\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    assert select_words(\"abc\
    \ def ghi\", 2) == [\"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\"\
    , 3) == []\n    assert select_words(\"abc def ghi\", 4) == []\n    assert select_words(\"\
    abc def ghi\", 5) == []\n    assert select_words(\"abc def ghi\", 6) == []\n \
    \   assert select_words(\"abc def ghi\", 7) == []\n    assert select_words(\"\
    abc def ghi\", 8) == []\n    assert select_words(\"abc def ghi\", 9) == []\n \
    \   assert select_words(\"abc def ghi\", 10) == []\n    assert select_words(\"\
    abc def ghi\", 11) == []\n    assert select_words(\"abc def ghi\", 12) == []\n\
    \    assert select_words(\"abc def ghi\", 13) == []\n    assert select_words(\"\
    abc def ghi\", 14) == []\n    assert select_words(\"abc def ghi\", 15) == []\n\
    \    assert select_words(\"abc def ghi\", 16) == []\n    assert select_words(\"\
    abc def ghi\", 17) == []\n    assert select_words(\"abc def ghi\", 18) == []\n\
    \    assert select_words(\"abc def ghi\", 19) == []\n    assert select_words(\"\
    abc def ghi\", 20) == []\n    assert select_words(\"abc def ghi\", 21) == []\n\
    \    assert select_words(\"abc def ghi\", 22) == []\n    assert select_words(\"\
    abc def ghi\", 23) == []\n    assert select_words(\"abc def ghi\", 24) == []\n\
    \    assert select_words(\"abc def ghi\", 25) == []\n    assert select_words(\"\
    abc def ghi\", 26) == []\n    assert select_words(\"abc def ghi\", 27) == []\n\
    \    assert select_words(\"abc def ghi\", 28) == []\n    assert select_words(\"\
    abc def ghi\", 29) == []\n    assert select_words(\"abc def ghi\", 30) == []\n\
    \    assert select_words(\"abc def ghi\", 31) == []\n    assert select_words(\"\
    abc def ghi\", 32) == []\n    assert select_words(\"abc def ghi\", 33) == []\n\
    \    assert select_words(\"abc def ghi\", 34) == []\n    assert select_words(\"\
    abc def ghi\", 35) == []\n    assert select_words(\"abc def ghi\", 36) == []\n\
    \    assert select_words(\"abc def ghi\", 37) == []\n    assert select_word\n\
    def check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert\
    \ candidate('simple white space', 2) == []\n    assert candidate('Hello world',\
    \ 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert\
    \ candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c',\
    \ 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwu8fs2ip.py\", line\
    \ 60, in <module>\n    test_check()\n  File \"/tmp/tmpwu8fs2ip.py\", line 58,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpwu8fs2ip.py\", line\
    \ 49, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmpwu8fs2ip.py\", line 11, in select_words\n    assert select_words(\"\
    abc def ghi\", 2) == [\"def\", \"ghi\"]\n  File \"/tmp/tmpwu8fs2ip.py\", line\
    \ 11, in select_words\n    assert select_words(\"abc def ghi\", 2) == [\"def\"\
    , \"ghi\"]\n  File \"/tmp/tmpwu8fs2ip.py\", line 11, in select_words\n    assert\
    \ select_words(\"abc def ghi\", 2) == [\"def\", \"ghi\"]\n  [Previous line repeated\
    \ 994 more times]\nRecursionError: maximum recursion depth exceeded\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 280, in <module>\n    test_check()\n  File \"/tmp/tmpyxd40gft.py\", line 278,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 269, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    assert select_words(\"abc\
    \ def ghi\", 3) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc\
    \ def ghi\", 5) == []\n    assert select_words(\"abc def ghi\", 0) == []\n   \
    \ assert select_words(\"abc def ghi\", 4) == []\n    assert select_words(\"abc\
    \ def ghi\", 6) == []\n    assert select_words(\"abc def ghi\", 7) == []\n   \
    \ assert select_words(\"abc def ghi\", 8) == []\n    assert select_words(\"abc\
    \ def ghi\", 9) == []\n    assert select_words(\"abc def ghi\", 10) == []\n  \
    \  assert select_words(\"abc def ghi\", 11) == []\n    assert select_words(\"\
    abc def ghi\", 12) == []\n    assert select_words(\"abc def ghi\", 13) == []\n\
    \    assert select_words(\"abc def ghi\", 14) == []\n    assert select_words(\"\
    abc def ghi\", 15) == []\n    assert select_words(\"abc def ghi\", 16) == []\n\
    \    assert select_words(\"abc def ghi\", 17) == []\n    assert select_words(\"\
    abc def ghi\", 18) == []\n    assert select_words(\"abc def ghi\", 19) == []\n\
    \    assert select_words(\"abc def ghi\", 20) == []\n    assert select_words(\"\
    abc def ghi\", 21) == []\n    assert select_words(\"abc def ghi\", 22) == []\n\
    \    assert select_words(\"abc def ghi\", 23) == []\n    assert select_words(\"\
    abc def ghi\", 24) == []\n    assert select_words(\"abc def ghi\", 25) == []\n\
    \    assert select_words(\"abc def ghi\", 26) == []\n    assert select_words(\"\
    abc def ghi\", 27) == []\n    assert select_words(\"abc def ghi\", 28) == []\n\
    \    assert select_words(\"abc def ghi\", 29) == []\n    assert select_words(\"\
    abc def ghi\", 30) == []\n    assert select_words(\"abc def ghi\", 31) == []\n\
    \    assert select_words(\"abc def ghi\", 32) == []\n    assert select_words(\"\
    abc def ghi\", 33) == []\n    assert select_words(\"abc def ghi\", 34) == []\n\
    \    assert select_words(\"abc def ghi\", 35) == []\n    assert select_words(\"\
    abc def ghi\", 36) == []\n    assert select_words(\"abc def ghi\", 37) == []\n\
    \    assert \ndef check(candidate):\n    assert candidate('Mary had a little lamb',\
    \ 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary',\
    \ 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpggkdf2_6.py\", line 47\n    assert \n           ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    assert select_words(\"abc\
    \ def ghi\", 3) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc\
    \ def ghi\", 0) == []\n    assert select_words(\"abc def ghi\", 5) == []\n   \
    \ assert select_words(\"abc def ghi\", 2) == [\"abc\", \"def\"]\n    assert select_words(\"\
    abc def ghi\", 4) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc\
    \ def ghi\", 6) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc\
    \ def ghi\", 7) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc\
    \ def ghi\", 8) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc\
    \ def ghi\", 9) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc\
    \ def ghi\", 10) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc\
    \ def ghi\", 11) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc\
    \ def ghi\", 12) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc\
    \ def ghi\", 13) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc\
    \ def ghi\", 14) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc\
    \ def ghi\", 15) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc\
    \ def ghi\", 16) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc\
    \ def ghi\", 17) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc\
    \ def ghi\", 18) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc\
    \ def ghi\", 19) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc\
    \ def ghi\", 20) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc\
    \ def ghi\", 21) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc\
    \ def ghi\", 22) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc\
    \ def ghi\", 23) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc\
    \ def ghi\", 24) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc\
    \ def ghi\", 25) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"\n\
    def check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert\
    \ candidate('simple white space', 2) == []\n    assert candidate('Hello world',\
    \ 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert\
    \ candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c',\
    \ 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpsd1_s6ba.py\", line 36\n    assert select_words(\"\n \
    \                       ^\nSyntaxError: unterminated string literal (detected\
    \ at line 36)\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 280, in <module>\n    test_check()\n  File \"/tmp/tmpyxd40gft.py\", line 278,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 269, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    assert select_words(\"abc\
    \ def ghi\", 2) == [\"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\"\
    , 3) == []\n    assert select_words(\"abc def ghi\", 4) == []\n    assert select_words(\"\
    abc def ghi\", 5) == []\n    assert select_words(\"abc def ghi\", 6) == []\n \
    \   assert select_words(\"abc def ghi\", 7) == []\n    assert select_words(\"\
    abc def ghi\", 8) == []\n    assert select_words(\"abc def ghi\", 9) == []\n \
    \   assert select_words(\"abc def ghi\", 10) == []\n    assert select_words(\"\
    abc def ghi\", 11) == []\n    assert select_words(\"abc def ghi\", 12) == []\n\
    \    assert select_words(\"abc def ghi\", 13) == []\n    assert select_words(\"\
    abc def ghi\", 14) == []\n    assert select_words(\"abc def ghi\", 15) == []\n\
    \    assert select_words(\"abc def ghi\", 16) == []\n    assert select_words(\"\
    abc def ghi\", 17) == []\n    assert select_words(\"abc def ghi\", 18) == []\n\
    \    assert select_words(\"abc def ghi\", 19) == []\n    assert select_words(\"\
    abc def ghi\", 20) == []\n    assert select_words(\"abc def ghi\", 21) == []\n\
    \    assert select_words(\"abc def ghi\", 22) == []\n    assert select_words(\"\
    abc def ghi\", 23) == []\n    assert select_words(\"abc def ghi\", 24) == []\n\
    \    assert select_words(\"abc def ghi\", 25) == []\n    assert select_words(\"\
    abc def ghi\", 26) == []\n    assert select_words(\"abc def ghi\", 27) == []\n\
    \    assert select_words(\"abc def ghi\", 28) == []\n    assert select_words(\"\
    abc def ghi\", 29) == []\n    assert select_words(\"abc def ghi\", 30) == []\n\
    \    assert select_words(\"abc def ghi\", 31) == []\n    assert select_words(\"\
    abc def ghi\", 32) == []\n    assert select_words(\"abc def ghi\", 33) == []\n\
    \    assert select_words(\"abc def ghi\", 34) == []\n    assert select_words(\"\
    abc def ghi\", 35) == []\n    assert select_words(\"abc def ghi\", 36) == []\n\
    \    assert select_words(\"abc def ghi\", 37) == []\n    assert select_word\n\
    def check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert\
    \ candidate('simple white space', 2) == []\n    assert candidate('Hello world',\
    \ 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert\
    \ candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c',\
    \ 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwu8fs2ip.py\", line\
    \ 60, in <module>\n    test_check()\n  File \"/tmp/tmpwu8fs2ip.py\", line 58,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpwu8fs2ip.py\", line\
    \ 49, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmpwu8fs2ip.py\", line 11, in select_words\n    assert select_words(\"\
    abc def ghi\", 2) == [\"def\", \"ghi\"]\n  File \"/tmp/tmpwu8fs2ip.py\", line\
    \ 11, in select_words\n    assert select_words(\"abc def ghi\", 2) == [\"def\"\
    , \"ghi\"]\n  File \"/tmp/tmpwu8fs2ip.py\", line 11, in select_words\n    assert\
    \ select_words(\"abc def ghi\", 2) == [\"def\", \"ghi\"]\n  [Previous line repeated\
    \ 994 more times]\nRecursionError: maximum recursion depth exceeded\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    assert select_words(\"abc\
    \ def ghi\", 2) == [\"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\"\
    , 3) == []\n    assert select_words(\"abc def ghi\", 4) == []\n    assert select_words(\"\
    abc def ghi\", 5) == []\n    assert select_words(\"abc def ghi\", 6) == []\n \
    \   assert select_words(\"abc def ghi\", 7) == []\n    assert select_words(\"\
    abc def ghi\", 8) == []\n    assert select_words(\"abc def ghi\", 9) == []\n \
    \   assert select_words(\"abc def ghi\", 10) == []\n    assert select_words(\"\
    abc def ghi\", 11) == []\n    assert select_words(\"abc def ghi\", 12) == []\n\
    \    assert select_words(\"abc def ghi\", 13) == []\n    assert select_words(\"\
    abc def ghi\", 14) == []\n    assert select_words(\"abc def ghi\", 15) == []\n\
    \    assert select_words(\"abc def ghi\", 16) == []\n    assert select_words(\"\
    abc def ghi\", 17) == []\n    assert select_words(\"abc def ghi\", 18) == []\n\
    \    assert select_words(\"abc def ghi\", 19) == []\n    assert select_words(\"\
    abc def ghi\", 20) == []\n    assert select_words(\"abc def ghi\", 21) == []\n\
    \    assert select_words(\"abc def ghi\", 22) == []\n    assert select_words(\"\
    abc def ghi\", 23) == []\n    assert select_words(\"abc def ghi\", 24) == []\n\
    \    assert select_words(\"abc def ghi\", 25) == []\n    assert select_words(\"\
    abc def ghi\", 26) == []\n    assert select_words(\"abc def ghi\", 27) == []\n\
    \    assert select_words(\"abc def ghi\", 28) == []\n    assert select_words(\"\
    abc def ghi\", 29) == []\n    assert select_words(\"abc def ghi\", 30) == []\n\
    \    assert select_words(\"abc def ghi\", 31) == []\n    assert select_words(\"\
    abc def ghi\", 32) == []\n    assert select_words(\"abc def ghi\", 33) == []\n\
    \    assert select_words(\"abc def ghi\", 34) == []\n    assert select_words(\"\
    abc def ghi\", 35) == []\n    assert select_words(\"abc def ghi\", 36) == []\n\
    \    assert select_words(\"abc def ghi\", 37) == []\n    assert select_word\n\
    def check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert\
    \ candidate('simple white space', 2) == []\n    assert candidate('Hello world',\
    \ 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert\
    \ candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c',\
    \ 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwu8fs2ip.py\", line\
    \ 60, in <module>\n    test_check()\n  File \"/tmp/tmpwu8fs2ip.py\", line 58,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpwu8fs2ip.py\", line\
    \ 49, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmpwu8fs2ip.py\", line 11, in select_words\n    assert select_words(\"\
    abc def ghi\", 2) == [\"def\", \"ghi\"]\n  File \"/tmp/tmpwu8fs2ip.py\", line\
    \ 11, in select_words\n    assert select_words(\"abc def ghi\", 2) == [\"def\"\
    , \"ghi\"]\n  File \"/tmp/tmpwu8fs2ip.py\", line 11, in select_words\n    assert\
    \ select_words(\"abc def ghi\", 2) == [\"def\", \"ghi\"]\n  [Previous line repeated\
    \ 994 more times]\nRecursionError: maximum recursion depth exceeded\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 280, in <module>\n    test_check()\n  File \"/tmp/tmpyxd40gft.py\", line 278,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 269, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    assert select_words(\"abc\
    \ def ghi\", 3) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc\
    \ def ghi\", 5) == []\n    assert select_words(\"abc def ghi\", 0) == []\n   \
    \ assert select_words(\"abc def ghi\", 2) == [\"abc\", \"def\", \"ghi\"]\n   \
    \ assert select_words(\"abc def ghi\", 4) == [\"abc\", \"def\", \"ghi\"]\n   \
    \ assert select_words(\"abc def ghi\", 6) == []\n    assert select_words(\"abc\
    \ def ghi\", 7) == []\n    assert select_words(\"abc def ghi\", 8) == []\n   \
    \ assert select_words(\"abc def ghi\", 9) == []\n    assert select_words(\"abc\
    \ def ghi\", 10) == []\n    assert select_words(\"abc def ghi\", 11) == []\n \
    \   assert select_words(\"abc def ghi\", 12) == []\n    assert select_words(\"\
    abc def ghi\", 13) == []\n    assert select_words(\"abc def ghi\", 14) == []\n\
    \    assert select_words(\"abc def ghi\", 15) == []\n    assert select_words(\"\
    abc def ghi\", 16) == []\n    assert select_words(\"abc def ghi\", 17) == []\n\
    \    assert select_words(\"abc def ghi\", 18) == []\n    assert select_words(\"\
    abc def ghi\", 19) == []\n    assert select_words(\"abc def ghi\", 20) == []\n\
    \    assert select_words(\"abc def ghi\", 21) == []\n    assert select_words(\"\
    abc def ghi\", 22) == []\n    assert select_words(\"abc def ghi\", 23) == []\n\
    \    assert select_words(\"abc def ghi\", 24) == []\n    assert select_words(\"\
    abc def ghi\", 25) == []\n    assert select_words(\"abc def ghi\", 26) == []\n\
    \    assert select_words(\"abc def ghi\", 27) == []\n    assert select_words(\"\
    abc def ghi\", 28) == []\n    assert select_words(\"abc def ghi\", 29) == []\n\
    \    assert select_words(\"abc def ghi\", 30) == []\n    assert select_words(\"\
    abc def ghi\", 31) == []\n    assert select_words(\"abc def ghi\", 32) == []\n\
    \    assert select_words(\"abc def ghi\", 33) == []\n    assert select_words(\"\
    abc def ghi\", 34) == []\n    assert select_words(\"abc def ghi\", 35) == []\n\
    \    assert \ndef check(candidate):\n    assert candidate('Mary had a little lamb',\
    \ 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary',\
    \ 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp4hxd7byd.py\", line 46\n    assert \n           ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 280, in <module>\n    test_check()\n  File \"/tmp/tmpyxd40gft.py\", line 278,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 269, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 280, in <module>\n    test_check()\n  File \"/tmp/tmpyxd40gft.py\", line 278,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 269, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 280, in <module>\n    test_check()\n  File \"/tmp/tmpyxd40gft.py\", line 278,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 269, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    assert select_words(\"abc\
    \ def ghi\", 2) == [\"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\"\
    , 3) == []\n    assert select_words(\"abc def ghi\", 4) == []\n    assert select_words(\"\
    abc def ghi\", 5) == []\n    assert select_words(\"abc def ghi\", 6) == []\n \
    \   assert select_words(\"abc def ghi\", 7) == []\n    assert select_words(\"\
    abc def ghi\", 8) == []\n    assert select_words(\"abc def ghi\", 9) == []\n \
    \   assert select_words(\"abc def ghi\", 10) == []\n    assert select_words(\"\
    abc def ghi\", 11) == []\n    assert select_words(\"abc def ghi\", 12) == []\n\
    \    assert select_words(\"abc def ghi\", 13) == []\n    assert select_words(\"\
    abc def ghi\", 14) == []\n    assert select_words(\"abc def ghi\", 15) == []\n\
    \    assert select_words(\"abc def ghi\", 16) == []\n    assert select_words(\"\
    abc def ghi\", 17) == []\n    assert select_words(\"abc def ghi\", 18) == []\n\
    \    assert select_words(\"abc def ghi\", 19) == []\n    assert select_words(\"\
    abc def ghi\", 20) == []\n    assert select_words(\"abc def ghi\", 21) == []\n\
    \    assert select_words(\"abc def ghi\", 22) == []\n    assert select_words(\"\
    abc def ghi\", 23) == []\n    assert select_words(\"abc def ghi\", 24) == []\n\
    \    assert select_words(\"abc def ghi\", 25) == []\n    assert select_words(\"\
    abc def ghi\", 26) == []\n    assert select_words(\"abc def ghi\", 27) == []\n\
    \    assert select_words(\"abc def ghi\", 28) == []\n    assert select_words(\"\
    abc def ghi\", 29) == []\n    assert select_words(\"abc def ghi\", 30) == []\n\
    \    assert select_words(\"abc def ghi\", 31) == []\n    assert select_words(\"\
    abc def ghi\", 32) == []\n    assert select_words(\"abc def ghi\", 33) == []\n\
    \    assert select_words(\"abc def ghi\", 34) == []\n    assert select_words(\"\
    abc def ghi\", 35) == []\n    assert select_words(\"abc def ghi\", 36) == []\n\
    \    assert select_words(\"abc def ghi\", 37) == []\n    assert select_word\n\
    def check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert\
    \ candidate('simple white space', 2) == []\n    assert candidate('Hello world',\
    \ 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert\
    \ candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c',\
    \ 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwu8fs2ip.py\", line\
    \ 60, in <module>\n    test_check()\n  File \"/tmp/tmpwu8fs2ip.py\", line 58,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpwu8fs2ip.py\", line\
    \ 49, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmpwu8fs2ip.py\", line 11, in select_words\n    assert select_words(\"\
    abc def ghi\", 2) == [\"def\", \"ghi\"]\n  File \"/tmp/tmpwu8fs2ip.py\", line\
    \ 11, in select_words\n    assert select_words(\"abc def ghi\", 2) == [\"def\"\
    , \"ghi\"]\n  File \"/tmp/tmpwu8fs2ip.py\", line 11, in select_words\n    assert\
    \ select_words(\"abc def ghi\", 2) == [\"def\", \"ghi\"]\n  [Previous line repeated\
    \ 994 more times]\nRecursionError: maximum recursion depth exceeded\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    assert select_words(\"abc\
    \ def ghi\", 3) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc\
    \ def ghi\", 0) == []\n    assert select_words(\"abc def ghi\", 5) == []\n   \
    \ assert select_words(\"abc def ghi\", 6) == []\n    assert select_words(\"abc\
    \ def ghi\", 7) == []\n    assert select_words(\"abc def ghi\", 8) == []\n   \
    \ assert select_words(\"abc def ghi\", 9) == []\n    assert select_words(\"abc\
    \ def ghi\", 10) == []\n    assert select_words(\"abc def ghi\", 11) == []\n \
    \   assert select_words(\"abc def ghi\", 12) == []\n    assert select_words(\"\
    abc def ghi\", 13) == []\n    assert select_words(\"abc def ghi\", 14) == []\n\
    \    assert select_words(\"abc def ghi\", 15) == []\n    assert select_words(\"\
    abc def ghi\", 16) == []\n    assert select_words(\"abc def ghi\", 17) == []\n\
    \    assert select_words(\"abc def ghi\", 18) == []\n    assert select_words(\"\
    abc def ghi\", 19) == []\n    assert select_words(\"abc def ghi\", 20) == []\n\
    \    assert select_words(\"abc def ghi\", 21) == []\n    assert select_words(\"\
    abc def ghi\", 22) == []\n    assert select_words(\"abc def ghi\", 23) == []\n\
    \    assert select_words(\"abc def ghi\", 24) == []\n    assert select_words(\"\
    abc def ghi\", 25) == []\n    assert select_words(\"abc def ghi\", 26) == []\n\
    \    assert select_words(\"abc def ghi\", 27) == []\n    assert select_words(\"\
    abc def ghi\", 28) == []\n    assert select_words(\"abc def ghi\", 29) == []\n\
    \    assert select_words(\"abc def ghi\", 30) == []\n    assert select_words(\"\
    abc def ghi\", 31) == []\n    assert select_words(\"abc def ghi\", 32) == []\n\
    \    assert select_words(\"abc def ghi\", 33) == []\n    assert select_words(\"\
    abc def ghi\", 34) == []\n    assert select_words(\"abc def ghi\", 35) == []\n\
    \    assert select_words(\"abc def ghi\", 36) == []\n    assert select_words(\"\
    abc def ghi\", 37) == []\n    assert select_words(\"abc def ghi\", 38) == []\n\
    \    assert \ndef check(candidate):\n    assert candidate('Mary had a little lamb',\
    \ 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary',\
    \ 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp5x258kuj.py\", line 47\n    assert \n           ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    assert select_words(\"abc\
    \ def ghi\", 2) == [\"ab\", \"ghi\"]\n    assert select_words(\"abc def ghi\"\
    , 3) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\",\
    \ 4) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\",\
    \ 5) == []\n    assert select_words(\"abc def ghi\", 6) == []\n    assert select_words(\"\
    abc def ghi\", 7) == []\n    assert select_words(\"abc def ghi\", 8) == []\n \
    \   assert select_words(\"abc def ghi\", 9) == []\n    assert select_words(\"\
    abc def ghi\", 10) == []\n    assert select_words(\"abc def ghi\", 11) == []\n\
    \    assert select_words(\"abc def ghi\", 12) == []\n    assert select_words(\"\
    abc def ghi\", 13) == []\n    assert select_words(\"abc def ghi\", 14) == []\n\
    \    assert select_words(\"abc def ghi\", 15) == []\n    assert select_words(\"\
    abc def ghi\", 16) == []\n    assert select_words(\"abc def ghi\", 17) == []\n\
    \    assert select_words(\"abc def ghi\", 18) == []\n    assert select_words(\"\
    abc def ghi\", 19) == []\n    assert select_words(\"abc def ghi\", 20) == []\n\
    \    assert select_words(\"abc def ghi\", 21) == []\n    assert select_words(\"\
    abc def ghi\", 22) == []\n    assert select_words(\"abc def ghi\", 23) == []\n\
    \    assert select_words(\"abc def ghi\", 24) == []\n    assert select_words(\"\
    abc def ghi\", 25) == []\n    assert select_words(\"abc def ghi\", 26) == []\n\
    \    assert select_words(\"abc def ghi\", 27) == []\n    assert select_words(\"\
    abc def ghi\", 28) == []\n    assert select_words(\"abc def ghi\", 29) == []\n\
    \    assert select_words(\"abc def ghi\", 30) == []\n    assert select_words(\"\
    abc def ghi\", 31) == []\n    assert select_words(\"abc def ghi\", 32) == []\n\
    \    assert select_words(\"abc def ghi\", 33) == []\n    assert select_words(\"\
    abc def ghi\", 34) == []\n    assert select_words(\"abc def ghi\", 35) == []\n\
    \    assert select_words(\"abc def ghi\", 36) == []\n    assert select_word\n\
    def check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert\
    \ candidate('simple white space', 2) == []\n    assert candidate('Hello world',\
    \ 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert\
    \ candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c',\
    \ 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptsn_ceqb.py\", line\
    \ 59, in <module>\n    test_check()\n  File \"/tmp/tmptsn_ceqb.py\", line 57,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmptsn_ceqb.py\", line\
    \ 48, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmptsn_ceqb.py\", line 11, in select_words\n    assert select_words(\"\
    abc def ghi\", 2) == [\"ab\", \"ghi\"]\n  File \"/tmp/tmptsn_ceqb.py\", line 11,\
    \ in select_words\n    assert select_words(\"abc def ghi\", 2) == [\"ab\", \"\
    ghi\"]\n  File \"/tmp/tmptsn_ceqb.py\", line 11, in select_words\n    assert select_words(\"\
    abc def ghi\", 2) == [\"ab\", \"ghi\"]\n  [Previous line repeated 994 more times]\n\
    RecursionError: maximum recursion depth exceeded\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 280, in <module>\n    test_check()\n  File \"/tmp/tmpyxd40gft.py\", line 278,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 269, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 280, in <module>\n    test_check()\n  File \"/tmp/tmpyxd40gft.py\", line 278,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 269, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 280, in <module>\n    test_check()\n  File \"/tmp/tmpyxd40gft.py\", line 278,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 269, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    assert select_words(\"abc\
    \ def ghi\", 3) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc\
    \ def ghi\", 0) == []\n    assert select_words(\"abc def ghi\", 2) == [\"abc\"\
    , \"def\"]\n    assert select_words(\"abc def ghi\", 4) == [\"abc\", \"def\",\
    \ \"ghi\"]\n    assert select_words(\"abc def ghi\", 5) == [\"abc\", \"def\",\
    \ \"ghi\"]\n    assert select_words(\"abc def ghi\", 6) == [\"abc\", \"def\",\
    \ \"ghi\"]\n    assert select_words(\"abc def ghi\", 7) == [\"abc\", \"def\",\
    \ \"ghi\"]\n    assert select_words(\"abc def ghi\", 8) == [\"abc\", \"def\",\
    \ \"ghi\"]\n    assert select_words(\"abc def ghi\", 9) == [\"abc\", \"def\",\
    \ \"ghi\"]\n    assert select_words(\"abc def ghi\", 10) == [\"abc\", \"def\"\
    , \"ghi\"]\n    assert select_words(\"abc def ghi\", 11) == [\"abc\", \"def\"\
    , \"ghi\"]\n    assert select_words(\"abc def ghi\", 12) == [\"abc\", \"def\"\
    , \"ghi\"]\n    assert select_words(\"abc def ghi\", 13) == [\"abc\", \"def\"\
    , \"ghi\"]\n    assert select_words(\"abc def ghi\", 14) == [\"abc\", \"def\"\
    , \"ghi\"]\n    assert select_words(\"abc def ghi\", 15) == [\"abc\", \"def\"\
    , \"ghi\"]\n    assert select_words(\"abc def ghi\", 16) == [\"abc\", \"def\"\
    , \"ghi\"]\n    assert select_words(\"abc def ghi\", 17) == [\"abc\", \"def\"\
    , \"ghi\"]\n    assert select_words(\"abc def ghi\", 18) == [\"abc\", \"def\"\
    , \"ghi\"]\n    assert select_words(\"abc def ghi\", 19) == [\"abc\", \"def\"\
    , \"ghi\"]\n    assert select_words(\"abc def ghi\", 20) == [\"abc\", \"def\"\
    , \"ghi\"]\n    assert select_words(\"abc def ghi\", 21) == [\"abc\", \"def\"\
    , \"ghi\"]\n    assert select_words(\"abc def ghi\", 22) == [\"abc\", \"def\"\
    , \"ghi\"]\n    assert select_words(\"abc def ghi\", 23) == [\"abc\", \"def\"\
    , \"ghi\"]\n    assert select_words(\"abc def ghi\", 24) == [\"abc\", \"def\"\
    , \"ghi\"]\n    assert select_words(\"abc def ghi\", 25) == [\"abc\", \"def\"\
    , \"gh\ndef check(candidate):\n    assert candidate('Mary had a little lamb',\
    \ 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary',\
    \ 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpb83_sgkl.py\", line 35\n    assert select_words(\"abc\
    \ def ghi\", 25) == [\"abc\", \"def\", \"gh\n                                \
    \                             ^\nSyntaxError: unterminated string literal (detected\
    \ at line 35)\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 280, in <module>\n    test_check()\n  File \"/tmp/tmpyxd40gft.py\", line 278,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 269, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    assert select_words(\"abc\
    \ def ghi\", 3) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc\
    \ def ghi\", 5) == []\n    assert select_words(\"abc def ghi\", 0) == []\n   \
    \ assert select_words(\"abc def ghi\", 4) == []\n    assert select_words(\"abc\
    \ def ghi\", 6) == []\n    assert select_words(\"abc def ghi\", 7) == []\n   \
    \ assert select_words(\"abc def ghi\", 8) == []\n    assert select_words(\"abc\
    \ def ghi\", 9) == []\n    assert select_words(\"abc def ghi\", 10) == []\n  \
    \  assert select_words(\"abc def ghi\", 11) == []\n    assert select_words(\"\
    abc def ghi\", 12) == []\n    assert select_words(\"abc def ghi\", 13) == []\n\
    \    assert select_words(\"abc def ghi\", 14) == []\n    assert select_words(\"\
    abc def ghi\", 15) == []\n    assert select_words(\"abc def ghi\", 16) == []\n\
    \    assert select_words(\"abc def ghi\", 17) == []\n    assert select_words(\"\
    abc def ghi\", 18) == []\n    assert select_words(\"abc def ghi\", 19) == []\n\
    \    assert select_words(\"abc def ghi\", 20) == []\n    assert select_words(\"\
    abc def ghi\", 21) == []\n    assert select_words(\"abc def ghi\", 22) == []\n\
    \    assert select_words(\"abc def ghi\", 23) == []\n    assert select_words(\"\
    abc def ghi\", 24) == []\n    assert select_words(\"abc def ghi\", 25) == []\n\
    \    assert select_words(\"abc def ghi\", 26) == []\n    assert select_words(\"\
    abc def ghi\", 27) == []\n    assert select_words(\"abc def ghi\", 28) == []\n\
    \    assert select_words(\"abc def ghi\", 29) == []\n    assert select_words(\"\
    abc def ghi\", 30) == []\n    assert select_words(\"abc def ghi\", 31) == []\n\
    \    assert select_words(\"abc def ghi\", 32) == []\n    assert select_words(\"\
    abc def ghi\", 33) == []\n    assert select_words(\"abc def ghi\", 34) == []\n\
    \    assert select_words(\"abc def ghi\", 35) == []\n    assert select_words(\"\
    abc def ghi\", 36) == []\n    assert select_words(\"abc def ghi\", 37) == []\n\
    \    assert \ndef check(candidate):\n    assert candidate('Mary had a little lamb',\
    \ 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary',\
    \ 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpggkdf2_6.py\", line 47\n    assert \n           ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 280, in <module>\n    test_check()\n  File \"/tmp/tmpyxd40gft.py\", line 278,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 269, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    assert select_words(\"abc\
    \ def ghi\", 2) == [\"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\"\
    , 3) == []\n    assert select_words(\"abc def ghi\", 4) == []\n    assert select_words(\"\
    abc def ghi\", 5) == []\n    assert select_words(\"abc def ghi\", 6) == []\n \
    \   assert select_words(\"abc def ghi\", 7) == []\n    assert select_words(\"\
    abc def ghi\", 8) == []\n    assert select_words(\"abc def ghi\", 9) == []\n \
    \   assert select_words(\"abc def ghi\", 10) == []\n    assert select_words(\"\
    abc def ghi\", 11) == []\n    assert select_words(\"abc def ghi\", 12) == []\n\
    \    assert select_words(\"abc def ghi\", 13) == []\n    assert select_words(\"\
    abc def ghi\", 14) == []\n    assert select_words(\"abc def ghi\", 15) == []\n\
    \    assert select_words(\"abc def ghi\", 16) == []\n    assert select_words(\"\
    abc def ghi\", 17) == []\n    assert select_words(\"abc def ghi\", 18) == []\n\
    \    assert select_words(\"abc def ghi\", 19) == []\n    assert select_words(\"\
    abc def ghi\", 20) == []\n    assert select_words(\"abc def ghi\", 21) == []\n\
    \    assert select_words(\"abc def ghi\", 22) == []\n    assert select_words(\"\
    abc def ghi\", 23) == []\n    assert select_words(\"abc def ghi\", 24) == []\n\
    \    assert select_words(\"abc def ghi\", 25) == []\n    assert select_words(\"\
    abc def ghi\", 26) == []\n    assert select_words(\"abc def ghi\", 27) == []\n\
    \    assert select_words(\"abc def ghi\", 28) == []\n    assert select_words(\"\
    abc def ghi\", 29) == []\n    assert select_words(\"abc def ghi\", 30) == []\n\
    \    assert select_words(\"abc def ghi\", 31) == []\n    assert select_words(\"\
    abc def ghi\", 32) == []\n    assert select_words(\"abc def ghi\", 33) == []\n\
    \    assert select_words(\"abc def ghi\", 34) == []\n    assert select_words(\"\
    abc def ghi\", 35) == []\n    assert select_words(\"abc def ghi\", 36) == []\n\
    \    assert select_words(\"abc def ghi\", 37) == []\n    assert select_word\n\
    def check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert\
    \ candidate('simple white space', 2) == []\n    assert candidate('Hello world',\
    \ 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert\
    \ candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c',\
    \ 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwu8fs2ip.py\", line\
    \ 60, in <module>\n    test_check()\n  File \"/tmp/tmpwu8fs2ip.py\", line 58,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpwu8fs2ip.py\", line\
    \ 49, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmpwu8fs2ip.py\", line 11, in select_words\n    assert select_words(\"\
    abc def ghi\", 2) == [\"def\", \"ghi\"]\n  File \"/tmp/tmpwu8fs2ip.py\", line\
    \ 11, in select_words\n    assert select_words(\"abc def ghi\", 2) == [\"def\"\
    , \"ghi\"]\n  File \"/tmp/tmpwu8fs2ip.py\", line 11, in select_words\n    assert\
    \ select_words(\"abc def ghi\", 2) == [\"def\", \"ghi\"]\n  [Previous line repeated\
    \ 994 more times]\nRecursionError: maximum recursion depth exceeded\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    assert select_words(\"abc\
    \ def ghi\", 2) == [\"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\"\
    , 3) == []\n    assert select_words(\"abc def ghi\", 4) == []\n    assert select_words(\"\
    abc def ghi\", 5) == []\n    assert select_words(\"abc def ghi\", 6) == []\n \
    \   assert select_words(\"abc def ghi\", 7) == []\n    assert select_words(\"\
    abc def ghi\", 8) == []\n    assert select_words(\"abc def ghi\", 9) == []\n \
    \   assert select_words(\"abc def ghi\", 10) == []\n    assert select_words(\"\
    abc def ghi\", 11) == []\n    assert select_words(\"abc def ghi\", 12) == []\n\
    \    assert select_words(\"abc def ghi\", 13) == []\n    assert select_words(\"\
    abc def ghi\", 14) == []\n    assert select_words(\"abc def ghi\", 15) == []\n\
    \    assert select_words(\"abc def ghi\", 16) == []\n    assert select_words(\"\
    abc def ghi\", 17) == []\n    assert select_words(\"abc def ghi\", 18) == []\n\
    \    assert select_words(\"abc def ghi\", 19) == []\n    assert select_words(\"\
    abc def ghi\", 20) == []\n    assert select_words(\"abc def ghi\", 21) == []\n\
    \    assert select_words(\"abc def ghi\", 22) == []\n    assert select_words(\"\
    abc def ghi\", 23) == []\n    assert select_words(\"abc def ghi\", 24) == []\n\
    \    assert select_words(\"abc def ghi\", 25) == []\n    assert select_words(\"\
    abc def ghi\", 26) == []\n    assert select_words(\"abc def ghi\", 27) == []\n\
    \    assert select_words(\"abc def ghi\", 28) == []\n    assert select_words(\"\
    abc def ghi\", 29) == []\n    assert select_words(\"abc def ghi\", 30) == []\n\
    \    assert select_words(\"abc def ghi\", 31) == []\n    assert select_words(\"\
    abc def ghi\", 32) == []\n    assert select_words(\"abc def ghi\", 33) == []\n\
    \    assert select_words(\"abc def ghi\", 34) == []\n    assert select_words(\"\
    abc def ghi\", 35) == []\n    assert select_words(\"abc def ghi\", 36) == []\n\
    \    assert select_words(\"abc def ghi\", 37) == []\n    assert select_word\n\
    def check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert\
    \ candidate('simple white space', 2) == []\n    assert candidate('Hello world',\
    \ 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert\
    \ candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c',\
    \ 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwu8fs2ip.py\", line\
    \ 60, in <module>\n    test_check()\n  File \"/tmp/tmpwu8fs2ip.py\", line 58,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpwu8fs2ip.py\", line\
    \ 49, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmpwu8fs2ip.py\", line 11, in select_words\n    assert select_words(\"\
    abc def ghi\", 2) == [\"def\", \"ghi\"]\n  File \"/tmp/tmpwu8fs2ip.py\", line\
    \ 11, in select_words\n    assert select_words(\"abc def ghi\", 2) == [\"def\"\
    , \"ghi\"]\n  File \"/tmp/tmpwu8fs2ip.py\", line 11, in select_words\n    assert\
    \ select_words(\"abc def ghi\", 2) == [\"def\", \"ghi\"]\n  [Previous line repeated\
    \ 994 more times]\nRecursionError: maximum recursion depth exceeded\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    assert select_words(\"abc\
    \ def ghi\", 3) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc\
    \ def ghi\", 5) == []\n    assert select_words(\"abc def ghi\", 0) == []\n   \
    \ assert select_words(\"abc def ghi\", 2) == [\"abc\", \"def\"]\n    assert select_words(\"\
    abc def ghi\", 4) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc\
    \ def ghi\", 6) == []\n    assert select_words(\"abc def ghi\", 7) == []\n   \
    \ assert select_words(\"abc def ghi\", 8) == []\n    assert select_words(\"abc\
    \ def ghi\", 9) == []\n    assert select_words(\"abc def ghi\", 10) == []\n  \
    \  assert select_words(\"abc def ghi\", 11) == []\n    assert select_words(\"\
    abc def ghi\", 12) == []\n    assert select_words(\"abc def ghi\", 13) == []\n\
    \    assert select_words(\"abc def ghi\", 14) == []\n    assert select_words(\"\
    abc def ghi\", 15) == []\n    assert select_words(\"abc def ghi\", 16) == []\n\
    \    assert select_words(\"abc def ghi\", 17) == []\n    assert select_words(\"\
    abc def ghi\", 18) == []\n    assert select_words(\"abc def ghi\", 19) == []\n\
    \    assert select_words(\"abc def ghi\", 20) == []\n    assert select_words(\"\
    abc def ghi\", 21) == []\n    assert select_words(\"abc def ghi\", 22) == []\n\
    \    assert select_words(\"abc def ghi\", 23) == []\n    assert select_words(\"\
    abc def ghi\", 24) == []\n    assert select_words(\"abc def ghi\", 25) == []\n\
    \    assert select_words(\"abc def ghi\", 26) == []\n    assert select_words(\"\
    abc def ghi\", 27) == []\n    assert select_words(\"abc def ghi\", 28) == []\n\
    \    assert select_words(\"abc def ghi\", 29) == []\n    assert select_words(\"\
    abc def ghi\", 30) == []\n    assert select_words(\"abc def ghi\", 31) == []\n\
    \    assert select_words(\"abc def ghi\", 32) == []\n    assert select_words(\"\
    abc def ghi\", 33) == []\n    assert select_words(\"abc def ghi\", 34) == []\n\
    \    assert select_words(\"abc def ghi\", 35) == []\n    assert select_words(\"\
    \ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) ==\
    \ ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n\
    \    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp3cnffmk1.py\", line 46\n    assert select_words(\"\n \
    \                       ^\nSyntaxError: unterminated string literal (detected\
    \ at line 46)\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    assert select_words(\"abc\
    \ def ghi\", 3) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc\
    \ def ghi\", 4) == []\n    assert select_words(\"abc def ghi\", 5) == []\n   \
    \ assert select_words(\"abc def ghi\", 6) == []\n    assert select_words(\"abc\
    \ def ghi\", 7) == []\n    assert select_words(\"abc def ghi\", 8) == []\n   \
    \ assert select_words(\"abc def ghi\", 9) == []\n    assert select_words(\"abc\
    \ def ghi\", 10) == []\n    assert select_words(\"abc def ghi\", 11) == []\n \
    \   assert select_words(\"abc def ghi\", 12) == []\n    assert select_words(\"\
    abc def ghi\", 13) == []\n    assert select_words(\"abc def ghi\", 14) == []\n\
    \    assert select_words(\"abc def ghi\", 15) == []\n    assert select_words(\"\
    abc def ghi\", 16) == []\n    assert select_words(\"abc def ghi\", 17) == []\n\
    \    assert select_words(\"abc def ghi\", 18) == []\n    assert select_words(\"\
    abc def ghi\", 19) == []\n    assert select_words(\"abc def ghi\", 20) == []\n\
    \    assert select_words(\"abc def ghi\", 21) == []\n    assert select_words(\"\
    abc def ghi\", 22) == []\n    assert select_words(\"abc def ghi\", 23) == []\n\
    \    assert select_words(\"abc def ghi\", 24) == []\n    assert select_words(\"\
    abc def ghi\", 25) == []\n    assert select_words(\"abc def ghi\", 26) == []\n\
    \    assert select_words(\"abc def ghi\", 27) == []\n    assert select_words(\"\
    abc def ghi\", 28) == []\n    assert select_words(\"abc def ghi\", 29) == []\n\
    \    assert select_words(\"abc def ghi\", 30) == []\n    assert select_words(\"\
    abc def ghi\", 31) == []\n    assert select_words(\"abc def ghi\", 32) == []\n\
    \    assert select_words(\"abc def ghi\", 33) == []\n    assert select_words(\"\
    abc def ghi\", 34) == []\n    assert select_words(\"abc def ghi\", 35) == []\n\
    \    assert select_words(\"abc def ghi\", 36) == []\n    assert select_words(\"\
    abc def ghi\", 37) == []\n    assert select_words(\"abc def ghi\", 38) == []\n\
    \    assert \ndef check(candidate):\n    assert candidate('Mary had a little lamb',\
    \ 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary',\
    \ 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp6b37nic_.py\", line 47\n    assert \n           ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    assert select_words(\"abc\
    \ def ghi\", 3) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc\
    \ def ghi\", 0) == []\n    assert select_words(\"abc def ghi\", 5) == []\n   \
    \ assert select_words(\"abc def ghi\", 6) == []\n    assert select_words(\"abc\
    \ def ghi\", 7) == []\n    assert select_words(\"abc def ghi\", 8) == []\n   \
    \ assert select_words(\"abc def ghi\", 9) == []\n    assert select_words(\"abc\
    \ def ghi\", 10) == []\n    assert select_words(\"abc def ghi\", 11) == []\n \
    \   assert select_words(\"abc def ghi\", 12) == []\n    assert select_words(\"\
    abc def ghi\", 13) == []\n    assert select_words(\"abc def ghi\", 14) == []\n\
    \    assert select_words(\"abc def ghi\", 15) == []\n    assert select_words(\"\
    abc def ghi\", 16) == []\n    assert select_words(\"abc def ghi\", 17) == []\n\
    \    assert select_words(\"abc def ghi\", 18) == []\n    assert select_words(\"\
    abc def ghi\", 19) == []\n    assert select_words(\"abc def ghi\", 20) == []\n\
    \    assert select_words(\"abc def ghi\", 21) == []\n    assert select_words(\"\
    abc def ghi\", 22) == []\n    assert select_words(\"abc def ghi\", 23) == []\n\
    \    assert select_words(\"abc def ghi\", 24) == []\n    assert select_words(\"\
    abc def ghi\", 25) == []\n    assert select_words(\"abc def ghi\", 26) == []\n\
    \    assert select_words(\"abc def ghi\", 27) == []\n    assert select_words(\"\
    abc def ghi\", 28) == []\n    assert select_words(\"abc def ghi\", 29) == []\n\
    \    assert select_words(\"abc def ghi\", 30) == []\n    assert select_words(\"\
    abc def ghi\", 31) == []\n    assert select_words(\"abc def ghi\", 32) == []\n\
    \    assert select_words(\"abc def ghi\", 33) == []\n    assert select_words(\"\
    abc def ghi\", 34) == []\n    assert select_words(\"abc def ghi\", 35) == []\n\
    \    assert select_words(\"abc def ghi\", 36) == []\n    assert select_words(\"\
    abc def ghi\", 37) == []\n    assert select_words(\"abc def ghi\", 38) == []\n\
    \    assert \ndef check(candidate):\n    assert candidate('Mary had a little lamb',\
    \ 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary',\
    \ 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp5x258kuj.py\", line 47\n    assert \n           ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    assert select_words(\"abc\
    \ def ghi\", 3) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc\
    \ def ghi\", 4) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc\
    \ def ghi\", 5) == []\n    assert select_words(\"abc def ghi\", 6) == []\n   \
    \ assert select_words(\"abc def ghi\", 7) == []\n    assert select_words(\"abc\
    \ def ghi\", 8) == []\n    assert select_words(\"abc def ghi\", 9) == []\n   \
    \ assert select_words(\"abc def ghi\", 10) == []\n    assert select_words(\"abc\
    \ def ghi\", 11) == []\n    assert select_words(\"abc def ghi\", 12) == []\n \
    \   assert select_words(\"abc def ghi\", 13) == []\n    assert select_words(\"\
    abc def ghi\", 14) == []\n    assert select_words(\"abc def ghi\", 15) == []\n\
    \    assert select_words(\"abc def ghi\", 16) == []\n    assert select_words(\"\
    abc def ghi\", 17) == []\n    assert select_words(\"abc def ghi\", 18) == []\n\
    \    assert select_words(\"abc def ghi\", 19) == []\n    assert select_words(\"\
    abc def ghi\", 20) == []\n    assert select_words(\"abc def ghi\", 21) == []\n\
    \    assert select_words(\"abc def ghi\", 22) == []\n    assert select_words(\"\
    abc def ghi\", 23) == []\n    assert select_words(\"abc def ghi\", 24) == []\n\
    \    assert select_words(\"abc def ghi\", 25) == []\n    assert select_words(\"\
    abc def ghi\", 26) == []\n    assert select_words(\"abc def ghi\", 27) == []\n\
    \    assert select_words(\"abc def ghi\", 28) == []\n    assert select_words(\"\
    abc def ghi\", 29) == []\n    assert select_words(\"abc def ghi\", 30) == []\n\
    \    assert select_words(\"abc def ghi\", 31) == []\n    assert select_words(\"\
    abc def ghi\", 32) == []\n    assert select_words(\"abc def ghi\", 33) == []\n\
    \    assert select_words(\"abc def ghi\", 34) == []\n    assert select_words(\"\
    abc def ghi\", 35) == []\n    assert select_words(\"abc def ghi\", 36) == []\n\
    \    assert select_words(\"abc def ghi\", 37) == []\n    assert select_words(\"\
    abc def gh\ndef check(candidate):\n    assert candidate('Mary had a little lamb',\
    \ 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary',\
    \ 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmparnq_e8y.py\", line 46\n    assert select_words(\"abc\
    \ def gh\n                        ^\nSyntaxError: unterminated string literal\
    \ (detected at line 46)\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 280, in <module>\n    test_check()\n  File \"/tmp/tmpyxd40gft.py\", line 278,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 269, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    assert select_words(\"abc\
    \ def ghi\", 2) == [\"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\"\
    , 3) == []\n    assert select_words(\"abc def ghi\", 4) == []\n    assert select_words(\"\
    abc def ghi\", 5) == []\n    assert select_words(\"abc def ghi\", 6) == []\n \
    \   assert select_words(\"abc def ghi\", 7) == []\n    assert select_words(\"\
    abc def ghi\", 8) == []\n    assert select_words(\"abc def ghi\", 9) == []\n \
    \   assert select_words(\"abc def ghi\", 10) == []\n    assert select_words(\"\
    abc def ghi\", 11) == []\n    assert select_words(\"abc def ghi\", 12) == []\n\
    \    assert select_words(\"abc def ghi\", 13) == []\n    assert select_words(\"\
    abc def ghi\", 14) == []\n    assert select_words(\"abc def ghi\", 15) == []\n\
    \    assert select_words(\"abc def ghi\", 16) == []\n    assert select_words(\"\
    abc def ghi\", 17) == []\n    assert select_words(\"abc def ghi\", 18) == []\n\
    \    assert select_words(\"abc def ghi\", 19) == []\n    assert select_words(\"\
    abc def ghi\", 20) == []\n    assert select_words(\"abc def ghi\", 21) == []\n\
    \    assert select_words(\"abc def ghi\", 22) == []\n    assert select_words(\"\
    abc def ghi\", 23) == []\n    assert select_words(\"abc def ghi\", 24) == []\n\
    \    assert select_words(\"abc def ghi\", 25) == []\n    assert select_words(\"\
    abc def ghi\", 26) == []\n    assert select_words(\"abc def ghi\", 27) == []\n\
    \    assert select_words(\"abc def ghi\", 28) == []\n    assert select_words(\"\
    abc def ghi\", 29) == []\n    assert select_words(\"abc def ghi\", 30) == []\n\
    \    assert select_words(\"abc def ghi\", 31) == []\n    assert select_words(\"\
    abc def ghi\", 32) == []\n    assert select_words(\"abc def ghi\", 33) == []\n\
    \    assert select_words(\"abc def ghi\", 34) == []\n    assert select_words(\"\
    abc def ghi\", 35) == []\n    assert select_words(\"abc def ghi\", 36) == []\n\
    \    assert select_words(\"abc def ghi\", 37) == []\n    assert select_word\n\
    def check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert\
    \ candidate('simple white space', 2) == []\n    assert candidate('Hello world',\
    \ 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert\
    \ candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c',\
    \ 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwu8fs2ip.py\", line\
    \ 60, in <module>\n    test_check()\n  File \"/tmp/tmpwu8fs2ip.py\", line 58,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpwu8fs2ip.py\", line\
    \ 49, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmpwu8fs2ip.py\", line 11, in select_words\n    assert select_words(\"\
    abc def ghi\", 2) == [\"def\", \"ghi\"]\n  File \"/tmp/tmpwu8fs2ip.py\", line\
    \ 11, in select_words\n    assert select_words(\"abc def ghi\", 2) == [\"def\"\
    , \"ghi\"]\n  File \"/tmp/tmpwu8fs2ip.py\", line 11, in select_words\n    assert\
    \ select_words(\"abc def ghi\", 2) == [\"def\", \"ghi\"]\n  [Previous line repeated\
    \ 994 more times]\nRecursionError: maximum recursion depth exceeded\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 280, in <module>\n    test_check()\n  File \"/tmp/tmpyxd40gft.py\", line 278,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 269, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 280, in <module>\n    test_check()\n  File \"/tmp/tmpyxd40gft.py\", line 278,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 269, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 280, in <module>\n    test_check()\n  File \"/tmp/tmpyxd40gft.py\", line 278,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 269, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    assert select_words(\"abc\
    \ def ghi\", 2) == [\"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\"\
    , 3) == []\n    assert select_words(\"abc def ghi\", 4) == []\n    assert select_words(\"\
    abc def ghi\", 5) == []\n    assert select_words(\"abc def ghi\", 6) == []\n \
    \   assert select_words(\"abc def ghi\", 7) == []\n    assert select_words(\"\
    abc def ghi\", 8) == []\n    assert select_words(\"abc def ghi\", 9) == []\n \
    \   assert select_words(\"abc def ghi\", 10) == []\n    assert select_words(\"\
    abc def ghi\", 11) == []\n    assert select_words(\"abc def ghi\", 12) == []\n\
    \    assert select_words(\"abc def ghi\", 13) == []\n    assert select_words(\"\
    abc def ghi\", 14) == []\n    assert select_words(\"abc def ghi\", 15) == []\n\
    \    assert select_words(\"abc def ghi\", 16) == []\n    assert select_words(\"\
    abc def ghi\", 17) == []\n    assert select_words(\"abc def ghi\", 18) == []\n\
    \    assert select_words(\"abc def ghi\", 19) == []\n    assert select_words(\"\
    abc def ghi\", 20) == []\n    assert select_words(\"abc def ghi\", 21) == []\n\
    \    assert select_words(\"abc def ghi\", 22) == []\n    assert select_words(\"\
    abc def ghi\", 23) == []\n    assert select_words(\"abc def ghi\", 24) == []\n\
    \    assert select_words(\"abc def ghi\", 25) == []\n    assert select_words(\"\
    abc def ghi\", 26) == []\n    assert select_words(\"abc def ghi\", 27) == []\n\
    \    assert select_words(\"abc def ghi\", 28) == []\n    assert select_words(\"\
    abc def ghi\", 29) == []\n    assert select_words(\"abc def ghi\", 30) == []\n\
    \    assert select_words(\"abc def ghi\", 31) == []\n    assert select_words(\"\
    abc def ghi\", 32) == []\n    assert select_words(\"abc def ghi\", 33) == []\n\
    \    assert select_words(\"abc def ghi\", 34) == []\n    assert select_words(\"\
    abc def ghi\", 35) == []\n    assert select_words(\"abc def ghi\", 36) == []\n\
    \    assert select_words(\"abc def ghi\", 37) == []\n    assert select_word\n\
    def check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert\
    \ candidate('simple white space', 2) == []\n    assert candidate('Hello world',\
    \ 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert\
    \ candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c',\
    \ 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwu8fs2ip.py\", line\
    \ 60, in <module>\n    test_check()\n  File \"/tmp/tmpwu8fs2ip.py\", line 58,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpwu8fs2ip.py\", line\
    \ 49, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmpwu8fs2ip.py\", line 11, in select_words\n    assert select_words(\"\
    abc def ghi\", 2) == [\"def\", \"ghi\"]\n  File \"/tmp/tmpwu8fs2ip.py\", line\
    \ 11, in select_words\n    assert select_words(\"abc def ghi\", 2) == [\"def\"\
    , \"ghi\"]\n  File \"/tmp/tmpwu8fs2ip.py\", line 11, in select_words\n    assert\
    \ select_words(\"abc def ghi\", 2) == [\"def\", \"ghi\"]\n  [Previous line repeated\
    \ 994 more times]\nRecursionError: maximum recursion depth exceeded\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 280, in <module>\n    test_check()\n  File \"/tmp/tmpyxd40gft.py\", line 278,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 269, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    assert select_words(\"abc\
    \ def ghi\", 2) == [\"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\"\
    , 3) == []\n    assert select_words(\"abc def ghi\", 4) == []\n    assert select_words(\"\
    abc def ghi\", 5) == []\n    assert select_words(\"abc def ghi\", 6) == []\n \
    \   assert select_words(\"abc def ghi\", 7) == []\n    assert select_words(\"\
    abc def ghi\", 8) == []\n    assert select_words(\"abc def ghi\", 9) == []\n \
    \   assert select_words(\"abc def ghi\", 10) == []\n    assert select_words(\"\
    abc def ghi\", 11) == []\n    assert select_words(\"abc def ghi\", 12) == []\n\
    \    assert select_words(\"abc def ghi\", 13) == []\n    assert select_words(\"\
    abc def ghi\", 14) == []\n    assert select_words(\"abc def ghi\", 15) == []\n\
    \    assert select_words(\"abc def ghi\", 16) == []\n    assert select_words(\"\
    abc def ghi\", 17) == []\n    assert select_words(\"abc def ghi\", 18) == []\n\
    \    assert select_words(\"abc def ghi\", 19) == []\n    assert select_words(\"\
    abc def ghi\", 20) == []\n    assert select_words(\"abc def ghi\", 21) == []\n\
    \    assert select_words(\"abc def ghi\", 22) == []\n    assert select_words(\"\
    abc def ghi\", 23) == []\n    assert select_words(\"abc def ghi\", 24) == []\n\
    \    assert select_words(\"abc def ghi\", 25) == []\n    assert select_words(\"\
    abc def ghi\", 26) == []\n    assert select_words(\"abc def ghi\", 27) == []\n\
    \    assert select_words(\"abc def ghi\", 28) == []\n    assert select_words(\"\
    abc def ghi\", 29) == []\n    assert select_words(\"abc def ghi\", 30) == []\n\
    \    assert select_words(\"abc def ghi\", 31) == []\n    assert select_words(\"\
    abc def ghi\", 32) == []\n    assert select_words(\"abc def ghi\", 33) == []\n\
    \    assert select_words(\"abc def ghi\", 34) == []\n    assert select_words(\"\
    abc def ghi\", 35) == []\n    assert select_words(\"abc def ghi\", 36) == []\n\
    \    assert select_words(\"abc def ghi\", 37) == []\n    assert select_word\n\
    def check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert\
    \ candidate('simple white space', 2) == []\n    assert candidate('Hello world',\
    \ 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert\
    \ candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c',\
    \ 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwu8fs2ip.py\", line\
    \ 60, in <module>\n    test_check()\n  File \"/tmp/tmpwu8fs2ip.py\", line 58,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpwu8fs2ip.py\", line\
    \ 49, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmpwu8fs2ip.py\", line 11, in select_words\n    assert select_words(\"\
    abc def ghi\", 2) == [\"def\", \"ghi\"]\n  File \"/tmp/tmpwu8fs2ip.py\", line\
    \ 11, in select_words\n    assert select_words(\"abc def ghi\", 2) == [\"def\"\
    , \"ghi\"]\n  File \"/tmp/tmpwu8fs2ip.py\", line 11, in select_words\n    assert\
    \ select_words(\"abc def ghi\", 2) == [\"def\", \"ghi\"]\n  [Previous line repeated\
    \ 994 more times]\nRecursionError: maximum recursion depth exceeded\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 280, in <module>\n    test_check()\n  File \"/tmp/tmpyxd40gft.py\", line 278,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 269, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 280, in <module>\n    test_check()\n  File \"/tmp/tmpyxd40gft.py\", line 278,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 269, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 280, in <module>\n    test_check()\n  File \"/tmp/tmpyxd40gft.py\", line 278,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 269, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 280, in <module>\n    test_check()\n  File \"/tmp/tmpyxd40gft.py\", line 278,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 269, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 280, in <module>\n    test_check()\n  File \"/tmp/tmpyxd40gft.py\", line 278,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 269, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 280, in <module>\n    test_check()\n  File \"/tmp/tmpyxd40gft.py\", line 278,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 269, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    assert select_words(\"abc\
    \ def ghi\", 3) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc\
    \ def ghi\", 4) == []\n    assert select_words(\"abc def ghi\", 5) == []\n   \
    \ assert select_words(\"abc def ghi\", 6) == []\n    assert select_words(\"abc\
    \ def ghi\", 7) == []\n    assert select_words(\"abc def ghi\", 8) == []\n   \
    \ assert select_words(\"abc def ghi\", 9) == []\n    assert select_words(\"abc\
    \ def ghi\", 10) == []\n    assert select_words(\"abc def ghi\", 11) == []\n \
    \   assert select_words(\"abc def ghi\", 12) == []\n    assert select_words(\"\
    abc def ghi\", 13) == []\n    assert select_words(\"abc def ghi\", 14) == []\n\
    \    assert select_words(\"abc def ghi\", 15) == []\n    assert select_words(\"\
    abc def ghi\", 16) == []\n    assert select_words(\"abc def ghi\", 17) == []\n\
    \    assert select_words(\"abc def ghi\", 18) == []\n    assert select_words(\"\
    abc def ghi\", 19) == []\n    assert select_words(\"abc def ghi\", 20) == []\n\
    \    assert select_words(\"abc def ghi\", 21) == []\n    assert select_words(\"\
    abc def ghi\", 22) == []\n    assert select_words(\"abc def ghi\", 23) == []\n\
    \    assert select_words(\"abc def ghi\", 24) == []\n    assert select_words(\"\
    abc def ghi\", 25) == []\n    assert select_words(\"abc def ghi\", 26) == []\n\
    \    assert select_words(\"abc def ghi\", 27) == []\n    assert select_words(\"\
    abc def ghi\", 28) == []\n    assert select_words(\"abc def ghi\", 29) == []\n\
    \    assert select_words(\"abc def ghi\", 30) == []\n    assert select_words(\"\
    abc def ghi\", 31) == []\n    assert select_words(\"abc def ghi\", 32) == []\n\
    \    assert select_words(\"abc def ghi\", 33) == []\n    assert select_words(\"\
    abc def ghi\", 34) == []\n    assert select_words(\"abc def ghi\", 35) == []\n\
    \    assert select_words(\"abc def ghi\", 36) == []\n    assert select_words(\"\
    abc def ghi\", 37) == []\n    assert select_words(\"abc def ghi\", 38) == []\n\
    \    assert \ndef check(candidate):\n    assert candidate('Mary had a little lamb',\
    \ 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary',\
    \ 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp6b37nic_.py\", line 47\n    assert \n           ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    assert select_words(\"abc\
    \ def ghi\", 3) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc\
    \ def ghi\", 0) == []\n    assert select_words(\"abc def ghi\", 4) == []\n   \
    \ assert select_words(\"abc def ghi\", 5) == []\n    assert select_words(\"abc\
    \ def ghi\", 6) == []\n    assert select_words(\"abc def ghi\", 7) == []\n   \
    \ assert select_words(\"abc def ghi\", 8) == []\n    assert select_words(\"abc\
    \ def ghi\", 9) == []\n    assert select_words(\"abc def ghi\", 10) == []\n  \
    \  assert select_words(\"abc def ghi\", 11) == []\n    assert select_words(\"\
    abc def ghi\", 12) == []\n    assert select_words(\"abc def ghi\", 13) == []\n\
    \    assert select_words(\"abc def ghi\", 14) == []\n    assert select_words(\"\
    abc def ghi\", 15) == []\n    assert select_words(\"abc def ghi\", 16) == []\n\
    \    assert select_words(\"abc def ghi\", 17) == []\n    assert select_words(\"\
    abc def ghi\", 18) == []\n    assert select_words(\"abc def ghi\", 19) == []\n\
    \    assert select_words(\"abc def ghi\", 20) == []\n    assert select_words(\"\
    abc def ghi\", 21) == []\n    assert select_words(\"abc def ghi\", 22) == []\n\
    \    assert select_words(\"abc def ghi\", 23) == []\n    assert select_words(\"\
    abc def ghi\", 24) == []\n    assert select_words(\"abc def ghi\", 25) == []\n\
    \    assert select_words(\"abc def ghi\", 26) == []\n    assert select_words(\"\
    abc def ghi\", 27) == []\n    assert select_words(\"abc def ghi\", 28) == []\n\
    \    assert select_words(\"abc def ghi\", 29) == []\n    assert select_words(\"\
    abc def ghi\", 30) == []\n    assert select_words(\"abc def ghi\", 31) == []\n\
    \    assert select_words(\"abc def ghi\", 32) == []\n    assert select_words(\"\
    abc def ghi\", 33) == []\n    assert select_words(\"abc def ghi\", 34) == []\n\
    \    assert select_words(\"abc def ghi\", 35) == []\n    assert select_words(\"\
    abc def ghi\", 36) == []\n    assert select_words(\"abc def ghi\", 37) == []\n\
    \    assert \ndef check(candidate):\n    assert candidate('Mary had a little lamb',\
    \ 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary',\
    \ 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp83vzlokp.py\", line 47\n    assert \n           ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 280, in <module>\n    test_check()\n  File \"/tmp/tmpyxd40gft.py\", line 278,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 269, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 280, in <module>\n    test_check()\n  File \"/tmp/tmpyxd40gft.py\", line 278,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 269, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    assert select_words(\"abc\
    \ def ghi\", 3) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc\
    \ def ghi\", 5) == []\n    assert select_words(\"abc def ghi\", 0) == []\n   \
    \ assert select_words(\"abc def ghi\", 2) == []\n    assert select_words(\"abc\
    \ def ghi\", 4) == []\n    assert select_words(\"abc def ghi\", 6) == []\n   \
    \ assert select_words(\"abc def ghi\", 7) == []\n    assert select_words(\"abc\
    \ def ghi\", 8) == []\n    assert select_words(\"abc def ghi\", 9) == []\n   \
    \ assert select_words(\"abc def ghi\", 10) == []\n    assert select_words(\"abc\
    \ def ghi\", 11) == []\n    assert select_words(\"abc def ghi\", 12) == []\n \
    \   assert select_words(\"abc def ghi\", 13) == []\n    assert select_words(\"\
    abc def ghi\", 14) == []\n    assert select_words(\"abc def ghi\", 15) == []\n\
    \    assert select_words(\"abc def ghi\", 16) == []\n    assert select_words(\"\
    abc def ghi\", 17) == []\n    assert select_words(\"abc def ghi\", 18) == []\n\
    \    assert select_words(\"abc def ghi\", 19) == []\n    assert select_words(\"\
    abc def ghi\", 20) == []\n    assert select_words(\"abc def ghi\", 21) == []\n\
    \    assert select_words(\"abc def ghi\", 22) == []\n    assert select_words(\"\
    abc def ghi\", 23) == []\n    assert select_words(\"abc def ghi\", 24) == []\n\
    \    assert select_words(\"abc def ghi\", 25) == []\n    assert select_words(\"\
    abc def ghi\", 26) == []\n    assert select_words(\"abc def ghi\", 27) == []\n\
    \    assert select_words(\"abc def ghi\", 28) == []\n    assert select_words(\"\
    abc def ghi\", 29) == []\n    assert select_words(\"abc def ghi\", 30) == []\n\
    \    assert select_words(\"abc def ghi\", 31) == []\n    assert select_words(\"\
    abc def ghi\", 32) == []\n    assert select_words(\"abc def ghi\", 33) == []\n\
    \    assert select_words(\"abc def ghi\", 34) == []\n    assert select_words(\"\
    abc def ghi\", 35) == []\n    assert select_words(\"abc def ghi\", 36) == []\n\
    \    assert \ndef check(candidate):\n    assert candidate('Mary had a little lamb',\
    \ 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary',\
    \ 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp7f65v7su.py\", line 47\n    assert \n           ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    assert select_words(\"abc\
    \ def ghi\", 2) == [\"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\"\
    , 3) == []\n    assert select_words(\"abc def ghi\", 4) == []\n    assert select_words(\"\
    abc def ghi\", 5) == []\n    assert select_words(\"abc def ghi\", 6) == []\n \
    \   assert select_words(\"abc def ghi\", 7) == []\n    assert select_words(\"\
    abc def ghi\", 8) == []\n    assert select_words(\"abc def ghi\", 9) == []\n \
    \   assert select_words(\"abc def ghi\", 10) == []\n    assert select_words(\"\
    abc def ghi\", 11) == []\n    assert select_words(\"abc def ghi\", 12) == []\n\
    \    assert select_words(\"abc def ghi\", 13) == []\n    assert select_words(\"\
    abc def ghi\", 14) == []\n    assert select_words(\"abc def ghi\", 15) == []\n\
    \    assert select_words(\"abc def ghi\", 16) == []\n    assert select_words(\"\
    abc def ghi\", 17) == []\n    assert select_words(\"abc def ghi\", 18) == []\n\
    \    assert select_words(\"abc def ghi\", 19) == []\n    assert select_words(\"\
    abc def ghi\", 20) == []\n    assert select_words(\"abc def ghi\", 21) == []\n\
    \    assert select_words(\"abc def ghi\", 22) == []\n    assert select_words(\"\
    abc def ghi\", 23) == []\n    assert select_words(\"abc def ghi\", 24) == []\n\
    \    assert select_words(\"abc def ghi\", 25) == []\n    assert select_words(\"\
    abc def ghi\", 26) == []\n    assert select_words(\"abc def ghi\", 27) == []\n\
    \    assert select_words(\"abc def ghi\", 28) == []\n    assert select_words(\"\
    abc def ghi\", 29) == []\n    assert select_words(\"abc def ghi\", 30) == []\n\
    \    assert select_words(\"abc def ghi\", 31) == []\n    assert select_words(\"\
    abc def ghi\", 32) == []\n    assert select_words(\"abc def ghi\", 33) == []\n\
    \    assert select_words(\"abc def ghi\", 34) == []\n    assert select_words(\"\
    abc def ghi\", 35) == []\n    assert select_words(\"abc def ghi\", 36) == []\n\
    \    assert select_words(\"abc def ghi\", 37) == []\n    assert select_word\n\
    def check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert\
    \ candidate('simple white space', 2) == []\n    assert candidate('Hello world',\
    \ 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert\
    \ candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c',\
    \ 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwu8fs2ip.py\", line\
    \ 60, in <module>\n    test_check()\n  File \"/tmp/tmpwu8fs2ip.py\", line 58,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpwu8fs2ip.py\", line\
    \ 49, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmpwu8fs2ip.py\", line 11, in select_words\n    assert select_words(\"\
    abc def ghi\", 2) == [\"def\", \"ghi\"]\n  File \"/tmp/tmpwu8fs2ip.py\", line\
    \ 11, in select_words\n    assert select_words(\"abc def ghi\", 2) == [\"def\"\
    , \"ghi\"]\n  File \"/tmp/tmpwu8fs2ip.py\", line 11, in select_words\n    assert\
    \ select_words(\"abc def ghi\", 2) == [\"def\", \"ghi\"]\n  [Previous line repeated\
    \ 994 more times]\nRecursionError: maximum recursion depth exceeded\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 280, in <module>\n    test_check()\n  File \"/tmp/tmpyxd40gft.py\", line 278,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 269, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 280, in <module>\n    test_check()\n  File \"/tmp/tmpyxd40gft.py\", line 278,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 269, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    assert select_words(\"abc\
    \ def ghi\", 2) == [\"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\"\
    , 3) == []\n    assert select_words(\"abc def ghi\", 4) == []\n    assert select_words(\"\
    abc def ghi\", 5) == []\n    assert select_words(\"abc def ghi\", 6) == []\n \
    \   assert select_words(\"abc def ghi\", 7) == []\n    assert select_words(\"\
    abc def ghi\", 8) == []\n    assert select_words(\"abc def ghi\", 9) == []\n \
    \   assert select_words(\"abc def ghi\", 10) == []\n    assert select_words(\"\
    abc def ghi\", 11) == []\n    assert select_words(\"abc def ghi\", 12) == []\n\
    \    assert select_words(\"abc def ghi\", 13) == []\n    assert select_words(\"\
    abc def ghi\", 14) == []\n    assert select_words(\"abc def ghi\", 15) == []\n\
    \    assert select_words(\"abc def ghi\", 16) == []\n    assert select_words(\"\
    abc def ghi\", 17) == []\n    assert select_words(\"abc def ghi\", 18) == []\n\
    \    assert select_words(\"abc def ghi\", 19) == []\n    assert select_words(\"\
    abc def ghi\", 20) == []\n    assert select_words(\"abc def ghi\", 21) == []\n\
    \    assert select_words(\"abc def ghi\", 22) == []\n    assert select_words(\"\
    abc def ghi\", 23) == []\n    assert select_words(\"abc def ghi\", 24) == []\n\
    \    assert select_words(\"abc def ghi\", 25) == []\n    assert select_words(\"\
    abc def ghi\", 26) == []\n    assert select_words(\"abc def ghi\", 27) == []\n\
    \    assert select_words(\"abc def ghi\", 28) == []\n    assert select_words(\"\
    abc def ghi\", 29) == []\n    assert select_words(\"abc def ghi\", 30) == []\n\
    \    assert select_words(\"abc def ghi\", 31) == []\n    assert select_words(\"\
    abc def ghi\", 32) == []\n    assert select_words(\"abc def ghi\", 33) == []\n\
    \    assert select_words(\"abc def ghi\", 34) == []\n    assert select_words(\"\
    abc def ghi\", 35) == []\n    assert select_words(\"abc def ghi\", 36) == []\n\
    \    assert select_words(\"abc def ghi\", 37) == []\n    assert select_word\n\
    def check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert\
    \ candidate('simple white space', 2) == []\n    assert candidate('Hello world',\
    \ 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert\
    \ candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c',\
    \ 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwu8fs2ip.py\", line\
    \ 60, in <module>\n    test_check()\n  File \"/tmp/tmpwu8fs2ip.py\", line 58,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpwu8fs2ip.py\", line\
    \ 49, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmpwu8fs2ip.py\", line 11, in select_words\n    assert select_words(\"\
    abc def ghi\", 2) == [\"def\", \"ghi\"]\n  File \"/tmp/tmpwu8fs2ip.py\", line\
    \ 11, in select_words\n    assert select_words(\"abc def ghi\", 2) == [\"def\"\
    , \"ghi\"]\n  File \"/tmp/tmpwu8fs2ip.py\", line 11, in select_words\n    assert\
    \ select_words(\"abc def ghi\", 2) == [\"def\", \"ghi\"]\n  [Previous line repeated\
    \ 994 more times]\nRecursionError: maximum recursion depth exceeded\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    assert select_words(\"abc\
    \ def\", 2) == [\"abc\", \"def\"]\n    assert select_words(\"abc def\", 3) ==\
    \ []\n    assert select_words(\"abc def\", 4) == []\n    assert select_words(\"\
    abc def\", 5) == []\n    assert select_words(\"abc def\", 6) == []\n    assert\
    \ select_words(\"abc def\", 7) == []\n    assert select_words(\"abc def\", 8)\
    \ == []\n    assert select_words(\"abc def\", 9) == []\n    assert select_words(\"\
    abc def\", 10) == []\n    assert select_words(\"abc def\", 11) == []\n    assert\
    \ select_words(\"abc def\", 12) == []\n    assert select_words(\"abc def\", 13)\
    \ == []\n    assert select_words(\"abc def\", 14) == []\n    assert select_words(\"\
    abc def\", 15) == []\n    assert select_words(\"abc def\", 16) == []\n    assert\
    \ select_words(\"abc def\", 17) == []\n    assert select_words(\"abc def\", 18)\
    \ == []\n    assert select_words(\"abc def\", 19) == []\n    assert select_words(\"\
    abc def\", 20) == []\n    assert select_words(\"abc def\", 21) == []\n    assert\
    \ select_words(\"abc def\", 22) == []\n    assert select_words(\"abc def\", 23)\
    \ == []\n    assert select_words(\"abc def\", 24) == []\n    assert select_words(\"\
    abc def\", 25) == []\n    assert select_words(\"abc def\", 26) == []\n    assert\
    \ select_words(\"abc def\", 27) == []\n    assert select_words(\"abc def\", 28)\
    \ == []\n    assert select_words(\"abc def\", 29) == []\n    assert select_words(\"\
    abc def\", 30) == []\n    assert select_words(\"abc def\", 31) == []\n    assert\
    \ select_words(\"abc def\", 32) == []\n    assert select_words(\"abc def\", 33)\
    \ == []\n    assert select_words(\"abc def\", 34) == []\n    assert select_words(\"\
    abc def\", 35) == []\n    assert select_words(\"abc def\", 36) == []\n    assert\
    \ select_words(\"abc def\", 37) == []\n    assert select_words(\"abc def\", 38)\
    \ == []\n    assert select_words(\"abc def\", 39) == []\n    assert select_words(\"\
    abc def\", 40) == []\n    assert select_words(\"abc def\", 41) == []\n    assert\
    \ select_words(\"abc def\", 42) == []\n    assert select_words(\"abc def\", 43)\
    \ == []\n    assert select_words(\"\ndef check(candidate):\n    assert candidate('Mary\
    \ had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little\
    \ lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2)\
    \ == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpk6ke3iuz.py\", line 53\n    assert select_words(\"\n \
    \                       ^\nSyntaxError: unterminated string literal (detected\
    \ at line 53)\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 280, in <module>\n    test_check()\n  File \"/tmp/tmpyxd40gft.py\", line 278,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 269, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    assert select_words(\"abc\
    \ def ghi\", 2) == [\"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\"\
    , 3) == []\n    assert select_words(\"abc def ghi\", 4) == []\n    assert select_words(\"\
    abc def ghi\", 5) == []\n    assert select_words(\"abc def ghi\", 6) == []\n \
    \   assert select_words(\"abc def ghi\", 7) == []\n    assert select_words(\"\
    abc def ghi\", 8) == []\n    assert select_words(\"abc def ghi\", 9) == []\n \
    \   assert select_words(\"abc def ghi\", 10) == []\n    assert select_words(\"\
    abc def ghi\", 11) == []\n    assert select_words(\"abc def ghi\", 12) == []\n\
    \    assert select_words(\"abc def ghi\", 13) == []\n    assert select_words(\"\
    abc def ghi\", 14) == []\n    assert select_words(\"abc def ghi\", 15) == []\n\
    \    assert select_words(\"abc def ghi\", 16) == []\n    assert select_words(\"\
    abc def ghi\", 17) == []\n    assert select_words(\"abc def ghi\", 18) == []\n\
    \    assert select_words(\"abc def ghi\", 19) == []\n    assert select_words(\"\
    abc def ghi\", 20) == []\n    assert select_words(\"abc def ghi\", 21) == []\n\
    \    assert select_words(\"abc def ghi\", 22) == []\n    assert select_words(\"\
    abc def ghi\", 23) == []\n    assert select_words(\"abc def ghi\", 24) == []\n\
    \    assert select_words(\"abc def ghi\", 25) == []\n    assert select_words(\"\
    abc def ghi\", 26) == []\n    assert select_words(\"abc def ghi\", 27) == []\n\
    \    assert select_words(\"abc def ghi\", 28) == []\n    assert select_words(\"\
    abc def ghi\", 29) == []\n    assert select_words(\"abc def ghi\", 30) == []\n\
    \    assert select_words(\"abc def ghi\", 31) == []\n    assert select_words(\"\
    abc def ghi\", 32) == []\n    assert select_words(\"abc def ghi\", 33) == []\n\
    \    assert select_words(\"abc def ghi\", 34) == []\n    assert select_words(\"\
    abc def ghi\", 35) == []\n    assert select_words(\"abc def ghi\", 36) == []\n\
    \    assert select_words(\"abc def ghi\", 37) == []\n    assert select_word\n\
    def check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert\
    \ candidate('simple white space', 2) == []\n    assert candidate('Hello world',\
    \ 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert\
    \ candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c',\
    \ 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwu8fs2ip.py\", line\
    \ 60, in <module>\n    test_check()\n  File \"/tmp/tmpwu8fs2ip.py\", line 58,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpwu8fs2ip.py\", line\
    \ 49, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmpwu8fs2ip.py\", line 11, in select_words\n    assert select_words(\"\
    abc def ghi\", 2) == [\"def\", \"ghi\"]\n  File \"/tmp/tmpwu8fs2ip.py\", line\
    \ 11, in select_words\n    assert select_words(\"abc def ghi\", 2) == [\"def\"\
    , \"ghi\"]\n  File \"/tmp/tmpwu8fs2ip.py\", line 11, in select_words\n    assert\
    \ select_words(\"abc def ghi\", 2) == [\"def\", \"ghi\"]\n  [Previous line repeated\
    \ 994 more times]\nRecursionError: maximum recursion depth exceeded\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    assert select_words(\"abc\
    \ def ghi\", 2) == [\"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\"\
    , 3) == []\n    assert select_words(\"abc def ghi\", 0) == []\n    assert select_words(\"\
    abc def ghi\", 5) == []\n    assert select_words(\"abc def ghi\", 6) == []\n \
    \   assert select_words(\"abc def ghi\", 7) == []\n    assert select_words(\"\
    abc def ghi\", 8) == []\n    assert select_words(\"abc def ghi\", 9) == []\n \
    \   assert select_words(\"abc def ghi\", 10) == []\n    assert select_words(\"\
    abc def ghi\", 11) == []\n    assert select_words(\"abc def ghi\", 12) == []\n\
    \    assert select_words(\"abc def ghi\", 13) == []\n    assert select_words(\"\
    abc def ghi\", 14) == []\n    assert select_words(\"abc def ghi\", 15) == []\n\
    \    assert select_words(\"abc def ghi\", 16) == []\n    assert select_words(\"\
    abc def ghi\", 17) == []\n    assert select_words(\"abc def ghi\", 18) == []\n\
    \    assert select_words(\"abc def ghi\", 19) == []\n    assert select_words(\"\
    abc def ghi\", 20) == []\n    assert select_words(\"abc def ghi\", 21) == []\n\
    \    assert select_words(\"abc def ghi\", 22) == []\n    assert select_words(\"\
    abc def ghi\", 23) == []\n    assert select_words(\"abc def ghi\", 24) == []\n\
    \    assert select_words(\"abc def ghi\", 25) == []\n    assert select_words(\"\
    abc def ghi\", 26) == []\n    assert select_words(\"abc def ghi\", 27) == []\n\
    \    assert select_words(\"abc def ghi\", 28) == []\n    assert select_words(\"\
    abc def ghi\", 29) == []\n    assert select_words(\"abc def ghi\", 30) == []\n\
    \    assert select_words(\"abc def ghi\", 31) == []\n    assert select_words(\"\
    abc def ghi\", 32) == []\n    assert select_words(\"abc def ghi\", 33) == []\n\
    \    assert select_words(\"abc def ghi\", 34) == []\n    assert select_words(\"\
    abc def ghi\", 35) == []\n    assert select_words(\"abc def ghi\", 36) == []\n\
    \    assert select_words(\"abc def ghi\", 37) == []\n    assert select_word\n\
    def check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert\
    \ candidate('simple white space', 2) == []\n    assert candidate('Hello world',\
    \ 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert\
    \ candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c',\
    \ 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3vj47x28.py\", line\
    \ 60, in <module>\n    test_check()\n  File \"/tmp/tmp3vj47x28.py\", line 58,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp3vj47x28.py\", line\
    \ 49, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmp3vj47x28.py\", line 11, in select_words\n    assert select_words(\"\
    abc def ghi\", 2) == [\"def\", \"ghi\"]\n  File \"/tmp/tmp3vj47x28.py\", line\
    \ 11, in select_words\n    assert select_words(\"abc def ghi\", 2) == [\"def\"\
    , \"ghi\"]\n  File \"/tmp/tmp3vj47x28.py\", line 11, in select_words\n    assert\
    \ select_words(\"abc def ghi\", 2) == [\"def\", \"ghi\"]\n  [Previous line repeated\
    \ 994 more times]\nRecursionError: maximum recursion depth exceeded\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 280, in <module>\n    test_check()\n  File \"/tmp/tmpyxd40gft.py\", line 278,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 269, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 280, in <module>\n    test_check()\n  File \"/tmp/tmpyxd40gft.py\", line 278,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 269, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    assert select_words(\"abc\
    \ def ghi\", 3) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc\
    \ def ghi\", 2) == [\"abc\", \"def\"]\n    assert select_words(\"abc def ghi\"\
    , 1) == [\"abc\"]\n    assert select_words(\"abc def ghi\", 0) == []\n    assert\
    \ select_words(\"abc def ghi\", -1) == []\n    assert select_words(\"abc def ghi\"\
    , 2) == [\"abc\", \"def\"]\n    assert select_words(\"abc def ghi\", 3) == [\"\
    abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\", 4) == [\"abc\"\
    , \"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\", 5) == [\"abc\",\
    \ \"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\", 6) == [\"abc\",\
    \ \"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\", 7) == [\"abc\",\
    \ \"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\", 8) == [\"abc\",\
    \ \"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\", 9) == [\"abc\",\
    \ \"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\", 10) == [\"abc\"\
    , \"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\", 11) == [\"abc\"\
    , \"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\", 12) == [\"abc\"\
    , \"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\", 13) == [\"abc\"\
    , \"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\", 14) == [\"abc\"\
    , \"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\", 15) == [\"abc\"\
    , \"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\", 16) == [\"abc\"\
    , \"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\", 17) == [\"abc\"\
    , \"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\", 18) == [\"abc\"\
    , \"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\", 19) == [\"abc\"\
    , \"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\", 20) == [\"abc\"\
    , \"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\", 21) == [\"abc\"\
    , \"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\", 22) == [\"\ndef\
    \ check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert\
    \ candidate('simple white space', 2) == []\n    assert candidate('Hello world',\
    \ 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert\
    \ candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c',\
    \ 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp10c42o6j.py\", line 36\n    assert select_words(\"abc\
    \ def ghi\", 22) == [\"\n                                               ^\nSyntaxError:\
    \ unterminated string literal (detected at line 36)\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    assert select_words(\"abc\
    \ def ghi\", 3) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc\
    \ def ghi\", 5) == []\n    assert select_words(\"abc def ghi\", 0) == []\n   \
    \ assert select_words(\"abc def ghi\", -1) == []\n    assert select_words(\"abc\
    \ def ghi\", 4) == []\n    assert select_words(\"abc def ghi\", -2) == []\n  \
    \  assert select_words(\"abc def ghi\", 2) == []\n    assert select_words(\"abc\
    \ def ghi\", -2) == []\n    assert select_words(\"abc def ghi\", 0) == []\n  \
    \  assert select_words(\"abc def ghi\", 2) == []\n    assert select_words(\"abc\
    \ def ghi\", -2) == []\n    assert select_words(\"abc def ghi\", 2) == []\n  \
    \  assert select_words(\"abc def ghi\", -2) == []\n    assert select_words(\"\
    abc def ghi\", 2) == []\n    assert select_words(\"abc def ghi\", -2) == []\n\
    \    assert select_words(\"abc def ghi\", 2) == []\n    assert select_words(\"\
    abc def ghi\", -2) == []\n    assert select_words(\"abc def ghi\", 2) == []\n\
    \    assert select_words(\"abc def ghi\", -2) == []\n    assert select_words(\"\
    abc def ghi\", 2) == []\n    assert select_words(\"abc def ghi\", -2) == []\n\
    \    assert select_words(\"abc def ghi\", 2) == []\n    assert select_words(\"\
    abc def ghi\", -2) == []\n    assert select_words(\"abc def ghi\", 2) == []\n\
    \    assert select_words(\"abc def ghi\", -2) == []\n    assert select_words(\"\
    abc def ghi\", 2) == []\n    assert select_words(\"abc def ghi\", -2) == []\n\
    \    assert select_words(\"abc def ghi\", 2) == []\n    assert select_words(\"\
    abc def ghi\", -2) == []\n    assert select_words(\"abc def ghi\", 2) == []\n\
    \    assert select_words(\"abc def ghi\", -2) == []\n    assert select_words(\"\
    abc def ghi\", 2) == []\n    assert select_words(\"abc def ghi\", -2) == []\n\
    \    assert select_words(\"abc def ghi\", 2) == []\n    assert select_words(\"\
    abc def ghi\", -2) == []\n    assert select_words(\"abc def ghi\", 2) == []\n\
    \    assert \ndef check(candidate):\n    assert candidate('Mary had a little lamb',\
    \ 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary',\
    \ 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpgtahbv5t.py\", line 47\n    assert \n           ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 280, in <module>\n    test_check()\n  File \"/tmp/tmpyxd40gft.py\", line 278,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 269, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 280, in <module>\n    test_check()\n  File \"/tmp/tmpyxd40gft.py\", line 278,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 269, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 280, in <module>\n    test_check()\n  File \"/tmp/tmpyxd40gft.py\", line 278,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 269, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 280, in <module>\n    test_check()\n  File \"/tmp/tmpyxd40gft.py\", line 278,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 269, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 280, in <module>\n    test_check()\n  File \"/tmp/tmpyxd40gft.py\", line 278,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 269, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    assert select_words(\"abc\
    \ def ghi\", 3) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc\
    \ def ghi\", 5) == []\n    assert select_words(\"abc def ghi\", 0) == []\n   \
    \ assert select_words(\"abc def ghi\", -1) == []\n    assert select_words(\"abc\
    \ def ghi\", 2) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc\
    \ def ghi\", 4) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc\
    \ def ghi\", 6) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc\
    \ def ghi\", 7) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc\
    \ def ghi\", 8) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc\
    \ def ghi\", 9) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc\
    \ def ghi\", 10) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc\
    \ def ghi\", 11) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc\
    \ def ghi\", 12) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc\
    \ def ghi\", 13) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc\
    \ def ghi\", 14) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc\
    \ def ghi\", 15) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc\
    \ def ghi\", 16) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc\
    \ def ghi\", 17) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc\
    \ def ghi\", 18) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc\
    \ def ghi\", 19) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc\
    \ def ghi\", 20) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc\
    \ def ghi\", 21) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc\
    \ def ghi\", 22) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc\
    \ def ghi\", 23) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc\
    \ def ghi\", 24) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc\
    \ def gh\ndef check(candidate):\n    assert candidate('Mary had a little lamb',\
    \ 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary',\
    \ 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpp3v7hgf8.py\", line 36\n    assert select_words(\"abc\
    \ def gh\n                        ^\nSyntaxError: unterminated string literal\
    \ (detected at line 36)\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 280, in <module>\n    test_check()\n  File \"/tmp/tmpyxd40gft.py\", line 278,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 269, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    assert select_words(\"abc\
    \ def ghi\", 2) == [\"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\"\
    , 3) == []\n    assert select_words(\"abc def ghi\", 4) == []\n    assert select_words(\"\
    abc def ghi\", 5) == []\n    assert select_words(\"abc def ghi\", 6) == []\n \
    \   assert select_words(\"abc def ghi\", 7) == []\n    assert select_words(\"\
    abc def ghi\", 8) == []\n    assert select_words(\"abc def ghi\", 9) == []\n \
    \   assert select_words(\"abc def ghi\", 10) == []\n    assert select_words(\"\
    abc def ghi\", 11) == []\n    assert select_words(\"abc def ghi\", 12) == []\n\
    \    assert select_words(\"abc def ghi\", 13) == []\n    assert select_words(\"\
    abc def ghi\", 14) == []\n    assert select_words(\"abc def ghi\", 15) == []\n\
    \    assert select_words(\"abc def ghi\", 16) == []\n    assert select_words(\"\
    abc def ghi\", 17) == []\n    assert select_words(\"abc def ghi\", 18) == []\n\
    \    assert select_words(\"abc def ghi\", 19) == []\n    assert select_words(\"\
    abc def ghi\", 20) == []\n    assert select_words(\"abc def ghi\", 21) == []\n\
    \    assert select_words(\"abc def ghi\", 22) == []\n    assert select_words(\"\
    abc def ghi\", 23) == []\n    assert select_words(\"abc def ghi\", 24) == []\n\
    \    assert select_words(\"abc def ghi\", 25) == []\n    assert select_words(\"\
    abc def ghi\", 26) == []\n    assert select_words(\"abc def ghi\", 27) == []\n\
    \    assert select_words(\"abc def ghi\", 28) == []\n    assert select_words(\"\
    abc def ghi\", 29) == []\n    assert select_words(\"abc def ghi\", 30) == []\n\
    \    assert select_words(\"abc def ghi\", 31) == []\n    assert select_words(\"\
    abc def ghi\", 32) == []\n    assert select_words(\"abc def ghi\", 33) == []\n\
    \    assert select_words(\"abc def ghi\", 34) == []\n    assert select_words(\"\
    abc def ghi\", 35) == []\n    assert select_words(\"abc def ghi\", 36) == []\n\
    \    assert select_words(\"abc def ghi\", 37) == []\n    assert select_word\n\
    def check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert\
    \ candidate('simple white space', 2) == []\n    assert candidate('Hello world',\
    \ 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert\
    \ candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c',\
    \ 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwu8fs2ip.py\", line\
    \ 60, in <module>\n    test_check()\n  File \"/tmp/tmpwu8fs2ip.py\", line 58,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpwu8fs2ip.py\", line\
    \ 49, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmpwu8fs2ip.py\", line 11, in select_words\n    assert select_words(\"\
    abc def ghi\", 2) == [\"def\", \"ghi\"]\n  File \"/tmp/tmpwu8fs2ip.py\", line\
    \ 11, in select_words\n    assert select_words(\"abc def ghi\", 2) == [\"def\"\
    , \"ghi\"]\n  File \"/tmp/tmpwu8fs2ip.py\", line 11, in select_words\n    assert\
    \ select_words(\"abc def ghi\", 2) == [\"def\", \"ghi\"]\n  [Previous line repeated\
    \ 994 more times]\nRecursionError: maximum recursion depth exceeded\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    assert select_words(\"abc\
    \ def ghi\", 2) == [\"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\"\
    , 3) == []\n    assert select_words(\"abc def ghi\", 4) == []\n    assert select_words(\"\
    abc def ghi\", 5) == []\n    assert select_words(\"abc def ghi\", 6) == []\n \
    \   assert select_words(\"abc def ghi\", 7) == []\n    assert select_words(\"\
    abc def ghi\", 8) == []\n    assert select_words(\"abc def ghi\", 9) == []\n \
    \   assert select_words(\"abc def ghi\", 10) == []\n    assert select_words(\"\
    abc def ghi\", 11) == []\n    assert select_words(\"abc def ghi\", 12) == []\n\
    \    assert select_words(\"abc def ghi\", 13) == []\n    assert select_words(\"\
    abc def ghi\", 14) == []\n    assert select_words(\"abc def ghi\", 15) == []\n\
    \    assert select_words(\"abc def ghi\", 16) == []\n    assert select_words(\"\
    abc def ghi\", 17) == []\n    assert select_words(\"abc def ghi\", 18) == []\n\
    \    assert select_words(\"abc def ghi\", 19) == []\n    assert select_words(\"\
    abc def ghi\", 20) == []\n    assert select_words(\"abc def ghi\", 21) == []\n\
    \    assert select_words(\"abc def ghi\", 22) == []\n    assert select_words(\"\
    abc def ghi\", 23) == []\n    assert select_words(\"abc def ghi\", 24) == []\n\
    \    assert select_words(\"abc def ghi\", 25) == []\n    assert select_words(\"\
    abc def ghi\", 26) == []\n    assert select_words(\"abc def ghi\", 27) == []\n\
    \    assert select_words(\"abc def ghi\", 28) == []\n    assert select_words(\"\
    abc def ghi\", 29) == []\n    assert select_words(\"abc def ghi\", 30) == []\n\
    \    assert select_words(\"abc def ghi\", 31) == []\n    assert select_words(\"\
    abc def ghi\", 32) == []\n    assert select_words(\"abc def ghi\", 33) == []\n\
    \    assert select_words(\"abc def ghi\", 34) == []\n    assert select_words(\"\
    abc def ghi\", 35) == []\n    assert select_words(\"abc def ghi\", 36) == []\n\
    \    assert select_words(\"abc def ghi\", 37) == []\n    assert select_word\n\
    def check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert\
    \ candidate('simple white space', 2) == []\n    assert candidate('Hello world',\
    \ 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert\
    \ candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c',\
    \ 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwu8fs2ip.py\", line\
    \ 60, in <module>\n    test_check()\n  File \"/tmp/tmpwu8fs2ip.py\", line 58,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpwu8fs2ip.py\", line\
    \ 49, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmpwu8fs2ip.py\", line 11, in select_words\n    assert select_words(\"\
    abc def ghi\", 2) == [\"def\", \"ghi\"]\n  File \"/tmp/tmpwu8fs2ip.py\", line\
    \ 11, in select_words\n    assert select_words(\"abc def ghi\", 2) == [\"def\"\
    , \"ghi\"]\n  File \"/tmp/tmpwu8fs2ip.py\", line 11, in select_words\n    assert\
    \ select_words(\"abc def ghi\", 2) == [\"def\", \"ghi\"]\n  [Previous line repeated\
    \ 994 more times]\nRecursionError: maximum recursion depth exceeded\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 280, in <module>\n    test_check()\n  File \"/tmp/tmpyxd40gft.py\", line 278,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 269, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 280, in <module>\n    test_check()\n  File \"/tmp/tmpyxd40gft.py\", line 278,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 269, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 280, in <module>\n    test_check()\n  File \"/tmp/tmpyxd40gft.py\", line 278,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 269, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 280, in <module>\n    test_check()\n  File \"/tmp/tmpyxd40gft.py\", line 278,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 269, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 280, in <module>\n    test_check()\n  File \"/tmp/tmpyxd40gft.py\", line 278,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 269, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 280, in <module>\n    test_check()\n  File \"/tmp/tmpyxd40gft.py\", line 278,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 269, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 280, in <module>\n    test_check()\n  File \"/tmp/tmpyxd40gft.py\", line 278,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 269, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    assert select_words(\"abc\
    \ def ghi\", 3) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc\
    \ def ghi\", 0) == []\n    assert select_words(\"abc def ghi\", 2) == [\"abc\"\
    , \"def\"]\n    assert select_words(\"abc def ghi\", 4) == [\"abc\", \"def\",\
    \ \"ghi\"]\n    assert select_words(\"abc def ghi\", 5) == [\"abc\", \"def\",\
    \ \"ghi\"]\n    assert select_words(\"abc def ghi\", 6) == [\"abc\", \"def\",\
    \ \"ghi\"]\n    assert select_words(\"abc def ghi\", 7) == [\"abc\", \"def\",\
    \ \"ghi\"]\n    assert select_words(\"abc def ghi\", 8) == [\"abc\", \"def\",\
    \ \"ghi\"]\n    assert select_words(\"abc def ghi\", 9) == [\"abc\", \"def\",\
    \ \"ghi\"]\n    assert select_words(\"abc def ghi\", 10) == [\"abc\", \"def\"\
    , \"ghi\"]\n    assert select_words(\"abc def ghi\", 11) == [\"abc\", \"def\"\
    , \"ghi\"]\n    assert select_words(\"abc def ghi\", 12) == [\"abc\", \"def\"\
    , \"ghi\"]\n    assert select_words(\"abc def ghi\", 13) == [\"abc\", \"def\"\
    , \"ghi\"]\n    assert select_words(\"abc def ghi\", 14) == [\"abc\", \"def\"\
    , \"ghi\"]\n    assert select_words(\"abc def ghi\", 15) == [\"abc\", \"def\"\
    , \"ghi\"]\n    assert select_words(\"abc def ghi\", 16) == [\"abc\", \"def\"\
    , \"ghi\"]\n    assert select_words(\"abc def ghi\", 17) == [\"abc\", \"def\"\
    , \"ghi\"]\n    assert select_words(\"abc def ghi\", 18) == [\"abc\", \"def\"\
    , \"ghi\"]\n    assert select_words(\"abc def ghi\", 19) == [\"abc\", \"def\"\
    , \"ghi\"]\n    assert select_words(\"abc def ghi\", 20) == [\"abc\", \"def\"\
    , \"ghi\"]\n    assert select_words(\"abc def ghi\", 21) == [\"abc\", \"def\"\
    , \"ghi\"]\n    assert select_words(\"abc def ghi\", 22) == [\"abc\", \"def\"\
    , \"ghi\"]\n    assert select_words(\"abc def ghi\", 23) == [\"abc\", \"def\"\
    , \"ghi\"]\n    assert select_words(\"abc def ghi\", 24) == [\"abc\", \"def\"\
    , \"ghi\"]\n    assert select_words(\"abc def ghi\", 25) == [\"abc\", \"def\"\
    , \"gh\ndef check(candidate):\n    assert candidate('Mary had a little lamb',\
    \ 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary',\
    \ 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpb83_sgkl.py\", line 35\n    assert select_words(\"abc\
    \ def ghi\", 25) == [\"abc\", \"def\", \"gh\n                                \
    \                             ^\nSyntaxError: unterminated string literal (detected\
    \ at line 35)\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    assert select_words(\"abc\
    \ def ghi\", 3) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc\
    \ def ghi\", 0) == []\n    assert select_words(\"abc def ghi\", 5) == []\n   \
    \ assert select_words(\"abc def ghi\", 6) == []\n    assert select_words(\"abc\
    \ def ghi\", 7) == []\n    assert select_words(\"abc def ghi\", 8) == []\n   \
    \ assert select_words(\"abc def ghi\", 9) == []\n    assert select_words(\"abc\
    \ def ghi\", 10) == []\n    assert select_words(\"abc def ghi\", 11) == []\n \
    \   assert select_words(\"abc def ghi\", 12) == []\n    assert select_words(\"\
    abc def ghi\", 13) == []\n    assert select_words(\"abc def ghi\", 14) == []\n\
    \    assert select_words(\"abc def ghi\", 15) == []\n    assert select_words(\"\
    abc def ghi\", 16) == []\n    assert select_words(\"abc def ghi\", 17) == []\n\
    \    assert select_words(\"abc def ghi\", 18) == []\n    assert select_words(\"\
    abc def ghi\", 19) == []\n    assert select_words(\"abc def ghi\", 20) == []\n\
    \    assert select_words(\"abc def ghi\", 21) == []\n    assert select_words(\"\
    abc def ghi\", 22) == []\n    assert select_words(\"abc def ghi\", 23) == []\n\
    \    assert select_words(\"abc def ghi\", 24) == []\n    assert select_words(\"\
    abc def ghi\", 25) == []\n    assert select_words(\"abc def ghi\", 26) == []\n\
    \    assert select_words(\"abc def ghi\", 27) == []\n    assert select_words(\"\
    abc def ghi\", 28) == []\n    assert select_words(\"abc def ghi\", 29) == []\n\
    \    assert select_words(\"abc def ghi\", 30) == []\n    assert select_words(\"\
    abc def ghi\", 31) == []\n    assert select_words(\"abc def ghi\", 32) == []\n\
    \    assert select_words(\"abc def ghi\", 33) == []\n    assert select_words(\"\
    abc def ghi\", 34) == []\n    assert select_words(\"abc def ghi\", 35) == []\n\
    \    assert select_words(\"abc def ghi\", 36) == []\n    assert select_words(\"\
    abc def ghi\", 37) == []\n    assert select_words(\"abc def ghi\", 38) == []\n\
    \    assert \ndef check(candidate):\n    assert candidate('Mary had a little lamb',\
    \ 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary',\
    \ 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp5x258kuj.py\", line 47\n    assert \n           ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    assert select_words(\"abc\
    \ def ghi\", 3) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc\
    \ def ghi\", 0) == []\n    assert select_words(\"abc def ghi\", 5) == []\n   \
    \ assert select_words(\"abc def ghi\", 6) == []\n    assert select_words(\"abc\
    \ def ghi\", 7) == []\n    assert select_words(\"abc def ghi\", 8) == []\n   \
    \ assert select_words(\"abc def ghi\", 9) == []\n    assert select_words(\"abc\
    \ def ghi\", 10) == []\n    assert select_words(\"abc def ghi\", 11) == []\n \
    \   assert select_words(\"abc def ghi\", 12) == []\n    assert select_words(\"\
    abc def ghi\", 13) == []\n    assert select_words(\"abc def ghi\", 14) == []\n\
    \    assert select_words(\"abc def ghi\", 15) == []\n    assert select_words(\"\
    abc def ghi\", 16) == []\n    assert select_words(\"abc def ghi\", 17) == []\n\
    \    assert select_words(\"abc def ghi\", 18) == []\n    assert select_words(\"\
    abc def ghi\", 19) == []\n    assert select_words(\"abc def ghi\", 20) == []\n\
    \    assert select_words(\"abc def ghi\", 21) == []\n    assert select_words(\"\
    abc def ghi\", 22) == []\n    assert select_words(\"abc def ghi\", 23) == []\n\
    \    assert select_words(\"abc def ghi\", 24) == []\n    assert select_words(\"\
    abc def ghi\", 25) == []\n    assert select_words(\"abc def ghi\", 26) == []\n\
    \    assert select_words(\"abc def ghi\", 27) == []\n    assert select_words(\"\
    abc def ghi\", 28) == []\n    assert select_words(\"abc def ghi\", 29) == []\n\
    \    assert select_words(\"abc def ghi\", 30) == []\n    assert select_words(\"\
    abc def ghi\", 31) == []\n    assert select_words(\"abc def ghi\", 32) == []\n\
    \    assert select_words(\"abc def ghi\", 33) == []\n    assert select_words(\"\
    abc def ghi\", 34) == []\n    assert select_words(\"abc def ghi\", 35) == []\n\
    \    assert select_words(\"abc def ghi\", 36) == []\n    assert select_words(\"\
    abc def ghi\", 37) == []\n    assert select_words(\"abc def ghi\", 38) == []\n\
    \    assert \ndef check(candidate):\n    assert candidate('Mary had a little lamb',\
    \ 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary',\
    \ 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp5x258kuj.py\", line 47\n    assert \n           ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 280, in <module>\n    test_check()\n  File \"/tmp/tmpyxd40gft.py\", line 278,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 269, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 280, in <module>\n    test_check()\n  File \"/tmp/tmpyxd40gft.py\", line 278,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 269, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    assert select_words(\"abc\
    \ def ghi\", 2) == [\"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\"\
    , 3) == []\n    assert select_words(\"abc def ghi\", 4) == []\n    assert select_words(\"\
    abc def ghi\", 5) == []\n    assert select_words(\"abc def ghi\", 6) == []\n \
    \   assert select_words(\"abc def ghi\", 7) == []\n    assert select_words(\"\
    abc def ghi\", 8) == []\n    assert select_words(\"abc def ghi\", 9) == []\n \
    \   assert select_words(\"abc def ghi\", 10) == []\n    assert select_words(\"\
    abc def ghi\", 11) == []\n    assert select_words(\"abc def ghi\", 12) == []\n\
    \    assert select_words(\"abc def ghi\", 13) == []\n    assert select_words(\"\
    abc def ghi\", 14) == []\n    assert select_words(\"abc def ghi\", 15) == []\n\
    \    assert select_words(\"abc def ghi\", 16) == []\n    assert select_words(\"\
    abc def ghi\", 17) == []\n    assert select_words(\"abc def ghi\", 18) == []\n\
    \    assert select_words(\"abc def ghi\", 19) == []\n    assert select_words(\"\
    abc def ghi\", 20) == []\n    assert select_words(\"abc def ghi\", 21) == []\n\
    \    assert select_words(\"abc def ghi\", 22) == []\n    assert select_words(\"\
    abc def ghi\", 23) == []\n    assert select_words(\"abc def ghi\", 24) == []\n\
    \    assert select_words(\"abc def ghi\", 25) == []\n    assert select_words(\"\
    abc def ghi\", 26) == []\n    assert select_words(\"abc def ghi\", 27) == []\n\
    \    assert select_words(\"abc def ghi\", 28) == []\n    assert select_words(\"\
    abc def ghi\", 29) == []\n    assert select_words(\"abc def ghi\", 30) == []\n\
    \    assert select_words(\"abc def ghi\", 31) == []\n    assert select_words(\"\
    abc def ghi\", 32) == []\n    assert select_words(\"abc def ghi\", 33) == []\n\
    \    assert select_words(\"abc def ghi\", 34) == []\n    assert select_words(\"\
    abc def ghi\", 35) == []\n    assert select_words(\"abc def ghi\", 36) == []\n\
    \    assert select_words(\"abc def ghi\", 37) == []\n    assert select_word\n\
    def check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert\
    \ candidate('simple white space', 2) == []\n    assert candidate('Hello world',\
    \ 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert\
    \ candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c',\
    \ 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwu8fs2ip.py\", line\
    \ 60, in <module>\n    test_check()\n  File \"/tmp/tmpwu8fs2ip.py\", line 58,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpwu8fs2ip.py\", line\
    \ 49, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmpwu8fs2ip.py\", line 11, in select_words\n    assert select_words(\"\
    abc def ghi\", 2) == [\"def\", \"ghi\"]\n  File \"/tmp/tmpwu8fs2ip.py\", line\
    \ 11, in select_words\n    assert select_words(\"abc def ghi\", 2) == [\"def\"\
    , \"ghi\"]\n  File \"/tmp/tmpwu8fs2ip.py\", line 11, in select_words\n    assert\
    \ select_words(\"abc def ghi\", 2) == [\"def\", \"ghi\"]\n  [Previous line repeated\
    \ 994 more times]\nRecursionError: maximum recursion depth exceeded\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    assert select_words(\"abc\
    \ def ghi\", 2) == [\"ab\", \"ghi\"]\n    assert select_words(\"abc def ghi\"\
    , 3) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\",\
    \ 4) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\",\
    \ 5) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\",\
    \ 6) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\",\
    \ 7) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\",\
    \ 8) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\",\
    \ 9) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\",\
    \ 10) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\"\
    , 11) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\"\
    , 12) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\"\
    , 13) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\"\
    , 14) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\"\
    , 15) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\"\
    , 16) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\"\
    , 17) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\"\
    , 18) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\"\
    , 19) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\"\
    , 20) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\"\
    , 21) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\"\
    , 22) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\"\
    , 23) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\"\
    , 24) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\"\
    , 25) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\"\
    , \ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) ==\
    \ ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n\
    \    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpycqu5h20.py\", line 35\n    assert select_words(\"abc\
    \ def ghi\", \n                       ^\nSyntaxError: '(' was never closed\n"
  stdout: ''
  timestamp: 1659977083
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 280, in <module>\n    test_check()\n  File \"/tmp/tmpyxd40gft.py\", line 278,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 269, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    assert select_words(\"abc\
    \ def ghi\", 3) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc\
    \ def ghi\", 0) == []\n    assert select_words(\"abc def ghi\", 5) == []\n   \
    \ assert select_words(\"abc def ghi\", 4) == []\n    assert select_words(\"abc\
    \ def ghi\", 6) == []\n    assert select_words(\"abc def ghi\", 7) == []\n   \
    \ assert select_words(\"abc def ghi\", 8) == []\n    assert select_words(\"abc\
    \ def ghi\", 9) == []\n    assert select_words(\"abc def ghi\", 10) == []\n  \
    \  assert select_words(\"abc def ghi\", 11) == []\n    assert select_words(\"\
    abc def ghi\", 12) == []\n    assert select_words(\"abc def ghi\", 13) == []\n\
    \    assert select_words(\"abc def ghi\", 14) == []\n    assert select_words(\"\
    abc def ghi\", 15) == []\n    assert select_words(\"abc def ghi\", 16) == []\n\
    \    assert select_words(\"abc def ghi\", 17) == []\n    assert select_words(\"\
    abc def ghi\", 18) == []\n    assert select_words(\"abc def ghi\", 19) == []\n\
    \    assert select_words(\"abc def ghi\", 20) == []\n    assert select_words(\"\
    abc def ghi\", 21) == []\n    assert select_words(\"abc def ghi\", 22) == []\n\
    \    assert select_words(\"abc def ghi\", 23) == []\n    assert select_words(\"\
    abc def ghi\", 24) == []\n    assert select_words(\"abc def ghi\", 25) == []\n\
    \    assert select_words(\"abc def ghi\", 26) == []\n    assert select_words(\"\
    abc def ghi\", 27) == []\n    assert select_words(\"abc def ghi\", 28) == []\n\
    \    assert select_words(\"abc def ghi\", 29) == []\n    assert select_words(\"\
    abc def ghi\", 30) == []\n    assert select_words(\"abc def ghi\", 31) == []\n\
    \    assert select_words(\"abc def ghi\", 32) == []\n    assert select_words(\"\
    abc def ghi\", 33) == []\n    assert select_words(\"abc def ghi\", 34) == []\n\
    \    assert select_words(\"abc def ghi\", 35) == []\n    assert select_words(\"\
    abc def ghi\", 36) == []\n    assert select_words(\"abc def ghi\", 37) == []\n\
    \    assert \ndef check(candidate):\n    assert candidate('Mary had a little lamb',\
    \ 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary',\
    \ 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpy36vjhwo.py\", line 47\n    assert \n           ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 280, in <module>\n    test_check()\n  File \"/tmp/tmpyxd40gft.py\", line 278,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 269, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 280, in <module>\n    test_check()\n  File \"/tmp/tmpyxd40gft.py\", line 278,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 269, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 280, in <module>\n    test_check()\n  File \"/tmp/tmpyxd40gft.py\", line 278,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 269, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    assert select_words(\"abc\
    \ def ghi\", 2) == [\"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\"\
    , 3) == []\n    assert select_words(\"abc def ghi\", 4) == []\n    assert select_words(\"\
    abc def ghi\", 5) == []\n    assert select_words(\"abc def ghi\", 6) == []\n \
    \   assert select_words(\"abc def ghi\", 7) == []\n    assert select_words(\"\
    abc def ghi\", 8) == []\n    assert select_words(\"abc def ghi\", 9) == []\n \
    \   assert select_words(\"abc def ghi\", 10) == []\n    assert select_words(\"\
    abc def ghi\", 11) == []\n    assert select_words(\"abc def ghi\", 12) == []\n\
    \    assert select_words(\"abc def ghi\", 13) == []\n    assert select_words(\"\
    abc def ghi\", 14) == []\n    assert select_words(\"abc def ghi\", 15) == []\n\
    \    assert select_words(\"abc def ghi\", 16) == []\n    assert select_words(\"\
    abc def ghi\", 17) == []\n    assert select_words(\"abc def ghi\", 18) == []\n\
    \    assert select_words(\"abc def ghi\", 19) == []\n    assert select_words(\"\
    abc def ghi\", 20) == []\n    assert select_words(\"abc def ghi\", 21) == []\n\
    \    assert select_words(\"abc def ghi\", 22) == []\n    assert select_words(\"\
    abc def ghi\", 23) == []\n    assert select_words(\"abc def ghi\", 24) == []\n\
    \    assert select_words(\"abc def ghi\", 25) == []\n    assert select_words(\"\
    abc def ghi\", 26) == []\n    assert select_words(\"abc def ghi\", 27) == []\n\
    \    assert select_words(\"abc def ghi\", 28) == []\n    assert select_words(\"\
    abc def ghi\", 29) == []\n    assert select_words(\"abc def ghi\", 30) == []\n\
    \    assert select_words(\"abc def ghi\", 31) == []\n    assert select_words(\"\
    abc def ghi\", 32) == []\n    assert select_words(\"abc def ghi\", 33) == []\n\
    \    assert select_words(\"abc def ghi\", 34) == []\n    assert select_words(\"\
    abc def ghi\", 35) == []\n    assert select_words(\"abc def ghi\", 36) == []\n\
    \    assert select_words(\"abc def ghi\", 37) == []\n    assert select_word\n\
    def check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert\
    \ candidate('simple white space', 2) == []\n    assert candidate('Hello world',\
    \ 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert\
    \ candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c',\
    \ 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwu8fs2ip.py\", line\
    \ 60, in <module>\n    test_check()\n  File \"/tmp/tmpwu8fs2ip.py\", line 58,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpwu8fs2ip.py\", line\
    \ 49, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmpwu8fs2ip.py\", line 11, in select_words\n    assert select_words(\"\
    abc def ghi\", 2) == [\"def\", \"ghi\"]\n  File \"/tmp/tmpwu8fs2ip.py\", line\
    \ 11, in select_words\n    assert select_words(\"abc def ghi\", 2) == [\"def\"\
    , \"ghi\"]\n  File \"/tmp/tmpwu8fs2ip.py\", line 11, in select_words\n    assert\
    \ select_words(\"abc def ghi\", 2) == [\"def\", \"ghi\"]\n  [Previous line repeated\
    \ 994 more times]\nRecursionError: maximum recursion depth exceeded\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 280, in <module>\n    test_check()\n  File \"/tmp/tmpyxd40gft.py\", line 278,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 269, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 280, in <module>\n    test_check()\n  File \"/tmp/tmpyxd40gft.py\", line 278,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 269, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 280, in <module>\n    test_check()\n  File \"/tmp/tmpyxd40gft.py\", line 278,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 269, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    assert select_words(\"abc\
    \ def ghi\", 3) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc\
    \ def ghi\", 5) == []\n    assert select_words(\"abc def ghi\", 0) == []\n   \
    \ assert select_words(\"abc def ghi\", 2) == []\n    assert select_words(\"abc\
    \ def ghi\", 4) == []\n    assert select_words(\"abc def ghi\", 6) == []\n   \
    \ assert select_words(\"abc def ghi\", 7) == []\n    assert select_words(\"abc\
    \ def ghi\", 8) == []\n    assert select_words(\"abc def ghi\", 9) == []\n   \
    \ assert select_words(\"abc def ghi\", 10) == []\n    assert select_words(\"abc\
    \ def ghi\", 11) == []\n    assert select_words(\"abc def ghi\", 12) == []\n \
    \   assert select_words(\"abc def ghi\", 13) == []\n    assert select_words(\"\
    abc def ghi\", 14) == []\n    assert select_words(\"abc def ghi\", 15) == []\n\
    \    assert select_words(\"abc def ghi\", 16) == []\n    assert select_words(\"\
    abc def ghi\", 17) == []\n    assert select_words(\"abc def ghi\", 18) == []\n\
    \    assert select_words(\"abc def ghi\", 19) == []\n    assert select_words(\"\
    abc def ghi\", 20) == []\n    assert select_words(\"abc def ghi\", 21) == []\n\
    \    assert select_words(\"abc def ghi\", 22) == []\n    assert select_words(\"\
    abc def ghi\", 23) == []\n    assert select_words(\"abc def ghi\", 24) == []\n\
    \    assert select_words(\"abc def ghi\", 25) == []\n    assert select_words(\"\
    abc def ghi\", 26) == []\n    assert select_words(\"abc def ghi\", 27) == []\n\
    \    assert select_words(\"abc def ghi\", 28) == []\n    assert select_words(\"\
    abc def ghi\", 29) == []\n    assert select_words(\"abc def ghi\", 30) == []\n\
    \    assert select_words(\"abc def ghi\", 31) == []\n    assert select_words(\"\
    abc def ghi\", 32) == []\n    assert select_words(\"abc def ghi\", 33) == []\n\
    \    assert select_words(\"abc def ghi\", 34) == []\n    assert select_words(\"\
    abc def ghi\", 35) == []\n    assert select_words(\"abc def ghi\", 36) == []\n\
    \    assert \ndef check(candidate):\n    assert candidate('Mary had a little lamb',\
    \ 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary',\
    \ 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp7f65v7su.py\", line 47\n    assert \n           ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    assert select_words(\"abc\
    \ def ghi\", 3) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc\
    \ def ghi\", 4) == []\n    assert select_words(\"abc def ghi\", 0) == []\n   \
    \ assert select_words(\"abc def ghi\", -1) == []\n    assert select_words(\"abc\
    \ def ghi\", 2) == [\"abc\", \"def\"]\n    assert select_words(\"abc def ghi\"\
    , 5) == []\n    assert select_words(\"abc def ghi\", 6) == []\n    assert select_words(\"\
    abc def ghi\", 7) == []\n    assert select_words(\"abc def ghi\", 8) == []\n \
    \   assert select_words(\"abc def ghi\", 9) == []\n    assert select_words(\"\
    abc def ghi\", 10) == []\n    assert select_words(\"abc def ghi\", 11) == []\n\
    \    assert select_words(\"abc def ghi\", 12) == []\n    assert select_words(\"\
    abc def ghi\", 13) == []\n    assert select_words(\"abc def ghi\", 14) == []\n\
    \    assert select_words(\"abc def ghi\", 15) == []\n    assert select_words(\"\
    abc def ghi\", 16) == []\n    assert select_words(\"abc def ghi\", 17) == []\n\
    \    assert select_words(\"abc def ghi\", 18) == []\n    assert select_words(\"\
    abc def ghi\", 19) == []\n    assert select_words(\"abc def ghi\", 20) == []\n\
    \    assert select_words(\"abc def ghi\", 21) == []\n    assert select_words(\"\
    abc def ghi\", 22) == []\n    assert select_words(\"abc def ghi\", 23) == []\n\
    \    assert select_words(\"abc def ghi\", 24) == []\n    assert select_words(\"\
    abc def ghi\", 25) == []\n    assert select_words(\"abc def ghi\", 26) == []\n\
    \    assert select_words(\"abc def ghi\", 27) == []\n    assert select_words(\"\
    abc def ghi\", 28) == []\n    assert select_words(\"abc def ghi\", 29) == []\n\
    \    assert select_words(\"abc def ghi\", 30) == []\n    assert select_words(\"\
    abc def ghi\", 31) == []\n    assert select_words(\"abc def ghi\", 32) == []\n\
    \    assert select_words(\"abc def ghi\", 33) == []\n    assert select_words(\"\
    abc def ghi\", 34) == []\n    assert select_words(\"abc def ghi\", 35\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmps9i1mluv.py\", line 46\n    assert select_words(\"abc\
    \ def ghi\", 35\n                       ^\nSyntaxError: '(' was never closed\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 280, in <module>\n    test_check()\n  File \"/tmp/tmpyxd40gft.py\", line 278,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 269, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    assert select_words(\"abc\
    \ def ghi\", 3) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc\
    \ def ghi\", 4) == []\n    assert select_words(\"abc def ghi\", 5) == []\n   \
    \ assert select_words(\"abc def ghi\", 6) == []\n    assert select_words(\"abc\
    \ def ghi\", 7) == []\n    assert select_words(\"abc def ghi\", 8) == []\n   \
    \ assert select_words(\"abc def ghi\", 9) == []\n    assert select_words(\"abc\
    \ def ghi\", 10) == []\n    assert select_words(\"abc def ghi\", 11) == []\n \
    \   assert select_words(\"abc def ghi\", 12) == []\n    assert select_words(\"\
    abc def ghi\", 13) == []\n    assert select_words(\"abc def ghi\", 14) == []\n\
    \    assert select_words(\"abc def ghi\", 15) == []\n    assert select_words(\"\
    abc def ghi\", 16) == []\n    assert select_words(\"abc def ghi\", 17) == []\n\
    \    assert select_words(\"abc def ghi\", 18) == []\n    assert select_words(\"\
    abc def ghi\", 19) == []\n    assert select_words(\"abc def ghi\", 20) == []\n\
    \    assert select_words(\"abc def ghi\", 21) == []\n    assert select_words(\"\
    abc def ghi\", 22) == []\n    assert select_words(\"abc def ghi\", 23) == []\n\
    \    assert select_words(\"abc def ghi\", 24) == []\n    assert select_words(\"\
    abc def ghi\", 25) == []\n    assert select_words(\"abc def ghi\", 26) == []\n\
    \    assert select_words(\"abc def ghi\", 27) == []\n    assert select_words(\"\
    abc def ghi\", 28) == []\n    assert select_words(\"abc def ghi\", 29) == []\n\
    \    assert select_words(\"abc def ghi\", 30) == []\n    assert select_words(\"\
    abc def ghi\", 31) == []\n    assert select_words(\"abc def ghi\", 32) == []\n\
    \    assert select_words(\"abc def ghi\", 33) == []\n    assert select_words(\"\
    abc def ghi\", 34) == []\n    assert select_words(\"abc def ghi\", 35) == []\n\
    \    assert select_words(\"abc def ghi\", 36) == []\n    assert select_words(\"\
    abc def ghi\", 37) == []\n    assert select_words(\"abc def ghi\", 38) == []\n\
    \    assert \ndef check(candidate):\n    assert candidate('Mary had a little lamb',\
    \ 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary',\
    \ 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp6b37nic_.py\", line 47\n    assert \n           ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    assert select_words(\"abc\
    \ def ghi\", 3) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc\
    \ def ghi\", 0) == []\n    assert select_words(\"abc def ghi\", 5) == []\n   \
    \ assert select_words(\"abc def ghi\", 6) == []\n    assert select_words(\"abc\
    \ def ghi\", 7) == []\n    assert select_words(\"abc def ghi\", 8) == []\n   \
    \ assert select_words(\"abc def ghi\", 9) == []\n    assert select_words(\"abc\
    \ def ghi\", 10) == []\n    assert select_words(\"abc def ghi\", 11) == []\n \
    \   assert select_words(\"abc def ghi\", 12) == []\n    assert select_words(\"\
    abc def ghi\", 13) == []\n    assert select_words(\"abc def ghi\", 14) == []\n\
    \    assert select_words(\"abc def ghi\", 15) == []\n    assert select_words(\"\
    abc def ghi\", 16) == []\n    assert select_words(\"abc def ghi\", 17) == []\n\
    \    assert select_words(\"abc def ghi\", 18) == []\n    assert select_words(\"\
    abc def ghi\", 19) == []\n    assert select_words(\"abc def ghi\", 20) == []\n\
    \    assert select_words(\"abc def ghi\", 21) == []\n    assert select_words(\"\
    abc def ghi\", 22) == []\n    assert select_words(\"abc def ghi\", 23) == []\n\
    \    assert select_words(\"abc def ghi\", 24) == []\n    assert select_words(\"\
    abc def ghi\", 25) == []\n    assert select_words(\"abc def ghi\", 26) == []\n\
    \    assert select_words(\"abc def ghi\", 27) == []\n    assert select_words(\"\
    abc def ghi\", 28) == []\n    assert select_words(\"abc def ghi\", 29) == []\n\
    \    assert select_words(\"abc def ghi\", 30) == []\n    assert select_words(\"\
    abc def ghi\", 31) == []\n    assert select_words(\"abc def ghi\", 32) == []\n\
    \    assert select_words(\"abc def ghi\", 33) == []\n    assert select_words(\"\
    abc def ghi\", 34) == []\n    assert select_words(\"abc def ghi\", 35) == []\n\
    \    assert select_words(\"abc def ghi\", 36) == []\n    assert select_words(\"\
    abc def ghi\", 37) == []\n    assert select_words(\"abc def ghi\", 38) == []\n\
    \    assert \ndef check(candidate):\n    assert candidate('Mary had a little lamb',\
    \ 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary',\
    \ 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp5x258kuj.py\", line 47\n    assert \n           ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 280, in <module>\n    test_check()\n  File \"/tmp/tmpyxd40gft.py\", line 278,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 269, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    assert select_words(\"abc\
    \ def ghi\", 2) == [\"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\"\
    , 3) == []\n    assert select_words(\"abc def ghi\", 4) == []\n    assert select_words(\"\
    abc def ghi\", 5) == []\n    assert select_words(\"abc def ghi\", 6) == []\n \
    \   assert select_words(\"abc def ghi\", 7) == []\n    assert select_words(\"\
    abc def ghi\", 8) == []\n    assert select_words(\"abc def ghi\", 9) == []\n \
    \   assert select_words(\"abc def ghi\", 10) == []\n    assert select_words(\"\
    abc def ghi\", 11) == []\n    assert select_words(\"abc def ghi\", 12) == []\n\
    \    assert select_words(\"abc def ghi\", 13) == []\n    assert select_words(\"\
    abc def ghi\", 14) == []\n    assert select_words(\"abc def ghi\", 15) == []\n\
    \    assert select_words(\"abc def ghi\", 16) == []\n    assert select_words(\"\
    abc def ghi\", 17) == []\n    assert select_words(\"abc def ghi\", 18) == []\n\
    \    assert select_words(\"abc def ghi\", 19) == []\n    assert select_words(\"\
    abc def ghi\", 20) == []\n    assert select_words(\"abc def ghi\", 21) == []\n\
    \    assert select_words(\"abc def ghi\", 22) == []\n    assert select_words(\"\
    abc def ghi\", 23) == []\n    assert select_words(\"abc def ghi\", 24) == []\n\
    \    assert select_words(\"abc def ghi\", 25) == []\n    assert select_words(\"\
    abc def ghi\", 26) == []\n    assert select_words(\"abc def ghi\", 27) == []\n\
    \    assert select_words(\"abc def ghi\", 28) == []\n    assert select_words(\"\
    abc def ghi\", 29) == []\n    assert select_words(\"abc def ghi\", 30) == []\n\
    \    assert select_words(\"abc def ghi\", 31) == []\n    assert select_words(\"\
    abc def ghi\", 32) == []\n    assert select_words(\"abc def ghi\", 33) == []\n\
    \    assert select_words(\"abc def ghi\", 34) == []\n    assert select_words(\"\
    abc def ghi\", 35) == []\n    assert select_words(\"abc def ghi\", 36) == []\n\
    \    assert select_words(\"abc def ghi\", 37) == []\n    assert select_word\n\
    def check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert\
    \ candidate('simple white space', 2) == []\n    assert candidate('Hello world',\
    \ 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert\
    \ candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c',\
    \ 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwu8fs2ip.py\", line\
    \ 60, in <module>\n    test_check()\n  File \"/tmp/tmpwu8fs2ip.py\", line 58,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpwu8fs2ip.py\", line\
    \ 49, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmpwu8fs2ip.py\", line 11, in select_words\n    assert select_words(\"\
    abc def ghi\", 2) == [\"def\", \"ghi\"]\n  File \"/tmp/tmpwu8fs2ip.py\", line\
    \ 11, in select_words\n    assert select_words(\"abc def ghi\", 2) == [\"def\"\
    , \"ghi\"]\n  File \"/tmp/tmpwu8fs2ip.py\", line 11, in select_words\n    assert\
    \ select_words(\"abc def ghi\", 2) == [\"def\", \"ghi\"]\n  [Previous line repeated\
    \ 994 more times]\nRecursionError: maximum recursion depth exceeded\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    assert select_words(\"abc\
    \ def ghi\", 2) == [\"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\"\
    , 3) == []\n    assert select_words(\"abc def ghi\", 4) == []\n    assert select_words(\"\
    abc def ghi\", 5) == []\n    assert select_words(\"abc def ghi\", 6) == []\n \
    \   assert select_words(\"abc def ghi\", 7) == []\n    assert select_words(\"\
    abc def ghi\", 8) == []\n    assert select_words(\"abc def ghi\", 9) == []\n \
    \   assert select_words(\"abc def ghi\", 10) == []\n    assert select_words(\"\
    abc def ghi\", 11) == []\n    assert select_words(\"abc def ghi\", 12) == []\n\
    \    assert select_words(\"abc def ghi\", 13) == []\n    assert select_words(\"\
    abc def ghi\", 14) == []\n    assert select_words(\"abc def ghi\", 15) == []\n\
    \    assert select_words(\"abc def ghi\", 16) == []\n    assert select_words(\"\
    abc def ghi\", 17) == []\n    assert select_words(\"abc def ghi\", 18) == []\n\
    \    assert select_words(\"abc def ghi\", 19) == []\n    assert select_words(\"\
    abc def ghi\", 20) == []\n    assert select_words(\"abc def ghi\", 21) == []\n\
    \    assert select_words(\"abc def ghi\", 22) == []\n    assert select_words(\"\
    abc def ghi\", 23) == []\n    assert select_words(\"abc def ghi\", 24) == []\n\
    \    assert select_words(\"abc def ghi\", 25) == []\n    assert select_words(\"\
    abc def ghi\", 26) == []\n    assert select_words(\"abc def ghi\", 27) == []\n\
    \    assert select_words(\"abc def ghi\", 28) == []\n    assert select_words(\"\
    abc def ghi\", 29) == []\n    assert select_words(\"abc def ghi\", 30) == []\n\
    \    assert select_words(\"abc def ghi\", 31) == []\n    assert select_words(\"\
    abc def ghi\", 32) == []\n    assert select_words(\"abc def ghi\", 33) == []\n\
    \    assert select_words(\"abc def ghi\", 34) == []\n    assert select_words(\"\
    abc def ghi\", 35) == []\n    assert select_words(\"abc def ghi\", 36) == []\n\
    \    assert select_words(\"abc def ghi\", 37) == []\n    assert select_word\n\
    def check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert\
    \ candidate('simple white space', 2) == []\n    assert candidate('Hello world',\
    \ 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert\
    \ candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c',\
    \ 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwu8fs2ip.py\", line\
    \ 60, in <module>\n    test_check()\n  File \"/tmp/tmpwu8fs2ip.py\", line 58,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpwu8fs2ip.py\", line\
    \ 49, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmpwu8fs2ip.py\", line 11, in select_words\n    assert select_words(\"\
    abc def ghi\", 2) == [\"def\", \"ghi\"]\n  File \"/tmp/tmpwu8fs2ip.py\", line\
    \ 11, in select_words\n    assert select_words(\"abc def ghi\", 2) == [\"def\"\
    , \"ghi\"]\n  File \"/tmp/tmpwu8fs2ip.py\", line 11, in select_words\n    assert\
    \ select_words(\"abc def ghi\", 2) == [\"def\", \"ghi\"]\n  [Previous line repeated\
    \ 994 more times]\nRecursionError: maximum recursion depth exceeded\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    assert select_words(\"abc\
    \ def ghi\", 2) == [\"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\"\
    , 3) == []\n    assert select_words(\"abc def ghi\", 4) == []\n    assert select_words(\"\
    abc def ghi\", 5) == []\n    assert select_words(\"abc def ghi\", 6) == []\n \
    \   assert select_words(\"abc def ghi\", 7) == []\n    assert select_words(\"\
    abc def ghi\", 8) == []\n    assert select_words(\"abc def ghi\", 9) == []\n \
    \   assert select_words(\"abc def ghi\", 10) == []\n    assert select_words(\"\
    abc def ghi\", 11) == []\n    assert select_words(\"abc def ghi\", 12) == []\n\
    \    assert select_words(\"abc def ghi\", 13) == []\n    assert select_words(\"\
    abc def ghi\", 14) == []\n    assert select_words(\"abc def ghi\", 15) == []\n\
    \    assert select_words(\"abc def ghi\", 16) == []\n    assert select_words(\"\
    abc def ghi\", 17) == []\n    assert select_words(\"abc def ghi\", 18) == []\n\
    \    assert select_words(\"abc def ghi\", 19) == []\n    assert select_words(\"\
    abc def ghi\", 20) == []\n    assert select_words(\"abc def ghi\", 21) == []\n\
    \    assert select_words(\"abc def ghi\", 22) == []\n    assert select_words(\"\
    abc def ghi\", 23) == []\n    assert select_words(\"abc def ghi\", 24) == []\n\
    \    assert select_words(\"abc def ghi\", 25) == []\n    assert select_words(\"\
    abc def ghi\", 26) == []\n    assert select_words(\"abc def ghi\", 27) == []\n\
    \    assert select_words(\"abc def ghi\", 28) == []\n    assert select_words(\"\
    abc def ghi\", 29) == []\n    assert select_words(\"abc def ghi\", 30) == []\n\
    \    assert select_words(\"abc def ghi\", 31) == []\n    assert select_words(\"\
    abc def ghi\", 32) == []\n    assert select_words(\"abc def ghi\", 33) == []\n\
    \    assert select_words(\"abc def ghi\", 34) == []\n    assert select_words(\"\
    abc def ghi\", 35) == []\n    assert select_words(\"abc def ghi\", 36) == []\n\
    \    assert select_words(\"abc def ghi\", 37) == []\n    assert select_word\n\
    def check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert\
    \ candidate('simple white space', 2) == []\n    assert candidate('Hello world',\
    \ 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert\
    \ candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c',\
    \ 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwu8fs2ip.py\", line\
    \ 60, in <module>\n    test_check()\n  File \"/tmp/tmpwu8fs2ip.py\", line 58,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpwu8fs2ip.py\", line\
    \ 49, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmpwu8fs2ip.py\", line 11, in select_words\n    assert select_words(\"\
    abc def ghi\", 2) == [\"def\", \"ghi\"]\n  File \"/tmp/tmpwu8fs2ip.py\", line\
    \ 11, in select_words\n    assert select_words(\"abc def ghi\", 2) == [\"def\"\
    , \"ghi\"]\n  File \"/tmp/tmpwu8fs2ip.py\", line 11, in select_words\n    assert\
    \ select_words(\"abc def ghi\", 2) == [\"def\", \"ghi\"]\n  [Previous line repeated\
    \ 994 more times]\nRecursionError: maximum recursion depth exceeded\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 280, in <module>\n    test_check()\n  File \"/tmp/tmpyxd40gft.py\", line 278,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 269, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 280, in <module>\n    test_check()\n  File \"/tmp/tmpyxd40gft.py\", line 278,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 269, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    assert select_words(\"abc\
    \ def ghi\", 3) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc\
    \ def ghi\", 4) == []\n    assert select_words(\"abc def ghi\", 0) == []\n   \
    \ assert select_words(\"abc def ghi\", 5) == []\n    assert select_words(\"abc\
    \ def ghi\", 6) == []\n    assert select_words(\"abc def ghi\", 7) == []\n   \
    \ assert select_words(\"abc def ghi\", 8) == []\n    assert select_words(\"abc\
    \ def ghi\", 9) == []\n    assert select_words(\"abc def ghi\", 10) == []\n  \
    \  assert select_words(\"abc def ghi\", 11) == []\n    assert select_words(\"\
    abc def ghi\", 12) == []\n    assert select_words(\"abc def ghi\", 13) == []\n\
    \    assert select_words(\"abc def ghi\", 14) == []\n    assert select_words(\"\
    abc def ghi\", 15) == []\n    assert select_words(\"abc def ghi\", 16) == []\n\
    \    assert select_words(\"abc def ghi\", 17) == []\n    assert select_words(\"\
    abc def ghi\", 18) == []\n    assert select_words(\"abc def ghi\", 19) == []\n\
    \    assert select_words(\"abc def ghi\", 20) == []\n    assert select_words(\"\
    abc def ghi\", 21) == []\n    assert select_words(\"abc def ghi\", 22) == []\n\
    \    assert select_words(\"abc def ghi\", 23) == []\n    assert select_words(\"\
    abc def ghi\", 24) == []\n    assert select_words(\"abc def ghi\", 25) == []\n\
    \    assert select_words(\"abc def ghi\", 26) == []\n    assert select_words(\"\
    abc def ghi\", 27) == []\n    assert select_words(\"abc def ghi\", 28) == []\n\
    \    assert select_words(\"abc def ghi\", 29) == []\n    assert select_words(\"\
    abc def ghi\", 30) == []\n    assert select_words(\"abc def ghi\", 31) == []\n\
    \    assert select_words(\"abc def ghi\", 32) == []\n    assert select_words(\"\
    abc def ghi\", 33) == []\n    assert select_words(\"abc def ghi\", 34) == []\n\
    \    assert select_words(\"abc def ghi\", 35) == []\n    assert select_words(\"\
    abc def ghi\", 36) == []\n    assert select_words(\"abc def ghi\", 37) == []\n\
    \    assert \ndef check(candidate):\n    assert candidate('Mary had a little lamb',\
    \ 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary',\
    \ 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpy3u2z8id.py\", line 47\n    assert \n           ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 280, in <module>\n    test_check()\n  File \"/tmp/tmpyxd40gft.py\", line 278,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 269, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 280, in <module>\n    test_check()\n  File \"/tmp/tmpyxd40gft.py\", line 278,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 269, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 280, in <module>\n    test_check()\n  File \"/tmp/tmpyxd40gft.py\", line 278,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 269, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 280, in <module>\n    test_check()\n  File \"/tmp/tmpyxd40gft.py\", line 278,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 269, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    assert select_words(\"abc\
    \ def ghi\", 3) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc\
    \ def ghi\", 0) == []\n    assert select_words(\"abc def ghi\", 5) == []\n   \
    \ assert select_words(\"abc def ghi\", 6) == []\n    assert select_words(\"abc\
    \ def ghi\", 7) == []\n    assert select_words(\"abc def ghi\", 8) == []\n   \
    \ assert select_words(\"abc def ghi\", 9) == []\n    assert select_words(\"abc\
    \ def ghi\", 10) == []\n    assert select_words(\"abc def ghi\", 11) == []\n \
    \   assert select_words(\"abc def ghi\", 12) == []\n    assert select_words(\"\
    abc def ghi\", 13) == []\n    assert select_words(\"abc def ghi\", 14) == []\n\
    \    assert select_words(\"abc def ghi\", 15) == []\n    assert select_words(\"\
    abc def ghi\", 16) == []\n    assert select_words(\"abc def ghi\", 17) == []\n\
    \    assert select_words(\"abc def ghi\", 18) == []\n    assert select_words(\"\
    abc def ghi\", 19) == []\n    assert select_words(\"abc def ghi\", 20) == []\n\
    \    assert select_words(\"abc def ghi\", 21) == []\n    assert select_words(\"\
    abc def ghi\", 22) == []\n    assert select_words(\"abc def ghi\", 23) == []\n\
    \    assert select_words(\"abc def ghi\", 24) == []\n    assert select_words(\"\
    abc def ghi\", 25) == []\n    assert select_words(\"abc def ghi\", 26) == []\n\
    \    assert select_words(\"abc def ghi\", 27) == []\n    assert select_words(\"\
    abc def ghi\", 28) == []\n    assert select_words(\"abc def ghi\", 29) == []\n\
    \    assert select_words(\"abc def ghi\", 30) == []\n    assert select_words(\"\
    abc def ghi\", 31) == []\n    assert select_words(\"abc def ghi\", 32) == []\n\
    \    assert select_words(\"abc def ghi\", 33) == []\n    assert select_words(\"\
    abc def ghi\", 34) == []\n    assert select_words(\"abc def ghi\", 35) == []\n\
    \    assert select_words(\"abc def ghi\", 36) == []\n    assert select_words(\"\
    abc def ghi\", 37) == []\n    assert select_words(\"abc def ghi\", 38) == []\n\
    \    assert \ndef check(candidate):\n    assert candidate('Mary had a little lamb',\
    \ 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary',\
    \ 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp5x258kuj.py\", line 47\n    assert \n           ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 280, in <module>\n    test_check()\n  File \"/tmp/tmpyxd40gft.py\", line 278,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 269, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    assert select_words(\"abc\
    \ def ghi\", 3) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc\
    \ def ghi\", 4) == []\n    assert select_words(\"abc def ghi\", 5) == []\n   \
    \ assert select_words(\"abc def ghi\", 6) == []\n    assert select_words(\"abc\
    \ def ghi\", 7) == []\n    assert select_words(\"abc def ghi\", 8) == []\n   \
    \ assert select_words(\"abc def ghi\", 9) == []\n    assert select_words(\"abc\
    \ def ghi\", 10) == []\n    assert select_words(\"abc def ghi\", 11) == []\n \
    \   assert select_words(\"abc def ghi\", 12) == []\n    assert select_words(\"\
    abc def ghi\", 13) == []\n    assert select_words(\"abc def ghi\", 14) == []\n\
    \    assert select_words(\"abc def ghi\", 15) == []\n    assert select_words(\"\
    abc def ghi\", 16) == []\n    assert select_words(\"abc def ghi\", 17) == []\n\
    \    assert select_words(\"abc def ghi\", 18) == []\n    assert select_words(\"\
    abc def ghi\", 19) == []\n    assert select_words(\"abc def ghi\", 20) == []\n\
    \    assert select_words(\"abc def ghi\", 21) == []\n    assert select_words(\"\
    abc def ghi\", 22) == []\n    assert select_words(\"abc def ghi\", 23) == []\n\
    \    assert select_words(\"abc def ghi\", 24) == []\n    assert select_words(\"\
    abc def ghi\", 25) == []\n    assert select_words(\"abc def ghi\", 26) == []\n\
    \    assert select_words(\"abc def ghi\", 27) == []\n    assert select_words(\"\
    abc def ghi\", 28) == []\n    assert select_words(\"abc def ghi\", 29) == []\n\
    \    assert select_words(\"abc def ghi\", 30) == []\n    assert select_words(\"\
    abc def ghi\", 31) == []\n    assert select_words(\"abc def ghi\", 32) == []\n\
    \    assert select_words(\"abc def ghi\", 33) == []\n    assert select_words(\"\
    abc def ghi\", 34) == []\n    assert select_words(\"abc def ghi\", 35) == []\n\
    \    assert select_words(\"abc def ghi\", 36) == []\n    assert select_words(\"\
    abc def ghi\", 37) == []\n    assert select_words(\"abc def ghi\", 38) == []\n\
    \    assert \ndef check(candidate):\n    assert candidate('Mary had a little lamb',\
    \ 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary',\
    \ 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp6b37nic_.py\", line 47\n    assert \n           ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 280, in <module>\n    test_check()\n  File \"/tmp/tmpyxd40gft.py\", line 278,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 269, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 280, in <module>\n    test_check()\n  File \"/tmp/tmpyxd40gft.py\", line 278,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 269, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    assert select_words(\"abc\
    \ def ghi\", 2) == [\"abc\", \"def\"]\n    assert select_words(\"abc def ghi\"\
    , 3) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\",\
    \ 4) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\",\
    \ 5) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\",\
    \ 6) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\",\
    \ 7) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\",\
    \ 8) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\",\
    \ 9) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\",\
    \ 10) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\"\
    , 11) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\"\
    , 12) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\"\
    , 13) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\"\
    , 14) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\"\
    , 15) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\"\
    , 16) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\"\
    , 17) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\"\
    , 18) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\"\
    , 19) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\"\
    , 20) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\"\
    , 21) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\"\
    , 22) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\"\
    , 23) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\"\
    , 24) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\"\
    , 25) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\"\
    , 26\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4)\
    \ == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary',\
    \ 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp3999209_.py\", line 35\n    assert select_words(\"abc\
    \ def ghi\", 26\n                       ^\nSyntaxError: '(' was never closed\n"
  stdout: ''
  timestamp: 1659977083
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    assert select_words(\"abc\
    \ def ghi\", 2) == [\"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\"\
    , 3) == []\n    assert select_words(\"abc def ghi\", 4) == []\n    assert select_words(\"\
    abc def ghi\", 5) == []\n    assert select_words(\"abc def ghi\", 6) == []\n \
    \   assert select_words(\"abc def ghi\", 7) == []\n    assert select_words(\"\
    abc def ghi\", 8) == []\n    assert select_words(\"abc def ghi\", 9) == []\n \
    \   assert select_words(\"abc def ghi\", 10) == []\n    assert select_words(\"\
    abc def ghi\", 11) == []\n    assert select_words(\"abc def ghi\", 12) == []\n\
    \    assert select_words(\"abc def ghi\", 13) == []\n    assert select_words(\"\
    abc def ghi\", 14) == []\n    assert select_words(\"abc def ghi\", 15) == []\n\
    \    assert select_words(\"abc def ghi\", 16) == []\n    assert select_words(\"\
    abc def ghi\", 17) == []\n    assert select_words(\"abc def ghi\", 18) == []\n\
    \    assert select_words(\"abc def ghi\", 19) == []\n    assert select_words(\"\
    abc def ghi\", 20) == []\n    assert select_words(\"abc def ghi\", 21) == []\n\
    \    assert select_words(\"abc def ghi\", 22) == []\n    assert select_words(\"\
    abc def ghi\", 23) == []\n    assert select_words(\"abc def ghi\", 24) == []\n\
    \    assert select_words(\"abc def ghi\", 25) == []\n    assert select_words(\"\
    abc def ghi\", 26) == []\n    assert select_words(\"abc def ghi\", 27) == []\n\
    \    assert select_words(\"abc def ghi\", 28) == []\n    assert select_words(\"\
    abc def ghi\", 29) == []\n    assert select_words(\"abc def ghi\", 30) == []\n\
    \    assert select_words(\"abc def ghi\", 31) == []\n    assert select_words(\"\
    abc def ghi\", 32) == []\n    assert select_words(\"abc def ghi\", 33) == []\n\
    \    assert select_words(\"abc def ghi\", 34) == []\n    assert select_words(\"\
    abc def ghi\", 35) == []\n    assert select_words(\"abc def ghi\", 36) == []\n\
    \    assert select_words(\"abc def ghi\", 37) == []\n    assert select_word\n\
    def check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert\
    \ candidate('simple white space', 2) == []\n    assert candidate('Hello world',\
    \ 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert\
    \ candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c',\
    \ 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwu8fs2ip.py\", line\
    \ 60, in <module>\n    test_check()\n  File \"/tmp/tmpwu8fs2ip.py\", line 58,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpwu8fs2ip.py\", line\
    \ 49, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmpwu8fs2ip.py\", line 11, in select_words\n    assert select_words(\"\
    abc def ghi\", 2) == [\"def\", \"ghi\"]\n  File \"/tmp/tmpwu8fs2ip.py\", line\
    \ 11, in select_words\n    assert select_words(\"abc def ghi\", 2) == [\"def\"\
    , \"ghi\"]\n  File \"/tmp/tmpwu8fs2ip.py\", line 11, in select_words\n    assert\
    \ select_words(\"abc def ghi\", 2) == [\"def\", \"ghi\"]\n  [Previous line repeated\
    \ 994 more times]\nRecursionError: maximum recursion depth exceeded\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 280, in <module>\n    test_check()\n  File \"/tmp/tmpyxd40gft.py\", line 278,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 269, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    assert select_words(\"abc\
    \ def ghi\", 2) == [\"abc\", \"def\"]\n    assert select_words(\"abc def ghi\"\
    , 3) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\",\
    \ 4) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\",\
    \ 5) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\",\
    \ 6) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\",\
    \ 7) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\",\
    \ 8) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\",\
    \ 9) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\",\
    \ 10) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\"\
    , 11) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\"\
    , 12) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\"\
    , 13) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\"\
    , 14) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\"\
    , 15) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\"\
    , 16) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\"\
    , 17) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\"\
    , 18) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\"\
    , 19) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\"\
    , 20) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\"\
    , 21) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\"\
    , 22) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\"\
    , 23) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\"\
    , 24) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\"\
    , 25) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\"\
    , 26\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4)\
    \ == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary',\
    \ 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp3999209_.py\", line 35\n    assert select_words(\"abc\
    \ def ghi\", 26\n                       ^\nSyntaxError: '(' was never closed\n"
  stdout: ''
  timestamp: 1659977083
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 280, in <module>\n    test_check()\n  File \"/tmp/tmpyxd40gft.py\", line 278,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 269, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 280, in <module>\n    test_check()\n  File \"/tmp/tmpyxd40gft.py\", line 278,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 269, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    assert select_words(\"abc\
    \ def ghi\", 2) == [\"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\"\
    , 3) == []\n    assert select_words(\"abc def ghi\", 4) == []\n    assert select_words(\"\
    abc def ghi\", 5) == []\n    assert select_words(\"abc def ghi\", 6) == []\n \
    \   assert select_words(\"abc def ghi\", 7) == []\n    assert select_words(\"\
    abc def ghi\", 8) == []\n    assert select_words(\"abc def ghi\", 9) == []\n \
    \   assert select_words(\"abc def ghi\", 10) == []\n    assert select_words(\"\
    abc def ghi\", 11) == []\n    assert select_words(\"abc def ghi\", 12) == []\n\
    \    assert select_words(\"abc def ghi\", 13) == []\n    assert select_words(\"\
    abc def ghi\", 14) == []\n    assert select_words(\"abc def ghi\", 15) == []\n\
    \    assert select_words(\"abc def ghi\", 16) == []\n    assert select_words(\"\
    abc def ghi\", 17) == []\n    assert select_words(\"abc def ghi\", 18) == []\n\
    \    assert select_words(\"abc def ghi\", 19) == []\n    assert select_words(\"\
    abc def ghi\", 20) == []\n    assert select_words(\"abc def ghi\", 21) == []\n\
    \    assert select_words(\"abc def ghi\", 22) == []\n    assert select_words(\"\
    abc def ghi\", 23) == []\n    assert select_words(\"abc def ghi\", 24) == []\n\
    \    assert select_words(\"abc def ghi\", 25) == []\n    assert select_words(\"\
    abc def ghi\", 26) == []\n    assert select_words(\"abc def ghi\", 27) == []\n\
    \    assert select_words(\"abc def ghi\", 28) == []\n    assert select_words(\"\
    abc def ghi\", 29) == []\n    assert select_words(\"abc def ghi\", 30) == []\n\
    \    assert select_words(\"abc def ghi\", 31) == []\n    assert select_words(\"\
    abc def ghi\", 32) == []\n    assert select_words(\"abc def ghi\", 33) == []\n\
    \    assert select_words(\"abc def ghi\", 34) == []\n    assert select_words(\"\
    abc def ghi\", 35) == []\n    assert select_words(\"abc def ghi\", 36) == []\n\
    \    assert select_words(\"abc def ghi\", 37) == []\n    assert select_word\n\
    def check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert\
    \ candidate('simple white space', 2) == []\n    assert candidate('Hello world',\
    \ 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert\
    \ candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c',\
    \ 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwu8fs2ip.py\", line\
    \ 60, in <module>\n    test_check()\n  File \"/tmp/tmpwu8fs2ip.py\", line 58,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpwu8fs2ip.py\", line\
    \ 49, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmpwu8fs2ip.py\", line 11, in select_words\n    assert select_words(\"\
    abc def ghi\", 2) == [\"def\", \"ghi\"]\n  File \"/tmp/tmpwu8fs2ip.py\", line\
    \ 11, in select_words\n    assert select_words(\"abc def ghi\", 2) == [\"def\"\
    , \"ghi\"]\n  File \"/tmp/tmpwu8fs2ip.py\", line 11, in select_words\n    assert\
    \ select_words(\"abc def ghi\", 2) == [\"def\", \"ghi\"]\n  [Previous line repeated\
    \ 994 more times]\nRecursionError: maximum recursion depth exceeded\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 280, in <module>\n    test_check()\n  File \"/tmp/tmpyxd40gft.py\", line 278,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 269, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 280, in <module>\n    test_check()\n  File \"/tmp/tmpyxd40gft.py\", line 278,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 269, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    assert select_words(\"abc\
    \ def ghi\", 3) == [\"abc\", \"def\", \"ghi\"]\n    assert select_words(\"abc\
    \ def ghi\", 0) == []\n    assert select_words(\"abc def ghi\", 5) == []\n   \
    \ assert select_words(\"abc def ghi\", 6) == []\n    assert select_words(\"abc\
    \ def ghi\", 7) == []\n    assert select_words(\"abc def ghi\", 8) == []\n   \
    \ assert select_words(\"abc def ghi\", 9) == []\n    assert select_words(\"abc\
    \ def ghi\", 10) == []\n    assert select_words(\"abc def ghi\", 11) == []\n \
    \   assert select_words(\"abc def ghi\", 12) == []\n    assert select_words(\"\
    abc def ghi\", 13) == []\n    assert select_words(\"abc def ghi\", 14) == []\n\
    \    assert select_words(\"abc def ghi\", 15) == []\n    assert select_words(\"\
    abc def ghi\", 16) == []\n    assert select_words(\"abc def ghi\", 17) == []\n\
    \    assert select_words(\"abc def ghi\", 18) == []\n    assert select_words(\"\
    abc def ghi\", 19) == []\n    assert select_words(\"abc def ghi\", 20) == []\n\
    \    assert select_words(\"abc def ghi\", 21) == []\n    assert select_words(\"\
    abc def ghi\", 22) == []\n    assert select_words(\"abc def ghi\", 23) == []\n\
    \    assert select_words(\"abc def ghi\", 24) == []\n    assert select_words(\"\
    abc def ghi\", 25) == []\n    assert select_words(\"abc def ghi\", 26) == []\n\
    \    assert select_words(\"abc def ghi\", 27) == []\n    assert select_words(\"\
    abc def ghi\", 28) == []\n    assert select_words(\"abc def ghi\", 29) == []\n\
    \    assert select_words(\"abc def ghi\", 30) == []\n    assert select_words(\"\
    abc def ghi\", 31) == []\n    assert select_words(\"abc def ghi\", 32) == []\n\
    \    assert select_words(\"abc def ghi\", 33) == []\n    assert select_words(\"\
    abc def ghi\", 34) == []\n    assert select_words(\"abc def ghi\", 35) == []\n\
    \    assert select_words(\"abc def ghi\", 36) == []\n    assert select_words(\"\
    abc def ghi\", 37) == []\n    assert select_words(\"abc def ghi\", 38) == []\n\
    \    assert \ndef check(candidate):\n    assert candidate('Mary had a little lamb',\
    \ 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary',\
    \ 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp5x258kuj.py\", line 47\n    assert \n           ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 280, in <module>\n    test_check()\n  File \"/tmp/tmpyxd40gft.py\", line 278,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 269, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    assert select_words(\"abc\
    \ def ghi\", 2) == [\"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\"\
    , 3) == []\n    assert select_words(\"abc def ghi\", 4) == []\n    assert select_words(\"\
    abc def ghi\", 5) == []\n    assert select_words(\"abc def ghi\", 6) == []\n \
    \   assert select_words(\"abc def ghi\", 7) == []\n    assert select_words(\"\
    abc def ghi\", 8) == []\n    assert select_words(\"abc def ghi\", 9) == []\n \
    \   assert select_words(\"abc def ghi\", 10) == []\n    assert select_words(\"\
    abc def ghi\", 11) == []\n    assert select_words(\"abc def ghi\", 12) == []\n\
    \    assert select_words(\"abc def ghi\", 13) == []\n    assert select_words(\"\
    abc def ghi\", 14) == []\n    assert select_words(\"abc def ghi\", 15) == []\n\
    \    assert select_words(\"abc def ghi\", 16) == []\n    assert select_words(\"\
    abc def ghi\", 17) == []\n    assert select_words(\"abc def ghi\", 18) == []\n\
    \    assert select_words(\"abc def ghi\", 19) == []\n    assert select_words(\"\
    abc def ghi\", 20) == []\n    assert select_words(\"abc def ghi\", 21) == []\n\
    \    assert select_words(\"abc def ghi\", 22) == []\n    assert select_words(\"\
    abc def ghi\", 23) == []\n    assert select_words(\"abc def ghi\", 24) == []\n\
    \    assert select_words(\"abc def ghi\", 25) == []\n    assert select_words(\"\
    abc def ghi\", 26) == []\n    assert select_words(\"abc def ghi\", 27) == []\n\
    \    assert select_words(\"abc def ghi\", 28) == []\n    assert select_words(\"\
    abc def ghi\", 29) == []\n    assert select_words(\"abc def ghi\", 30) == []\n\
    \    assert select_words(\"abc def ghi\", 31) == []\n    assert select_words(\"\
    abc def ghi\", 32) == []\n    assert select_words(\"abc def ghi\", 33) == []\n\
    \    assert select_words(\"abc def ghi\", 34) == []\n    assert select_words(\"\
    abc def ghi\", 35) == []\n    assert select_words(\"abc def ghi\", 36) == []\n\
    \    assert select_words(\"abc def ghi\", 37) == []\n    assert select_word\n\
    def check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert\
    \ candidate('simple white space', 2) == []\n    assert candidate('Hello world',\
    \ 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert\
    \ candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c',\
    \ 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwu8fs2ip.py\", line\
    \ 60, in <module>\n    test_check()\n  File \"/tmp/tmpwu8fs2ip.py\", line 58,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpwu8fs2ip.py\", line\
    \ 49, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmpwu8fs2ip.py\", line 11, in select_words\n    assert select_words(\"\
    abc def ghi\", 2) == [\"def\", \"ghi\"]\n  File \"/tmp/tmpwu8fs2ip.py\", line\
    \ 11, in select_words\n    assert select_words(\"abc def ghi\", 2) == [\"def\"\
    , \"ghi\"]\n  File \"/tmp/tmpwu8fs2ip.py\", line 11, in select_words\n    assert\
    \ select_words(\"abc def ghi\", 2) == [\"def\", \"ghi\"]\n  [Previous line repeated\
    \ 994 more times]\nRecursionError: maximum recursion depth exceeded\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    assert select_words(\"abc\
    \ def ghi\", 2) == [\"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\"\
    , 3) == []\n    assert select_words(\"abc def ghi\", 4) == []\n    assert select_words(\"\
    abc def ghi\", 5) == []\n    assert select_words(\"abc def ghi\", 6) == []\n \
    \   assert select_words(\"abc def ghi\", 7) == []\n    assert select_words(\"\
    abc def ghi\", 8) == []\n    assert select_words(\"abc def ghi\", 9) == []\n \
    \   assert select_words(\"abc def ghi\", 10) == []\n    assert select_words(\"\
    abc def ghi\", 11) == []\n    assert select_words(\"abc def ghi\", 12) == []\n\
    \    assert select_words(\"abc def ghi\", 13) == []\n    assert select_words(\"\
    abc def ghi\", 14) == []\n    assert select_words(\"abc def ghi\", 15) == []\n\
    \    assert select_words(\"abc def ghi\", 16) == []\n    assert select_words(\"\
    abc def ghi\", 17) == []\n    assert select_words(\"abc def ghi\", 18) == []\n\
    \    assert select_words(\"abc def ghi\", 19) == []\n    assert select_words(\"\
    abc def ghi\", 20) == []\n    assert select_words(\"abc def ghi\", 21) == []\n\
    \    assert select_words(\"abc def ghi\", 22) == []\n    assert select_words(\"\
    abc def ghi\", 23) == []\n    assert select_words(\"abc def ghi\", 24) == []\n\
    \    assert select_words(\"abc def ghi\", 25) == []\n    assert select_words(\"\
    abc def ghi\", 26) == []\n    assert select_words(\"abc def ghi\", 27) == []\n\
    \    assert select_words(\"abc def ghi\", 28) == []\n    assert select_words(\"\
    abc def ghi\", 29) == []\n    assert select_words(\"abc def ghi\", 30) == []\n\
    \    assert select_words(\"abc def ghi\", 31) == []\n    assert select_words(\"\
    abc def ghi\", 32) == []\n    assert select_words(\"abc def ghi\", 33) == []\n\
    \    assert select_words(\"abc def ghi\", 34) == []\n    assert select_words(\"\
    abc def ghi\", 35) == []\n    assert select_words(\"abc def ghi\", 36) == []\n\
    \    assert select_words(\"abc def ghi\", 37) == []\n    assert select_word\n\
    def check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert\
    \ candidate('simple white space', 2) == []\n    assert candidate('Hello world',\
    \ 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert\
    \ candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c',\
    \ 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwu8fs2ip.py\", line\
    \ 60, in <module>\n    test_check()\n  File \"/tmp/tmpwu8fs2ip.py\", line 58,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpwu8fs2ip.py\", line\
    \ 49, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmpwu8fs2ip.py\", line 11, in select_words\n    assert select_words(\"\
    abc def ghi\", 2) == [\"def\", \"ghi\"]\n  File \"/tmp/tmpwu8fs2ip.py\", line\
    \ 11, in select_words\n    assert select_words(\"abc def ghi\", 2) == [\"def\"\
    , \"ghi\"]\n  File \"/tmp/tmpwu8fs2ip.py\", line 11, in select_words\n    assert\
    \ select_words(\"abc def ghi\", 2) == [\"def\", \"ghi\"]\n  [Previous line repeated\
    \ 994 more times]\nRecursionError: maximum recursion depth exceeded\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 280, in <module>\n    test_check()\n  File \"/tmp/tmpyxd40gft.py\", line 278,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 269, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 280, in <module>\n    test_check()\n  File \"/tmp/tmpyxd40gft.py\", line 278,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpyxd40gft.py\", line\
    \ 269, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    assert select_words(\"abc\
    \ def ghi\", 2) == [\"def\", \"ghi\"]\n    assert select_words(\"abc def ghi\"\
    , 3) == []\n    assert select_words(\"abc def ghi\", 4) == []\n    assert select_words(\"\
    abc def ghi\", 5) == []\n    assert select_words(\"abc def ghi\", 6) == []\n \
    \   assert select_words(\"abc def ghi\", 7) == []\n    assert select_words(\"\
    abc def ghi\", 8) == []\n    assert select_words(\"abc def ghi\", 9) == []\n \
    \   assert select_words(\"abc def ghi\", 10) == []\n    assert select_words(\"\
    abc def ghi\", 11) == []\n    assert select_words(\"abc def ghi\", 12) == []\n\
    \    assert select_words(\"abc def ghi\", 13) == []\n    assert select_words(\"\
    abc def ghi\", 14) == []\n    assert select_words(\"abc def ghi\", 15) == []\n\
    \    assert select_words(\"abc def ghi\", 16) == []\n    assert select_words(\"\
    abc def ghi\", 17) == []\n    assert select_words(\"abc def ghi\", 18) == []\n\
    \    assert select_words(\"abc def ghi\", 19) == []\n    assert select_words(\"\
    abc def ghi\", 20) == []\n    assert select_words(\"abc def ghi\", 21) == []\n\
    \    assert select_words(\"abc def ghi\", 22) == []\n    assert select_words(\"\
    abc def ghi\", 23) == []\n    assert select_words(\"abc def ghi\", 24) == []\n\
    \    assert select_words(\"abc def ghi\", 25) == []\n    assert select_words(\"\
    abc def ghi\", 26) == []\n    assert select_words(\"abc def ghi\", 27) == []\n\
    \    assert select_words(\"abc def ghi\", 28) == []\n    assert select_words(\"\
    abc def ghi\", 29) == []\n    assert select_words(\"abc def ghi\", 30) == []\n\
    \    assert select_words(\"abc def ghi\", 31) == []\n    assert select_words(\"\
    abc def ghi\", 32) == []\n    assert select_words(\"abc def ghi\", 33) == []\n\
    \    assert select_words(\"abc def ghi\", 34) == []\n    assert select_words(\"\
    abc def ghi\", 35) == []\n    assert select_words(\"abc def ghi\", 36) == []\n\
    \    assert select_words(\"abc def ghi\", 37) == []\n    assert select_word\n\
    def check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert\
    \ candidate('simple white space', 2) == []\n    assert candidate('Hello world',\
    \ 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert\
    \ candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c',\
    \ 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwu8fs2ip.py\", line\
    \ 60, in <module>\n    test_check()\n  File \"/tmp/tmpwu8fs2ip.py\", line 58,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpwu8fs2ip.py\", line\
    \ 49, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmpwu8fs2ip.py\", line 11, in select_words\n    assert select_words(\"\
    abc def ghi\", 2) == [\"def\", \"ghi\"]\n  File \"/tmp/tmpwu8fs2ip.py\", line\
    \ 11, in select_words\n    assert select_words(\"abc def ghi\", 2) == [\"def\"\
    , \"ghi\"]\n  File \"/tmp/tmpwu8fs2ip.py\", line 11, in select_words\n    assert\
    \ select_words(\"abc def ghi\", 2) == [\"def\", \"ghi\"]\n  [Previous line repeated\
    \ 994 more times]\nRecursionError: maximum recursion depth exceeded\n"
  stdout: ''
  timestamp: 1659977082
