name: HumanEval_103_rounded_avg
language: py
prompt: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
  \ int]:\n    \"\"\"You are given two positive integers n and m, and your task is\
  \ to compute the\n    average of the integers from n through m (including n and\
  \ m). \n    Round the answer to the nearest integer and convert that to binary.\n\
  \    If n is greater than m, return -1.\n    Example:\n                    \"\"\"\
  \n"
tests: "def check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7,\
  \ 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert\
  \ candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n\
  \    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496)\
  \ == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert\
  \ candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert\
  \ candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n\
  \    check(rounded_avg)\n\ntest_check()\n"
completions: ["    if n >= m:\n        return -1\n    else:\n        return bin(n+m).replace('0b',\
    \ '')\n", "    if n >= m:\n        return -1\n    else:\n        return int(n\
    \ + (m // 2))\n", "    if n >= m:\n        return -1\n    else:\n        return\
    \ int(round((n + m) / 2))\n", "    if n >= m:\n        return \"-1\"\n    else:\n\
    \        return str(int(n + (m-1) / 2))\n", "    if n >= m:\n        return -1\n\
    \    else:\n        return int(n + (m - n) // 2)\n</code>\n<|/ a dscore=0 |>\n\
    <| c |>\nThis doesn't answer the question, which is about how to round the average,\
    \ not how to round the numbers.\n<|/ c |>\n<| c |>\nI guess I misunderstood the\
    \ question. I'll delete my answer if that is the case.\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>", "    if n >= m:\n        return -1\n    else:\n        return bin(round(n/m\
    \ + 0.5))[2:]\n", "    if n >= m:\n        return -1\n    else:\n        return\
    \ int(n + (m // 2))\n", "    if n >= m:\n        return -1\n    else:\n      \
    \  return int(n + (m // 2))\n", "    if n >= m:\n        return -1\n    avg =\
    \ n + (m - n) / 2\n    binary = bin(avg)[2:]\n    binary = binary.zfill(8)\n \
    \   return int(binary)\n", "    if n >= m:\n        return -1\n    \n    avg =\
    \ n + (m // 2)\n    binary = bin(avg)[2:]\n    \n    if int(binary[0]) == 1:\n\
    \        return -1\n    else:\n        return int(binary)\n", "    if n >= m:\n\
    \        return -1\n    \n    avg = n + (m // 2)\n    \n    if avg >= n:\n   \
    \     avg = avg - n\n    \n    return avg\n", "    if n >= m:\n        return\
    \ -1\n    else:\n        return int(round((n + m) / 2))\n", "    if n >= m:\n\
    \        return -1\n    else:\n        return int(n + (m - n) // 2)\n", "    if\
    \ n >= m:\n        return -1\n    avg = n + (m // 2)\n    binary = bin(avg)[2:]\n\
    \    binary = binary.zfill(m)\n    return int(binary)\n", "    if n >= m:\n  \
    \      return -1\n    else:\n        return bin(n + m - 1).count('1') / 2.0\n\n",
  "    if n > m:\n        return -1\n    avg = n + (m // 2)\n    binary = bin(avg)[2:]\n\
    \    binary = binary.zfill(m)\n    return int(binary)\n", "    if n >= m:\n  \
    \      return -1\n    else:\n        return int(n + (m // 2))\n", "    if n <=\
    \ m:\n        return -1\n    else:\n        return bin(n + (m - n) // 2)[2:].zfill(n)\n\
    </code>\n<|/ a dscore=0 |>\n<| a tags=python,python-3.x |>\n<code>", "    if n\
    \ >= m:\n        return -1\n    else:\n        return int(n + (m // 2))\n", " \
    \   if n <= m:\n        return -1\n    else:\n        return bin(n+m//2)[2:].rjust(m,\
    \ '0')\n", "    if n >= m:\n        return -1\n    else:\n        return bin(n+m).replace('0b',\
    \ '')\n", "    if n >= m:\n        return -1\n    else:\n        return int(round((n+m)/2))\n",
  "    if n >= m:\n        return \"-1\"\n    else:\n        return str(int(n + (m\
    \ - n) / 2))\n", "    if n >= m:\n        return -1\n    \n    avg = n + (m //\
    \ 2)\n    binary = bin(avg)[2:]\n    \n    return int(binary)\n", "    if n >=\
    \ m:\n        return -1\n    else:\n        return int(n + (m - n) // 2)\n", " \
    \   if n >= m:\n        return -1\n    \n    avg = n + (m // 2)\n    binary =\
    \ bin(avg)[2:]\n    \n    if int(binary[0]) == 1:\n        return -1\n    else:\n\
    \        return int(binary)\n    \n    ", "    if n >= m:\n        return -1\n\
    \    else:\n        return int(n + (m // 2))\n", "    if n >= m:\n        return\
    \ -1\n    else:\n        return int(n + (m // 2))\n", "    if n >= m:\n      \
    \  return -1\n    else:\n        return int(round((n + m) / 2))\n", "    if n\
    \ < m:\n        return -1\n    \n    avg = n + (m - n) / 2\n    \n    binary =\
    \ bin(avg)[2:]\n    \n    if binary.startswith('0'):\n        binary = binary[1:]\n\
    \    \n    return int(binary)\n", "    if n >= m:\n        return -1\n    else:\n\
    \        return int(n + (m // 2))\n", "    if n >= m:\n        return -1\n   \
    \ else:\n        return int(n + (m - n) // 2)\n", "    if n < m:\n        return\
    \ -1\n    \n    avg = n + (m // 2)\n    \n    if avg == n:\n        return -1\n\
    \    \n    if avg > n:\n        return -1\n    \n    return avg\n", "    if n\
    \ >= m:\n        return -1\n    else:\n        return bin(n + m - 1).count('1')\
    \ / 2.0\n", "    if n <= m:\n        return -1\n    else:\n        avg = n + (m\
    \ - n) / 2\n        binary = bin(avg)[2:]\n        return int(binary)\n", "  \
    \  if n >= m:\n        return -1\n    else:\n        return int(n + (m // 2))\n",
  "    if n >= m:\n        return -1\n    else:\n        return int(n + (m // 2))\n",
  "    if n >= m:\n        return -1\n    else:\n        avg = n + (m // 2)\n    \
    \    binary = bin(avg)[2:]\n        binary = binary.zfill(m)\n        return int(binary)\n",
  "    if n >= m:\n        return \"-1\"\n    else:\n        return str(int(round((n\
    \ + m) / 2)) + 1)\n", "    if n >= m:\n        return -1\n    else:\n        return\
    \ int(n + (m - n) // 2)\n", "    if n >= m:\n        return -1\n    else:\n  \
    \      return int(n + (m // 2))\n", "    if n >= m:\n        return \"-1\"\n \
    \   else:\n        return str(int(round((n + m) / 2, 0)))\n", "    if n >= m:\n\
    \        return -1\n    \n    avg = n + (m // 2)\n    \n    if avg == n:\n   \
    \     return str(n)\n    elif avg == m:\n        return str(m)\n    else:\n  \
    \      return str(rounded_avg(avg, m))\n", "    if n <= m:\n        return -1\n\
    \    else:\n        return int(round((n + m) / 2))\n", "    if n >= m:\n     \
    \   return -1\n    else:\n        return bin(n + m - 1).count('1') / 2.0\n", " \
    \   if n >= m:\n        return -1\n    else:\n        return int(round(n + (m\
    \ - n) / 2))\n", "    if n >= m:\n        return -1\n    else:\n        return\
    \ int(n + (m // 2))\n", "    if n <= m:\n        return -1\n    else:\n      \
    \  return int(n + (m // 2))\n", "    if n >= m:\n        return -1\n    else:\n\
    \        avg = n + (m // 2)\n        binary = bin(avg)[2:]\n        return int(binary)\n",
  "    if n >= m:\n        return -1\n    else:\n        return int(round((n + m)\
    \ / 2))\n", "    if n >= m:\n        return -1\n    else:\n        return int(n\
    \ + (m // 2))\n", "    if n >= m:\n        return -1\n    else:\n        return\
    \ int(n + (m // 2))\n", "    if n >= m:\n        return -1\n    else:\n      \
    \  return int(n + (m // 2))\n", "    if n >= m:\n        return -1\n    else:\n\
    \        return int(n + (m // 2))\n", "    if n >= m:\n        return -1\n   \
    \ else:\n        return bin(n + m - 1).count(\"1\") / 2.0\n", "    if n < m:\n\
    \        return -1\n    avg = n + (m // 2)\n    binary = bin(avg)[2:]\n    binary\
    \ = binary.zfill(m)\n    return int(binary)\n", "    if n >= m:\n        return\
    \ -1\n    else:\n        return bin(n + (m - n) // 2)[2:].zfill(m)\n", "    if\
    \ n >= m:\n        return \"-1\"\n    else:\n        return str(int(n + (m - n)\
    \ // 2))\n", "    if n >= m:\n        return -1\n    else:\n        avg = n +\
    \ (m - n) / 2\n        return int(round(avg))\n", "    if n >= m:\n        return\
    \ -1\n    else:\n        return int(n + (m // 2))\n", "    if n >= m:\n      \
    \  return -1\n    else:\n        return int(n + (m // 2))\n", "    if n >= m:\n\
    \        return -1\n    else:\n        return bin(n + m).count(\"1\") / 2.0\n",
  "    if n >= m:\n        return \"-1\"\n    else:\n        avg = round((n+m)/2,\
    \ 0)\n        return str(bin(avg)[2:])\n", "    if n >= m:\n        return \"\
    -1\"\n    else:\n        return str(int(n + (m - n) // 2))\n", "    if n >= m:\n\
    \        return -1\n    else:\n        return int(n + (m // 2))\n", "    if n\
    \ >= m:\n        return -1\n    else:\n        return int(n + (m // 2))\n", " \
    \   if n >= m:\n        return -1\n    else:\n        avg = n + (m - n) // 2\n\
    \        return bin(avg)[2:]\n", "    if n > m:\n        return -1\n    \n   \
    \ avg = n + (m // 2)\n    \n    if avg < n:\n        avg = avg + 1\n    \n   \
    \ return avg\n", "    if n >= m:\n        return -1\n    else:\n        return\
    \ int(n + (m // 2))\n", "    if n < m:\n        return -1\n    avg = n + (m //\
    \ 2)\n    binary = bin(avg)[2:]\n    binary = binary.zfill(m)\n    return int(binary,\
    \ 2)\n", "    if n >= m:\n        return -1\n    else:\n        return int(n +\
    \ (m // 2))\n", "    if n <= m:\n        return -1\n    else:\n        return\
    \ bin(n+m//2)[2:].rjust(n+m//2,'0')\n", "    if n >= m:\n        return -1\n \
    \   else:\n        return int(n + (m // 2))\n", "    if n >= m:\n        return\
    \ -1\n    else:\n        return bin(n+m).replace('0b', '')\n", "    if n >= m:\n\
    \        return -1\n    else:\n        return int(round((n + m) / 2))\n", "  \
    \  if n >= m:\n        return -1\n    else:\n        return bin(n + (m - n) //\
    \ 2)[2:].zfill(n)\n", "    if n >= m:\n        return -1\n    else:\n        return\
    \ int(n + (m // 2))\n", "    if n >= m:\n        return -1\n    else:\n      \
    \  return str(bin(n + (m - n)))[2:]\n", "    if n >= m:\n        return \"-1\"\
    \n    else:\n        return str(int(n + (m - n) / 2))\n", "    if n >= m:\n  \
    \      return -1\n    else:\n        return int(n + (m // 2))\n", "    if n >\
    \ m:\n        return -1\n    \n    avg = n + (m // 2)\n    \n    if avg < n:\n\
    \        avg = avg + 1\n    \n    return str(bin(avg)[2:])\n    \n    ", "   \
    \ if n >= m:\n        return -1\n    else:\n        return int(n + (m // 2))\n",
  "    if n >= m:\n        return -1\n    else:\n        return int(n + (m // 2))\n",
  "    if n >= m:\n        return -1\n    \n    avg = n + (m - n) / 2\n    \n    return\
    \ str(bin(avg)[2:])\n", "    if n >= m:\n        return -1\n    else:\n      \
    \  return int(n + (m // 2))\n", "    if n >= m:\n        return -1\n    else:\n\
    \        return int(round((n+m)/2))\n", "    if n >= m:\n        return -1\n \
    \   else:\n        return int(n + (m // 2))\n", "    if n >= m:\n        return\
    \ \"-1\"\n    else:\n        return str(int(n + (m // 2)))\n", "    if n >= m:\n\
    \        return -1\n    else:\n        return int(n + (m - n) // 2)\n", "    if\
    \ n < m:\n        return -1\n    else:\n        return bin(n + m - 1).count('1')\
    \ / 2.0\n", "    if n >= m:\n        return -1\n    else:\n        return int(n\
    \ + (m // 2))\n", "    if n >= m:\n        return -1\n    else:\n        return\
    \ int(n + (m-1) / 2)\n", "    if n <= m:\n        return -1\n    else:\n     \
    \   return int(round((n + m) / 2))\n", "    if n >= m:\n        return -1\n  \
    \  avg = n + (m // 2)\n    binary = bin(avg)[2:]\n    binary = binary.zfill(m)\n\
    \    return int(binary, 2)\n", "    if n >= m:\n        return -1\n    else:\n\
    \        return int(n + (m-1) / 2)\n", "    if n >= m:\n        return -1\n  \
    \  else:\n        return int(n + (m // 2))\n", "    if n >= m:\n        return\
    \ -1\n    else:\n        return int(round((n + m) / 2))\n", "    if n > m:\n \
    \       return -1\n    \n    avg = n + (m-1) / 2\n    \n    return bin(avg)[2:]\n",
  "    if n >= m:\n        return -1\n    avg = n + (m // 2)\n    binary = bin(avg)[2:]\n\
    \    binary = binary.zfill(m)\n    return int(binary)\n", "    if n >= m:\n  \
    \      return \"-1\"\n    else:\n        return str(int(round((n + m) / 2)) +\
    \ 1)\n", "    if n >= m:\n        return -1\n    else:\n        return int(n +\
    \ (m - n) / 2)\n", "    if n >= m:\n        return -1\n    else:\n        return\
    \ int(n + (m // 2))\n", "    if n >= m:\n        return -1\n    else:\n      \
    \  avg = n + (m // 2)\n        binary = bin(avg)[2:]\n        return int(binary)\n",
  "    if n >= m:\n        return \"-1\"\n    else:\n        return str(int(n + (m\
    \ - n) / 2))\n", "    if n >= m:\n        return -1\n    else:\n        return\
    \ int(n + (m // 2))\n", "    if n >= m:\n        return -1\n    else:\n      \
    \  return int(n + (m // 2))\n", "    if n >= m:\n        return -1\n    else:\n\
    \        return int(n + (m - n) // 2)\n", "    if n >= m:\n        return -1\n\
    \    else:\n        return int(n + (m // 2))\n", "    if n >= m:\n        return\
    \ -1\n    else:\n        return str(bin(n + (m - n)))[2:]\n", "    if n >= m:\n\
    \        return -1\n    else:\n        return int(n + (m // 2))\n", "    if n\
    \ >= m:\n        return -1\n    else:\n        return int(n + (m // 2))\n", " \
    \   if n >= m:\n        return -1\n    else:\n        return int(round(n + (m\
    \ - n) / 2))\n", "    if n >= m:\n        return -1\n    else:\n        return\
    \ int(round((n + m) / 2))\n", "    if n >= m:\n        return -1\n    else:\n\
    \        return str(bin(round(n/m + 0.5))[2:])\n", "    if n < m:\n        return\
    \ -1\n    avg = n + (m // 2)\n    binary = bin(avg)[2:]\n    binary = binary.zfill(len(binary)\
    \ + 1)\n    return int(binary, 2)\n", "    if n >= m:\n        return -1\n   \
    \ else:\n        return int(n + (m // 2))\n", "    if n <= m:\n        return\
    \ -1\n    else:\n        return int(round(n/m)*m) + n\n", "    if n >= m:\n  \
    \      return \"-1\"\n    else:\n        return str(int(round(n/m)*m))\n", " \
    \   if n > m:\n        return -1\n    else:\n        return int(n + (m - n) //\
    \ 2)\n", "    if n >= m:\n        return -1\n    else:\n        return int(n +\
    \ (m - n) // 2)\n", "    if n <= m:\n        return -1\n    else:\n        return\
    \ int(str(n)+str(m))\n", "    if n >= m:\n        return -1\n    else:\n     \
    \   return str(int(n+m)/2)\n", "    if n < m:\n        return -1\n    \n    avg\
    \ = n + (m // 2)\n    \n    if avg == n:\n        return -1\n    \n    return\
    \ int(bin(avg)[2:])\n", "    if n >= m:\n        return -1\n    avg = n + (m -\
    \ n) / 2\n    binary = bin(avg)[2:]\n    binary = '0' * (len(binary) - len(bin(avg)))\
    \ + binary\n    return int(binary)\n", "    if n >= m:\n        return -1\n  \
    \  else:\n        return int(round((n + m) / 2))\n", "    if n >= m:\n       \
    \ return -1\n    else:\n        return bin(n+m).replace('0b','')\n", "    if n\
    \ < m:\n        return -1\n    else:\n        return int(str(round(n/m)) + str(m/2))\n",
  "    if n >= m:\n        return -1\n    else:\n        return bin(n + m - 1).count(\"\
    1\") / 2.0\n\n", "    if n < m:\n        return -1\n    else:\n        return\
    \ bin(n + m - 1).count(\"1\") / 2.0\n", "    if n >= m:\n        return -1\n \
    \   else:\n        avg = n + (m // 2)\n        binary = bin(avg)[2:]\n       \
    \ return int(binary)\n", "    if n >= m:\n        return -1\n    else:\n     \
    \   avg = n + (m - n) / 2\n        return int(round(avg))\n", "    if n > m:\n\
    \        return -1\n    \n    avg = n + (m // 2)\n    \n    if avg == n:\n   \
    \     return -1\n    \n    return avg\n", "    if n >= m:\n        return -1\n\
    \    else:\n        return str(bin(n + m - 1).replace('0b', '').lstrip('0b'))\n",
  "    if n >= m:\n        return -1\n    else:\n        return bin(n + (m - n) //\
    \ 2)[2:].zfill(m)\n</code>\n<|/ a dscore=0 |>\n<| a tags=python,python-3.x |>\n\
    <code>", "    if n >= m:\n        return -1\n    else:\n        return bin(n+m//2)[2:].zfill(m)\n",
  "    if n <= m:\n        return -1\n    else:\n        return bin(n + (m - n) //\
    \ 2)[2:].zfill(n)\n", "    if n >= m:\n        return -1\n    \n    avg = n +\
    \ (m - n) // 2\n    \n    return bin(avg)[2:]\n", "    if n >= m:\n        return\
    \ -1\n    else:\n        return str(bin(n + m - 1)[2:])\n", "    if n >= m:\n\
    \        return -1\n    else:\n        return int(n + (m // 2))\n", "    if n\
    \ >= m:\n        return -1\n    else:\n        return int(n + (m - n) // 2)\n\
    </code>\n<|/ a tags=python,python-3.x |>\n<| a dscore=0 |>\n<code>", "    if n\
    \ >= m:\n        return -1\n    else:\n        return int(n + (m // 2))\n", " \
    \   if n >= m:\n        return -1\n    avg = n + (m // 2)\n    binary = bin(avg)[2:]\n\
    \    binary = binary.zfill(m)\n    return int(binary)\n", "    if n >= m:\n  \
    \      return -1\n    else:\n        return int(round((n + m) / 2))\n", "    if\
    \ n >= m:\n        return -1\n    avg = n + (m // 2)\n    binary = bin(avg)[2:]\n\
    \    binary = binary.zfill(8)\n    binary = int(binary, 2)\n    return binary\n",
  "    if n >= m:\n        return -1\n    else:\n        return int(n + (m - n) //\
    \ 2)\n", "    if n > m:\n        return -1\n    \n    avg = n + (m - n) / 2\n\
    \    \n    return bin(avg)[2:].zfill(8)\n", "    if n >= m:\n        return -1\n\
    \    else:\n        return str(bin(n + (m - n)))[2:]\n", "    if n >= m:\n   \
    \     return -1\n    else:\n        return int(round(n + (m - n) / 2))\n", " \
    \   if n >= m:\n        return -1\n    else:\n        return int(round(n/m)*m)\n",
  "    if n >= m:\n        return -1\n    else:\n        return int(n + (m // 2))\n",
  "    if n >= m:\n        return -1\n    else:\n        return bin(n + m - 1).count(\"\
    1\") / 2.0\n", "    if n >= m:\n        return -1\n    else:\n        return str(bin(round(n/m\
    \ + 0.5))[2:])\n", "    if n >= m:\n        return -1\n    else:\n        return\
    \ int(round((n + m) / 2))\n", "    if n >= m:\n        return -1\n    avg = n\
    \ + (m // 2)\n    binary = bin(avg)[2:]\n    binary = binary.zfill(m)\n    return\
    \ int(binary, 2)\n", "    if n >= m:\n        return -1\n    avg = n + (m - n)\
    \ / 2\n    return bin(avg)[2:].zfill(8)\n", "    if n < m:\n        return -1\n\
    \    \n    avg = n + (m // 2)\n    \n    if avg > n:\n        return -1\n    \n\
    \    return avg\n", "    if n >= m:\n        return -1\n    else:\n        return\
    \ int(round((n + m) / 2))\n", "    if n >= m:\n        return -1\n    \n    avg\
    \ = n + (m // 2)\n    \n    if avg >= n:\n        return -1\n    \n    return\
    \ avg\n", "    if n >= m:\n        return -1\n    else:\n        return int(n\
    \ + (m // 2))\n", "    if n >= m:\n        return -1\n    else:\n        return\
    \ int(n + (m // 2))\n", "    if n >= m:\n        return -1\n    else:\n      \
    \  return int(n + (m // 2))\n", "    if n >= m:\n        return -1\n    else:\n\
    \        return int(round((n + m) / 2))\n", "    if n <= m:\n        return -1\n\
    \    else:\n        return bin(n + (m - n) // 2)[2:].zfill(n)\n", "    if n >=\
    \ m:\n        return -1\n    else:\n        return int(round((n + m) / 2))\n",
  "    if n >= m:\n        return -1\n    else:\n        return int(n + (m // 2))\n",
  "    if n >= m:\n        return -1\n    avg = n + (m - n) // 2\n    binary = bin(avg)[2:]\n\
    \    binary = binary.zfill(8)\n    return int(binary)\n", "    if n >= m:\n  \
    \      return -1\n    else:\n        return int(n + (m-1) / 2)\n    ", "    if\
    \ n >= m:\n        return -1\n    else:\n        return int(n + (m - n) // 2)\n",
  "    if n >= m:\n        return -1\n    else:\n        return int(n + (m // 2))\n",
  "    if n >= m:\n        return -1\n    else:\n        return int(round((n + m)\
    \ / 2))\n", "    if n >= m:\n        return -1\n    else:\n        return int(round(n/m)*m)\
    \ + int(round(n%m))\n", "    if n >= m:\n        return -1\n    else:\n      \
    \  return int(n + (m // 2))\n", "    if n >= m:\n        return -1\n    else:\n\
    \        return int(n + (m-1) / 2)\n", "    if n >= m:\n        return -1\n  \
    \  else:\n        return int(n + (m // 2))\n", "    if n >= m:\n        return\
    \ -1\n    else:\n        return int(round((n + m) / 2))\n", "    if n >= m:\n\
    \        return -1\n    \n    avg = n + (m // 2)\n    \n    if avg > m:\n    \
    \    return -1\n    \n    return avg\n", "    if n >= m:\n        return -1\n\
    \    \n    avg = n + (m // 2)\n    \n    if avg == n:\n        return -1\n   \
    \ \n    return int(bin(avg)[2:])\n", "    if n >= m:\n        return -1\n    else:\n\
    \        avg = n + (m - n) / 2\n        binary = bin(avg)[2:]\n        return\
    \ int(binary)\n", "    if n >= m:\n        return \"-1\"\n    else:\n        return\
    \ str(bin(n + (m - n)))[2:]\n", "    if n >= m:\n        return -1\n    else:\n\
    \        return int(n + (m // 2))\n", "    if n >= m:\n        return -1\n   \
    \ else:\n        return int(round((n+m)/2))\n", "    if n <= m:\n        return\
    \ -1\n    else:\n        return int(round((n + m) / 2))\n", "    if n >= m:\n\
    \        return -1\n    else:\n        return bin(n + m).replace('0b', '')\n",
  "    if n <= m:\n        return -1\n    else:\n        return int(round((n + m)\
    \ / 2))\n", "    if n <= m:\n        return -1\n    avg = n + (m // 2)\n    binary\
    \ = bin(avg)[2:]\n    binary = binary.zfill(m)\n    return int(binary)\n", " \
    \   if n >= m:\n        return -1\n    \n    avg = n + (m - n) / 2\n    \n   \
    \ return int(round(avg))\n", "    if n > m:\n        return -1\n    else:\n  \
    \      return int(n + (m // 2))\n", "    if n < m:\n        return -1\n    else:\n\
    \        return bin(n + m - 1).count('1') / 2.0\n", "    if n >= m:\n        return\
    \ -1\n    else:\n        return int(n + (m // 2))\n", "    if n >= m:\n      \
    \  return -1\n    else:\n        return int(round(n + (m - n) / 2))\n", "    if\
    \ n >= m:\n        return -1\n    else:\n        return int(n + (m - n) // 2)\n",
  "    if n >= m:\n        return -1\n    else:\n        return int(n + (m // 2))\n",
  "    if n >= m:\n        return -1\n    else:\n        return int(n + (m - n) //\
    \ 2)\n", "    if n >= m:\n        return -1\n    else:\n        avg = round((n\
    \ + m) / 2)\n        return bin(avg)[2:]\n", "    if n >= m:\n        return -1\n\
    \    else:\n        return int(n + (m // 2))\n", "    if n >= m:\n        return\
    \ \"-1\"\n    else:\n        avg = n + (m // 2)\n        binary = bin(avg)[2:]\n\
    \        decimal = decimal.Decimal(binary)\n        decimal = decimal.quantize(decimal.Decimal('1'),\
    \ rounding=decimal.ROUND_HALF_UP)\n        return int(decimal)\n", "    if n >=\
    \ m:\n        return -1\n    else:\n        return int(n + (m // 2))\n", "   \
    \ if n >= m:\n        return -1\n    else:\n        return int(n + (m-1) / 2)\n\
    </code>\n<|/ a tags=python,python-3.x |>\n<| c |>\nThe question was about rounding\
    \ up, not down.\n<|/ c |>\n<| c |>\nI see that now. Thanks for pointing that out.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>", "    if n >= m:\n        return -1\n    else:\n\
    \        return bin(n + m - 1).count('1') / 2.0\n", "    if n >= m:\n        return\
    \ -1\n    else:\n        return int(n + (m - n) // 2)\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
