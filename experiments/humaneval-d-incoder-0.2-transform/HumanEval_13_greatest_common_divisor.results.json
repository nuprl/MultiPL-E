{
  "language": "d",
  "name": "HumanEval_13_greatest_common_divisor",
  "results": [
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n    long gcd;\n    \n    if (a == 0)\n        return b;\n    if (b == 0)\n        return a;\n    \n    gcd = __gcd(a, b);\n    \n    if (gcd == 0)\n        return a;\n    \n    return gcd;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpx2eex53g.d(20): Error: undefined identifier `__gcd`, did you mean variable `gcd`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx2eex53g.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163165
    },
    {
      "exit_code": -8,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n\tlong gcd;\n\t\n\tgcd = 1;\n\twhile (b != 0) {\n\t\tif (a > b) {\n\t\t\ta %= b;\n\t\t} else {\n\t\t\tb %= a;\n\t\t}\n\t\tgcd *= b;\n\t}\n\treturn gcd;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163165
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n    long gcd = 1;\n    long t;\n    \n    while (b != 0) {\n        t = b;\n        b = a % t;\n        a = t;\n        gcd = gcd > a ? gcd : a;\n    }\n    \n    return gcd;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp0e9opkxg.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x427d8d]\n??:? void tmp0e9opkxg.__unittest_L25_C1() [0x427a89]\n??:? void tmp0e9opkxg.__modtest() [0x427b10]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bab3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a946]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fad9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa65]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a91d]\n??:? runModuleUnitTests [0x42b889]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281dc]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163165
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n    long gcd;\n    \n    if (a == 0) return b;\n    if (b == 0) return a;\n    \n    gcd = __gcd(a, b);\n    if (gcd == 0) return a;\n    return gcd;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpsyh415vn.d(18): Error: undefined identifier `__gcd`, did you mean variable `gcd`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsyh415vn.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163165
    },
    {
      "exit_code": -8,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n    long gcd;\n    \n    if (a < b) {\n        long t = a;\n        a = b;\n        b = t;\n    }\n    \n    gcd = 1;\n    while (a != 0) {\n        long r = a % b;\n        a = b;\n        b = r;\n    }\n    \n    return gcd;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163165
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n    long long gcd = 1;\n    long long remainder;\n    \n    while (b != 0) {\n        remainder = b % a;\n        gcd = std.math.max(gcd, remainder);\n        b = remainder;\n    }\n    return gcd;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnft0sz_c.d(13): Error: use `long` for a 64 bit integer instead of `long long`\n/tmp/tmpnft0sz_c.d(14): Error: use `long` for a 64 bit integer instead of `long long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnft0sz_c.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163165
    },
    {
      "exit_code": -8,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n\tlong gcd;\n\t\n\tgcd = 1;\n\twhile (a != 0) {\n\t\tlong r = a % b;\n\t\ta = b;\n\t\tb = r;\n\t\tgcd = (gcd > b) ? gcd : b;\n\t}\n\treturn gcd;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163165
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n\tlong gcd;\n\t\n\tgcd = 1;\n\twhile (b > 0) {\n\t\tlong t = b;\n\t\tb = a % b;\n\t\ta = t;\n\t}\n\t\n\treturn gcd;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpy5fncrmm.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x427d7d]\n??:? void tmpy5fncrmm.__unittest_L24_C1() [0x427a9f]\n??:? void tmpy5fncrmm.__modtest() [0x427b00]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baa3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a936]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fac9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff78]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa55]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a90d]\n??:? runModuleUnitTests [0x42b879]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281cc]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163165
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n    long gcd;\n    \n    if (a < b) {\n        long tmp = a;\n        a = b;\n        b = tmp;\n    }\n    \n    gcd = 1;\n    \n    while (a != 0) {\n        if (a > b) {\n            gcd = b;\n            b = a % b;\n            a = b;\n        } else {\n            gcd = a;\n            a = a % b;\n        }\n    }\n    \n    return gcd;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp2hq2v5h9.d(43): unittest failure\n----------------\n??:? _d_unittestp [0x427da5]\n??:? void tmp2hq2v5h9.__unittest_L36_C1() [0x427b13]\n??:? void tmp2hq2v5h9.__modtest() [0x427b28]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bacb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a95e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42faf1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffa0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa7d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a935]\n??:? runModuleUnitTests [0x42b8a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281f4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163165
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n    long gcd;\n    \n    gcd = __gcd(a, b);\n    if (gcd == 0) return a;\n    return gcd;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpr6elkc45.d(15): Error: undefined identifier `__gcd`, did you mean variable `gcd`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr6elkc45.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163165
    },
    {
      "exit_code": -8,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n    long gcd;\n    \n    if (a < b) {\n        long tmp = a;\n        a = b;\n        b = tmp;\n    }\n    \n    gcd = 1;\n    \n    while (a != 0) {\n        if (a > b) {\n            a %= b;\n            gcd = b * gcd;\n        }\n        else {\n            b %= a;\n            gcd = a * gcd;\n        }\n    }\n    \n    return gcd;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163165
    },
    {
      "exit_code": -8,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n\tlong gcd;\n\t\n\tgcd = a;\n\twhile (a != 0) {\n\t\tif (a > b) {\n\t\t\ta %= b;\n\t\t} else {\n\t\t\tb %= a;\n\t\t}\n\t\tgcd = b;\n\t}\n\treturn gcd;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163165
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n    long gcd;\n    \n    if (b == 0)\n        return a;\n    \n    gcd = __gcd(a, b);\n    \n    if (gcd > a)\n        return gcd;\n    \n    return __gcd(b, a);\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpa2jymcqa.d(18): Error: undefined identifier `__gcd`, did you mean variable `gcd`?\n/tmp/tmpa2jymcqa.d(23): Error: undefined identifier `__gcd`, did you mean variable `gcd`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa2jymcqa.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163165
    },
    {
      "exit_code": 0,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n\tlong gcd;\n\t\n\twhile (b != 0)\n\t{\n\t\tgcd = b;\n\t\tb = a % b;\n\t\ta = gcd;\n\t}\n\treturn a;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163165
    },
    {
      "exit_code": -8,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n    long gcd;\n    \n    if (a < b) {\n        long tmp = a;\n        a = b;\n        b = tmp;\n    }\n    \n    gcd = 1;\n    while (a != 0) {\n        if (a > b) {\n            a %= b;\n        } else {\n            b %= a;\n        }\n        gcd *= b;\n    }\n    return gcd;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163165
    },
    {
      "exit_code": -1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n\tlong gcd;\n\t\n\tgcd = 1;\n\twhile (a != 0) {\n\t\tlong r = a % b;\n\t\tif (r != 0) {\n\t\t\tgcd = b;\n\t\t\tb = r;\n\t\t}\n\t\ta = a / b;\n\t}\n\treturn gcd;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "Timeout",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163934
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n    long gcd;\n    \n    if (b == 0)\n        return a;\n    \n    if (a < b)\n        std.swap(a, b);\n    \n    for (;;) {\n        gcd = 0;\n        \n        while (b != 0) {\n            long temp = b;\n            b = a % b;\n            a = temp;\n            gcd = std.gcd(gcd, b);\n        }\n        \n        if (a == 0)\n            return gcd;\n        \n        if (a > 0)\n            std.swap(a, b);\n    }\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpvg4tr88g.d(19): Error: undefined identifier `swap` in package `std`\n/tmp/tmpvg4tr88g.d(28): Error: undefined identifier `gcd` in package `std`\n/tmp/tmpvg4tr88g.d(35): Error: undefined identifier `swap` in package `std`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvg4tr88g.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163919
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n\tlong gcd;\n\t\n\tgcd = __gcd(a, b);\n\tif (gcd == 0) return a;\n\treturn gcd;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpykb05vro.d(15): Error: undefined identifier `__gcd`, did you mean variable `gcd`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpykb05vro.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163919
    },
    {
      "exit_code": 0,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n\tlong gcd;\n\t\n\tfor (;;) {\n\t\tif (a > b) {\n\t\t\ta %= b;\n\t\t\tif (a == 0) return b;\n\t\t\tb %= a;\n\t\t\tif (b == 0) return a;\n\t\t}\n\t\telse {\n\t\t\tb %= a;\n\t\t\tif (b == 0) return a;\n\t\t\ta %= b;\n\t\t\tif (a == 0) return b;\n\t\t}\n\t\tgcd = a % b;\n\t\tif (gcd == 0) return b;\n\t\ta = b;\n\t\tb = gcd;\n\t}\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163919
    },
    {
      "exit_code": -8,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n    long gcd;\n    \n    if (a < b) {\n        long t = a;\n        a = b;\n        b = t;\n    }\n    \n    gcd = 1;\n    \n    while (a != 0) {\n        long r = a % b;\n        a = b;\n        b = r;\n        gcd = (gcd > r) ? gcd : r;\n    }\n    \n    return gcd;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n    long gcd;\n    \n    if (b == 0)\n        return a;\n    \n    gcd = __gcd(a, b);\n    \n    if (gcd == 0)\n        return b;\n    \n    return gcd;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpljmqvwue.d(18): Error: undefined identifier `__gcd`, did you mean variable `gcd`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpljmqvwue.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163919
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n\tlong gcd;\n\t\n\tgcd = __gcd(a, b);\n\t\n\tif (gcd == 0) \n\t\treturn a;\n\t\n\treturn gcd;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpgip4xtwd.d(15): Error: undefined identifier `__gcd`, did you mean variable `gcd`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgip4xtwd.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163919
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n\tlong gcd;\n\t\n\tgcd = __gcd(a, b);\n\tif (gcd == 0) return a;\n\treturn gcd;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpykb05vro.d(15): Error: undefined identifier `__gcd`, did you mean variable `gcd`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpykb05vro.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163919
    },
    {
      "exit_code": 0,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n\tlong gcd;\n\t\n\tgcd = a % b;\n\twhile (gcd != 0)\n\t{\n\t\ta = b;\n\t\tb = gcd;\n\t\tgcd = a % b;\n\t}\n\treturn b;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163919
    },
    {
      "exit_code": -1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n\tlong gcd = 1;\n\twhile (a != 0) {\n\t\tlong r = a % b;\n\t\tif (r != 0) {\n\t\t\tgcd = b;\n\t\t\tb = r;\n\t\t} else {\n\t\t\ta = b;\n\t\t}\n\t}\n\treturn gcd;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "Timeout",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163934
    },
    {
      "exit_code": -1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n    long gcd;\n    \n    if (a < b) {\n        long temp = a;\n        a = b;\n        b = temp;\n    }\n    \n    gcd = 1;\n    \n    while (a != 0) {\n        if (a % b == 0)\n            gcd = b;\n        b = b % a;\n        a = a / b;\n    }\n    \n    return gcd;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "Timeout",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163934
    },
    {
      "exit_code": -1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n\tlong gcd;\n\t\n\tgcd = a;\n\twhile (a != 0) {\n\t\tlong r = a % b;\n\t\tif (r != 0) {\n\t\t\tgcd = b;\n\t\t\tb = r;\n\t\t}\n\t\ta = b;\n\t}\n\treturn gcd;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "Timeout",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163934
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n    long gcd;\n    \n    if (a < b) {\n        long tmp = a;\n        a = b;\n        b = tmp;\n    }\n    \n    gcd = 1;\n    \n    while (a != 0) {\n        if (a % b == 0)\n            gcd = b;\n        a = a / b;\n    }\n    \n    return gcd;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpcnincgqp.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x427d95]\n??:? void tmpcnincgqp.__unittest_L31_C1() [0x427ab3]\n??:? void tmpcnincgqp.__modtest() [0x427b14]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42babb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a94e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fae1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff90]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa6d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a925]\n??:? runModuleUnitTests [0x42b891]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281e4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 0,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n\tlong gcd;\n\t\n\tgcd = a % b;\n\twhile (gcd != 0)\n\t{\n\t\ta = b;\n\t\tb = gcd;\n\t\tgcd = a % b;\n\t}\n\treturn b;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163919
    },
    {
      "exit_code": 0,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n\tlong gcd;\n\t\n\tgcd = 1;\n\twhile (b > 0) {\n\t\tlong r = a % b;\n\t\tif (r == 0) {\n\t\t\tbreak;\n\t\t}\n\t\ta = b;\n\t\tb = r;\n\t}\n\t\n\twhile (b > 0) {\n\t\tlong r = a % b;\n\t\tif (r == 0) {\n\t\t\tgcd = b;\n\t\t\tbreak;\n\t\t}\n\t\ta = b;\n\t\tb = r;\n\t}\n\t\n\treturn gcd;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163919
    },
    {
      "exit_code": -8,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n\tlong gcd;\n\t\n\tgcd = a;\n\twhile (a != 0) {\n\t\tif (a > b) {\n\t\t\ta %= b;\n\t\t} else {\n\t\t\tb %= a;\n\t\t}\n\t\tgcd = b;\n\t}\n\treturn gcd;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163165
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n    long gcd;\n    \n    if (a < b) {\n        long t = a;\n        a = b;\n        b = t;\n    }\n    \n    gcd = 1;\n    \n    while (a != 0) {\n        if (a > b) {\n            gcd = b;\n            b = a % b;\n            a = b;\n        }\n        else {\n            gcd = a;\n            a = a % b;\n        }\n    }\n    \n    return gcd;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmprevuf7zf.d(44): unittest failure\n----------------\n??:? _d_unittestp [0x427da5]\n??:? void tmprevuf7zf.__unittest_L37_C1() [0x427b13]\n??:? void tmprevuf7zf.__modtest() [0x427b28]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bacb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a95e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42faf1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffa0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa7d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a935]\n??:? runModuleUnitTests [0x42b8a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281f4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163919
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n\tlong gcd = 1;\n\twhile (b != 0) {\n\t\tlong r = a % b;\n\t\ta = b;\n\t\tb = r;\n\t}\n\treturn gcd;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp196ziod9.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x427d6d]\n??:? void tmp196ziod9.__unittest_L21_C1() [0x427a8f]\n??:? void tmp196ziod9.__modtest() [0x427af0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba93]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a926]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fab9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff68]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa45]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8fd]\n??:? runModuleUnitTests [0x42b869]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281bc]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163919
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n    long gcd;\n    \n    if (a == 0)\n        return b;\n    if (b == 0)\n        return a;\n    \n    gcd = __gcd(a, b);\n    \n    if (gcd == 0)\n        return a;\n    \n    return gcd;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpx2eex53g.d(20): Error: undefined identifier `__gcd`, did you mean variable `gcd`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx2eex53g.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163165
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n\tlong gcd = 1;\n\twhile (b != 0) {\n\t\tlong t = a % b;\n\t\ta = b;\n\t\tb = t;\n\t\tgcd = gcd > b ? gcd : b;\n\t}\n\treturn gcd;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpse5r66u2.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x427d85]\n??:? void tmpse5r66u2.__unittest_L22_C1() [0x427a81]\n??:? void tmpse5r66u2.__modtest() [0x427b08]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a93e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fad1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff80]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa5d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a915]\n??:? runModuleUnitTests [0x42b881]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163919
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n\tlong gcd;\n\t\n\tgcd = 1;\n\twhile (a != 0) {\n\t\tif (a > b) {\n\t\t\ta %= b;\n\t\t} else {\n\t\t\tb %= a;\n\t\t}\n\t\tgcd = (gcd * a) % b;\n\t}\n\treturn gcd;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpzty77z29.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427d9d]\n??:? void tmpzty77z29.__unittest_L26_C1() [0x427a99]\n??:? void tmpzty77z29.__modtest() [0x427b20]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bac3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a956]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fae9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa75]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a92d]\n??:? runModuleUnitTests [0x42b899]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281ec]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n\tlong gcd;\n\t\n\tif(b == 0)\n\t\treturn a;\n\t\n\tgcd = __gcd(a, b);\n\t\n\tif(__gcd(a, b) == 1)\n\t\treturn a;\n\t\n\treturn gcd;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp8obk6let.d(18): Error: undefined identifier `__gcd`, did you mean variable `gcd`?\n/tmp/tmp8obk6let.d(20): Error: undefined identifier `__gcd`, did you mean variable `gcd`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8obk6let.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163919
    },
    {
      "exit_code": 0,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n    long gcd;\n    \n    if (a < b) \n    {\n        long tmp = a;\n        a = b;\n        b = tmp;\n    }\n    \n    for (;;) \n    {\n        gcd = a % b;\n        if (gcd == 0) \n        {\n            return b;\n        }\n        a = b;\n        b = gcd;\n    }\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163919
    },
    {
      "exit_code": 0,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n\tlong c;\n\tc = a % b;\n\twhile (c != 0) {\n\t\ta = b;\n\t\tb = c;\n\t\tc = a % b;\n\t}\n\treturn b;\n}\n/*\n Return true if a is divisible by b\n    >>> is_divisible(3L, 5L)\n    true\n    \n*/\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163919
    },
    {
      "exit_code": 0,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n    long gcd;\n    \n    if (a < b) {\n        long t = a;\n        a = b;\n        b = t;\n    }\n    \n    for (;;) {\n        gcd = a % b;\n        if (gcd == 0) {\n            return b;\n        }\n        a = b;\n        b = gcd;\n    }\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163919
    },
    {
      "exit_code": -1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n    long c;\n    long d;\n    \n    c = a % b;\n    d = b;\n    while (c != 0) {\n        d = d;\n        c = c % b;\n    }\n    return d;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "Timeout",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163934
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n\tlong gcd;\n\t\n\tgcd = 1;\n\twhile (a != 0) {\n\t\tif (a > b) {\n\t\t\ta %= b;\n\t\t} else {\n\t\t\tb %= a;\n\t\t}\n\t\tgcd *= b;\n\t}\n\treturn gcd;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpqmxzhw33.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x427d9d]\n??:? void tmpqmxzhw33.__unittest_L26_C1() [0x427abb]\n??:? void tmpqmxzhw33.__modtest() [0x427b1c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bac3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a956]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fae9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa75]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a92d]\n??:? runModuleUnitTests [0x42b899]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281ec]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n    long gcd;\n    \n    if (a == 0)\n        return b;\n    if (b == 0)\n        return a;\n    \n    gcd = __gcd(a, b);\n    \n    if (gcd == 0)\n        return a;\n    \n    return gcd;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpx2eex53g.d(20): Error: undefined identifier `__gcd`, did you mean variable `gcd`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx2eex53g.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163165
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n\tlong gcd = 1;\n\twhile (b != 0) {\n\t\tlong t = b;\n\t\tb = a % b;\n\t\ta = t;\n\t\tgcd = (gcd > a) ? gcd : a;\n\t}\n\treturn gcd;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmph4sqk2xb.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x427d85]\n??:? void tmph4sqk2xb.__unittest_L22_C1() [0x427a81]\n??:? void tmph4sqk2xb.__modtest() [0x427b08]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a93e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fad1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff80]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa5d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a915]\n??:? runModuleUnitTests [0x42b881]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 0,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n    long gcd;\n    \n    if (a < b) {\n        long tmp = a;\n        a = b;\n        b = tmp;\n    }\n    \n    while (b != 0) {\n        gcd = b;\n        b = a % b;\n        a = gcd;\n    }\n    \n    return a;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": -8,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n\tlong gcd = 1;\n\twhile (b != 0) {\n\t\tif (a > b) {\n\t\t\ta %= b;\n\t\t} else {\n\t\t\tb %= a;\n\t\t}\n\t\tgcd = (gcd > a) ? gcd : a;\n\t}\n\treturn gcd;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n\tlong gcd = 1;\n\t\n\twhile (a != 0) {\n\t\tif (a > b) {\n\t\t\ta %= b;\n\t\t} else {\n\t\t\tb %= a;\n\t\t}\n\t\tgcd = std.math.gcd(gcd, b);\n\t\ta /= b;\n\t}\n\treturn gcd;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp0pg1o8e7.d(21): Error: undefined identifier `gcd` in module `std.math`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0pg1o8e7.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163919
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n\tlong gcd = 1;\n\twhile (b != 0)\n\t{\n\t\tlong tmp = b;\n\t\tb = a % b;\n\t\ta = tmp;\n\t\tgcd = gcd > a ? gcd : a;\n\t}\n\treturn gcd;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpj1sc8ism.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x427d85]\n??:? void tmpj1sc8ism.__unittest_L23_C1() [0x427a81]\n??:? void tmpj1sc8ism.__modtest() [0x427b08]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a93e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fad1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff80]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa5d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a915]\n??:? runModuleUnitTests [0x42b881]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n\tlong gcd;\n\t\n\tgcd = 1;\n\t\n\twhile (a != 0) {\n\t\tif (a > b) {\n\t\t\ta %= b;\n\t\t} else {\n\t\t\tb %= a;\n\t\t}\n\t\tgcd = (gcd > a) ? gcd : a;\n\t}\n\t\n\treturn gcd;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp9gg85asc.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x427dad]\n??:? void tmp9gg85asc.__unittest_L28_C1() [0x427aa5]\n??:? void tmp9gg85asc.__modtest() [0x427b2c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bad3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a966]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42faf9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffa8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa85]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a93d]\n??:? runModuleUnitTests [0x42b8a9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281fc]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": -8,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n\tlong gcd;\n\t\n\tgcd = 1;\n\twhile (a != 0) {\n\t\tlong t = a % b;\n\t\ta = b;\n\t\tb = t;\n\t\tgcd = gcd * b;\n\t}\n\treturn gcd;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n\tlong gcd;\n\t\n\tfor (;;) {\n\t\tgcd = a % b;\n\t\tif (gcd == 0) break;\n\t\ta = b;\n\t\tb = gcd;\n\t}\n\treturn gcd;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7aituq04.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x427d6d]\n??:? void tmp7aituq04.__unittest_L23_C1() [0x427a69]\n??:? void tmp7aituq04.__modtest() [0x427af0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba93]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a926]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fab9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff68]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa45]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8fd]\n??:? runModuleUnitTests [0x42b869]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281bc]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": -8,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n    long gcd;\n    \n    if (a < b) {\n        long tmp = a;\n        a = b;\n        b = tmp;\n    }\n    \n    gcd = 1;\n    \n    while (a != 0) {\n        if (a > b) {\n            a %= b;\n        } else {\n            b %= a;\n        }\n        gcd *= b;\n    }\n    \n    return gcd;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n    long gcd;\n    \n    if (b == 0)\n        return a;\n    \n    gcd = __gcd(a, b);\n    \n    if (gcd == 0)\n        return a;\n    \n    return greatest_common_divisor(b % gcd, gcd);\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpeoqdkzbl.d(18): Error: undefined identifier `__gcd`, did you mean variable `gcd`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpeoqdkzbl.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 0,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n\tlong c;\n\tc = a % b;\n\twhile (c != 0) {\n\t\ta = b;\n\t\tb = c;\n\t\tc = a % b;\n\t}\n\treturn b;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": -8,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n    long gcd;\n    \n    gcd = a % b;\n    while (a != 0) {\n        a = b;\n        b = gcd;\n        gcd = a % b;\n    }\n    return gcd;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n    long gcd;\n    \n    if (b == 0)\n        return a;\n    \n    if (a < b)\n        swap(a, b);\n    \n    gcd = 1;\n    \n    while (a != 0) {\n        if (a % b == 0)\n            gcd = b;\n        b = a % b;\n        a = gcd;\n    }\n    \n    return gcd;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpstronyg1.d(19): Error: undefined identifier `swap`, did you mean template `wrap(Targets...) if (Targets.length >= 1 && allSatisfy!(isMutable, Targets))`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpstronyg1.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n\tlong gcd;\n\t\n\tgcd = 1;\n\t\n\twhile (a != 0) {\n\t\tif (a > b) {\n\t\t\ta = a - b;\n\t\t} else {\n\t\t\tb = b - a;\n\t\t}\n\t\tgcd = std.math.gcd(gcd, a);\n\t}\n\treturn gcd;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpk8e641rn.d(23): Error: undefined identifier `gcd` in module `std.math`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk8e641rn.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n\tlong gcd;\n\tif(a==0) return b;\n\tif(b==0) return a;\n\tif(a>b) std.swap(a,b);\n\tgcd = std.gcd(a,b);\n\tstd.swap(a,b);\n\treturn gcd;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpncaoci3p.d(16): Error: undefined identifier `swap` in package `std`\n/tmp/tmpncaoci3p.d(17): Error: undefined identifier `gcd` in package `std`\n/tmp/tmpncaoci3p.d(18): Error: undefined identifier `swap` in package `std`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpncaoci3p.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 0,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n\tlong gcd;\n\t\n\tgcd = a % b;\n\twhile (gcd != 0)\n\t{\n\t\ta = b;\n\t\tb = gcd;\n\t\tgcd = a % b;\n\t}\n\t\n\treturn b;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": -8,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n\tlong gcd = 1;\n\twhile (a != 0) {\n\t\tlong r = a % b;\n\t\ta = b;\n\t\tb = r;\n\t}\n\treturn gcd;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n    long gcd;\n    \n    if (a < b) {\n        long temp = a;\n        a = b;\n        b = temp;\n    }\n    \n    gcd = 1;\n    while (b != 0) {\n        long r = a % b;\n        a = b;\n        b = r;\n        gcd = (gcd > r) ? gcd : r;\n    }\n    \n    return gcd;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpq0ctsgdq.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x427d9d]\n??:? void tmpq0ctsgdq.__unittest_L31_C1() [0x427b0b]\n??:? void tmpq0ctsgdq.__modtest() [0x427b20]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bac3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a956]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fae9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa75]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a92d]\n??:? runModuleUnitTests [0x42b899]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281ec]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n\tlong gcd;\n\t\n\tfor (gcd = 1; a != 0; a = a / b) \n\t{\n\t\tif (a > b) \n\t\t{\n\t\t\tbreak;\n\t\t}\n\t\tgcd = b * gcd;\n\t}\n\treturn gcd;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmph6eyn_we.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x427d7d]\n??:? void tmph6eyn_we.__unittest_L25_C1() [0x427a79]\n??:? void tmph6eyn_we.__modtest() [0x427b00]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baa3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a936]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fac9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff78]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa55]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a90d]\n??:? runModuleUnitTests [0x42b879]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281cc]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n    long gcd;\n    \n    if (a < b) {\n        long tmp = a;\n        a = b;\n        b = tmp;\n    }\n    \n    for (;;) {\n        gcd = a % b;\n        if (gcd == 0) break;\n        a = b;\n        b = gcd;\n    }\n    return gcd;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpnqx37d69.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x427d7d]\n??:? void tmpnqx37d69.__unittest_L29_C1() [0x427a75]\n??:? void tmpnqx37d69.__modtest() [0x427afc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baa3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a936]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fac9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff78]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa55]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a90d]\n??:? runModuleUnitTests [0x42b879]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281cc]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 0,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n\tlong c;\n\tc = a % b;\n\twhile (c != 0) {\n\t\ta = b;\n\t\tb = c;\n\t\tc = a % b;\n\t}\n\treturn b;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n    long gcd;\n    \n    if (a < b) {\n        long tmp = a;\n        a = b;\n        b = tmp;\n    }\n    \n    gcd = 1;\n    while (a != 0) {\n        if (a > b) {\n            gcd = b;\n            b = a % b;\n        }\n        a = a % b;\n    }\n    \n    return gcd;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp0bqzf1xj.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x427d9d]\n??:? void tmp0bqzf1xj.__unittest_L32_C1() [0x427a95]\n??:? void tmp0bqzf1xj.__modtest() [0x427b1c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bac3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a956]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fae9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa75]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a92d]\n??:? runModuleUnitTests [0x42b899]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281ec]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n\tlong gcd;\n\t\n\tif(b == 0)\n\t\treturn a;\n\t\n\tif(b == 1)\n\t\treturn a;\n\t\n\tif(b % 2 == 0)\n\t\treturn greatest_common_divisor(a%b, (b/2)+1);\n\t\n\tgcd = greatest_common_divisor(b%a, a);\n\t\n\treturn gcd;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpo3umph5g.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x427dad]\n??:? void tmpo3umph5g.__unittest_L28_C1() [0x427aa9]\n??:? void tmpo3umph5g.__modtest() [0x427b30]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bad3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a966]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42faf9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffa8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa85]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a93d]\n??:? runModuleUnitTests [0x42b8a9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281fc]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n    long gcd;\n    \n    if (b == 0)\n        return a;\n    \n    gcd = __gcd(a, b);\n    \n    if (gcd != 0)\n        return gcd;\n    \n    return __gcd(b, a % b);\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp4a4__hlz.d(18): Error: undefined identifier `__gcd`, did you mean variable `gcd`?\n/tmp/tmp4a4__hlz.d(23): Error: undefined identifier `__gcd`, did you mean variable `gcd`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4a4__hlz.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n    long gcd;\n    \n    if (b == 0)\n        return a;\n    \n    gcd = __gcd(a, b);\n    \n    if (gcd == 0)\n        return b;\n    \n    return gcd;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpljmqvwue.d(18): Error: undefined identifier `__gcd`, did you mean variable `gcd`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpljmqvwue.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163919
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n    long gcd;\n    \n    if (a == 0)\n        return b;\n    if (b == 0)\n        return a;\n    \n    gcd = __gcd(a, b);\n    if (gcd == 0)\n        return a;\n    return gcd;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmporscao88.d(20): Error: undefined identifier `__gcd`, did you mean variable `gcd`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmporscao88.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n\tlong gcd = 1;\n\twhile (b != 0) {\n\t\tif (a % b == 0) {\n\t\t\tgcd = b;\n\t\t\tbreak;\n\t\t}\n\t\tb = b / 2;\n\t}\n\treturn gcd;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp2bmg4jn6.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x427d85]\n??:? void tmp2bmg4jn6.__unittest_L23_C1() [0x427a7d]\n??:? void tmp2bmg4jn6.__modtest() [0x427b04]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a93e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fad1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff80]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa5d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a915]\n??:? runModuleUnitTests [0x42b881]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n    long gcd = 1;\n    long tmp;\n    \n    while (b != 0) {\n        tmp = b;\n        b = a % b;\n        a = tmp;\n        gcd = (gcd > a) ? gcd : a;\n    }\n    return gcd;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpocmgbxf5.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x427d8d]\n??:? void tmpocmgbxf5.__unittest_L24_C1() [0x427a89]\n??:? void tmpocmgbxf5.__modtest() [0x427b10]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bab3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a946]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fad9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa65]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a91d]\n??:? runModuleUnitTests [0x42b889]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281dc]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n\tlong gcd;\n\t\n\tgcd = std.math.gcd(a, b);\n\t\n\tif (gcd != 0)\n\t\treturn gcd;\n\t\n\treturn std.math.gcd(std.math.abs(a), std.math.abs(b));\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp_f61b67x.d(15): Error: undefined identifier `gcd` in module `std.math`\n/tmp/tmp_f61b67x.d(20): Error: undefined identifier `gcd` in module `std.math`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_f61b67x.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 0,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n\tlong gcd;\n\t\n\twhile (b != 0) {\n\t\tgcd = b;\n\t\tb = a % b;\n\t\ta = gcd;\n\t}\n\treturn a;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 0,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n    long gcd;\n    \n    if (b == 0)\n        return a;\n    \n    gcd = greatest_common_divisor(b, a % b);\n    return gcd;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n    long gcd;\n    \n    if (b == 0)\n        return a;\n    \n    gcd = __gcd(a, b);\n    \n    return __gcd(gcd, b);\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpo755opel.d(18): Error: undefined identifier `__gcd`, did you mean variable `gcd`?\n/tmp/tmpo755opel.d(20): Error: undefined identifier `__gcd`, did you mean variable `gcd`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo755opel.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n\tlong gcd;\n\t\n\tgcd = __gcd(a, b);\n\t\n\tif (gcd == 0) \n\t{\n\t\treturn a;\n\t}\n\t\n\treturn gcd;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp2hmesn5j.d(15): Error: undefined identifier `__gcd`, did you mean variable `gcd`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2hmesn5j.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n\tlong gcd;\n\t\n\tgcd = 1;\n\twhile (a != 0) {\n\t\tif (a > b) {\n\t\t\ta %= b;\n\t\t} else {\n\t\t\tb %= a;\n\t\t}\n\t\tgcd = (gcd > a) ? gcd : a;\n\t}\n\treturn gcd;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpo9yzu2ic.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427dad]\n??:? void tmpo9yzu2ic.__unittest_L26_C1() [0x427aa5]\n??:? void tmpo9yzu2ic.__modtest() [0x427b2c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bad3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a966]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42faf9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffa8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa85]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a93d]\n??:? runModuleUnitTests [0x42b8a9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281fc]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 0,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n\tlong gcd;\n\t\n\tgcd = a % b;\n\twhile (gcd != 0) {\n\t\ta = b;\n\t\tb = gcd;\n\t\tgcd = a % b;\n\t}\n\treturn b;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": -8,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n\tlong gcd = 1;\n\twhile (a != 0) {\n\t\tlong r = a % b;\n\t\ta = b;\n\t\tb = r;\n\t}\n\twhile (a != 0) {\n\t\tgcd = gcd * a;\n\t\ta = a / b;\n\t}\n\treturn gcd;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n    long gcd;\n    \n    if (b == 0)\n        return a;\n    \n    gcd = __gcd(a, b);\n    \n    if (gcd == 0)\n        return a;\n    \n    return greatest_common_divisor(b % gcd, a);\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpls5a4d2f.d(18): Error: undefined identifier `__gcd`, did you mean variable `gcd`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpls5a4d2f.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 0,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n\tlong c;\n\tc = a % b;\n\twhile (c != 0) {\n\t\ta = b;\n\t\tb = c;\n\t\tc = a % b;\n\t}\n\treturn b;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 0,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n\tlong gcd;\n\t\n\tgcd = a % b;\n\twhile (gcd != 0) {\n\t\ta = b;\n\t\tb = gcd;\n\t\tgcd = a % b;\n\t}\n\treturn b;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n\tlong gcd = 1;\n\tlong t;\n\twhile (b != 0) {\n\t\tt = b;\n\t\tb = a % b;\n\t\ta = t;\n\t}\n\treturn gcd;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpojc619y7.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x427d7d]\n??:? void tmpojc619y7.__unittest_L22_C1() [0x427a9f]\n??:? void tmpojc619y7.__modtest() [0x427b00]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baa3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a936]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fac9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff78]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa55]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a90d]\n??:? runModuleUnitTests [0x42b879]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281cc]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163921
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n    long gcd;\n    \n    if (a == 0 || b == 0)\n        return 0;\n    \n    gcd = __gcd(a, b);\n    if (gcd == 0)\n        return a;\n    \n    return __gcd(b, gcd);\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpv3yhuuxm.d(18): Error: undefined identifier `__gcd`, did you mean variable `gcd`?\n/tmp/tmpv3yhuuxm.d(22): Error: undefined identifier `__gcd`, did you mean variable `gcd`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv3yhuuxm.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 0,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n    long gcd;\n    \n    if (b == 0)\n        return a;\n    \n    gcd = greatest_common_divisor(b, a % b);\n    return gcd;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n    long gcd = 1;\n    long t;\n    \n    while (b != 0) {\n        t = b;\n        b = a % t;\n        a = t;\n        gcd = gcd * t;\n    }\n    return gcd;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7205p9g4.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x427d8d]\n??:? void tmp7205p9g4.__unittest_L24_C1() [0x427a85]\n??:? void tmp7205p9g4.__modtest() [0x427b0c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bab3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a946]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fad9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa65]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a91d]\n??:? runModuleUnitTests [0x42b889]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281dc]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163921
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n\tlong gcd;\n\tif(b == 0)\n\t\treturn a;\n\tif(b == 1)\n\t\treturn a;\n\tif(b == -1)\n\t\treturn a;\n\tif(a%b == 0)\n\t\treturn b;\n\tif(a%b != 0)\n\t\treturn greatest_common_divisor(b, a % b);\n\tif(b%2 == 0)\n\t\treturn greatest_common_divisor(b/2, a);\n\tif(b%2 == 1)\n\t\treturn greatest_common_divisor(b/2, a/2);\n\tif(b%2 == -1)\n\t\treturn greatest_common_divisor(b/2, a/2 + 1);\n\tif(b%2 == -2)\n\t\treturn greatest_common_divisor(b/2, a/2 - 1);\n\tif(b%2 == -3)\n\t\treturn greatest_common_divisor(b/2, a/2 - 2);\n\tif(b%2 == -4)\n\t\treturn greatest_common_divisor(b/2, a/2 - 3);\n\tif(b%2 == -5)\n\t\treturn greatest_common_divisor(b/2, a/2 - 4);\n\tif(b%2 == -6)\n\t\treturn greatest_common_divisor(b/2, a/2 - 5);\n\tif(b%2 == -7)\n\t\treturn greatest_common_divisor(b/2, a/2 - 6);\n\tif(b%2 == -8)\n\t\treturn greatest_common_divisor(b/2, a/2 - 7);\n\tif(b%2 == -9)\n\t\treturn greatest_common_divisor(b/2, a/2 - 8);\n\tif(b%2 == -10)\n\t\treturn greatest_common_divisor(b/2, a/2 - 9);\n\tif(b%2 == -11)\n\t\treturn greatest_common_divisor(b/2, a/2 - 10);\n\tif(b%2 == -12)\n\t\treturn greatest_common_divisor(b/2, a/2 - 11);\n\tif(b%2 == -13)\n\t\treturn greatest_common_divisor(b/2, a/2 - 12);\n\tif(b%2 == -14)\n\t\treturn greatest_common_divisor(b/2, a/2 - 13);\n\tif(b%2 == -15)\n\t\treturn greatest_common_divisor(b/2, a/2 - 14);\n\tif(b%2 == -16)\n\t\treturn greatest_common_divisor(b/2, a/2 - 15);\n\tif(b%2 == -17)\n\t\treturn greatest_common_divisor(b/2, a/2 - 16);\n\tif(b%2 == -18)\n\t\treturn greatest_common_divisor(b/2, a/2 - 17);\n\tif(b%2 == -19)\n\t\treturn greatest_common_divisor(b/2, a/2 - 18);\n\tif(b%2 == -20)\n\t\treturn greate\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpskz5sp4c.d(68): Error: found `unittest` when expecting `;` following `return` statement\n/tmp/tmpskz5sp4c.d(77): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpskz5sp4c.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n    long gcd = 1;\n    long remainder;\n    \n    while (b != 0) {\n        remainder = b%a;\n        gcd = std.math.max(gcd, remainder);\n        b = remainder;\n    }\n    return gcd;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp9v189tfw.d(18): Error: undefined identifier `max` in module `std.math`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9v189tfw.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n\tlong gcd;\n\t\n\tgcd = 1;\n\t\n\twhile (a != 0) {\n\t\tif (a > b) {\n\t\t\ta %= b;\n\t\t} else {\n\t\t\tb %= a;\n\t\t}\n\t\tgcd = (gcd > a) ? gcd : a;\n\t}\n\t\n\treturn gcd;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp9gg85asc.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x427dad]\n??:? void tmp9gg85asc.__unittest_L28_C1() [0x427aa5]\n??:? void tmp9gg85asc.__modtest() [0x427b2c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bad3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a966]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42faf9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffa8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa85]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a93d]\n??:? runModuleUnitTests [0x42b8a9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281fc]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n\tlong gcd = 1;\n\twhile (b != 0) {\n\t\tlong r = a % b;\n\t\ta = b;\n\t\tb = r;\n\t}\n\treturn gcd;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp196ziod9.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x427d6d]\n??:? void tmp196ziod9.__unittest_L21_C1() [0x427a8f]\n??:? void tmp196ziod9.__modtest() [0x427af0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba93]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a926]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fab9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff68]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa45]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8fd]\n??:? runModuleUnitTests [0x42b869]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281bc]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163919
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n\tlong gcd;\n\t\n\tgcd = __gcd(a, b);\n\tif (gcd == 0) return a;\n\treturn gcd;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpykb05vro.d(15): Error: undefined identifier `__gcd`, did you mean variable `gcd`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpykb05vro.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163919
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n    long gcd;\n    \n    gcd = std.math.gcd(a, b);\n    \n    if (std.math.gcd(a, b) == 1)\n        return a;\n    \n    return gcd;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpe7nhzkwh.d(15): Error: undefined identifier `gcd` in module `std.math`\n/tmp/tmpe7nhzkwh.d(17): Error: undefined identifier `gcd` in module `std.math`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe7nhzkwh.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n    long gcd;\n    \n    if (a == 0 || b == 0)\n        return 0;\n    \n    gcd = __gcd(a, b);\n    if (gcd == 0)\n        return a;\n    \n    return __gcd(b, gcd);\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpv3yhuuxm.d(18): Error: undefined identifier `__gcd`, did you mean variable `gcd`?\n/tmp/tmpv3yhuuxm.d(22): Error: undefined identifier `__gcd`, did you mean variable `gcd`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv3yhuuxm.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n\tlong gcd = 1;\n\twhile (b != 0) {\n\t\tlong r = a % b;\n\t\ta = b;\n\t\tb = r;\n\t}\n\treturn gcd;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp196ziod9.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x427d6d]\n??:? void tmp196ziod9.__unittest_L21_C1() [0x427a8f]\n??:? void tmp196ziod9.__modtest() [0x427af0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba93]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a926]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fab9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff68]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa45]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8fd]\n??:? runModuleUnitTests [0x42b869]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281bc]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163919
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n\tlong gcd;\n\tif(b == 0)\n\t\treturn a;\n\tif(b == 1)\n\t\treturn a;\n\tgcd = greatest_common_divisor(b, a % b);\n\treturn gcd;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp3icfc2gy.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x427d6d]\n??:? void tmp3icfc2gy.__unittest_L21_C1() [0x427a69]\n??:? void tmp3icfc2gy.__modtest() [0x427af0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba93]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a926]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fab9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff68]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa45]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8fd]\n??:? runModuleUnitTests [0x42b869]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281bc]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163921
    },
    {
      "exit_code": -8,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n\tlong gcd;\n\t\n\tgcd = 1;\n\t\n\twhile (b != 0) {\n\t\tif (a > b) {\n\t\t\ta %= b;\n\t\t} else {\n\t\t\tb %= a;\n\t\t}\n\t\tgcd *= b;\n\t}\n\t\n\treturn gcd;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163921
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n\tlong gcd = 1;\n\twhile (b != 0) {\n\t\tlong r = a % b;\n\t\ta = b;\n\t\tb = r;\n\t}\n\treturn gcd;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp196ziod9.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x427d6d]\n??:? void tmp196ziod9.__unittest_L21_C1() [0x427a8f]\n??:? void tmp196ziod9.__modtest() [0x427af0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba93]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a926]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fab9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff68]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa45]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8fd]\n??:? runModuleUnitTests [0x42b869]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281bc]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163919
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n\tlong gcd;\n\tif(b == 0)\n\t\treturn a;\n\tif(b == 1)\n\t\treturn a;\n\tif(a%b == 0)\n\t\treturn b;\n\tgcd = greatest_common_divisor(b, a % b);\n\treturn gcd;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpbhfvbdg2.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x427d85]\n??:? void tmpbhfvbdg2.__unittest_L23_C1() [0x427a7d]\n??:? void tmpbhfvbdg2.__modtest() [0x427b04]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a93e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fad1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff80]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa5d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a915]\n??:? runModuleUnitTests [0x42b881]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163921
    },
    {
      "exit_code": -8,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n\tlong gcd = 1;\n\twhile (a != 0) {\n\t\tlong r = a % b;\n\t\ta = b;\n\t\tb = r;\n\t}\n\treturn gcd;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n\tlong gcd = 1;\n\tlong t;\n\t\n\twhile (b != 0) {\n\t\tt = b;\n\t\tb = a % b;\n\t\ta = t;\n\t\tgcd = (gcd > a) ? gcd : a;\n\t}\n\treturn gcd;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpapzni6gf.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x427d8d]\n??:? void tmpapzni6gf.__unittest_L24_C1() [0x427a89]\n??:? void tmpapzni6gf.__modtest() [0x427b10]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bab3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a946]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fad9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa65]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a91d]\n??:? runModuleUnitTests [0x42b889]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281dc]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163921
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n    long gcd;\n    \n    gcd = a % b;\n    while (a != b) {\n        if (a > b)\n            a -= b;\n        else\n            b -= a;\n        gcd = a % b;\n    }\n    return gcd;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpua514hjy.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x427d9d]\n??:? void tmpua514hjy.__unittest_L25_C1() [0x427a95]\n??:? void tmpua514hjy.__modtest() [0x427b1c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bac3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a956]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fae9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa75]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a92d]\n??:? runModuleUnitTests [0x42b899]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281ec]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163921
    },
    {
      "exit_code": -8,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n    long gcd;\n    \n    if (a < b) {\n        long t = a;\n        a = b;\n        b = t;\n    }\n    \n    gcd = 1;\n    \n    while (a != 0) {\n        if (a > b) {\n            a %= b;\n        }\n        else {\n            b %= a;\n        }\n        gcd *= b;\n    }\n    \n    return gcd;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163921
    },
    {
      "exit_code": -1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n\tlong gcd;\n\t\n\tgcd = a;\n\twhile (a != 0) {\n\t\tlong r = a % b;\n\t\tif (r != 0) {\n\t\t\tgcd = b;\n\t\t\tb = r;\n\t\t}\n\t\ta = b;\n\t}\n\treturn gcd;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "Timeout",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163934
    },
    {
      "exit_code": -8,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n\tlong gcd;\n\t\n\tgcd = 1;\n\twhile (a != 0) {\n\t\tlong r = a % b;\n\t\ta = b;\n\t\tb = r;\n\t}\n\t\n\treturn gcd;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163921
    },
    {
      "exit_code": 0,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n    long r;\n    \n    if (a == 0)\n        return b;\n    if (b == 0)\n        return a;\n    \n    r = a % b;\n    if (r != 0)\n        return greatest_common_divisor(b, r);\n    return b;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163921
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n    long gcd;\n    \n    gcd = __gcd(a, b);\n    if (gcd == 0)\n        throw new Exception(\"Division by zero\");\n    return gcd;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp2fu6h129.d(15): Error: undefined identifier `__gcd`, did you mean variable `gcd`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2fu6h129.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163921
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n    long gcd;\n    \n    if (b == 0)\n        return a;\n    \n    gcd = __gcd(a, b);\n    \n    return __gcd(gcd, b);\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpo755opel.d(18): Error: undefined identifier `__gcd`, did you mean variable `gcd`?\n/tmp/tmpo755opel.d(20): Error: undefined identifier `__gcd`, did you mean variable `gcd`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo755opel.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n    long gcd;\n    \n    if (b == 0)\n        return a;\n    \n    gcd = __gcd(a, b);\n    \n    if (gcd == 0)\n        return b;\n    \n    return gcd;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpljmqvwue.d(18): Error: undefined identifier `__gcd`, did you mean variable `gcd`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpljmqvwue.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163919
    },
    {
      "exit_code": 0,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n    long r;\n    \n    r = a % b;\n    if (r == 0) \n        return b;\n    else \n        return greatest_common_divisor(b, r);\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163921
    },
    {
      "exit_code": -1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n\tlong gcd;\n\t\n\tgcd = a;\n\twhile (a != 0) {\n\t\ta = a % b;\n\t\tgcd = b * gcd;\n\t}\n\t\n\treturn gcd;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "Timeout",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163936
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n    long gcd = 1;\n    long remainder;\n    \n    while (b != 0) {\n        remainder = b % a;\n        gcd = std.math.max(gcd, remainder);\n        b = remainder;\n    }\n    return gcd;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpzdoxh4l2.d(18): Error: undefined identifier `max` in module `std.math`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzdoxh4l2.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163921
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n    long gcd;\n    \n    if (a < b) {\n        long t = a;\n        a = b;\n        b = t;\n    }\n    \n    for (;;) {\n        gcd = a % b;\n        if (gcd == 0) break;\n        a = b;\n        b = gcd;\n    }\n    return gcd;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmphem_6as6.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x427d7d]\n??:? void tmphem_6as6.__unittest_L29_C1() [0x427a75]\n??:? void tmphem_6as6.__modtest() [0x427afc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baa3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a936]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fac9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff78]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa55]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a90d]\n??:? runModuleUnitTests [0x42b879]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281cc]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163921
    },
    {
      "exit_code": -8,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n\tlong gcd;\n\t\n\tgcd = 1;\n\twhile (b != 0) {\n\t\tif (a > b) {\n\t\t\ta %= b;\n\t\t} else {\n\t\t\tb %= a;\n\t\t}\n\t\tgcd *= b;\n\t}\n\treturn gcd;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163165
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n\tlong gcd = 1;\n\twhile (b != 0) {\n\t\tlong r = a % b;\n\t\ta = b;\n\t\tb = r;\n\t\tgcd = gcd * b;\n\t}\n\treturn gcd;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmprbqq6ssq.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x427d85]\n??:? void tmprbqq6ssq.__unittest_L22_C1() [0x427a7d]\n??:? void tmprbqq6ssq.__modtest() [0x427b04]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a93e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fad1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff80]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa5d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a915]\n??:? runModuleUnitTests [0x42b881]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163921
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n\tlong gcd = 1;\n\twhile (a != 0) {\n\t\tif (a > b) {\n\t\t\ta %= b;\n\t\t} else {\n\t\t\tb %= a;\n\t\t}\n\t\tgcd = (gcd > a) ? gcd : a;\n\t}\n\treturn gcd;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpqdodd_ko.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x427da5]\n??:? void tmpqdodd_ko.__unittest_L24_C1() [0x427a9d]\n??:? void tmpqdodd_ko.__modtest() [0x427b24]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bacb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a95e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42faf1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffa0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa7d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a935]\n??:? runModuleUnitTests [0x42b8a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281f4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163921
    },
    {
      "exit_code": -8,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n\tlong gcd;\n\t\n\tfor (gcd = 1; a != 0; a /= b) \n\t{\n\t\tif (a > b) \n\t\t{\n\t\t\tbreak;\n\t\t}\n\t\tgcd = b; \n\t\tb = a % b;\n\t}\n\treturn gcd;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163921
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n    long gcd;\n    \n    if (a == 0)\n        return b;\n    if (b == 0)\n        return a;\n    \n    gcd = __gcd(a, b);\n    \n    if (gcd == 0)\n        return a;\n    \n    return gcd;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpx2eex53g.d(20): Error: undefined identifier `__gcd`, did you mean variable `gcd`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx2eex53g.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163165
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n\tlong gcd;\n\t\n\tif(a==0) return b;\n\tif(b==0) return a;\n\t\n\tfor(;;) {\n\t\tif(a%b==0) return b;\n\t\tif(b%a==0) return a;\n\t\t\n\t\tif(a>b) {\n\t\t\tgcd=a;\n\t\t\ta=b;\n\t\t\tb=gcd;\n\t\t}\n\t\telse {\n\t\t\tgcd=b;\n\t\t\ta=b;\n\t\t\tb=gcd;\n\t\t}\n\t}\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp8xmfz3cf.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x427dc5]\n??:? void tmp8xmfz3cf.__unittest_L34_C1() [0x427ac1]\n??:? void tmp8xmfz3cf.__modtest() [0x427b48]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baeb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a97e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb11]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa9d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a955]\n??:? runModuleUnitTests [0x42b8c1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428214]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163921
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n\tlong gcd;\n\t\n\tgcd = std.math.gcd(a, b);\n\t\n\tif (gcd == 0) \n\t\treturn a;\n\t\n\treturn greatest_common_divisor(b % gcd, gcd);\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpl0iocp1a.d(15): Error: undefined identifier `gcd` in module `std.math`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl0iocp1a.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163921
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n    long gcd;\n    \n    // Handle negative numbers\n    if (a < 0)\n        a = -a;\n    if (b < 0)\n        b = -b;\n    \n    // Handle zero and greatest common divisor\n    if (a == 0 || b == 0)\n        return 0;\n    \n    // Handle negative numbers\n    if (a < 0)\n        a = -a;\n    if (b < 0)\n        b = -b;\n    \n    // Handle common divisors\n    if (b == 0)\n        return a;\n    \n    // Handle positive numbers\n    if (a > b)\n        std.swap(a, b);\n    \n    // Compute greatest common divisor using Euclid's algorithm\n    gcd = 1;\n    while (a != 0) {\n        long r = a % b;\n        a = b;\n        b = r;\n        gcd = std.gcd(gcd, b);\n    }\n    \n    return gcd;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp4se4r5re.d(37): Error: undefined identifier `swap` in package `std`\n/tmp/tmp4se4r5re.d(45): Error: undefined identifier `gcd` in package `std`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4se4r5re.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163921
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n    long gcd;\n    \n    if (a < b) {\n        long tmp = a;\n        a = b;\n        b = tmp;\n    }\n    \n    gcd = 1;\n    \n    while (a != 0) {\n        if (a > b) {\n            gcd = b;\n            b = a % b;\n            a = b;\n        } else {\n            gcd = a;\n            a = a % b;\n        }\n    }\n    \n    return gcd;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp2hq2v5h9.d(43): unittest failure\n----------------\n??:? _d_unittestp [0x427da5]\n??:? void tmp2hq2v5h9.__unittest_L36_C1() [0x427b13]\n??:? void tmp2hq2v5h9.__modtest() [0x427b28]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bacb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a95e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42faf1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffa0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa7d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a935]\n??:? runModuleUnitTests [0x42b8a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281f4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163165
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n\tlong gcd;\n\t\n\tgcd = __gcd(a, b);\n\t\n\tif (gcd == 0) \n\t{\n\t\treturn a;\n\t}\n\t\n\treturn gcd;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp2hmesn5j.d(15): Error: undefined identifier `__gcd`, did you mean variable `gcd`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2hmesn5j.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": -8,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n\tlong gcd;\n\t\n\tgcd = a % b;\n\twhile (a != 0) {\n\t\ta = b;\n\t\tb = gcd;\n\t\tgcd = a % b;\n\t}\n\treturn gcd;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163921
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n\tlong gcd;\n\t\n\tif(b == 0)\n\t\treturn a;\n\t\n\tif(b == 1)\n\t\treturn a;\n\t\n\tgcd = greatest_common_divisor(b, a % b);\n\t\n\treturn gcd;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpcft0hp58.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x427d6d]\n??:? void tmpcft0hp58.__unittest_L25_C1() [0x427a69]\n??:? void tmpcft0hp58.__modtest() [0x427af0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba93]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a926]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fab9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff68]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa45]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8fd]\n??:? runModuleUnitTests [0x42b869]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281bc]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163921
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n    long gcd;\n    \n    if (a == 0)\n        return b;\n    if (b == 0)\n        return a;\n    \n    gcd = __gcd(a, b);\n    \n    if (gcd == 0)\n        return a;\n    \n    return gcd;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpx2eex53g.d(20): Error: undefined identifier `__gcd`, did you mean variable `gcd`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx2eex53g.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163165
    },
    {
      "exit_code": -8,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n    long gcd;\n    \n    gcd = 1;\n    while (b != 0) {\n        if (a > b) {\n            a %= b;\n        } else {\n            b %= a;\n        }\n        gcd *= b;\n    }\n    return gcd;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163921
    },
    {
      "exit_code": -8,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n    long c;\n    \n    if (a < b) {\n        c = a;\n        a = b;\n        b = c;\n    }\n    \n    while (a != 0) {\n        c = a % b;\n        a = b;\n        b = c;\n    }\n    \n    return b;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163921
    },
    {
      "exit_code": -8,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n\tlong gcd;\n\t\n\tgcd = 1;\n\twhile (b != 0) {\n\t\tif (a > b) {\n\t\t\ta %= b;\n\t\t} else {\n\t\t\tb %= a;\n\t\t}\n\t\tgcd *= a;\n\t}\n\treturn gcd;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163921
    },
    {
      "exit_code": -8,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n\tlong gcd = 1;\n\twhile (a != 0) {\n\t\tlong r = a % b;\n\t\ta = b;\n\t\tb = r;\n\t}\n\twhile (a != 0) {\n\t\tgcd = gcd * a;\n\t\ta--;\n\t}\n\treturn gcd;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163921
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n\tlong gcd = 1;\n\twhile (a != 0) {\n\t\tif (a > b) {\n\t\t\ta %= b;\n\t\t} else {\n\t\t\tb %= a;\n\t\t}\n\t\tgcd = (gcd > a) ? gcd : a;\n\t}\n\treturn gcd;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpqdodd_ko.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x427da5]\n??:? void tmpqdodd_ko.__unittest_L24_C1() [0x427a9d]\n??:? void tmpqdodd_ko.__modtest() [0x427b24]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bacb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a95e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42faf1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffa0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa7d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a935]\n??:? runModuleUnitTests [0x42b8a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281f4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163921
    },
    {
      "exit_code": 0,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n\tlong c;\n\tc = a % b;\n\twhile (c != 0) {\n\t\ta = b;\n\t\tb = c;\n\t\tc = a % b;\n\t}\n\treturn b;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n    long gcd;\n    \n    if (b == 0)\n        return a;\n    \n    gcd = __gcd(a, b);\n    \n    if (gcd == 0)\n        return a;\n    \n    return greatest_common_divisor(b % gcd, a);\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpls5a4d2f.d(18): Error: undefined identifier `__gcd`, did you mean variable `gcd`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpls5a4d2f.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n    long gcd;\n    \n    if (a == 0) \n        return b;\n    if (b == 0) \n        return a;\n    \n    gcd = __gcd(a, b);\n    if (gcd == 0) \n        return a;\n    \n    return greatest_common_divisor(b % gcd, a);\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp8kzuxdyu.d(20): Error: undefined identifier `__gcd`, did you mean variable `gcd`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8kzuxdyu.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163921
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n\tlong gcd = 1;\n\t\n\twhile (a != 0) {\n\t\tif (a > b) {\n\t\t\ta %= b;\n\t\t} else {\n\t\t\tb %= a;\n\t\t}\n\t\tgcd *= b;\n\t}\n\t\n\treturn gcd;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpe8qi3c6f.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x427d95]\n??:? void tmpe8qi3c6f.__unittest_L26_C1() [0x427ab3]\n??:? void tmpe8qi3c6f.__modtest() [0x427b14]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42babb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a94e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fae1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff90]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa6d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a925]\n??:? runModuleUnitTests [0x42b891]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281e4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163921
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n\tlong gcd;\n\t\n\tgcd = 1;\n\twhile (a != 0) {\n\t\tif (a > b) {\n\t\t\ta %= b;\n\t\t} else {\n\t\t\tb %= a;\n\t\t}\n\t\tgcd *= b;\n\t}\n\treturn gcd;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpqmxzhw33.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x427d9d]\n??:? void tmpqmxzhw33.__unittest_L26_C1() [0x427abb]\n??:? void tmpqmxzhw33.__modtest() [0x427b1c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bac3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a956]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fae9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa75]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a92d]\n??:? runModuleUnitTests [0x42b899]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281ec]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n\tlong gcd = 1;\n\twhile (a != 0) {\n\t\tif (a > b) {\n\t\t\ta %= b;\n\t\t} else {\n\t\t\tb %= a;\n\t\t}\n\t\tgcd = std.math.gcd(gcd, b);\n\t\ta /= b;\n\t}\n\treturn gcd;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpewhwt03o.d(20): Error: undefined identifier `gcd` in module `std.math`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpewhwt03o.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163921
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n\tlong gcd = 1;\n\twhile (b != 0) {\n\t\tlong tmp = b;\n\t\tb = a % b;\n\t\ta = tmp;\n\t\tgcd = (gcd > a) ? gcd : a;\n\t}\n\treturn gcd;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpnsc4swlv.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x427d85]\n??:? void tmpnsc4swlv.__unittest_L22_C1() [0x427a81]\n??:? void tmpnsc4swlv.__modtest() [0x427b08]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a93e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fad1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff80]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa5d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a915]\n??:? runModuleUnitTests [0x42b881]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163921
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n\tlong gcd;\n\tif(a==0) return b;\n\tif(b==0) return a;\n\tif(a>b) std.swap(a,b);\n\tgcd = 1;\n\tfor(;;) {\n\t\tif(b % gcd == 0) return gcd;\n\t\tgcd *= gcd;\n\t\tb /= gcd;\n\t}\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpa0q0yy09.d(16): Error: undefined identifier `swap` in package `std`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa0q0yy09.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163921
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n\tlong gcd = 1;\n\twhile (a != 0) {\n\t\tif (a > b) {\n\t\t\ta %= b;\n\t\t} else {\n\t\t\tb %= a;\n\t\t}\n\t\tgcd = std.math.gcd(gcd, b);\n\t}\n\treturn gcd;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpjkbs4g23.d(20): Error: undefined identifier `gcd` in module `std.math`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjkbs4g23.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163921
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n    long gcd;\n    \n    if (b == 0)\n        return a;\n    \n    gcd = greatest_common_divisor(b, a % b);\n    \n    if (gcd > a)\n        return gcd;\n    \n    return a;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpwnm0tqrs.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x427d7d]\n??:? void tmpwnm0tqrs.__unittest_L25_C1() [0x427a79]\n??:? void tmpwnm0tqrs.__modtest() [0x427b00]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baa3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a936]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fac9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff78]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa55]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a90d]\n??:? runModuleUnitTests [0x42b879]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281cc]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163921
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n    long gcd;\n    \n    if (a < b) {\n        long t = a;\n        a = b;\n        b = t;\n    }\n    \n    gcd = 1;\n    \n    while (a != 0) {\n        if (a > b) {\n            gcd = b;\n            b = a % b;\n            a = b;\n        } else {\n            gcd = a;\n            a = a % b;\n        }\n    }\n    \n    return gcd;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpmwfllfc3.d(43): unittest failure\n----------------\n??:? _d_unittestp [0x427da5]\n??:? void tmpmwfllfc3.__unittest_L36_C1() [0x427b13]\n??:? void tmpmwfllfc3.__modtest() [0x427b28]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bacb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a95e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42faf1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffa0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa7d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a935]\n??:? runModuleUnitTests [0x42b8a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281f4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163921
    },
    {
      "exit_code": 0,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n\tlong c;\n\tc = a % b;\n\twhile (c != 0) {\n\t\ta = b;\n\t\tb = c;\n\t\tc = a % b;\n\t}\n\treturn b;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": -8,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n\tlong gcd;\n\t\n\tgcd = a;\n\twhile (a != 0) {\n\t\tif (a > b) {\n\t\t\ta %= b;\n\t\t} else {\n\t\t\tb %= a;\n\t\t}\n\t\tgcd = b;\n\t}\n\treturn gcd;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163165
    },
    {
      "exit_code": -8,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n\tlong gcd = 1;\n\twhile (a != 0) {\n\t\tlong r = a % b;\n\t\ta = b;\n\t\tb = r;\n\t}\n\twhile (a != 0) {\n\t\tgcd = gcd * a;\n\t\ta = a / b;\n\t}\n\treturn gcd;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n\tlong gcd;\n\t\n\tgcd = __gcd(a, b);\n\t\n\tif (gcd == 0) \n\t\treturn a;\n\t\n\treturn __gcd(b, gcd);\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpz65tvevu.d(15): Error: undefined identifier `__gcd`, did you mean variable `gcd`?\n/tmp/tmpz65tvevu.d(20): Error: undefined identifier `__gcd`, did you mean variable `gcd`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz65tvevu.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163921
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n\tlong gcd;\n\t\n\twhile (b != 0)\n\t{\n\t\tgcd = std.math.gcd(a, b);\n\t\ta = std.math.mod(a, gcd);\n\t\tb = std.math.mod(b, gcd);\n\t}\n\t\n\treturn a;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpimbs0kig.d(17): Error: undefined identifier `gcd` in module `std.math`\n/tmp/tmpimbs0kig.d(18): Error: undefined identifier `mod` in module `std.math`, did you mean function `fmod`?\n/tmp/tmpimbs0kig.d(19): Error: undefined identifier `mod` in module `std.math`, did you mean function `fmod`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpimbs0kig.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163921
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n\tlong gcd;\n\t\n\tgcd = a;\n\twhile (a % b != 0) {\n\t\ta = b;\n\t\tb = gcd;\n\t\tgcd = b;\n\t}\n\treturn gcd;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpybtiy3y5.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x427d75]\n??:? void tmpybtiy3y5.__unittest_L23_C1() [0x427a71]\n??:? void tmpybtiy3y5.__modtest() [0x427af8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba9b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a92e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fac1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff70]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa4d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a905]\n??:? runModuleUnitTests [0x42b871]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281c4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163922
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n    long gcd;\n    \n    gcd = 1;\n    \n    while (a != 0) {\n        if (a > b) {\n            a %= b;\n        } else {\n            b %= a;\n        }\n        gcd = (gcd > a) ? gcd : a;\n    }\n    return gcd;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpp1_8rnqr.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x427dad]\n??:? void tmpp1_8rnqr.__unittest_L27_C1() [0x427aa5]\n??:? void tmpp1_8rnqr.__modtest() [0x427b2c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bad3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a966]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42faf9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffa8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa85]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a93d]\n??:? runModuleUnitTests [0x42b8a9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281fc]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163922
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n\tlong gcd = 1;\n\twhile (b != 0) {\n\t\tlong r = a % b;\n\t\ta = b;\n\t\tb = r;\n\t}\n\treturn gcd;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp196ziod9.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x427d6d]\n??:? void tmp196ziod9.__unittest_L21_C1() [0x427a8f]\n??:? void tmp196ziod9.__modtest() [0x427af0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba93]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a926]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fab9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff68]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa45]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8fd]\n??:? runModuleUnitTests [0x42b869]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281bc]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163919
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n    long gcd;\n    \n    if (a < b) {\n        long t = a;\n        a = b;\n        b = t;\n    }\n    \n    for (;;) {\n        gcd = a % b;\n        if (gcd == 0) break;\n        a = b;\n        b = gcd;\n    }\n    \n    return gcd;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpkzlfad7c.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427d7d]\n??:? void tmpkzlfad7c.__unittest_L30_C1() [0x427a75]\n??:? void tmpkzlfad7c.__modtest() [0x427afc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baa3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a936]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fac9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff78]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa55]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a90d]\n??:? runModuleUnitTests [0x42b879]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281cc]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163922
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n    long gcd;\n    \n    if (a < b) {\n        long t = a;\n        a = b;\n        b = t;\n    }\n    \n    gcd = 1;\n    \n    while (a != 0) {\n        if (a > b) {\n            gcd = b;\n            b = a % b;\n        }\n        a = a % b;\n    }\n    \n    return gcd;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpcj9a5qsj.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x427d9d]\n??:? void tmpcj9a5qsj.__unittest_L33_C1() [0x427a95]\n??:? void tmpcj9a5qsj.__modtest() [0x427b1c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bac3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a956]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fae9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa75]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a92d]\n??:? runModuleUnitTests [0x42b899]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281ec]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163922
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n    long gcd = 1;\n    while (b != 0) {\n        long r = a % b;\n        a = b;\n        b = r;\n    }\n    return gcd;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp77zx8c3b.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x427d6d]\n??:? void tmp77zx8c3b.__unittest_L21_C1() [0x427a8f]\n??:? void tmp77zx8c3b.__modtest() [0x427af0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba93]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a926]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fab9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff68]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa45]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8fd]\n??:? runModuleUnitTests [0x42b869]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281bc]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163922
    },
    {
      "exit_code": -8,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n    long gcd;\n    \n    if (a < b) {\n        long t = a;\n        a = b;\n        b = t;\n    }\n    \n    gcd = 1;\n    \n    while (a != 0) {\n        if (a > b) {\n            a %= b;\n            gcd *= b;\n        }\n        else {\n            b %= a;\n            gcd *= a;\n        }\n    }\n    \n    return gcd;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163922
    },
    {
      "exit_code": -1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n\tlong gcd;\n\t\n\tgcd = 1;\n\twhile (a != 0) {\n\t\tlong r = a % b;\n\t\tif (r != 0) {\n\t\t\tgcd = b;\n\t\t\tb = r;\n\t\t}\n\t\ta = a / b;\n\t}\n\treturn gcd;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "Timeout",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163934
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n    long gcd;\n    \n    if (b == 0)\n        return a;\n    \n    gcd = __gcd(a, b);\n    \n    if (gcd == 0)\n        return b;\n    \n    return gcd;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpljmqvwue.d(18): Error: undefined identifier `__gcd`, did you mean variable `gcd`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpljmqvwue.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163919
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n    long gcd;\n    \n    if (a == 0)\n        return b;\n    if (b == 0)\n        return a;\n    \n    gcd = __gcd(a, b);\n    \n    if (gcd == 0)\n        return a;\n    \n    return gcd;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpx2eex53g.d(20): Error: undefined identifier `__gcd`, did you mean variable `gcd`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx2eex53g.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163165
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n\tlong gcd = 1;\n\twhile (b != 0) {\n\t\tlong r = a % b;\n\t\ta = b;\n\t\tb = r;\n\t}\n\treturn gcd;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp196ziod9.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x427d6d]\n??:? void tmp196ziod9.__unittest_L21_C1() [0x427a8f]\n??:? void tmp196ziod9.__modtest() [0x427af0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba93]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a926]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fab9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff68]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa45]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8fd]\n??:? runModuleUnitTests [0x42b869]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281bc]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163919
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n    long c;\n    long gcd;\n    \n    if (a < b) {\n        c = a;\n        a = b;\n        b = c;\n    }\n    \n    gcd = 1;\n    \n    while (a != 0) {\n        if (a > b) {\n            gcd = gcd*b;\n        }\n        a = a / b;\n        b = gcd;\n    }\n    \n    return gcd;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmppy_siy7e.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x427d9d]\n??:? void tmppy_siy7e.__unittest_L34_C1() [0x427a99]\n??:? void tmppy_siy7e.__modtest() [0x427b20]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bac3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a956]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fae9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa75]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a92d]\n??:? runModuleUnitTests [0x42b899]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281ec]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163922
    },
    {
      "exit_code": -8,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n\tlong gcd;\n\t\n\tgcd = 1;\n\twhile (a != 0) {\n\t\tlong r = a % b;\n\t\ta = b;\n\t\tb = r;\n\t\tgcd = gcd * b;\n\t}\n\treturn gcd;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163922
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n    long gcd;\n    \n    if (a < b) {\n        long tmp = a;\n        a = b;\n        b = tmp;\n    }\n    \n    for (;;) {\n        gcd = a % b;\n        if (gcd == 0) break;\n        a = b;\n        b = gcd;\n    }\n    return gcd;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpnqx37d69.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x427d7d]\n??:? void tmpnqx37d69.__unittest_L29_C1() [0x427a75]\n??:? void tmpnqx37d69.__modtest() [0x427afc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baa3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a936]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fac9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff78]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa55]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a90d]\n??:? runModuleUnitTests [0x42b879]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281cc]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": -8,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n\tlong gcd;\n\t\n\tif(b == 0)\n\t\treturn a;\n\t\n\tif(b > a)\n\t{\n\t\tgcd = greatest_common_divisor(b, a);\n\t\ta = b;\n\t\tb = gcd;\n\t}\n\t\n\tdo\n\t{\n\t\tgcd = a % b;\n\t\ta = b;\n\t\tb = gcd;\n\t} while(a != 1);\n\t\n\treturn b;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163922
    },
    {
      "exit_code": -8,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n\tlong gcd = 1;\n\tlong t;\n\t\n\twhile (a != 0) {\n\t\tt = a % b;\n\t\ta = b;\n\t\tb = t;\n\t\tgcd = gcd * b;\n\t}\n\treturn gcd;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163922
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n    long gcd;\n    \n    gcd = 1;\n    \n    while (a != 0) {\n        if (a > b) {\n            a %= b;\n        } else {\n            b %= a;\n        }\n        gcd *= b;\n    }\n    \n    return gcd;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmprow_j1g_.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x427d9d]\n??:? void tmprow_j1g_.__unittest_L28_C1() [0x427abb]\n??:? void tmprow_j1g_.__modtest() [0x427b1c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bac3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a956]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fae9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa75]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a92d]\n??:? runModuleUnitTests [0x42b899]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281ec]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163922
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n    long gcd;\n    \n    if (a == 0)\n        return b;\n    if (b == 0)\n        return a;\n    \n    gcd = __gcd(a, b);\n    if (gcd == 0)\n        return a;\n    \n    return greatest_common_divisor(b % gcd, a);\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpehyg42vw.d(20): Error: undefined identifier `__gcd`, did you mean variable `gcd`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpehyg42vw.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163921
    },
    {
      "exit_code": 0,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n\tlong gcd;\n\t\n\tgcd = a % b;\n\twhile (gcd != 0)\n\t{\n\t\ta = b;\n\t\tb = gcd;\n\t\tgcd = a % b;\n\t}\n\treturn b;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163919
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n\tlong gcd = 1;\n\twhile (b > 0) {\n\t\tlong r = a % b;\n\t\ta = b;\n\t\tb = r;\n\t\tgcd = (gcd > r) ? gcd : r;\n\t}\n\treturn gcd;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpr9slkv4z.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x427d85]\n??:? void tmpr9slkv4z.__unittest_L22_C1() [0x427a81]\n??:? void tmpr9slkv4z.__modtest() [0x427b08]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a93e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fad1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff80]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa5d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a915]\n??:? runModuleUnitTests [0x42b881]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163922
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n    long gcd = 1;\n    while (b != 0) {\n        long t = a % b;\n        a = b;\n        b = t;\n        gcd = gcd * b;\n    }\n    return gcd;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp4glij0rg.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x427d85]\n??:? void tmp4glij0rg.__unittest_L22_C1() [0x427a7d]\n??:? void tmp4glij0rg.__modtest() [0x427b04]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a93e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fad1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff80]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa5d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a915]\n??:? runModuleUnitTests [0x42b881]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163922
    },
    {
      "exit_code": -8,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n\tlong gcd;\n\t\n\tgcd = 1;\n\twhile (b != 0) {\n\t\tif (a > b) {\n\t\t\ta %= b;\n\t\t} else {\n\t\t\tb %= a;\n\t\t}\n\t\tgcd *= b;\n\t}\n\treturn gcd;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163165
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n    long gcd;\n    \n    gcd = __gcd(a, b);\n    if (gcd == 0) return a;\n    return gcd;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpr6elkc45.d(15): Error: undefined identifier `__gcd`, did you mean variable `gcd`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr6elkc45.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163165
    },
    {
      "exit_code": 0,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n\tlong gcd;\n\t\n\tgcd = a % b;\n\twhile (gcd != 0)\n\t{\n\t\ta = b;\n\t\tb = gcd;\n\t\tgcd = a % b;\n\t}\n\treturn b;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163919
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n    long gcd;\n    \n    if (a == 0)\n        return b;\n    if (b == 0)\n        return a;\n    \n    gcd = __gcd(a, b);\n    if (gcd == 0)\n        return a;\n    return gcd;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmporscao88.d(20): Error: undefined identifier `__gcd`, did you mean variable `gcd`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmporscao88.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n\tlong gcd;\n\tif(b == 0)\n\t\treturn a;\n\tif(b == 1)\n\t\treturn a;\n\tif(b == -1)\n\t\treturn a;\n\tif(b > a)\n\t{\n\t\tgcd = greatest_common_divisor(b, a%b);\n\t\treturn gcd;\n\t}\n\telse\n\t{\n\t\tgcd = greatest_common_divisor(a, (b+a)%b);\n\t\treturn gcd;\n\t}\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpvm5wtmob.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x427d9d]\n??:? void tmpvm5wtmob.__unittest_L31_C1() [0x427a95]\n??:? void tmpvm5wtmob.__modtest() [0x427b1c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bac3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a956]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fae9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa75]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a92d]\n??:? runModuleUnitTests [0x42b899]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281ec]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163922
    },
    {
      "exit_code": 0,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n\tlong c;\n\tc = a % b;\n\twhile (c != 0) {\n\t\ta = b;\n\t\tb = c;\n\t\tc = a % b;\n\t}\n\treturn b;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n    long gcd;\n    \n    gcd = __gcd(a, b);\n    if (gcd == 0) return a;\n    return gcd;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpr6elkc45.d(15): Error: undefined identifier `__gcd`, did you mean variable `gcd`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr6elkc45.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163165
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n\tlong gcd;\n\t\n\tgcd = 1;\n\twhile (b != 0) {\n\t\tlong tmp = b;\n\t\tb = a % b;\n\t\ta = tmp;\n\t\tgcd = (gcd > a) ? gcd : a;\n\t}\n\treturn gcd;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpvwlz_o5o.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x427d8d]\n??:? void tmpvwlz_o5o.__unittest_L24_C1() [0x427a89]\n??:? void tmpvwlz_o5o.__modtest() [0x427b10]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bab3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a946]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fad9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa65]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a91d]\n??:? runModuleUnitTests [0x42b889]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281dc]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163922
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n    long gcd;\n    \n    // find gcd of both a and b\n    gcd = __gcd(a, b);\n    \n    // if gcd is 1, then return a\n    if (gcd == 1) return a;\n    \n    // if gcd is 0, then return b\n    if (gcd == 0) return b;\n    \n    // otherwise return greatest common divisor of gcd and a\n    return __gcd(gcd, a);\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpxkpkglis.d(16): Error: undefined identifier `__gcd`, did you mean variable `gcd`?\n/tmp/tmpxkpkglis.d(25): Error: undefined identifier `__gcd`, did you mean variable `gcd`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxkpkglis.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163922
    },
    {
      "exit_code": -1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n\tlong gcd;\n\t\n\tgcd = a;\n\twhile (a != 0) {\n\t\tif (a > b) {\n\t\t\ta = a - b;\n\t\t} else {\n\t\t\tb = b - a;\n\t\t}\n\t\tgcd = gcd*b;\n\t}\n\treturn gcd;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "Timeout",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163937
    },
    {
      "exit_code": 0,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n\tlong gcd;\n\t\n\tfor (;;) {\n\t\tgcd = a % b;\n\t\tif (gcd == 0) return b;\n\t\ta = b;\n\t\tb = gcd;\n\t}\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163922
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n\tlong gcd = 1;\n\twhile (b != 0) {\n\t\tlong r = a % b;\n\t\ta = b;\n\t\tb = r;\n\t}\n\treturn gcd;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp196ziod9.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x427d6d]\n??:? void tmp196ziod9.__unittest_L21_C1() [0x427a8f]\n??:? void tmp196ziod9.__modtest() [0x427af0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba93]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a926]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fab9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff68]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa45]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8fd]\n??:? runModuleUnitTests [0x42b869]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281bc]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163919
    },
    {
      "exit_code": -1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n    long gcd;\n    \n    if (a < b) \n    {\n        long tmp = a;\n        a = b;\n        b = tmp;\n    }\n    \n    gcd = 1;\n    \n    while (a != 0) \n    {\n        if (a > b) \n        {\n            gcd = b - gcd;\n            b = a - b;\n            a = a % b;\n        }\n        else \n        {\n            gcd = a - gcd;\n            a = a % b;\n        }\n    }\n    \n    return gcd;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "Timeout",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163937
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n\tlong gcd;\n\t\n\tif(b == 0)\n\t\treturn a;\n\t\n\tif(b > a)\n\t{\n\t\tgcd = greatest_common_divisor(b, a);\n\t\ta = a;\n\t\tb = gcd;\n\t}\n\t\n\tdo\n\t{\n\t\tgcd = std.math.gcd(a, b);\n\t\ta = b;\n\t\tb = gcd;\n\t}\n\twhile(a != 1);\n\t\n\treturn b;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp6_npj5wz.d(27): Error: undefined identifier `gcd` in module `std.math`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6_npj5wz.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163922
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n    long gcd;\n    \n    if (b == 0)\n        return a;\n    \n    gcd = 0;\n    \n    while (a != 0) {\n        if (a > b)\n            a %= b;\n        else\n            b %= a;\n        gcd += a;\n    }\n    \n    return gcd;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpa6g5awu3.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427da5]\n??:? void tmpa6g5awu3.__unittest_L30_C1() [0x427a9d]\n??:? void tmpa6g5awu3.__modtest() [0x427b24]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bacb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a95e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42faf1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffa0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa7d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a935]\n??:? runModuleUnitTests [0x42b8a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281f4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163922
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n\tlong gcd;\n\t\n\tgcd = __gcd(a, b);\n\t\n\tif (gcd == 0) \n\t{\n\t\treturn a;\n\t}\n\t\n\treturn gcd;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp2hmesn5j.d(15): Error: undefined identifier `__gcd`, did you mean variable `gcd`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2hmesn5j.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": -8,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n\tlong gcd;\n\t\n\tgcd = a;\n\twhile (a != 0) {\n\t\tlong r = a % b;\n\t\ta = b;\n\t\tb = r;\n\t}\n\treturn gcd;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163922
    },
    {
      "exit_code": -8,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n    long gcd;\n    \n    if (a < b) \n    {\n        long tmp = a;\n        a = b;\n        b = tmp;\n    }\n    \n    gcd = 1;\n    \n    while (a != 0) \n    {\n        long r = a % b;\n        a = b;\n        b = r;\n        gcd = (gcd > b) ? gcd : b;\n    }\n    \n    return gcd;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163922
    },
    {
      "exit_code": -8,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n    long gcd;\n    \n    if (a < b) {\n        long t = a;\n        a = b;\n        b = t;\n    }\n    \n    gcd = 1;\n    \n    while (a != 0) {\n        long r = a % b;\n        a = b;\n        b = r;\n        gcd = (gcd > r) ? gcd : r;\n    }\n    \n    return gcd;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 0,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n\tlong r;\n\t\n\tr = a % b;\n\t\n\tif (r == 0) \n\t\treturn b;\n\t\n\treturn greatest_common_divisor(b, r);\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163922
    },
    {
      "exit_code": 0,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n\tlong c;\n\tc = a % b;\n\twhile (c != 0) {\n\t\ta = b;\n\t\tb = c;\n\t\tc = a % b;\n\t}\n\treturn b;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": -8,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n    long gcd;\n    \n    gcd = a % b;\n    while (a != 0) {\n        a = b;\n        b = gcd;\n        gcd = a % b;\n    }\n    return gcd;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n\tlong gcd;\n\t\n\tgcd = a;\n\twhile (a != 0) {\n\t\ta = b % a;\n\t\tgcd = a;\n\t}\n\treturn gcd;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpess5m12c.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x427d6d]\n??:? void tmpess5m12c.__unittest_L22_C1() [0x427a69]\n??:? void tmpess5m12c.__modtest() [0x427af0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba93]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a926]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fab9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff68]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa45]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8fd]\n??:? runModuleUnitTests [0x42b869]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281bc]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163922
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n\tlong gcd;\n\t\n\tgcd = 1;\n\twhile (a != 0) {\n\t\tif (a > b) {\n\t\t\ta %= b;\n\t\t} else {\n\t\t\tb %= a;\n\t\t}\n\t\tgcd = (gcd * a) % b;\n\t}\n\treturn gcd;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpzty77z29.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427d9d]\n??:? void tmpzty77z29.__unittest_L26_C1() [0x427a99]\n??:? void tmpzty77z29.__modtest() [0x427b20]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bac3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a956]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fae9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa75]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a92d]\n??:? runModuleUnitTests [0x42b899]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281ec]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": -8,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n\tlong gcd = 1;\n\twhile (a != 0) {\n\t\tlong r = a % b;\n\t\ta = b;\n\t\tb = r;\n\t}\n\treturn gcd;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n    long gcd;\n    \n    if (b == 0)\n        return a;\n    \n    gcd = __gcd(a, b);\n    \n    if (gcd == 0)\n        return a;\n    \n    return greatest_common_divisor(b, gcd);\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpqpav63xk.d(18): Error: undefined identifier `__gcd`, did you mean variable `gcd`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqpav63xk.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163922
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n\tlong gcd = 1;\n\twhile (b != 0)\n\t{\n\t\tlong r = a % b;\n\t\ta = b;\n\t\tb = r;\n\t\tgcd = gcd * b;\n\t}\n\treturn gcd;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpum5o2_b1.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x427d85]\n??:? void tmpum5o2_b1.__unittest_L23_C1() [0x427a7d]\n??:? void tmpum5o2_b1.__modtest() [0x427b04]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a93e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fad1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff80]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa5d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a915]\n??:? runModuleUnitTests [0x42b881]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163922
    },
    {
      "exit_code": -1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n    long gcd;\n    \n    gcd = a;\n    \n    while (a != 0) {\n        if (b != 0) {\n            if (a > b) {\n                a %= b;\n            } else {\n                b %= a;\n            }\n        } else {\n            b = a;\n        }\n        gcd = b;\n    }\n    return gcd;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "Timeout",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163937
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n\tlong gcd = 1;\n\tlong temp;\n\t\n\twhile (b != 0) {\n\t\ttemp = a % b;\n\t\ta = b;\n\t\tb = temp;\n\t\tgcd = gcd * b;\n\t}\n\t\n\treturn gcd;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpeamfpnhu.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x427d85]\n??:? void tmpeamfpnhu.__unittest_L25_C1() [0x427a7d]\n??:? void tmpeamfpnhu.__modtest() [0x427b04]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a93e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fad1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff80]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa5d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a915]\n??:? runModuleUnitTests [0x42b881]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163922
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n\tlong gcd = 1;\n\twhile (a != 0) {\n\t\tif (a > b) {\n\t\t\ta %= b;\n\t\t} else {\n\t\t\tb %= a;\n\t\t}\n\t\tgcd = std.math.gcd(gcd, b);\n\t\ta /= b;\n\t}\n\treturn gcd;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpewhwt03o.d(20): Error: undefined identifier `gcd` in module `std.math`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpewhwt03o.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163921
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n\tlong gcd;\n\t\n\tgcd = __gcd(a, b);\n\t\n\tif (gcd == 0) \n\t\treturn a;\n\t\n\treturn gcd;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpgip4xtwd.d(15): Error: undefined identifier `__gcd`, did you mean variable `gcd`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgip4xtwd.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163919
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n    long gcd;\n    \n    gcd = std.math.gcd(a, b);\n    \n    if (gcd != 0)\n    {\n        return gcd;\n    }\n    else\n    {\n        return a;\n    }\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpz5lyt4sz.d(15): Error: undefined identifier `gcd` in module `std.math`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz5lyt4sz.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163922
    },
    {
      "exit_code": 0,
      "program": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n\tlong gcd = 1;\n\twhile (b != 0) {\n\t\tif (a % b == 0) {\n\t\t\tgcd = b;\n\t\t\tbreak;\n\t\t}\n\t\tgcd = b;\n\t\tb = a % b;\n\t\ta = gcd % b;\n\t}\n\treturn gcd;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163922
    }
  ]
}