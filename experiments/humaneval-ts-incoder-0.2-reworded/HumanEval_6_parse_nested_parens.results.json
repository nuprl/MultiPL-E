{
  "language": "ts",
  "name": "HumanEval_6_parse_nested_parens",
  "results": [
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  let paren_level_max = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_max = Math.max(paren_level_max, paren_stack.length - 1);\n      paren_level_count += 1;\n    } else if (char === ')') {\n      paren_level_count -= 1;\n      if (paren_level_count === 0) {\n        paren_stack.push(paren_level_count);\n      }\n    }\n  }\n  return paren_stack;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  1,\n  0,\n  0,\n  1,\n  2,\n  0,\n  0,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpbfz91l0i.js:30:12)\n    at Object.<anonymous> (/tmp/tmpbfz91l0i.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0, 1, 1, 0, 0, 1,\n    2, 0, 0, 0, 0, 1,\n    2, 1, 1, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334780
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  let paren_level_max = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level_count++;\n    } else if (char === ')') {\n      paren_level_count--;\n      if (paren_level_count < 0) {\n        paren_level_max--;\n      }\n      if (paren_level_count === 0) {\n        paren_level.push(paren_level_max);\n      }\n      paren_stack.push(paren_string[i]);\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmppm_9_c8g.js:33:12)\n    at Object.<anonymous> (/tmp/tmppm_9_c8g.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0, 0, 0 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334780
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count: number[] = [];\n  let paren_level_max: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpvsqaqktr.ts(70,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334780
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === \"(\") {\n      paren_stack.push(paren_count);\n      paren_level.push(0);\n      paren_count++;\n    } else if (paren_string[i] === \")\") {\n      paren_count = paren_stack.pop();\n      paren_level = paren_stack.pop();\n    } else {\n      paren_count = paren_stack.pop();\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpqh4ny3vg.ts(17,7): error TS2588: Cannot assign to 'paren_level' because it is a constant.\n",
      "timestamp": 1660334780
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count: number[] = [];\n  let paren_level_max: number[] = [];\n  let paren_level_max_count: number;\n  let paren_level_max_index: number;\n  let paren_level_max_paren: string;\n  let paren_level_max_paren_index: number;\n  let paren_level_max_paren_level: number;\n  let paren_level_max_paren_level_count: number;\n  let paren_level_max_paren_level_max_index: number;\n  let paren_level_max_paren_level_max_paren: string;\n  let paren_level_max_paren_level_max_paren_index: number;\n  let paren_level_max_paren_level_max_paren_level: number;\n  let paren_level_max_paren_level_max_paren_level_count: number;\n  let paren_level_max_paren_level_max_paren_level_max_index: number;\n  let paren_level_max_paren_level_max_paren_level_max_paren: string;\n  let paren_level_max_paren_level_max_paren_level_max_paren_index: number;\n  let paren_level_max_paren_level_max_paren_level_max_paren_level: number;\n  let paren_level_max_paren_level_max_paren_level_max_paren_level_count: number;\n  let paren_level_max_paren_level_max_paren_level_max_paren_level_max_index: number;\n  let paren_level_max_paren_level_max_paren_level_max_paren_level_max_paren: string;\n  let paren_level_max_paren_level_max_paren_level_max_paren_level_max_paren_index: number;\n  let paren_level_max_paren_level_max_paren_level_max_paren_level_max_paren_level: number;\n  let paren_level_max_paren_level_max_paren_level_max_paren_level_max_paren_level_count: number;\n  let paren_level_max_paren_level_max_paren_level_max_paren_level_max_paren_level_max_index: number;\n  let paren_level_max_paren_level_max_paren_level_max_paren_level_max_paren_level_max_paren: string;\n  let paren_level_max_paren_level_max_paren_level_max_paren_level_max_paren_level_max_paren_index: number;\n  let paren_level_max_paren_level_max_paren_level_max_paren_level_max_paren_level_max_paren_level: number;\n  let paren_level_max_paren_level_max_paren_level_max_paren_level_max_paren_level_max_paren_level_count: number;\n  let paren_level_max_paren_level_max_paren_level_max_paren_level_max_paren_level_max_paren_level_max_index: number;\n  let paren_level_max_paren_level_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpihmgmf6o.ts(50,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334780
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_count);\n      paren_level.push(0);\n      paren_count++;\n    } else if (char === ')') {\n      paren_count = paren_stack.pop();\n      paren_level = paren_stack.pop();\n    } else {\n      paren_count = paren_stack.pop();\n      paren_level = paren_stack.pop();\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpfnkm3zr0.ts(13,24): error TS2345: Argument of type 'number' is not assignable to parameter of type 'string'.\n../../../../tmp/tmpfnkm3zr0.ts(17,7): error TS2322: Type 'string' is not assignable to type 'number'.\n../../../../tmp/tmpfnkm3zr0.ts(18,7): error TS2588: Cannot assign to 'paren_level' because it is a constant.\n../../../../tmp/tmpfnkm3zr0.ts(20,7): error TS2322: Type 'string' is not assignable to type 'number'.\n../../../../tmp/tmpfnkm3zr0.ts(21,7): error TS2588: Cannot assign to 'paren_level' because it is a constant.\n",
      "timestamp": 1660334780
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count: number = 0;\n  let paren_level_max: number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_index2: number = 0;\n  let paren_level_max_index3: number = 0;\n  let paren_level_max_index4: number = 0;\n  let paren_level_max_index5: number = 0;\n  let paren_level_max_index6: number = 0;\n  let paren_level_max_index7: number = 0;\n  let paren_level_max_index8: number = 0;\n  let paren_level_max_index9: number = 0;\n  let paren_level_max_index10: number = 0;\n  let paren_level_max_index11: number = 0;\n  let paren_level_max_index12: number = 0;\n  let paren_level_max_index13: number = 0;\n  let paren_level_max_index14: number = 0;\n  let paren_level_max_index15: number = 0;\n  let paren_level_max_index16: number = 0;\n  let paren_level_max_index17: number = 0;\n  let paren_level_max_index18: number = 0;\n  let paren_level_max_index19: number = 0;\n  let paren_level_max_index20: number = 0;\n  let paren_level_max_index21: number = 0;\n  let paren_level_max_index22: number = 0;\n  let paren_level_max_index23: number = 0;\n  let paren_level_max_index24: number = 0;\n  let paren_level_max_index25: number = 0;\n  let paren_level_max_index26: number = 0;\n  let paren_level_max_index27: number = 0;\n  let paren_level_max_index28: number = 0;\n  let paren_level_max_index29: number = 0;\n  let paren_level_max_index30: number = 0;\n  let paren_level_max_index31: number = 0;\n  let paren_level_max_index32: number = 0;\n  let paren_level_max_index33: number = 0;\n  let paren_level_max_index34: number = 0;\n  let paren_level_max_index35: number = 0;\n  let paren_level_max_index36: number = 0;\n  let paren_level_max_index37: number = 0;\n  let paren_level_max_index38: number = 0;\n  let paren_level_max_index39: number = 0;\n  let paren_level_max_index40: number = 0;\n  let paren_level_max_index41: number = 0;\n  let paren_level_max_index42: number = 0;\n  let paren_level_max_index43: number = 0;\n  let paren_level_max_index44: number = 0;\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpdzxif42t.ts(66,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334780
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === \"(\") {\n      paren_stack.push(paren_string[i]);\n      paren_level.push(paren_level_count);\n      paren_level_count++;\n    } else if (paren_string[i] === \")\") {\n      paren_level_count--;\n      if (paren_level_count === 0) {\n        paren_level.push(paren_level_count);\n      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  1,\n  0,\n  0,\n  1,\n  2,\n  0,\n  0,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpdmxwf_ro.js:28:12)\n    at Object.<anonymous> (/tmp/tmpdmxwf_ro.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0, 1, 1, 0, 0, 1,\n    2, 0, 0, 0, 0, 1,\n    2, 1, 1, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334780
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const groups = paren_string.trim().split(/\\s+/);\n  const max_level = Math.max(...groups.map(g => g.length));\n  const levels = new Array<number>(max_level);\n  for (let i = 0; i < groups.length; i++) {\n    const group = groups[i];\n    for (let j = 0; j < group.length; j++) {\n      if (group[j] === '(') {\n        levels[levels.length - 1]++;\n      } else if (group[j] === ')') {\n        levels[levels.length - 1]--;\n      }\n    }\n  }\n  return levels.map(l => l === 0 ? '' : l);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpzu6nsyt2.ts(20,3): error TS2322: Type '(number | \"\")[]' is not assignable to type 'number[]'.\n  Type 'number | \"\"' is not assignable to type 'number'.\n    Type 'string' is not assignable to type 'number'.\n",
      "timestamp": 1660334780
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  let paren_level_max = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_max = Math.max(paren_level_max, paren_stack[paren_stack.length - 1]);\n      paren_level_count += 1;\n    } else if (char === ')') {\n      paren_level_count -= 1;\n      if (paren_level_count === 0) {\n        paren_level.push(paren_level_max);\n      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  2,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpm9lunwl7.js:30:12)\n    at Object.<anonymous> (/tmp/tmpm9lunwl7.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 2, 2 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334780
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const groups = paren_string.trim().split(/\\s+/);\n  const max_level = Math.max(...groups.map(g => g.length));\n  const levels = new Array(max_level);\n  for (let i = 0; i < levels.length; i++) {\n    levels[i] = 0;\n  }\n  for (let i = 0; i < groups.length; i++) {\n    const group = groups[i];\n    for (let j = 0; j < group.length; j++) {\n      if (group[j] === '(') {\n        levels[levels.length - 1]++;\n      } else if (group[j] === ')') {\n        levels[levels.length - 1]--;\n      }\n    }\n  }\n  return levels;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp3b4pdpj6.js:29:12)\n    at Object.<anonymous> (/tmp/tmp3b4pdpj6.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334780
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count: number = 0;\n  let paren_level_max: number = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_max = (paren_level_count > paren_level_max) ? paren_level_count : paren_level_max;\n      paren_level_count = 0;\n    } else if (char === ')') {\n      paren_level_count = paren_stack.pop();\n      paren_level_count = (paren_level_count > paren_level_count) ? paren_level_count : paren_level_count;\n    }\n    paren_level_count += 1;\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp0z_gzi1r.js:29:12)\n    at Object.<anonymous> (/tmp/tmp0z_gzi1r.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334780
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  let paren_level_max = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_max = Math.max(paren_level_max, paren_stack.length);\n      paren_level_count += 1;\n    } else if (char === ')') {\n      paren_level_count -= 1;\n      paren_level[paren_stack.pop()] = paren_level_count;\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp030yq2gm.js:28:12)\n    at Object.<anonymous> (/tmp/tmp030yq2gm.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 2 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334781
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count: number = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_count += 1;\n    } else if (char === ')') {\n      paren_level_count -= 1;\n      paren_level[paren_stack.pop()] = paren_level_count;\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp_yp2k394.js:26:12)\n    at Object.<anonymous> (/tmp/tmp_yp2k394.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 2 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334781
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_count += 1;\n    } else if (char === ')') {\n      paren_level_count -= 1;\n      paren_level[paren_stack.pop()] = paren_level_count;\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmphl61jp2u.js:26:12)\n    at Object.<anonymous> (/tmp/tmphl61jp2u.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 2 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334780
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === \"(\") {\n      paren_stack.push(paren_level_count);\n      paren_level_count += 1;\n    } else if (paren_string[i] === \")\") {\n      paren_level_count -= 1;\n      paren_level[paren_stack.pop()] = paren_level_count;\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmprzq9o8it.js:25:12)\n    at Object.<anonymous> (/tmp/tmprzq9o8it.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 2 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334781
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  let paren_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_count);\n      paren_count++;\n    } else if (char === ')') {\n      paren_count--;\n    }\n  }\n  return paren_stack;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  1,\n  0,\n  1,\n  2,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp2xngem7q.js:24:12)\n    at Object.<anonymous> (/tmp/tmp2xngem7q.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0, 1, 1, 0, 1,\n    2, 0, 0, 1, 2,\n    1, 1\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334780
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level.push(paren_level_count);\n      paren_level_count++;\n    } else if (char === ')') {\n      paren_level_count--;\n      paren_level[paren_level.length - 1]++;\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  2,\n  3,\n  0,\n  1,\n  5,\n  1,\n  0,\n  1,\n  4,\n  2,\n  3\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp0s4rh6ys.js:27:12)\n    at Object.<anonymous> (/tmp/tmp0s4rh6ys.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0, 2, 3, 0, 1,\n    5, 1, 0, 1, 4,\n    2, 3\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334781
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count: number[] = [];\n  let paren_level_max: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count2: number[] = [];\n  let paren_level_max_count3: number[] = [];\n  let paren_level_max_count4: number[] = [];\n  let paren_level_max_count5: number[] = [];\n  let paren_level_max_count6: number[] = [];\n  let paren_level_max_count7: number[] = [];\n  let paren_level_max_count8: number[] = [];\n  let paren_level_max_count9: number[] = [];\n  let paren_level_max_count10: number[] = [];\n  let paren_level_max_count11: number[] = [];\n  let paren_level_max_count12: number[] = [];\n  let paren_level_max_count13: number[] = [];\n  let paren_level_max_count14: number[] = [];\n  let paren_level_max_count15: number[] = [];\n  let paren_level_max_count16: number[] = [];\n  let paren_level_max_count17: number[] = [];\n  let paren_level_max_count18: number[] = [];\n  let paren_level_max_count19: number[] = [];\n  let paren_level_max_count20: number[] = [];\n  let paren_level_max_count21: number[] = [];\n  let paren_level_max_count22: number[] = [];\n  let paren_level_max_count23: number[] = [];\n  let paren_level_max_count24: number[] = [];\n  let paren_level_max_count25: number[] = [];\n  let paren_level_max_count26: number[] = [];\n  let paren_level_max_count27: number[] = [];\n  let paren_level_max_count28: number[] = [];\n  let paren_level_max_count29: number[] = [];\n  let paren_level_max_count30: number[] = [];\n  let paren_level_max_count31: number[] = [];\n  let paren_level_max_count32: number[] = [];\n  let paren_level_max_count33: number[] = [];\n  let paren_level_max_count34: number[] = [];\n  let paren_level_max_count35: number[] = [];\n  let paren_level_max_count36: number[] = [];\n  let paren_level_max_count37: number[] = [];\n  let paren_level_max_count38: number[] = [];\n  let paren_level_max_count39: number[] = [];\n  let paren_level_max_count40: number[] = [];\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpyi3_666z.ts(63,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334780
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  let paren_level_max = 0;\n  let paren_level_max_index = 0;\n  let paren_level_max_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_count += 1;\n    } else if (char === ')') {\n      paren_level_count -= 1;\n      if (paren_level_count === 0) {\n        paren_level.push(paren_level_count);\n        paren_level_count += 1;\n      }\n    } else if (char === ' ') {\n      if (paren_level_count === 0) {\n        paren_level.push(paren_level_count);\n        paren_level_count += 1;\n      }\n    } else {\n      paren_level_count -= 1;\n    }\n    if (paren_level_count === 0) {\n      paren_level.push(paren_level_count);\n      paren_level_count += 1;\n    }\n    if (paren_level_count > paren_level_max) {\n      paren_level_max = paren_level_count;\n      paren_level_max_index = i;\n      paren_level_max_count = paren_level_count;\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpqtonbgnf.js:50:12)\n    at Object.<anonymous> (/tmp/tmpqtonbgnf.js:54:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334781
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  let paren_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_count);\n      paren_count++;\n    } else if (char === ')') {\n      paren_count--;\n    }\n  }\n  return paren_stack;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  1,\n  0,\n  1,\n  2,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp2xngem7q.js:24:12)\n    at Object.<anonymous> (/tmp/tmp2xngem7q.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0, 1, 1, 0, 1,\n    2, 0, 0, 1, 2,\n    1, 1\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334780
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === \"(\") {\n      paren_stack.push(paren_string[i]);\n      paren_level_count += 1;\n    } else if (paren_string[i] === \")\") {\n      paren_level_count -= 1;\n      if (paren_level_count === 0) {\n        paren_level.push(paren_stack.length);\n        paren_stack.shift();\n      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  5,\n  5,\n  9\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpakchb4fg.js:28:12)\n    at Object.<anonymous> (/tmp/tmpakchb4fg.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 5, 5, 9 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334780
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_count = 0;\n  let paren_level_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_count);\n      paren_level_count += 1;\n    } else if (char === ')') {\n      paren_count -= 1;\n      paren_level_count -= 1;\n      if (paren_count === 0) {\n        paren_level.push(paren_level_count);\n      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpngftxfhx.ts(14,24): error TS2345: Argument of type 'number' is not assignable to parameter of type 'string'.\n",
      "timestamp": 1660334780
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const groups = paren_string.trim().split(/\\s+/);\n  const max_level = groups.length - 1;\n  const levels = new Array(max_level).fill(0);\n  for (let i = 0; i < groups.length; i++) {\n    const group = groups[i];\n    if (group === \"(\") {\n      levels[max_level]++;\n    } else if (group === \")\") {\n      levels[max_level]--;\n    }\n  }\n  return levels.slice(0, max_level + 1);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpip9sewxm.js:24:12)\n    at Object.<anonymous> (/tmp/tmpip9sewxm.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0, 0 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334781
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level.length);\n      paren_level.push(0);\n    } else if (char === ')') {\n      const level = paren_stack.pop();\n      paren_level[level] = paren_level[level] - 1;\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpnqtflil2.js:25:12)\n    at Object.<anonymous> (/tmp/tmpnqtflil2.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    -1, -1, -1, -1, -1,\n    -1, -1, -1, -1, -1,\n    -1, -1\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334783
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const groups = paren_string.split(\" \");\n  const max_level = 0;\n  for (let i = 0; i < groups.length; i++) {\n    const group = groups[i];\n    const level = getMaxLevel(group);\n    if (level > max_level) {\n      max_level = level;\n    }\n  }\n  return max_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp9zlw42xi.ts(11,19): error TS2552: Cannot find name 'getMaxLevel'. Did you mean 'max_level'?\n../../../../tmp/tmp9zlw42xi.ts(13,7): error TS2588: Cannot assign to 'max_level' because it is a constant.\n../../../../tmp/tmp9zlw42xi.ts(16,3): error TS2322: Type 'number' is not assignable to type 'number[]'.\n",
      "timestamp": 1660334783
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    const paren_stack: number[] = [];\n    let paren_count = 0;\n    for (let i = 0; i < paren_string.length; i++) {\n        const char = paren_string[i];\n        if (char === '(') {\n            paren_stack.push(paren_count);\n            paren_count++;\n        } else if (char === ')') {\n            paren_count--;\n        }\n    }\n    return paren_stack;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  1,\n  0,\n  1,\n  2,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpsfit19yy.js:24:12)\n    at Object.<anonymous> (/tmp/tmpsfit19yy.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0, 1, 1, 0, 1,\n    2, 0, 0, 1, 2,\n    1, 1\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334784
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count: number = 0;\n  let paren_level_max: number = 0;\n  let paren_level_max_index = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_count += 1;\n    } else if (char === ')') {\n      paren_level_count -= 1;\n      if (paren_level_count === 0) {\n        paren_level_max = Math.max(paren_level_max, paren_stack[paren_level_max_index]);\n        paren_level_max_index = paren_level_max_index + 1;\n      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp7dtc_se3.ts(15,24): error TS2345: Argument of type 'number' is not assignable to parameter of type 'string'.\n../../../../tmp/tmp7dtc_se3.ts(20,53): error TS2345: Argument of type 'string' is not assignable to parameter of type 'number'.\n",
      "timestamp": 1660334783
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count_index: number[] = [];\n  let paren_level_max_count_index2: number[] = [];\n  let paren_level_max_count_index3: number[] = [];\n  let paren_level_max_count_index4: number[] = [];\n  let paren_level_max_count_index5: number[] = [];\n  let paren_level_max_count_index6: number[] = [];\n  let paren_level_max_count_index7: number[] = [];\n  let paren_level_max_count_index8: number[] = [];\n  let paren_level_max_count_index9: number[] = [];\n  let paren_level_max_count_index10: number[] = [];\n  let paren_level_max_count_index11: number[] = [];\n  let paren_level_max_count_index12: number[] = [];\n  let paren_level_max_count_index13: number[] = [];\n  let paren_level_max_count_index14: number[] = [];\n  let paren_level_max_count_index15: number[] = [];\n  let paren_level_max_count_index16: number[] = [];\n  let paren_level_max_count_index17: number[] = [];\n  let paren_level_max_count_index18: number[] = [];\n  let paren_level_max_count_index19: number[] = [];\n  let paren_level_max_count_index20: number[] = [];\n  let paren_level_max_count_index21: number[] = [];\n  let paren_level_max_count_index22: number[] = [];\n  let paren_level_max_count_index23: number[] = [];\n  let paren_level_max_count_index24: number[] = [];\n  let paren_level_max_count_index25: number[] = [];\n  let paren_level_max_count_index26: number[] = [];\n  let paren_level_max_count_index27: number[] = [];\n  let paren_level_max_count_index28: number[] = [];\n  let paren_level_max_count_index29: number[] = [];\n  let paren_level_max_count_index30: number[] = [];\n  let paren_level_max_count_index31: number[] = [];\n  let paren_level_max_count_index32: number[] = [];\n  let paren_level_max_count_index33: number[] = [];\n  let paren_level_max_count_index34: number[] = [];\n  let paren_level_max_count_index35: number[] = [];\n  let paren_level_max_count_index36: number[] = [];\n  let paren_level_max_count_index37: number[] = [];\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp14b3vz51.ts(60,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334783
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  let paren_level_max = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_max++;\n    } else if (char === ')') {\n      paren_level_count = paren_stack.pop();\n      paren_level_max--;\n    }\n    paren_level.push(paren_level_count);\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpwvughjuw.js:28:12)\n    at Object.<anonymous> (/tmp/tmpwvughjuw.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEq",
      "stdout": "",
      "timestamp": 1660334784
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level.push(paren_level_count);\n      paren_level_count++;\n    } else if (char === ')') {\n      paren_level_count--;\n      if (paren_level_count === 0) {\n        paren_level.push(paren_level_count);\n      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  1,\n  0,\n  0,\n  1,\n  2,\n  0,\n  0,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpew79coj6.js:29:12)\n    at Object.<anonymous> (/tmp/tmpew79coj6.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0, 1, 1, 0, 0, 1,\n    2, 0, 0, 0, 0, 1,\n    2, 1, 1, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334784
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const groups = paren_string.trim().split(/\\s+/);\n  const max_level = Math.max(...groups.map(g => g.length));\n  const levels = new Array(max_level).fill(0);\n  for (let i = 0; i < groups.length; i++) {\n    const group = groups[i];\n    for (let j = 0; j < group.length; j++) {\n      levels[group[j]] += 1;\n    }\n  }\n  return levels;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  '(': NaN,\n  ')': NaN\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmphwfy5do_.js:21:12)\n    at Object.<anonymous> (/tmp/tmphwfy5do_.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '(': NaN, ')': NaN ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334784
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  let paren_level_max = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_max++;\n    } else if (char === ')') {\n      paren_level_count = paren_stack.pop();\n      paren_level[paren_level_count] = paren_level_max;\n      paren_level_max--;\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpwj4perp_.js:28:12)\n    at Object.<anonymous> (/tmp/tmpwj4perp_.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334784
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  let paren_level_max = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_max = (paren_level_count > paren_level_max) ? paren_level_count : paren_level_max;\n      paren_level_count = 0;\n    } else if (char === ')') {\n      paren_level_count = paren_stack.pop();\n      paren_level_max = (paren_level_count > paren_level_max) ? paren_level_count : paren_level_max;\n    }\n    paren_level.push(paren_level_count);\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp1o5sj_ln.js:29:12)\n    at Object.<anonymous> (/tmp/tmp1o5sj_ln.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEq",
      "stdout": "",
      "timestamp": 1660334784
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count: number = 0;\n  let paren_level_max: number = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_max++;\n    } else if (char === ')') {\n      paren_level_count = paren_stack.pop();\n      paren_level[paren_level_count] = paren_level_max;\n      paren_level_max--;\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpvivxu054.js:28:12)\n    at Object.<anonymous> (/tmp/tmpvivxu054.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334784
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_count += 1;\n    } else if (char === ')') {\n      paren_level_count -= 1;\n      paren_level[paren_stack.pop()] = paren_level_count;\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmphl61jp2u.js:26:12)\n    at Object.<anonymous> (/tmp/tmphl61jp2u.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 2 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334780
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  const paren_level_count: number[] = [];\n  let paren_level_index: number[] = [];\n  let paren_level_length: number[] = [];\n  let paren_level_length_count: number[] = [];\n  let paren_level_length_max: number[] = [];\n  let paren_level_length_max_count: number[] = [];\n  let paren_level_length_max_index: number[] = [];\n  let paren_level_length_max_length: number[] = [];\n  let paren_level_length_max_length_count: number[] = [];\n  let paren_level_length_max_length_max: number[] = [];\n  let paren_level_length_max_length_max_count: number[] = [];\n  let paren_level_length_max_length_max_index: number[] = [];\n  let paren_level_length_max_length_max_length: number[] = [];\n  let paren_level_length_max_length_max_length_count: number[] = [];\n  let paren_level_length_max_length_max_length_max: number[] = [];\n  let paren_level_length_max_length_max_length_max_count: number[] = [];\n  let paren_level_length_max_length_max_length_max_index: number[] = [];\n  let paren_level_length_max_length_max_length_max_length: number[] = [];\n  let paren_level_length_max_length_max_length_max_length_count: number[] = [];\n  let paren_level_length_max_length_max_length_max_length_max: number[] = [];\n  let paren_level_length_max_length_max_length_max_length_max_count: number[] = [];\n  let paren_level_length_max_length_max_length_max_length_max_index: number[] = [];\n  let paren_level_length_max_length_max_length_max_length_max_length: number[] = [];\n  let paren_level_length_max_length_max_length_max_length_max_length_count: number[] = [];\n  let paren_level_length_max_length_max_length_max_length_max_length_max: number[] = [];\n  let paren_level_length_max_length_max_length_max_length_max_length_max_count: number[] = [];\n  let paren_level_length_max_length_max_length_max_length_max_length_max_index: number[] = [];\n  let paren_level_length_max_length_max_length_max_length_max_length_max: number[] = [];\n  let paren_level_length_max_length_max_length_max_length_max_length_max_length: number[] = [];\n  let paren_level_length_max_length_max_length_max_length_max_length_max_length_count: number[] = [];\n  let paren_level_length_max_length_max_length_max_length_max_length_max_length_max: number[] = [];\n  let paren_level_length_max_length_max_length_max_length_max_length_max_length_max_count: number[] = [];\n  let paren_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpiwqtb2wb.ts(53,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334784
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  let paren_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_count);\n      paren_count++;\n    } else if (char === ')') {\n      paren_count = paren_stack.pop();\n    }\n  }\n  return paren_stack;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpmdurcvr7.js:24:12)\n    at Object.<anonymous> (/tmp/tmpmdurcvr7.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334784
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === \"(\") {\n      paren_stack.push(paren_level_count);\n      paren_level_count += 1;\n    } else if (paren_string[i] === \")\") {\n      paren_level_count -= 1;\n      if (paren_level_count === 0) {\n        paren_level.push(paren_stack.pop());\n      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  0,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmptffp62ob.js:27:12)\n    at Object.<anonymous> (/tmp/tmptffp62ob.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 0, 1 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334784
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level.length);\n      paren_level.push(0);\n    } else if (char === ')') {\n      paren_level.pop();\n      paren_stack.push(paren_level.length);\n    } else if (char === ' ') {\n      paren_level[paren_stack.pop()] += 1;\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  NaN,\n  NaN,\n  NaN\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpojt37exr.js:28:12)\n    at Object.<anonymous> (/tmp/tmpojt37exr.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ NaN, NaN, NaN ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334784
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === \"(\") {\n      paren_stack.push(paren_level_count);\n      paren_level_count += 1;\n    } else if (paren_string[i] === \")\") {\n      paren_level_count -= 1;\n      if (paren_level_count === 0) {\n        paren_level.push(paren_stack.pop());\n      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  0,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmptffp62ob.js:27:12)\n    at Object.<anonymous> (/tmp/tmptffp62ob.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 0, 1 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334784
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    const paren_stack: string[] = [];\n    const paren_level: number[] = [];\n    const paren_level_max: number[] = [];\n    const paren_level_max_index: number[] = [];\n    const paren_level_max_value: number[] = [];\n    const paren_level_max_value_len: number[] = [];\n    const paren_level_max_value_len_index: number[] = [];\n    const paren_level_max_value_len_value: number[] = [];\n    const paren_level_max_value_len_value_index: number[] = [];\n    const paren_level_max_value_len_value_value: number[] = [];\n    const paren_level_max_value_len_value_value_index: number[] = [];\n    const paren_level_max_value_len_value_value_value: number[] = [];\n    const paren_level_max_value_len_value_value_value_index: number[] = [];\n    const paren_level_max_value_len_value_value_value_value: number[] = [];\n    const paren_level_max_value_len_value_value_value_index: number[] = [];\n    const paren_level_max_value_len_value_value_value_value: number[] = [];\n    const paren_level_max_value_len_value_value_value_index: number[] = [];\n    const paren_level_max_value_len_value_value_value_value: number[] = [];\n    const paren_level_max_value_len_value_value_value_index: number[] = [];\n    const paren_level_max_value_len_value_value_value_value: number[] = [];\n    const paren_level_max_value_len_value_value_value_index: number[] = [];\n    const paren_level_max_value_len_value_value_value_value: number[] = [];\n    const paren_level_max_value_len_value_value_value_index: number[] = [];\n    const paren_level_max_value_len_value_value_value_value: number[] = [];\n    const paren_level_max_value_len_value_value_value_index: number[] = [];\n    const paren_level_max_value_len_value_value_value_value: number[] = [];\n    const paren_level_max_value_len_value_value_value_index: number[] = [];\n    const paren_level_max_value_len_value_value_value_value: number[] = [];\n    const paren_level_max_value_len_value_value_value_index: number[] = [];\n    const paren_level_max_value_len_value_value_value_value: number[] = [];\n    const paren_level_max_value_len_value_value_value_index: number[] = [];\n    const paren_level_max_value_len_value_value_value_value: number[] = [];\n    const paren_level_max_value_len_value_value_value_index: number[] = [];\n    const paren_level_max_value_len_value_value_value_value: number[] = [];\n    const paren_level_max_value_len_value_value_value_index: number[] = [];\n    const \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp50lxriu3.ts(43,9): error TS1005: ',' expected.\n../../../../tmp/tmp50lxriu3.ts(54,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334784
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count: number = 0;\n\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level.push(paren_level_count);\n      paren_level_count++;\n    } else if (char === ')') {\n      paren_level_count--;\n      if (paren_level_count === 0) {\n        paren_level.push(paren_level_count);\n      }\n    }\n  }\n\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  1,\n  0,\n  0,\n  1,\n  2,\n  0,\n  0,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpejzg8gvv.js:29:12)\n    at Object.<anonymous> (/tmp/tmpejzg8gvv.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0, 1, 1, 0, 0, 1,\n    2, 0, 0, 0, 0, 1,\n    2, 1, 1, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334784
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level.push(paren_level_count);\n      paren_level_count++;\n    } else if (char === ')') {\n      paren_level_count--;\n      paren_level.pop();\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp9pr4_f3m.js:27:12)\n    at Object.<anonymous> (/tmp/tmp9pr4_f3m.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334784
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_count += 1;\n    } else if (char === ')') {\n      paren_level_count -= 1;\n      paren_level[paren_stack.pop()] = paren_level_count;\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmphl61jp2u.js:26:12)\n    at Object.<anonymous> (/tmp/tmphl61jp2u.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 2 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334780
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  let paren_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_count);\n      paren_count++;\n    } else if (char === ')') {\n      paren_count--;\n      if (paren_count < 0) {\n        throw new Error(`Unbalanced parenthesis at ${i}`);\n      }\n    }\n  }\n  return paren_stack;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  1,\n  0,\n  1,\n  2,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpvkth2rmo.js:27:12)\n    at Object.<anonymous> (/tmp/tmpvkth2rmo.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0, 1, 1, 0, 1,\n    2, 0, 0, 1, 2,\n    1, 1\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334784
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count: number = 0;\n  let paren_level_max_count: number = 0;\n  let paren_level_max_level: number = 0;\n  let paren_level_max_level_length: number = 0;\n  let paren_level_max_level_length_count: number = 0;\n  let paren_level_max_level_length_count2: number = 0;\n  let paren_level_max_level_length_count3: number = 0;\n  let paren_level_max_level_length_count4: number = 0;\n  let paren_level_max_level_length_count5: number = 0;\n  let paren_level_max_level_length_count6: number = 0;\n  let paren_level_max_level_length_count7: number = 0;\n  let paren_level_max_level_length_count8: number = 0;\n  let paren_level_max_level_length_count9: number = 0;\n  let paren_level_max_level_length_count10: number = 0;\n  let paren_level_max_level_length_count11: number = 0;\n  let paren_level_max_level_length_count12: number = 0;\n  let paren_level_max_level_length_count13: number = 0;\n  let paren_level_max_level_length_count14: number = 0;\n  let paren_level_max_level_length_count15: number = 0;\n  let paren_level_max_level_length_count16: number = 0;\n  let paren_level_max_level_length_count17: number = 0;\n  let paren_level_max_level_length_count18: number = 0;\n  let paren_level_max_level_length_count19: number = 0;\n  let paren_level_max_level_length_count20: number = 0;\n  let paren_level_max_level_length_count21: number = 0;\n  let paren_level_max_level_length_count22: number = 0;\n  let paren_level_max_level_length_count23: number = 0;\n  let paren_level_max_level_length_count24: number = 0;\n  let paren_level_max_level_length_count25: number = 0;\n  let paren_level_max_level_length_count26: number = 0;\n  let paren_level_max_level_length_count27: number = 0;\n  let paren_level_max_level_length_count28: number = 0;\n  let paren_level_max_level_length_count29: number = 0;\n  let paren_level_max_level_length_count30: number = 0;\n  let paren_level_max_level_length_count31: number = 0;\n  let paren_level_max_level_length_count32: number = 0;\n  let paren_level_max_level_length_count33: number = 0;\n  let paren_level_max_level_length_count34: number = 0;\n  let paren_level_max_level_length_count35: number = 0;\n  let paren_level_max_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpsxwuayiw.ts(60,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334784
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  let paren_level_max = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_max = Math.max(paren_level_max, paren_stack.length - 1);\n      paren_level_count += 1;\n    } else if (char === ')') {\n      paren_level_count -= 1;\n      if (paren_level_count === 0) {\n        paren_stack.push(paren_level_count);\n      }\n    }\n  }\n  return paren_stack;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  1,\n  0,\n  0,\n  1,\n  2,\n  0,\n  0,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpbfz91l0i.js:30:12)\n    at Object.<anonymous> (/tmp/tmpbfz91l0i.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0, 1, 1, 0, 0, 1,\n    2, 0, 0, 0, 0, 1,\n    2, 1, 1, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334780
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === \"(\") {\n      paren_stack.push(paren_string[i]);\n      paren_level.push(paren_count);\n      paren_count++;\n    } else if (paren_string[i] === \")\") {\n      paren_count--;\n      if (paren_count === 0) {\n        paren_stack.push(paren_string[i]);\n        paren_level.push(paren_count);\n      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  1,\n  0,\n  0,\n  1,\n  2,\n  0,\n  0,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp95l_x46f.js:29:12)\n    at Object.<anonymous> (/tmp/tmp95l_x46f.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0, 1, 1, 0, 0, 1,\n    2, 0, 0, 0, 0, 1,\n    2, 1, 1, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334784
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const groups = paren_string.trim().split(/\\s+/);\n  const max_level = groups.length - 1;\n  const levels: number[] = [];\n  for (let i = 0; i < max_level; i++) {\n    levels.push(0);\n  }\n  for (let i = 0; i < groups.length; i++) {\n    const group = groups[i];\n    for (let j = 0; j < group.length; j++) {\n      if (group[j] === \"(\") {\n        levels[i] += 1;\n      } else if (group[j] === \")\") {\n        levels[i] -= 1;\n      }\n    }\n  }\n  return levels;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n  0,\n  NaN\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp6tyaft46.js:29:12)\n    at Object.<anonymous> (/tmp/tmp6tyaft46.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0, 0, NaN ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334784
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  let paren_level_max = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_max = Math.max(paren_level_max, paren_stack.length);\n      paren_level_count++;\n    } else if (char === ')') {\n      paren_level_count--;\n      paren_level[paren_stack.pop()] = paren_level_count;\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp5jbkgh6c.js:28:12)\n    at Object.<anonymous> (/tmp/tmp5jbkgh6c.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 2 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334785
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  let paren_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      paren_stack.push(paren_count);\n      paren_count++;\n    } else if (paren_string[i] === ')') {\n      paren_count--;\n    }\n  }\n  return paren_stack;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  1,\n  0,\n  1,\n  2,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp5x0ipzm_.js:23:12)\n    at Object.<anonymous> (/tmp/tmp5x0ipzm_.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0, 1, 1, 0, 1,\n    2, 0, 0, 1, 2,\n    1, 1\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334787
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_count += 1;\n    } else if (char === ')') {\n      paren_level_count -= 1;\n      paren_level[paren_stack.pop()] = paren_level_count;\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmphl61jp2u.js:26:12)\n    at Object.<anonymous> (/tmp/tmphl61jp2u.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 2 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334780
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level.length);\n      paren_level.push(0);\n    } else if (char === ')') {\n      const level = paren_stack.pop();\n      paren_level[level] = paren_level[level] - 1;\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpnqtflil2.js:25:12)\n    at Object.<anonymous> (/tmp/tmpnqtflil2.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    -1, -1, -1, -1, -1,\n    -1, -1, -1, -1, -1,\n    -1, -1\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334783
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(char);\n      paren_level.push(0);\n    } else if (char === ')') {\n      const level = paren_stack.pop();\n      paren_level.push(paren_level[level - 1] + 1);\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpz6bk2pdo.ts(16,36): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "timestamp": 1660334786
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  let paren_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      paren_stack.push(paren_count);\n      paren_count++;\n    } else if (paren_string[i] === ')') {\n      paren_count = paren_stack.pop();\n    }\n  }\n  return paren_stack;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpx8ooq9jr.ts(11,24): error TS2345: Argument of type 'number' is not assignable to parameter of type 'string'.\n../../../../tmp/tmpx8ooq9jr.ts(14,7): error TS2322: Type 'string' is not assignable to type 'number'.\n../../../../tmp/tmpx8ooq9jr.ts(17,3): error TS2322: Type 'string[]' is not assignable to type 'number[]'.\n  Type 'string' is not assignable to type 'number'.\n",
      "timestamp": 1660334787
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    const paren_stack: number[] = [];\n    const paren_level: number[] = [];\n    let paren_level_count = 0;\n    let paren_level_max = 0;\n    for (let i = 0; i < paren_string.length; i++) {\n        const char = paren_string[i];\n        if (char === '(') {\n            paren_stack.push(paren_level_count);\n            paren_level_max++;\n        } else if (char === ')') {\n            paren_level_count = paren_stack.pop();\n            paren_level[paren_level_count] = paren_level_max;\n            paren_level_max--;\n        }\n    }\n    return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpgtooyyve.js:28:12)\n    at Object.<anonymous> (/tmp/tmpgtooyyve.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334787
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level.push(0);\n    } else if (char === ')') {\n      const paren_level = paren_stack.pop();\n      const paren_level_diff = paren_level.length - paren_level[paren_level.length - 1];\n      paren_level.push(paren_level[paren_level.length - 1] + paren_level_diff);\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpirc6nzqg.ts(16,53): error TS2363: The right-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n../../../../tmp/tmpirc6nzqg.ts(17,19): error TS2339: Property 'push' does not exist on type 'string'.\n",
      "timestamp": 1660334787
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count: number = 0;\n  let paren_level_max: number = 0;\n  let paren_level_max_index: number = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_count += 1;\n    } else if (char === ')') {\n      paren_level_count -= 1;\n      paren_level_max = Math.max(paren_level_max, paren_stack[paren_level_max_index]);\n      paren_level_max_index = paren_stack.indexOf(paren_level_max);\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpfriyroy4.js:29:12)\n    at Object.<anonymous> (/tmp/tmpfriyroy4.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334787
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_level: number[] = [];\n  let paren_level_max_level_length: number[] = [];\n  let paren_level_max_level_length_count: number[] = [];\n  let paren_level_max_level_length_count2: number[] = [];\n  let paren_level_max_level_length_count3: number[] = [];\n  let paren_level_max_level_length_count4: number[] = [];\n  let paren_level_max_level_length_count5: number[] = [];\n  let paren_level_max_level_length_count6: number[] = [];\n  let paren_level_max_level_length_count7: number[] = [];\n  let paren_level_max_level_length_count8: number[] = [];\n  let paren_level_max_level_length_count9: number[] = [];\n  let paren_level_max_level_length_count10: number[] = [];\n  let paren_level_max_level_length_count11: number[] = [];\n  let paren_level_max_level_length_count12: number[] = [];\n  let paren_level_max_level_length_count13: number[] = [];\n  let paren_level_max_level_length_count14: number[] = [];\n  let paren_level_max_level_length_count15: number[] = [];\n  let paren_level_max_level_length_count16: number[] = [];\n  let paren_level_max_level_length_count17: number[] = [];\n  let paren_level_max_level_length_count18: number[] = [];\n  let paren_level_max_level_length_count19: number[] = [];\n  let paren_level_max_level_length_count20: number[] = [];\n  let paren_level_max_level_length_count21: number[] = [];\n  let paren_level_max_level_length_count22: number[] = [];\n  let paren_level_max_level_length_count23: number[] = [];\n  let paren_level_max_level_length_count24: number[] = [];\n  let paren_level_max_level_length_count25: number[] = [];\n  let paren_level_max_level_length_count26: number[] = [];\n  let paren_level_max_level_length_count27: number[] = [];\n  let paren_level_max_level_length_count28: number[] = [];\n  let paren_level_max_level_length_count29: number[] = [];\n  let paren_level_max_level_length_count30: number[] = [];\n  let paren_level_max_level_length_count31: number[] = [];\n  let paren_level_max_level_length_count32: number[] = [];\n  let paren_level_max_level_length_count33\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpomlwq9b8.ts(57,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334787
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  let paren_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_count);\n      paren_count++;\n    } else if (char === ')') {\n      paren_count--;\n    }\n  }\n  return paren_stack;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  1,\n  0,\n  1,\n  2,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp2xngem7q.js:24:12)\n    at Object.<anonymous> (/tmp/tmp2xngem7q.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0, 1, 1, 0, 1,\n    2, 0, 0, 1, 2,\n    1, 1\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334780
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count: number = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_count += 1;\n    } else if (char === ')') {\n      paren_level_count -= 1;\n      paren_level[paren_stack.pop()] = paren_level_count;\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp_yp2k394.js:26:12)\n    at Object.<anonymous> (/tmp/tmp_yp2k394.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 2 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334781
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  let paren_level_max = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level_max++;\n    } else if (char === ')') {\n      paren_level_count++;\n      if (paren_level_count > paren_level_max) {\n        paren_level_max = paren_level_count;\n      }\n      paren_level.pop();\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp5l88gjhe.js:30:12)\n    at Object.<anonymous> (/tmp/tmp5l88gjhe.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334787
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  let paren_level_max = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_max = Math.max(paren_level_max, paren_stack.length - 1);\n      paren_level_count += 1;\n    } else if (char === ')') {\n      paren_level_count -= 1;\n      paren_level[paren_stack.pop()] = paren_level_count;\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpy7aicl3i.js:28:12)\n    at Object.<anonymous> (/tmp/tmpy7aicl3i.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 2 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334788
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  let paren_level_max = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_max = Math.max(paren_level_max, paren_stack.length - 1);\n      paren_level_count += 1;\n    } else if (char === ')') {\n      paren_level_count -= 1;\n      paren_level[paren_stack.pop()] = paren_level_count;\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpy7aicl3i.js:28:12)\n    at Object.<anonymous> (/tmp/tmpy7aicl3i.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 2 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334788
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count: number = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level.push(paren_level_count);\n      paren_level_count++;\n    } else if (char === ')') {\n      paren_level_count--;\n      if (paren_level_count === 0) {\n        paren_level.push(paren_level_count);\n      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  1,\n  0,\n  0,\n  1,\n  2,\n  0,\n  0,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp95g60b3c.js:29:12)\n    at Object.<anonymous> (/tmp/tmp95g60b3c.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0, 1, 1, 0, 0, 1,\n    2, 0, 0, 0, 0, 1,\n    2, 1, 1, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334788
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const groups = paren_string.match(/\\(([^()]+)\\)/) || [];\n  return groups.map(group => group.length);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpfmmjo7eb.js:13:12)\n    at Object.<anonymous> (/tmp/tmpfmmjo7eb.js:17:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334788
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === \"(\") {\n      paren_stack.push(paren_string[i]);\n      paren_level.push(0);\n    } else if (paren_string[i] === \")\") {\n      paren_level[paren_stack.length - 1]++;\n      paren_stack.pop();\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  6,\n  2,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp_ud2uj8g.js:24:12)\n    at Object.<anonymous> (/tmp/tmp_ud2uj8g.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    4, 6, 2, 0, 0,\n    0, 0, 0, 0, 0,\n    0, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334788
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    const paren_stack: string[] = [];\n    const paren_level: number[] = [];\n    let paren_count = 0;\n    let paren_level_count = 0;\n    for (let i = 0; i < paren_string.length; i++) {\n        const char = paren_string[i];\n        if (char === '(') {\n            paren_stack.push(paren_count);\n            paren_level_count += 1;\n        } else if (char === ')') {\n            paren_count -= 1;\n            paren_level[paren_stack.pop()] = paren_level_count;\n            paren_level_count -= 1;\n        }\n    }\n    return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpm_jxnv_a.ts(14,30): error TS2345: Argument of type 'number' is not assignable to parameter of type 'string'.\n",
      "timestamp": 1660334787
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count: number = 0;\n  let paren_level_max: number = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level.push(paren_level_count);\n      paren_level_count++;\n    } else if (char === ')') {\n      paren_level_count--;\n      if (paren_level_count === 0) {\n        paren_level_max = Math.max(...paren_level);\n      }\n      paren_level.splice(paren_level.indexOf(paren_level_count), 1);\n      paren_stack.splice(paren_stack.indexOf(paren_string[i]), 1);\n    }\n  }\n  return paren_level_max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpmulg3yuo.ts(26,3): error TS2322: Type 'number' is not assignable to type 'number[]'.\n",
      "timestamp": 1660334788
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  let paren_level_max = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_max = Math.max(paren_level_max, paren_stack.length - 1);\n      paren_level_count += 1;\n    } else if (char === ')') {\n      paren_level_count -= 1;\n      paren_level[paren_stack.pop()] = paren_level_count;\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpy7aicl3i.js:28:12)\n    at Object.<anonymous> (/tmp/tmpy7aicl3i.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 2 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334788
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  let paren_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_count);\n      paren_count++;\n    } else if (char === ')') {\n      paren_count = paren_stack.pop();\n    }\n  }\n  return paren_stack;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpmdurcvr7.js:24:12)\n    at Object.<anonymous> (/tmp/tmpmdurcvr7.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334784
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count: number[] = [];\n  let paren_level_max: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_index: number[] = [];\n  let paren_level_max_value: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpjuiypo5h.ts(66,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334788
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    const paren_stack: string[] = [];\n    const paren_level: number[] = [];\n    let paren_level_count: number[] = [];\n    let paren_level_max: number[] = [];\n    let paren_level_max_count: number[] = [];\n    let paren_level_max_index: number[] = [];\n    let paren_level_max_value: number[] = [];\n    let paren_level_max_value_count: number[] = [];\n    let paren_level_max_value_count: number[] = [];\n    let paren_level_max_value_count: number[] = [];\n    let paren_level_max_value_count: number[] = [];\n    let paren_level_max_value_count: number[] = [];\n    let paren_level_max_value_count: number[] = [];\n    let paren_level_max_value_count: number[] = [];\n    let paren_level_max_value_count: number[] = [];\n    let paren_level_max_value_count: number[] = [];\n    let paren_level_max_value_count: number[] = [];\n    let paren_level_max_value_count: number[] = [];\n    let paren_level_max_value_count: number[] = [];\n    let paren_level_max_value_count: number[] = [];\n    let paren_level_max_value_count: number[] = [];\n    let paren_level_max_value_count: number[] = [];\n    let paren_level_max_value_count: number[] = [];\n    let paren_level_max_value_count: number[] = [];\n    let paren_level_max_value_count: number[] = [];\n    let paren_level_max_value_count: number[] = [];\n    let paren_level_max_value_count: number[] = [];\n    let paren_level_max_value_count: number[] = [];\n    let paren_level_max_value_count: number[] = [];\n    let paren_level_max_value_count: number[] = [];\n    let paren_level_max_value_count: number[] = [];\n    let paren_level_max_value_count: number[] = [];\n    let paren_level_max_value_count: number[] = [];\n    let paren_level_max_value_count: number[] = [];\n    let paren_level_max_value_count: number[] = [];\n    let paren_level_max_value_count: number[] = [];\n    let paren_level_max_value_count: number[] = [];\n    let paren_level_max_value_count: number[] = [];\n    let paren_level_max_value_count: number[] = [];\n    let paren_level_max_value_count: number[] = [];\n    let paren_level_max_value_count: number[] = [];\n    let paren_level_max_value_count: number[] = [];\n    let paren_level_max_value_count: number[] = [];\n    let paren_level_max_value_count: number[] = [];\n    let paren_level_max_value_count: number[] = [];\n    let paren_level_max_value_count: number[] = [];\n    let paren_level_max_value_count: number[] = [];\n    let paren_level_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpwpf6gw8t.ts(66,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334788
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  let paren_level_max = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level.push(paren_level_count);\n      paren_level_count++;\n    } else if (paren_string[i] === ')') {\n      paren_level_count--;\n      if (paren_level_count < 0) {\n        throw new Error(`Unbalanced parenthesis at ${i}`);\n      }\n      if (paren_level_count > paren_level_max) {\n        paren_level_max = paren_level_count;\n      }\n      paren_level.push(paren_level_count);\n      paren_stack.push(paren_string[i]);\n    } else {\n      paren_level_count--;\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmp4eketw0u.js:20\n                throw new Error(`Unbalanced parenthesis at ${i}`);\n                ^\n\nError: Unbalanced parenthesis at 12\n    at parse_nested_parens (/tmp/tmp4eketw0u.js:20:23)\n    at test (/tmp/tmp4eketw0u.js:37:22)\n    at Object.<anonymous> (/tmp/tmp4eketw0u.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334788
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count: number = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level.push(paren_level_count);\n      paren_level_count++;\n    } else if (char === ')') {\n      paren_level_count--;\n      if (paren_level_count === 0) {\n        paren_level.push(paren_level_count);\n      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  1,\n  0,\n  0,\n  1,\n  2,\n  0,\n  0,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp95g60b3c.js:29:12)\n    at Object.<anonymous> (/tmp/tmp95g60b3c.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0, 1, 1, 0, 0, 1,\n    2, 0, 0, 0, 0, 1,\n    2, 1, 1, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334788
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  let paren_level_max = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === \"(\") {\n      paren_stack.push(paren_string[i]);\n      paren_level_max++;\n    } else if (paren_string[i] === \")\") {\n      paren_level_count--;\n      if (paren_level_count < 0) {\n        paren_level_count = 0;\n      }\n      paren_level[paren_level_max] = paren_level_count;\n      paren_level_max--;\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  <1 empty item>,\n  0,\n  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpc7kxf65k.js:30:12)\n    at Object.<anonymous> (/tmp/tmpc7kxf65k.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ <1 empty item>, 0, 0, 0 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334788
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count: number = 0;\n  let paren_level_max: number = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level_count++;\n    } else if (char === ')') {\n      paren_level_count--;\n      if (paren_level_count === 0) {\n        paren_level_max++;\n      }\n      paren_level[paren_level_max] = paren_level_count;\n      paren_stack.push(paren_string[i]);\n    } else if (char === ' ') {\n      paren_level_count = 0;\n      paren_level_max = 0;\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpictyumpx.js:35:12)\n    at Object.<anonymous> (/tmp/tmpictyumpx.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 0 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334788
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const groups = paren_string.trim().split(/\\s+/);\n  const max_level = Math.max(...groups.map(group => group.match(/[^()]+/g).length));\n  const levels = groups.map(group => group.match(/[^()]+/g).length);\n  return levels.map(level => level > max_level ? max_level : level);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpw9clovia.js:8\n    const max_level = Math.max(...groups.map(group => group.match(/[^()]+/g).length));\n                                                                            ^\n\nTypeError: Cannot read properties of null (reading 'length')\n    at /tmp/tmpw9clovia.js:8:77\n    at Array.map (<anonymous>)\n    at parse_nested_parens (/tmp/tmpw9clovia.js:8:42)\n    at test (/tmp/tmpw9clovia.js:15:22)\n    at Object.<anonymous> (/tmp/tmpw9clovia.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334788
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level.push(0);\n    } else if (char === ')') {\n      const paren_level = paren_stack.pop();\n      paren_level.push(paren_level.length);\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpfgxalyyi.ts(16,19): error TS2339: Property 'push' does not exist on type 'string'.\n",
      "timestamp": 1660334788
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count: number = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level_count++;\n    } else if (char === ')') {\n      paren_level_count--;\n      if (paren_level_count === 0) {\n        paren_level.push(paren_level_count);\n      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpk2tvivs2.js:28:12)\n    at Object.<anonymous> (/tmp/tmpk2tvivs2.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0, 0, 0 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334788
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    const levels: number[] = [];\n    const paren_stack: number[] = [];\n    let paren_count = 0;\n    for (let i = 0; i < paren_string.length; i++) {\n        const char = paren_string[i];\n        if (char === '(') {\n            paren_stack.push(paren_count);\n            paren_count++;\n        } else if (char === ')') {\n            paren_count = paren_stack.pop();\n        } else if (char === ' ') {\n            if (paren_count > 0) {\n                levels.push(paren_count);\n            }\n            paren_count = 0;\n        } else {\n            paren_count = 0;\n        }\n    }\n    if (paren_count > 0) {\n        levels.push(paren_count);\n    }\n    return levels;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpu08hkbzw.js:37:12)\n    at Object.<anonymous> (/tmp/tmpu08hkbzw.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334788
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count: number = 0;\n  let paren_level_max: number = 0;\n  let paren_level_max_index: number = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_count += 1;\n    } else if (char === ')') {\n      paren_level_count -= 1;\n      if (paren_level_count === 0) {\n        paren_level_max = Math.max(paren_level_max, paren_stack[paren_level_max_index]);\n        paren_level_max_index = paren_level_max_index + 1;\n      }\n    }\n  }\n  return paren_stack;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  1,\n  0,\n  1,\n  2,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpadb4qc0j.js:31:12)\n    at Object.<anonymous> (/tmp/tmpadb4qc0j.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0, 1, 1, 0, 1,\n    2, 0, 0, 1, 2,\n    1, 1\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334790
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  let paren_level_max_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_max_count = Math.max(paren_level_max_count, paren_stack.length);\n      paren_level_count += 1;\n    } else if (char === ')') {\n      paren_level_count -= 1;\n      paren_level[paren_stack.pop()] = paren_level_count;\n      if (paren_level_count === 0) {\n        paren_level_max_count -= 1;\n      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpdudx61m8.js:31:12)\n    at Object.<anonymous> (/tmp/tmpdudx61m8.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 2 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334790
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  let paren_level = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      paren_stack.push(paren_level);\n    } else if (paren_string[i] === ')') {\n      paren_level = paren_stack.pop();\n    }\n  }\n  return paren_stack;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmprv3x66_t.js:22:12)\n    at Object.<anonymous> (/tmp/tmprv3x66_t.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334790
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  const paren_level_count: number[] = [];\n  const paren_level_max: number[] = [];\n  let paren_level_index = 0;\n  let paren_level_max_index = 0;\n  let paren_level_max_count = 0;\n  let paren_level_max_value = 0;\n  let paren_level_max_paren_level = 0;\n  let paren_level_max_paren_level_count = 0;\n  let paren_level_max_paren_level_value = 0;\n  let paren_level_max_paren_level_paren_level = 0;\n  let paren_level_max_paren_level_paren_level_count = 0;\n  let paren_level_max_paren_level_paren_level_value = 0;\n  let paren_level_max_paren_level_paren_level_paren_level = 0;\n  let paren_level_max_paren_level_paren_level_paren_level_count = 0;\n  let paren_level_max_paren_level_paren_level_paren_level_value = 0;\n  let paren_level_max_paren_level_paren_level_paren_level_paren_level = 0;\n  let paren_level_max_paren_level_paren_level_paren_level_paren_level_count = 0;\n  let paren_level_max_paren_level_paren_level_paren_level_paren_level_value = 0;\n  let paren_level_max_paren_level_paren_level_paren_level_paren_level_paren_level = 0;\n  let paren_level_max_paren_level_paren_level_paren_level_paren_level_paren_level_count = 0;\n  let paren_level_max_paren_level_paren_level_paren_level_paren_level_paren_level_value = 0;\n  let paren_level_max_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level = 0;\n  let paren_level_max_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_count = 0;\n  let paren_level_max_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_value = 0;\n  let paren_level_max_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level = 0;\n  let paren_level_max_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_count = 0;\n  let paren_level_max_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_value = 0;\n  let paren_level_max_paren_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpo_5a_na2.ts(48,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334790
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    const paren_stack: number[] = [];\n    const paren_level: number[] = [];\n    const paren_level_count: number[] = [];\n    let paren_level_index: number[] = [];\n    let paren_level_count: number[] = [];\n    let paren_level_index: number[] = [];\n    let paren_level_count: number[] = [];\n    let paren_level_index: number[] = [];\n    let paren_level_count: number[] = [];\n    let paren_level_index: number[] = [];\n    let paren_level_count: number[] = [];\n    let paren_level_index: number[] = [];\n    let paren_level_count: number[] = [];\n    let paren_level_index: number[] = [];\n    let paren_level_count: number[] = [];\n    let paren_level_index: number[] = [];\n    let paren_level_count: number[] = [];\n    let paren_level_index: number[] = [];\n    let paren_level_count: number[] = [];\n    let paren_level_index: number[] = [];\n    let paren_level_count: number[] = [];\n    let paren_level_index: number[] = [];\n    let paren_level_count: number[] = [];\n    let paren_level_index: number[] = [];\n    let paren_level_count: number[] = [];\n    let paren_level_index: number[] = [];\n    let paren_level_count: number[] = [];\n    let paren_level_index: number[] = [];\n    let paren_level_count: number[] = [];\n    let paren_level_index: number[] = [];\n    let paren_level_count: number[] = [];\n    let paren_level_index: number[] = [];\n    let paren_level_count: number[] = [];\n    let paren_level_index: number[] = [];\n    let paren_level_count: number[] = [];\n    let paren_level_index: number[] = [];\n    let paren_level_count: number[] = [];\n    let paren_level_index: number[] = [];\n    let paren_level_count: number[] = [];\n    let paren_level_index: number[] = [];\n    let paren_level_count: number[] = [];\n    let paren_level_index: number[] = [];\n    let paren_level_count: number[] = [];\n    let paren_level_index: number[] = [];\n    let paren_level_count: number[] = [];\n    let paren_level_index: number[] = [];\n    let paren_level_count: number[] = [];\n    let paren_level_index: number[] = [];\n    let paren_level_count: number[] = [];\n    let paren_level_index: number[] = [];\n    let paren_level_count: number[] = [];\n    let paren_level\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp7b4tvv0o.ts(70,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334790
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  const paren_level_count: number[] = [];\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === \"(\") {\n      paren_stack.push(paren_string[i]);\n      paren_level_count.push(0);\n    } else if (paren_string[i] === \")\") {\n      paren_level_count[paren_stack.length - 1]++;\n      paren_level[paren_stack.length - 1]++;\n      paren_stack.pop();\n    }\n  }\n  return paren_level_count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  6,\n  2,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpqkeixzhb.js:26:12)\n    at Object.<anonymous> (/tmp/tmpqkeixzhb.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    4, 6, 2, 0, 0,\n    0, 0, 0, 0, 0,\n    0, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334791
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count: number = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === \"(\") {\n      paren_stack.push(paren_string[i]);\n      paren_level.push(paren_level_count);\n      paren_level_count++;\n    } else if (paren_string[i] === \")\") {\n      paren_level_count--;\n      if (paren_level_count === 0) {\n        paren_level.push(paren_level_count);\n      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  1,\n  0,\n  0,\n  1,\n  2,\n  0,\n  0,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpzbunejcf.js:28:12)\n    at Object.<anonymous> (/tmp/tmpzbunejcf.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0, 1, 1, 0, 0, 1,\n    2, 0, 0, 0, 0, 1,\n    2, 1, 1, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334791
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  const paren_level_count: number[] = [];\n  let paren_level_index = 0;\n  let paren_level_length = 0;\n  let paren_level_char: string;\n  let paren_level_char_index = 0;\n  let paren_level_char_length = 0;\n  let paren_level_char_length_index = 0;\n  let paren_level_char_length_char: string;\n  let paren_level_char_length_char_index = 0;\n  let paren_level_char_length_char_length: number = 0;\n  let paren_level_char_length_char_length_index = 0;\n  let paren_level_char_length_char_length_char: number = 0;\n  let paren_level_char_length_char_length_char_index = 0;\n  let paren_level_char_length_char_length_char_length: number = 0;\n  let paren_level_char_length_char_length_char_length_index = 0;\n  let paren_level_char_length_char_length_char_length_char: number = 0;\n  let paren_level_char_length_char_length_char_length_char_index = 0;\n  let paren_level_char_length_char_length_char_length_char_length: number = 0;\n  let paren_level_char_length_char_length_char_length_char_length_index = 0;\n  let paren_level_char_length_char_length_char_length_char_length_char: number = 0;\n  let paren_level_char_length_char_length_char_length_char_length_char_index = 0;\n  let paren_level_char_length_char_length_char_length_char_length_char_length: number = 0;\n  let paren_level_char_length_char_length_char_length_char_length_char_length_index = 0;\n  let paren_level_char_length_char_length_char_length_char_length_char_length_char_length: number = 0;\n  let paren_level_char_length_char_length_char_length_char_length_char_length_char_length_index = 0;\n  let paren_level_char_length_char_length_char_length_char_length_char_length_char_length_char: number = 0;\n  let paren_level_char_length_char_length_char_length_char_length_char_length_char_length_index = 0;\n  let paren_level_char_length_char_length_char_length_char_length_char_length_char_length_char_length: number = 0;\n  let paren_level_char_length_char_length_char_length_char_length_char_length_char_length_char_length_index = 0;\n  let paren_level_char_length_char_length_char_length_char_length_char_length_char_length_char_length_char: number = 0;\n  let paren_level_char_length_char_length_char_length_char_length_char_length_char_length_char_length_char_length_index = 0;\n  let paren_level_char_length_char_length_char_length_char_length_char_length_char_length_char_length_char_length_char: number = 0;\n  let paren_level_char_length_char_length_char_length_char_length_char_length_char_length_char_length_char_length_char_index = 0;\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmprbt9vbq4.ts(53,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334791
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level_count += 1;\n    } else if (char === ')') {\n      paren_level[paren_level_count] += 1;\n      paren_level_count -= 1;\n      if (paren_level_count === 0) {\n        paren_stack.push(paren_string[i]);\n      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  <1 empty item>,\n  NaN,\n  NaN,\n  NaN\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpwfduq6hm.js:29:12)\n    at Object.<anonymous> (/tmp/tmpwfduq6hm.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ <1 empty item>, NaN, NaN, NaN ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334791
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count: number = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level.push(paren_level_count);\n      paren_level_count++;\n    } else if (char === ')') {\n      paren_level_count--;\n      if (paren_level_count === 0) {\n        paren_level.push(paren_level_count);\n      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  1,\n  0,\n  0,\n  1,\n  2,\n  0,\n  0,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp95g60b3c.js:29:12)\n    at Object.<anonymous> (/tmp/tmp95g60b3c.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0, 1, 1, 0, 0, 1,\n    2, 0, 0, 0, 0, 1,\n    2, 1, 1, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334788
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === \"(\") {\n      paren_stack.push(paren_level_count);\n      paren_level_count += 1;\n    } else if (paren_string[i] === \")\") {\n      paren_level_count -= 1;\n      if (paren_level_count === 0) {\n        paren_level.push(paren_stack.pop());\n      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  0,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmptffp62ob.js:27:12)\n    at Object.<anonymous> (/tmp/tmptffp62ob.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 0, 1 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334784
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === \"(\") {\n      paren_stack.push(paren_string[i]);\n      paren_level.push(paren_count);\n      paren_count++;\n    } else if (paren_string[i] === \")\") {\n      paren_count--;\n      if (paren_count === 0) {\n        paren_stack.push(paren_string[i]);\n        paren_level.push(paren_count);\n      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  1,\n  0,\n  0,\n  1,\n  2,\n  0,\n  0,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp95l_x46f.js:29:12)\n    at Object.<anonymous> (/tmp/tmp95l_x46f.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0, 1, 1, 0, 0, 1,\n    2, 0, 0, 0, 0, 1,\n    2, 1, 1, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334784
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count: number = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_count += 1;\n    } else if (char === ')') {\n      paren_level_count -= 1;\n      paren_level[paren_stack.pop()] = paren_level_count;\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp_yp2k394.js:26:12)\n    at Object.<anonymous> (/tmp/tmp_yp2k394.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 2 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334781
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    const groups = paren_string.match(/\\(([^()]+)\\)/g);\n    if (groups === null) {\n        return [];\n    }\n    const max_depth = groups.length - 1;\n    const depths = new Array<number>(max_depth);\n    for (let i = 0; i < groups.length; i++) {\n        const group = groups[i];\n        const depth = group.match(/\\(([^()]+)\\)/)[1].length;\n        depths[i] = depth;\n    }\n    return depths;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpuykg23zs.js:23:12)\n    at Object.<anonymous> (/tmp/tmpuykg23zs.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334791
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  let paren_depth = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_depth);\n      paren_depth++;\n    } else if (char === ')') {\n      paren_depth = Math.max(paren_stack.pop(), paren_depth);\n    }\n  }\n  return paren_depth;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmppsdqb6o5.ts(18,3): error TS2322: Type 'number' is not assignable to type 'number[]'.\n",
      "timestamp": 1660334791
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  let paren_level_max = 0;\n  let paren_level_max_index = 0;\n  let paren_level_max_count = 0;\n  let paren_level_max_string = \"\";\n  let paren_level_max_string_index = 0;\n  let paren_level_max_string_count = 0;\n  let paren_level_max_string_length = 0;\n  let paren_level_max_string_char_count = 0;\n  let paren_level_max_string_char_length = 0;\n  let paren_level_max_string_char_char_length = 0;\n  let paren_level_max_string_char_char_length = 0;\n  let paren_level_max_string_char_char_char_length = 0;\n  let paren_level_max_string_char_char_char_length = 0;\n  let paren_level_max_string_char_char_char_length = 0;\n  let paren_level_max_string_char_char_char_length = 0;\n  let paren_level_max_string_char_char_char_length = 0;\n  let paren_level_max_string_char_char_char_length = 0;\n  let paren_level_max_string_char_char_char_length = 0;\n  let paren_level_max_string_char_char_char_length = 0;\n  let paren_level_max_string_char_char_char_length = 0;\n  let paren_level_max_string_char_char_char_length = 0;\n  let paren_level_max_string_char_char_char_length = 0;\n  let paren_level_max_string_char_char_char_length = 0;\n  let paren_level_max_string_char_char_char_length = 0;\n  let paren_level_max_string_char_char_char_length = 0;\n  let paren_level_max_string_char_char_char_length = 0;\n  let paren_level_max_string_char_char_char_length = 0;\n  let paren_level_max_string_char_char_char_length = 0;\n  let paren_level_max_string_char_char_char_length = 0;\n  let paren_level_max_string_char_char_char_length = 0;\n  let paren_level_max_string_char_char_char_length = 0;\n  let paren_level_max_string_char_char_char_length = 0;\n  let paren_level_max_string_char_char_char_length = 0;\n  let paren_level_max_string_char_char_char_length = 0;\n  let paren_level_max_string_char_char_char_length = 0;\n  let paren_level_max_string_char_char_char_length = 0;\n  let paren_level_max_string_char_char_char_length = 0;\n  let paren_level_max_string_char_char_char_length = 0;\n  let paren_level_max_string_char_char_char_length = 0;\n  let paren_level_max_string_char_char_char_length = 0;\n  let paren_level_max_string_char_char_char_length = 0;\n  let paren_level_max_string_char_char_char_length = 0;\n  let paren_level_max_string_char_char_char_length = 0;\n  let paren_level_max_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpdr24asha.ts(65,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334791
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    const paren_stack: string[] = [];\n    const paren_level: number[] = [];\n    const paren_level_count: number[] = [];\n    const paren_level_max: number[] = [];\n    let paren_level_max_index = 0;\n    let paren_level_max_count = 0;\n    let paren_level_max_string = \"\";\n    let paren_level_max_index2 = 0;\n    let paren_level_max_count2 = 0;\n    let paren_level_max_string2 = \"\";\n    let paren_level_max_index3 = 0;\n    let paren_level_max_count3 = 0;\n    let paren_level_max_string3 = \"\";\n    let paren_level_max_index4 = 0;\n    let paren_level_max_count4 = 0;\n    let paren_level_max_string4 = \"\";\n    let paren_level_max_index5 = 0;\n    let paren_level_max_count5 = 0;\n    let paren_level_max_string5 = \"\";\n    let paren_level_max_index6 = 0;\n    let paren_level_max_count6 = 0;\n    let paren_level_max_string6 = \"\";\n    let paren_level_max_index7 = 0;\n    let paren_level_max_count7 = 0;\n    let paren_level_max_string7 = \"\";\n    let paren_level_max_index8 = 0;\n    let paren_level_max_count8 = 0;\n    let paren_level_max_string8 = \"\";\n    let paren_level_max_index9 = 0;\n    let paren_level_max_count9 = 0;\n    let paren_level_max_string9 = \"\";\n    let paren_level_max_index10 = 0;\n    let paren_level_max_count10 = 0;\n    let paren_level_max_string10 = \"\";\n    let paren_level_max_index11 = 0;\n    let paren_level_max_count11 = 0;\n    let paren_level_max_string11 = \"\";\n    let paren_level_max_index12 = 0;\n    let paren_level_max_count12 = 0;\n    let paren_level_max_string12 = \"\";\n    let paren_level_max_index13 = 0;\n    let paren_level_max_count13 = 0;\n    let paren_level_max_string13 = \"\";\n    let paren_level_max_index14 = 0;\n    let paren_level_max_count14 = 0;\n    let paren_level_max_string14 = \"\";\n    let paren_level_max_index15 = 0;\n    let paren_level_max_count15 = 0;\n    let paren_level_max_string15 = \"\";\n    let paren_level_max_index16 = 0;\n    let paren_level_max_count16 = 0;\n    let paren_level_max_string16 = \"\";\n    let paren_level_max_index17 = 0;\n    let paren_level_max_count17 = 0;\n    let paren_level_max_string17 = \"\";\n    let paren_level_max_index18 = 0;\n    let paren_level_max_count18 = 0;\n    let paren_level_max_string18 = \"\";\n    let \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpbtmyhsaw.ts(66,9): error TS1005: ',' expected.\n../../../../tmp/tmpbtmyhsaw.ts(77,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334791
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count: number[] = [];\n  let paren_level_max: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_index = 0;\n  let paren_level_max_count = 0;\n  let paren_level_max_string = \"\";\n  let paren_level_max_string_index = 0;\n  let paren_level_max_string_count = 0;\n  let paren_level_max_string_value = \"\";\n  let paren_level_max_string_value_index = 0;\n  let paren_level_max_string_value_count = 0;\n  let paren_level_max_string_value_value = \"\";\n  let paren_level_max_string_value_value_index = 0;\n  let paren_level_max_string_value_value_count = 0;\n  let paren_level_max_string_value_value_value = \"\";\n  let paren_level_max_string_value_value_value_index = 0;\n  let paren_level_max_string_value_value_value_count = 0;\n  let paren_level_max_string_value_value_value_value = \"\";\n  let paren_level_max_string_value_value_value_index = 0;\n  let paren_level_max_string_value_value_value_count = 0;\n  let paren_level_max_string_value_value_value_value = \"\";\n  let paren_level_max_string_value_value_value_index = 0;\n  let paren_level_max_string_value_value_value_count = 0;\n  let paren_level_max_string_value_value_value_value = \"\";\n  let paren_level_max_string_value_value_value_index = 0;\n  let paren_level_max_string_value_value_value_count = 0;\n  let paren_level_max_string_value_value_value_value = \"\";\n  let paren_level_max_string_value_value_value_index = 0;\n  let paren_level_max_string_value_value_value_count = 0;\n  let paren_level_max_string_value_value_value_value = \"\";\n  let paren_level_max_string_value_value_value_index = 0;\n  let paren_level_max_string_value_value_value_count = 0;\n  let paren_level_max_string_value_value_value_value = \"\";\n  let paren_level_max_string_value_value_value_index = 0;\n  let paren_level_max_string_value_value_value_count = 0;\n  let paren_level_max_string_value_value_value_value = \"\";\n  let paren_level_max_string_value_value_value_index = 0;\n  let paren_level_max_string_value_value_value_count = 0;\n  let paren_level_max_string_value_value_value_value = \"\";\n  let paren_level_max_string_value_value_value_index = 0;\n  let paren_level_max_string_value_value_value_count = 0;\n  let paren_level_max_string_value_value_value_value = \"\";\n  let paren_level_max_string_value_value_value_index = 0;\n  let paren_level_max_string_value_value_value_count = 0;\n  let paren_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpluceo9vb.ts(65,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334791
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    const paren_stack: number[] = [];\n    const paren_level: number[] = [];\n    const paren_level_count: number[] = [];\n    const paren_level_max_count: number[] = [];\n    const paren_level_max_count_index: number[] = [];\n    const paren_level_max_count_index1: number[] = [];\n    const paren_level_max_count_index2: number[] = [];\n    const paren_level_max_count_index3: number[] = [];\n    const paren_level_max_count_index4: number[] = [];\n    const paren_level_max_count_index5: number[] = [];\n    const paren_level_max_count_index6: number[] = [];\n    const paren_level_max_count_index7: number[] = [];\n    const paren_level_max_count_index8: number[] = [];\n    const paren_level_max_count_index9: number[] = [];\n    const paren_level_max_count_index10: number[] = [];\n    const paren_level_max_count_index11: number[] = [];\n    const paren_level_max_count_index12: number[] = [];\n    const paren_level_max_count_index13: number[] = [];\n    const paren_level_max_count_index14: number[] = [];\n    const paren_level_max_count_index15: number[] = [];\n    const paren_level_max_count_index16: number[] = [];\n    const paren_level_max_count_index17: number[] = [];\n    const paren_level_max_count_index18: number[] = [];\n    const paren_level_max_count_index19: number[] = [];\n    const paren_level_max_count_index20: number[] = [];\n    const paren_level_max_count_index21: number[] = [];\n    const paren_level_max_count_index22: number[] = [];\n    const paren_level_max_count_index23: number[] = [];\n    const paren_level_max_count_index24: number[] = [];\n    const paren_level_max_count_index25: number[] = [];\n    const paren_level_max_count_index26: number[] = [];\n    const paren_level_max_count_index27: number[] = [];\n    const paren_level_max_count_index28: number[] = [];\n    const paren_level_max_count_index29: number[] = [];\n    const paren_level_max_count_index30: number[] = [];\n    const paren_level_max_count_index31: number[] = [];\n    const paren_level_max_count_index32: number[] = [];\n    const paren_level_max_count_index33: number[] = [];\n    const paren_level_max_count_index34: number[] = [];\n    const paren_level_max_count_index35: number[] = [];\n    const paren_level_max_count_index36: number[] = [];\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp2__79a2q.ts(60,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334791
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  let paren_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_count);\n      paren_count++;\n    } else if (char === ')') {\n      paren_count--;\n    }\n  }\n  return paren_stack;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  1,\n  0,\n  1,\n  2,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp2xngem7q.js:24:12)\n    at Object.<anonymous> (/tmp/tmp2xngem7q.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0, 1, 1, 0, 1,\n    2, 0, 0, 1, 2,\n    1, 1\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334780
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level_count++;\n    } else if (paren_string[i] === ')') {\n      paren_level_count--;\n      if (paren_level_count === 0) {\n        paren_level.push(paren_stack.length);\n      }\n      paren_stack.splice(paren_stack.length - 1, 1);\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1,\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpck21tn3y.js:28:12)\n    at Object.<anonymous> (/tmp/tmpck21tn3y.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1, 1, 1 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334792
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  let paren_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === \"(\") {\n      paren_stack.push(paren_count);\n      paren_count++;\n    } else if (paren_string[i] === \")\") {\n      paren_count--;\n      if (paren_count < 0) {\n        throw new Error(\n          `Unbalanced parenthesis found in string ${paren_string}`\n        );\n      }\n    }\n  }\n  return paren_stack;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  1,\n  0,\n  1,\n  2,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmph5zwcsaz.js:26:12)\n    at Object.<anonymous> (/tmp/tmph5zwcsaz.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0, 1, 1, 0, 1,\n    2, 0, 0, 1, 2,\n    1, 1\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334792
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  let paren_level_max = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_max = (paren_level_count > paren_level_max) ? paren_level_count : paren_level_max;\n      paren_level_count = 1;\n    } else if (char === ')') {\n      paren_level_count = paren_stack.pop();\n      paren_level_max = (paren_level_count > paren_level_max) ? paren_level_count : paren_level_max;\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpucov19s0.js:28:12)\n    at Object.<anonymous> (/tmp/tmpucov19s0.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334792
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_count += 1;\n    } else if (char === ')') {\n      paren_level_count -= 1;\n      paren_level[paren_stack.pop()] = paren_level_count;\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmphl61jp2u.js:26:12)\n    at Object.<anonymous> (/tmp/tmphl61jp2u.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 2 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334780
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  let paren_level_max = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_max = Math.max(paren_level_max, paren_stack.length);\n      paren_level_count = 0;\n    } else if (char === ')') {\n      paren_level_count = Math.max(paren_level_count, paren_stack.pop());\n    }\n    paren_level_count += 1;\n  }\n  return paren_level_max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmps6pqqbx0.ts(22,3): error TS2322: Type 'number' is not assignable to type 'number[]'.\n",
      "timestamp": 1660334791
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const groups = paren_string.trim().split(/\\s+/);\n  const max_level = Math.max(...groups.map(g => g.length));\n  const levels = new Array(max_level).fill(1);\n  for (let i = 1; i < groups.length; i++) {\n    const group = groups[i];\n    for (let j = 0; j < group.length; j++) {\n      levels[group.length - 1 - j] += levels[j];\n    }\n  }\n  return levels.map(l => l === 1 ? 0 : l);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  19,\n  13,\n  7,\n  5,\n  6,\n  4,\n  3,\n  4,\n  7,\n  10\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp1lkjqdg4.js:21:12)\n    at Object.<anonymous> (/tmp/tmp1lkjqdg4.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    19, 13, 7, 5,  6,\n     4,  3, 4, 7, 10\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334792
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count: number = 0;\n  let paren_level_max: number = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level.push(paren_level_count);\n      paren_level_count++;\n    } else if (char === ')') {\n      paren_level_count--;\n      if (paren_level_count === 0) {\n        paren_level_max = Math.max(...paren_level);\n      }\n      paren_level.splice(paren_level.indexOf(paren_level_count), 1);\n    }\n  }\n  return paren_level_max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpwcme320g.ts(25,3): error TS2322: Type 'number' is not assignable to type 'number[]'.\n",
      "timestamp": 1660334791
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  let paren_depth = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_depth);\n      paren_depth++;\n    } else if (char === ')') {\n      paren_depth = Math.max(paren_stack.pop(), paren_depth);\n    }\n  }\n  return paren_depth;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmplrghybxt.ts(12,24): error TS2345: Argument of type 'number' is not assignable to parameter of type 'string'.\n../../../../tmp/tmplrghybxt.ts(15,30): error TS2345: Argument of type 'string' is not assignable to parameter of type 'number'.\n../../../../tmp/tmplrghybxt.ts(18,3): error TS2322: Type 'number' is not assignable to type 'number[]'.\n",
      "timestamp": 1660334792
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  let paren_level_max = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_max = Math.max(paren_level_max, paren_stack.length - 1);\n      paren_level_count += 1;\n    } else if (char === ')') {\n      paren_level_count -= 1;\n      paren_level[paren_stack.pop()] = paren_level_count;\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpy7aicl3i.js:28:12)\n    at Object.<anonymous> (/tmp/tmpy7aicl3i.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 2 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334788
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  let paren_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_count);\n      paren_count++;\n    } else if (char === ')') {\n      paren_count--;\n    }\n  }\n  return paren_stack;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  1,\n  0,\n  1,\n  2,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp2xngem7q.js:24:12)\n    at Object.<anonymous> (/tmp/tmp2xngem7q.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0, 1, 1, 0, 1,\n    2, 0, 0, 1, 2,\n    1, 1\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334780
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  let paren_level_max = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level_count++;\n      paren_level_max = Math.max(paren_level_max, paren_level_count);\n    } else if (char === ')') {\n      paren_level_count--;\n      paren_level[paren_level_count] = paren_level_count;\n      if (paren_level_count === 0) {\n        paren_level_max--;\n      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpw0mezbcy.js:31:12)\n    at Object.<anonymous> (/tmp/tmpw0mezbcy.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 2 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334792
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count: number = 0;\n  let paren_level_max: number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_value: number = 0;\n  let paren_level_max_value_length: number = 0;\n  let paren_level_max_value_char: number = 0;\n  let paren_level_max_value_char_count: number = 0;\n  let paren_level_max_value_char_length: number = 0;\n  let paren_level_max_value_char_index: number = 0;\n  let paren_level_max_value_char_value: number = 0;\n  let paren_level_max_value_char_value_index: number = 0;\n  let paren_level_max_value_char_value_value: number = 0;\n  let paren_level_max_value_char_value_value_index: number = 0;\n  let paren_level_max_value_char_value_value_value: number = 0;\n  let paren_level_max_value_char_value_value_value: number = 0;\n  let paren_level_max_value_char_value_value_value: number = 0;\n  let paren_level_max_value_char_value_value_value_index: number = 0;\n  let paren_level_max_value_char_value_value_value_value: number = 0;\n  let paren_level_max_value_char_value_value_value_index: number = 0;\n  let paren_level_max_value_char_value_value_value_value: number = 0;\n  let paren_level_max_value_char_value_value_value_value: number = 0;\n  let paren_level_max_value_char_value_value_value_value: number = 0;\n  let paren_level_max_value_char_value_value_value_value: number = 0;\n  let paren_level_max_value_char_value_value_value_value: number = 0;\n  let paren_level_max_value_char_value_value_value_value: number = 0;\n  let paren_level_max_value_char_value_value_value_value: number = 0;\n  let paren_level_max_value_char_value_value_value_value: number = 0;\n  let paren_level_max_value_char_value_value_value_value: number = 0;\n  let paren_level_max_value_char_value_value_value_value: number = 0;\n  let paren_level_max_value_char_value_value_value_value: number = 0;\n  let paren_level_max_value_char_value_value_value_value: number = 0;\n  let paren_level_max_value_char_value_value_value_value: number = 0;\n  let paren_level_max_value_char_value_value_value_value: number = 0;\n  let paren_level_max_value_char_value_value_value_value: number = 0;\n  let paren_level_max_value_char_value_value_value_value: number = 0;\n  let paren_level_max_value_char_value_value_value_value: number = 0;\n  let paren_level_max_value_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpqygknzpi.ts(57,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334794
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(char);\n      paren_level.push(0);\n    } else if (char === ')') {\n      const current_level = paren_level.pop();\n      if (current_level > 0) {\n        paren_level.push(current_level);\n      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpe7mb5x_4.js:27:12)\n    at Object.<anonymous> (/tmp/tmpe7mb5x_4.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334793
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === \"(\") {\n      paren_stack.push(paren_string[i]);\n      paren_level.push(0);\n    } else if (paren_string[i] === \")\") {\n      paren_level.pop();\n      if (paren_stack.length > 0) {\n        paren_level.push(paren_stack.length);\n      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  2,\n  3,\n  0,\n  0,\n  6,\n  7,\n  0,\n  0,\n  10,\n  11,\n  12\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpr6uuezfn.js:26:12)\n    at Object.<anonymous> (/tmp/tmpr6uuezfn.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n     0,  2, 3, 0,  0,\n     6,  7, 0, 0, 10,\n    11, 12\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334794
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  let paren_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === \"(\") {\n      paren_stack.push(paren_count);\n      paren_count++;\n    } else if (paren_string[i] === \")\") {\n      paren_count--;\n    }\n  }\n  return paren_stack;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  1,\n  0,\n  1,\n  2,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpnf0t7zxg.js:23:12)\n    at Object.<anonymous> (/tmp/tmpnf0t7zxg.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0, 1, 1, 0, 1,\n    2, 0, 0, 1, 2,\n    1, 1\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334794
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === \"(\") {\n      paren_stack.push(paren_string[i]);\n      paren_level.push(paren_count);\n      paren_count++;\n    } else if (paren_string[i] === \")\") {\n      paren_count--;\n      if (paren_count === 0) {\n        paren_stack.push(paren_string[i]);\n        paren_level.push(paren_count);\n      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  1,\n  0,\n  0,\n  1,\n  2,\n  0,\n  0,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp95l_x46f.js:29:12)\n    at Object.<anonymous> (/tmp/tmp95l_x46f.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0, 1, 1, 0, 0, 1,\n    2, 0, 0, 0, 0, 1,\n    2, 1, 1, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334784
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count: number = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level.push(paren_level_count);\n      paren_level_count++;\n    } else if (char === ')') {\n      paren_level_count--;\n      paren_level[paren_level.length - 1]++;\n      if (paren_level_count === 0) {\n        paren_level.push(0);\n      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  2,\n  3,\n  0,\n  0,\n  1,\n  5,\n  0,\n  1,\n  0,\n  0,\n  1,\n  4,\n  2,\n  3,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpfahblbqt.js:30:12)\n    at Object.<anonymous> (/tmp/tmpfahblbqt.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0, 2, 3, 0, 0, 1,\n    5, 0, 1, 0, 0, 1,\n    4, 2, 3, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334794
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level.push(0);\n    } else if (char === ')') {\n      paren_level[paren_stack.length - 1]++;\n      paren_stack.pop();\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  6,\n  2,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpj90xst1f.js:25:12)\n    at Object.<anonymous> (/tmp/tmpj90xst1f.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    4, 6, 2, 0, 0,\n    0, 0, 0, 0, 0,\n    0, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334794
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  let paren_level = 0;\n  let paren_level_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level);\n      paren_level_count++;\n    } else if (char === ')') {\n      paren_level_count--;\n      if (paren_level_count === 0) {\n        paren_level = paren_stack.pop();\n      }\n    }\n  }\n  return paren_stack;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpeqongkhr.js:28:12)\n    at Object.<anonymous> (/tmp/tmpeqongkhr.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0, 0, 0, 0,\n    0, 0, 0, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334794
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_level: number[] = [];\n  let paren_level_max_level_count: number[] = [];\n  let paren_level_max_level_max_count: number[] = [];\n  let paren_level_max_level_max_level: number[] = [];\n  let paren_level_max_level_max_level_count: number[] = [];\n  let paren_level_max_level_max_level_max_count: number[] = [];\n  let paren_level_max_level_max_level_max_level: number[] = [];\n  let paren_level_max_level_max_level_max_level_count: number[] = [];\n  let paren_level_max_level_max_level_max_level_max_count: number[] = [];\n  let paren_level_max_level_max_level_max_level_max_level: number[] = [];\n  let paren_level_max_level_max_level_max_level_max_level_count: number[] = [];\n  let paren_level_max_level_max_level_max_level_max_level_max_count: number[] = [];\n  let paren_level_max_level_max_level_max_level_max_level_max_level: number[] = [];\n  let paren_level_max_level_max_level_max_level_max_level_max_level_count: number[] = [];\n  let paren_level_max_level_max_level_max_level_max_level_max_level_max_count: number[] = [];\n  let paren_level_max_level_max_level_max_level_max_level_max_level_max_level: number[] = [];\n  let paren_level_max_level_max_level_max_level_max_level_max_level_max_level_count: number[] = [];\n  let paren_level_max_level_max_level_max_level_max_level_max_level_max_level_max_count: number[] = [];\n  let paren_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level: number[] = [];\n  let paren_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_count: number[] = [];\n  let paren_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_count: number[] = [];\n  let paren_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level: number[] = [];\n  let paren_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_count: number[] = [];\n  let paren_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_count: number[] = [];\n  let paren_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmphegz5nz4.ts(47,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334794
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count: number = 0;\n  let paren_level_max: number = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level_count += 1;\n    } else if (char === ')') {\n      paren_level_count -= 1;\n      if (paren_level_count === 0) {\n        paren_level.push(paren_level_count);\n        paren_level_max = Math.max(paren_level_max, paren_level_count);\n      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpptxvy6q4.js:30:12)\n    at Object.<anonymous> (/tmp/tmpptxvy6q4.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0, 0, 0 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334795
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count: number = 0;\n  let paren_level_max: number = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_count += 1;\n    } else if (char === ')') {\n      paren_level_count -= 1;\n      paren_level[paren_stack.pop()] = paren_level_count;\n      if (paren_level_count > paren_level_max) {\n        paren_level_max = paren_level_count;\n      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpkq25fs6c.js:30:12)\n    at Object.<anonymous> (/tmp/tmpkq25fs6c.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 2 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334795
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_count);\n      paren_level.push(0);\n      paren_count++;\n    } else if (char === ')') {\n      paren_count = paren_stack.pop();\n      paren_level = paren_stack.pop();\n    } else {\n      paren_count = paren_stack.pop();\n      paren_level = paren_stack.pop();\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp0r80ktq1.ts(18,7): error TS2588: Cannot assign to 'paren_level' because it is a constant.\n../../../../tmp/tmp0r80ktq1.ts(21,7): error TS2588: Cannot assign to 'paren_level' because it is a constant.\n",
      "timestamp": 1660334795
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    const paren_stack: string[] = [];\n    const paren_level: number[] = [];\n    let paren_level_count = 0;\n    let paren_level_max = 0;\n    let paren_level_max_index = 0;\n    for (let i = 0; i < paren_string.length; i++) {\n        const char = paren_string[i];\n        if (char === '(') {\n            paren_stack.push(paren_level_count);\n            paren_level_count += 1;\n        } else if (char === ')') {\n            paren_level_count -= 1;\n            if (paren_level_count === 0) {\n                paren_level.push(paren_stack.pop());\n                paren_level_count += 1;\n            }\n        } else if (char === ' ') {\n            if (paren_level_count === 0) {\n                paren_level.push(paren_stack.pop());\n                paren_level_count += 1;\n            } else {\n                paren_level_count += 1;\n            }\n        }\n        if (paren_level_count > paren_level_max) {\n            paren_level_max = paren_level_count;\n            paren_level_max_index = i;\n        }\n    }\n    return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpxle4tu_z.ts(15,30): error TS2345: Argument of type 'number' is not assignable to parameter of type 'string'.\n../../../../tmp/tmpxle4tu_z.ts(20,34): error TS2345: Argument of type 'string' is not assignable to parameter of type 'number'.\n../../../../tmp/tmpxle4tu_z.ts(25,34): error TS2345: Argument of type 'string' is not assignable to parameter of type 'number'.\n",
      "timestamp": 1660334795
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  let paren_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_count);\n      paren_count++;\n    } else if (char === ')') {\n      paren_count--;\n      if (paren_count === 0) {\n        paren_stack.push(paren_count);\n      }\n    }\n  }\n  return paren_stack;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  1,\n  0,\n  0,\n  1,\n  2,\n  0,\n  0,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpgw1k37e3.js:27:12)\n    at Object.<anonymous> (/tmp/tmpgw1k37e3.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0, 1, 1, 0, 0, 1,\n    2, 0, 0, 0, 0, 1,\n    2, 1, 1, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334795
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count: number = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_count += 1;\n    } else if (char === ')') {\n      paren_level_count -= 1;\n      paren_level[paren_stack.pop()] = paren_level_count;\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp_yp2k394.js:26:12)\n    at Object.<anonymous> (/tmp/tmp_yp2k394.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 2 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334781
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count: number = 0;\n  let paren_level_max: number = 0;\n  let paren_level_max_index: number = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_count += 1;\n    } else if (char === ')') {\n      paren_level_count -= 1;\n      if (paren_level_count === 0) {\n        paren_level_max = paren_stack.pop();\n        paren_level_max_index = paren_stack.length - 1;\n      }\n    }\n  }\n  return paren_stack;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  0,\n  1,\n  0,\n  1,\n  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp1ish4vue.js:31:12)\n    at Object.<anonymous> (/tmp/tmp1ish4vue.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0, 1, 0, 1,\n    0, 1, 2, 1\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334795
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  const paren_level_count: number[] = [];\n  let paren_level_index: number[] = [];\n  let paren_level_length: number[] = [];\n  let paren_level_length_count: number[] = [];\n  let paren_level_length_index: number[] = [];\n  let paren_level_length_count2: number[] = [];\n  let paren_level_length_count3: number[] = [];\n  let paren_level_length_count4: number[] = [];\n  let paren_level_length_count5: number[] = [];\n  let paren_level_length_count6: number[] = [];\n  let paren_level_length_count7: number[] = [];\n  let paren_level_length_count8: number[] = [];\n  let paren_level_length_count9: number[] = [];\n  let paren_level_length_count10: number[] = [];\n  let paren_level_length_count11: number[] = [];\n  let paren_level_length_count12: number[] = [];\n  let paren_level_length_count13: number[] = [];\n  let paren_level_length_count14: number[] = [];\n  let paren_level_length_count15: number[] = [];\n  let paren_level_length_count16: number[] = [];\n  let paren_level_length_count17: number[] = [];\n  let paren_level_length_count18: number[] = [];\n  let paren_level_length_count19: number[] = [];\n  let paren_level_length_count20: number[] = [];\n  let paren_level_length_count21: number[] = [];\n  let paren_level_length_count22: number[] = [];\n  let paren_level_length_count23: number[] = [];\n  let paren_level_length_count24: number[] = [];\n  let paren_level_length_count25: number[] = [];\n  let paren_level_length_count26: number[] = [];\n  let paren_level_length_count27: number[] = [];\n  let paren_level_length_count28: number[] = [];\n  let paren_level_length_count29: number[] = [];\n  let paren_level_length_count30: number[] = [];\n  let paren_level_length_count31: number[] = [];\n  let paren_level_length_count32: number[] = [];\n  let paren_level_length_count33: number[] = [];\n  let paren_level_length_count34: number[] = [];\n  let paren_level_length_count35: number[] = [];\n  let paren_level_length_count36: number[] = [];\n  let paren_level_length_count37: number[] = [];\n  let paren_level_length_count38: number[] = [];\n  let paren_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp4rpq75_8.ts(63,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334794
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level.push(0);\n    } else if (char === ')') {\n      const last_paren_level = paren_level.pop();\n      if (paren_stack.length > 0) {\n        const last_paren_char = paren_stack.pop();\n        if (last_paren_level === last_paren_char) {\n          paren_level.push(last_paren_level + 1);\n        } else {\n          paren_level.push(last_paren_level);\n        }\n      } else {\n        paren_level.push(last_paren_level);\n      }\n    } else {\n      paren_level.push(0);\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp8x0xcqs8.ts(18,13): error TS2367: This condition will always return 'false' since the types 'number' and 'string' have no overlap.\n",
      "timestamp": 1660334795
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count: number[] = [];\n  let paren_level_max: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count2: number[] = [];\n  let paren_level_max_count3: number[] = [];\n  let paren_level_max_count4: number[] = [];\n  let paren_level_max_count5: number[] = [];\n  let paren_level_max_count6: number[] = [];\n  let paren_level_max_count7: number[] = [];\n  let paren_level_max_count8: number[] = [];\n  let paren_level_max_count9: number[] = [];\n  let paren_level_max_count10: number[] = [];\n  let paren_level_max_count11: number[] = [];\n  let paren_level_max_count12: number[] = [];\n  let paren_level_max_count13: number[] = [];\n  let paren_level_max_count14: number[] = [];\n  let paren_level_max_count15: number[] = [];\n  let paren_level_max_count16: number[] = [];\n  let paren_level_max_count17: number[] = [];\n  let paren_level_max_count18: number[] = [];\n  let paren_level_max_count19: number[] = [];\n  let paren_level_max_count20: number[] = [];\n  let paren_level_max_count21: number[] = [];\n  let paren_level_max_count22: number[] = [];\n  let paren_level_max_count23: number[] = [];\n  let paren_level_max_count24: number[] = [];\n  let paren_level_max_count25: number[] = [];\n  let paren_level_max_count26: number[] = [];\n  let paren_level_max_count27: number[] = [];\n  let paren_level_max_count28: number[] = [];\n  let paren_level_max_count29: number[] = [];\n  let paren_level_max_count30: number[] = [];\n  let paren_level_max_count31: number[] = [];\n  let paren_level_max_count32: number[] = [];\n  let paren_level_max_count33: number[] = [];\n  let paren_level_max_count34: number[] = [];\n  let paren_level_max_count35: number[] = [];\n  let paren_level_max_count36: number[] = [];\n  let paren_level_max_count37: number[] = [];\n  let paren_level_max_count38: number[] = [];\n  let paren_level_max_count39: number[] = [];\n  let paren_level_max_count40: number[] = [];\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpbuwl81yw.ts(63,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334794
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count: number = 0;\n  let paren_level_max: number = 0;\n  let paren_level_max_count: number = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level_max_count++;\n    } else if (char === ')') {\n      paren_level_count++;\n      if (paren_level_count > paren_level_max_count) {\n        paren_level_max_count = paren_level_count;\n        paren_level_max = i;\n      }\n      paren_stack.pop();\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpjzs293ci.js:32:12)\n    at Object.<anonymous> (/tmp/tmpjzs293ci.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334795
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const groups = paren_string.trim().split(/\\s+/);\n  const max_level = 0;\n  for (let i = 0; i < groups.length; i++) {\n    const group = groups[i];\n    const level = getMaxLevel(group);\n    if (level > max_level) {\n      max_level = level;\n    }\n  }\n  return max_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpdij7lpqi.ts(11,19): error TS2552: Cannot find name 'getMaxLevel'. Did you mean 'max_level'?\n../../../../tmp/tmpdij7lpqi.ts(13,7): error TS2588: Cannot assign to 'max_level' because it is a constant.\n../../../../tmp/tmpdij7lpqi.ts(16,3): error TS2322: Type 'number' is not assignable to type 'number[]'.\n",
      "timestamp": 1660334795
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const groups = paren_string.trim().split(/\\s+/);\n  const max_level = Math.max(...groups.map(g => g.length));\n  const levels = new Array(max_level).fill(-1);\n  for (let i = 0; i < groups.length; i++) {\n    const group = groups[i];\n    for (let j = 0; j < group.length; j++) {\n      if (levels[j] >= 0) {\n        levels[j]++;\n      }\n    }\n  }\n  return levels.slice(1).reverse();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpbesn2lod.js:23:12)\n    at Object.<anonymous> (/tmp/tmpbesn2lod.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    -1, -1, -1, -1, -1,\n    -1, -1, -1, -1\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334795
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_count);\n      paren_level.push(0);\n      paren_count++;\n    } else if (char === ')') {\n      paren_count--;\n      if (paren_count === 0) {\n        paren_stack.push(paren_count);\n        paren_level.push(0);\n      }\n    } else {\n      paren_level[paren_stack.pop()] = paren_level[paren_stack.pop()] + 1;\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpwofedjug.ts(13,24): error TS2345: Argument of type 'number' is not assignable to parameter of type 'string'.\n../../../../tmp/tmpwofedjug.ts(19,26): error TS2345: Argument of type 'number' is not assignable to parameter of type 'string'.\n",
      "timestamp": 1660334795
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(char);\n      paren_level.push(0);\n    } else if (char === ')') {\n      const current_level = paren_level.pop();\n      if (current_level > 0) {\n        paren_level.push(current_level);\n      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpe7mb5x_4.js:27:12)\n    at Object.<anonymous> (/tmp/tmpe7mb5x_4.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334793
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const groups = paren_string.trim().split(/\\s+/);\n  const max_depth = groups.length;\n  const max_level: number[] = [];\n  for (let i = 0; i < max_depth; i++) {\n    max_level[i] = 0;\n  }\n  for (let i = 0; i < groups.length; i++) {\n    const group = groups[i];\n    const group_length = group.length;\n    for (let j = 0; j < group_length; j++) {\n      if (group[j] === \"(\") {\n        max_level[max_depth - 1]++;\n      } else if (group[j] === \")\") {\n        max_level[max_depth - 1]--;\n      }\n    }\n  }\n  return max_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpxkmjjl_g.js:30:12)\n    at Object.<anonymous> (/tmp/tmpxkmjjl_g.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0, 0, 0 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334796
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_count);\n      paren_level.push(0);\n      paren_count++;\n    } else if (char === ')') {\n      const current_level = paren_stack.pop();\n      const current_level_length = paren_level.pop();\n      if (current_level === 0 && current_level_length === 0) {\n        paren_count--;\n      }\n      paren_level.push(current_level);\n      paren_count.push(paren_count);\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp944rebh1.ts(13,24): error TS2345: Argument of type 'number' is not assignable to parameter of type 'string'.\n../../../../tmp/tmp944rebh1.ts(19,11): error TS2367: This condition will always return 'false' since the types 'string' and 'number' have no overlap.\n../../../../tmp/tmp944rebh1.ts(22,24): error TS2345: Argument of type 'string' is not assignable to parameter of type 'number'.\n../../../../tmp/tmp944rebh1.ts(23,19): error TS2339: Property 'push' does not exist on type 'number'.\n",
      "timestamp": 1660334795
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  let paren_level_max = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level_max = Math.max(paren_level_max, paren_level_count);\n      paren_level_count++;\n    } else if (char === ')') {\n      paren_level_count--;\n      paren_level[paren_level_count] = paren_level_max;\n      paren_level_max = Math.max(paren_level_max, paren_level_count);\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  2,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp5az5n4je.js:29:12)\n    at Object.<anonymous> (/tmp/tmp5az5n4je.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 2, 2 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334796
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const groups = paren_string.trim().split(/\\s+/);\n  const max_level = Math.max(...groups.map(g => g.length));\n  const levels = new Array(max_level).fill(0);\n  for (let i = 0; i < groups.length; i++) {\n    const group = groups[i];\n    for (let j = 0; j < group.length; j++) {\n      levels[group[j]] += 1;\n    }\n  }\n  return levels.map(l => l === max_level ? l : l - 1);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp9whqwoh4.js:21:12)\n    at Object.<anonymous> (/tmp/tmp9whqwoh4.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    -1, -1, -1, -1, -1,\n    -1, -1, -1, -1, -1\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334797
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === \"(\") {\n      paren_stack.push(paren_string[i]);\n      paren_level.push(paren_level_count);\n      paren_level_count++;\n    } else if (paren_string[i] === \")\") {\n      paren_level_count--;\n      if (paren_level_count === 0) {\n        paren_level.push(paren_level_count);\n      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  1,\n  0,\n  0,\n  1,\n  2,\n  0,\n  0,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpdmxwf_ro.js:28:12)\n    at Object.<anonymous> (/tmp/tmpdmxwf_ro.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0, 1, 1, 0, 0, 1,\n    2, 0, 0, 0, 0, 1,\n    2, 1, 1, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334780
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count: number = 0;\n  let paren_level_max: number = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_max = Math.max(paren_level_max, paren_stack.length - 1);\n      paren_level_count += 1;\n    } else if (char === ')') {\n      paren_level_count -= 1;\n      paren_level[paren_stack.pop()] = paren_level_count;\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpjbdmo6xb.js:28:12)\n    at Object.<anonymous> (/tmp/tmpjbdmo6xb.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 2 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334797
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count: number = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === \"(\") {\n      paren_stack.push(paren_string[i]);\n      paren_level.push(paren_level_count);\n      paren_level_count++;\n    } else if (paren_string[i] === \")\") {\n      paren_level_count--;\n      if (paren_level_count === 0) {\n        paren_level.push(paren_level_count);\n      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  1,\n  0,\n  0,\n  1,\n  2,\n  0,\n  0,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpzbunejcf.js:28:12)\n    at Object.<anonymous> (/tmp/tmpzbunejcf.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0, 1, 1, 0, 0, 1,\n    2, 0, 0, 0, 0, 1,\n    2, 1, 1, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334791
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count: number = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level.push(paren_level_count);\n      paren_level_count++;\n    } else if (char === ')') {\n      paren_level_count--;\n      if (paren_level_count === 0) {\n        paren_level.push(paren_level_count);\n      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  1,\n  0,\n  0,\n  1,\n  2,\n  0,\n  0,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp95g60b3c.js:29:12)\n    at Object.<anonymous> (/tmp/tmp95g60b3c.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0, 1, 1, 0, 0, 1,\n    2, 0, 0, 0, 0, 1,\n    2, 1, 1, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334788
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_count = 0;\n  let paren_level_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_count);\n      paren_level_stack.push(paren_level_count);\n      paren_count++;\n    } else if (char === ')') {\n      paren_count--;\n      if (paren_count === 0) {\n        paren_level_count++;\n      }\n    } else if (char === ' ') {\n      if (paren_count === 0) {\n        paren_level_count++;\n      }\n    }\n  }\n  paren_stack.push(paren_count);\n  paren_level_stack.push(paren_level_count);\n  return paren_stack;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpo2ng_vwm.ts(15,7): error TS2304: Cannot find name 'paren_level_stack'.\n../../../../tmp/tmpo2ng_vwm.ts(29,3): error TS2304: Cannot find name 'paren_level_stack'.\n",
      "timestamp": 1660334797
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  let paren_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_count);\n      paren_count++;\n    } else if (char === ')') {\n      paren_count = paren_stack.pop();\n    }\n  }\n  return paren_stack;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp506xlkph.ts(12,24): error TS2345: Argument of type 'number' is not assignable to parameter of type 'string'.\n../../../../tmp/tmp506xlkph.ts(15,7): error TS2322: Type 'string' is not assignable to type 'number'.\n../../../../tmp/tmp506xlkph.ts(18,3): error TS2322: Type 'string[]' is not assignable to type 'number[]'.\n  Type 'string' is not assignable to type 'number'.\n",
      "timestamp": 1660334797
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_count = 0;\n  let paren_level_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_count);\n      paren_level_count += 1;\n    } else if (char === ')') {\n      paren_count -= 1;\n      paren_level_count -= 1;\n      if (paren_count === 0) {\n        paren_level.push(paren_level_count);\n      }\n    } else if (char === ' ') {\n      paren_count -= 1;\n      paren_level_count -= 1;\n      if (paren_count === 0) {\n        paren_level.push(paren_level_count);\n      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp3e70otix.js:37:12)\n    at Object.<anonymous> (/tmp/tmp3e70otix.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334798
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level.push(0);\n    } else if (char === ')') {\n      paren_level[paren_stack.length - 1]++;\n      if (paren_level[paren_stack.length - 1] === 1) {\n        paren_stack.push(paren_string[i]);\n      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  0,\n  NaN,\n  0,\n  0,\n  1,\n  NaN,\n  1,\n  0,\n  0,\n  0,\n  NaN,\n  1,\n  0,\n  NaN\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpispcxl1v.js:27:12)\n    at Object.<anonymous> (/tmp/tmpispcxl1v.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n      0,   1, 0, NaN, 0, 0,\n      1, NaN, 1,   0, 0, 0,\n    NaN,   1, 0, NaN\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334798
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  const paren_level_count: number[] = [];\n  const paren_level_max: number[] = [];\n  let paren_level_count = 0;\n  let paren_level_max = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_count.push(paren_level_count);\n      paren_level_max.push(paren_level_max);\n      paren_level_count++;\n    } else if (paren_string[i] === ')') {\n      paren_level_count = paren_stack.pop();\n      paren_level_max = paren_level_max.pop();\n    }\n  }\n  return paren_level_count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpd8tg5gvi.ts(9,9): error TS2451: Cannot redeclare block-scoped variable 'paren_level_count'.\n../../../../tmp/tmpd8tg5gvi.ts(10,9): error TS2451: Cannot redeclare block-scoped variable 'paren_level_max'.\n../../../../tmp/tmpd8tg5gvi.ts(11,7): error TS2451: Cannot redeclare block-scoped variable 'paren_level_count'.\n../../../../tmp/tmpd8tg5gvi.ts(12,7): error TS2451: Cannot redeclare block-scoped variable 'paren_level_max'.\n../../../../tmp/tmpd8tg5gvi.ts(15,24): error TS2345: Argument of type 'number[]' is not assignable to parameter of type 'number'.\n../../../../tmp/tmpd8tg5gvi.ts(16,30): error TS2345: Argument of type 'number[]' is not assignable to parameter of type 'number'.\n../../../../tmp/tmpd8tg5gvi.ts(17,28): error TS2345: Argument of type 'number[]' is not assignable to parameter of type 'number'.\n../../../../tmp/tmpd8tg5gvi.ts(18,7): error TS2588: Cannot assign to 'paren_level_count' because it is a constant.\n../../../../tmp/tmpd8tg5gvi.ts(20,7): error TS2588: Cannot assign to 'paren_",
      "timestamp": 1660334798
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count: number = 0;\n  let paren_level_max: number = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === \"(\") {\n      paren_stack.push(paren_level_count);\n      paren_level_count += 1;\n    } else if (paren_string[i] === \")\") {\n      paren_level_count -= 1;\n      if (paren_level_count === 0) {\n        paren_level.push(paren_stack.pop());\n        paren_level_max = Math.max(paren_level_max, paren_level[paren_level.length - 1]);\n      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  0,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmprlmly1pz.js:29:12)\n    at Object.<anonymous> (/tmp/tmprlmly1pz.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 0, 1 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334798
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const groups = paren_string.split(\" \");\n  const max_level = 0;\n  const max_level_group = 0;\n  for (let i = 0; i < groups.length; i++) {\n    const group = groups[i];\n    const level_of_nesting = group.length;\n    if (level_of_nesting > max_level) {\n      max_level = level_of_nesting;\n      max_level_group = i;\n    }\n  }\n  return [max_level_group + 1, max_level];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp2c1edei9.ts(14,7): error TS2588: Cannot assign to 'max_level' because it is a constant.\n../../../../tmp/tmp2c1edei9.ts(15,7): error TS2588: Cannot assign to 'max_level_group' because it is a constant.\n",
      "timestamp": 1660334798
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count_index: number[] = [];\n  let paren_level_max_count_index2: number[] = [];\n  let paren_level_max_count_index3: number[] = [];\n  let paren_level_max_count_index4: number[] = [];\n  let paren_level_max_count_index5: number[] = [];\n  let paren_level_max_count_index6: number[] = [];\n  let paren_level_max_count_index7: number[] = [];\n  let paren_level_max_count_index8: number[] = [];\n  let paren_level_max_count_index9: number[] = [];\n  let paren_level_max_count_index10: number[] = [];\n  let paren_level_max_count_index11: number[] = [];\n  let paren_level_max_count_index12: number[] = [];\n  let paren_level_max_count_index13: number[] = [];\n  let paren_level_max_count_index14: number[] = [];\n  let paren_level_max_count_index15: number[] = [];\n  let paren_level_max_count_index16: number[] = [];\n  let paren_level_max_count_index17: number[] = [];\n  let paren_level_max_count_index18: number[] = [];\n  let paren_level_max_count_index19: number[] = [];\n  let paren_level_max_count_index20: number[] = [];\n  let paren_level_max_count_index21: number[] = [];\n  let paren_level_max_count_index22: number[] = [];\n  let paren_level_max_count_index23: number[] = [];\n  let paren_level_max_count_index24: number[] = [];\n  let paren_level_max_count_index25: number[] = [];\n  let paren_level_max_count_index26: number[] = [];\n  let paren_level_max_count_index27: number[] = [];\n  let paren_level_max_count_index28: number[] = [];\n  let paren_level_max_count_index29: number[] = [];\n  let paren_level_max_count_index30: number[] = [];\n  let paren_level_max_count_index31: number[] = [];\n  let paren_level_max_count_index32: number[] = [];\n  let paren_level_max_count_index33: number[] = [];\n  let paren_level_max_count_index34: number[] = [];\n  let paren_level_max_count_index35: number[] = [];\n  let paren_level_max_count_index36: number[] = [];\n  let paren_level_max_count_index37: number[] = [];\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp45pqbsby.ts(59,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334798
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level.push(paren_level_count);\n      paren_level_count++;\n    } else if (char === ')') {\n      paren_level_count--;\n      paren_level.pop();\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp9pr4_f3m.js:27:12)\n    at Object.<anonymous> (/tmp/tmp9pr4_f3m.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334784
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count: number[] = [];\n  let paren_level_max: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count2: number[] = [];\n  let paren_level_max_count3: number[] = [];\n  let paren_level_max_count4: number[] = [];\n  let paren_level_max_count5: number[] = [];\n  let paren_level_max_count6: number[] = [];\n  let paren_level_max_count7: number[] = [];\n  let paren_level_max_count8: number[] = [];\n  let paren_level_max_count9: number[] = [];\n  let paren_level_max_count10: number[] = [];\n  let paren_level_max_count11: number[] = [];\n  let paren_level_max_count12: number[] = [];\n  let paren_level_max_count13: number[] = [];\n  let paren_level_max_count14: number[] = [];\n  let paren_level_max_count15: number[] = [];\n  let paren_level_max_count16: number[] = [];\n  let paren_level_max_count17: number[] = [];\n  let paren_level_max_count18: number[] = [];\n  let paren_level_max_count19: number[] = [];\n  let paren_level_max_count20: number[] = [];\n  let paren_level_max_count21: number[] = [];\n  let paren_level_max_count22: number[] = [];\n  let paren_level_max_count23: number[] = [];\n  let paren_level_max_count24: number[] = [];\n  let paren_level_max_count25: number[] = [];\n  let paren_level_max_count26: number[] = [];\n  let paren_level_max_count27: number[] = [];\n  let paren_level_max_count28: number[] = [];\n  let paren_level_max_count29: number[] = [];\n  let paren_level_max_count30: number[] = [];\n  let paren_level_max_count31: number[] = [];\n  let paren_level_max_count32: number[] = [];\n  let paren_level_max_count33: number[] = [];\n  let paren_level_max_count34: number[] = [];\n  let paren_level_max_count35: number[] = [];\n  let paren_level_max_count36: number[] = [];\n  let paren_level_max_count37: number[] = [];\n  let paren_level_max_count38: number[] = [];\n  let paren_level_max_count39: number[] = [];\n  let paren_level_max_count40: number[] = [];\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpyi3_666z.ts(63,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334780
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  let paren_level_max = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_max++;\n    } else if (char === ')') {\n      paren_level_count = paren_stack.pop();\n      paren_level[paren_level_count] = paren_level_max;\n      paren_level_max--;\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpwj4perp_.js:28:12)\n    at Object.<anonymous> (/tmp/tmpwj4perp_.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334784
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_count += 1;\n    } else if (char === ')') {\n      paren_level_count -= 1;\n      paren_level[paren_stack.pop()] = paren_level_count;\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmphl61jp2u.js:26:12)\n    at Object.<anonymous> (/tmp/tmphl61jp2u.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 2 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334780
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === \"(\") {\n      paren_stack.push(paren_count);\n      paren_level.push(0);\n      paren_count++;\n    } else if (paren_string[i] === \")\") {\n      const paren_level_index = paren_stack.pop();\n      if (paren_level_index >= 0) {\n        paren_count = paren_stack[paren_level_index];\n      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp6vhwj30n.js:28:12)\n    at Object.<anonymous> (/tmp/tmp6vhwj30n.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0,\n    0, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334798
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count: number[] = [];\n  let paren_level_max: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count2: number[] = [];\n  let paren_level_max_count3: number[] = [];\n  let paren_level_max_count4: number[] = [];\n  let paren_level_max_count5: number[] = [];\n  let paren_level_max_count6: number[] = [];\n  let paren_level_max_count7: number[] = [];\n  let paren_level_max_count8: number[] = [];\n  let paren_level_max_count9: number[] = [];\n  let paren_level_max_count10: number[] = [];\n  let paren_level_max_count11: number[] = [];\n  let paren_level_max_count12: number[] = [];\n  let paren_level_max_count13: number[] = [];\n  let paren_level_max_count14: number[] = [];\n  let paren_level_max_count15: number[] = [];\n  let paren_level_max_count16: number[] = [];\n  let paren_level_max_count17: number[] = [];\n  let paren_level_max_count18: number[] = [];\n  let paren_level_max_count19: number[] = [];\n  let paren_level_max_count20: number[] = [];\n  let paren_level_max_count21: number[] = [];\n  let paren_level_max_count22: number[] = [];\n  let paren_level_max_count23: number[] = [];\n  let paren_level_max_count24: number[] = [];\n  let paren_level_max_count25: number[] = [];\n  let paren_level_max_count26: number[] = [];\n  let paren_level_max_count27: number[] = [];\n  let paren_level_max_count28: number[] = [];\n  let paren_level_max_count29: number[] = [];\n  let paren_level_max_count30: number[] = [];\n  let paren_level_max_count31: number[] = [];\n  let paren_level_max_count32: number[] = [];\n  let paren_level_max_count33: number[] = [];\n  let paren_level_max_count34: number[] = [];\n  let paren_level_max_count35: number[] = [];\n  let paren_level_max_count36: number[] = [];\n  let paren_level_max_count37: number[] = [];\n  let paren_level_max_count38: number[] = [];\n  let paren_level_max_count39: number[] = [];\n  let paren_level_max_count40: number[] = [];\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpyi3_666z.ts(63,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334780
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count: number = 0;\n  let paren_level_max_count: number = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_count += 1;\n    } else if (char === ')') {\n      paren_level_count -= 1;\n      paren_level_max_count = Math.max(paren_level_max_count, paren_stack.pop());\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp4_n06mmx.js:27:12)\n    at Object.<anonymous> (/tmp/tmp4_n06mmx.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334798
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level.push(paren_level_count);\n      paren_level_count++;\n    } else if (char === ')') {\n      paren_level_count--;\n      paren_level.pop();\n      if (paren_level_count === 0) {\n        paren_stack.push(paren_string[i]);\n      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp16_n8jos.js:30:12)\n    at Object.<anonymous> (/tmp/tmp16_n8jos.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334798
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  let paren_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_count);\n      paren_count++;\n    } else if (char === ')') {\n      paren_count--;\n    }\n  }\n  return paren_stack;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  1,\n  0,\n  1,\n  2,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp2xngem7q.js:24:12)\n    at Object.<anonymous> (/tmp/tmp2xngem7q.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0, 1, 1, 0, 1,\n    2, 0, 0, 1, 2,\n    1, 1\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334780
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  let paren_level_max = 0;\n  let paren_level_max_index = 0;\n  let paren_level_max_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_count += 1;\n    } else if (char === ')') {\n      paren_level_count -= 1;\n      if (paren_level_count === 0) {\n        paren_level.push(paren_level_count);\n        paren_level_count += 1;\n      }\n    } else if (char === ' ') {\n      if (paren_level_count === 0) {\n        paren_level.push(paren_level_count);\n        paren_level_count += 1;\n      }\n    } else {\n      paren_level_count -= 1;\n      if (paren_level_count === 0) {\n        paren_level.push(paren_level_count);\n        paren_level_count += 1;\n      }\n    }\n    if (paren_level_count > paren_level_max) {\n      paren_level_max = paren_level_count;\n      paren_level_max_index = i;\n      paren_level_max_count = paren_level_count;\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp0_zpuuvs.js:50:12)\n    at Object.<anonymous> (/tmp/tmp0_zpuuvs.js:54:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334799
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count: number = 0;\n\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === \"(\") {\n      paren_stack.push(paren_string[i]);\n      paren_level.push(paren_level_count);\n      paren_level_count++;\n    } else if (paren_string[i] === \")\") {\n      paren_level_count--;\n      paren_level[paren_level.length - 1]++;\n    }\n  }\n\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  2,\n  3,\n  0,\n  1,\n  5,\n  1,\n  0,\n  1,\n  4,\n  2,\n  3\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp1k61wc3e.js:26:12)\n    at Object.<anonymous> (/tmp/tmp1k61wc3e.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0, 2, 3, 0, 1,\n    5, 1, 0, 1, 4,\n    2, 3\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334798
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_count += 1;\n    } else if (paren_string[i] === ')') {\n      paren_level_count -= 1;\n      paren_level[paren_stack.pop()] = paren_level_count;\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpsex96nys.js:25:12)\n    at Object.<anonymous> (/tmp/tmpsex96nys.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 2 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334798
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count: number = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === \"(\") {\n      paren_stack.push(paren_string[i]);\n      paren_level_count.push(paren_level_count);\n    } else if (paren_string[i] === \")\") {\n      paren_level_count = paren_level_count[paren_level_count];\n      paren_level_count--;\n      if (paren_level_count === 0) {\n        paren_level.push(paren_level_count);\n      }\n      paren_stack.splice(paren_stack.length - 1, 1);\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpfz6efa66.ts(13,25): error TS2339: Property 'push' does not exist on type 'number'.\n",
      "timestamp": 1660334799
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const groups = paren_string.trim().split(/\\s+/);\n  const max_level = Math.max(...groups.map(g => g.length));\n  const levels = new Array(max_level).fill(0);\n  for (let i = 0; i < groups.length; i++) {\n    const group = groups[i];\n    for (let j = 0; j < group.length; j++) {\n      if (group[j] === \"(\") {\n        levels[groups.length - 1 - i] += 1;\n      } else if (group[j] === \")\") {\n        levels[groups.length - 1 - i] -= 1;\n      }\n    }\n  }\n  return levels.filter(l => l > 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp9x2g6c3k.js:26:12)\n    at Object.<anonymous> (/tmp/tmp9x2g6c3k.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334798
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    const groups = paren_string.split(\" \");\n    const max_level = 0;\n    let level = 0;\n    for (let i = 0; i < groups.length; i++) {\n        if (groups[i].includes(\"(\")) {\n            level++;\n        }\n        if (groups[i].includes(\")\")) {\n            level--;\n        }\n        if (level > max_level) {\n            max_level = level;\n        }\n    }\n    return max_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpupsayjc2.ts(18,13): error TS2588: Cannot assign to 'max_level' because it is a constant.\n../../../../tmp/tmpupsayjc2.ts(21,5): error TS2322: Type 'number' is not assignable to type 'number[]'.\n",
      "timestamp": 1660334799
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_count);\n      paren_level.push(0);\n      paren_count++;\n    } else if (char === ')') {\n      paren_count = paren_stack.pop();\n      paren_level.pop();\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpzvvv4irt.js:27:12)\n    at Object.<anonymous> (/tmp/tmpzvvv4irt.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334799
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level.length);\n      paren_level.push(0);\n    } else if (char === ')') {\n      const level = paren_stack.pop();\n      if (level === undefined) {\n        throw new Error(`Unmatched closing parenthesis at index ${i}`);\n      }\n      paren_level[level] = paren_level[level] - 1;\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpjqr47cl0.js:28:12)\n    at Object.<anonymous> (/tmp/tmpjqr47cl0.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    -1, -1, -1, -1, -1,\n    -1, -1, -1, -1, -1,\n    -1, -1\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334799
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  let paren_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_count);\n      paren_count++;\n    } else if (char === ')') {\n      paren_count--;\n    }\n  }\n  return paren_stack;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  1,\n  0,\n  1,\n  2,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp2xngem7q.js:24:12)\n    at Object.<anonymous> (/tmp/tmp2xngem7q.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0, 1, 1, 0, 1,\n    2, 0, 0, 1, 2,\n    1, 1\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334780
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count: number = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === \"(\") {\n      paren_stack.push(paren_string[i]);\n      paren_level_count++;\n    } else if (paren_string[i] === \")\") {\n      paren_level_count--;\n      if (paren_level_count === 0) {\n        paren_level.push(paren_stack.length);\n        paren_stack.splice(paren_stack.length - 1, 1);\n      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  5,\n  5,\n  9\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpq31inenb.js:28:12)\n    at Object.<anonymous> (/tmp/tmpq31inenb.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 5, 5, 9 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334799
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count: number = 0;\n  let paren_level_max: number = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level.push(paren_level_count);\n      paren_level_count++;\n    } else if (char === ')') {\n      paren_level_count--;\n      if (paren_level_count === 0) {\n        paren_level_max = Math.max(...paren_level);\n      }\n      paren_level.splice(paren_level.indexOf(paren_level_count), 1);\n      paren_stack.splice(paren_stack.indexOf(paren_string[i]), 1);\n    }\n  }\n  return paren_level_max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpmulg3yuo.ts(26,3): error TS2322: Type 'number' is not assignable to type 'number[]'.\n",
      "timestamp": 1660334788
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  let paren_level_max = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_max = Math.max(paren_level_max, paren_stack.length - 1);\n      paren_level_count += 1;\n    } else if (char === ')') {\n      paren_level_count -= 1;\n      if (paren_level_count === 0) {\n        paren_level.push(paren_stack.pop());\n      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  0,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpp146a6yd.js:30:12)\n    at Object.<anonymous> (/tmp/tmpp146a6yd.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 0, 1 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334800
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count: number = 0;\n\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level.push(paren_level_count);\n      paren_level_count++;\n    } else if (char === ')') {\n      paren_level_count--;\n      if (paren_level_count === 0) {\n        paren_level.push(paren_level_count);\n      }\n      paren_stack.push(paren_string[i]);\n    } else {\n      paren_level_count--;\n    }\n  }\n\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  1,\n  0,\n  -1,\n  0,\n  1,\n  0,\n  -2,\n  -3,\n  -2,\n  -1,\n  -2,\n  -2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpm_5_ddua.js:33:12)\n    at Object.<anonymous> (/tmp/tmpm_5_ddua.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n     0,  1,  1,  0, -1,  0,\n     1,  0, -2, -3, -2, -1,\n    -2, -2\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334801
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const groups = paren_string.split(\" \");\n  const max_level = 0;\n  const max_level_group = 0;\n  for (let i = 0; i < groups.length; i++) {\n    const group = groups[i];\n    const level_of_nesting = group.length;\n    if (level_of_nesting > max_level) {\n      max_level = level_of_nesting;\n      max_level_group = i;\n    }\n  }\n  return [max_level_group + 1, max_level];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp2c1edei9.ts(14,7): error TS2588: Cannot assign to 'max_level' because it is a constant.\n../../../../tmp/tmp2c1edei9.ts(15,7): error TS2588: Cannot assign to 'max_level_group' because it is a constant.\n",
      "timestamp": 1660334798
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count: number = 0;\n  let paren_level_max: number = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_count += 1;\n    } else if (char === ')') {\n      paren_level_count -= 1;\n      paren_level[paren_stack.pop()] = paren_level_count;\n      if (paren_level_count > paren_level_max) {\n        paren_level_max = paren_level_count;\n      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpkq25fs6c.js:30:12)\n    at Object.<anonymous> (/tmp/tmpkq25fs6c.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 2 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334795
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  let paren_level_max = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_max++;\n    } else if (char === ')') {\n      paren_level_count = paren_stack.pop();\n      paren_level_max--;\n    }\n    paren_level_count++;\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpg2_c2fsb.js:28:12)\n    at Object.<anonymous> (/tmp/tmpg2_c2fsb.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334801
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count: number = 0;\n  let paren_level_max: number = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === \"(\") {\n      paren_stack.push(paren_level_count);\n      paren_level_count += 1;\n    } else if (paren_string[i] === \")\") {\n      paren_level_count -= 1;\n      if (paren_level_count === 0) {\n        paren_level.push(paren_stack.pop());\n        paren_level_max = Math.max(paren_level_max, paren_level[paren_level.length - 1]);\n      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  0,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmprlmly1pz.js:29:12)\n    at Object.<anonymous> (/tmp/tmprlmly1pz.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 0, 1 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334798
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  const paren_level_count: number[] = [];\n  const paren_level_max_count: number[] = [];\n  const paren_level_max_count_index: number[] = [];\n  const paren_level_max_count_index2: number[] = [];\n  const paren_level_max_count_index3: number[] = [];\n  const paren_level_max_count_index4: number[] = [];\n  const paren_level_max_count_index5: number[] = [];\n  const paren_level_max_count_index6: number[] = [];\n  const paren_level_max_count_index7: number[] = [];\n  const paren_level_max_count_index8: number[] = [];\n  const paren_level_max_count_index9: number[] = [];\n  const paren_level_max_count_index10: number[] = [];\n  const paren_level_max_count_index11: number[] = [];\n  const paren_level_max_count_index12: number[] = [];\n  const paren_level_max_count_index13: number[] = [];\n  const paren_level_max_count_index14: number[] = [];\n  const paren_level_max_count_index15: number[] = [];\n  const paren_level_max_count_index16: number[] = [];\n  const paren_level_max_count_index17: number[] = [];\n  const paren_level_max_count_index18: number[] = [];\n  const paren_level_max_count_index19: number[] = [];\n  const paren_level_max_count_index20: number[] = [];\n  const paren_level_max_count_index21: number[] = [];\n  const paren_level_max_count_index22: number[] = [];\n  const paren_level_max_count_index23: number[] = [];\n  const paren_level_max_count_index24: number[] = [];\n  const paren_level_max_count_index25: number[] = [];\n  const paren_level_max_count_index26: number[] = [];\n  const paren_level_max_count_index27: number[] = [];\n  const paren_level_max_count_index28: number[] = [];\n  const paren_level_max_count_index29: number[] = [];\n  const paren_level_max_count_index30: number[] = [];\n  const paren_level_max_count_index31: number[] = [];\n  const paren_level_max_count_index32: number[] = [];\n  const paren_level_max_count_index33: number[] = [];\n  const paren_level_max_count_index34: number[] = [];\n  const paren_level_max_count_index35: number[] = [];\n  const paren_level_max_count_index36: number[] = [];\n  const paren_level_max_count_index37: number[] = [];\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp1o2lxb5f.ts(59,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334801
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_level: number[] = [];\n  let paren_level_max_level_length: number[] = [];\n  let paren_level_max_level_length_count: number[] = [];\n  let paren_level_max_level_length_count2: number[] = [];\n  let paren_level_max_level_length_count3: number[] = [];\n  let paren_level_max_level_length_count4: number[] = [];\n  let paren_level_max_level_length_count5: number[] = [];\n  let paren_level_max_level_length_count6: number[] = [];\n  let paren_level_max_level_length_count7: number[] = [];\n  let paren_level_max_level_length_count8: number[] = [];\n  let paren_level_max_level_length_count9: number[] = [];\n  let paren_level_max_level_length_count10: number[] = [];\n  let paren_level_max_level_length_count11: number[] = [];\n  let paren_level_max_level_length_count12: number[] = [];\n  let paren_level_max_level_length_count13: number[] = [];\n  let paren_level_max_level_length_count14: number[] = [];\n  let paren_level_max_level_length_count15: number[] = [];\n  let paren_level_max_level_length_count16: number[] = [];\n  let paren_level_max_level_length_count17: number[] = [];\n  let paren_level_max_level_length_count18: number[] = [];\n  let paren_level_max_level_length_count19: number[] = [];\n  let paren_level_max_level_length_count20: number[] = [];\n  let paren_level_max_level_length_count21: number[] = [];\n  let paren_level_max_level_length_count22: number[] = [];\n  let paren_level_max_level_length_count23: number[] = [];\n  let paren_level_max_level_length_count24: number[] = [];\n  let paren_level_max_level_length_count25: number[] = [];\n  let paren_level_max_level_length_count26: number[] = [];\n  let paren_level_max_level_length_count27: number[] = [];\n  let paren_level_max_level_length_count28: number[] = [];\n  let paren_level_max_level_length_count29: number[] = [];\n  let paren_level_max_level_length_count30: number[] = [];\n  let paren_level_max_level_length_count31: number[] = [];\n  let paren_level_max_level_length_count32: number[] = [];\n  let paren_level_max_level_length_count33\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpomlwq9b8.ts(57,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334787
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  let paren_level = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === \"(\") {\n      paren_stack.push(paren_string[i]);\n      paren_level++;\n    } else if (paren_string[i] === \")\") {\n      paren_level--;\n      if (paren_level === 0) {\n        paren_stack.shift();\n      }\n    }\n  }\n  return paren_stack.length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp6us2ky9n.ts(20,3): error TS2322: Type 'number' is not assignable to type 'number[]'.\n",
      "timestamp": 1660334801
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  const paren_level_count: number[] = [];\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level.length);\n      paren_level_count.push(0);\n    } else if (char === ')') {\n      const paren_level_index = paren_stack.pop();\n      paren_level[paren_level_index] += 1;\n      paren_level_count[paren_level_index] += 1;\n    }\n  }\n  return paren_level_count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  1,\n  3,\n  1,\n  3,\n  1,\n  1,\n  0,\n  0,\n  0,\n  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpnh1wes15.js:27:12)\n    at Object.<anonymous> (/tmp/tmpnh1wes15.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    2, 1, 3, 1, 3,\n    1, 1, 0, 0, 0,\n    0, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334801
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  let paren_level_max = 0;\n  let paren_level_max_index = 0;\n  let paren_level_max_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_count += 1;\n    } else if (char === ')') {\n      paren_level_count -= 1;\n      paren_level_max = Math.max(paren_level_max, paren_stack.pop());\n      if (paren_level_count === 0) {\n        paren_level_max_index = paren_level_max_count;\n        paren_level_max_count = paren_stack.length;\n      }\n    } else if (char === ' ') {\n      paren_level_max_count = Math.max(paren_level_max_count, paren_stack.length);\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp0tvvo18f.ts(16,24): error TS2345: Argument of type 'number' is not assignable to parameter of type 'string'.\n../../../../tmp/tmp0tvvo18f.ts(20,51): error TS2345: Argument of type 'string' is not assignable to parameter of type 'number'.\n",
      "timestamp": 1660334801
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const groups = paren_string.trim().split(/\\s+/);\n  const max_level = Math.max(...groups.map(group => parse_nested_parens(group)));\n  return max_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp9c5cy3fx.ts(8,30): error TS2345: Argument of type 'number[]' is not assignable to parameter of type 'number'.\n../../../../tmp/tmp9c5cy3fx.ts(9,3): error TS2322: Type 'number' is not assignable to type 'number[]'.\n",
      "timestamp": 1660334801
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  let paren_level_max_count = 1;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level.push(paren_level_count);\n      paren_level_count++;\n    } else if (paren_string[i] === ')') {\n      paren_level_count--;\n      if (paren_level_count === 0) {\n        paren_level.push(paren_level_count);\n        if (paren_level_count > paren_level_max_count) {\n          paren_level_max_count = paren_level_count;\n        }\n      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  1,\n  0,\n  0,\n  1,\n  2,\n  0,\n  0,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpheqs38gg.js:32:12)\n    at Object.<anonymous> (/tmp/tmpheqs38gg.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0, 1, 1, 0, 0, 1,\n    2, 0, 0, 0, 0, 1,\n    2, 1, 1, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334801
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  let paren_level_max = 0;\n  let paren_level_max_index = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_count += 1;\n    } else if (paren_string[i] === ')') {\n      paren_level_count -= 1;\n      if (paren_level_count === 0) {\n        paren_level.push(paren_level_count);\n        paren_level_max = Math.max(...paren_level);\n        paren_level_max_index = paren_level.length - 1;\n      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp9si95hl2.js:31:12)\n    at Object.<anonymous> (/tmp/tmp9si95hl2.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0, 0, 0 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334801
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  let paren_level_max = 0;\n  let paren_level_max_index = 0;\n  let paren_level_max_count = 0;\n  let paren_level_max_string = \"\";\n  let paren_level_max_string_index = 0;\n  let paren_level_max_string_length = 0;\n  let paren_level_max_string_chars: number[] = [];\n  let paren_level_max_string_chars_index = 0;\n  let paren_level_max_string_chars_length = 0;\n  let paren_level_max_string_chars_string = \"\";\n  let paren_level_max_string_chars_string_index = 0;\n  let paren_level_max_string_chars_string_length = 0;\n  let paren_level_max_string_chars_string_chars: number[] = [];\n  let paren_level_max_string_chars_string_chars_index = 0;\n  let paren_level_max_string_chars_string_chars_length = 0;\n  let paren_level_max_string_chars_string_chars_string = \"\";\n  let paren_level_max_string_chars_string_chars_string_index = 0;\n  let paren_level_max_string_chars_string_chars_string_length = 0;\n  let paren_level_max_string_chars_string_chars_string_chars: number[] = [];\n  let paren_level_max_string_chars_string_chars_string_chars_index = 0;\n  let paren_level_max_string_chars_string_chars_string_chars_length = 0;\n  let paren_level_max_string_chars_string_chars_string_chars_string = \"\";\n  let paren_level_max_string_chars_string_chars_string_chars_string_index = 0;\n  let paren_level_max_string_chars_string_chars_string_chars_string_length = 0;\n  let paren_level_max_string_chars_string_chars_string_chars_string_chars: number[] = [];\n  let paren_level_max_string_chars_string_chars_string_chars_string_chars_index = 0;\n  let paren_level_max_string_chars_string_chars_string_chars_string_chars_length = 0;\n  let paren_level_max_string_chars_string_chars_string_chars_string_chars_string = \"\";\n  let paren_level_max_string_chars_string_chars_string_chars_string_chars_string_index = 0;\n  let paren_level_max_string_chars_string_chars_string_chars_string_chars_string_length = 0;\n  let paren_level_max_string_chars_string_chars_string_chars_string_chars_string_chars: number[] = [];\n  let paren_level_max_string_chars_string_chars_string_chars_string_chars_string_chars_index = 0;\n  let paren_level_max_string_chars_string_chars_string_chars_string_chars_string_chars_length = 0;\n  let paren_level_max_string_chars_string_chars_string_chars_string_chars_string_chars_string = \"\";\n  let paren_level_max_string_chars_string_chars_string_chars_string_chars_string_chars_string_index = 0;\n  let paren_level_max_string_chars_string_chars_string_chars_string_chars_string_chars_string_length = 0;\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpm5r17iwh.ts(57,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334801
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count: number = 0;\n  let paren_level_max: number = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level_max++;\n    } else if (char === ')') {\n      paren_level_count++;\n      if (paren_level_count > paren_level_max) {\n        paren_level_max = paren_level_count;\n      }\n      paren_level.pop();\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp2spjcv6x.js:30:12)\n    at Object.<anonymous> (/tmp/tmp2spjcv6x.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334801
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  const paren_level_max: number[] = [];\n  const paren_level_max_index = 0;\n  const paren_level_max_index2 = 0;\n  let paren_level_max_index3 = 0;\n  let paren_level_max_index4 = 0;\n  let paren_level_max_index5 = 0;\n  let paren_level_max_index6 = 0;\n  let paren_level_max_index7 = 0;\n  let paren_level_max_index8 = 0;\n  let paren_level_max_index9 = 0;\n  let paren_level_max_index10 = 0;\n  let paren_level_max_index11 = 0;\n  let paren_level_max_index12 = 0;\n  let paren_level_max_index13 = 0;\n  let paren_level_max_index14 = 0;\n  let paren_level_max_index15 = 0;\n  let paren_level_max_index16 = 0;\n  let paren_level_max_index17 = 0;\n  let paren_level_max_index18 = 0;\n  let paren_level_max_index19 = 0;\n  let paren_level_max_index20 = 0;\n  let paren_level_max_index21 = 0;\n  let paren_level_max_index22 = 0;\n  let paren_level_max_index23 = 0;\n  let paren_level_max_index24 = 0;\n  let paren_level_max_index25 = 0;\n  let paren_level_max_index26 = 0;\n  let paren_level_max_index27 = 0;\n  let paren_level_max_index28 = 0;\n  let paren_level_max_index29 = 0;\n  let paren_level_max_index30 = 0;\n  let paren_level_max_index31 = 0;\n  let paren_level_max_index32 = 0;\n  let paren_level_max_index33 = 0;\n  let paren_level_max_index34 = 0;\n  let paren_level_max_index35 = 0;\n  let paren_level_max_index36 = 0;\n  let paren_level_max_index37 = 0;\n  let paren_level_max_index38 = 0;\n  let paren_level_max_index39 = 0;\n  let paren_level_max_index40 = 0;\n  let paren_level_max_index41 = 0;\n  let paren_level_max_index42 = 0;\n  let paren_level_max_index43 = 0;\n  let paren_level_max_index44 = 0;\n  let paren_level_max_index45 = 0;\n  let paren_level_max_index46 = 0;\n  let paren_level_max_index47 = 0;\n  let paren_level_max_index48 = 0;\n  let paren_level_max_index49 = 0;\n  let paren_level_max_index50 = 0;\n  let paren_level_max_index51 = 0;\n  let paren_level_max_index52 = 0;\n  let paren_level_max_index53 = 0;\n  let paren_level_max_index54 = 0;\n  let paren_level_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpgci1mcrq.ts(76,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334801
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === \"(\") {\n      paren_stack.push(paren_string[i]);\n      paren_level.push(paren_count);\n      paren_count++;\n    } else if (paren_string[i] === \")\") {\n      paren_count--;\n      if (paren_count === 0) {\n        paren_stack.shift();\n        paren_level.shift();\n      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpsi6h4mfq.js:29:12)\n    at Object.<anonymous> (/tmp/tmpsi6h4mfq.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    1, 2, 0, 0,\n    1, 2, 1, 1\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334801
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  let paren_level_max = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === \"(\") {\n      paren_stack.push(paren_string[i]);\n      paren_level_max++;\n    } else if (paren_string[i] === \")\") {\n      paren_level_count--;\n      if (paren_level_count === 0) {\n        paren_level.push(paren_level_max);\n      }\n      paren_stack.push(paren_string[i]);\n    } else if (paren_string[i] === \" \") {\n      paren_level_count++;\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpikb3nq8p.js:32:12)\n    at Object.<anonymous> (/tmp/tmpikb3nq8p.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334802
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === \"(\") {\n      paren_stack.push(paren_string[i]);\n      paren_level_count += 1;\n    } else if (paren_string[i] === \")\") {\n      paren_level[paren_level_count] += 1;\n      if (paren_level[paren_level_count] === 0) {\n        paren_level_count -= 1;\n      }\n      paren_stack.pop();\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  <2 empty items>,\n  NaN,\n  NaN,\n  <2 empty items>,\n  NaN,\n  NaN,\n  <2 empty items>,\n  NaN,\n  NaN,\n  NaN\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp391d2a2f.js:28:12)\n    at Object.<anonymous> (/tmp/tmp391d2a2f.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    <2 empty items>, NaN,\n    NaN,             <2 empty items>,\n    NaN,             NaN,\n    <2 empty items>, NaN,\n    NaN,             NaN\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  o",
      "stdout": "",
      "timestamp": 1660334802
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  const paren_level_count: number[] = [];\n  let paren_level_index = 0;\n  let paren_level_counts_index = 0;\n  let paren_level_count_index = 0;\n  let paren_level_count_max = 0;\n  let paren_level_count_max_index = 0;\n  let paren_level_count_min = 0;\n  let paren_level_count_min_index = 0;\n  let paren_level_count_sum = 0;\n  let paren_level_count_sum_index = 0;\n  let paren_level_count_sum2 = 0;\n  let paren_level_count_sum2_index = 0;\n  let paren_level_count_sum3 = 0;\n  let paren_level_count_sum3_index = 0;\n  let paren_level_count_sum4 = 0;\n  let paren_level_count_sum4_index = 0;\n  let paren_level_count_sum5 = 0;\n  let paren_level_count_sum5_index = 0;\n  let paren_level_count_sum6 = 0;\n  let paren_level_count_sum6_index = 0;\n  let paren_level_count_sum7 = 0;\n  let paren_level_count_sum7_index = 0;\n  let paren_level_count_sum8 = 0;\n  let paren_level_count_sum8_index = 0;\n  let paren_level_count_sum9 = 0;\n  let paren_level_count_sum9_index = 0;\n  let paren_level_count_sum10 = 0;\n  let paren_level_count_sum10_index = 0;\n  let paren_level_count_sum11 = 0;\n  let paren_level_count_sum11_index = 0;\n  let paren_level_count_sum12 = 0;\n  let paren_level_count_sum12_index = 0;\n  let paren_level_count_sum13 = 0;\n  let paren_level_count_sum13_index = 0;\n  let paren_level_count_sum14 = 0;\n  let paren_level_count_sum14_index = 0;\n  let paren_level_count_sum15 = 0;\n  let paren_level_count_sum15_index = 0;\n  let paren_level_count_sum16 = 0;\n  let paren_level_count_sum16_index = 0;\n  let paren_level_count_sum17 = 0;\n  let paren_level_count_sum17_index = 0;\n  let paren_level_count_sum18 = 0;\n  let paren_level_count_sum18_index = 0;\n  let paren_level_count_sum19 = 0;\n  let paren_level_count_sum19_index = 0;\n  let paren_level_count_sum20 = 0;\n  let paren_level_count_sum20_index = 0;\n  let paren_level_count_sum21 = 0;\n  let paren_level_count_sum21_index = 0;\n  let paren_level_count_sum22 = 0;\n  let paren_level_count_sum22_index = 0;\n  let paren_level_count_sum23 = 0;\n  let paren_level_count_sum\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpuo_m6vuv.ts(74,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334801
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count: number = 0;\n\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_count += 1;\n    } else if (char === ')') {\n      paren_level_count -= 1;\n      paren_level[paren_stack.pop()] = paren_level_count;\n    }\n  }\n\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpwbo7ysg3.js:26:12)\n    at Object.<anonymous> (/tmp/tmpwbo7ysg3.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 2 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334802
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  let paren_level_max = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_max = Math.max(paren_level_max, paren_stack.length - 1);\n      paren_level_count += 1;\n    } else if (char === ')') {\n      paren_level_count -= 1;\n      if (paren_level_count === 0) {\n        paren_level.push(paren_level_max);\n      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  5,\n  6,\n  11\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpy4r4vga9.js:30:12)\n    at Object.<anonymous> (/tmp/tmpy4r4vga9.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 5, 6, 11 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334802
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const groups = paren_string.trim().split(/\\s+/);\n  const max_level = Math.max(...groups.map(g => g.length));\n  const levels = new Array(max_level).fill(0);\n  for (let i = 0; i < groups.length; i++) {\n    const group = groups[i];\n    for (let j = 0; j < group.length; j++) {\n      if (group[j] === \"(\") {\n        levels[groups.length - 1 - i] += 1;\n      } else if (group[j] === \")\") {\n        levels[groups.length - 1 - i] -= 1;\n      }\n    }\n  }\n  return levels.filter(l => l > 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp9x2g6c3k.js:26:12)\n    at Object.<anonymous> (/tmp/tmp9x2g6c3k.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334798
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level.push(paren_level_count);\n      paren_level_count++;\n    } else if (char === ')') {\n      paren_level_count--;\n      if (paren_level_count === 0) {\n        paren_level.push(paren_level_count);\n      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  1,\n  0,\n  0,\n  1,\n  2,\n  0,\n  0,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpew79coj6.js:29:12)\n    at Object.<anonymous> (/tmp/tmpew79coj6.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0, 1, 1, 0, 0, 1,\n    2, 0, 0, 0, 0, 1,\n    2, 1, 1, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334784
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  const paren_level_max: number[] = [];\n  const paren_level_max_index: number[] = [];\n  const paren_level_max_value: number[] = [];\n  const paren_level_max_value_length: number[] = [];\n  const paren_level_max_value_length_index: number[] = [];\n  const paren_level_max_value_length_value: number[] = [];\n  const paren_level_max_value_length_value_index: number[] = [];\n  const paren_level_max_value_length_value_length: number[] = [];\n  const paren_level_max_value_length_value_length_index: number[] = [];\n  const paren_level_max_value_length_value_length_value: number[] = [];\n  const paren_level_max_value_length_value_length_value_index: number[] = [];\n  const paren_level_max_value_length_value_length_value_length: number[] = [];\n  const paren_level_max_value_length_value_length_value_length_index: number[] = [];\n  const paren_level_max_value_length_value_length_value_length_value: number[] = [];\n  const paren_level_max_value_length_value_length_value_length_value_index: number[] = [];\n  const paren_level_max_value_length_value_length_value_length_value_length: number[] = [];\n  const paren_level_max_value_length_value_length_value_length_value_length_index: number[] = [];\n  const paren_level_max_value_length_value_length_value_length_value_length_value: number[] = [];\n  const paren_level_max_value_length_value_length_value_length_value_length_value_index: number[] = [];\n  const paren_level_max_value_length_value_length_value_length_value_length_value_length: number[] = [];\n  const paren_level_max_value_length_value_length_value_length_value_length_value_length_index: number[] = [];\n  const paren_level_max_value_length_value_length_value_length_value_length_value_length_value: number[] = [];\n  const paren_level_max_value_length_value_length_value_length_value_length_value_length_value_index: number[] = [];\n  const paren_level_max_value_length_value_length_value_length_value_length_value_length_value_length: number[] = [];\n  const paren_level_max_value_length_value_length_value_length_value_length_value_length_value_length_index: number[] = [];\n  const paren_level_max_value_length_value_length_value_length_value_length_value_length_value_length_value: number[] = [];\n  const paren_level_max_value_length_value_length_value_length_value_length_value_length_value_length_value_index: number[] = [];\n  const paren_level_max_value_length_value_length_value_length_value_length_value_length_value_length_value_length: number[] = [];\n  const paren_level_max_value_length_value_length\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp18vpg_a2.ts(49,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334802
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  let paren_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      paren_stack.push(paren_count);\n      paren_count++;\n    } else if (paren_string[i] === ')') {\n      paren_count--;\n    }\n  }\n  return paren_stack;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  1,\n  0,\n  1,\n  2,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp5x0ipzm_.js:23:12)\n    at Object.<anonymous> (/tmp/tmp5x0ipzm_.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0, 1, 1, 0, 1,\n    2, 0, 0, 1, 2,\n    1, 1\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334787
    }
  ]
}