{
  "language": "ts",
  "name": "HumanEval_47_median",
  "results": [
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length % 2 === 0) {\n    return l[(l.length / 2) - 1];\n  }\n  const mid = l.length / 2;\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return ((left + right) / 2) | 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpn3ermfo0.js:11\n    const left = median(l.slice(0, mid));\n                          ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmpn3ermfo0.js:11:27)\n    at median (/tmp/tmpn3ermfo0.js:12:19)\n    at median (/tmp/tmpn3ermfo0.js:12:19)\n    at median (/tmp/tmpn3ermfo0.js:12:19)\n    at median (/tmp/tmpn3ermfo0.js:12:19)\n    at median (/tmp/tmpn3ermfo0.js:12:19)\n    at median (/tmp/tmpn3ermfo0.js:12:19)\n    at median (/tmp/tmpn3ermfo0.js:12:19)\n    at median (/tmp/tmpn3ermfo0.js:12:19)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334798
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error('Cannot compute median of an empty array');\n  }\n  const n = l.length;\n  if (n % 2 === 0) {\n    return l[Math.floor(n / 2)];\n  }\n  const half = n / 2;\n  const left = median(l.slice(0, half));\n  const right = median(l.slice(half));\n  return left + right;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmphxyoeclg.js:8\n        throw new Error('Cannot compute median of an empty array');\n        ^\n\nError: Cannot compute median of an empty array\n    at median (/tmp/tmphxyoeclg.js:8:15)\n    at median (/tmp/tmphxyoeclg.js:15:18)\n    at median (/tmp/tmphxyoeclg.js:15:18)\n    at median (/tmp/tmphxyoeclg.js:16:19)\n    at test (/tmp/tmphxyoeclg.js:22:22)\n    at Object.<anonymous> (/tmp/tmphxyoeclg.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334798
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length % 2 === 0) {\n    return l[l.length / 2 - 1]\n  }\n  const mid = l.length / 2\n  const left = l.slice(0, mid)\n  const right = l.slice(mid)\n  return median(left) + median(right)\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpt7zicu5p.js:11\n    const left = l.slice(0, mid);\n                   ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmpt7zicu5p.js:11:20)\n    at median (/tmp/tmpt7zicu5p.js:13:27)\n    at median (/tmp/tmpt7zicu5p.js:13:27)\n    at median (/tmp/tmpt7zicu5p.js:13:27)\n    at median (/tmp/tmpt7zicu5p.js:13:27)\n    at median (/tmp/tmpt7zicu5p.js:13:27)\n    at median (/tmp/tmpt7zicu5p.js:13:27)\n    at median (/tmp/tmpt7zicu5p.js:13:27)\n    at median (/tmp/tmpt7zicu5p.js:13:27)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334798
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty array\");\n  }\n  const n = l.length;\n  if (n % 2 === 0) {\n    return l[Math.floor(n / 2)];\n  }\n  const half = n / 2;\n  const left = median(l.slice(0, half));\n  const right = median(l.slice(half));\n  return left + right / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmp2dkoakgf.js:8\n        throw new Error(\"Cannot calculate median of an empty array\");\n        ^\n\nError: Cannot calculate median of an empty array\n    at median (/tmp/tmp2dkoakgf.js:8:15)\n    at median (/tmp/tmp2dkoakgf.js:15:18)\n    at median (/tmp/tmp2dkoakgf.js:15:18)\n    at median (/tmp/tmp2dkoakgf.js:16:19)\n    at test (/tmp/tmp2dkoakgf.js:22:22)\n    at Object.<anonymous> (/tmp/tmp2dkoakgf.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334798
    },
    {
      "exit_code": 2,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty array\");\n  }\n  const n = l.length;\n  if (n % 2 === 0) {\n    return l[Math.floor(n / 2)];\n  }\n  const half = Math.floor(n / 2);\n  return median(l.slice(0, half), l.slice(half));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpvymz6s70.ts(15,35): error TS2554: Expected 1 arguments, but got 2.\n",
      "timestamp": 1660334798
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const sorted = l.slice().sort((a, b) => a - b);\n  if (sorted.length % 2 === 0) {\n    return sorted[(sorted.length / 2) - 1];\n  }\n  return sorted[Math.floor(sorted.length / 2)];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n6\n\nshould loosely deep-equal\n\n8\n    at test (/tmp/tmp9dz2iy_1.js:20:12)\n    at Object.<anonymous> (/tmp/tmp9dz2iy_1.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 6,\n  expected: 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334798
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty array\");\n  }\n  const n = l.length;\n  if (n % 2 === 0) {\n    return l[Math.floor(n / 2)];\n  }\n  const half = n / 2;\n  let left = median(l.slice(0, half));\n  let right = median(l.slice(half));\n  return ((left + right) / 2) | 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpvv78mxbj.js:8\n        throw new Error(\"Cannot calculate median of an empty array\");\n        ^\n\nError: Cannot calculate median of an empty array\n    at median (/tmp/tmpvv78mxbj.js:8:15)\n    at median (/tmp/tmpvv78mxbj.js:15:16)\n    at median (/tmp/tmpvv78mxbj.js:15:16)\n    at median (/tmp/tmpvv78mxbj.js:16:17)\n    at test (/tmp/tmpvv78mxbj.js:22:22)\n    at Object.<anonymous> (/tmp/tmpvv78mxbj.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334798
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const mid = l.length / 2;\n  const left = l.slice(0, mid);\n  const right = l.slice(mid);\n  return median(left) + median(right);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpgkyfndrg.js:11\n    const left = l.slice(0, mid);\n                   ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmpgkyfndrg.js:11:20)\n    at median (/tmp/tmpgkyfndrg.js:13:27)\n    at median (/tmp/tmpgkyfndrg.js:13:27)\n    at median (/tmp/tmpgkyfndrg.js:13:27)\n    at median (/tmp/tmpgkyfndrg.js:13:27)\n    at median (/tmp/tmpgkyfndrg.js:13:27)\n    at median (/tmp/tmpgkyfndrg.js:13:27)\n    at median (/tmp/tmpgkyfndrg.js:13:27)\n    at median (/tmp/tmpgkyfndrg.js:13:27)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334798
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const mid = l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return (left + right) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpsdei5ayr.js:14\n    const left = median(l.slice(0, mid));\n                          ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmpsdei5ayr.js:14:27)\n    at median (/tmp/tmpsdei5ayr.js:15:19)\n    at median (/tmp/tmpsdei5ayr.js:15:19)\n    at median (/tmp/tmpsdei5ayr.js:15:19)\n    at median (/tmp/tmpsdei5ayr.js:15:19)\n    at median (/tmp/tmpsdei5ayr.js:15:19)\n    at median (/tmp/tmpsdei5ayr.js:15:19)\n    at median (/tmp/tmpsdei5ayr.js:15:19)\n    at median (/tmp/tmpsdei5ayr.js:15:19)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334798
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const n = l.length;\n  if (n % 2 === 0) {\n    return l[Math.floor(n / 2)];\n  }\n  const mid = Math.floor(n / 2);\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return Math.ceil((left + right) / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmp93fptb2c.js:15\n    const left = median(l.slice(0, mid));\n                          ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmp93fptb2c.js:15:27)\n    at median (/tmp/tmp93fptb2c.js:16:19)\n    at median (/tmp/tmp93fptb2c.js:16:19)\n    at median (/tmp/tmp93fptb2c.js:16:19)\n    at median (/tmp/tmp93fptb2c.js:16:19)\n    at median (/tmp/tmp93fptb2c.js:16:19)\n    at median (/tmp/tmp93fptb2c.js:16:19)\n    at median (/tmp/tmp93fptb2c.js:16:19)\n    at median (/tmp/tmp93fptb2c.js:16:19)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334798
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const mid = l.length / 2;\n  if (l.length % 2) {\n    return l[mid];\n  }\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return ((left + right) / 2) | 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpdtygyak5.js:21:12)\n    at Object.<anonymous> (/tmp/tmpdtygyak5.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334798
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty array\");\n  }\n  const sorted = l.slice().sort((a, b) => a - b);\n  const len = sorted.length;\n  if (len % 2 === 0) {\n    return sorted[(len - 1) / 2];\n  }\n  const middle = Math.floor(len / 2);\n  const medianOfMiddle = Math.floor(len / 2);\n  const medianOfMiddle2 = Math.floor(len / 2);\n  if (sorted[middle] >= sorted[medianOfMiddle]) {\n    return sorted[middle];\n  }\n  if (sorted[middle] >= sorted[medianOfMiddle2]) {\n    return sorted[medianOfMiddle];\n  }\n  return sorted[medianOfMiddle2];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n8\n    at test (/tmp/tmplr19crmo.js:30:12)\n    at Object.<anonymous> (/tmp/tmplr19crmo.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334798
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const sorted = l.slice().sort((a, b) => a - b);\n  const len = sorted.length;\n  if (len % 2 === 0) {\n    return sorted[len / 2 - 1];\n  }\n  const middle = Math.floor(len / 2);\n  const median1 = sorted[middle - 1];\n  const median2 = sorted[middle];\n  return (median1 + median2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2.5\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmp3y252_qa.js:23:12)\n    at Object.<anonymous> (/tmp/tmp3y252_qa.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2.5,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334798
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot compute median of an empty array\");\n  }\n  const n = l.length;\n  if (n % 2 === 0) {\n    return l[Math.floor(n / 2)];\n  }\n  const half = n / 2;\n  const left = median(l.slice(0, half));\n  const right = median(l.slice(half));\n  return left + right;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpwhrlk_b7.js:8\n        throw new Error(\"Cannot compute median of an empty array\");\n        ^\n\nError: Cannot compute median of an empty array\n    at median (/tmp/tmpwhrlk_b7.js:8:15)\n    at median (/tmp/tmpwhrlk_b7.js:15:18)\n    at median (/tmp/tmpwhrlk_b7.js:15:18)\n    at median (/tmp/tmpwhrlk_b7.js:16:19)\n    at test (/tmp/tmpwhrlk_b7.js:22:22)\n    at Object.<anonymous> (/tmp/tmpwhrlk_b7.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334798
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const mid = l.length / 2;\n  if (l.length % 2) {\n    return l[mid];\n  }\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return ((left + right) / 2) | 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpdtygyak5.js:21:12)\n    at Object.<anonymous> (/tmp/tmpdtygyak5.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334798
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const mid = l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return ((left + right) / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpt2ds0s4v.js:14\n    const left = median(l.slice(0, mid));\n                          ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmpt2ds0s4v.js:14:27)\n    at median (/tmp/tmpt2ds0s4v.js:15:19)\n    at median (/tmp/tmpt2ds0s4v.js:15:19)\n    at median (/tmp/tmpt2ds0s4v.js:15:19)\n    at median (/tmp/tmpt2ds0s4v.js:15:19)\n    at median (/tmp/tmpt2ds0s4v.js:15:19)\n    at median (/tmp/tmpt2ds0s4v.js:15:19)\n    at median (/tmp/tmpt2ds0s4v.js:15:19)\n    at median (/tmp/tmpt2ds0s4v.js:15:19)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334798
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length % 2 === 0) {\n    return l[Math.floor(l.length / 2)];\n  }\n  const mid = l.length / 2;\n  const left = l.slice(0, mid);\n  const right = l.slice(mid);\n  return median(left) + median(right);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpq1co3h_n.js:11\n    const left = l.slice(0, mid);\n                   ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmpq1co3h_n.js:11:20)\n    at median (/tmp/tmpq1co3h_n.js:13:27)\n    at median (/tmp/tmpq1co3h_n.js:13:27)\n    at median (/tmp/tmpq1co3h_n.js:13:27)\n    at median (/tmp/tmpq1co3h_n.js:13:27)\n    at median (/tmp/tmpq1co3h_n.js:13:27)\n    at median (/tmp/tmpq1co3h_n.js:13:27)\n    at median (/tmp/tmpq1co3h_n.js:13:27)\n    at median (/tmp/tmpq1co3h_n.js:13:27)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334798
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty array\");\n  }\n  const mid = l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return ((left + right) / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmp3kn6dl15.js:8\n        throw new Error(\"Cannot calculate median of an empty array\");\n        ^\n\nError: Cannot calculate median of an empty array\n    at median (/tmp/tmp3kn6dl15.js:8:15)\n    at median (/tmp/tmp3kn6dl15.js:14:18)\n    at median (/tmp/tmp3kn6dl15.js:14:18)\n    at median (/tmp/tmp3kn6dl15.js:15:19)\n    at test (/tmp/tmp3kn6dl15.js:21:22)\n    at Object.<anonymous> (/tmp/tmp3kn6dl15.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334798
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error('Cannot calculate median of an empty array');\n  }\n  const sorted = l.slice().sort((a, b) => a - b);\n  const len = sorted.length;\n  if (len % 2 === 0) {\n    return sorted[(len - 1) / 2];\n  }\n  const middle = Math.floor(len / 2);\n  const median1 = sorted[middle];\n  const median2 = sorted[middle + 1];\n  return (median1 + median2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3.5\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmp7t9w54_n.js:23:12)\n    at Object.<anonymous> (/tmp/tmp7t9w54_n.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3.5,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334798
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty array\");\n  }\n  const sortedArray = l.slice().sort((a, b) => a - b);\n  const mid = sortedArray.length / 2;\n  if (sortedArray.length % 2 === 0) {\n    return sortedArray[mid];\n  }\n  return sortedArray[mid] + sortedArray[mid + 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpmr0rmojy.js:20:12)\n    at Object.<anonymous> (/tmp/tmpmr0rmojy.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334798
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  const n = l.length\n  if (n < 2) return NaN\n  if (n === 1) return l[0]\n  const mid = n >> 1\n  const a = l[mid]\n  const b = l[n - 1]\n  const c = l[n - 2]\n  const d = (l[n - 3] - a) * (b - c)\n  return a + b + c + d\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n11\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpqni6jiki.js:22:12)\n    at Object.<anonymous> (/tmp/tmpqni6jiki.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 11,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334798
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length <= 1) return l[0];\n  const mid = l.length / 2;\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return ((left + right) / 2) | 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmp0z0lo6jd.js:17:12)\n    at Object.<anonymous> (/tmp/tmp0z0lo6jd.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334798
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const n = l.length;\n  if (n % 2 === 0) {\n    return l[Math.floor(n / 2)];\n  }\n  const half = n / 2;\n  const left = median(l.slice(0, half));\n  const right = median(l.slice(half));\n  return (left + right) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmp9yynm9n8.js:15\n    const left = median(l.slice(0, half));\n                          ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmp9yynm9n8.js:15:27)\n    at median (/tmp/tmp9yynm9n8.js:16:19)\n    at median (/tmp/tmp9yynm9n8.js:16:19)\n    at median (/tmp/tmp9yynm9n8.js:16:19)\n    at median (/tmp/tmp9yynm9n8.js:16:19)\n    at median (/tmp/tmp9yynm9n8.js:16:19)\n    at median (/tmp/tmp9yynm9n8.js:16:19)\n    at median (/tmp/tmp9yynm9n8.js:16:19)\n    at median (/tmp/tmp9yynm9n8.js:16:19)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334798
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty array\");\n  }\n  const sortedArray = l.slice().sort((a, b) => a - b);\n  const middleIndex = Math.floor(sortedArray.length / 2);\n  const medianValue = sortedArray[middleIndex];\n  return medianValue;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n10\n\nshould loosely deep-equal\n\n8\n    at test (/tmp/tmpmnyqypok.js:19:12)\n    at Object.<anonymous> (/tmp/tmpmnyqypok.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 10,\n  expected: 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334798
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty array\");\n  }\n  const n = l.length;\n  if (n % 2 === 0) {\n    return l[Math.floor(n / 2)];\n  }\n  const half = n / 2;\n  let left = median(l.slice(0, half));\n  let right = median(l.slice(half));\n  return left + Math.ceil((right - left) / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmp_j61uspa.js:8\n        throw new Error(\"Cannot calculate median of an empty array\");\n        ^\n\nError: Cannot calculate median of an empty array\n    at median (/tmp/tmp_j61uspa.js:8:15)\n    at median (/tmp/tmp_j61uspa.js:15:16)\n    at median (/tmp/tmp_j61uspa.js:15:16)\n    at median (/tmp/tmp_j61uspa.js:16:17)\n    at test (/tmp/tmp_j61uspa.js:22:22)\n    at Object.<anonymous> (/tmp/tmp_j61uspa.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334801
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error('Cannot compute median of an empty array');\n  }\n  const n = l.length;\n  if (n % 2 === 0) {\n    return l[Math.floor(n / 2)];\n  }\n  const half = n / 2;\n  const left = median(l.slice(0, half));\n  const right = median(l.slice(half));\n  return (left + right) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpq53h33hk.js:8\n        throw new Error('Cannot compute median of an empty array');\n        ^\n\nError: Cannot compute median of an empty array\n    at median (/tmp/tmpq53h33hk.js:8:15)\n    at median (/tmp/tmpq53h33hk.js:15:18)\n    at median (/tmp/tmpq53h33hk.js:15:18)\n    at median (/tmp/tmpq53h33hk.js:16:19)\n    at test (/tmp/tmpq53h33hk.js:22:22)\n    at Object.<anonymous> (/tmp/tmpq53h33hk.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334802
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  const n = l.length;\n  if (n < 1) {\n    throw new Error(\"median: empty array\");\n  }\n  if (n === 1) {\n    return l[0];\n  }\n  const half = n / 2;\n  const left = median(l.slice(0, half));\n  const right = median(l.slice(half));\n  return ((left + right) / 2) | 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmp4f0maacm.js:22:12)\n    at Object.<anonymous> (/tmp/tmp4f0maacm.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334801
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty array\");\n  }\n  const n = l.length;\n  if (n % 2 === 0) {\n    return l[Math.floor(n / 2)];\n  }\n  const half = n / 2;\n  const left = median(l.slice(0, half));\n  const right = median(l.slice(half));\n  return (left + right) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmph0tm5bn8.js:8\n        throw new Error(\"Cannot calculate median of an empty array\");\n        ^\n\nError: Cannot calculate median of an empty array\n    at median (/tmp/tmph0tm5bn8.js:8:15)\n    at median (/tmp/tmph0tm5bn8.js:15:18)\n    at median (/tmp/tmph0tm5bn8.js:15:18)\n    at median (/tmp/tmph0tm5bn8.js:16:19)\n    at test (/tmp/tmph0tm5bn8.js:22:22)\n    at Object.<anonymous> (/tmp/tmph0tm5bn8.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334802
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const mid = l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return ((left + right) / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpt2ds0s4v.js:14\n    const left = median(l.slice(0, mid));\n                          ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmpt2ds0s4v.js:14:27)\n    at median (/tmp/tmpt2ds0s4v.js:15:19)\n    at median (/tmp/tmpt2ds0s4v.js:15:19)\n    at median (/tmp/tmpt2ds0s4v.js:15:19)\n    at median (/tmp/tmpt2ds0s4v.js:15:19)\n    at median (/tmp/tmpt2ds0s4v.js:15:19)\n    at median (/tmp/tmpt2ds0s4v.js:15:19)\n    at median (/tmp/tmpt2ds0s4v.js:15:19)\n    at median (/tmp/tmpt2ds0s4v.js:15:19)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334798
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot compute median of an empty array\");\n  }\n  const n = l.length;\n  if (n % 2 === 0) {\n    return l[Math.floor(n / 2)];\n  }\n  const half = n / 2;\n  const left = median(l.slice(0, half));\n  const right = median(l.slice(half));\n  return left + right;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpwhrlk_b7.js:8\n        throw new Error(\"Cannot compute median of an empty array\");\n        ^\n\nError: Cannot compute median of an empty array\n    at median (/tmp/tmpwhrlk_b7.js:8:15)\n    at median (/tmp/tmpwhrlk_b7.js:15:18)\n    at median (/tmp/tmpwhrlk_b7.js:15:18)\n    at median (/tmp/tmpwhrlk_b7.js:16:19)\n    at test (/tmp/tmpwhrlk_b7.js:22:22)\n    at Object.<anonymous> (/tmp/tmpwhrlk_b7.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334798
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const mid = l.length / 2;\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return l.length < 3 ? left : (left + right) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmp7s2ozzdy.js:11\n    const left = median(l.slice(0, mid));\n                          ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmp7s2ozzdy.js:11:27)\n    at median (/tmp/tmp7s2ozzdy.js:12:19)\n    at median (/tmp/tmp7s2ozzdy.js:12:19)\n    at median (/tmp/tmp7s2ozzdy.js:12:19)\n    at median (/tmp/tmp7s2ozzdy.js:12:19)\n    at median (/tmp/tmp7s2ozzdy.js:12:19)\n    at median (/tmp/tmp7s2ozzdy.js:12:19)\n    at median (/tmp/tmp7s2ozzdy.js:12:19)\n    at median (/tmp/tmp7s2ozzdy.js:12:19)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334802
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty array\");\n  }\n  const sorted = l.slice().sort((a, b) => a - b);\n  const len = sorted.length;\n  if (len % 2 === 0) {\n    return sorted[len / 2 - 1];\n  }\n  const middle = Math.floor(len / 2);\n  const medianOfMiddle = median(sorted.slice(0, middle));\n  return medianOfMiddle + median(sorted.slice(middle, len));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmp51awgh7v.js:8\n        throw new Error(\"Cannot calculate median of an empty array\");\n        ^\n\nError: Cannot calculate median of an empty array\n    at median (/tmp/tmp51awgh7v.js:8:15)\n    at median (/tmp/tmp51awgh7v.js:16:28)\n    at median (/tmp/tmp51awgh7v.js:16:28)\n    at median (/tmp/tmp51awgh7v.js:17:29)\n    at test (/tmp/tmp51awgh7v.js:22:22)\n    at Object.<anonymous> (/tmp/tmp51awgh7v.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334802
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length % 2 === 0) {\n    return l[l.length / 2 - 1]\n  }\n  const mid = l.length / 2\n  const left = l.slice(0, mid)\n  const right = l.slice(mid)\n  return median(left) + median(right)\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpt7zicu5p.js:11\n    const left = l.slice(0, mid);\n                   ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmpt7zicu5p.js:11:20)\n    at median (/tmp/tmpt7zicu5p.js:13:27)\n    at median (/tmp/tmpt7zicu5p.js:13:27)\n    at median (/tmp/tmpt7zicu5p.js:13:27)\n    at median (/tmp/tmpt7zicu5p.js:13:27)\n    at median (/tmp/tmpt7zicu5p.js:13:27)\n    at median (/tmp/tmpt7zicu5p.js:13:27)\n    at median (/tmp/tmpt7zicu5p.js:13:27)\n    at median (/tmp/tmpt7zicu5p.js:13:27)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334798
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty array\");\n  }\n  const n = l.length;\n  if (n % 2 === 0) {\n    return l[Math.floor(n / 2)];\n  }\n  const half = n / 2;\n  const left = median(l.slice(0, half));\n  const right = median(l.slice(half));\n  return left + right;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpb1dy19vy.js:8\n        throw new Error(\"Cannot calculate median of an empty array\");\n        ^\n\nError: Cannot calculate median of an empty array\n    at median (/tmp/tmpb1dy19vy.js:8:15)\n    at median (/tmp/tmpb1dy19vy.js:15:18)\n    at median (/tmp/tmpb1dy19vy.js:15:18)\n    at median (/tmp/tmpb1dy19vy.js:16:19)\n    at test (/tmp/tmpb1dy19vy.js:22:22)\n    at Object.<anonymous> (/tmp/tmpb1dy19vy.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334802
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length % 2 === 0) {\n    return l[Math.floor(l.length / 2)];\n  }\n  const middle = Math.floor(l.length / 2);\n  const leftMedian = median(l.slice(0, middle));\n  const rightMedian = median(l.slice(middle));\n  return leftMedian + rightMedian / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpswyz4qux.js:11\n    const leftMedian = median(l.slice(0, middle));\n                                ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmpswyz4qux.js:11:33)\n    at median (/tmp/tmpswyz4qux.js:12:25)\n    at median (/tmp/tmpswyz4qux.js:12:25)\n    at median (/tmp/tmpswyz4qux.js:12:25)\n    at median (/tmp/tmpswyz4qux.js:12:25)\n    at median (/tmp/tmpswyz4qux.js:12:25)\n    at median (/tmp/tmpswyz4qux.js:12:25)\n    at median (/tmp/tmpswyz4qux.js:12:25)\n    at median (/tmp/tmpswyz4qux.js:12:25)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334802
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty array\");\n  }\n  const mid = l.length / 2;\n  const sorted = l.slice().sort((a, b) => a - b);\n  if (sorted.length % 2 === 0) {\n    return sorted[mid];\n  }\n  return sorted[mid] + (sorted[mid] + sorted[mid + 1]) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpi6otz4te.js:20:12)\n    at Object.<anonymous> (/tmp/tmpi6otz4te.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334802
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty array\");\n  }\n  const n = l.length;\n  if (n % 2 === 0) {\n    return l[Math.floor(n / 2)];\n  }\n  const half = n / 2;\n  const left = median(l.slice(0, half));\n  const right = median(l.slice(half));\n  return (left + right) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmph0tm5bn8.js:8\n        throw new Error(\"Cannot calculate median of an empty array\");\n        ^\n\nError: Cannot calculate median of an empty array\n    at median (/tmp/tmph0tm5bn8.js:8:15)\n    at median (/tmp/tmph0tm5bn8.js:15:18)\n    at median (/tmp/tmph0tm5bn8.js:15:18)\n    at median (/tmp/tmph0tm5bn8.js:16:19)\n    at test (/tmp/tmph0tm5bn8.js:22:22)\n    at Object.<anonymous> (/tmp/tmph0tm5bn8.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334802
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw Error('Cannot compute median of an empty array');\n  }\n  const n = l.length;\n  if (n % 2 === 0) {\n    return l[Math.floor(n / 2)];\n  }\n  const half = n / 2;\n  const left = median(l.slice(0, half));\n  const right = median(l.slice(half));\n  return (left + right) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmp3hk1gzw6.js:8\n        throw Error('Cannot compute median of an empty array');\n        ^\n\nError: Cannot compute median of an empty array\n    at median (/tmp/tmp3hk1gzw6.js:8:15)\n    at median (/tmp/tmp3hk1gzw6.js:15:18)\n    at median (/tmp/tmp3hk1gzw6.js:15:18)\n    at median (/tmp/tmp3hk1gzw6.js:16:19)\n    at test (/tmp/tmp3hk1gzw6.js:22:22)\n    at Object.<anonymous> (/tmp/tmp3hk1gzw6.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334802
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty array\");\n  }\n  l.sort((a, b) => a - b);\n  const mid = l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  return (l[mid] + l[mid-1]) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmp2ckym2vq.js:20:12)\n    at Object.<anonymous> (/tmp/tmp2ckym2vq.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334802
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty array\");\n  }\n  const n = l.length;\n  if (n % 2 === 0) {\n    return l[Math.floor(n / 2)];\n  }\n  const mid = Math.floor(n / 2);\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return ((left + right) / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmp_k3m6qzq.js:8\n        throw new Error(\"Cannot calculate median of an empty array\");\n        ^\n\nError: Cannot calculate median of an empty array\n    at median (/tmp/tmp_k3m6qzq.js:8:15)\n    at median (/tmp/tmp_k3m6qzq.js:15:18)\n    at median (/tmp/tmp_k3m6qzq.js:15:18)\n    at median (/tmp/tmp_k3m6qzq.js:16:19)\n    at test (/tmp/tmp_k3m6qzq.js:22:22)\n    at Object.<anonymous> (/tmp/tmp_k3m6qzq.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334802
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty array\");\n  }\n  const mid = l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return ((left + right) / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmp3kn6dl15.js:8\n        throw new Error(\"Cannot calculate median of an empty array\");\n        ^\n\nError: Cannot calculate median of an empty array\n    at median (/tmp/tmp3kn6dl15.js:8:15)\n    at median (/tmp/tmp3kn6dl15.js:14:18)\n    at median (/tmp/tmp3kn6dl15.js:14:18)\n    at median (/tmp/tmp3kn6dl15.js:15:19)\n    at test (/tmp/tmp3kn6dl15.js:21:22)\n    at Object.<anonymous> (/tmp/tmp3kn6dl15.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334798
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty array\");\n  }\n  const mid = l.length / 2;\n  if (mid === 0) {\n    return l[mid];\n  }\n  if (mid === 1) {\n    return l[mid - 1] + l[mid - 2];\n  }\n  const medianValue = l[mid];\n  const leftMedian = median(l.slice(0, mid));\n  const rightMedian = median(l.slice(mid));\n  return medianValue + Math.max(leftMedian, rightMedian);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmp9f0uqy3k.js:8\n        throw new Error(\"Cannot calculate median of an empty array\");\n        ^\n\nError: Cannot calculate median of an empty array\n    at median (/tmp/tmp9f0uqy3k.js:8:15)\n    at median (/tmp/tmp9f0uqy3k.js:18:24)\n    at median (/tmp/tmp9f0uqy3k.js:18:24)\n    at median (/tmp/tmp9f0uqy3k.js:19:25)\n    at test (/tmp/tmp9f0uqy3k.js:25:22)\n    at Object.<anonymous> (/tmp/tmp9f0uqy3k.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334802
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty array\");\n  }\n  const sorted = l.slice().sort((a, b) => a - b);\n  const len = sorted.length;\n  if (len % 2 === 0) {\n    return sorted[(len - 1) / 2];\n  }\n  const middle = Math.floor(len / 2);\n  const medianOfMiddle = median(sorted.slice(0, middle));\n  const medianOfRest = median(sorted.slice(middle));\n  return medianOfMiddle + medianOfRest;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpky7x9yhf.js:8\n        throw new Error(\"Cannot calculate median of an empty array\");\n        ^\n\nError: Cannot calculate median of an empty array\n    at median (/tmp/tmpky7x9yhf.js:8:15)\n    at median (/tmp/tmpky7x9yhf.js:16:28)\n    at median (/tmp/tmpky7x9yhf.js:16:28)\n    at median (/tmp/tmpky7x9yhf.js:17:26)\n    at test (/tmp/tmpky7x9yhf.js:23:22)\n    at Object.<anonymous> (/tmp/tmpky7x9yhf.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334802
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty array\");\n  }\n  const sortedArray = l.slice().sort((a, b) => a - b);\n  const middle = Math.floor(sortedArray.length / 2);\n  if (sortedArray.length % 2 === 0) {\n    return sortedArray[middle];\n  }\n  return sortedArray[middle - 1] + sortedArray[middle];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n5\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmp42h5h6ji.js:20:12)\n    at Object.<anonymous> (/tmp/tmp42h5h6ji.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 5,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334802
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length % 2 === 0) {\n    return l[Math.floor(l.length / 2)];\n  }\n  const mid = l.length / 2 - 1;\n  const left = l.slice(0, mid);\n  const right = l.slice(mid);\n  return median(left) + median(right);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpxgh98_44.js:11\n    const left = l.slice(0, mid);\n                   ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmpxgh98_44.js:11:20)\n    at median (/tmp/tmpxgh98_44.js:13:27)\n    at median (/tmp/tmpxgh98_44.js:13:27)\n    at median (/tmp/tmpxgh98_44.js:13:27)\n    at median (/tmp/tmpxgh98_44.js:13:27)\n    at median (/tmp/tmpxgh98_44.js:13:27)\n    at median (/tmp/tmpxgh98_44.js:13:27)\n    at median (/tmp/tmpxgh98_44.js:13:27)\n    at median (/tmp/tmpxgh98_44.js:13:27)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334802
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length % 2 === 0) {\n    return l[(l.length / 2) - 1];\n  }\n  const mid = l.length / 2;\n  const left = l.slice(0, mid);\n  const right = l.slice(mid);\n  return median(left) + median(right);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpgxxog7l4.js:11\n    const left = l.slice(0, mid);\n                   ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmpgxxog7l4.js:11:20)\n    at median (/tmp/tmpgxxog7l4.js:13:27)\n    at median (/tmp/tmpgxxog7l4.js:13:27)\n    at median (/tmp/tmpgxxog7l4.js:13:27)\n    at median (/tmp/tmpgxxog7l4.js:13:27)\n    at median (/tmp/tmpgxxog7l4.js:13:27)\n    at median (/tmp/tmpgxxog7l4.js:13:27)\n    at median (/tmp/tmpgxxog7l4.js:13:27)\n    at median (/tmp/tmpgxxog7l4.js:13:27)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334802
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const mid = l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return (left + right) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpsdei5ayr.js:14\n    const left = median(l.slice(0, mid));\n                          ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmpsdei5ayr.js:14:27)\n    at median (/tmp/tmpsdei5ayr.js:15:19)\n    at median (/tmp/tmpsdei5ayr.js:15:19)\n    at median (/tmp/tmpsdei5ayr.js:15:19)\n    at median (/tmp/tmpsdei5ayr.js:15:19)\n    at median (/tmp/tmpsdei5ayr.js:15:19)\n    at median (/tmp/tmpsdei5ayr.js:15:19)\n    at median (/tmp/tmpsdei5ayr.js:15:19)\n    at median (/tmp/tmpsdei5ayr.js:15:19)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334798
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty array\");\n  }\n  const n = l.length;\n  if (n === 1) {\n    return l[0];\n  }\n  const half = n / 2;\n  const left = median(l.slice(0, half));\n  const right = median(l.slice(half));\n  return ((left + right) / 2) | 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmplb6azgzi.js:22:12)\n    at Object.<anonymous> (/tmp/tmplb6azgzi.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334802
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty array\");\n  }\n  if (l.length === 1) {\n    return l[0];\n  }\n  const middle = Math.floor(l.length / 2);\n  const left = l.slice(0, middle);\n  const right = l.slice(middle);\n  return median(left) + median(right);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpmgy6h4zm.js:21:12)\n    at Object.<anonymous> (/tmp/tmpmgy6h4zm.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334802
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty array\");\n  }\n  const n = l.length;\n  if (n % 2 === 0) {\n    return l[Math.floor(n / 2)];\n  }\n  const half = n / 2;\n  const left = median(l.slice(0, half));\n  const right = median(l.slice(half));\n  return left + right;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpb1dy19vy.js:8\n        throw new Error(\"Cannot calculate median of an empty array\");\n        ^\n\nError: Cannot calculate median of an empty array\n    at median (/tmp/tmpb1dy19vy.js:8:15)\n    at median (/tmp/tmpb1dy19vy.js:15:18)\n    at median (/tmp/tmpb1dy19vy.js:15:18)\n    at median (/tmp/tmpb1dy19vy.js:16:19)\n    at test (/tmp/tmpb1dy19vy.js:22:22)\n    at Object.<anonymous> (/tmp/tmpb1dy19vy.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334802
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty array\");\n  }\n  const n = l.length;\n  if (n % 2 === 0) {\n    return l[Math.floor(n / 2)];\n  }\n  const mid = Math.floor(n / 2);\n  const left = l.slice(0, mid);\n  const right = l.slice(mid);\n  return median(left) + median(right);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpr0771wrs.js:8\n        throw new Error(\"Cannot calculate median of an empty array\");\n        ^\n\nError: Cannot calculate median of an empty array\n    at median (/tmp/tmpr0771wrs.js:8:15)\n    at median (/tmp/tmpr0771wrs.js:17:12)\n    at median (/tmp/tmpr0771wrs.js:17:12)\n    at median (/tmp/tmpr0771wrs.js:17:27)\n    at test (/tmp/tmpr0771wrs.js:22:22)\n    at Object.<anonymous> (/tmp/tmpr0771wrs.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334802
    },
    {
      "exit_code": 2,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  const n = l.length;\n  if (n < 2) {\n    return l[0];\n  }\n  const half = Math.floor(n / 2);\n  if (n % 2) {\n    return median(l[half]) < median(l[half - 1]) ? l[half] : l[half - 1];\n  }\n  return median(l[half]);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpfuys9_za.ts(13,19): error TS2345: Argument of type 'number' is not assignable to parameter of type 'number[]'.\n../../../../tmp/tmpfuys9_za.ts(13,37): error TS2345: Argument of type 'number' is not assignable to parameter of type 'number[]'.\n../../../../tmp/tmpfuys9_za.ts(15,17): error TS2345: Argument of type 'number' is not assignable to parameter of type 'number[]'.\n",
      "timestamp": 1660334802
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const n = l.length;\n  if (n % 2 === 0) {\n    return l[Math.floor(n / 2)];\n  }\n  const half = n / 2;\n  const left = median(l.slice(0, half));\n  const right = median(l.slice(half));\n  return (left + right) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmp9yynm9n8.js:15\n    const left = median(l.slice(0, half));\n                          ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmp9yynm9n8.js:15:27)\n    at median (/tmp/tmp9yynm9n8.js:16:19)\n    at median (/tmp/tmp9yynm9n8.js:16:19)\n    at median (/tmp/tmp9yynm9n8.js:16:19)\n    at median (/tmp/tmp9yynm9n8.js:16:19)\n    at median (/tmp/tmp9yynm9n8.js:16:19)\n    at median (/tmp/tmp9yynm9n8.js:16:19)\n    at median (/tmp/tmp9yynm9n8.js:16:19)\n    at median (/tmp/tmp9yynm9n8.js:16:19)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334798
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot compute median of an empty array\");\n  }\n  const sorted = l.slice().sort((a, b) => a - b);\n  const len = sorted.length;\n  if (len % 2 === 0) {\n    return sorted[(len - 1) / 2];\n  }\n  const middle = Math.floor(len / 2);\n  const median1 = sorted[middle - 1];\n  const median2 = sorted[middle];\n  return (median1 + median2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2.5\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpn8bcbfh4.js:23:12)\n    at Object.<anonymous> (/tmp/tmpn8bcbfh4.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2.5,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334802
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const mid = l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return (left + right) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpsdei5ayr.js:14\n    const left = median(l.slice(0, mid));\n                          ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmpsdei5ayr.js:14:27)\n    at median (/tmp/tmpsdei5ayr.js:15:19)\n    at median (/tmp/tmpsdei5ayr.js:15:19)\n    at median (/tmp/tmpsdei5ayr.js:15:19)\n    at median (/tmp/tmpsdei5ayr.js:15:19)\n    at median (/tmp/tmpsdei5ayr.js:15:19)\n    at median (/tmp/tmpsdei5ayr.js:15:19)\n    at median (/tmp/tmpsdei5ayr.js:15:19)\n    at median (/tmp/tmpsdei5ayr.js:15:19)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334798
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty array\");\n  }\n  const mid = l.length / 2;\n  const sorted = l.slice().sort((a, b) => a - b);\n  if (sorted.length % 2 === 0) {\n    return sorted[mid];\n  }\n  return sorted[mid] + (sorted[mid + 1] - sorted[mid]) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmp2x7fcz4h.js:20:12)\n    at Object.<anonymous> (/tmp/tmp2x7fcz4h.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334802
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length % 2 === 0) {\n    return l[(l.length / 2) - 1];\n  }\n  const middle = Math.floor(l.length / 2);\n  const left = l.slice(0, middle);\n  const right = l.slice(middle);\n  return median(left) + median(right);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmp34uphgfa.js:11\n    const left = l.slice(0, middle);\n                   ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmp34uphgfa.js:11:20)\n    at median (/tmp/tmp34uphgfa.js:13:27)\n    at median (/tmp/tmp34uphgfa.js:13:27)\n    at median (/tmp/tmp34uphgfa.js:13:27)\n    at median (/tmp/tmp34uphgfa.js:13:27)\n    at median (/tmp/tmp34uphgfa.js:13:27)\n    at median (/tmp/tmp34uphgfa.js:13:27)\n    at median (/tmp/tmp34uphgfa.js:13:27)\n    at median (/tmp/tmp34uphgfa.js:13:27)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334805
    },
    {
      "exit_code": 2,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty array\");\n  }\n  const n = l.length;\n  if (n % 2 === 0) {\n    return l[Math.floor(n / 2)];\n  }\n  const half = Math.floor(n / 2);\n  return median(l[half], l[n - half]);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpftykb69w.ts(15,26): error TS2554: Expected 1 arguments, but got 2.\n",
      "timestamp": 1660334804
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const mid = l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return ((left + right) / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpt2ds0s4v.js:14\n    const left = median(l.slice(0, mid));\n                          ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmpt2ds0s4v.js:14:27)\n    at median (/tmp/tmpt2ds0s4v.js:15:19)\n    at median (/tmp/tmpt2ds0s4v.js:15:19)\n    at median (/tmp/tmpt2ds0s4v.js:15:19)\n    at median (/tmp/tmpt2ds0s4v.js:15:19)\n    at median (/tmp/tmpt2ds0s4v.js:15:19)\n    at median (/tmp/tmpt2ds0s4v.js:15:19)\n    at median (/tmp/tmpt2ds0s4v.js:15:19)\n    at median (/tmp/tmpt2ds0s4v.js:15:19)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334798
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const mid = l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return l.length / 2 === mid ? Math.min(left, right) : Math.max(left, right);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpsb40ymog.js:14\n    const left = median(l.slice(0, mid));\n                          ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmpsb40ymog.js:14:27)\n    at median (/tmp/tmpsb40ymog.js:15:19)\n    at median (/tmp/tmpsb40ymog.js:15:19)\n    at median (/tmp/tmpsb40ymog.js:15:19)\n    at median (/tmp/tmpsb40ymog.js:15:19)\n    at median (/tmp/tmpsb40ymog.js:15:19)\n    at median (/tmp/tmpsb40ymog.js:15:19)\n    at median (/tmp/tmpsb40ymog.js:15:19)\n    at median (/tmp/tmpsb40ymog.js:15:19)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334805
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty array\");\n  }\n  const sorted = l.slice().sort((a, b) => a - b);\n  if (sorted.length % 2 === 0) {\n    return sorted[(sorted.length - 1) / 2] as number;\n  }\n  const middle = sorted.length / 2;\n  return sorted[middle] + (sorted[middle + 1] as number) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpn2j4xqad.js:20:12)\n    at Object.<anonymous> (/tmp/tmpn2j4xqad.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334805
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length % 2 === 0) {\n    return l[Math.floor(l.length / 2)];\n  }\n  const mid = l.length / 2;\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return l.length / 2 > mid ? right : left;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpkani2puc.js:11\n    const left = median(l.slice(0, mid));\n                          ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmpkani2puc.js:11:27)\n    at median (/tmp/tmpkani2puc.js:12:19)\n    at median (/tmp/tmpkani2puc.js:12:19)\n    at median (/tmp/tmpkani2puc.js:12:19)\n    at median (/tmp/tmpkani2puc.js:12:19)\n    at median (/tmp/tmpkani2puc.js:12:19)\n    at median (/tmp/tmpkani2puc.js:12:19)\n    at median (/tmp/tmpkani2puc.js:12:19)\n    at median (/tmp/tmpkani2puc.js:12:19)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334805
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length % 2 === 0) {\n    return l[(l.length / 2) - 1];\n  }\n  const middle = l.length / 2;\n  const left = l.slice(0, middle);\n  const right = l.slice(middle);\n  return median(left) + median(right);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpsbqzee_4.js:11\n    const left = l.slice(0, middle);\n                   ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmpsbqzee_4.js:11:20)\n    at median (/tmp/tmpsbqzee_4.js:13:27)\n    at median (/tmp/tmpsbqzee_4.js:13:27)\n    at median (/tmp/tmpsbqzee_4.js:13:27)\n    at median (/tmp/tmpsbqzee_4.js:13:27)\n    at median (/tmp/tmpsbqzee_4.js:13:27)\n    at median (/tmp/tmpsbqzee_4.js:13:27)\n    at median (/tmp/tmpsbqzee_4.js:13:27)\n    at median (/tmp/tmpsbqzee_4.js:13:27)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334805
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty array\");\n  }\n  const n = l.length;\n  if (n % 2 === 0) {\n    return l[Math.floor(n / 2)];\n  }\n  const half = n / 2;\n  const left = median(l.slice(0, half));\n  const right = median(l.slice(half));\n  return (left + right) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmph0tm5bn8.js:8\n        throw new Error(\"Cannot calculate median of an empty array\");\n        ^\n\nError: Cannot calculate median of an empty array\n    at median (/tmp/tmph0tm5bn8.js:8:15)\n    at median (/tmp/tmph0tm5bn8.js:15:18)\n    at median (/tmp/tmph0tm5bn8.js:15:18)\n    at median (/tmp/tmph0tm5bn8.js:16:19)\n    at test (/tmp/tmph0tm5bn8.js:22:22)\n    at Object.<anonymous> (/tmp/tmph0tm5bn8.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334802
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const mid = l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return (left + right) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpsdei5ayr.js:14\n    const left = median(l.slice(0, mid));\n                          ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmpsdei5ayr.js:14:27)\n    at median (/tmp/tmpsdei5ayr.js:15:19)\n    at median (/tmp/tmpsdei5ayr.js:15:19)\n    at median (/tmp/tmpsdei5ayr.js:15:19)\n    at median (/tmp/tmpsdei5ayr.js:15:19)\n    at median (/tmp/tmpsdei5ayr.js:15:19)\n    at median (/tmp/tmpsdei5ayr.js:15:19)\n    at median (/tmp/tmpsdei5ayr.js:15:19)\n    at median (/tmp/tmpsdei5ayr.js:15:19)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334798
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  const n = l.length;\n  if (n < 2) {\n    return l[0];\n  }\n  const mid = Math.floor(n / 2);\n  const left = l.slice(0, mid);\n  const right = l.slice(mid);\n  return median(left) + median(right);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpz7v_s4yi.js:19:12)\n    at Object.<anonymous> (/tmp/tmpz7v_s4yi.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334805
    },
    {
      "exit_code": 2,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty array\");\n  }\n  const mid = l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  return median(l[mid], l[mid-1]);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpuy31jk_u.ts(14,25): error TS2554: Expected 1 arguments, but got 2.\n",
      "timestamp": 1660334805
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const mid = l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return ((left < right) ? left : right);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpvnmgbz30.js:14\n    const left = median(l.slice(0, mid));\n                          ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmpvnmgbz30.js:14:27)\n    at median (/tmp/tmpvnmgbz30.js:15:19)\n    at median (/tmp/tmpvnmgbz30.js:15:19)\n    at median (/tmp/tmpvnmgbz30.js:15:19)\n    at median (/tmp/tmpvnmgbz30.js:15:19)\n    at median (/tmp/tmpvnmgbz30.js:15:19)\n    at median (/tmp/tmpvnmgbz30.js:15:19)\n    at median (/tmp/tmpvnmgbz30.js:15:19)\n    at median (/tmp/tmpvnmgbz30.js:15:19)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334806
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot compute median of an empty array\");\n  }\n  const sorted = l.slice().sort((a: number, b: number) => a - b);\n  const len = sorted.length;\n  if (len % 2 === 0) {\n    return sorted[(len - 1) / 2];\n  }\n  const middle = Math.floor(len / 2);\n  return sorted[middle];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n8\n    at test (/tmp/tmpd_2ol_hu.js:22:12)\n    at Object.<anonymous> (/tmp/tmpd_2ol_hu.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334806
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot compute median of an empty array\");\n  }\n  const n = l.length;\n  if (n % 2 === 0) {\n    return l[Math.floor(n / 2)];\n  }\n  const half = n / 2;\n  const left = median(l.slice(0, half));\n  const right = median(l.slice(half));\n  return (left + right) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmp33jaf5ft.js:8\n        throw new Error(\"Cannot compute median of an empty array\");\n        ^\n\nError: Cannot compute median of an empty array\n    at median (/tmp/tmp33jaf5ft.js:8:15)\n    at median (/tmp/tmp33jaf5ft.js:15:18)\n    at median (/tmp/tmp33jaf5ft.js:15:18)\n    at median (/tmp/tmp33jaf5ft.js:16:19)\n    at test (/tmp/tmp33jaf5ft.js:22:22)\n    at Object.<anonymous> (/tmp/tmp33jaf5ft.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334805
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty array\");\n  }\n  const sortedArray = l.slice().sort((a, b) => a - b);\n  const middleIndex = Math.floor(sortedArray.length / 2);\n  const median = sortedArray[middleIndex];\n  return median;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n10\n\nshould loosely deep-equal\n\n8\n    at test (/tmp/tmpo37c748o.js:19:12)\n    at Object.<anonymous> (/tmp/tmpo37c748o.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 10,\n  expected: 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334806
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const mid = l.length / 2;\n  if (l.length % 2) {\n    return l[mid];\n  }\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return ((left + right) / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmp_aslk9s_.js:21:12)\n    at Object.<anonymous> (/tmp/tmp_aslk9s_.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334806
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  const n = l.length;\n  if (n < 1) {\n    throw new Error(\"median: empty array\");\n  }\n  if (n === 1) {\n    return l[0];\n  }\n  const mid = Math.floor(n / 2);\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return ((left + right) / 2) | 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpr3kqnwnp.js:22:12)\n    at Object.<anonymous> (/tmp/tmpr3kqnwnp.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334806
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const n = l.length;\n  if (n % 2 === 0) {\n    return l[Math.floor(n / 2)];\n  }\n  const half = n / 2;\n  const left = median(l.slice(0, half));\n  const right = median(l.slice(half));\n  return ((left + right) / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpgk65tphi.js:15\n    const left = median(l.slice(0, half));\n                          ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmpgk65tphi.js:15:27)\n    at median (/tmp/tmpgk65tphi.js:16:19)\n    at median (/tmp/tmpgk65tphi.js:16:19)\n    at median (/tmp/tmpgk65tphi.js:16:19)\n    at median (/tmp/tmpgk65tphi.js:16:19)\n    at median (/tmp/tmpgk65tphi.js:16:19)\n    at median (/tmp/tmpgk65tphi.js:16:19)\n    at median (/tmp/tmpgk65tphi.js:16:19)\n    at median (/tmp/tmpgk65tphi.js:16:19)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334806
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error('Cannot calculate median of an empty array');\n  }\n  const n = l.length;\n  if (n % 2 === 0) {\n    return l[Math.floor(n / 2)];\n  }\n  const half = n / 2;\n  const left = median(l.slice(0, half));\n  const right = median(l.slice(half));\n  return left + right;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmp5_b22gn9.js:8\n        throw new Error('Cannot calculate median of an empty array');\n        ^\n\nError: Cannot calculate median of an empty array\n    at median (/tmp/tmp5_b22gn9.js:8:15)\n    at median (/tmp/tmp5_b22gn9.js:15:18)\n    at median (/tmp/tmp5_b22gn9.js:15:18)\n    at median (/tmp/tmp5_b22gn9.js:16:19)\n    at test (/tmp/tmp5_b22gn9.js:22:22)\n    at Object.<anonymous> (/tmp/tmp5_b22gn9.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334806
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty array\");\n  }\n  const n = l.length;\n  if (n % 2 === 0) {\n    return l[Math.floor(n / 2)];\n  }\n  const half = n / 2;\n  const left = median(l.slice(0, half));\n  const right = median(l.slice(half));\n  return (left + right) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmph0tm5bn8.js:8\n        throw new Error(\"Cannot calculate median of an empty array\");\n        ^\n\nError: Cannot calculate median of an empty array\n    at median (/tmp/tmph0tm5bn8.js:8:15)\n    at median (/tmp/tmph0tm5bn8.js:15:18)\n    at median (/tmp/tmph0tm5bn8.js:15:18)\n    at median (/tmp/tmph0tm5bn8.js:16:19)\n    at test (/tmp/tmph0tm5bn8.js:22:22)\n    at Object.<anonymous> (/tmp/tmph0tm5bn8.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334802
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const n = l.length;\n  if (n % 2 === 0) {\n    return l[Math.floor(n / 2)];\n  }\n  const half = n / 2;\n  const left = median(l.slice(0, half));\n  const right = median(l.slice(half));\n  return left + right;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmprpv215vc.js:15\n    const left = median(l.slice(0, half));\n                          ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmprpv215vc.js:15:27)\n    at median (/tmp/tmprpv215vc.js:16:19)\n    at median (/tmp/tmprpv215vc.js:16:19)\n    at median (/tmp/tmprpv215vc.js:16:19)\n    at median (/tmp/tmprpv215vc.js:16:19)\n    at median (/tmp/tmprpv215vc.js:16:19)\n    at median (/tmp/tmprpv215vc.js:16:19)\n    at median (/tmp/tmprpv215vc.js:16:19)\n    at median (/tmp/tmprpv215vc.js:16:19)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334806
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length % 2 === 0) {\n    return l[Math.floor(l.length / 2)];\n  }\n  const mid = l.length / 2 - 1;\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return left + right;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmp2t3wfvy5.js:11\n    const left = median(l.slice(0, mid));\n                          ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmp2t3wfvy5.js:11:27)\n    at median (/tmp/tmp2t3wfvy5.js:12:19)\n    at median (/tmp/tmp2t3wfvy5.js:12:19)\n    at median (/tmp/tmp2t3wfvy5.js:12:19)\n    at median (/tmp/tmp2t3wfvy5.js:12:19)\n    at median (/tmp/tmp2t3wfvy5.js:12:19)\n    at median (/tmp/tmp2t3wfvy5.js:12:19)\n    at median (/tmp/tmp2t3wfvy5.js:12:19)\n    at median (/tmp/tmp2t3wfvy5.js:12:19)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334806
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error('Cannot compute median of an empty array');\n  }\n  const n = l.length;\n  if (n % 2 === 0) {\n    return l[Math.floor(n / 2)];\n  }\n  const half = n / 2;\n  const left = median(l.slice(0, half));\n  const right = median(l.slice(half));\n  return left + right;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmphxyoeclg.js:8\n        throw new Error('Cannot compute median of an empty array');\n        ^\n\nError: Cannot compute median of an empty array\n    at median (/tmp/tmphxyoeclg.js:8:15)\n    at median (/tmp/tmphxyoeclg.js:15:18)\n    at median (/tmp/tmphxyoeclg.js:15:18)\n    at median (/tmp/tmphxyoeclg.js:16:19)\n    at test (/tmp/tmphxyoeclg.js:22:22)\n    at Object.<anonymous> (/tmp/tmphxyoeclg.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334798
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const mid = l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return ((left < right) ? left : right);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpvnmgbz30.js:14\n    const left = median(l.slice(0, mid));\n                          ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmpvnmgbz30.js:14:27)\n    at median (/tmp/tmpvnmgbz30.js:15:19)\n    at median (/tmp/tmpvnmgbz30.js:15:19)\n    at median (/tmp/tmpvnmgbz30.js:15:19)\n    at median (/tmp/tmpvnmgbz30.js:15:19)\n    at median (/tmp/tmpvnmgbz30.js:15:19)\n    at median (/tmp/tmpvnmgbz30.js:15:19)\n    at median (/tmp/tmpvnmgbz30.js:15:19)\n    at median (/tmp/tmpvnmgbz30.js:15:19)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334806
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length % 2 === 0) {\n    return l[(l.length / 2) - 1];\n  }\n  const mid = l.length / 2;\n  const left = l.slice(0, mid);\n  const right = l.slice(mid);\n  return median(left) + median(right);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpgxxog7l4.js:11\n    const left = l.slice(0, mid);\n                   ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmpgxxog7l4.js:11:20)\n    at median (/tmp/tmpgxxog7l4.js:13:27)\n    at median (/tmp/tmpgxxog7l4.js:13:27)\n    at median (/tmp/tmpgxxog7l4.js:13:27)\n    at median (/tmp/tmpgxxog7l4.js:13:27)\n    at median (/tmp/tmpgxxog7l4.js:13:27)\n    at median (/tmp/tmpgxxog7l4.js:13:27)\n    at median (/tmp/tmpgxxog7l4.js:13:27)\n    at median (/tmp/tmpgxxog7l4.js:13:27)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334802
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const mid = l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return ((left + right) / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpt2ds0s4v.js:14\n    const left = median(l.slice(0, mid));\n                          ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmpt2ds0s4v.js:14:27)\n    at median (/tmp/tmpt2ds0s4v.js:15:19)\n    at median (/tmp/tmpt2ds0s4v.js:15:19)\n    at median (/tmp/tmpt2ds0s4v.js:15:19)\n    at median (/tmp/tmpt2ds0s4v.js:15:19)\n    at median (/tmp/tmpt2ds0s4v.js:15:19)\n    at median (/tmp/tmpt2ds0s4v.js:15:19)\n    at median (/tmp/tmpt2ds0s4v.js:15:19)\n    at median (/tmp/tmpt2ds0s4v.js:15:19)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334798
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const mid = l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return ((left + right) / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpt2ds0s4v.js:14\n    const left = median(l.slice(0, mid));\n                          ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmpt2ds0s4v.js:14:27)\n    at median (/tmp/tmpt2ds0s4v.js:15:19)\n    at median (/tmp/tmpt2ds0s4v.js:15:19)\n    at median (/tmp/tmpt2ds0s4v.js:15:19)\n    at median (/tmp/tmpt2ds0s4v.js:15:19)\n    at median (/tmp/tmpt2ds0s4v.js:15:19)\n    at median (/tmp/tmpt2ds0s4v.js:15:19)\n    at median (/tmp/tmpt2ds0s4v.js:15:19)\n    at median (/tmp/tmpt2ds0s4v.js:15:19)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334798
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length % 2 === 0) {\n    return l[Math.floor(l.length / 2)];\n  }\n  const middle = l.length / 2;\n  const left = l.slice(0, middle);\n  const right = l.slice(middle);\n  return median(left) + median(right);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpew4b4ssj.js:11\n    const left = l.slice(0, middle);\n                   ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmpew4b4ssj.js:11:20)\n    at median (/tmp/tmpew4b4ssj.js:13:27)\n    at median (/tmp/tmpew4b4ssj.js:13:27)\n    at median (/tmp/tmpew4b4ssj.js:13:27)\n    at median (/tmp/tmpew4b4ssj.js:13:27)\n    at median (/tmp/tmpew4b4ssj.js:13:27)\n    at median (/tmp/tmpew4b4ssj.js:13:27)\n    at median (/tmp/tmpew4b4ssj.js:13:27)\n    at median (/tmp/tmpew4b4ssj.js:13:27)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334806
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length % 2 === 0) {\n    return l[Math.floor(l.length / 2)];\n  }\n  const mid = l.length / 2 - 1;\n  const left = l.slice(0, mid);\n  const right = l.slice(mid);\n  return median(left) + median(right);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpxgh98_44.js:11\n    const left = l.slice(0, mid);\n                   ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmpxgh98_44.js:11:20)\n    at median (/tmp/tmpxgh98_44.js:13:27)\n    at median (/tmp/tmpxgh98_44.js:13:27)\n    at median (/tmp/tmpxgh98_44.js:13:27)\n    at median (/tmp/tmpxgh98_44.js:13:27)\n    at median (/tmp/tmpxgh98_44.js:13:27)\n    at median (/tmp/tmpxgh98_44.js:13:27)\n    at median (/tmp/tmpxgh98_44.js:13:27)\n    at median (/tmp/tmpxgh98_44.js:13:27)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334802
    },
    {
      "exit_code": 0,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty array\");\n  }\n  l.sort((a, b) => a - b);\n  const half = Math.floor(l.length / 2);\n  if (l.length % 2) {\n    return l[half];\n  }\n  return (l[half - 1] + l[half]) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334806
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const sorted = l.slice().sort((a, b) => a - b);\n  const len = sorted.length;\n  if (len % 2 === 0) {\n    return sorted[(len - 1) / 2];\n  }\n  const middle = len >> 1;\n  return sorted[middle];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n8\n    at test (/tmp/tmph11gaw2d.js:22:12)\n    at Object.<anonymous> (/tmp/tmph11gaw2d.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334806
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty array\");\n  }\n  const n = l.length;\n  if (n % 2 === 0) {\n    return l[Math.floor(n / 2)];\n  }\n  const half = n / 2;\n  const left = median(l.slice(0, half));\n  const right = median(l.slice(half));\n  return (left + right) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmph0tm5bn8.js:8\n        throw new Error(\"Cannot calculate median of an empty array\");\n        ^\n\nError: Cannot calculate median of an empty array\n    at median (/tmp/tmph0tm5bn8.js:8:15)\n    at median (/tmp/tmph0tm5bn8.js:15:18)\n    at median (/tmp/tmph0tm5bn8.js:15:18)\n    at median (/tmp/tmph0tm5bn8.js:16:19)\n    at test (/tmp/tmph0tm5bn8.js:22:22)\n    at Object.<anonymous> (/tmp/tmph0tm5bn8.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334802
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const n = l.length;\n  if (n % 2 === 0) {\n    return l[Math.floor(n / 2)];\n  }\n  const mid = Math.floor(n / 2);\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return ((left + right) / 2) | 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpomdr0mwh.js:15\n    const left = median(l.slice(0, mid));\n                          ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmpomdr0mwh.js:15:27)\n    at median (/tmp/tmpomdr0mwh.js:16:19)\n    at median (/tmp/tmpomdr0mwh.js:16:19)\n    at median (/tmp/tmpomdr0mwh.js:16:19)\n    at median (/tmp/tmpomdr0mwh.js:16:19)\n    at median (/tmp/tmpomdr0mwh.js:16:19)\n    at median (/tmp/tmpomdr0mwh.js:16:19)\n    at median (/tmp/tmpomdr0mwh.js:16:19)\n    at median (/tmp/tmpomdr0mwh.js:16:19)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334806
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const sorted = l.slice().sort((a, b) => a - b);\n  const len = sorted.length;\n  if (len % 2 === 0) {\n    return sorted[(len - 1) / 2];\n  }\n  const middle = Math.floor(len / 2);\n  return sorted[middle];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n8\n    at test (/tmp/tmpzeyfioeb.js:22:12)\n    at Object.<anonymous> (/tmp/tmpzeyfioeb.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334806
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const mid = l.length / 2;\n  const left = l.slice(0, mid);\n  const right = l.slice(mid);\n  return median(left) + median(right);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpgkyfndrg.js:11\n    const left = l.slice(0, mid);\n                   ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmpgkyfndrg.js:11:20)\n    at median (/tmp/tmpgkyfndrg.js:13:27)\n    at median (/tmp/tmpgkyfndrg.js:13:27)\n    at median (/tmp/tmpgkyfndrg.js:13:27)\n    at median (/tmp/tmpgkyfndrg.js:13:27)\n    at median (/tmp/tmpgkyfndrg.js:13:27)\n    at median (/tmp/tmpgkyfndrg.js:13:27)\n    at median (/tmp/tmpgkyfndrg.js:13:27)\n    at median (/tmp/tmpgkyfndrg.js:13:27)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334798
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length % 2 === 0) {\n    return l[Math.floor(l.length / 2)];\n  }\n  const mid = l.length / 2;\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return l.indexOf(left) < l.indexOf(right) ? left : right;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmp6ictk2de.js:11\n    const left = median(l.slice(0, mid));\n                          ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmp6ictk2de.js:11:27)\n    at median (/tmp/tmp6ictk2de.js:12:19)\n    at median (/tmp/tmp6ictk2de.js:12:19)\n    at median (/tmp/tmp6ictk2de.js:12:19)\n    at median (/tmp/tmp6ictk2de.js:12:19)\n    at median (/tmp/tmp6ictk2de.js:12:19)\n    at median (/tmp/tmp6ictk2de.js:12:19)\n    at median (/tmp/tmp6ictk2de.js:12:19)\n    at median (/tmp/tmp6ictk2de.js:12:19)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334808
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const sorted = l.slice().sort((a: number, b: number) => a - b);\n  if (sorted.length % 2 === 0) {\n    return sorted[(sorted.length - 1) / 2];\n  }\n  const middle = sorted.length / 2;\n  const leftMedian = median(sorted.slice(0, middle));\n  const rightMedian = median(sorted.slice(middle));\n  return leftMedian + rightMedian / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmphqirqlr1.js:10\n    const sorted = l.slice().sort((a, b) => a - b);\n                     ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmphqirqlr1.js:10:22)\n    at median (/tmp/tmphqirqlr1.js:16:25)\n    at median (/tmp/tmphqirqlr1.js:16:25)\n    at median (/tmp/tmphqirqlr1.js:16:25)\n    at median (/tmp/tmphqirqlr1.js:16:25)\n    at median (/tmp/tmphqirqlr1.js:16:25)\n    at median (/tmp/tmphqirqlr1.js:16:25)\n    at median (/tmp/tmphqirqlr1.js:16:25)\n    at median (/tmp/tmphqirqlr1.js:16:25)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334808
    },
    {
      "exit_code": 2,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const n = l.length;\n  if (n % 2 === 0) {\n    return l[Math.floor(n / 2)];\n  }\n  const m = n >> 1;\n  const mid = m >> 1;\n  const left = l[mid];\n  let right = l[n - 1];\n  while (left < right) {\n    const mid2 = mid + 1;\n    const mid3 = mid + 2;\n    if (mid3 > n) {\n      mid3 = n;\n    }\n    if (mid3 >= mid2) {\n      left = mid + 1;\n    } else {\n      right = mid - 1;\n    }\n    const mid1 = mid + 1;\n    const mid4 = mid + 4;\n    if (mid4 > n) {\n      mid4 = n;\n    }\n    if (mid4 >= mid3) {\n      mid = mid + 1;\n    } else {\n      mid = mid - 1;\n    }\n    if (left > right) {\n      left = mid - 1;\n    } else {\n      right = mid + 1;\n    }\n  }\n  return left;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpmq2lcwnw.ts(22,7): error TS2588: Cannot assign to 'mid3' because it is a constant.\n../../../../tmp/tmpmq2lcwnw.ts(25,7): error TS2588: Cannot assign to 'left' because it is a constant.\n../../../../tmp/tmpmq2lcwnw.ts(32,7): error TS2588: Cannot assign to 'mid4' because it is a constant.\n../../../../tmp/tmpmq2lcwnw.ts(35,7): error TS2588: Cannot assign to 'mid' because it is a constant.\n../../../../tmp/tmpmq2lcwnw.ts(37,7): error TS2588: Cannot assign to 'mid' because it is a constant.\n../../../../tmp/tmpmq2lcwnw.ts(40,7): error TS2588: Cannot assign to 'left' because it is a constant.\n",
      "timestamp": 1660334808
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty array\");\n  }\n  const n = l.length;\n  if (n % 2 === 0) {\n    return l[Math.floor(n / 2)];\n  }\n  const half = n / 2;\n  const left = median(l.slice(0, half));\n  const right = median(l.slice(half));\n  return (left + right) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmph0tm5bn8.js:8\n        throw new Error(\"Cannot calculate median of an empty array\");\n        ^\n\nError: Cannot calculate median of an empty array\n    at median (/tmp/tmph0tm5bn8.js:8:15)\n    at median (/tmp/tmph0tm5bn8.js:15:18)\n    at median (/tmp/tmph0tm5bn8.js:15:18)\n    at median (/tmp/tmph0tm5bn8.js:16:19)\n    at test (/tmp/tmph0tm5bn8.js:22:22)\n    at Object.<anonymous> (/tmp/tmph0tm5bn8.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334802
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty array\");\n  }\n  const n = l.length;\n  if (n % 2 === 0) {\n    return l[Math.floor(n / 2)];\n  }\n  const half = n / 2;\n  const left = median(l.slice(0, half));\n  const right = median(l.slice(half));\n  return (left + right) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmph0tm5bn8.js:8\n        throw new Error(\"Cannot calculate median of an empty array\");\n        ^\n\nError: Cannot calculate median of an empty array\n    at median (/tmp/tmph0tm5bn8.js:8:15)\n    at median (/tmp/tmph0tm5bn8.js:15:18)\n    at median (/tmp/tmph0tm5bn8.js:15:18)\n    at median (/tmp/tmph0tm5bn8.js:16:19)\n    at test (/tmp/tmph0tm5bn8.js:22:22)\n    at Object.<anonymous> (/tmp/tmph0tm5bn8.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334802
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty array\");\n  }\n  const sorted: number[] = l.slice().sort((a, b) => a - b);\n  let mid: number = sorted.length / 2;\n  if (sorted.length % 2 === 0) {\n    mid = sorted.length / 2 - 1;\n  }\n  return sorted[mid];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmp_3u4p1w6.js:20:12)\n    at Object.<anonymous> (/tmp/tmp_3u4p1w6.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334809
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty array\");\n  }\n  const mid = l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return (left + right) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpqpiy2gwz.js:8\n        throw new Error(\"Cannot calculate median of an empty array\");\n        ^\n\nError: Cannot calculate median of an empty array\n    at median (/tmp/tmpqpiy2gwz.js:8:15)\n    at median (/tmp/tmpqpiy2gwz.js:14:18)\n    at median (/tmp/tmpqpiy2gwz.js:14:18)\n    at median (/tmp/tmpqpiy2gwz.js:15:19)\n    at test (/tmp/tmpqpiy2gwz.js:21:22)\n    at Object.<anonymous> (/tmp/tmpqpiy2gwz.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334809
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const n = l.length;\n  if (n % 2 === 0) {\n    return l[Math.floor(n / 2)];\n  }\n  const mid = Math.floor(n / 2);\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return ((left + right) / 2) | 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpomdr0mwh.js:15\n    const left = median(l.slice(0, mid));\n                          ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmpomdr0mwh.js:15:27)\n    at median (/tmp/tmpomdr0mwh.js:16:19)\n    at median (/tmp/tmpomdr0mwh.js:16:19)\n    at median (/tmp/tmpomdr0mwh.js:16:19)\n    at median (/tmp/tmpomdr0mwh.js:16:19)\n    at median (/tmp/tmpomdr0mwh.js:16:19)\n    at median (/tmp/tmpomdr0mwh.js:16:19)\n    at median (/tmp/tmpomdr0mwh.js:16:19)\n    at median (/tmp/tmpomdr0mwh.js:16:19)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334806
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty array\");\n  }\n  const n = l.length;\n  if (n % 2 === 0) {\n    return l[Math.floor(n / 2)];\n  }\n  const half = n / 2;\n  const left = median(l.slice(0, half));\n  const right = median(l.slice(half));\n  return left + right;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpb1dy19vy.js:8\n        throw new Error(\"Cannot calculate median of an empty array\");\n        ^\n\nError: Cannot calculate median of an empty array\n    at median (/tmp/tmpb1dy19vy.js:8:15)\n    at median (/tmp/tmpb1dy19vy.js:15:18)\n    at median (/tmp/tmpb1dy19vy.js:15:18)\n    at median (/tmp/tmpb1dy19vy.js:16:19)\n    at test (/tmp/tmpb1dy19vy.js:22:22)\n    at Object.<anonymous> (/tmp/tmpb1dy19vy.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334802
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length % 2 === 0) {\n    return l[l.length / 2 - 1]\n  }\n  const mid = l.length / 2\n  const left = l.slice(0, mid)\n  const right = l.slice(mid)\n  return median(left) + median(right)\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpt7zicu5p.js:11\n    const left = l.slice(0, mid);\n                   ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmpt7zicu5p.js:11:20)\n    at median (/tmp/tmpt7zicu5p.js:13:27)\n    at median (/tmp/tmpt7zicu5p.js:13:27)\n    at median (/tmp/tmpt7zicu5p.js:13:27)\n    at median (/tmp/tmpt7zicu5p.js:13:27)\n    at median (/tmp/tmpt7zicu5p.js:13:27)\n    at median (/tmp/tmpt7zicu5p.js:13:27)\n    at median (/tmp/tmpt7zicu5p.js:13:27)\n    at median (/tmp/tmpt7zicu5p.js:13:27)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334798
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty array\");\n  }\n  const mid = Math.floor(l.length / 2);\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  if (l[mid] >= 0) {\n    return median(l.slice(0, mid));\n  }\n  return median(l.slice(mid + 1));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpgdt2smwn.js:22:12)\n    at Object.<anonymous> (/tmp/tmpgdt2smwn.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334809
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length % 2 === 0) {\n    return l[(l.length / 2) - 1];\n  }\n  const mid = l.length / 2;\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return ((left + right) / 2) | 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpn3ermfo0.js:11\n    const left = median(l.slice(0, mid));\n                          ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmpn3ermfo0.js:11:27)\n    at median (/tmp/tmpn3ermfo0.js:12:19)\n    at median (/tmp/tmpn3ermfo0.js:12:19)\n    at median (/tmp/tmpn3ermfo0.js:12:19)\n    at median (/tmp/tmpn3ermfo0.js:12:19)\n    at median (/tmp/tmpn3ermfo0.js:12:19)\n    at median (/tmp/tmpn3ermfo0.js:12:19)\n    at median (/tmp/tmpn3ermfo0.js:12:19)\n    at median (/tmp/tmpn3ermfo0.js:12:19)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334798
    },
    {
      "exit_code": 2,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot compute median of an empty array\");\n  }\n  const n = l.length;\n  if (n === 1) {\n    return l[0];\n  }\n  if (n % 2 === 0) {\n    return median(l[Math.floor(n / 2)]);\n  }\n  const mid = Math.floor(n / 2);\n  const left = median(l[mid]);\n  const right = median(l[n - mid]);\n  return left + right * 0.5;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpt2ql1oou.ts(15,19): error TS2345: Argument of type 'number' is not assignable to parameter of type 'number[]'.\n../../../../tmp/tmpt2ql1oou.ts(18,23): error TS2345: Argument of type 'number' is not assignable to parameter of type 'number[]'.\n../../../../tmp/tmpt2ql1oou.ts(19,24): error TS2345: Argument of type 'number' is not assignable to parameter of type 'number[]'.\n",
      "timestamp": 1660334808
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const sorted = l.slice().sort((a: number, b: number) => a - b);\n  const len = sorted.length;\n  if (len % 2 === 0) {\n    return sorted[(len - 1) / 2];\n  }\n  const middle = Math.floor(len / 2);\n  const median1 = sorted[middle];\n  const median2 = sorted[middle + 1];\n  return median1 + (median2 - median1) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3.5\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmptygxne4u.js:23:12)\n    at Object.<anonymous> (/tmp/tmptygxne4u.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3.5,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334809
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty array\");\n  }\n  const sorted = l.slice().sort((a, b) => a - b);\n  const len = sorted.length;\n  if (len % 2 === 0) {\n    return sorted[(len - 1) / 2];\n  }\n  const middle = Math.floor(len / 2);\n  return sorted[middle];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n8\n    at test (/tmp/tmpt49ep636.js:22:12)\n    at Object.<anonymous> (/tmp/tmpt49ep636.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334809
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length % 2 === 0) {\n    const mid = l.length / 2;\n    const left = l.slice(0, mid);\n    const right = l.slice(mid);\n    return median(left) + median(right);\n  }\n  return Math.ceil(l.length / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n8\n    at test (/tmp/tmpmmn_m3qw.js:19:12)\n    at Object.<anonymous> (/tmp/tmpmmn_m3qw.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334809
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length % 2 === 0) {\n    return l[Math.floor(l.length / 2)];\n  }\n  const mid = Math.floor(l.length / 2);\n  const left = l.slice(0, mid);\n  const right = l.slice(mid);\n  return median(left) + median(right);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpixd40gl0.js:11\n    const left = l.slice(0, mid);\n                   ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmpixd40gl0.js:11:20)\n    at median (/tmp/tmpixd40gl0.js:13:27)\n    at median (/tmp/tmpixd40gl0.js:13:27)\n    at median (/tmp/tmpixd40gl0.js:13:27)\n    at median (/tmp/tmpixd40gl0.js:13:27)\n    at median (/tmp/tmpixd40gl0.js:13:27)\n    at median (/tmp/tmpixd40gl0.js:13:27)\n    at median (/tmp/tmpixd40gl0.js:13:27)\n    at median (/tmp/tmpixd40gl0.js:13:27)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334809
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  const n = l.length;\n  if (n < 1) return undefined;\n  if (n === 1) return l[0];\n\n  const mid = Math.floor(n / 2);\n  const left = l.slice(0, mid);\n  const right = l.slice(mid);\n\n  return median(left) + median(right);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmp6h6aoj12.js:20:12)\n    at Object.<anonymous> (/tmp/tmp6h6aoj12.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334809
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const n = l.length;\n  if (n % 2 === 0) {\n    return l[Math.floor(n / 2)];\n  }\n  const half = n / 2;\n  const left = median(l.slice(0, half));\n  const right = median(l.slice(half));\n  return left + right;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmprpv215vc.js:15\n    const left = median(l.slice(0, half));\n                          ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmprpv215vc.js:15:27)\n    at median (/tmp/tmprpv215vc.js:16:19)\n    at median (/tmp/tmprpv215vc.js:16:19)\n    at median (/tmp/tmprpv215vc.js:16:19)\n    at median (/tmp/tmprpv215vc.js:16:19)\n    at median (/tmp/tmprpv215vc.js:16:19)\n    at median (/tmp/tmprpv215vc.js:16:19)\n    at median (/tmp/tmprpv215vc.js:16:19)\n    at median (/tmp/tmprpv215vc.js:16:19)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334806
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const mid = l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return (left + right) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpsdei5ayr.js:14\n    const left = median(l.slice(0, mid));\n                          ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmpsdei5ayr.js:14:27)\n    at median (/tmp/tmpsdei5ayr.js:15:19)\n    at median (/tmp/tmpsdei5ayr.js:15:19)\n    at median (/tmp/tmpsdei5ayr.js:15:19)\n    at median (/tmp/tmpsdei5ayr.js:15:19)\n    at median (/tmp/tmpsdei5ayr.js:15:19)\n    at median (/tmp/tmpsdei5ayr.js:15:19)\n    at median (/tmp/tmpsdei5ayr.js:15:19)\n    at median (/tmp/tmpsdei5ayr.js:15:19)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334798
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const mid = l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return l.length / 2 > mid ? left : right;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpnr9ex25x.js:14\n    const left = median(l.slice(0, mid));\n                          ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmpnr9ex25x.js:14:27)\n    at median (/tmp/tmpnr9ex25x.js:15:19)\n    at median (/tmp/tmpnr9ex25x.js:15:19)\n    at median (/tmp/tmpnr9ex25x.js:15:19)\n    at median (/tmp/tmpnr9ex25x.js:15:19)\n    at median (/tmp/tmpnr9ex25x.js:15:19)\n    at median (/tmp/tmpnr9ex25x.js:15:19)\n    at median (/tmp/tmpnr9ex25x.js:15:19)\n    at median (/tmp/tmpnr9ex25x.js:15:19)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334809
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length <= 1) return l[0];\n  const mid = l.length / 2;\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return ((left + right) / 2) | 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmp0z0lo6jd.js:17:12)\n    at Object.<anonymous> (/tmp/tmp0z0lo6jd.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334798
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  const n = l.length;\n  if (n < 2) {\n    return l[0];\n  }\n  const mid = Math.floor(n / 2);\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return ((left + right) / 2) | 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpowlup4t0.js:19:12)\n    at Object.<anonymous> (/tmp/tmpowlup4t0.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334809
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty array\");\n  }\n  const n = l.length;\n  if (n % 2 === 0) {\n    return l[Math.floor(n / 2)];\n  }\n  const half = n / 2;\n  const left = median(l.slice(0, half));\n  const right = median(l.slice(half));\n  return (left + right) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmph0tm5bn8.js:8\n        throw new Error(\"Cannot calculate median of an empty array\");\n        ^\n\nError: Cannot calculate median of an empty array\n    at median (/tmp/tmph0tm5bn8.js:8:15)\n    at median (/tmp/tmph0tm5bn8.js:15:18)\n    at median (/tmp/tmph0tm5bn8.js:15:18)\n    at median (/tmp/tmph0tm5bn8.js:16:19)\n    at test (/tmp/tmph0tm5bn8.js:22:22)\n    at Object.<anonymous> (/tmp/tmph0tm5bn8.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334802
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty array\");\n  }\n  l.sort((a, b) => a - b);\n  const mid = l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  return (l[mid] + l[mid-1]) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmp2ckym2vq.js:20:12)\n    at Object.<anonymous> (/tmp/tmp2ckym2vq.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334802
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length % 2 === 0) {\n    const mid = l.length / 2;\n    const left = median(l.slice(0, mid));\n    const right = median(l.slice(mid));\n    return Math.ceil((left + right) / 2);\n  }\n  return l[Math.floor(l.length / 2)];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmp2_3wjtus.js:18:12)\n    at Object.<anonymous> (/tmp/tmp2_3wjtus.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334809
    },
    {
      "exit_code": 2,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const n = l.length;\n  if (n % 2 === 0) {\n    return l[Math.floor(n / 2)];\n  }\n  const half = n / 2;\n  let i = 0;\n  let m = 0;\n  while (i < half) {\n    m = l[i];\n    i++;\n  }\n  while (i < n) {\n    m = l[i];\n    i++;\n    if (m > l[half]) {\n      m = l[half];\n    }\n    half--;\n  }\n  return m;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpx6cc8zu6.ts(27,5): error TS2588: Cannot assign to 'half' because it is a constant.\n",
      "timestamp": 1660334809
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty array\");\n  }\n  const n = l.length;\n  if (n % 2 === 0) {\n    return l[Math.floor(n / 2)];\n  }\n  const half = n / 2;\n  const left = median(l.slice(0, half));\n  const right = median(l.slice(half));\n  return (left + right) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmph0tm5bn8.js:8\n        throw new Error(\"Cannot calculate median of an empty array\");\n        ^\n\nError: Cannot calculate median of an empty array\n    at median (/tmp/tmph0tm5bn8.js:8:15)\n    at median (/tmp/tmph0tm5bn8.js:15:18)\n    at median (/tmp/tmph0tm5bn8.js:15:18)\n    at median (/tmp/tmph0tm5bn8.js:16:19)\n    at test (/tmp/tmph0tm5bn8.js:22:22)\n    at Object.<anonymous> (/tmp/tmph0tm5bn8.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334802
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length % 2 === 0) {\n    return l[(l.length / 2) - 1];\n  }\n  const mid = l.length / 2;\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return ((left + right) / 2) | 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpn3ermfo0.js:11\n    const left = median(l.slice(0, mid));\n                          ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmpn3ermfo0.js:11:27)\n    at median (/tmp/tmpn3ermfo0.js:12:19)\n    at median (/tmp/tmpn3ermfo0.js:12:19)\n    at median (/tmp/tmpn3ermfo0.js:12:19)\n    at median (/tmp/tmpn3ermfo0.js:12:19)\n    at median (/tmp/tmpn3ermfo0.js:12:19)\n    at median (/tmp/tmpn3ermfo0.js:12:19)\n    at median (/tmp/tmpn3ermfo0.js:12:19)\n    at median (/tmp/tmpn3ermfo0.js:12:19)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334798
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error('Cannot compute median of an empty array');\n  }\n  const n = l.length;\n  if (n % 2 === 0) {\n    return l[Math.floor(n / 2)];\n  }\n  const half = n / 2;\n  const left = median(l.slice(0, half));\n  const right = median(l.slice(half));\n  return ((left + right) / 2) | 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmp_7hqa4_6.js:8\n        throw new Error('Cannot compute median of an empty array');\n        ^\n\nError: Cannot compute median of an empty array\n    at median (/tmp/tmp_7hqa4_6.js:8:15)\n    at median (/tmp/tmp_7hqa4_6.js:15:18)\n    at median (/tmp/tmp_7hqa4_6.js:15:18)\n    at median (/tmp/tmp_7hqa4_6.js:16:19)\n    at test (/tmp/tmp_7hqa4_6.js:22:22)\n    at Object.<anonymous> (/tmp/tmp_7hqa4_6.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334809
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const n = l.length;\n  if (n % 2 === 0) {\n    return l[Math.floor(n / 2)];\n  }\n  const half = n / 2;\n  const left = median(l.slice(0, half));\n  const right = median(l.slice(half));\n  return (left + right) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmp9yynm9n8.js:15\n    const left = median(l.slice(0, half));\n                          ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmp9yynm9n8.js:15:27)\n    at median (/tmp/tmp9yynm9n8.js:16:19)\n    at median (/tmp/tmp9yynm9n8.js:16:19)\n    at median (/tmp/tmp9yynm9n8.js:16:19)\n    at median (/tmp/tmp9yynm9n8.js:16:19)\n    at median (/tmp/tmp9yynm9n8.js:16:19)\n    at median (/tmp/tmp9yynm9n8.js:16:19)\n    at median (/tmp/tmp9yynm9n8.js:16:19)\n    at median (/tmp/tmp9yynm9n8.js:16:19)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334798
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty array\");\n  }\n  const sorted = l.slice().sort((a: number, b: number) => a - b);\n  const len = sorted.length;\n  if (len % 2 === 0) {\n    return sorted[(len - 1) / 2];\n  }\n  const middle = Math.floor(len / 2);\n  const median1 = sorted[middle];\n  const median2 = sorted[middle + 1];\n  return median1 + median2 / (len / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4.6\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpcxsbflej.js:23:12)\n    at Object.<anonymous> (/tmp/tmpcxsbflej.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4.6,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334810
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const mid = l.length / 2;\n  if (l.length % 2) {\n    return l[mid];\n  }\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return ((left + right) / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmp_aslk9s_.js:21:12)\n    at Object.<anonymous> (/tmp/tmp_aslk9s_.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334806
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length % 2 === 0) {\n    return l[Math.floor(l.length / 2)];\n  }\n  const mid = Math.floor(l.length / 2);\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return ((left + right) / 2) | 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpryxutovv.js:11\n    const left = median(l.slice(0, mid));\n                          ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmpryxutovv.js:11:27)\n    at median (/tmp/tmpryxutovv.js:12:19)\n    at median (/tmp/tmpryxutovv.js:12:19)\n    at median (/tmp/tmpryxutovv.js:12:19)\n    at median (/tmp/tmpryxutovv.js:12:19)\n    at median (/tmp/tmpryxutovv.js:12:19)\n    at median (/tmp/tmpryxutovv.js:12:19)\n    at median (/tmp/tmpryxutovv.js:12:19)\n    at median (/tmp/tmpryxutovv.js:12:19)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334809
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length % 2 === 0) {\n    return l[l.length / 2 - 1]\n  }\n  const mid = l.length / 2\n  const left = l.slice(0, mid)\n  const right = l.slice(mid)\n  return median(left) + median(right)\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpt7zicu5p.js:11\n    const left = l.slice(0, mid);\n                   ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmpt7zicu5p.js:11:20)\n    at median (/tmp/tmpt7zicu5p.js:13:27)\n    at median (/tmp/tmpt7zicu5p.js:13:27)\n    at median (/tmp/tmpt7zicu5p.js:13:27)\n    at median (/tmp/tmpt7zicu5p.js:13:27)\n    at median (/tmp/tmpt7zicu5p.js:13:27)\n    at median (/tmp/tmpt7zicu5p.js:13:27)\n    at median (/tmp/tmpt7zicu5p.js:13:27)\n    at median (/tmp/tmpt7zicu5p.js:13:27)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334798
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length % 2 === 0) {\n    return l[(l.length / 2) - 1];\n  }\n  const middle = l.length / 2;\n  const left = l.slice(0, middle);\n  const right = l.slice(middle);\n  return median(left) + median(right);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpsbqzee_4.js:11\n    const left = l.slice(0, middle);\n                   ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmpsbqzee_4.js:11:20)\n    at median (/tmp/tmpsbqzee_4.js:13:27)\n    at median (/tmp/tmpsbqzee_4.js:13:27)\n    at median (/tmp/tmpsbqzee_4.js:13:27)\n    at median (/tmp/tmpsbqzee_4.js:13:27)\n    at median (/tmp/tmpsbqzee_4.js:13:27)\n    at median (/tmp/tmpsbqzee_4.js:13:27)\n    at median (/tmp/tmpsbqzee_4.js:13:27)\n    at median (/tmp/tmpsbqzee_4.js:13:27)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334805
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty array\");\n  }\n  const n = l.length;\n  if (n % 2 === 0) {\n    return l[Math.floor(n / 2)];\n  }\n  const half = Math.floor(n / 2);\n  const left = median(l.slice(0, half));\n  const right = median(l.slice(half));\n  return left + right * 0.5;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmp8vokath2.js:8\n        throw new Error(\"Cannot calculate median of an empty array\");\n        ^\n\nError: Cannot calculate median of an empty array\n    at median (/tmp/tmp8vokath2.js:8:15)\n    at median (/tmp/tmp8vokath2.js:15:18)\n    at median (/tmp/tmp8vokath2.js:15:18)\n    at median (/tmp/tmp8vokath2.js:16:19)\n    at test (/tmp/tmp8vokath2.js:22:22)\n    at Object.<anonymous> (/tmp/tmp8vokath2.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334810
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty array\");\n  }\n  const sortedArray = l.slice().sort((a, b) => a - b);\n  const middle = Math.floor(sortedArray.length / 2);\n  if (sortedArray.length % 2 === 0) {\n    return sortedArray[middle];\n  }\n  return sortedArray[middle - 1] + sortedArray[middle];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n5\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmp42h5h6ji.js:20:12)\n    at Object.<anonymous> (/tmp/tmp42h5h6ji.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 5,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334802
    },
    {
      "exit_code": 2,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty array\");\n  }\n  const n = l.length;\n  if (n === 1) {\n    return l[0];\n  }\n  const mid = Math.floor(n / 2);\n  if (n % 2) {\n    return median(l[mid]);\n  }\n  return median(l[mid], l[n - 1]);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpk_gz5tam.ts(16,19): error TS2345: Argument of type 'number' is not assignable to parameter of type 'number[]'.\n../../../../tmp/tmpk_gz5tam.ts(18,25): error TS2554: Expected 1 arguments, but got 2.\n",
      "timestamp": 1660334809
    },
    {
      "exit_code": 2,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty array\");\n  }\n  const n = l.length;\n  if (n === 1) {\n    return l[0];\n  }\n  const half = n / 2;\n  if (n % 2) {\n    return median(l[half]) < median(l[half - 1]) ? l[half] : l[half - 1];\n  }\n  return median(l[half]);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpvns452uq.ts(16,19): error TS2345: Argument of type 'number' is not assignable to parameter of type 'number[]'.\n../../../../tmp/tmpvns452uq.ts(16,37): error TS2345: Argument of type 'number' is not assignable to parameter of type 'number[]'.\n../../../../tmp/tmpvns452uq.ts(18,17): error TS2345: Argument of type 'number' is not assignable to parameter of type 'number[]'.\n",
      "timestamp": 1660334809
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const sorted = l.slice().sort((a, b) => a - b);\n  const len = sorted.length;\n  if (len % 2 === 0) {\n    return sorted[len / 2 - 1];\n  }\n  const middle = Math.floor(len / 2);\n  return sorted[middle];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n6\n\nshould loosely deep-equal\n\n8\n    at test (/tmp/tmp64qgv_xo.js:22:12)\n    at Object.<anonymous> (/tmp/tmp64qgv_xo.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 6,\n  expected: 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334810
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length % 2 === 0) {\n    return l[l.length / 2 - 1]\n  }\n  const mid = l.length / 2\n  const left = l.slice(0, mid)\n  const right = l.slice(mid)\n  return median(left) + median(right)\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpt7zicu5p.js:11\n    const left = l.slice(0, mid);\n                   ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmpt7zicu5p.js:11:20)\n    at median (/tmp/tmpt7zicu5p.js:13:27)\n    at median (/tmp/tmpt7zicu5p.js:13:27)\n    at median (/tmp/tmpt7zicu5p.js:13:27)\n    at median (/tmp/tmpt7zicu5p.js:13:27)\n    at median (/tmp/tmpt7zicu5p.js:13:27)\n    at median (/tmp/tmpt7zicu5p.js:13:27)\n    at median (/tmp/tmpt7zicu5p.js:13:27)\n    at median (/tmp/tmpt7zicu5p.js:13:27)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334798
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty array\");\n  }\n  const mid = l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return l.length / 2 > mid ? right : left;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpnf0nlg5j.js:8\n        throw new Error(\"Cannot calculate median of an empty array\");\n        ^\n\nError: Cannot calculate median of an empty array\n    at median (/tmp/tmpnf0nlg5j.js:8:15)\n    at median (/tmp/tmpnf0nlg5j.js:14:18)\n    at median (/tmp/tmpnf0nlg5j.js:14:18)\n    at median (/tmp/tmpnf0nlg5j.js:15:19)\n    at test (/tmp/tmpnf0nlg5j.js:21:22)\n    at Object.<anonymous> (/tmp/tmpnf0nlg5j.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334811
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty array\");\n  }\n  const mid = l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return (left + right) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpqpiy2gwz.js:8\n        throw new Error(\"Cannot calculate median of an empty array\");\n        ^\n\nError: Cannot calculate median of an empty array\n    at median (/tmp/tmpqpiy2gwz.js:8:15)\n    at median (/tmp/tmpqpiy2gwz.js:14:18)\n    at median (/tmp/tmpqpiy2gwz.js:14:18)\n    at median (/tmp/tmpqpiy2gwz.js:15:19)\n    at test (/tmp/tmpqpiy2gwz.js:21:22)\n    at Object.<anonymous> (/tmp/tmpqpiy2gwz.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334809
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty array\");\n  }\n  const mid = l.length / 2;\n  const sorted = l.slice().sort((a, b) => a - b);\n  if (sorted.length % 2 === 0) {\n    return sorted[mid];\n  }\n  const medianOfTwo = sorted[mid];\n  return medianOfTwo + (sorted[mid-1] + sorted[mid+1]) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpnc4w87f8.js:21:12)\n    at Object.<anonymous> (/tmp/tmpnc4w87f8.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334811
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length % 2 === 0) {\n    return l[Math.floor(l.length / 2)];\n  }\n  const mid = l.length / 2;\n  const left = l.slice(0, mid);\n  const right = l.slice(mid);\n  return median(left) + median(right);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpq1co3h_n.js:11\n    const left = l.slice(0, mid);\n                   ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmpq1co3h_n.js:11:20)\n    at median (/tmp/tmpq1co3h_n.js:13:27)\n    at median (/tmp/tmpq1co3h_n.js:13:27)\n    at median (/tmp/tmpq1co3h_n.js:13:27)\n    at median (/tmp/tmpq1co3h_n.js:13:27)\n    at median (/tmp/tmpq1co3h_n.js:13:27)\n    at median (/tmp/tmpq1co3h_n.js:13:27)\n    at median (/tmp/tmpq1co3h_n.js:13:27)\n    at median (/tmp/tmpq1co3h_n.js:13:27)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334798
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const sorted = l.slice().sort((a, b) => a - b);\n  const len = sorted.length;\n  if (len % 2 === 0) {\n    return sorted[len / 2 - 1];\n  }\n  const middle = Math.floor(len / 2);\n  return sorted[middle];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n6\n\nshould loosely deep-equal\n\n8\n    at test (/tmp/tmp64qgv_xo.js:22:12)\n    at Object.<anonymous> (/tmp/tmp64qgv_xo.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 6,\n  expected: 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334810
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length % 2 === 0) {\n    return l[Math.floor(l.length / 2)];\n  }\n  const mid = Math.floor(l.length / 2);\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return Math.ceil((left + right) / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmp67qbwa55.js:11\n    const left = median(l.slice(0, mid));\n                          ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmp67qbwa55.js:11:27)\n    at median (/tmp/tmp67qbwa55.js:12:19)\n    at median (/tmp/tmp67qbwa55.js:12:19)\n    at median (/tmp/tmp67qbwa55.js:12:19)\n    at median (/tmp/tmp67qbwa55.js:12:19)\n    at median (/tmp/tmp67qbwa55.js:12:19)\n    at median (/tmp/tmp67qbwa55.js:12:19)\n    at median (/tmp/tmp67qbwa55.js:12:19)\n    at median (/tmp/tmp67qbwa55.js:12:19)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334812
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  const n = l.length\n  if (n < 2) return l[0]\n  const mid = n >> 1\n  const a = l[mid]\n  const b = l[n - 1]\n  const c = l[n - 2]\n  const d = (a + b + c) / 3\n  return d > 0 ? d : median([a, b, c])\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3.6666666666666665\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpyupcgd5a.js:20:12)\n    at Object.<anonymous> (/tmp/tmpyupcgd5a.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3.6666666666666665,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334812
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const mid = l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return ((left + right) / 2) | 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmps79282p9.js:14\n    const left = median(l.slice(0, mid));\n                          ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmps79282p9.js:14:27)\n    at median (/tmp/tmps79282p9.js:15:19)\n    at median (/tmp/tmps79282p9.js:15:19)\n    at median (/tmp/tmps79282p9.js:15:19)\n    at median (/tmp/tmps79282p9.js:15:19)\n    at median (/tmp/tmps79282p9.js:15:19)\n    at median (/tmp/tmps79282p9.js:15:19)\n    at median (/tmp/tmps79282p9.js:15:19)\n    at median (/tmp/tmps79282p9.js:15:19)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334812
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length % 2 === 0) {\n    return l[l.length / 2 - 1]\n  }\n  const mid = l.length / 2\n  const left = l.slice(0, mid)\n  const right = l.slice(mid)\n  return median(left) + median(right)\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpt7zicu5p.js:11\n    const left = l.slice(0, mid);\n                   ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmpt7zicu5p.js:11:20)\n    at median (/tmp/tmpt7zicu5p.js:13:27)\n    at median (/tmp/tmpt7zicu5p.js:13:27)\n    at median (/tmp/tmpt7zicu5p.js:13:27)\n    at median (/tmp/tmpt7zicu5p.js:13:27)\n    at median (/tmp/tmpt7zicu5p.js:13:27)\n    at median (/tmp/tmpt7zicu5p.js:13:27)\n    at median (/tmp/tmpt7zicu5p.js:13:27)\n    at median (/tmp/tmpt7zicu5p.js:13:27)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334798
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const mid = l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return ((left + right) / 2) | 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmps79282p9.js:14\n    const left = median(l.slice(0, mid));\n                          ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmps79282p9.js:14:27)\n    at median (/tmp/tmps79282p9.js:15:19)\n    at median (/tmp/tmps79282p9.js:15:19)\n    at median (/tmp/tmps79282p9.js:15:19)\n    at median (/tmp/tmps79282p9.js:15:19)\n    at median (/tmp/tmps79282p9.js:15:19)\n    at median (/tmp/tmps79282p9.js:15:19)\n    at median (/tmp/tmps79282p9.js:15:19)\n    at median (/tmp/tmps79282p9.js:15:19)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334812
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty array\");\n  }\n  const mid = Math.floor(l.length / 2);\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  if (l[mid] >= l[mid+1]) {\n    return l[mid];\n  }\n  return l[mid+1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpigg2urrb.js:22:12)\n    at Object.<anonymous> (/tmp/tmpigg2urrb.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334812
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty array\");\n  }\n  const sorted = l.slice().sort((a, b) => a - b);\n  const len = sorted.length;\n  if (len % 2 === 0) {\n    return sorted[len / 2 - 1];\n  }\n  const middle = Math.floor(len / 2);\n  const medianOfMiddle = median(sorted.slice(0, middle));\n  const medianOfRest = median(sorted.slice(middle));\n  return medianOfMiddle + medianOfRest;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmp_nd4oqu3.js:8\n        throw new Error(\"Cannot calculate median of an empty array\");\n        ^\n\nError: Cannot calculate median of an empty array\n    at median (/tmp/tmp_nd4oqu3.js:8:15)\n    at median (/tmp/tmp_nd4oqu3.js:16:28)\n    at median (/tmp/tmp_nd4oqu3.js:16:28)\n    at median (/tmp/tmp_nd4oqu3.js:17:26)\n    at test (/tmp/tmp_nd4oqu3.js:23:22)\n    at Object.<anonymous> (/tmp/tmp_nd4oqu3.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334812
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length % 2 === 0) {\n    return l[(l.length / 2) - 1];\n  }\n  const middle = l.length / 2;\n  const left = l.slice(0, middle);\n  const right = l.slice(middle);\n  return median(left) + median(right);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpsbqzee_4.js:11\n    const left = l.slice(0, middle);\n                   ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmpsbqzee_4.js:11:20)\n    at median (/tmp/tmpsbqzee_4.js:13:27)\n    at median (/tmp/tmpsbqzee_4.js:13:27)\n    at median (/tmp/tmpsbqzee_4.js:13:27)\n    at median (/tmp/tmpsbqzee_4.js:13:27)\n    at median (/tmp/tmpsbqzee_4.js:13:27)\n    at median (/tmp/tmpsbqzee_4.js:13:27)\n    at median (/tmp/tmpsbqzee_4.js:13:27)\n    at median (/tmp/tmpsbqzee_4.js:13:27)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334805
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length % 2 === 0) {\n    return l[l.length / 2 - 1]\n  }\n  const mid = l.length / 2\n  const left = l.slice(0, mid)\n  const right = l.slice(mid)\n  return median(left) + median(right)\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpt7zicu5p.js:11\n    const left = l.slice(0, mid);\n                   ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmpt7zicu5p.js:11:20)\n    at median (/tmp/tmpt7zicu5p.js:13:27)\n    at median (/tmp/tmpt7zicu5p.js:13:27)\n    at median (/tmp/tmpt7zicu5p.js:13:27)\n    at median (/tmp/tmpt7zicu5p.js:13:27)\n    at median (/tmp/tmpt7zicu5p.js:13:27)\n    at median (/tmp/tmpt7zicu5p.js:13:27)\n    at median (/tmp/tmpt7zicu5p.js:13:27)\n    at median (/tmp/tmpt7zicu5p.js:13:27)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334798
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty array\");\n  }\n  const n = l.length;\n  if (n % 2 === 0) {\n    return l[Math.floor(n / 2)];\n  }\n  const mid = Math.floor(n / 2);\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return left + right / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmphf16gjkm.js:8\n        throw new Error(\"Cannot calculate median of an empty array\");\n        ^\n\nError: Cannot calculate median of an empty array\n    at median (/tmp/tmphf16gjkm.js:8:15)\n    at median (/tmp/tmphf16gjkm.js:15:18)\n    at median (/tmp/tmphf16gjkm.js:15:18)\n    at median (/tmp/tmphf16gjkm.js:16:19)\n    at test (/tmp/tmphf16gjkm.js:22:22)\n    at Object.<anonymous> (/tmp/tmphf16gjkm.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334813
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length % 2 === 0) {\n    return l[(l.length / 2) - 1];\n  }\n  const mid = l.length / 2;\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return left + right;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmp762vyisg.js:11\n    const left = median(l.slice(0, mid));\n                          ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmp762vyisg.js:11:27)\n    at median (/tmp/tmp762vyisg.js:12:19)\n    at median (/tmp/tmp762vyisg.js:12:19)\n    at median (/tmp/tmp762vyisg.js:12:19)\n    at median (/tmp/tmp762vyisg.js:12:19)\n    at median (/tmp/tmp762vyisg.js:12:19)\n    at median (/tmp/tmp762vyisg.js:12:19)\n    at median (/tmp/tmp762vyisg.js:12:19)\n    at median (/tmp/tmp762vyisg.js:12:19)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334813
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length % 2 === 0) {\n    return l[Math.floor(l.length / 2)];\n  }\n  const middle = Math.floor(l.length / 2);\n  const left = l.slice(0, middle);\n  const right = l.slice(middle);\n  return median(left) + median(right);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpexfwf0i3.js:11\n    const left = l.slice(0, middle);\n                   ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmpexfwf0i3.js:11:20)\n    at median (/tmp/tmpexfwf0i3.js:13:27)\n    at median (/tmp/tmpexfwf0i3.js:13:27)\n    at median (/tmp/tmpexfwf0i3.js:13:27)\n    at median (/tmp/tmpexfwf0i3.js:13:27)\n    at median (/tmp/tmpexfwf0i3.js:13:27)\n    at median (/tmp/tmpexfwf0i3.js:13:27)\n    at median (/tmp/tmpexfwf0i3.js:13:27)\n    at median (/tmp/tmpexfwf0i3.js:13:27)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334813
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const mid = l.length / 2;\n  const sorted = l.slice().sort((a, b) => a - b);\n  if (sorted.length % 2 === 0) {\n    return sorted[mid];\n  }\n  return sorted[mid] + (sorted[mid + 1] - sorted[mid]) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmp_oym7vfj.js:20:12)\n    at Object.<anonymous> (/tmp/tmp_oym7vfj.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334813
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  const n = l.length;\n  if (n < 2) {\n    return l[0];\n  }\n  const mid = Math.floor(n / 2);\n  const left = l.slice(0, mid);\n  const right = l.slice(mid);\n  return median(left) + median(right);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpz7v_s4yi.js:19:12)\n    at Object.<anonymous> (/tmp/tmpz7v_s4yi.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334805
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const sorted = l.slice().sort((a, b) => a - b);\n  const len = sorted.length;\n  if (len % 2 === 0) {\n    return sorted[len / 2 - 1];\n  }\n  const middle = Math.floor(len / 2);\n  return sorted[middle];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n6\n\nshould loosely deep-equal\n\n8\n    at test (/tmp/tmp64qgv_xo.js:22:12)\n    at Object.<anonymous> (/tmp/tmp64qgv_xo.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 6,\n  expected: 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334810
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error('Cannot compute median of an empty array');\n  }\n  const sorted = l.slice().sort((a, b) => a - b);\n  const len = sorted.length;\n  if (len % 2 === 0) {\n    return sorted[len / 2 - 1];\n  }\n  const middle = Math.floor(len / 2);\n  const median1 = sorted[middle];\n  const median2 = sorted[middle + 1];\n  return (median1 + median2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3.5\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpvy0044xy.js:23:12)\n    at Object.<anonymous> (/tmp/tmpvy0044xy.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3.5,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334813
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty array\");\n  }\n  if (l.length === 1) {\n    return l[0];\n  }\n  const middle = l.length / 2;\n  const left = l.slice(0, middle);\n  const right = l.slice(middle);\n  return median(left) + median(right);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpn6wz692u.js:21:12)\n    at Object.<anonymous> (/tmp/tmpn6wz692u.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334813
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error('Cannot compute median of an empty array');\n  }\n  const n = l.length;\n  if (n % 2 === 0) {\n    return l[Math.floor(n / 2)];\n  }\n  const half = n / 2;\n  const left = median(l.slice(0, half));\n  const right = median(l.slice(half));\n  return (left + right) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpq53h33hk.js:8\n        throw new Error('Cannot compute median of an empty array');\n        ^\n\nError: Cannot compute median of an empty array\n    at median (/tmp/tmpq53h33hk.js:8:15)\n    at median (/tmp/tmpq53h33hk.js:15:18)\n    at median (/tmp/tmpq53h33hk.js:15:18)\n    at median (/tmp/tmpq53h33hk.js:16:19)\n    at test (/tmp/tmpq53h33hk.js:22:22)\n    at Object.<anonymous> (/tmp/tmpq53h33hk.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334802
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length % 2 === 0) {\n    return l[(l.length / 2) - 1];\n  }\n  const mid = l.length / 2;\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return left + right;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmp762vyisg.js:11\n    const left = median(l.slice(0, mid));\n                          ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmp762vyisg.js:11:27)\n    at median (/tmp/tmp762vyisg.js:12:19)\n    at median (/tmp/tmp762vyisg.js:12:19)\n    at median (/tmp/tmp762vyisg.js:12:19)\n    at median (/tmp/tmp762vyisg.js:12:19)\n    at median (/tmp/tmp762vyisg.js:12:19)\n    at median (/tmp/tmp762vyisg.js:12:19)\n    at median (/tmp/tmp762vyisg.js:12:19)\n    at median (/tmp/tmp762vyisg.js:12:19)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334813
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty array\");\n  }\n  const n = l.length;\n  if (n % 2 === 0) {\n    return l[Math.floor(n / 2)];\n  }\n  const half = n / 2;\n  const left = median(l.slice(0, half));\n  const right = median(l.slice(half));\n  return left + right;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpb1dy19vy.js:8\n        throw new Error(\"Cannot calculate median of an empty array\");\n        ^\n\nError: Cannot calculate median of an empty array\n    at median (/tmp/tmpb1dy19vy.js:8:15)\n    at median (/tmp/tmpb1dy19vy.js:15:18)\n    at median (/tmp/tmpb1dy19vy.js:15:18)\n    at median (/tmp/tmpb1dy19vy.js:16:19)\n    at test (/tmp/tmpb1dy19vy.js:22:22)\n    at Object.<anonymous> (/tmp/tmpb1dy19vy.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334802
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const n = l.length;\n  if (n % 2 === 0) {\n    return l[Math.floor(n / 2)];\n  }\n  const half = n / 2;\n  const left = median(l.slice(0, half));\n  const right = median(l.slice(half));\n  return (left + right) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmp9yynm9n8.js:15\n    const left = median(l.slice(0, half));\n                          ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmp9yynm9n8.js:15:27)\n    at median (/tmp/tmp9yynm9n8.js:16:19)\n    at median (/tmp/tmp9yynm9n8.js:16:19)\n    at median (/tmp/tmp9yynm9n8.js:16:19)\n    at median (/tmp/tmp9yynm9n8.js:16:19)\n    at median (/tmp/tmp9yynm9n8.js:16:19)\n    at median (/tmp/tmp9yynm9n8.js:16:19)\n    at median (/tmp/tmp9yynm9n8.js:16:19)\n    at median (/tmp/tmp9yynm9n8.js:16:19)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334798
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length % 2 === 0) {\n    return l[l.length / 2 - 1]\n  }\n  const mid = l.length / 2\n  const left = l.slice(0, mid)\n  const right = l.slice(mid)\n  return median(left) + median(right)\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpt7zicu5p.js:11\n    const left = l.slice(0, mid);\n                   ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmpt7zicu5p.js:11:20)\n    at median (/tmp/tmpt7zicu5p.js:13:27)\n    at median (/tmp/tmpt7zicu5p.js:13:27)\n    at median (/tmp/tmpt7zicu5p.js:13:27)\n    at median (/tmp/tmpt7zicu5p.js:13:27)\n    at median (/tmp/tmpt7zicu5p.js:13:27)\n    at median (/tmp/tmpt7zicu5p.js:13:27)\n    at median (/tmp/tmpt7zicu5p.js:13:27)\n    at median (/tmp/tmpt7zicu5p.js:13:27)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334798
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const n = l.length;\n  if (n % 2 === 0) {\n    return l[Math.floor(n / 2)];\n  }\n  const half = Math.floor(n / 2);\n  const left = median(l.slice(0, half));\n  const right = median(l.slice(half));\n  return (left + right) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmps051_ujh.js:15\n    const left = median(l.slice(0, half));\n                          ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmps051_ujh.js:15:27)\n    at median (/tmp/tmps051_ujh.js:16:19)\n    at median (/tmp/tmps051_ujh.js:16:19)\n    at median (/tmp/tmps051_ujh.js:16:19)\n    at median (/tmp/tmps051_ujh.js:16:19)\n    at median (/tmp/tmps051_ujh.js:16:19)\n    at median (/tmp/tmps051_ujh.js:16:19)\n    at median (/tmp/tmps051_ujh.js:16:19)\n    at median (/tmp/tmps051_ujh.js:16:19)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334813
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const mid = l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return ((left + right) / 2) | 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmps79282p9.js:14\n    const left = median(l.slice(0, mid));\n                          ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmps79282p9.js:14:27)\n    at median (/tmp/tmps79282p9.js:15:19)\n    at median (/tmp/tmps79282p9.js:15:19)\n    at median (/tmp/tmps79282p9.js:15:19)\n    at median (/tmp/tmps79282p9.js:15:19)\n    at median (/tmp/tmps79282p9.js:15:19)\n    at median (/tmp/tmps79282p9.js:15:19)\n    at median (/tmp/tmps79282p9.js:15:19)\n    at median (/tmp/tmps79282p9.js:15:19)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334812
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty array\");\n  }\n  if (l.length === 1) {\n    return l[0];\n  }\n  const mid = Math.floor(l.length / 2);\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return ((left + right) / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2.625\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpknw0zzna.js:21:12)\n    at Object.<anonymous> (/tmp/tmpknw0zzna.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2.625,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334813
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const n = l.length;\n  if (n % 2 === 0) {\n    return l[Math.floor(n / 2)];\n  }\n  const half = n / 2;\n  const left = median(l.slice(0, half));\n  const right = median(l.slice(half));\n  return ((left as number) * (right as number)) / ((left + right) as number);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpqt5y3dto.js:15\n    const left = median(l.slice(0, half));\n                          ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmpqt5y3dto.js:15:27)\n    at median (/tmp/tmpqt5y3dto.js:16:19)\n    at median (/tmp/tmpqt5y3dto.js:16:19)\n    at median (/tmp/tmpqt5y3dto.js:16:19)\n    at median (/tmp/tmpqt5y3dto.js:16:19)\n    at median (/tmp/tmpqt5y3dto.js:16:19)\n    at median (/tmp/tmpqt5y3dto.js:16:19)\n    at median (/tmp/tmpqt5y3dto.js:16:19)\n    at median (/tmp/tmpqt5y3dto.js:16:19)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334813
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty array\");\n  }\n  const n = l.length;\n  if (n % 2 === 0) {\n    return l[Math.floor(n / 2)];\n  }\n  const half = n / 2;\n  const left = median(l.slice(0, half));\n  const right = median(l.slice(half));\n  return left + right;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpb1dy19vy.js:8\n        throw new Error(\"Cannot calculate median of an empty array\");\n        ^\n\nError: Cannot calculate median of an empty array\n    at median (/tmp/tmpb1dy19vy.js:8:15)\n    at median (/tmp/tmpb1dy19vy.js:15:18)\n    at median (/tmp/tmpb1dy19vy.js:15:18)\n    at median (/tmp/tmpb1dy19vy.js:16:19)\n    at test (/tmp/tmpb1dy19vy.js:22:22)\n    at Object.<anonymous> (/tmp/tmpb1dy19vy.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334802
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const mid = l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return ((left + right) / 2) | 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmps79282p9.js:14\n    const left = median(l.slice(0, mid));\n                          ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmps79282p9.js:14:27)\n    at median (/tmp/tmps79282p9.js:15:19)\n    at median (/tmp/tmps79282p9.js:15:19)\n    at median (/tmp/tmps79282p9.js:15:19)\n    at median (/tmp/tmps79282p9.js:15:19)\n    at median (/tmp/tmps79282p9.js:15:19)\n    at median (/tmp/tmps79282p9.js:15:19)\n    at median (/tmp/tmps79282p9.js:15:19)\n    at median (/tmp/tmps79282p9.js:15:19)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334812
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length % 2 === 0) {\n    return l[Math.floor(l.length / 2)];\n  }\n  const mid = l.length / 2 - 1;\n  const left = l.slice(0, mid);\n  const right = l.slice(mid);\n  return median(left) + median(right);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpxgh98_44.js:11\n    const left = l.slice(0, mid);\n                   ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmpxgh98_44.js:11:20)\n    at median (/tmp/tmpxgh98_44.js:13:27)\n    at median (/tmp/tmpxgh98_44.js:13:27)\n    at median (/tmp/tmpxgh98_44.js:13:27)\n    at median (/tmp/tmpxgh98_44.js:13:27)\n    at median (/tmp/tmpxgh98_44.js:13:27)\n    at median (/tmp/tmpxgh98_44.js:13:27)\n    at median (/tmp/tmpxgh98_44.js:13:27)\n    at median (/tmp/tmpxgh98_44.js:13:27)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334802
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty array\");\n  }\n  const n = l.length;\n  if (n % 2 === 0) {\n    return l[Math.floor(n / 2)];\n  }\n  const half = n / 2;\n  const left = median(l.slice(0, half));\n  const right = median(l.slice(half));\n  return (left + right) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmph0tm5bn8.js:8\n        throw new Error(\"Cannot calculate median of an empty array\");\n        ^\n\nError: Cannot calculate median of an empty array\n    at median (/tmp/tmph0tm5bn8.js:8:15)\n    at median (/tmp/tmph0tm5bn8.js:15:18)\n    at median (/tmp/tmph0tm5bn8.js:15:18)\n    at median (/tmp/tmph0tm5bn8.js:16:19)\n    at test (/tmp/tmph0tm5bn8.js:22:22)\n    at Object.<anonymous> (/tmp/tmph0tm5bn8.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334802
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty array\");\n  }\n  const mid = l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return ((left + right) / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmp3kn6dl15.js:8\n        throw new Error(\"Cannot calculate median of an empty array\");\n        ^\n\nError: Cannot calculate median of an empty array\n    at median (/tmp/tmp3kn6dl15.js:8:15)\n    at median (/tmp/tmp3kn6dl15.js:14:18)\n    at median (/tmp/tmp3kn6dl15.js:14:18)\n    at median (/tmp/tmp3kn6dl15.js:15:19)\n    at test (/tmp/tmp3kn6dl15.js:21:22)\n    at Object.<anonymous> (/tmp/tmp3kn6dl15.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334798
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const n = l.length;\n  if (n % 2 === 0) {\n    return l[Math.floor(n / 2)];\n  }\n  const mid = Math.floor(n / 2);\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return ((left + right) / 2) | 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpomdr0mwh.js:15\n    const left = median(l.slice(0, mid));\n                          ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmpomdr0mwh.js:15:27)\n    at median (/tmp/tmpomdr0mwh.js:16:19)\n    at median (/tmp/tmpomdr0mwh.js:16:19)\n    at median (/tmp/tmpomdr0mwh.js:16:19)\n    at median (/tmp/tmpomdr0mwh.js:16:19)\n    at median (/tmp/tmpomdr0mwh.js:16:19)\n    at median (/tmp/tmpomdr0mwh.js:16:19)\n    at median (/tmp/tmpomdr0mwh.js:16:19)\n    at median (/tmp/tmpomdr0mwh.js:16:19)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334806
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty array\");\n  }\n  l.sort((a, b) => a - b);\n  const mid = l.length / 2;\n  return l[mid];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpj45wb_22.js:17:12)\n    at Object.<anonymous> (/tmp/tmpj45wb_22.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334813
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const n = l.length;\n  if (n % 2 === 0) {\n    return l[Math.floor(n / 2)];\n  }\n  const mid = Math.floor(n / 2);\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return ((left + right) / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpu5ihsg5g.js:15\n    const left = median(l.slice(0, mid));\n                          ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmpu5ihsg5g.js:15:27)\n    at median (/tmp/tmpu5ihsg5g.js:16:19)\n    at median (/tmp/tmpu5ihsg5g.js:16:19)\n    at median (/tmp/tmpu5ihsg5g.js:16:19)\n    at median (/tmp/tmpu5ihsg5g.js:16:19)\n    at median (/tmp/tmpu5ihsg5g.js:16:19)\n    at median (/tmp/tmpu5ihsg5g.js:16:19)\n    at median (/tmp/tmpu5ihsg5g.js:16:19)\n    at median (/tmp/tmpu5ihsg5g.js:16:19)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334813
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot compute median of an empty array\");\n  }\n  const n = l.length;\n  if (n % 2 === 0) {\n    return l[Math.floor(n / 2)];\n  }\n  const half = n / 2;\n  const left = median(l.slice(0, half));\n  const right = median(l.slice(half));\n  return left + right;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpwhrlk_b7.js:8\n        throw new Error(\"Cannot compute median of an empty array\");\n        ^\n\nError: Cannot compute median of an empty array\n    at median (/tmp/tmpwhrlk_b7.js:8:15)\n    at median (/tmp/tmpwhrlk_b7.js:15:18)\n    at median (/tmp/tmpwhrlk_b7.js:15:18)\n    at median (/tmp/tmpwhrlk_b7.js:16:19)\n    at test (/tmp/tmpwhrlk_b7.js:22:22)\n    at Object.<anonymous> (/tmp/tmpwhrlk_b7.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334798
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length % 2 === 0) {\n    return l[Math.floor(l.length / 2)];\n  }\n  const mid = l.length / 2 - 1;\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return left + right;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmp2t3wfvy5.js:11\n    const left = median(l.slice(0, mid));\n                          ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmp2t3wfvy5.js:11:27)\n    at median (/tmp/tmp2t3wfvy5.js:12:19)\n    at median (/tmp/tmp2t3wfvy5.js:12:19)\n    at median (/tmp/tmp2t3wfvy5.js:12:19)\n    at median (/tmp/tmp2t3wfvy5.js:12:19)\n    at median (/tmp/tmp2t3wfvy5.js:12:19)\n    at median (/tmp/tmp2t3wfvy5.js:12:19)\n    at median (/tmp/tmp2t3wfvy5.js:12:19)\n    at median (/tmp/tmp2t3wfvy5.js:12:19)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334806
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const mid = l.length / 2;\n  const left = l.slice(0, mid);\n  const right = l.slice(mid);\n  return median(left) + median(right);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpgkyfndrg.js:11\n    const left = l.slice(0, mid);\n                   ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmpgkyfndrg.js:11:20)\n    at median (/tmp/tmpgkyfndrg.js:13:27)\n    at median (/tmp/tmpgkyfndrg.js:13:27)\n    at median (/tmp/tmpgkyfndrg.js:13:27)\n    at median (/tmp/tmpgkyfndrg.js:13:27)\n    at median (/tmp/tmpgkyfndrg.js:13:27)\n    at median (/tmp/tmpgkyfndrg.js:13:27)\n    at median (/tmp/tmpgkyfndrg.js:13:27)\n    at median (/tmp/tmpgkyfndrg.js:13:27)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334798
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length % 2 === 0) {\n    return l[Math.floor(l.length / 2)];\n  }\n  const mid = l.length / 2 - 1;\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return left + right;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmp2t3wfvy5.js:11\n    const left = median(l.slice(0, mid));\n                          ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmp2t3wfvy5.js:11:27)\n    at median (/tmp/tmp2t3wfvy5.js:12:19)\n    at median (/tmp/tmp2t3wfvy5.js:12:19)\n    at median (/tmp/tmp2t3wfvy5.js:12:19)\n    at median (/tmp/tmp2t3wfvy5.js:12:19)\n    at median (/tmp/tmp2t3wfvy5.js:12:19)\n    at median (/tmp/tmp2t3wfvy5.js:12:19)\n    at median (/tmp/tmp2t3wfvy5.js:12:19)\n    at median (/tmp/tmp2t3wfvy5.js:12:19)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334806
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length % 2 === 0) {\n    return l[Math.floor(l.length / 2)];\n  }\n  const middle = l.length / 2;\n  const left = l.slice(0, middle);\n  const right = l.slice(middle);\n  return median(left) + median(right);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpew4b4ssj.js:11\n    const left = l.slice(0, middle);\n                   ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmpew4b4ssj.js:11:20)\n    at median (/tmp/tmpew4b4ssj.js:13:27)\n    at median (/tmp/tmpew4b4ssj.js:13:27)\n    at median (/tmp/tmpew4b4ssj.js:13:27)\n    at median (/tmp/tmpew4b4ssj.js:13:27)\n    at median (/tmp/tmpew4b4ssj.js:13:27)\n    at median (/tmp/tmpew4b4ssj.js:13:27)\n    at median (/tmp/tmpew4b4ssj.js:13:27)\n    at median (/tmp/tmpew4b4ssj.js:13:27)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334806
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const mid = l.length / 2;\n  const left = l.slice(0, mid);\n  const right = l.slice(mid);\n  return median(left) + median(right);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpgkyfndrg.js:11\n    const left = l.slice(0, mid);\n                   ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmpgkyfndrg.js:11:20)\n    at median (/tmp/tmpgkyfndrg.js:13:27)\n    at median (/tmp/tmpgkyfndrg.js:13:27)\n    at median (/tmp/tmpgkyfndrg.js:13:27)\n    at median (/tmp/tmpgkyfndrg.js:13:27)\n    at median (/tmp/tmpgkyfndrg.js:13:27)\n    at median (/tmp/tmpgkyfndrg.js:13:27)\n    at median (/tmp/tmpgkyfndrg.js:13:27)\n    at median (/tmp/tmpgkyfndrg.js:13:27)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334798
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const sorted = l.slice().sort((a, b) => a - b);\n  const len = sorted.length;\n  if (len % 2 === 0) {\n    return sorted[(len - 1) / 2];\n  }\n  const middle = Math.floor(len / 2);\n  const median1 = sorted[middle];\n  const median2 = sorted[middle + 1];\n  return (median1 + median2) / 2.0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3.5\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmp6n6nh3nv.js:23:12)\n    at Object.<anonymous> (/tmp/tmp6n6nh3nv.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3.5,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334813
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty array\");\n  }\n  const mid = l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return ((left + right) / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmp3kn6dl15.js:8\n        throw new Error(\"Cannot calculate median of an empty array\");\n        ^\n\nError: Cannot calculate median of an empty array\n    at median (/tmp/tmp3kn6dl15.js:8:15)\n    at median (/tmp/tmp3kn6dl15.js:14:18)\n    at median (/tmp/tmp3kn6dl15.js:14:18)\n    at median (/tmp/tmp3kn6dl15.js:15:19)\n    at test (/tmp/tmp3kn6dl15.js:21:22)\n    at Object.<anonymous> (/tmp/tmp3kn6dl15.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334798
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length <= 1) {\n    return l[0];\n  }\n  const mid = l.length / 2;\n  const left = l.slice(0, mid);\n  const right = l.slice(mid);\n  return median(left) + median(right);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpnje232ml.js:18:12)\n    at Object.<anonymous> (/tmp/tmpnje232ml.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334813
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty array\");\n  }\n  const mid = l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return ((left + right) / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmp3kn6dl15.js:8\n        throw new Error(\"Cannot calculate median of an empty array\");\n        ^\n\nError: Cannot calculate median of an empty array\n    at median (/tmp/tmp3kn6dl15.js:8:15)\n    at median (/tmp/tmp3kn6dl15.js:14:18)\n    at median (/tmp/tmp3kn6dl15.js:14:18)\n    at median (/tmp/tmp3kn6dl15.js:15:19)\n    at test (/tmp/tmp3kn6dl15.js:21:22)\n    at Object.<anonymous> (/tmp/tmp3kn6dl15.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334798
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw Error('Cannot compute median of an empty array');\n  }\n  const n = l.length;\n  if (n % 2 === 0) {\n    return l[Math.floor(n / 2)];\n  }\n  const half = n / 2;\n  const left = median(l.slice(0, half));\n  const right = median(l.slice(half));\n  return (left + right) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmp3hk1gzw6.js:8\n        throw Error('Cannot compute median of an empty array');\n        ^\n\nError: Cannot compute median of an empty array\n    at median (/tmp/tmp3hk1gzw6.js:8:15)\n    at median (/tmp/tmp3hk1gzw6.js:15:18)\n    at median (/tmp/tmp3hk1gzw6.js:15:18)\n    at median (/tmp/tmp3hk1gzw6.js:16:19)\n    at test (/tmp/tmp3hk1gzw6.js:22:22)\n    at Object.<anonymous> (/tmp/tmp3hk1gzw6.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334802
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty array\");\n  }\n  const mid = Math.floor(l.length / 2);\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return ((left + right) / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmp_4nfcg3s.js:8\n        throw new Error(\"Cannot calculate median of an empty array\");\n        ^\n\nError: Cannot calculate median of an empty array\n    at median (/tmp/tmp_4nfcg3s.js:8:15)\n    at median (/tmp/tmp_4nfcg3s.js:14:18)\n    at median (/tmp/tmp_4nfcg3s.js:14:18)\n    at median (/tmp/tmp_4nfcg3s.js:15:19)\n    at test (/tmp/tmp_4nfcg3s.js:21:22)\n    at Object.<anonymous> (/tmp/tmp_4nfcg3s.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334813
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty array\");\n  }\n  const n = l.length;\n  if (n % 2 === 0) {\n    return l[Math.floor(n / 2)];\n  }\n  const half = n / 2;\n  const left = median(l.slice(0, half));\n  const right = median(l.slice(half));\n  return (left + right) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmph0tm5bn8.js:8\n        throw new Error(\"Cannot calculate median of an empty array\");\n        ^\n\nError: Cannot calculate median of an empty array\n    at median (/tmp/tmph0tm5bn8.js:8:15)\n    at median (/tmp/tmph0tm5bn8.js:15:18)\n    at median (/tmp/tmph0tm5bn8.js:15:18)\n    at median (/tmp/tmph0tm5bn8.js:16:19)\n    at test (/tmp/tmph0tm5bn8.js:22:22)\n    at Object.<anonymous> (/tmp/tmph0tm5bn8.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334802
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty array\");\n  }\n  const middle = l.length / 2;\n  if (middle === 0) {\n    return l[middle];\n  }\n  if (middle === 1) {\n    return l[0];\n  }\n  const medianValue = l[middle];\n  const leftMedian = median(l);\n  const rightMedian = median(l.slice(middle + 1));\n  return medianValue + ((leftMedian + rightMedian) / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmp57zv0813.js:7\n    if (l.length === 0) {\n          ^\n\nRangeError: Maximum call stack size exceeded\n    at median (/tmp/tmp57zv0813.js:7:11)\n    at median (/tmp/tmp57zv0813.js:18:24)\n    at median (/tmp/tmp57zv0813.js:18:24)\n    at median (/tmp/tmp57zv0813.js:18:24)\n    at median (/tmp/tmp57zv0813.js:18:24)\n    at median (/tmp/tmp57zv0813.js:18:24)\n    at median (/tmp/tmp57zv0813.js:18:24)\n    at median (/tmp/tmp57zv0813.js:18:24)\n    at median (/tmp/tmp57zv0813.js:18:24)\n    at median (/tmp/tmp57zv0813.js:18:24)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334813
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty array\");\n  }\n  l.sort((a, b) => a - b);\n  const mid = l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  return (l[mid] + l[mid-1]) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmp2ckym2vq.js:20:12)\n    at Object.<anonymous> (/tmp/tmp2ckym2vq.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334802
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty array\");\n  }\n  const n = l.length;\n  if (n % 2 === 0) {\n    return l[Math.floor(n / 2)];\n  }\n  const half = n / 2;\n  const left = median(l.slice(0, half));\n  const right = median(l.slice(half));\n  return ((left + right) / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpxa2onwl2.js:8\n        throw new Error(\"Cannot calculate median of an empty array\");\n        ^\n\nError: Cannot calculate median of an empty array\n    at median (/tmp/tmpxa2onwl2.js:8:15)\n    at median (/tmp/tmpxa2onwl2.js:15:18)\n    at median (/tmp/tmpxa2onwl2.js:15:18)\n    at median (/tmp/tmpxa2onwl2.js:16:19)\n    at test (/tmp/tmpxa2onwl2.js:22:22)\n    at Object.<anonymous> (/tmp/tmpxa2onwl2.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334813
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  const n = l.length;\n  if (n < 2) {\n    return l[0];\n  }\n  const mid = Math.floor(n / 2);\n  const left = l.slice(0, mid);\n  const right = l.slice(mid);\n  return median(left) + median(right);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpz7v_s4yi.js:19:12)\n    at Object.<anonymous> (/tmp/tmpz7v_s4yi.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334805
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty array\");\n  }\n  const mid = l.length / 2;\n  if (mid % 1 !== 0) {\n    throw new Error(\"Cannot calculate median of an array of uneven length\");\n  }\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  const median1 = median(l.slice(0, mid));\n  const median2 = median(l.slice(mid));\n  return median1 + median2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmp3sp6f3r4.js:12\n        throw new Error(\"Cannot calculate median of an array of uneven length\");\n        ^\n\nError: Cannot calculate median of an array of uneven length\n    at median (/tmp/tmp3sp6f3r4.js:12:15)\n    at test (/tmp/tmp3sp6f3r4.js:24:22)\n    at Object.<anonymous> (/tmp/tmp3sp6f3r4.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334814
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty array\");\n  }\n  l.sort((a, b) => a - b);\n  const mid = l.length / 2;\n  if (mid % 1 !== 0) {\n    return l[mid];\n  }\n  const lower = l[mid];\n  const upper = l[mid + 1];\n  return lower + Math.ceil((upper - lower) / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmp04fhkhcu.js:22:12)\n    at Object.<anonymous> (/tmp/tmp04fhkhcu.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334814
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length % 2 === 0) {\n    return l[(l.length / 2) - 1];\n  }\n  const mid = l.length / 2;\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return ((left + right) / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpbhw0dgyo.js:11\n    const left = median(l.slice(0, mid));\n                          ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmpbhw0dgyo.js:11:27)\n    at median (/tmp/tmpbhw0dgyo.js:12:19)\n    at median (/tmp/tmpbhw0dgyo.js:12:19)\n    at median (/tmp/tmpbhw0dgyo.js:12:19)\n    at median (/tmp/tmpbhw0dgyo.js:12:19)\n    at median (/tmp/tmpbhw0dgyo.js:12:19)\n    at median (/tmp/tmpbhw0dgyo.js:12:19)\n    at median (/tmp/tmpbhw0dgyo.js:12:19)\n    at median (/tmp/tmpbhw0dgyo.js:12:19)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334814
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty array\");\n  }\n  const mid = l.length / 2;\n  const sorted = l.slice().sort((a, b) => a - b);\n  if (sorted.length % 2 === 0) {\n    return sorted[mid];\n  }\n  return sorted[mid] + sorted[mid-1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpkwx3743f.js:20:12)\n    at Object.<anonymous> (/tmp/tmpkwx3743f.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334814
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length % 2 === 0) {\n    const mid = l.length / 2;\n    const left = l.slice(0, mid);\n    const right = l.slice(mid);\n    return median(left) + median(right);\n  }\n  return Math.ceil(l.length / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n8\n    at test (/tmp/tmpmmn_m3qw.js:19:12)\n    at Object.<anonymous> (/tmp/tmpmmn_m3qw.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334809
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty array\");\n  }\n  const n = l.length;\n  if (n % 2 === 0) {\n    return l[Math.floor(n / 2)];\n  }\n  const half = n / 2;\n  const left = median(l.slice(0, half));\n  const right = median(l.slice(half));\n  return (left + right) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmph0tm5bn8.js:8\n        throw new Error(\"Cannot calculate median of an empty array\");\n        ^\n\nError: Cannot calculate median of an empty array\n    at median (/tmp/tmph0tm5bn8.js:8:15)\n    at median (/tmp/tmph0tm5bn8.js:15:18)\n    at median (/tmp/tmph0tm5bn8.js:15:18)\n    at median (/tmp/tmph0tm5bn8.js:16:19)\n    at test (/tmp/tmph0tm5bn8.js:22:22)\n    at Object.<anonymous> (/tmp/tmph0tm5bn8.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334802
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty array\");\n  }\n  const sortedArray = l.slice().sort((a, b) => a - b);\n  const middle = Math.floor(sortedArray.length / 2);\n  if (sortedArray.length % 2) {\n    return sortedArray[middle];\n  }\n  return sortedArray[middle - 1] + sortedArray[middle];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n16\n\nshould loosely deep-equal\n\n8\n    at test (/tmp/tmpt9hbi3gc.js:21:12)\n    at Object.<anonymous> (/tmp/tmpt9hbi3gc.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 16,\n  expected: 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334814
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length % 2 === 0) {\n    return l[Math.floor(l.length / 2)];\n  }\n  const mid = l.length / 2;\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return left + Math.abs(right - left) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpy5nawmbi.js:11\n    const left = median(l.slice(0, mid));\n                          ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmpy5nawmbi.js:11:27)\n    at median (/tmp/tmpy5nawmbi.js:12:19)\n    at median (/tmp/tmpy5nawmbi.js:12:19)\n    at median (/tmp/tmpy5nawmbi.js:12:19)\n    at median (/tmp/tmpy5nawmbi.js:12:19)\n    at median (/tmp/tmpy5nawmbi.js:12:19)\n    at median (/tmp/tmpy5nawmbi.js:12:19)\n    at median (/tmp/tmpy5nawmbi.js:12:19)\n    at median (/tmp/tmpy5nawmbi.js:12:19)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334815
    },
    {
      "exit_code": 2,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty array\");\n  }\n  const n = l.length;\n  if (n === 1) {\n    return l[0];\n  }\n  const half = Math.floor(n / 2);\n  if (n % 2) {\n    return median(l[half]) < median(l[half - 1]) ? l[half] : l[half - 1];\n  }\n  return median(l[half]);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpclz8yaa6.ts(16,19): error TS2345: Argument of type 'number' is not assignable to parameter of type 'number[]'.\n../../../../tmp/tmpclz8yaa6.ts(16,37): error TS2345: Argument of type 'number' is not assignable to parameter of type 'number[]'.\n../../../../tmp/tmpclz8yaa6.ts(18,17): error TS2345: Argument of type 'number' is not assignable to parameter of type 'number[]'.\n",
      "timestamp": 1660334814
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const n = l.length;\n  if (n % 2 === 0) {\n    return l[Math.floor(n / 2)];\n  }\n  const half = n / 2;\n  const left = median(l.slice(0, half));\n  const right = median(l.slice(half));\n  return (left + right) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmp9yynm9n8.js:15\n    const left = median(l.slice(0, half));\n                          ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmp9yynm9n8.js:15:27)\n    at median (/tmp/tmp9yynm9n8.js:16:19)\n    at median (/tmp/tmp9yynm9n8.js:16:19)\n    at median (/tmp/tmp9yynm9n8.js:16:19)\n    at median (/tmp/tmp9yynm9n8.js:16:19)\n    at median (/tmp/tmp9yynm9n8.js:16:19)\n    at median (/tmp/tmp9yynm9n8.js:16:19)\n    at median (/tmp/tmp9yynm9n8.js:16:19)\n    at median (/tmp/tmp9yynm9n8.js:16:19)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334798
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length % 2 === 0) {\n    return l[Math.floor(l.length / 2)];\n  }\n  const mid = l.length / 2 - 1;\n  const left = l.slice(0, mid);\n  const right = l.slice(mid);\n  return median(left) + median(right);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpxgh98_44.js:11\n    const left = l.slice(0, mid);\n                   ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmpxgh98_44.js:11:20)\n    at median (/tmp/tmpxgh98_44.js:13:27)\n    at median (/tmp/tmpxgh98_44.js:13:27)\n    at median (/tmp/tmpxgh98_44.js:13:27)\n    at median (/tmp/tmpxgh98_44.js:13:27)\n    at median (/tmp/tmpxgh98_44.js:13:27)\n    at median (/tmp/tmpxgh98_44.js:13:27)\n    at median (/tmp/tmpxgh98_44.js:13:27)\n    at median (/tmp/tmpxgh98_44.js:13:27)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334802
    }
  ]
}