name: HumanEval_9_rolling_max
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // From a given list of integers, generate a list of rolling\
  \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
  \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l,\
  \ (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
  \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
  \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(rollingMax((new\
  \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
  \    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
  \ (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
  \ (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
  \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
  \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
  \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
  \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
completions: ["        ArrayList<Long> result = new ArrayList<Long>();\n        long\
    \ max = Long.MIN_VALUE;\n        for (long n : numbers) {\n            if (n >\
    \ max) {\n                max = n;\n            }\n            result.add(max);\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long max = numbers.get(0);\n        result.add(max);\n        for (int\
    \ i = 1; i < numbers.size(); i++) {\n            if (numbers.get(i) > max) {\n\
    \                max = numbers.get(i);\n            }\n            result.add(max);\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long max = numbers.get(0);\n        result.add(max);\n        for (int\
    \ i = 1; i < numbers.size(); i++) {\n            if (numbers.get(i) > max) {\n\
    \                max = numbers.get(i);\n            }\n            result.add(max);\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long max = numbers.get(0);\n        result.add(max);\n        for (int\
    \ i = 1; i < numbers.size(); i++) {\n            if (numbers.get(i) > max) {\n\
    \                max = numbers.get(i);\n            }\n            result.add(max);\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long max = numbers.get(0);\n        result.add(max);\n        for (int\
    \ i = 1; i < numbers.size(); i++) {\n            long current = numbers.get(i);\n\
    \            if (current > max) {\n                max = current;\n          \
    \  }\n            result.add(max);\n        }\n        return result;", "    \
    \    ArrayList<Long> result = new ArrayList<Long>();\n        long max = 0;\n\
    \        for (int i = 0; i < numbers.size(); i++) {\n            if (numbers.get(i)\
    \ > max) {\n                max = numbers.get(i);\n            }\n           \
    \ result.add(max);\n        }\n        return result;", "        ArrayList<Long>\
    \ maxes = new ArrayList<Long>();\n        long max = numbers.get(0);\n       \
    \ for (int i = 0; i < numbers.size(); i++) {\n            if (numbers.get(i) >\
    \ max) {\n                max = numbers.get(i);\n            }\n            maxes.add(max);\n\
    \        }\n        return maxes;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long max = numbers.get(0);\n        result.add(max);\n        for (int\
    \ i = 1; i < numbers.size(); i++) {\n            long current = numbers.get(i);\n\
    \            if (current > max) {\n                max = current;\n          \
    \  }\n            result.add(max);\n        }\n        return result;", "    \
    \    ArrayList<Long> result = new ArrayList<Long>();\n        Long max = numbers.get(0);\n\
    \        result.add(max);\n        for (int i = 1; i < numbers.size(); i++) {\n\
    \            Long current = numbers.get(i);\n            if (current > max) {\n\
    \                max = current;\n            }\n            result.add(max);\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        result.add(numbers.get(0));\n        for (int i = 1; i < numbers.size();\
    \ i++) {\n            result.add(Math.max(result.get(i - 1), numbers.get(i)));\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long max = numbers.get(0);\n        result.add(max);\n        for (int\
    \ i = 1; i < numbers.size(); i++) {\n            long current = numbers.get(i);\n\
    \            if (current > max) {\n                max = current;\n          \
    \  }\n            result.add(max);\n        }\n        return result;", "    \
    \    ArrayList<Long> result = new ArrayList<Long>();\n        long max = numbers.get(0);\n\
    \        result.add(max);\n        for (int i = 1; i < numbers.size(); i++) {\n\
    \            long current = numbers.get(i);\n            if (current > max) {\n\
    \                max = current;\n            }\n            result.add(max);\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long max = numbers.get(0);\n        result.add(max);\n        for (int\
    \ i = 1; i < numbers.size(); i++) {\n            if (numbers.get(i) > max) {\n\
    \                max = numbers.get(i);\n            }\n            result.add(max);\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long max = numbers.get(0);\n        result.add(max);\n        for (int\
    \ i = 1; i < numbers.size(); i++) {\n            long current = numbers.get(i);\n\
    \            if (current > max) {\n                max = current;\n          \
    \  }\n            result.add(max);\n        }\n        return result;", "    \
    \    ArrayList<Long> result = new ArrayList<Long>();\n        long max = 0l;\n\
    \        for (int i = 0; i < numbers.size(); i++) {\n            max = Math.max(max,\
    \ numbers.get(i));\n            result.add(max);\n        }\n        return result;",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        long max = numbers.get(0);\n\
    \        result.add(max);\n        for (int i = 1; i < numbers.size(); i++) {\n\
    \            long current = numbers.get(i);\n            if (current > max) {\n\
    \                max = current;\n            }\n            result.add(max);\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long max = numbers.get(0);\n        for (int i = 0; i < numbers.size();\
    \ i++) {\n            if (numbers.get(i) > max) {\n                max = numbers.get(i);\n\
    \            }\n            result.add(max);\n        }\n        return result;",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        long max = numbers.get(0);\n\
    \        result.add(max);\n        for (int i = 1; i < numbers.size(); i++) {\n\
    \            long current = numbers.get(i);\n            if (current > max) {\n\
    \                max = current;\n            }\n            result.add(max);\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (int i = 0; i < numbers.size(); i++) {\n            result.add(numbers.subList(0,\
    \ i + 1).stream().max(Comparator.naturalOrder()).get());\n        }\n        return\
    \ result;", "        ArrayList<Long> result = new ArrayList<Long>();\n       \
    \ long max = numbers.get(0);\n        result.add(max);\n        for (int i = 1;\
    \ i < numbers.size(); i++) {\n            max = Math.max(max, numbers.get(i));\n\
    \            result.add(max);\n        }\n        return result;"]
stop_tokens:
- "\n    }\n"
