name: HumanEval_120_maximum
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Given an array arr of integers and a positive integer k,\
  \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
  \    // Example 1:\n    // >>> maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
  \ (long)-4l, (long)5l))), (3l))\n    // (new ArrayList<Long>(Arrays.asList((long)-4l,\
  \ (long)-3l, (long)5l)))\n    // Example 2:\n    // >>> maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
  \ (long)-4l, (long)4l))), (2l))\n    // (new ArrayList<Long>(Arrays.asList((long)4l,\
  \ (long)4l)))\n    // Example 3:\n    // >>> maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
  \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l))\n    //\
  \ (new ArrayList<Long>(Arrays.asList((long)2l)))\n    // Note:\n    // 1. The length\
  \ of the array will be in the range of [1, 1000].\n    // 2. The elements in the\
  \ array will be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n \
  \   public static ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(maximum((new\
  \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l, (long)5l))), (3l)).equals((new\
  \ ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l, (long)5l)))));\n    assert(maximum((new\
  \ ArrayList<Long>(Arrays.asList((long)4l, (long)-4l, (long)4l))), (2l)).equals((new\
  \ ArrayList<Long>(Arrays.asList((long)4l, (long)4l)))));\n    assert(maximum((new\
  \ ArrayList<Long>(Arrays.asList((long)-3l, (long)2l, (long)1l, (long)2l, (long)-1l,\
  \ (long)-2l, (long)1l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
  \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l, (long)-123l,\
  \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
  \ (long)20l, (long)123l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-123l,\
  \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
  \ (long)1l, (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
  \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
  \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
  \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
  \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
  \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
  \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
  \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))), (2l)).equals((new\
  \ ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n    assert(maximum((new\
  \ ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l,\
  \ (long)10l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
  \ (long)2l, (long)3l, (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new\
  \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
completions: ["        ArrayList<Long> result = new ArrayList<Long>();\n        for\
    \ (int i = 0; i < k; i++) {\n            result.add((long)0);\n        }\n   \
    \     for (int i = 0; i < arr.size(); i++) {\n            for (int j = 0; j <\
    \ k; j++) {\n                if (arr.get(i) > result.get(j)) {\n             \
    \       result.add(j, arr.get(i));\n                    break;\n             \
    \   }\n            }\n        }\n        return result;", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        for (int i = 0; i < k; i++) {\n   \
    \         result.add((long)0);\n        }\n        for (int i = 0; i < arr.size();\
    \ i++) {\n            int j = (int)k - 1;\n            while (j >= 0 && arr.get(i)\
    \ > result.get(j)) {\n                if (j < (int)k - 1) {\n                \
    \    result.set(j + 1, result.get(j));\n                }\n                j =\
    \ j - 1;\n            }\n            if (j < (int)k - 1) {\n                result.set(j\
    \ + 1, arr.get(i));\n            }\n        }\n        return result;", "    \
    \    ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0;\
    \ i < k; i++) {\n            result.add((long)0);\n        }\n        for (int\
    \ i = 0; i < arr.size(); i++) {\n            for (int j = 0; j < k; j++) {\n \
    \               if (arr.get(i) > result.get(j)) {\n                    result.add(j,\
    \ arr.get(i));\n                    break;\n                }\n            }\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (int i = 0; i < k; i++) {\n            result.add((long)0);\n   \
    \     }\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i)\
    \ > result.get(0)) {\n                result.set(0, arr.get(i));\n           \
    \     for (int j = 1; j < k; j++) {\n                    if (result.get(j) < result.get(j\
    \ - 1)) {\n                        long temp = result.get(j);\n              \
    \          result.set(j, result.get(j - 1));\n                        result.set(j\
    \ - 1, temp);\n                    } else {\n                        break;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ result;", "        ArrayList<Long> result = new ArrayList<Long>();\n       \
    \ if (arr.size() == 0) {\n            return result;\n        }\n        if (k\
    \ == 0) {\n            return result;\n        }\n        if (k == 1) {\n    \
    \        long max = arr.get(0);\n            for (int i = 1; i < arr.size(); i++)\
    \ {\n                if (arr.get(i) > max) {\n                    max = arr.get(i);\n\
    \                }\n            }\n            result.add(max);\n            return\
    \ result;\n        }\n        if (k == arr.size()) {\n            Collections.sort(arr);\n\
    \            return arr;\n        }\n        ArrayList<Long> temp = new ArrayList<Long>();\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            temp.add(arr.get(i));\n\
    \        }\n        Collections.sort(temp);\n        for (int i = 0; i < k; i++)\
    \ {\n            result.add(temp.get(temp.size() - 1 - i));\n        }\n     \
    \   return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (int i = 0; i < k; i++) {\n            result.add((long)0);\n   \
    \     }\n        for (int i = 0; i < arr.size(); i++) {\n            for (int\
    \ j = 0; j < k; j++) {\n                if (arr.get(i) > result.get(j)) {\n  \
    \                  result.add(j, arr.get(i));\n                    result.remove(k);\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (int i = 0; i < k; i++) {\n            result.add((long)0);\n   \
    \     }\n        for (int i = 0; i < arr.size(); i++) {\n            for (int\
    \ j = 0; j < k; j++) {\n                if (arr.get(i) > result.get(j)) {\n  \
    \                  result.add(j, arr.get(i));\n                    result.remove(k);\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted = new ArrayList<Long>(arr);\n        Collections.sort(sorted);\n\
    \        Collections.reverse(sorted);\n        for (int i = 0; i < k; i++) {\n\
    \            result.add(sorted.get(i));\n        }\n        return result;", " \
    \       ArrayList<Long> result = new ArrayList<Long>();\n        for (int i =\
    \ 0; i < k; i++) {\n            result.add((long)0);\n        }\n        for (int\
    \ i = 0; i < arr.size(); i++) {\n            for (int j = 0; j < k; j++) {\n \
    \               if (arr.get(i) > result.get(j)) {\n                    result.add(j,\
    \ arr.get(i));\n                    break;\n                }\n            }\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (k == 0) {\n            return result;\n        }\n        if (k ==\
    \ arr.size()) {\n            return arr;\n        }\n        PriorityQueue<Long>\
    \ queue = new PriorityQueue<Long>(Collections.reverseOrder());\n        for (int\
    \ i = 0; i < arr.size(); i++) {\n            queue.add(arr.get(i));\n        }\n\
    \        for (int i = 0; i < k; i++) {\n            result.add(queue.poll());\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (int i = 0; i < k; i++) {\n            result.add((long)0);\n   \
    \     }\n        for (int i = 0; i < arr.size(); i++) {\n            for (int\
    \ j = 0; j < k; j++) {\n                if (arr.get(i) > result.get(j)) {\n  \
    \                  result.add(j, arr.get(i));\n                    break;\n  \
    \              }\n            }\n        }\n        return result;", "       \
    \ ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0; i <\
    \ k; i++) {\n            result.add((long)0);\n        }\n        for (int i =\
    \ 0; i < arr.size(); i++) {\n            for (int j = 0; j < k; j++) {\n     \
    \           if (arr.get(i) > result.get(j)) {\n                    result.add(j,\
    \ arr.get(i));\n                    result.remove(k);\n                    break;\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0; i\
    \ < k; i++) {\n            result.add((long)0);\n        }\n        for (int i\
    \ = 0; i < arr.size(); i++) {\n            for (int j = 0; j < k; j++) {\n   \
    \             if (arr.get(i) > result.get(j)) {\n                    result.add(j,\
    \ arr.get(i));\n                    result.remove(k);\n                    break;\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0; i\
    \ < k; i++) {\n            result.add((long)0);\n        }\n        for (int i\
    \ = 0; i < arr.size(); i++) {\n            for (int j = 0; j < k; j++) {\n   \
    \             if (arr.get(i) > result.get(j)) {\n                    result.add(j,\
    \ arr.get(i));\n                    break;\n                }\n            }\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (k == 0) {\n            return result;\n        }\n        if (k ==\
    \ arr.size()) {\n            return arr;\n        }\n        PriorityQueue<Long>\
    \ heap = new PriorityQueue<Long>(arr.size(), Collections.reverseOrder());\n  \
    \      for (int i = 0; i < arr.size(); i++) {\n            heap.add(arr.get(i));\n\
    \        }\n        for (int i = 0; i < k; i++) {\n            result.add(heap.poll());\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        PriorityQueue<Long> pq = new PriorityQueue<Long>();\n        for (Long\
    \ i : arr) {\n            pq.add(i);\n        }\n        for (int i = 0; i < k;\
    \ i++) {\n            result.add(pq.poll());\n        }\n        return result;",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        if (k == 0) {\n\
    \            return result;\n        }\n        if (k == arr.size()) {\n     \
    \       return arr;\n        }\n        PriorityQueue<Long> heap = new PriorityQueue<Long>(arr.size(),\
    \ Collections.reverseOrder());\n        for (Long x : arr) {\n            heap.add(x);\n\
    \        }\n        for (int i = 0; i < k; i++) {\n            result.add(heap.poll());\n\
    \        }\n        return result;", "        // Your code here\n        return\
    \ null;", "        ArrayList<Long> result = new ArrayList<Long>();\n        ArrayList<Long>\
    \ copy = new ArrayList<Long>(arr);\n        Collections.sort(copy);\n        Collections.reverse(copy);\n\
    \        for (long i = 0; i < k; i++) {\n            result.add(copy.get((int)i));\n\
    \        }\n        return result;", '        return new ArrayList<Long>();',
  "        // Your code here\n        return null;", "        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        if (k > arr.size()) {\n            return\
    \ result;\n        }\n        PriorityQueue<Long> pq = new PriorityQueue<Long>(Collections.reverseOrder());\n\
    \        for (Long i : arr) {\n            pq.add(i);\n        }\n        for\
    \ (int i = 0; i < k; i++) {\n            result.add(pq.poll());\n        }\n \
    \       return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (int i = 0; i < k; i++) {\n            result.add((long)0);\n   \
    \     }\n        for (int i = 0; i < arr.size(); i++) {\n            for (int\
    \ j = 0; j < k; j++) {\n                if (arr.get(i) > result.get(j)) {\n  \
    \                  for (int l = k - 1; l > j; l--) {\n                       \
    \ result.set(l, result.get(l - 1));\n                    }\n                 \
    \   result.set(j, arr.get(i));\n                    break;\n                }\n\
    \            }\n        }\n        return result;", "        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        for (int i = 0; i < k; i++) {\n          \
    \  result.add((long)0);\n        }\n        for (int i = 0; i < arr.size(); i++)\
    \ {\n            for (int j = 0; j < k; j++) {\n                if (arr.get(i)\
    \ > result.get(j)) {\n                    result.add(j, arr.get(i));\n       \
    \             break;\n                }\n            }\n        }\n        return\
    \ result;", "        ArrayList<Long> result = new ArrayList<Long>();\n       \
    \ PriorityQueue<Long> pq = new PriorityQueue<Long>();\n        for (Long i : arr)\
    \ {\n            pq.add(i);\n        }\n        for (int i = 0; i < k; i++) {\n\
    \            result.add(pq.poll());\n        }\n        return result;", "   \
    \     ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0;\
    \ i < k; i++) {\n            result.add((long)0);\n        }\n        for (int\
    \ i = 0; i < arr.size(); i++) {\n            for (int j = 0; j < k; j++) {\n \
    \               if (arr.get(i) > result.get(j)) {\n                    result.add(j,\
    \ arr.get(i));\n                    break;\n                }\n            }\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        PriorityQueue<Long> pq = new PriorityQueue<Long>();\n        for (int\
    \ i = 0; i < arr.size(); i++) {\n            pq.add(arr.get(i));\n        }\n\
    \        for (int i = 0; i < k; i++) {\n            result.add(pq.poll());\n \
    \       }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (int i = 0; i < k; i++) {\n            result.add((long)0);\n   \
    \     }\n        for (int i = 0; i < arr.size(); i++) {\n            for (int\
    \ j = 0; j < k; j++) {\n                if (arr.get(i) > result.get(j)) {\n  \
    \                  result.add(j, arr.get(i));\n                    break;\n  \
    \              }\n            }\n        }\n        return result;", '        return
    new ArrayList<Long>();', "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (int i = 0; i < k; i++) {\n            result.add((long)0);\n   \
    \     }\n        for (int i = 0; i < arr.size(); i++) {\n            for (int\
    \ j = 0; j < k; j++) {\n                if (arr.get(i) > result.get(j)) {\n  \
    \                  result.add(j, arr.get(i));\n                    break;\n  \
    \              }\n            }\n        }\n        return result;", "       \
    \ // Your code here\n        return null;", "        ArrayList<Long> result =\
    \ new ArrayList<Long>();\n        PriorityQueue<Long> pq = new PriorityQueue<Long>();\n\
    \        for (Long i : arr) {\n            pq.add(i);\n        }\n        for\
    \ (int i = 0; i < k; i++) {\n            result.add(pq.poll());\n        }\n \
    \       return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (int i = 0; i < k; i++) {\n            result.add((long)0);\n   \
    \     }\n        for (int i = 0; i < arr.size(); i++) {\n            for (int\
    \ j = 0; j < k; j++) {\n                if (arr.get(i) > result.get(j)) {\n  \
    \                  result.add(j, arr.get(i));\n                    result.remove(k);\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     return result;", "        // Your code goes here.\n        return null;",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0;\
    \ i < k; i++) {\n            result.add((long)0);\n        }\n        for (int\
    \ i = 0; i < arr.size(); i++) {\n            for (int j = 0; j < k; j++) {\n \
    \               if (arr.get(i) > result.get(j)) {\n                    result.add(j,\
    \ arr.get(i));\n                    break;\n                }\n            }\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (int i = 0; i < k; i++) {\n            result.add((long)0);\n   \
    \     }\n        for (int i = 0; i < arr.size(); i++) {\n            int j = 0;\n\
    \            while (j < k && arr.get(i) < result.get(j)) {\n                j++;\n\
    \            }\n            if (j < k) {\n                result.add(j, arr.get(i));\n\
    \                result.remove(k);\n            }\n        }\n        return result;",
  '        return null;', "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        PriorityQueue<Long> pq = new PriorityQueue<Long>();\n        for (Long\
    \ i : arr) {\n            pq.add(i);\n        }\n        for (int i = 0; i < k;\
    \ i++) {\n            result.add(pq.poll());\n        }\n        return result;",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0;\
    \ i < k; i++) {\n            result.add((long)0);\n        }\n        for (int\
    \ i = 0; i < arr.size(); i++) {\n            for (int j = 0; j < k; j++) {\n \
    \               if (arr.get(i) > result.get(j)) {\n                    result.add(j,\
    \ arr.get(i));\n                    result.remove(k);\n                    break;\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   // Your code here\n        return null;", "        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        if (arr.size() == 0) {\n            return\
    \ result;\n        }\n        if (k == 0) {\n            return result;\n    \
    \    }\n        if (k == 1) {\n            result.add(Collections.max(arr));\n\
    \            return result;\n        }\n        if (k == arr.size()) {\n     \
    \       result = arr;\n            Collections.sort(result);\n            Collections.reverse(result);\n\
    \            return result;\n        }\n        ArrayList<Long> max = new ArrayList<Long>();\n\
    \        for (int i = 0; i < k; i++) {\n            max.add(Collections.max(arr));\n\
    \            arr.remove(Collections.max(arr));\n        }\n        Collections.sort(max);\n\
    \        Collections.reverse(max);\n        return max;", '        return arr.stream().sorted(Comparator.reverseOrder()).limit(k).collect(Collectors.toCollection(ArrayList::new));',
  "        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0;\
    \ i < k; i++) {\n            result.add((long)0);\n        }\n        for (int\
    \ i = 0; i < arr.size(); i++) {\n            for (int j = 0; j < k; j++) {\n \
    \               if (arr.get(i) > result.get(j)) {\n                    result.add(j,\
    \ arr.get(i));\n                    break;\n                }\n            }\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (k == 0) {\n            return result;\n        }\n        if (k ==\
    \ arr.size()) {\n            return arr;\n        }\n        PriorityQueue<Long>\
    \ pq = new PriorityQueue<Long>(arr.size(), Collections.reverseOrder());\n    \
    \    for (Long l : arr) {\n            pq.add(l);\n        }\n        for (int\
    \ i = 0; i < k; i++) {\n            result.add(pq.poll());\n        }\n      \
    \  return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (int i = 0; i < k; i++) {\n            result.add((long)0);\n   \
    \     }\n        for (int i = 0; i < arr.size(); i++) {\n            for (int\
    \ j = 0; j < k; j++) {\n                if (arr.get(i) > result.get(j)) {\n  \
    \                  result.add(j, arr.get(i));\n                    result.remove(k);\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     return result;", "        // Your code here\n        return null;", "  \
    \      ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0;\
    \ i < k; i++) {\n            result.add((long)0);\n        }\n        for (int\
    \ i = 0; i < arr.size(); i++) {\n            for (int j = 0; j < k; j++) {\n \
    \               if (arr.get(i) > result.get(j)) {\n                    result.add(j,\
    \ arr.get(i));\n                    result.remove(k);\n                    break;\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0; i\
    \ < k; i++) {\n            result.add((long)0);\n        }\n        for (int i\
    \ = 0; i < arr.size(); i++) {\n            for (int j = 0; j < k; j++) {\n   \
    \             if (arr.get(i) > result.get(j)) {\n                    result.add(j,\
    \ arr.get(i));\n                    break;\n                }\n            }\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (long i = 0; i < k; i++) {\n            result.add((long)-1001l);\n\
    \        }\n        for (long i = 0; i < arr.size(); i++) {\n            for (long\
    \ j = 0; j < k; j++) {\n                if (arr.get((int)i) > result.get((int)j))\
    \ {\n                    result.add((int)j, arr.get((int)i));\n              \
    \      break;\n                }\n            }\n        }\n        return result.subList(0,\
    \ (int)k);", "        ArrayList<Long> result = new ArrayList<Long>();\n      \
    \  PriorityQueue<Long> pq = new PriorityQueue<Long>(k, Collections.reverseOrder());\n\
    \        for (Long i : arr) {\n            pq.add(i);\n        }\n        for\
    \ (int i = 0; i < k; i++) {\n            result.add(pq.poll());\n        }\n \
    \       return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        // Write your code here\n        return result;", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        for (int i = 0; i < k; i++) {\n   \
    \         long max = Long.MIN_VALUE;\n            int maxIndex = -1;\n       \
    \     for (int j = 0; j < arr.size(); j++) {\n                if (arr.get(j) >\
    \ max) {\n                    max = arr.get(j);\n                    maxIndex\
    \ = j;\n                }\n            }\n            result.add(max);\n     \
    \       arr.remove(maxIndex);\n        }\n        return result;", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        for (int i = 0; i < k; i++) {\n   \
    \         result.add((long)0);\n        }\n        for (int i = 0; i < arr.size();\
    \ i++) {\n            for (int j = 0; j < k; j++) {\n                if (arr.get(i)\
    \ > result.get(j)) {\n                    result.add(j, arr.get(i));\n       \
    \             break;\n                }\n            }\n        }\n        return\
    \ result;", "        // Write your code here\n        return null;", "       \
    \ ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0; i <\
    \ k; i++) {\n            result.add((long)-1000l);\n        }\n        for (int\
    \ i = 0; i < arr.size(); i++) {\n            for (int j = 0; j < k; j++) {\n \
    \               if (arr.get(i) > result.get(j)) {\n                    result.add(j,\
    \ arr.get(i));\n                    result.remove(k);\n                    break;\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   ArrayList<Long> result = new ArrayList<Long>();\n        if (k == 0) {\n \
    \           return result;\n        }\n        if (k == arr.size()) {\n      \
    \      return arr;\n        }\n        PriorityQueue<Long> pq = new PriorityQueue<Long>(Collections.reverseOrder());\n\
    \        for (Long i : arr) {\n            pq.add(i);\n        }\n        for\
    \ (int i = 0; i < k; i++) {\n            result.add(pq.poll());\n        }\n \
    \       return result;", "        // Your code here\n        return null;", " \
    \       ArrayList<Long> result = new ArrayList<Long>();\n        PriorityQueue<Long>\
    \ pq = new PriorityQueue<Long>();\n        for (Long i : arr) {\n            pq.add(i);\n\
    \        }\n        for (int i = 0; i < k; i++) {\n            result.add(pq.poll());\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        PriorityQueue<Long> pq = new PriorityQueue<Long>();\n        for (Long\
    \ i : arr) {\n            pq.add(i);\n        }\n        for (long i = 0; i <\
    \ k; i++) {\n            result.add(pq.poll());\n        }\n        return result;",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0;\
    \ i < k; i++) {\n            result.add((long)0);\n        }\n        for (int\
    \ i = 0; i < arr.size(); i++) {\n            for (int j = 0; j < k; j++) {\n \
    \               if (arr.get(i) > result.get(j)) {\n                    result.add(j,\
    \ arr.get(i));\n                    result.remove(k);\n                    break;\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0; i\
    \ < k; i++) {\n            result.add((long)0);\n        }\n        for (int i\
    \ = 0; i < arr.size(); i++) {\n            for (int j = 0; j < k; j++) {\n   \
    \             if (arr.get(i) > result.get(j)) {\n                    result.add(j,\
    \ arr.get(i));\n                    break;\n                }\n            }\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        PriorityQueue<Long> pq = new PriorityQueue<Long>();\n        for (Long\
    \ i : arr) {\n            pq.add(i);\n        }\n        for (int i = 0; i < k;\
    \ i++) {\n            result.add(pq.poll());\n        }\n        return result;",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        PriorityQueue<Long>\
    \ pq = new PriorityQueue<Long>();\n        for (Long i : arr) {\n            pq.add(i);\n\
    \        }\n        for (int i = 0; i < k; i++) {\n            result.add(pq.poll());\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (int i = 0; i < k; i++) {\n            result.add((long)0);\n   \
    \     }\n        for (int i = 0; i < arr.size(); i++) {\n            for (int\
    \ j = 0; j < k; j++) {\n                if (arr.get(i) > result.get(j)) {\n  \
    \                  result.add(j, arr.get(i));\n                    result.remove(k);\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (int i = 0; i < k; i++) {\n            result.add((long)0);\n   \
    \     }\n        for (int i = 0; i < arr.size(); i++) {\n            for (int\
    \ j = 0; j < k; j++) {\n                if (arr.get(i) > result.get(j)) {\n  \
    \                  result.add(j, arr.get(i));\n                    break;\n  \
    \              }\n            }\n        }\n        return result;", "       \
    \ ArrayList<Long> result = new ArrayList<Long>();\n        if (k > arr.size())\
    \ {\n            return result;\n        }\n        PriorityQueue<Long> pq = new\
    \ PriorityQueue<Long>(Collections.reverseOrder());\n        for (int i = 0; i\
    \ < arr.size(); i++) {\n            pq.add(arr.get(i));\n        }\n        for\
    \ (int i = 0; i < k; i++) {\n            result.add(pq.poll());\n        }\n \
    \       return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        PriorityQueue<Long> queue = new PriorityQueue<Long>(k, Collections.reverseOrder());\n\
    \        for (Long i : arr) {\n            queue.add(i);\n            if (queue.size()\
    \ > k) {\n                queue.poll();\n            }\n        }\n        while\
    \ (!queue.isEmpty()) {\n            result.add(queue.poll());\n        }\n   \
    \     return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (int i = 0; i < k; i++) {\n            result.add((long)0);\n   \
    \     }\n        for (int i = 0; i < arr.size(); i++) {\n            for (int\
    \ j = 0; j < k; j++) {\n                if (arr.get(i) > result.get(j)) {\n  \
    \                  result.add(j, arr.get(i));\n                    result.remove(k);\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (int i = 0; i < k; i++) {\n            result.add((long)0);\n   \
    \     }\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i)\
    \ > result.get(0)) {\n                result.set(0, arr.get(i));\n           \
    \     Collections.sort(result);\n            }\n        }\n        return result;",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0;\
    \ i < k; i++) {\n            result.add((long)0);\n        }\n        for (int\
    \ i = 0; i < arr.size(); i++) {\n            for (int j = 0; j < k; j++) {\n \
    \               if (arr.get(i) > result.get(j)) {\n                    result.add(j,\
    \ arr.get(i));\n                    break;\n                }\n            }\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (k == 0) {\n            return result;\n        }\n        if (k ==\
    \ arr.size()) {\n            return arr;\n        }\n        ArrayList<Long> sorted\
    \ = new ArrayList<Long>(arr);\n        Collections.sort(sorted);\n        Collections.reverse(sorted);\n\
    \        for (int i = 0; i < k; i++) {\n            result.add(sorted.get(i));\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        PriorityQueue<Long> pq = new PriorityQueue<Long>(new Comparator<Long>()\
    \ {\n            public int compare(Long a, Long b) {\n                return\
    \ b.compareTo(a);\n            }\n        });\n        for (Long i : arr) {\n\
    \            pq.add(i);\n        }\n        for (int i = 0; i < k; i++) {\n  \
    \          result.add(pq.poll());\n        }\n        return result;", "     \
    \   // Your code here\n        return null;", "        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        PriorityQueue<Long> queue = new PriorityQueue<Long>(arr.size(),\
    \ Collections.reverseOrder());\n        for (Long i : arr) {\n            queue.add(i);\n\
    \        }\n        for (int i = 0; i < k; i++) {\n            result.add(queue.poll());\n\
    \        }\n        return result;", "        // Your code here\n        return\
    \ null;", "        // Your code here\n        return null;", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        for (int i = 0; i < k; i++) {\n   \
    \         result.add((long)0);\n        }\n        for (int i = 0; i < arr.size();\
    \ i++) {\n            for (int j = 0; j < k; j++) {\n                if (arr.get(i)\
    \ > result.get(j)) {\n                    result.add(j, arr.get(i));\n       \
    \             break;\n                }\n            }\n        }\n        return\
    \ result;", "        ArrayList<Long> result = new ArrayList<Long>();\n       \
    \ PriorityQueue<Long> pq = new PriorityQueue<Long>();\n        for (Long i : arr)\
    \ {\n            pq.add(i);\n        }\n        for (int i = 0; i < k; i++) {\n\
    \            result.add(pq.poll());\n        }\n        return result;", "   \
    \     ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0;\
    \ i < k; i++) {\n            result.add((long)0);\n        }\n        for (int\
    \ i = 0; i < arr.size(); i++) {\n            for (int j = 0; j < k; j++) {\n \
    \               if (arr.get(i) > result.get(j)) {\n                    result.add(j,\
    \ arr.get(i));\n                    result.remove(k);\n                    break;\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   ArrayList<Long> res = new ArrayList<Long>();\n        PriorityQueue<Long>\
    \ pq = new PriorityQueue<Long>();\n        for (Long i : arr) {\n            pq.add(i);\n\
    \        }\n        for (int i = 0; i < k; i++) {\n            res.add(pq.poll());\n\
    \        }\n        return res;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        PriorityQueue<Long> pq = new PriorityQueue<Long>();\n        for (Long\
    \ i : arr) {\n            pq.add(i);\n        }\n        for (int i = 0; i < k;\
    \ i++) {\n            result.add(pq.poll());\n        }\n        return result;",
  "        // Your code here\n        return null;", "        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        PriorityQueue<Long> pq = new PriorityQueue<Long>(new\
    \ Comparator<Long>() {\n            public int compare(Long a, Long b) {\n   \
    \             return b.compareTo(a);\n            }\n        });\n        for\
    \ (Long i : arr) {\n            pq.add(i);\n        }\n        for (int i = 0;\
    \ i < k; i++) {\n            result.add(pq.poll());\n        }\n        return\
    \ result;", "        ArrayList<Long> result = new ArrayList<Long>();\n       \
    \ if (k == 0) {\n            return result;\n        }\n        if (k == arr.size())\
    \ {\n            return arr;\n        }\n        PriorityQueue<Long> queue = new\
    \ PriorityQueue<Long>(arr.size(), Collections.reverseOrder());\n        queue.addAll(arr);\n\
    \        for (int i = 0; i < k; i++) {\n            result.add(queue.poll());\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        ArrayList<Long> copy = new ArrayList<Long>(arr);\n        Collections.sort(copy);\n\
    \        Collections.reverse(copy);\n        for (int i = 0; i < k; i++) {\n \
    \           result.add(copy.get(i));\n        }\n        return result;", '        return
    new ArrayList<Long>();', "        // Your code here\n        return null;", " \
    \       ArrayList<Long> result = new ArrayList<Long>();\n        if (k == 0) {\n\
    \            return result;\n        }\n        if (k == arr.size()) {\n     \
    \       return arr;\n        }\n        PriorityQueue<Long> pq = new PriorityQueue<Long>(arr.size(),\
    \ new Comparator<Long>() {\n            public int compare(Long a, Long b) {\n\
    \                return b.compareTo(a);\n            }\n        });\n        for\
    \ (Long i : arr) {\n            pq.add(i);\n        }\n        for (int i = 0;\
    \ i < k; i++) {\n            result.add(pq.poll());\n        }\n        return\
    \ result;", "        ArrayList<Long> result = new ArrayList<Long>();\n       \
    \ for (long i = 0; i < k; i++) {\n            result.add((long)0);\n        }\n\
    \        for (long i = 0; i < arr.size(); i++) {\n            long j = k - 1;\n\
    \            while (j >= 0 && arr.get((int)i) > result.get((int)j)) {\n      \
    \          if (j < k - 1) {\n                    result.set((int)(j + 1), result.get((int)j));\n\
    \                }\n                j = j - 1;\n            }\n            if\
    \ (j < k - 1) {\n                result.set((int)(j + 1), arr.get((int)i));\n\
    \            }\n        }\n        return result;", "        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        if (k == 0) {\n            return result;\n\
    \        }\n        if (k == arr.size()) {\n            return arr;\n        }\n\
    \        ArrayList<Long> temp = new ArrayList<Long>();\n        for (int i = 0;\
    \ i < arr.size(); i++) {\n            temp.add(arr.get(i));\n        }\n     \
    \   Collections.sort(temp);\n        for (int i = 0; i < k; i++) {\n         \
    \   result.add(temp.get(temp.size() - 1 - i));\n        }\n        return result;",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0;\
    \ i < k; i++) {\n            long max = Long.MIN_VALUE;\n            int maxIndex\
    \ = -1;\n            for (int j = 0; j < arr.size(); j++) {\n                if\
    \ (arr.get(j) > max) {\n                    max = arr.get(j);\n              \
    \      maxIndex = j;\n                }\n            }\n            result.add(max);\n\
    \            arr.remove(maxIndex);\n        }\n        return result;", "    \
    \    ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0;\
    \ i < k; i++) {\n            result.add((long)0);\n        }\n        for (int\
    \ i = 0; i < arr.size(); i++) {\n            for (int j = 0; j < k; j++) {\n \
    \               if (arr.get(i) > result.get(j)) {\n                    result.add(j,\
    \ arr.get(i));\n                    break;\n                }\n            }\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        PriorityQueue<Long> queue = new PriorityQueue<Long>(Collections.reverseOrder());\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            queue.add(arr.get(i));\n\
    \        }\n        for (int i = 0; i < k; i++) {\n            result.add(queue.poll());\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (int i = 0; i < k; i++) {\n            result.add((long)0);\n   \
    \     }\n        for (int i = 0; i < arr.size(); i++) {\n            for (int\
    \ j = 0; j < k; j++) {\n                if (arr.get(i) > result.get(j)) {\n  \
    \                  result.add(j, arr.get(i));\n                    result.remove(k);\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (int i = 0; i < k; i++) {\n            result.add((long)0);\n   \
    \     }\n        for (int i = 0; i < arr.size(); i++) {\n            for (int\
    \ j = 0; j < k; j++) {\n                if (arr.get(i) > result.get(j)) {\n  \
    \                  result.add(j, arr.get(i));\n                    break;\n  \
    \              }\n            }\n        }\n        return result;", "       \
    \ ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0; i <\
    \ k; i++) {\n            result.add((long)0);\n        }\n        for (int i =\
    \ 0; i < arr.size(); i++) {\n            for (int j = 0; j < k; j++) {\n     \
    \           if (arr.get(i) > result.get(j)) {\n                    result.add(j,\
    \ arr.get(i));\n                    break;\n                }\n            }\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (int i = 0; i < k; i++) {\n            long max = Long.MIN_VALUE;\n\
    \            int index = -1;\n            for (int j = 0; j < arr.size(); j++)\
    \ {\n                if (arr.get(j) > max) {\n                    max = arr.get(j);\n\
    \                    index = j;\n                }\n            }\n          \
    \  result.add(max);\n            arr.remove(index);\n        }\n        return\
    \ result;", "        ArrayList<Long> result = new ArrayList<Long>();\n       \
    \ ArrayList<Long> copy = new ArrayList<Long>(arr);\n        Collections.sort(copy);\n\
    \        Collections.reverse(copy);\n        for (int i = 0; i < k; i++) {\n \
    \           result.add(copy.get(i));\n        }\n        return result;", "  \
    \      ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0;\
    \ i < k; i++) {\n            result.add((long)0);\n        }\n        for (int\
    \ i = 0; i < arr.size(); i++) {\n            for (int j = 0; j < k; j++) {\n \
    \               if (arr.get(i) > result.get(j)) {\n                    result.add(j,\
    \ arr.get(i));\n                    break;\n                }\n            }\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        PriorityQueue<Long> pq = new PriorityQueue<Long>();\n        for (Long\
    \ i : arr) {\n            pq.add(i);\n        }\n        for (int i = 0; i < k;\
    \ i++) {\n            result.add(pq.poll());\n        }\n        return result;",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0;\
    \ i < k; i++) {\n            result.add((long)0);\n        }\n        for (int\
    \ i = 0; i < arr.size(); i++) {\n            for (int j = 0; j < k; j++) {\n \
    \               if (arr.get(i) > result.get(j)) {\n                    result.add(j,\
    \ arr.get(i));\n                    break;\n                }\n            }\n\
    \        }\n        return result;", "        // Your code here\n        return\
    \ null;", "        ArrayList<Long> result = new ArrayList<Long>();\n        for\
    \ (int i = 0; i < k; i++) {\n            result.add((long)0);\n        }\n   \
    \     for (int i = 0; i < arr.size(); i++) {\n            for (int j = 0; j <\
    \ k; j++) {\n                if (arr.get(i) > result.get(j)) {\n             \
    \       result.add(j, arr.get(i));\n                    break;\n             \
    \   }\n            }\n        }\n        return result;", "        // Your code\
    \ here\n        return arr;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (int i = 0; i < k; i++) {\n            result.add((long)0);\n   \
    \     }\n        for (int i = 0; i < arr.size(); i++) {\n            for (int\
    \ j = 0; j < k; j++) {\n                if (arr.get(i) > result.get(j)) {\n  \
    \                  result.add(j, arr.get(i));\n                    result.remove(k);\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (k == 0) {\n            return result;\n        }\n        if (k ==\
    \ arr.size()) {\n            return arr;\n        }\n        PriorityQueue<Long>\
    \ queue = new PriorityQueue<Long>(new Comparator<Long>() {\n            public\
    \ int compare(Long a, Long b) {\n                return a.compareTo(b);\n    \
    \        }\n        });\n        for (Long i : arr) {\n            queue.add(i);\n\
    \        }\n        for (int i = 0; i < k; i++) {\n            result.add(queue.poll());\n\
    \        }\n        return result;", "        // Your code here\n        return\
    \ null;", "        ArrayList<Long> result = new ArrayList<Long>();\n        for\
    \ (int i = 0; i < k; i++) {\n            result.add((long)0);\n        }\n   \
    \     for (int i = 0; i < arr.size(); i++) {\n            for (int j = 0; j <\
    \ k; j++) {\n                if (arr.get(i) > result.get(j)) {\n             \
    \       result.add(j, arr.get(i));\n                    result.remove(k);\n  \
    \                  break;\n                }\n            }\n        }\n     \
    \   return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        PriorityQueue<Long> queue = new PriorityQueue<Long>(arr.size(), Collections.reverseOrder());\n\
    \        for (Long i : arr) {\n            queue.add(i);\n        }\n        for\
    \ (int i = 0; i < k; i++) {\n            result.add(queue.poll());\n        }\n\
    \        return result;", "        if (k == 0) {\n            return new ArrayList<Long>();\n\
    \        }\n        if (k == arr.size()) {\n            return arr;\n        }\n\
    \        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i =\
    \ 0; i < k; i++) {\n            result.add(arr.get(i));\n        }\n        for\
    \ (int i = k; i < arr.size(); i++) {\n            long min = result.get(0);\n\
    \            int minIndex = 0;\n            for (int j = 1; j < result.size();\
    \ j++) {\n                if (result.get(j) < min) {\n                    min\
    \ = result.get(j);\n                    minIndex = j;\n                }\n   \
    \         }\n            if (arr.get(i) > min) {\n                result.set(minIndex,\
    \ arr.get(i));\n            }\n        }\n        return result;", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        PriorityQueue<Long> pq = new PriorityQueue<Long>(Collections.reverseOrder());\n\
    \        for (Long i : arr) {\n            pq.add(i);\n        }\n        for\
    \ (int i = 0; i < k; i++) {\n            result.add(pq.poll());\n        }\n \
    \       return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (int i = 0; i < k; i++) {\n            result.add((long)0);\n   \
    \     }\n        for (int i = 0; i < arr.size(); i++) {\n            for (int\
    \ j = 0; j < k; j++) {\n                if (arr.get(i) > result.get(j)) {\n  \
    \                  result.add(j, arr.get(i));\n                    result.remove(k);\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (int i = 0; i < k; i++) {\n            result.add((long)0);\n   \
    \     }\n        for (int i = 0; i < arr.size(); i++) {\n            for (int\
    \ j = 0; j < k; j++) {\n                if (arr.get(i) > result.get(j)) {\n  \
    \                  result.add(j, arr.get(i));\n                    result.remove(k);\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (k == 0) {\n            return result;\n        }\n        if (k ==\
    \ arr.size()) {\n            return arr;\n        }\n        PriorityQueue<Long>\
    \ pq = new PriorityQueue<Long>();\n        for (Long i : arr) {\n            pq.add(i);\n\
    \        }\n        for (int i = 0; i < k; i++) {\n            result.add(pq.poll());\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (k == 0) {\n            return result;\n        }\n        if (k ==\
    \ arr.size()) {\n            return arr;\n        }\n        PriorityQueue<Long>\
    \ pq = new PriorityQueue<Long>(Collections.reverseOrder());\n        for (Long\
    \ x : arr) {\n            pq.add(x);\n        }\n        while (k > 0) {\n   \
    \         result.add(pq.poll());\n            k--;\n        }\n        return\
    \ result;", "        ArrayList<Long> result = new ArrayList<Long>();\n       \
    \ for (int i = 0; i < k; i++) {\n            result.add((long)0);\n        }\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            for (int j = 0; j\
    \ < k; j++) {\n                if (arr.get(i) > result.get(j)) {\n           \
    \         result.add(j, arr.get(i));\n                    result.remove(k);\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (int i = 0; i < k; i++) {\n            result.add((long)0);\n   \
    \     }\n        for (int i = 0; i < arr.size(); i++) {\n            for (int\
    \ j = 0; j < k; j++) {\n                if (arr.get(i) > result.get(j)) {\n  \
    \                  result.add(j, arr.get(i));\n                    break;\n  \
    \              }\n            }\n        }\n        return result;", "       \
    \ ArrayList<Long> res = new ArrayList<Long>();\n        PriorityQueue<Long> pq\
    \ = new PriorityQueue<Long>();\n        for (Long x : arr) {\n            pq.add(x);\n\
    \            if (pq.size() > k) {\n                pq.poll();\n            }\n\
    \        }\n        while (!pq.isEmpty()) {\n            res.add(pq.poll());\n\
    \        }\n        Collections.reverse(res);\n        return res;", "       \
    \ ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0; i <\
    \ k; i++) {\n            result.add((long)0);\n        }\n        for (int i =\
    \ 0; i < arr.size(); i++) {\n            for (int j = 0; j < k; j++) {\n     \
    \           if (arr.get(i) > result.get(j)) {\n                    result.add(j,\
    \ arr.get(i));\n                    break;\n                }\n            }\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (int i = 0; i < k; i++) {\n            result.add((long)0);\n   \
    \     }\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i)\
    \ > result.get(0)) {\n                result.set(0, arr.get(i));\n           \
    \     for (int j = 1; j < k; j++) {\n                    if (result.get(j) < result.get(j\
    \ - 1)) {\n                        long temp = result.get(j);\n              \
    \          result.set(j, result.get(j - 1));\n                        result.set(j\
    \ - 1, temp);\n                    } else {\n                        break;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ result;", "        ArrayList<Long> result = new ArrayList<Long>();\n       \
    \ for (int i = 0; i < k; i++) {\n            result.add((long)0);\n        }\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            for (int j = 0; j\
    \ < k; j++) {\n                if (arr.get(i) > result.get(j)) {\n           \
    \         result.add(j, arr.get(i));\n                    break;\n           \
    \     }\n            }\n        }\n        return result;", "        // Your code\
    \ here\n        return null;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        PriorityQueue<Long> pq = new PriorityQueue<Long>(Collections.reverseOrder());\n\
    \        for (Long i : arr) {\n            pq.add(i);\n        }\n        for\
    \ (int i = 0; i < k; i++) {\n            result.add(pq.poll());\n        }\n \
    \       return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (int i = 0; i < k; i++) {\n            result.add((long)0);\n   \
    \     }\n        for (int i = 0; i < arr.size(); i++) {\n            for (int\
    \ j = 0; j < k; j++) {\n                if (arr.get(i) > result.get(j)) {\n  \
    \                  result.add(j, arr.get(i));\n                    result.remove(k);\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     return result;", "        // Your code here\n        return null;", "  \
    \      ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0;\
    \ i < k; i++) {\n            result.add((long)0);\n        }\n        for (int\
    \ i = 0; i < arr.size(); i++) {\n            for (int j = 0; j < k; j++) {\n \
    \               if (arr.get(i) > result.get(j)) {\n                    result.add(j,\
    \ arr.get(i));\n                    result.remove(k);\n                    break;\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   // Your code here\n        return null;", "        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        for (long i = 0; i < k; i++) {\n         \
    \   result.add((long)0);\n        }\n        for (long i = 0; i < arr.size();\
    \ i++) {\n            long j = 0;\n            while (j < k) {\n             \
    \   if (arr.get((int)i) > result.get((int)j)) {\n                    result.add((int)j,\
    \ arr.get((int)i));\n                    result.remove((int)(k));\n          \
    \          break;\n                }\n                j = j + 1;\n           \
    \ }\n        }\n        return result;", "        ArrayList<Long> result = new\
    \ ArrayList<Long>();\n        if (k == 0) {\n            return result;\n    \
    \    }\n        if (k == arr.size()) {\n            return arr;\n        }\n \
    \       PriorityQueue<Long> pq = new PriorityQueue<Long>(new Comparator<Long>()\
    \ {\n            public int compare(Long a, Long b) {\n                return\
    \ b.compareTo(a);\n            }\n        });\n        for (Long x : arr) {\n\
    \            pq.add(x);\n        }\n        for (int i = 0; i < k; i++) {\n  \
    \          result.add(pq.poll());\n        }\n        return result;", '        return
    null;', "        // Your code here\n        return null;", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        PriorityQueue<Long> pq = new PriorityQueue<Long>();\n\
    \        for (Long i : arr) {\n            pq.add(i);\n        }\n        for\
    \ (int i = 0; i < k; i++) {\n            result.add(pq.poll());\n        }\n \
    \       return result;", "        // Your code here\n        return arr;", " \
    \       ArrayList<Long> result = new ArrayList<Long>();\n        PriorityQueue<Long>\
    \ pq = new PriorityQueue<Long>();\n        for (Long i : arr) {\n            pq.add(i);\n\
    \        }\n        for (int i = 0; i < k; i++) {\n            result.add(pq.poll());\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long i = 0l;\n        long j = 0l;\n        long n = arr.size();\n  \
    \      while (i < k) {\n            long max = arr.get((int)j);\n            long\
    \ maxIndex = j;\n            j = j + 1l;\n            while (j < n) {\n      \
    \          if (arr.get((int)j) > max) {\n                    max = arr.get((int)j);\n\
    \                    maxIndex = j;\n                }\n                j = j +\
    \ 1l;\n            }\n            result.add(max);\n            arr.set((int)maxIndex,\
    \ (long)-1001l);\n            i = i + 1l;\n            j = 0l;\n        }\n  \
    \      return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        PriorityQueue<Long> queue = new PriorityQueue<Long>(arr.size(), Collections.reverseOrder());\n\
    \        for (Long num : arr) {\n            queue.add(num);\n        }\n    \
    \    for (int i = 0; i < k; i++) {\n            result.add(queue.poll());\n  \
    \      }\n        return result;", "        // Your code here\n        return\
    \ null;", "        // Your code here\n        return arr;", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        for (int i = 0; i < k; i++) {\n   \
    \         result.add((long)0);\n        }\n        for (int i = 0; i < arr.size();\
    \ i++) {\n            for (int j = 0; j < k; j++) {\n                if (arr.get(i)\
    \ > result.get(j)) {\n                    result.add(j, arr.get(i));\n       \
    \             result.remove(k);\n                    break;\n                }\n\
    \            }\n        }\n        return result;", "        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        PriorityQueue<Long> pq = new PriorityQueue<Long>();\n\
    \        for (Long i : arr) {\n            pq.add(i);\n        }\n        for\
    \ (int i = 0; i < k; i++) {\n            result.add(pq.poll());\n        }\n \
    \       return result;", "        ArrayList<Long> ret = new ArrayList<Long>();\n\
    \        if (arr.size() == 0) {\n            return ret;\n        }\n        if\
    \ (k == 0) {\n            return ret;\n        }\n        if (k == 1) {\n    \
    \        long max = arr.get(0);\n            for (int i = 1; i < arr.size(); i++)\
    \ {\n                if (arr.get(i) > max) {\n                    max = arr.get(i);\n\
    \                }\n            }\n            ret.add(max);\n            return\
    \ ret;\n        }\n        if (k == arr.size()) {\n            Collections.sort(arr);\n\
    \            return arr;\n        }\n        ArrayList<Long> left = new ArrayList<Long>();\n\
    \        ArrayList<Long> right = new ArrayList<Long>();\n        for (int i =\
    \ 0; i < arr.size(); i++) {\n            if (i < k) {\n                left.add(arr.get(i));\n\
    \            } else {\n                right.add(arr.get(i));\n            }\n\
    \        }\n        Collections.sort(left);\n        Collections.sort(right);\n\
    \        for (int i = 0; i < k; i++) {\n            if (left.get(i) > right.get(0))\
    \ {\n                ret.add(left.get(i));\n            } else {\n           \
    \     ret.add(right.get(0));\n                right.remove(0);\n            }\n\
    \        }\n        return ret;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (int i = 0; i < k; i++) {\n            long max = Long.MIN_VALUE;\n\
    \            int maxIndex = -1;\n            for (int j = 0; j < arr.size(); j++)\
    \ {\n                if (arr.get(j) > max) {\n                    max = arr.get(j);\n\
    \                    maxIndex = j;\n                }\n            }\n       \
    \     result.add(max);\n            arr.remove(maxIndex);\n        }\n       \
    \ return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (k == 0) {\n            return result;\n        }\n        if (k >\
    \ arr.size()) {\n            return arr;\n        }\n        ArrayList<Long> sorted\
    \ = new ArrayList<Long>(arr);\n        Collections.sort(sorted);\n        Collections.reverse(sorted);\n\
    \        for (int i = 0; i < k; i++) {\n            result.add(sorted.get(i));\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (int i = 0; i < k; i++) {\n            result.add((long)0);\n   \
    \     }\n        for (int i = 0; i < arr.size(); i++) {\n            for (int\
    \ j = 0; j < k; j++) {\n                if (arr.get(i) > result.get(j)) {\n  \
    \                  result.add(j, arr.get(i));\n                    break;\n  \
    \              }\n            }\n        }\n        return result;", "       \
    \ ArrayList<Long> result = new ArrayList<Long>();\n        if (k == 0) {\n   \
    \         return result;\n        }\n        if (k == arr.size()) {\n        \
    \    return arr;\n        }\n        PriorityQueue<Long> heap = new PriorityQueue<Long>(arr.size(),\
    \ Collections.reverseOrder());\n        for (Long i : arr) {\n            heap.add(i);\n\
    \        }\n        for (int i = 0; i < k; i++) {\n            result.add(heap.poll());\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (arr.size() == 0) {\n            return result;\n        }\n     \
    \   if (k == 0) {\n            return result;\n        }\n        if (k == 1)\
    \ {\n            result.add(Collections.max(arr));\n            return result;\n\
    \        }\n        if (k == arr.size()) {\n            result = arr;\n      \
    \      Collections.sort(result);\n            Collections.reverse(result);\n \
    \           return result;\n        }\n        ArrayList<Long> temp = new ArrayList<Long>();\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            temp.add(arr.get(i));\n\
    \        }\n        Collections.sort(temp);\n        Collections.reverse(temp);\n\
    \        for (int i = 0; i < k; i++) {\n            result.add(temp.get(i));\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        PriorityQueue<Long> pq = new PriorityQueue<Long>();\n        for (Long\
    \ i : arr) {\n            pq.add(i);\n        }\n        for (int i = 0; i < k;\
    \ i++) {\n            result.add(pq.poll());\n        }\n        return result;",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0;\
    \ i < k; i++) {\n            result.add((long)0);\n        }\n        for (int\
    \ i = 0; i < arr.size(); i++) {\n            for (int j = 0; j < k; j++) {\n \
    \               if (arr.get(i) > result.get(j)) {\n                    result.add(j,\
    \ arr.get(i));\n                    result.remove(k);\n                    break;\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0; i\
    \ < k; i++) {\n            result.add((long)0);\n        }\n        for (int i\
    \ = 0; i < arr.size(); i++) {\n            for (int j = 0; j < k; j++) {\n   \
    \             if (arr.get(i) > result.get(j)) {\n                    result.add(j,\
    \ arr.get(i));\n                    result.remove(k);\n                    break;\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   ArrayList<Long> result = new ArrayList<Long>();\n        if (k == 0) {\n \
    \           return result;\n        }\n        if (k == arr.size()) {\n      \
    \      return arr;\n        }\n        PriorityQueue<Long> pq = new PriorityQueue<Long>();\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            pq.add(arr.get(i));\n\
    \        }\n        for (int i = 0; i < k; i++) {\n            result.add(pq.poll());\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted = new ArrayList<Long>(arr);\n        Collections.sort(sorted);\n\
    \        Collections.reverse(sorted);\n        for (int i = 0; i < k; i++) {\n\
    \            result.add(sorted.get(i));\n        }\n        return result;", '        return
    new ArrayList<Long>();', "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (k <= 0) {\n            return result;\n        }\n        if (k >=\
    \ arr.size()) {\n            Collections.sort(arr);\n            Collections.reverse(arr);\n\
    \            return arr;\n        }\n        PriorityQueue<Long> pq = new PriorityQueue<Long>();\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            pq.add(arr.get(i));\n\
    \            if (pq.size() > k) {\n                pq.poll();\n            }\n\
    \        }\n        while (!pq.isEmpty()) {\n            result.add(pq.poll());\n\
    \        }\n        Collections.reverse(result);\n        return result;", " \
    \       ArrayList<Long> result = new ArrayList<Long>();\n        for (int i =\
    \ 0; i < k; i++) {\n            result.add((long)-1000000l);\n        }\n    \
    \    for (Long i : arr) {\n            if (i > result.get((int)(k - 1l))) {\n\
    \                result.set((int)(k - 1l), i);\n                result.sort(null);\n\
    \            }\n        }\n        return result;", "        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        for (int i = 0; i < k; i++) {\n          \
    \  result.add((long)0);\n        }\n        for (int i = 0; i < arr.size(); i++)\
    \ {\n            if (arr.get(i) > result.get(0)) {\n                result.set(0,\
    \ arr.get(i));\n                for (int j = 1; j < k; j++) {\n              \
    \      if (result.get(j) < result.get(j - 1)) {\n                        long\
    \ temp = result.get(j);\n                        result.set(j, result.get(j -\
    \ 1));\n                        result.set(j - 1, temp);\n                   \
    \ } else {\n                        break;\n                    }\n          \
    \      }\n            }\n        }\n        return result;", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        for (int i = 0; i < k; i++) {\n   \
    \         result.add((long)0);\n        }\n        for (int i = 0; i < arr.size();\
    \ i++) {\n            for (int j = 0; j < k; j++) {\n                if (arr.get(i)\
    \ > result.get(j)) {\n                    result.add(j, arr.get(i));\n       \
    \             break;\n                }\n            }\n        }\n        return\
    \ result;", '        return arr.stream().sorted(Comparator.reverseOrder()).limit(k).collect(Collectors.toCollection(ArrayList::new));',
  "        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0;\
    \ i < k; i++) {\n            result.add((long)0);\n        }\n        for (int\
    \ i = 0; i < arr.size(); i++) {\n            for (int j = 0; j < k; j++) {\n \
    \               if (arr.get(i) > result.get(j)) {\n                    result.add(j,\
    \ arr.get(i));\n                    break;\n                }\n            }\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (int i = 0; i < k; i++) {\n            result.add((long)0);\n   \
    \     }\n        for (int i = 0; i < arr.size(); i++) {\n            for (int\
    \ j = 0; j < k; j++) {\n                if (arr.get(i) > result.get(j)) {\n  \
    \                  result.add(j, arr.get(i));\n                    result.remove(k);\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (int i = 0; i < k; i++) {\n            result.add((long)0);\n   \
    \     }\n        for (int i = 0; i < arr.size(); i++) {\n            for (int\
    \ j = 0; j < k; j++) {\n                if (arr.get(i) > result.get(j)) {\n  \
    \                  result.add(j, arr.get(i));\n                    break;\n  \
    \              }\n            }\n        }\n        return result;", "       \
    \ ArrayList<Long> result = new ArrayList<Long>();\n        PriorityQueue<Long>\
    \ pq = new PriorityQueue<Long>();\n        for (Long l : arr) {\n            pq.add(l);\n\
    \        }\n        for (int i = 0; i < k; i++) {\n            result.add(pq.poll());\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            if (result.size()\
    \ < k) {\n                result.add(arr.get(i));\n            } else {\n    \
    \            int j = 0;\n                while (j < result.size() && arr.get(i)\
    \ > result.get(j)) {\n                    j++;\n                }\n          \
    \      if (j < result.size()) {\n                    result.add(j, arr.get(i));\n\
    \                    result.remove(result.size() - 1);\n                }\n  \
    \          }\n        }\n        return result;", "        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        for (int i = 0; i < k; i++) {\n          \
    \  result.add((long)0);\n        }\n        for (int i = 0; i < arr.size(); i++)\
    \ {\n            for (int j = 0; j < k; j++) {\n                if (arr.get(i)\
    \ > result.get(j)) {\n                    result.add(j, arr.get(i));\n       \
    \             result.remove(k);\n                    break;\n                }\n\
    \            }\n        }\n        return result;", "        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        for (int i = 0; i < k; i++) {\n          \
    \  result.add((long)0);\n        }\n        for (Long item : arr) {\n        \
    \    int index = 0;\n            while (index < k && result.get(index) > item)\
    \ {\n                index++;\n            }\n            if (index < k) {\n \
    \               result.add(index, item);\n                result.remove(k);\n\
    \            }\n        }\n        return result;", "        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        PriorityQueue<Long> pq = new PriorityQueue<Long>();\n\
    \        for (Long i : arr) {\n            pq.add(i);\n        }\n        for\
    \ (int i = 0; i < k; i++) {\n            result.add(pq.poll());\n        }\n \
    \       return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (int i = 0; i < k; i++) {\n            result.add((long)0);\n   \
    \     }\n        for (int i = 0; i < arr.size(); i++) {\n            for (int\
    \ j = 0; j < k; j++) {\n                if (arr.get(i) > result.get(j)) {\n  \
    \                  result.add(j, arr.get(i));\n                    break;\n  \
    \              }\n            }\n        }\n        return result;", "       \
    \ ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0; i <\
    \ k; i++) {\n            result.add((long)0);\n        }\n        for (int i =\
    \ 0; i < arr.size(); i++) {\n            for (int j = 0; j < k; j++) {\n     \
    \           if (arr.get(i) > result.get(j)) {\n                    result.add(j,\
    \ arr.get(i));\n                    result.remove(k);\n                    break;\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   // Your code here\n        return null;", "        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sorted = new ArrayList<Long>(arr);\n\
    \        Collections.sort(sorted);\n        Collections.reverse(sorted);\n   \
    \     for (int i = 0; i < k; i++) {\n            result.add(sorted.get(i));\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (int i = 0; i < k; i++) {\n            result.add((long)0);\n   \
    \     }\n        for (int i = 0; i < arr.size(); i++) {\n            for (int\
    \ j = 0; j < k; j++) {\n                if (arr.get(i) > result.get(j)) {\n  \
    \                  result.add(j, arr.get(i));\n                    result.remove(k);\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (int i = 0; i < k; i++) {\n            result.add((long)0);\n   \
    \     }\n        for (int i = 0; i < arr.size(); i++) {\n            for (int\
    \ j = 0; j < k; j++) {\n                if (arr.get(i) > result.get(j)) {\n  \
    \                  result.add(j, arr.get(i));\n                    break;\n  \
    \              }\n            }\n        }\n        return result;", "       \
    \ ArrayList<Long> result = new ArrayList<Long>();\n        PriorityQueue<Long>\
    \ pq = new PriorityQueue<Long>(Collections.reverseOrder());\n        for (Long\
    \ i : arr) {\n            pq.add(i);\n        }\n        for (int i = 0; i < k;\
    \ i++) {\n            result.add(pq.poll());\n        }\n        return result;",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0;\
    \ i < k; i++) {\n            result.add((long)0);\n        }\n        for (int\
    \ i = 0; i < arr.size(); i++) {\n            for (int j = 0; j < k; j++) {\n \
    \               if (arr.get(i) > result.get(j)) {\n                    result.add(j,\
    \ arr.get(i));\n                    result.remove(k);\n                    break;\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   ArrayList<Long> result = new ArrayList<Long>();\n        PriorityQueue<Long>\
    \ pq = new PriorityQueue<Long>();\n        for (Long i : arr) {\n            pq.add(i);\n\
    \        }\n        for (int i = 0; i < k; i++) {\n            result.add(pq.poll());\n\
    \        }\n        return result;", "        // Your code goes here.\n      \
    \  return null;", "        // Your code here\n        return null;", "       \
    \ ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0; i <\
    \ k; i++) {\n            long max = arr.get(0);\n            int maxIndex = 0;\n\
    \            for (int j = 1; j < arr.size(); j++) {\n                if (arr.get(j)\
    \ > max) {\n                    max = arr.get(j);\n                    maxIndex\
    \ = j;\n                }\n            }\n            result.add(max);\n     \
    \       arr.remove(maxIndex);\n        }\n        return result;", "        //\
    \ Your code here\n        return null;", "        ArrayList<Long> result = new\
    \ ArrayList<Long>();\n        for (int i = 0; i < k; i++) {\n            result.add((long)0);\n\
    \        }\n        for (int i = 0; i < arr.size(); i++) {\n            for (int\
    \ j = 0; j < k; j++) {\n                if (arr.get(i) > result.get(j)) {\n  \
    \                  result.add(j, arr.get(i));\n                    result.remove(k);\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (int i = 0; i < k; i++) {\n            result.add((long)0);\n   \
    \     }\n        for (int i = 0; i < arr.size(); i++) {\n            for (int\
    \ j = 0; j < k; j++) {\n                if (arr.get(i) > result.get(j)) {\n  \
    \                  result.add(j, arr.get(i));\n                    result.remove(k);\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (int i = 0; i < k; i++) {\n            result.add((long)0);\n   \
    \     }\n        for (int i = 0; i < arr.size(); i++) {\n            for (int\
    \ j = 0; j < k; j++) {\n                if (arr.get(i) > result.get(j)) {\n  \
    \                  result.add(j, arr.get(i));\n                    result.remove(k);\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        ArrayList<Long> copy = new ArrayList<Long>(arr);\n        Collections.sort(copy);\n\
    \        Collections.reverse(copy);\n        for (int i = 0; i < k; i++) {\n \
    \           result.add(copy.get(i));\n        }\n        return result;", "  \
    \      ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0;\
    \ i < k; i++) {\n            result.add((long)0);\n        }\n        for (int\
    \ i = 0; i < arr.size(); i++) {\n            for (int j = 0; j < k; j++) {\n \
    \               if (arr.get(i) > result.get(j)) {\n                    result.add(j,\
    \ arr.get(i));\n                    result.remove(k);\n                    break;\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0; i\
    \ < k; i++) {\n            result.add((long)0);\n        }\n        for (int i\
    \ = 0; i < arr.size(); i++) {\n            for (int j = 0; j < k; j++) {\n   \
    \             if (arr.get(i) > result.get(j)) {\n                    result.add(j,\
    \ arr.get(i));\n                    break;\n                }\n            }\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (int i = 0; i < k; i++) {\n            long max = arr.get(0);\n \
    \           int maxIndex = 0;\n            for (int j = 1; j < arr.size(); j++)\
    \ {\n                if (arr.get(j) > max) {\n                    max = arr.get(j);\n\
    \                    maxIndex = j;\n                }\n            }\n       \
    \     result.add(max);\n            arr.remove(maxIndex);\n        }\n       \
    \ return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (k == 0) {\n            return result;\n        }\n        if (k ==\
    \ arr.size()) {\n            return arr;\n        }\n        PriorityQueue<Long>\
    \ pq = new PriorityQueue<Long>(new Comparator<Long>() {\n            public int\
    \ compare(Long a, Long b) {\n                return a.compareTo(b);\n        \
    \    }\n        });\n        for (Long i : arr) {\n            pq.add(i);\n  \
    \      }\n        for (int i = 0; i < k; i++) {\n            result.add(pq.poll());\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted = new ArrayList<Long>(arr);\n        Collections.sort(sorted);\n\
    \        Collections.reverse(sorted);\n        for (int i = 0; i < k; i++) {\n\
    \            result.add(sorted.get(i));\n        }\n        return result;", " \
    \       ArrayList<Long> result = new ArrayList<Long>();\n        if (k == 0) {\n\
    \            return result;\n        }\n        if (k == arr.size()) {\n     \
    \       return arr;\n        }\n        PriorityQueue<Long> pq = new PriorityQueue<Long>(Collections.reverseOrder());\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            pq.add(arr.get(i));\n\
    \        }\n        for (int i = 0; i < k; i++) {\n            result.add(pq.poll());\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (int i = 0; i < k; i++) {\n            result.add((long)0);\n   \
    \     }\n        for (int i = 0; i < arr.size(); i++) {\n            for (int\
    \ j = 0; j < k; j++) {\n                if (arr.get(i) > result.get(j)) {\n  \
    \                  result.add(j, arr.get(i));\n                    result.remove(k);\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        PriorityQueue<Long> pq = new PriorityQueue<Long>(arr.size(), Collections.reverseOrder());\n\
    \        for (Long i : arr) {\n            pq.add(i);\n        }\n        for\
    \ (int i = 0; i < k; i++) {\n            result.add(pq.poll());\n        }\n \
    \       return result;", "        // This is a stub. Please replace it with your\
    \ code.\n        return arr;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (k > arr.size()) {\n            return result;\n        }\n      \
    \  PriorityQueue<Long> queue = new PriorityQueue<Long>(arr.size(), Collections.reverseOrder());\n\
    \        queue.addAll(arr);\n        for (int i = 0; i < k; i++) {\n         \
    \   result.add(queue.poll());\n        }\n        return result;", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        for (int i = 0; i < k; i++) {\n   \
    \         result.add((long)0);\n        }\n        for (int i = 0; i < arr.size();\
    \ i++) {\n            for (int j = 0; j < k; j++) {\n                if (arr.get(i)\
    \ > result.get(j)) {\n                    result.add(j, arr.get(i));\n       \
    \             break;\n                }\n            }\n        }\n        return\
    \ result;", "        ArrayList<Long> result = new ArrayList<Long>();\n       \
    \ for (int i = 0; i < k; i++) {\n            result.add((long)0);\n        }\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            for (int j = 0; j\
    \ < k; j++) {\n                if (arr.get(i) > result.get(j)) {\n           \
    \         result.add(j, arr.get(i));\n                    result.remove(k);\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (int i = 0; i < k; i++) {\n            result.add((long)0);\n   \
    \     }\n        for (int i = 0; i < arr.size(); i++) {\n            for (int\
    \ j = 0; j < k; j++) {\n                if (arr.get(i) > result.get(j)) {\n  \
    \                  result.add(j, arr.get(i));\n                    result.remove(k);\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        PriorityQueue<Long> pq = new PriorityQueue<Long>();\n        for (Long\
    \ x : arr) {\n            pq.add(x);\n            if (pq.size() > k) {\n     \
    \           pq.poll();\n            }\n        }\n        while (!pq.isEmpty())\
    \ {\n            result.add(pq.poll());\n        }\n        Collections.reverse(result);\n\
    \        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (int i = 0; i < k; i++) {\n            result.add((long)0);\n   \
    \     }\n        for (int i = 0; i < arr.size(); i++) {\n            for (int\
    \ j = 0; j < k; j++) {\n                if (arr.get(i) > result.get(j)) {\n  \
    \                  result.add(j, arr.get(i));\n                    result.remove(k);\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (int i = 0; i < k; i++) {\n            result.add((long)0);\n   \
    \     }\n        for (int i = 0; i < arr.size(); i++) {\n            for (int\
    \ j = 0; j < k; j++) {\n                if (arr.get(i) > result.get(j)) {\n  \
    \                  result.add(j, arr.get(i));\n                    result.remove(k);\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (long i = 0; i < k; i++) {\n            result.add((long)0);\n  \
    \      }\n        for (long i = 0; i < arr.size(); i++) {\n            for (long\
    \ j = 0; j < k; j++) {\n                if (arr.get((int)i) > result.get((int)j))\
    \ {\n                    result.add((int)j, arr.get((int)i));\n              \
    \      break;\n                }\n            }\n        }\n        return result;",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0;\
    \ i < k; i++) {\n            result.add((long)0);\n        }\n        for (int\
    \ i = 0; i < arr.size(); i++) {\n            for (int j = 0; j < k; j++) {\n \
    \               if (arr.get(i) > result.get(j)) {\n                    result.add(j,\
    \ arr.get(i));\n                    result.remove(k);\n                    break;\n\
    \                }\n            }\n        }\n        return result;"]
stop_tokens:
- "\n    }\n"
